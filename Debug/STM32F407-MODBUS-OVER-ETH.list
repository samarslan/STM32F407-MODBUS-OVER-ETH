
STM32F407-MODBUS-OVER-ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eacc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bdc  0800ec5c  0800ec5c  0000fc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011838  08011838  00013088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011838  08011838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011840  08011840  00013088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011840  08011840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011844  08011844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08011848  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013088  2**0
                  CONTENTS
 10 .bss          00008470  20000088  20000088  00013088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200084f8  200084f8  00013088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000178e9  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ac0  00000000  00000000  0002a9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  0002f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df1  00000000  00000000  000305f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c2d3  00000000  00000000  000313e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f094  00000000  00000000  0005d6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8c68  00000000  00000000  0007c748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001553b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e5c  00000000  00000000  001553f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0015a250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec44 	.word	0x0800ec44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800ec44 	.word	0x0800ec44

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <send_hello_udp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_hello_udp(void)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
	if (hello_upcb == NULL) return;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <send_hello_udp+0x70>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d02c      	beq.n	8000634 <send_hello_udp+0x68>

	const char *msg = "Hello World from STM32F407";
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <send_hello_udp+0x74>)
 80005dc:	607b      	str	r3, [r7, #4]
	struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, strlen(msg), PBUF_RAM);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff fe00 	bl	80001e4 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80005ec:	4619      	mov	r1, r3
 80005ee:	2036      	movs	r0, #54	@ 0x36
 80005f0:	f004 fbce 	bl	8004d90 <pbuf_alloc>
 80005f4:	6038      	str	r0, [r7, #0]
	if (p != NULL) {
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d01c      	beq.n	8000636 <send_hello_udp+0x6a>
		memcpy(p->payload, msg, strlen(msg));
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685c      	ldr	r4, [r3, #4]
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff fdef 	bl	80001e4 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	4620      	mov	r0, r4
 800060e:	f00d fcec 	bl	800dfea <memcpy>
		udp_sendto(hello_upcb, p, &dest_ip, 5005);
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <send_hello_udp+0x70>)
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	f241 338d 	movw	r3, #5005	@ 0x138d
 800061a:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <send_hello_udp+0x78>)
 800061c:	6839      	ldr	r1, [r7, #0]
 800061e:	f00a fd9d 	bl	800b15c <udp_sendto>
		pbuf_free(p);
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	f004 fe98 	bl	8005358 <pbuf_free>

		HAL_GPIO_TogglePin(LED_PORT, LED_GREEN_PIN);
 8000628:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800062c:	4806      	ldr	r0, [pc, #24]	@ (8000648 <send_hello_udp+0x7c>)
 800062e:	f002 f9d6 	bl	80029de <HAL_GPIO_TogglePin>
 8000632:	e000      	b.n	8000636 <send_hello_udp+0x6a>
	if (hello_upcb == NULL) return;
 8000634:	bf00      	nop
	}
}
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	200000a4 	.word	0x200000a4
 8000640:	0800ec5c 	.word	0x0800ec5c
 8000644:	200000a8 	.word	0x200000a8
 8000648:	40020c00 	.word	0x40020c00

0800064c <udp_rx_callback>:

static void udp_rx_callback(void *arg, struct udp_pcb *pcb,
                            struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	@ 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d025      	beq.n	80006ac <udp_rx_callback+0x60>
        // Copy incoming data into buffer
        char buffer[16] = {0};  // big enough for "Hi!" + null terminator
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
        u16_t len = (p->tot_len < sizeof(buffer)-1) ? p->tot_len : sizeof(buffer)-1;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	891b      	ldrh	r3, [r3, #8]
 8000672:	2b0f      	cmp	r3, #15
 8000674:	bf28      	it	cs
 8000676:	230f      	movcs	r3, #15
 8000678:	84fb      	strh	r3, [r7, #38]	@ 0x26

        pbuf_copy_partial(p, buffer, len, 0);
 800067a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800067c:	f107 0114 	add.w	r1, r7, #20
 8000680:	2300      	movs	r3, #0
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f005 f862 	bl	800574c <pbuf_copy_partial>

        // Check if it's exactly "Hi!"
        if (strcmp(buffer, "Hi!") == 0) {
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4909      	ldr	r1, [pc, #36]	@ (80006b4 <udp_rx_callback+0x68>)
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fd9e 	bl	80001d0 <strcmp>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d105      	bne.n	80006a6 <udp_rx_callback+0x5a>
            HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, GPIO_PIN_SET);  // light red LED
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <udp_rx_callback+0x6c>)
 80006a2:	f002 f983 	bl	80029ac <HAL_GPIO_WritePin>
        }

        // Free memory or you’ll leak
        pbuf_free(p);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f004 fe56 	bl	8005358 <pbuf_free>
    }
}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	@ 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	0800ec78 	.word	0x0800ec78
 80006b8:	40020c00 	.word	0x40020c00

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c2:	f000 fbdf 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c6:	f000 f84d 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ca:	f000 f8b3 	bl	8000834 <MX_GPIO_Init>
  MX_LWIP_Init();
 80006ce:	f002 fde9 	bl	80032a4 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

	hello_upcb = udp_new();
 80006d2:	f00a ffa1 	bl	800b618 <udp_new>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <main+0x8c>)
 80006da:	6013      	str	r3, [r2, #0]
	if (hello_upcb != NULL) {
 80006dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <main+0x8c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d012      	beq.n	800070a <main+0x4e>
	    udp_bind(hello_upcb, IP_ADDR_ANY, 5005);
 80006e4:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <main+0x8c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f241 328d 	movw	r2, #5005	@ 0x138d
 80006ec:	4917      	ldr	r1, [pc, #92]	@ (800074c <main+0x90>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00a feea 	bl	800b4c8 <udp_bind>
	    udp_recv(hello_upcb, udp_rx_callback, NULL);  // register RX handler
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <main+0x8c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2200      	movs	r2, #0
 80006fa:	4915      	ldr	r1, [pc, #84]	@ (8000750 <main+0x94>)
 80006fc:	4618      	mov	r0, r3
 80006fe:	f00a ff6b 	bl	800b5d8 <udp_recv>
	    IP4_ADDR(&dest_ip, 192,168,1,100);            // still used for send
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <main+0x98>)
 8000704:	4a14      	ldr	r2, [pc, #80]	@ (8000758 <main+0x9c>)
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	e001      	b.n	800070e <main+0x52>
	}else{
		Error_Handler();
 800070a:	f000 f941 	bl	8000990 <Error_Handler>
	}

	HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000714:	4811      	ldr	r0, [pc, #68]	@ (800075c <main+0xa0>)
 8000716:	f002 f949 	bl	80029ac <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t lastSend = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
	while (1)
	{
		MX_LWIP_Process(); // important: handles incoming/outgoing packets
 800071e:	f002 ff01 	bl	8003524 <MX_LWIP_Process>

		if (broadcastUDPFlag && HAL_GetTick() - lastSend >= 1000) {
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <main+0xa4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f9      	beq.n	800071e <main+0x62>
 800072a:	f000 fc11 	bl	8000f50 <HAL_GetTick>
 800072e:	4602      	mov	r2, r0
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000738:	d3f1      	bcc.n	800071e <main+0x62>
			send_hello_udp();
 800073a:	f7ff ff47 	bl	80005cc <send_hello_udp>
			lastSend = HAL_GetTick();
 800073e:	f000 fc07 	bl	8000f50 <HAL_GetTick>
 8000742:	6078      	str	r0, [r7, #4]
		MX_LWIP_Process(); // important: handles incoming/outgoing packets
 8000744:	e7eb      	b.n	800071e <main+0x62>
 8000746:	bf00      	nop
 8000748:	200000a4 	.word	0x200000a4
 800074c:	08011748 	.word	0x08011748
 8000750:	0800064d 	.word	0x0800064d
 8000754:	200000a8 	.word	0x200000a8
 8000758:	6401a8c0 	.word	0x6401a8c0
 800075c:	40020c00 	.word	0x40020c00
 8000760:	200000ac 	.word	0x200000ac

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	@ 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	@ 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f00d fbc3 	bl	800defe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b27      	ldr	r3, [pc, #156]	@ (800082c <SystemClock_Config+0xc8>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	4a26      	ldr	r2, [pc, #152]	@ (800082c <SystemClock_Config+0xc8>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	@ 0x40
 8000798:	4b24      	ldr	r3, [pc, #144]	@ (800082c <SystemClock_Config+0xc8>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <SystemClock_Config+0xcc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a20      	ldr	r2, [pc, #128]	@ (8000830 <SystemClock_Config+0xcc>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <SystemClock_Config+0xcc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2310      	movs	r3, #16
 80007ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	2302      	movs	r3, #2
 80007ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d4:	2308      	movs	r3, #8
 80007d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80007d8:	2340      	movs	r3, #64	@ 0x40
 80007da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 f92b 	bl	8002a44 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f4:	f000 f8cc 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000800:	2380      	movs	r3, #128	@ 0x80
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2101      	movs	r1, #1
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fb8e 	bl	8002f34 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800081e:	f000 f8b7 	bl	8000990 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	@ 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b32      	ldr	r3, [pc, #200]	@ (8000918 <MX_GPIO_Init+0xe4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a31      	ldr	r2, [pc, #196]	@ (8000918 <MX_GPIO_Init+0xe4>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b2f      	ldr	r3, [pc, #188]	@ (8000918 <MX_GPIO_Init+0xe4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <MX_GPIO_Init+0xe4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a2a      	ldr	r2, [pc, #168]	@ (8000918 <MX_GPIO_Init+0xe4>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_GPIO_Init+0xe4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b24      	ldr	r3, [pc, #144]	@ (8000918 <MX_GPIO_Init+0xe4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a23      	ldr	r2, [pc, #140]	@ (8000918 <MX_GPIO_Init+0xe4>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_GPIO_Init+0xe4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_GPIO_Init+0xe4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <MX_GPIO_Init+0xe4>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_GPIO_Init+0xe4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008c0:	4816      	ldr	r0, [pc, #88]	@ (800091c <MX_GPIO_Init+0xe8>)
 80008c2:	f002 f873 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c6:	2301      	movs	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4811      	ldr	r0, [pc, #68]	@ (8000920 <MX_GPIO_Init+0xec>)
 80008dc:	f001 feca 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008e0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4808      	ldr	r0, [pc, #32]	@ (800091c <MX_GPIO_Init+0xe8>)
 80008fa:	f001 febb 	bl	8002674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2006      	movs	r0, #6
 8000904:	f000 fc2f 	bl	8001166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000908:	2006      	movs	r0, #6
 800090a:	f000 fc48 	bl	800119e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	@ 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	40020000 	.word	0x40020000

08000924 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastPress = 0;

    if (GPIO_Pin == GPIO_PIN_0) {
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d122      	bne.n	800097a <HAL_GPIO_EXTI_Callback+0x56>
        uint32_t now = HAL_GetTick();
 8000934:	f000 fb0c 	bl	8000f50 <HAL_GetTick>
 8000938:	60f8      	str	r0, [r7, #12]
        if (now - lastPress > 100) {
 800093a:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_GPIO_EXTI_Callback+0x60>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2b64      	cmp	r3, #100	@ 0x64
 8000944:	d919      	bls.n	800097a <HAL_GPIO_EXTI_Callback+0x56>
            broadcastUDPFlag ^= 1;    // toggle flag
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <HAL_GPIO_EXTI_Callback+0x64>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f083 0301 	eor.w	r3, r3, #1
 800094e:	4a0e      	ldr	r2, [pc, #56]	@ (8000988 <HAL_GPIO_EXTI_Callback+0x64>)
 8000950:	6013      	str	r3, [r2, #0]
            if (broadcastUDPFlag) {
 8000952:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <HAL_GPIO_EXTI_Callback+0x64>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d006      	beq.n	8000968 <HAL_GPIO_EXTI_Callback+0x44>
                HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000960:	480a      	ldr	r0, [pc, #40]	@ (800098c <HAL_GPIO_EXTI_Callback+0x68>)
 8000962:	f002 f823 	bl	80029ac <HAL_GPIO_WritePin>
 8000966:	e005      	b.n	8000974 <HAL_GPIO_EXTI_Callback+0x50>
            } else {
                HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096e:	4807      	ldr	r0, [pc, #28]	@ (800098c <HAL_GPIO_EXTI_Callback+0x68>)
 8000970:	f002 f81c 	bl	80029ac <HAL_GPIO_WritePin>
            }
            lastPress = now;
 8000974:	4a03      	ldr	r2, [pc, #12]	@ (8000984 <HAL_GPIO_EXTI_Callback+0x60>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6013      	str	r3, [r2, #0]
        }
    }
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000b0 	.word	0x200000b0
 8000988:	200000ac 	.word	0x200000ac
 800098c:	40020c00 	.word	0x40020c00

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <MemManage_Handler+0x4>

08000a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a42:	f000 fa71 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f001 ffe0 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <ETH_IRQHandler+0x10>)
 8000a5e:	f000 ff1b 	bl	8001898 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20004bd8 	.word	0x20004bd8

08000a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return 1;
 8000a70:	2301      	movs	r3, #1
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_kill>:

int _kill(int pid, int sig)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a86:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <_kill+0x20>)
 8000a88:	2216      	movs	r2, #22
 8000a8a:	601a      	str	r2, [r3, #0]
  return -1;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	200084e8 	.word	0x200084e8

08000aa0 <_exit>:

void _exit (int status)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ffe5 	bl	8000a7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ab2:	bf00      	nop
 8000ab4:	e7fd      	b.n	8000ab2 <_exit+0x12>

08000ab6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	e00a      	b.n	8000ade <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ac8:	f3af 8000 	nop.w
 8000acc:	4601      	mov	r1, r0
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	60ba      	str	r2, [r7, #8]
 8000ad4:	b2ca      	uxtb	r2, r1
 8000ad6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3301      	adds	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	dbf0      	blt.n	8000ac8 <_read+0x12>
  }

  return len;
 8000ae6:	687b      	ldr	r3, [r7, #4]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e009      	b.n	8000b16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	60ba      	str	r2, [r7, #8]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf1      	blt.n	8000b02 <_write+0x12>
  }
  return len;
 8000b1e:	687b      	ldr	r3, [r7, #4]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_close>:

int _close(int file)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b50:	605a      	str	r2, [r3, #4]
  return 0;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_isatty>:

int _isatty(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b085      	sub	sp, #20
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	@ (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d205      	bcs.n	8000bcc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <_sbrk+0x6c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	371c      	adds	r7, #28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	20020000 	.word	0x20020000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	200000b4 	.word	0x200000b4
 8000bf8:	200084f8 	.word	0x200084f8
 8000bfc:	200084e8 	.word	0x200084e8

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c28:	f7ff ffea 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	@ (8000c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f00d f9a3 	bl	800df9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fd31 	bl	80006bc <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c68:	08011848 	.word	0x08011848
  ldr r2, =_sbss
 8000c6c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c70:	200084f8 	.word	0x200084f8

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>

08000c76 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00b      	beq.n	8000c9e <LAN8742_RegisterBusIO+0x28>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <LAN8742_RegisterBusIO+0x28>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <LAN8742_RegisterBusIO+0x28>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e014      	b.n	8000cce <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	691a      	ldr	r2, [r3, #16]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d139      	bne.n	8000d6a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2220      	movs	r2, #32
 8000d08:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e01c      	b.n	8000d4a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	f107 020c 	add.w	r2, r7, #12
 8000d18:	2112      	movs	r1, #18
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	4798      	blx	r3
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da03      	bge.n	8000d2c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000d24:	f06f 0304 	mvn.w	r3, #4
 8000d28:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d2a:	e00b      	b.n	8000d44 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 031f 	and.w	r3, r3, #31
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d105      	bne.n	8000d44 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
         break;
 8000d42:	e005      	b.n	8000d50 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3301      	adds	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2b1f      	cmp	r3, #31
 8000d4e:	d9df      	bls.n	8000d10 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b1f      	cmp	r3, #31
 8000d56:	d902      	bls.n	8000d5e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d58:	f06f 0302 	mvn.w	r3, #2
 8000d5c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000d6a:	693b      	ldr	r3, [r7, #16]
 }
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	6810      	ldr	r0, [r2, #0]
 8000d88:	f107 020c 	add.w	r2, r7, #12
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4798      	blx	r3
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	da02      	bge.n	8000d9c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d96:	f06f 0304 	mvn.w	r3, #4
 8000d9a:	e06e      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	6810      	ldr	r0, [r2, #0]
 8000da4:	f107 020c 	add.w	r2, r7, #12
 8000da8:	2101      	movs	r1, #1
 8000daa:	4798      	blx	r3
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	da02      	bge.n	8000db8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000db2:	f06f 0304 	mvn.w	r3, #4
 8000db6:	e060      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e059      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6810      	ldr	r0, [r2, #0]
 8000dce:	f107 020c 	add.w	r2, r7, #12
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4798      	blx	r3
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	da02      	bge.n	8000de2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ddc:	f06f 0304 	mvn.w	r3, #4
 8000de0:	e04b      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d11b      	bne.n	8000e24 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <LAN8742_GetLinkState+0x90>
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e00:	2302      	movs	r3, #2
 8000e02:	e03a      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e033      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	e02c      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e20:	2305      	movs	r3, #5
 8000e22:	e02a      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6810      	ldr	r0, [r2, #0]
 8000e2c:	f107 020c 	add.w	r2, r7, #12
 8000e30:	211f      	movs	r1, #31
 8000e32:	4798      	blx	r3
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da02      	bge.n	8000e40 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e3a:	f06f 0304 	mvn.w	r3, #4
 8000e3e:	e01c      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	e015      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f003 031c 	and.w	r3, r3, #28
 8000e54:	2b18      	cmp	r3, #24
 8000e56:	d101      	bne.n	8000e5c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	e00e      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 031c 	and.w	r3, r3, #28
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d101      	bne.n	8000e6a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e007      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f003 031c 	and.w	r3, r3, #28
 8000e70:	2b14      	cmp	r3, #20
 8000e72:	d101      	bne.n	8000e78 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e74:	2304      	movs	r3, #4
 8000e76:	e000      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e78:	2305      	movs	r3, #5
    }
  }
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f94f 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fd70 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f967 	bl	80011ba <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f92f 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200000b8 	.word	0x200000b8

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200000b8 	.word	0x200000b8

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	@ (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	@ (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	@ 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e08a      	b.n	80012fc <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2220      	movs	r2, #32
 80011f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f002 fb57 	bl	80038ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b40      	ldr	r3, [pc, #256]	@ (8001304 <HAL_ETH_Init+0x130>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a3f      	ldr	r2, [pc, #252]	@ (8001304 <HAL_ETH_Init+0x130>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b3d      	ldr	r3, [pc, #244]	@ (8001304 <HAL_ETH_Init+0x130>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <HAL_ETH_Init+0x134>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a3a      	ldr	r2, [pc, #232]	@ (8001308 <HAL_ETH_Init+0x134>)
 8001220:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001224:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001226:	4b38      	ldr	r3, [pc, #224]	@ (8001308 <HAL_ETH_Init+0x134>)
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	4936      	ldr	r1, [pc, #216]	@ (8001308 <HAL_ETH_Init+0x134>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001234:	4b34      	ldr	r3, [pc, #208]	@ (8001308 <HAL_ETH_Init+0x134>)
 8001236:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800124e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001250:	f7ff fe7e 	bl	8000f50 <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001256:	e011      	b.n	800127c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001258:	f7ff fe7a 	bl	8000f50 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001266:	d909      	bls.n	800127c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2204      	movs	r2, #4
 800126c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	22e0      	movs	r2, #224	@ 0xe0
 8001274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e03f      	b.n	80012fc <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1e4      	bne.n	8001258 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 ff32 	bl	80020f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 ffdd 	bl	8002254 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f001 f833 	bl	8002306 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	461a      	mov	r2, r3
 80012a6:	2100      	movs	r1, #0
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 ff9b 	bl	80021e4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80012bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80012d2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80012e6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2210      	movs	r2, #16
 80012f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800

0800130c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800131a:	2b10      	cmp	r3, #16
 800131c:	d161      	bne.n	80013e2 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2220      	movs	r2, #32
 8001322:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2204      	movs	r2, #4
 8001330:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fa2c 	bl	8001790 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff fe11 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001360:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001364:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800137c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fd56 	bl	8001e30 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0208 	orr.w	r2, r2, #8
 8001392:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff fde3 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0204 	orr.w	r2, r2, #4
 80013b8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80013cc:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80013d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013d4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2240      	movs	r2, #64	@ 0x40
 80013da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
  }
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013fa:	2b40      	cmp	r3, #64	@ 0x40
 80013fc:	d170      	bne.n	80014e0 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2220      	movs	r2, #32
 8001402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001418:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 800141c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001420:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001434:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001438:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	f023 0302 	bic.w	r3, r3, #2
 800144c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001450:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0204 	bic.w	r2, r2, #4
 8001460:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff fd7c 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fcd9 	bl	8001e30 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0208 	bic.w	r2, r2, #8
 800148c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff fd66 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e00e      	b.n	80014c8 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	3212      	adds	r2, #18
 80014b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d9ed      	bls.n	80014aa <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2210      	movs	r2, #16
 80014d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	e000      	b.n	80014e2 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
  }
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d109      	bne.n	8001510 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001502:	f043 0201 	orr.w	r2, r3, #1
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e07c      	b.n	800160a <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001516:	2b40      	cmp	r3, #64	@ 0x40
 8001518:	d176      	bne.n	8001608 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800151a:	2200      	movs	r2, #0
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 ff60 	bl	80023e4 <ETH_Prepare_Tx_Descriptors>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d009      	beq.n	800153e <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001530:	f043 0202 	orr.w	r2, r3, #2
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e065      	b.n	800160a <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 800153e:	f3bf 8f4f 	dsb	sy
}
 8001542:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3206      	adds	r2, #6
 800154c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001550:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	629a      	str	r2, [r3, #40]	@ 0x28
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001560:	2b03      	cmp	r3, #3
 8001562:	d904      	bls.n	800156e <HAL_ETH_Transmit+0x84>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001568:	1f1a      	subs	r2, r3, #4
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3106      	adds	r1, #6
 800157a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800157e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001582:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001584:	f7ff fce4 	bl	8000f50 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800158a:	e037      	b.n	80015fc <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d011      	beq.n	80015c2 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a4:	f043 0208 	orr.w	r2, r3, #8
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e023      	b.n	800160a <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d018      	beq.n	80015fc <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015ca:	f7ff fcc1 	bl	8000f50 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d302      	bcc.n	80015e0 <HAL_ETH_Transmit+0xf6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	f043 0204 	orr.w	r2, r3, #4
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80015f6:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e006      	b.n	800160a <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	dbc3      	blt.n	800158c <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	e000      	b.n	800160a <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
  }
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b088      	sub	sp, #32
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e0a4      	b.n	8001788 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001644:	2b40      	cmp	r3, #64	@ 0x40
 8001646:	d001      	beq.n	800164c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e09d      	b.n	8001788 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001650:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	3212      	adds	r2, #18
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001662:	f1c3 0304 	rsb	r3, r3, #4
 8001666:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001668:	e066      	b.n	8001738 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	699a      	ldr	r2, [r3, #24]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <HAL_ETH_ReadData+0x88>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001696:	2b00      	cmp	r3, #0
 8001698:	d03c      	beq.n	8001714 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0c1b      	lsrs	r3, r3, #16
 80016b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016bc:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016ee:	461a      	mov	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	f002 fa92 	bl	8003c1c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	441a      	add	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	3301      	adds	r3, #1
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	2b03      	cmp	r3, #3
 800171e:	d902      	bls.n	8001726 <HAL_ETH_ReadData+0x114>
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	3b04      	subs	r3, #4
 8001724:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	3212      	adds	r2, #18
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800173c:	2b00      	cmp	r3, #0
 800173e:	db06      	blt.n	800174e <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d202      	bcs.n	800174e <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001748:	7cfb      	ldrb	r3, [r7, #19]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d08d      	beq.n	800166a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	441a      	add	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f814 	bl	8001790 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800176e:	7cfb      	ldrb	r3, [r7, #19]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d108      	bne.n	8001786 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800179c:	2301      	movs	r3, #1
 800179e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017a4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	3212      	adds	r2, #18
 80017ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017b6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017b8:	e044      	b.n	8001844 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d112      	bne.n	80017e8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 f9f8 	bl	8003bbc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	74fb      	strb	r3, [r7, #19]
 80017d6:	e007      	b.n	80017e8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	461a      	mov	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	461a      	mov	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80017e8:	7cfb      	ldrb	r3, [r7, #19]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d02a      	beq.n	8001844 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d108      	bne.n	8001808 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80017fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	6053      	str	r3, [r2, #4]
 8001806:	e005      	b.n	8001814 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	3301      	adds	r3, #1
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d902      	bls.n	8001832 <ETH_UpdateDescriptor+0xa2>
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	3b04      	subs	r3, #4
 8001830:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	3212      	adds	r2, #18
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	617b      	str	r3, [r7, #20]
      desccount--;
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	3b01      	subs	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <ETH_UpdateDescriptor+0xc0>
 800184a:	7cfb      	ldrb	r3, [r7, #19]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1b4      	bne.n	80017ba <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	429a      	cmp	r2, r3
 8001858:	d01a      	beq.n	8001890 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3303      	adds	r3, #3
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001864:	f3bf 8f5f 	dmb	sy
}
 8001868:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6919      	ldr	r1, [r3, #16]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	18ca      	adds	r2, r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001882:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001890:	bf00      	nop
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80018c0:	4b4b      	ldr	r3, [pc, #300]	@ (80019f0 <HAL_ETH_IRQHandler+0x158>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00e      	beq.n	80018ee <HAL_ETH_IRQHandler+0x56>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b43      	ldr	r3, [pc, #268]	@ (80019f4 <HAL_ETH_IRQHandler+0x15c>)
 80018e6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f891 	bl	8001a10 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00f      	beq.n	8001918 <HAL_ETH_IRQHandler+0x80>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800190a:	461a      	mov	r2, r3
 800190c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001910:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f872 	bl	80019fc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d042      	beq.n	80019a8 <HAL_ETH_IRQHandler+0x110>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d03d      	beq.n	80019a8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001932:	f043 0208 	orr.w	r2, r3, #8
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d01a      	beq.n	800197c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <HAL_ETH_IRQHandler+0x160>)
 8001952:	4013      	ands	r3, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800196c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001970:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	22e0      	movs	r2, #224	@ 0xe0
 8001976:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800197a:	e012      	b.n	80019a2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	f248 6380 	movw	r3, #34432	@ 0x8680
 800198a:	4013      	ands	r3, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800199a:	461a      	mov	r2, r3
 800199c:	f248 6380 	movw	r3, #34432	@ 0x8680
 80019a0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f83e 	bl	8001a24 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00e      	beq.n	80019d0 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f838 	bl	8001a38 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_ETH_IRQHandler+0x158>)
 80019dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019e0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f832 	bl	8001a4c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80019e8:	bf00      	nop
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40013c00 	.word	0x40013c00
 80019f4:	00010040 	.word	0x00010040
 80019f8:	007e2000 	.word	0x007e2000

080019fc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 031c 	and.w	r3, r3, #28
 8001a7c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	02db      	lsls	r3, r3, #11
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	019b      	lsls	r3, r3, #6
 8001a8e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f023 0302 	bic.w	r3, r3, #2
 8001a9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001ab0:	f7ff fa4e 	bl	8000f50 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ab6:	e00d      	b.n	8001ad4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ab8:	f7ff fa4a 	bl	8000f50 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac6:	d301      	bcc.n	8001acc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e010      	b.n	8001aee <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1ec      	bne.n	8001ab8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 031c 	and.w	r3, r3, #28
 8001b12:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	02db      	lsls	r3, r3, #11
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	019b      	lsls	r3, r3, #6
 8001b24:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b50:	f7ff f9fe 	bl	8000f50 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b56:	e00d      	b.n	8001b74 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b58:	f7ff f9fa 	bl	8000f50 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b66:	d301      	bcc.n	8001b6c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e009      	b.n	8001b80 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ec      	bne.n	8001b58 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0e6      	b.n	8001d6a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf14      	ite	ne
 8001bf0:	2301      	movne	r3, #1
 8001bf2:	2300      	moveq	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf0c      	ite	eq
 8001c0a:	2301      	moveq	r3, #1
 8001c0c:	2300      	movne	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf14      	ite	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	2300      	moveq	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bf0c      	ite	eq
 8001c5a:	2301      	moveq	r3, #1
 8001c5c:	2300      	movne	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	bf14      	ite	ne
 8001c8e:	2301      	movne	r3, #1
 8001c90:	2300      	moveq	r3, #0
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf14      	ite	ne
 8001cb6:	2301      	movne	r3, #1
 8001cb8:	2300      	moveq	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf0c      	ite	eq
 8001d06:	2301      	moveq	r3, #1
 8001d08:	2300      	movne	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00b      	b.n	8001da2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d90:	2b10      	cmp	r3, #16
 8001d92:	d105      	bne.n	8001da0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d94:	6839      	ldr	r1, [r7, #0]
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f870 	bl	8001e7c <ETH_SetMACConfig>

    return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e000      	b.n	8001da2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
  }
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 031c 	bic.w	r3, r3, #28
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001dc4:	f001 fa62 	bl	800328c <HAL_RCC_GetHCLKFreq>
 8001dc8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4a14      	ldr	r2, [pc, #80]	@ (8001e20 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d804      	bhi.n	8001ddc <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	e019      	b.n	8001e10 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4a11      	ldr	r2, [pc, #68]	@ (8001e24 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d204      	bcs.n	8001dee <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f043 030c 	orr.w	r3, r3, #12
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e010      	b.n	8001e10 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e28 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d90c      	bls.n	8001e10 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e2c <HAL_ETH_SetMDIOClockRange+0x80>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d804      	bhi.n	8001e08 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e003      	b.n	8001e10 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f043 0310 	orr.w	r3, r3, #16
 8001e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	611a      	str	r2, [r3, #16]
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	02160ebf 	.word	0x02160ebf
 8001e24:	03938700 	.word	0x03938700
 8001e28:	05f5e0ff 	.word	0x05f5e0ff
 8001e2c:	08f0d17f 	.word	0x08f0d17f

08001e30 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e52:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff f881 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e70:	6193      	str	r3, [r2, #24]
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4b53      	ldr	r3, [pc, #332]	@ (8001fe0 <ETH_SetMACConfig+0x164>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	7b9b      	ldrb	r3, [r3, #14]
 8001e9a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	7c12      	ldrb	r2, [r2, #16]
 8001ea0:	2a00      	cmp	r2, #0
 8001ea2:	d102      	bne.n	8001eaa <ETH_SetMACConfig+0x2e>
 8001ea4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ea8:	e000      	b.n	8001eac <ETH_SetMACConfig+0x30>
 8001eaa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001eac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	7c52      	ldrb	r2, [r2, #17]
 8001eb2:	2a00      	cmp	r2, #0
 8001eb4:	d102      	bne.n	8001ebc <ETH_SetMACConfig+0x40>
 8001eb6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001eba:	e000      	b.n	8001ebe <ETH_SetMACConfig+0x42>
 8001ebc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ebe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ec4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	7fdb      	ldrb	r3, [r3, #31]
 8001eca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ecc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ed2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	7f92      	ldrb	r2, [r2, #30]
 8001ed8:	2a00      	cmp	r2, #0
 8001eda:	d102      	bne.n	8001ee2 <ETH_SetMACConfig+0x66>
 8001edc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ee0:	e000      	b.n	8001ee4 <ETH_SetMACConfig+0x68>
 8001ee2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ee4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	7f1b      	ldrb	r3, [r3, #28]
 8001eea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001eec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ef2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	791b      	ldrb	r3, [r3, #4]
 8001ef8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001efa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f02:	2a00      	cmp	r2, #0
 8001f04:	d102      	bne.n	8001f0c <ETH_SetMACConfig+0x90>
 8001f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f0a:	e000      	b.n	8001f0e <ETH_SetMACConfig+0x92>
 8001f0c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	7bdb      	ldrb	r3, [r3, #15]
 8001f14:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f16:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f24:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f26:	4313      	orrs	r3, r2
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7ff f812 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f62:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	d101      	bne.n	8001f72 <ETH_SetMACConfig+0xf6>
 8001f6e:	2280      	movs	r2, #128	@ 0x80
 8001f70:	e000      	b.n	8001f74 <ETH_SetMACConfig+0xf8>
 8001f72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f74:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f82:	2a01      	cmp	r2, #1
 8001f84:	d101      	bne.n	8001f8a <ETH_SetMACConfig+0x10e>
 8001f86:	2208      	movs	r2, #8
 8001f88:	e000      	b.n	8001f8c <ETH_SetMACConfig+0x110>
 8001f8a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001f94:	2a01      	cmp	r2, #1
 8001f96:	d101      	bne.n	8001f9c <ETH_SetMACConfig+0x120>
 8001f98:	2204      	movs	r2, #4
 8001f9a:	e000      	b.n	8001f9e <ETH_SetMACConfig+0x122>
 8001f9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001fa6:	2a01      	cmp	r2, #1
 8001fa8:	d101      	bne.n	8001fae <ETH_SetMACConfig+0x132>
 8001faa:	2202      	movs	r2, #2
 8001fac:	e000      	b.n	8001fb0 <ETH_SetMACConfig+0x134>
 8001fae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7fe ffcd 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	fd20810f 	.word	0xfd20810f

08001fe4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80020f4 <ETH_SetDMAConfig+0x110>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	7b1b      	ldrb	r3, [r3, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <ETH_SetDMAConfig+0x2c>
 800200a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800200e:	e000      	b.n	8002012 <ETH_SetDMAConfig+0x2e>
 8002010:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	7b5b      	ldrb	r3, [r3, #13]
 8002016:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002018:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	7f52      	ldrb	r2, [r2, #29]
 800201e:	2a00      	cmp	r2, #0
 8002020:	d102      	bne.n	8002028 <ETH_SetDMAConfig+0x44>
 8002022:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002026:	e000      	b.n	800202a <ETH_SetDMAConfig+0x46>
 8002028:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800202a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	7b9b      	ldrb	r3, [r3, #14]
 8002030:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002032:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002038:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	7f1b      	ldrb	r3, [r3, #28]
 800203e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002040:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	7f9b      	ldrb	r3, [r3, #30]
 8002046:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002048:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800204e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002056:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002058:	4313      	orrs	r3, r2
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002068:	461a      	mov	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800207a:	2001      	movs	r0, #1
 800207c:	f7fe ff74 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002088:	461a      	mov	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	791b      	ldrb	r3, [r3, #4]
 8002092:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002098:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800209e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020d8:	2001      	movs	r0, #1
 80020da:	f7fe ff45 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	f8de3f23 	.word	0xf8de3f23

080020f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b0a6      	sub	sp, #152	@ 0x98
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002106:	2301      	movs	r3, #1
 8002108:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800210c:	2300      	movs	r3, #0
 800210e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002116:	2301      	movs	r3, #1
 8002118:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002122:	2301      	movs	r3, #1
 8002124:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002128:	2301      	movs	r3, #1
 800212a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800213a:	2300      	movs	r3, #0
 800213c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002144:	2300      	movs	r3, #0
 8002146:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002160:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002164:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002166:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800216a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002172:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fe7f 	bl	8001e7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800217e:	2301      	movs	r3, #1
 8002180:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002182:	2301      	movs	r3, #1
 8002184:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002186:	2301      	movs	r3, #1
 8002188:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800218c:	2301      	movs	r3, #1
 800218e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021aa:	2301      	movs	r3, #1
 80021ac:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021b8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021be:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	4619      	mov	r1, r3
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff05 	bl	8001fe4 <ETH_SetDMAConfig>
}
 80021da:	bf00      	nop
 80021dc:	3798      	adds	r7, #152	@ 0x98
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3305      	adds	r3, #5
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	3204      	adds	r2, #4
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <ETH_MACAddressConfig+0x68>)
 8002206:	4413      	add	r3, r2
 8002208:	461a      	mov	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3303      	adds	r3, #3
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	061a      	lsls	r2, r3, #24
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3302      	adds	r3, #2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3301      	adds	r3, #1
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	4313      	orrs	r3, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <ETH_MACAddressConfig+0x6c>)
 8002236:	4413      	add	r3, r2
 8002238:	461a      	mov	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	6013      	str	r3, [r2, #0]
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40028040 	.word	0x40028040
 8002250:	40028044 	.word	0x40028044

08002254 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e03e      	b.n	80022e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68d9      	ldr	r1, [r3, #12]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2200      	movs	r2, #0
 800228a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	3206      	adds	r2, #6
 8002294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d80c      	bhi.n	80022c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68d9      	ldr	r1, [r3, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	461a      	mov	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	e004      	b.n	80022ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3301      	adds	r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d9bd      	bls.n	8002262 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022f8:	611a      	str	r2, [r3, #16]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e048      	b.n	80023a6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6919      	ldr	r1, [r3, #16]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2200      	movs	r2, #0
 8002330:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002350:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	3212      	adds	r2, #18
 8002372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d80c      	bhi.n	8002396 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6919      	ldr	r1, [r3, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	e004      	b.n	80023a0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3301      	adds	r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d9b3      	bls.n	8002314 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023d6:	60da      	str	r2, [r3, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b091      	sub	sp, #68	@ 0x44
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3318      	adds	r3, #24
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800240a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800241a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002422:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002426:	d007      	beq.n	8002438 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800242a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800242c:	3304      	adds	r3, #4
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002438:	2302      	movs	r3, #2
 800243a:	e115      	b.n	8002668 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 800243c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243e:	3301      	adds	r3, #1
 8002440:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800244c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002454:	f023 031f 	bic.w	r3, r3, #31
 8002458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800245a:	6852      	ldr	r2, [r2, #4]
 800245c:	431a      	orrs	r2, r3
 800245e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002460:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	431a      	orrs	r2, r3
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800248c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	431a      	orrs	r2, r3
 800249a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80024aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80024b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024c2:	e084      	b.n	80025ce <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80024cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ce:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e005      	b.n	80024f0 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ee:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80024f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f2:	3301      	adds	r3, #1
 80024f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d902      	bls.n	8002502 <ETH_Prepare_Tx_Descriptors+0x11e>
 80024fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024fe:	3b04      	subs	r3, #4
 8002500:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800250c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002514:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002518:	d007      	beq.n	800252a <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800251e:	3304      	adds	r3, #4
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d029      	beq.n	800257e <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002536:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002538:	2300      	movs	r3, #0
 800253a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800253c:	e019      	b.n	8002572 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 800253e:	f3bf 8f5f 	dmb	sy
}
 8002542:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800254c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002552:	3301      	adds	r3, #1
 8002554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002558:	2b03      	cmp	r3, #3
 800255a:	d902      	bls.n	8002562 <ETH_Prepare_Tx_Descriptors+0x17e>
 800255c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255e:	3b04      	subs	r3, #4
 8002560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800256c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800256e:	3301      	adds	r3, #1
 8002570:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002572:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002576:	429a      	cmp	r2, r3
 8002578:	d3e1      	bcc.n	800253e <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 800257a:	2302      	movs	r3, #2
 800257c:	e074      	b.n	8002668 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800257e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002588:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800258a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258c:	3301      	adds	r3, #1
 800258e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80025a8:	f023 031f 	bic.w	r3, r3, #31
 80025ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ae:	6852      	ldr	r2, [r2, #4]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b8:	3301      	adds	r3, #1
 80025ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80025bc:	f3bf 8f5f 	dmb	sy
}
 80025c0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025cc:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f47f af76 	bne.w	80024c4 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d006      	beq.n	80025ec <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e005      	b.n	80025f8 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	6a3a      	ldr	r2, [r7, #32]
 8002608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800260e:	f3bf 8f5f 	dmb	sy
}
 8002612:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002624:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002628:	3304      	adds	r3, #4
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002634:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002636:	f3ef 8310 	mrs	r3, PRIMASK
 800263a:	613b      	str	r3, [r7, #16]
  return(result);
 800263c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	2301      	movs	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f383 8810 	msr	PRIMASK, r3
}
 800264a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002652:	4413      	add	r3, r2
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f383 8810 	msr	PRIMASK, r3
}
 8002664:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3744      	adds	r7, #68	@ 0x44
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	@ 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e16b      	b.n	8002968 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	f040 815a 	bne.w	8002962 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d005      	beq.n	80026c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d130      	bne.n	8002728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026fc:	2201      	movs	r2, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 0201 	and.w	r2, r3, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b03      	cmp	r3, #3
 8002732:	d017      	beq.n	8002764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d123      	bne.n	80027b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	08da      	lsrs	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3208      	adds	r2, #8
 8002778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	220f      	movs	r2, #15
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0203 	and.w	r2, r3, #3
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80b4 	beq.w	8002962 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b60      	ldr	r3, [pc, #384]	@ (8002980 <HAL_GPIO_Init+0x30c>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	4a5f      	ldr	r2, [pc, #380]	@ (8002980 <HAL_GPIO_Init+0x30c>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002808:	6453      	str	r3, [r2, #68]	@ 0x44
 800280a:	4b5d      	ldr	r3, [pc, #372]	@ (8002980 <HAL_GPIO_Init+0x30c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002816:	4a5b      	ldr	r2, [pc, #364]	@ (8002984 <HAL_GPIO_Init+0x310>)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	220f      	movs	r2, #15
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a52      	ldr	r2, [pc, #328]	@ (8002988 <HAL_GPIO_Init+0x314>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02b      	beq.n	800289a <HAL_GPIO_Init+0x226>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a51      	ldr	r2, [pc, #324]	@ (800298c <HAL_GPIO_Init+0x318>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d025      	beq.n	8002896 <HAL_GPIO_Init+0x222>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a50      	ldr	r2, [pc, #320]	@ (8002990 <HAL_GPIO_Init+0x31c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01f      	beq.n	8002892 <HAL_GPIO_Init+0x21e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4f      	ldr	r2, [pc, #316]	@ (8002994 <HAL_GPIO_Init+0x320>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d019      	beq.n	800288e <HAL_GPIO_Init+0x21a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4e      	ldr	r2, [pc, #312]	@ (8002998 <HAL_GPIO_Init+0x324>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0x216>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4d      	ldr	r2, [pc, #308]	@ (800299c <HAL_GPIO_Init+0x328>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00d      	beq.n	8002886 <HAL_GPIO_Init+0x212>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4c      	ldr	r2, [pc, #304]	@ (80029a0 <HAL_GPIO_Init+0x32c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_GPIO_Init+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4b      	ldr	r2, [pc, #300]	@ (80029a4 <HAL_GPIO_Init+0x330>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_GPIO_Init+0x20a>
 800287a:	2307      	movs	r3, #7
 800287c:	e00e      	b.n	800289c <HAL_GPIO_Init+0x228>
 800287e:	2308      	movs	r3, #8
 8002880:	e00c      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002882:	2306      	movs	r3, #6
 8002884:	e00a      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002886:	2305      	movs	r3, #5
 8002888:	e008      	b.n	800289c <HAL_GPIO_Init+0x228>
 800288a:	2304      	movs	r3, #4
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x228>
 800288e:	2303      	movs	r3, #3
 8002890:	e004      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002892:	2302      	movs	r3, #2
 8002894:	e002      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_GPIO_Init+0x228>
 800289a:	2300      	movs	r3, #0
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f002 0203 	and.w	r2, r2, #3
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	4093      	lsls	r3, r2
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ac:	4935      	ldr	r1, [pc, #212]	@ (8002984 <HAL_GPIO_Init+0x310>)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ba:	4b3b      	ldr	r3, [pc, #236]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028de:	4a32      	ldr	r2, [pc, #200]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e4:	4b30      	ldr	r3, [pc, #192]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002908:	4a27      	ldr	r2, [pc, #156]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800290e:	4b26      	ldr	r3, [pc, #152]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002932:	4a1d      	ldr	r2, [pc, #116]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002938:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800295c:	4a12      	ldr	r2, [pc, #72]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3301      	adds	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b0f      	cmp	r3, #15
 800296c:	f67f ae90 	bls.w	8002690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3724      	adds	r7, #36	@ 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40013800 	.word	0x40013800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40021000 	.word	0x40021000
 800299c:	40021400 	.word	0x40021400
 80029a0:	40021800 	.word	0x40021800
 80029a4:	40021c00 	.word	0x40021c00
 80029a8:	40013c00 	.word	0x40013c00

080029ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	041a      	lsls	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029f0:	887a      	ldrh	r2, [r7, #2]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4013      	ands	r3, r2
 80029f6:	041a      	lsls	r2, r3, #16
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43d9      	mvns	r1, r3
 80029fc:	887b      	ldrh	r3, [r7, #2]
 80029fe:	400b      	ands	r3, r1
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	619a      	str	r2, [r3, #24]
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a2a:	4a05      	ldr	r2, [pc, #20]	@ (8002a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd ff76 	bl	8000924 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40013c00 	.word	0x40013c00

08002a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e267      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d075      	beq.n	8002b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a62:	4b88      	ldr	r3, [pc, #544]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d00c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4b85      	ldr	r3, [pc, #532]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d112      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b82      	ldr	r3, [pc, #520]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a86:	d10b      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	4b7e      	ldr	r3, [pc, #504]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d05b      	beq.n	8002b4c <HAL_RCC_OscConfig+0x108>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d157      	bne.n	8002b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e242      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa8:	d106      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x74>
 8002aaa:	4b76      	ldr	r3, [pc, #472]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a75      	ldr	r2, [pc, #468]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e01d      	b.n	8002af4 <HAL_RCC_OscConfig+0xb0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x98>
 8002ac2:	4b70      	ldr	r3, [pc, #448]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6f      	ldr	r2, [pc, #444]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b6d      	ldr	r3, [pc, #436]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6c      	ldr	r2, [pc, #432]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0xb0>
 8002adc:	4b69      	ldr	r3, [pc, #420]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a68      	ldr	r2, [pc, #416]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b66      	ldr	r3, [pc, #408]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a65      	ldr	r2, [pc, #404]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe fa28 	bl	8000f50 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7fe fa24 	bl	8000f50 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	@ 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e207      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4b5b      	ldr	r3, [pc, #364]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0xc0>
 8002b22:	e014      	b.n	8002b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe fa14 	bl	8000f50 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fa10 	bl	8000f50 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1f3      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	4b51      	ldr	r3, [pc, #324]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0xe8>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d063      	beq.n	8002c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b47      	ldr	r3, [pc, #284]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d11c      	bne.n	8002bac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b44      	ldr	r3, [pc, #272]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7e:	4b41      	ldr	r3, [pc, #260]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_RCC_OscConfig+0x152>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e1c7      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b96:	4b3b      	ldr	r3, [pc, #236]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4937      	ldr	r1, [pc, #220]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002baa:	e03a      	b.n	8002c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb4:	4b34      	ldr	r3, [pc, #208]	@ (8002c88 <HAL_RCC_OscConfig+0x244>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fe f9c9 	bl	8000f50 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc2:	f7fe f9c5 	bl	8000f50 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1a8      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b28      	ldr	r3, [pc, #160]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4925      	ldr	r1, [pc, #148]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]
 8002bf4:	e015      	b.n	8002c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf6:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <HAL_RCC_OscConfig+0x244>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe f9a8 	bl	8000f50 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c04:	f7fe f9a4 	bl	8000f50 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e187      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d036      	beq.n	8002c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d016      	beq.n	8002c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c36:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <HAL_RCC_OscConfig+0x248>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe f988 	bl	8000f50 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c44:	f7fe f984 	bl	8000f50 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e167      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x200>
 8002c62:	e01b      	b.n	8002c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <HAL_RCC_OscConfig+0x248>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe f971 	bl	8000f50 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	e00e      	b.n	8002c90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c72:	f7fe f96d 	bl	8000f50 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d907      	bls.n	8002c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e150      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	42470000 	.word	0x42470000
 8002c8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c90:	4b88      	ldr	r3, [pc, #544]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1ea      	bne.n	8002c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8097 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cae:	4b81      	ldr	r3, [pc, #516]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10f      	bne.n	8002cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	4a7c      	ldr	r2, [pc, #496]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cca:	4b7a      	ldr	r3, [pc, #488]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	4b77      	ldr	r3, [pc, #476]	@ (8002eb8 <HAL_RCC_OscConfig+0x474>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d118      	bne.n	8002d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce6:	4b74      	ldr	r3, [pc, #464]	@ (8002eb8 <HAL_RCC_OscConfig+0x474>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a73      	ldr	r2, [pc, #460]	@ (8002eb8 <HAL_RCC_OscConfig+0x474>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe f92d 	bl	8000f50 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfa:	f7fe f929 	bl	8000f50 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e10c      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb8 <HAL_RCC_OscConfig+0x474>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2ea>
 8002d20:	4b64      	ldr	r3, [pc, #400]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d24:	4a63      	ldr	r2, [pc, #396]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d2c:	e01c      	b.n	8002d68 <HAL_RCC_OscConfig+0x324>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x30c>
 8002d36:	4b5f      	ldr	r3, [pc, #380]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d42:	4b5c      	ldr	r3, [pc, #368]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	4a5b      	ldr	r2, [pc, #364]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCC_OscConfig+0x324>
 8002d50:	4b58      	ldr	r3, [pc, #352]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d54:	4a57      	ldr	r2, [pc, #348]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5c:	4b55      	ldr	r3, [pc, #340]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4a54      	ldr	r2, [pc, #336]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 0304 	bic.w	r3, r3, #4
 8002d66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d015      	beq.n	8002d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe f8ee 	bl	8000f50 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7fe f8ea 	bl	8000f50 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e0cb      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8e:	4b49      	ldr	r3, [pc, #292]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0ee      	beq.n	8002d78 <HAL_RCC_OscConfig+0x334>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9c:	f7fe f8d8 	bl	8000f50 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7fe f8d4 	bl	8000f50 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0b5      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dba:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ee      	bne.n	8002da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dcc:	4b39      	ldr	r3, [pc, #228]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	4a38      	ldr	r2, [pc, #224]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80a1 	beq.w	8002f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002de2:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d05c      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d141      	bne.n	8002e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b31      	ldr	r3, [pc, #196]	@ (8002ebc <HAL_RCC_OscConfig+0x478>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f8a8 	bl	8000f50 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe f8a4 	bl	8000f50 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e087      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	4b27      	ldr	r3, [pc, #156]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	019b      	lsls	r3, r3, #6
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	085b      	lsrs	r3, r3, #1
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	491b      	ldr	r1, [pc, #108]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ebc <HAL_RCC_OscConfig+0x478>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7fe f87d 	bl	8000f50 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe f879 	bl	8000f50 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e05c      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x416>
 8002e78:	e054      	b.n	8002f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <HAL_RCC_OscConfig+0x478>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe f866 	bl	8000f50 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe f862 	bl	8000f50 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e045      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x444>
 8002ea6:	e03d      	b.n	8002f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e038      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <HAL_RCC_OscConfig+0x4ec>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d028      	beq.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d121      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d11a      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d111      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800

08002f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0cc      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b68      	ldr	r3, [pc, #416]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d90c      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b65      	ldr	r3, [pc, #404]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b63      	ldr	r3, [pc, #396]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0b8      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f88:	4b59      	ldr	r3, [pc, #356]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a58      	ldr	r2, [pc, #352]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa0:	4b53      	ldr	r3, [pc, #332]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a52      	ldr	r2, [pc, #328]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fac:	4b50      	ldr	r3, [pc, #320]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	494d      	ldr	r1, [pc, #308]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d044      	beq.n	8003054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	4b47      	ldr	r3, [pc, #284]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d119      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e07f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d003      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e06f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	4b3b      	ldr	r3, [pc, #236]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e067      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003012:	4b37      	ldr	r3, [pc, #220]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f023 0203 	bic.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4934      	ldr	r1, [pc, #208]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003024:	f7fd ff94 	bl	8000f50 <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	e00a      	b.n	8003042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302c:	f7fd ff90 	bl	8000f50 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e04f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	4b2b      	ldr	r3, [pc, #172]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 020c 	and.w	r2, r3, #12
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	429a      	cmp	r2, r3
 8003052:	d1eb      	bne.n	800302c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d20c      	bcs.n	800307c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b22      	ldr	r3, [pc, #136]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e032      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4916      	ldr	r1, [pc, #88]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a6:	4b12      	ldr	r3, [pc, #72]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	490e      	ldr	r1, [pc, #56]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ba:	f000 f821 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 80030be:	4602      	mov	r2, r0
 80030c0:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	490a      	ldr	r1, [pc, #40]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	5ccb      	ldrb	r3, [r1, r3]
 80030ce:	fa22 f303 	lsr.w	r3, r2, r3
 80030d2:	4a09      	ldr	r2, [pc, #36]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030d6:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fef4 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023c00 	.word	0x40023c00
 80030f0:	40023800 	.word	0x40023800
 80030f4:	0801165c 	.word	0x0801165c
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000004 	.word	0x20000004

08003100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003104:	b090      	sub	sp, #64	@ 0x40
 8003106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003118:	4b59      	ldr	r3, [pc, #356]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b08      	cmp	r3, #8
 8003122:	d00d      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x40>
 8003124:	2b08      	cmp	r3, #8
 8003126:	f200 80a1 	bhi.w	800326c <HAL_RCC_GetSysClockFreq+0x16c>
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x34>
 800312e:	2b04      	cmp	r3, #4
 8003130:	d003      	beq.n	800313a <HAL_RCC_GetSysClockFreq+0x3a>
 8003132:	e09b      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4b53      	ldr	r3, [pc, #332]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x184>)
 8003136:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003138:	e09b      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800313a:	4b53      	ldr	r3, [pc, #332]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x188>)
 800313c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800313e:	e098      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003140:	4b4f      	ldr	r3, [pc, #316]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003148:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800314a:	4b4d      	ldr	r3, [pc, #308]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d028      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003156:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	099b      	lsrs	r3, r3, #6
 800315c:	2200      	movs	r2, #0
 800315e:	623b      	str	r3, [r7, #32]
 8003160:	627a      	str	r2, [r7, #36]	@ 0x24
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003168:	2100      	movs	r1, #0
 800316a:	4b47      	ldr	r3, [pc, #284]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x188>)
 800316c:	fb03 f201 	mul.w	r2, r3, r1
 8003170:	2300      	movs	r3, #0
 8003172:	fb00 f303 	mul.w	r3, r0, r3
 8003176:	4413      	add	r3, r2
 8003178:	4a43      	ldr	r2, [pc, #268]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x188>)
 800317a:	fba0 1202 	umull	r1, r2, r0, r2
 800317e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003180:	460a      	mov	r2, r1
 8003182:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003186:	4413      	add	r3, r2
 8003188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800318a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318c:	2200      	movs	r2, #0
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	61fa      	str	r2, [r7, #28]
 8003192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003196:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800319a:	f7fd f881 	bl	80002a0 <__aeabi_uldivmod>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4613      	mov	r3, r2
 80031a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a6:	e053      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a8:	4b35      	ldr	r3, [pc, #212]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	099b      	lsrs	r3, r3, #6
 80031ae:	2200      	movs	r2, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	617a      	str	r2, [r7, #20]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031ba:	f04f 0b00 	mov.w	fp, #0
 80031be:	4652      	mov	r2, sl
 80031c0:	465b      	mov	r3, fp
 80031c2:	f04f 0000 	mov.w	r0, #0
 80031c6:	f04f 0100 	mov.w	r1, #0
 80031ca:	0159      	lsls	r1, r3, #5
 80031cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d0:	0150      	lsls	r0, r2, #5
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	ebb2 080a 	subs.w	r8, r2, sl
 80031da:	eb63 090b 	sbc.w	r9, r3, fp
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031f2:	ebb2 0408 	subs.w	r4, r2, r8
 80031f6:	eb63 0509 	sbc.w	r5, r3, r9
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	00eb      	lsls	r3, r5, #3
 8003204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003208:	00e2      	lsls	r2, r4, #3
 800320a:	4614      	mov	r4, r2
 800320c:	461d      	mov	r5, r3
 800320e:	eb14 030a 	adds.w	r3, r4, sl
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	eb45 030b 	adc.w	r3, r5, fp
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003226:	4629      	mov	r1, r5
 8003228:	028b      	lsls	r3, r1, #10
 800322a:	4621      	mov	r1, r4
 800322c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003230:	4621      	mov	r1, r4
 8003232:	028a      	lsls	r2, r1, #10
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323a:	2200      	movs	r2, #0
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	60fa      	str	r2, [r7, #12]
 8003240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003244:	f7fd f82c 	bl	80002a0 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	3301      	adds	r3, #1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003260:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800326a:	e002      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x184>)
 800326e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003274:	4618      	mov	r0, r3
 8003276:	3740      	adds	r7, #64	@ 0x40
 8003278:	46bd      	mov	sp, r7
 800327a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	00f42400 	.word	0x00f42400
 8003288:	017d7840 	.word	0x017d7840

0800328c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003290:	4b03      	ldr	r3, [pc, #12]	@ (80032a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000000 	.word	0x20000000

080032a4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80032aa:	4b87      	ldr	r3, [pc, #540]	@ (80034c8 <MX_LWIP_Init+0x224>)
 80032ac:	22c0      	movs	r2, #192	@ 0xc0
 80032ae:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80032b0:	4b85      	ldr	r3, [pc, #532]	@ (80034c8 <MX_LWIP_Init+0x224>)
 80032b2:	22a8      	movs	r2, #168	@ 0xa8
 80032b4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80032b6:	4b84      	ldr	r3, [pc, #528]	@ (80034c8 <MX_LWIP_Init+0x224>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 80032bc:	4b82      	ldr	r3, [pc, #520]	@ (80034c8 <MX_LWIP_Init+0x224>)
 80032be:	2232      	movs	r2, #50	@ 0x32
 80032c0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80032c2:	4b82      	ldr	r3, [pc, #520]	@ (80034cc <MX_LWIP_Init+0x228>)
 80032c4:	22ff      	movs	r2, #255	@ 0xff
 80032c6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80032c8:	4b80      	ldr	r3, [pc, #512]	@ (80034cc <MX_LWIP_Init+0x228>)
 80032ca:	22ff      	movs	r2, #255	@ 0xff
 80032cc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80032ce:	4b7f      	ldr	r3, [pc, #508]	@ (80034cc <MX_LWIP_Init+0x228>)
 80032d0:	22ff      	movs	r2, #255	@ 0xff
 80032d2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80032d4:	4b7d      	ldr	r3, [pc, #500]	@ (80034cc <MX_LWIP_Init+0x228>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80032da:	4b7d      	ldr	r3, [pc, #500]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 80032dc:	22c0      	movs	r2, #192	@ 0xc0
 80032de:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80032e0:	4b7b      	ldr	r3, [pc, #492]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 80032e2:	22a8      	movs	r2, #168	@ 0xa8
 80032e4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80032e6:	4b7a      	ldr	r3, [pc, #488]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80032ec:	4b78      	ldr	r3, [pc, #480]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80032f2:	f000 fd02 	bl	8003cfa <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80032f6:	4b74      	ldr	r3, [pc, #464]	@ (80034c8 <MX_LWIP_Init+0x224>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	061a      	lsls	r2, r3, #24
 80032fc:	4b72      	ldr	r3, [pc, #456]	@ (80034c8 <MX_LWIP_Init+0x224>)
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	431a      	orrs	r2, r3
 8003304:	4b70      	ldr	r3, [pc, #448]	@ (80034c8 <MX_LWIP_Init+0x224>)
 8003306:	789b      	ldrb	r3, [r3, #2]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	4313      	orrs	r3, r2
 800330c:	4a6e      	ldr	r2, [pc, #440]	@ (80034c8 <MX_LWIP_Init+0x224>)
 800330e:	78d2      	ldrb	r2, [r2, #3]
 8003310:	4313      	orrs	r3, r2
 8003312:	061a      	lsls	r2, r3, #24
 8003314:	4b6c      	ldr	r3, [pc, #432]	@ (80034c8 <MX_LWIP_Init+0x224>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	0619      	lsls	r1, r3, #24
 800331a:	4b6b      	ldr	r3, [pc, #428]	@ (80034c8 <MX_LWIP_Init+0x224>)
 800331c:	785b      	ldrb	r3, [r3, #1]
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	4319      	orrs	r1, r3
 8003322:	4b69      	ldr	r3, [pc, #420]	@ (80034c8 <MX_LWIP_Init+0x224>)
 8003324:	789b      	ldrb	r3, [r3, #2]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	430b      	orrs	r3, r1
 800332a:	4967      	ldr	r1, [pc, #412]	@ (80034c8 <MX_LWIP_Init+0x224>)
 800332c:	78c9      	ldrb	r1, [r1, #3]
 800332e:	430b      	orrs	r3, r1
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003336:	431a      	orrs	r2, r3
 8003338:	4b63      	ldr	r3, [pc, #396]	@ (80034c8 <MX_LWIP_Init+0x224>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	0619      	lsls	r1, r3, #24
 800333e:	4b62      	ldr	r3, [pc, #392]	@ (80034c8 <MX_LWIP_Init+0x224>)
 8003340:	785b      	ldrb	r3, [r3, #1]
 8003342:	041b      	lsls	r3, r3, #16
 8003344:	4319      	orrs	r1, r3
 8003346:	4b60      	ldr	r3, [pc, #384]	@ (80034c8 <MX_LWIP_Init+0x224>)
 8003348:	789b      	ldrb	r3, [r3, #2]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	430b      	orrs	r3, r1
 800334e:	495e      	ldr	r1, [pc, #376]	@ (80034c8 <MX_LWIP_Init+0x224>)
 8003350:	78c9      	ldrb	r1, [r1, #3]
 8003352:	430b      	orrs	r3, r1
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800335a:	431a      	orrs	r2, r3
 800335c:	4b5a      	ldr	r3, [pc, #360]	@ (80034c8 <MX_LWIP_Init+0x224>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	0619      	lsls	r1, r3, #24
 8003362:	4b59      	ldr	r3, [pc, #356]	@ (80034c8 <MX_LWIP_Init+0x224>)
 8003364:	785b      	ldrb	r3, [r3, #1]
 8003366:	041b      	lsls	r3, r3, #16
 8003368:	4319      	orrs	r1, r3
 800336a:	4b57      	ldr	r3, [pc, #348]	@ (80034c8 <MX_LWIP_Init+0x224>)
 800336c:	789b      	ldrb	r3, [r3, #2]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	430b      	orrs	r3, r1
 8003372:	4955      	ldr	r1, [pc, #340]	@ (80034c8 <MX_LWIP_Init+0x224>)
 8003374:	78c9      	ldrb	r1, [r1, #3]
 8003376:	430b      	orrs	r3, r1
 8003378:	0e1b      	lsrs	r3, r3, #24
 800337a:	4313      	orrs	r3, r2
 800337c:	4a55      	ldr	r2, [pc, #340]	@ (80034d4 <MX_LWIP_Init+0x230>)
 800337e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003380:	4b52      	ldr	r3, [pc, #328]	@ (80034cc <MX_LWIP_Init+0x228>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	061a      	lsls	r2, r3, #24
 8003386:	4b51      	ldr	r3, [pc, #324]	@ (80034cc <MX_LWIP_Init+0x228>)
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431a      	orrs	r2, r3
 800338e:	4b4f      	ldr	r3, [pc, #316]	@ (80034cc <MX_LWIP_Init+0x228>)
 8003390:	789b      	ldrb	r3, [r3, #2]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	4313      	orrs	r3, r2
 8003396:	4a4d      	ldr	r2, [pc, #308]	@ (80034cc <MX_LWIP_Init+0x228>)
 8003398:	78d2      	ldrb	r2, [r2, #3]
 800339a:	4313      	orrs	r3, r2
 800339c:	061a      	lsls	r2, r3, #24
 800339e:	4b4b      	ldr	r3, [pc, #300]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	0619      	lsls	r1, r3, #24
 80033a4:	4b49      	ldr	r3, [pc, #292]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	4319      	orrs	r1, r3
 80033ac:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033ae:	789b      	ldrb	r3, [r3, #2]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	430b      	orrs	r3, r1
 80033b4:	4945      	ldr	r1, [pc, #276]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033b6:	78c9      	ldrb	r1, [r1, #3]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80033c0:	431a      	orrs	r2, r3
 80033c2:	4b42      	ldr	r3, [pc, #264]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	0619      	lsls	r1, r3, #24
 80033c8:	4b40      	ldr	r3, [pc, #256]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033ca:	785b      	ldrb	r3, [r3, #1]
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	4319      	orrs	r1, r3
 80033d0:	4b3e      	ldr	r3, [pc, #248]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033d2:	789b      	ldrb	r3, [r3, #2]
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	430b      	orrs	r3, r1
 80033d8:	493c      	ldr	r1, [pc, #240]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033da:	78c9      	ldrb	r1, [r1, #3]
 80033dc:	430b      	orrs	r3, r1
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80033e4:	431a      	orrs	r2, r3
 80033e6:	4b39      	ldr	r3, [pc, #228]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	0619      	lsls	r1, r3, #24
 80033ec:	4b37      	ldr	r3, [pc, #220]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033ee:	785b      	ldrb	r3, [r3, #1]
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	4319      	orrs	r1, r3
 80033f4:	4b35      	ldr	r3, [pc, #212]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033f6:	789b      	ldrb	r3, [r3, #2]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	430b      	orrs	r3, r1
 80033fc:	4933      	ldr	r1, [pc, #204]	@ (80034cc <MX_LWIP_Init+0x228>)
 80033fe:	78c9      	ldrb	r1, [r1, #3]
 8003400:	430b      	orrs	r3, r1
 8003402:	0e1b      	lsrs	r3, r3, #24
 8003404:	4313      	orrs	r3, r2
 8003406:	4a34      	ldr	r2, [pc, #208]	@ (80034d8 <MX_LWIP_Init+0x234>)
 8003408:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800340a:	4b31      	ldr	r3, [pc, #196]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	061a      	lsls	r2, r3, #24
 8003410:	4b2f      	ldr	r3, [pc, #188]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	4b2d      	ldr	r3, [pc, #180]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 800341a:	789b      	ldrb	r3, [r3, #2]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	4313      	orrs	r3, r2
 8003420:	4a2b      	ldr	r2, [pc, #172]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 8003422:	78d2      	ldrb	r2, [r2, #3]
 8003424:	4313      	orrs	r3, r2
 8003426:	061a      	lsls	r2, r3, #24
 8003428:	4b29      	ldr	r3, [pc, #164]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	0619      	lsls	r1, r3, #24
 800342e:	4b28      	ldr	r3, [pc, #160]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 8003430:	785b      	ldrb	r3, [r3, #1]
 8003432:	041b      	lsls	r3, r3, #16
 8003434:	4319      	orrs	r1, r3
 8003436:	4b26      	ldr	r3, [pc, #152]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 8003438:	789b      	ldrb	r3, [r3, #2]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	430b      	orrs	r3, r1
 800343e:	4924      	ldr	r1, [pc, #144]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 8003440:	78c9      	ldrb	r1, [r1, #3]
 8003442:	430b      	orrs	r3, r1
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800344a:	431a      	orrs	r2, r3
 800344c:	4b20      	ldr	r3, [pc, #128]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	0619      	lsls	r1, r3, #24
 8003452:	4b1f      	ldr	r3, [pc, #124]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 8003454:	785b      	ldrb	r3, [r3, #1]
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	4319      	orrs	r1, r3
 800345a:	4b1d      	ldr	r3, [pc, #116]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 800345c:	789b      	ldrb	r3, [r3, #2]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	430b      	orrs	r3, r1
 8003462:	491b      	ldr	r1, [pc, #108]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 8003464:	78c9      	ldrb	r1, [r1, #3]
 8003466:	430b      	orrs	r3, r1
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800346e:	431a      	orrs	r2, r3
 8003470:	4b17      	ldr	r3, [pc, #92]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	0619      	lsls	r1, r3, #24
 8003476:	4b16      	ldr	r3, [pc, #88]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	4319      	orrs	r1, r3
 800347e:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 8003480:	789b      	ldrb	r3, [r3, #2]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	430b      	orrs	r3, r1
 8003486:	4912      	ldr	r1, [pc, #72]	@ (80034d0 <MX_LWIP_Init+0x22c>)
 8003488:	78c9      	ldrb	r1, [r1, #3]
 800348a:	430b      	orrs	r3, r1
 800348c:	0e1b      	lsrs	r3, r3, #24
 800348e:	4313      	orrs	r3, r2
 8003490:	4a12      	ldr	r2, [pc, #72]	@ (80034dc <MX_LWIP_Init+0x238>)
 8003492:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003494:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <MX_LWIP_Init+0x23c>)
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <MX_LWIP_Init+0x240>)
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	2300      	movs	r3, #0
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	4b0e      	ldr	r3, [pc, #56]	@ (80034dc <MX_LWIP_Init+0x238>)
 80034a2:	4a0d      	ldr	r2, [pc, #52]	@ (80034d8 <MX_LWIP_Init+0x234>)
 80034a4:	490b      	ldr	r1, [pc, #44]	@ (80034d4 <MX_LWIP_Init+0x230>)
 80034a6:	4810      	ldr	r0, [pc, #64]	@ (80034e8 <MX_LWIP_Init+0x244>)
 80034a8:	f001 f912 	bl	80046d0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80034ac:	480e      	ldr	r0, [pc, #56]	@ (80034e8 <MX_LWIP_Init+0x244>)
 80034ae:	f001 fac1 	bl	8004a34 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80034b2:	480d      	ldr	r0, [pc, #52]	@ (80034e8 <MX_LWIP_Init+0x244>)
 80034b4:	f001 face 	bl	8004a54 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80034b8:	490c      	ldr	r1, [pc, #48]	@ (80034ec <MX_LWIP_Init+0x248>)
 80034ba:	480b      	ldr	r0, [pc, #44]	@ (80034e8 <MX_LWIP_Init+0x244>)
 80034bc:	f001 fbcc 	bl	8004c58 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000100 	.word	0x20000100
 80034cc:	20000104 	.word	0x20000104
 80034d0:	20000108 	.word	0x20000108
 80034d4:	200000f4 	.word	0x200000f4
 80034d8:	200000f8 	.word	0x200000f8
 80034dc:	200000fc 	.word	0x200000fc
 80034e0:	0800da89 	.word	0x0800da89
 80034e4:	0800380d 	.word	0x0800380d
 80034e8:	200000c0 	.word	0x200000c0
 80034ec:	08003541 	.word	0x08003541

080034f0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80034f8:	f7fd fd2a 	bl	8000f50 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <Ethernet_Link_Periodic_Handle+0x30>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b63      	cmp	r3, #99	@ 0x63
 8003506:	d907      	bls.n	8003518 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003508:	f7fd fd22 	bl	8000f50 <HAL_GetTick>
 800350c:	4603      	mov	r3, r0
 800350e:	4a04      	ldr	r2, [pc, #16]	@ (8003520 <Ethernet_Link_Periodic_Handle+0x30>)
 8003510:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fac6 	bl	8003aa4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200000bc 	.word	0x200000bc

08003524 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003528:	4804      	ldr	r0, [pc, #16]	@ (800353c <MX_LWIP_Process+0x18>)
 800352a:	f000 f94f 	bl	80037cc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800352e:	f007 fc11 	bl	800ad54 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8003532:	4802      	ldr	r0, [pc, #8]	@ (800353c <MX_LWIP_Process+0x18>)
 8003534:	f7ff ffdc 	bl	80034f0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}
 800353c:	200000c0 	.word	0x200000c0

08003540 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003560:	4b44      	ldr	r3, [pc, #272]	@ (8003674 <low_level_init+0x120>)
 8003562:	4a45      	ldr	r2, [pc, #276]	@ (8003678 <low_level_init+0x124>)
 8003564:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003566:	2300      	movs	r3, #0
 8003568:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800356a:	2380      	movs	r3, #128	@ 0x80
 800356c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800356e:	23e1      	movs	r3, #225	@ 0xe1
 8003570:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003572:	2300      	movs	r3, #0
 8003574:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003576:	2300      	movs	r3, #0
 8003578:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800357a:	2300      	movs	r3, #0
 800357c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800357e:	4a3d      	ldr	r2, [pc, #244]	@ (8003674 <low_level_init+0x120>)
 8003580:	f107 0308 	add.w	r3, r7, #8
 8003584:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003586:	4b3b      	ldr	r3, [pc, #236]	@ (8003674 <low_level_init+0x120>)
 8003588:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800358c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800358e:	4b39      	ldr	r3, [pc, #228]	@ (8003674 <low_level_init+0x120>)
 8003590:	4a3a      	ldr	r2, [pc, #232]	@ (800367c <low_level_init+0x128>)
 8003592:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003594:	4b37      	ldr	r3, [pc, #220]	@ (8003674 <low_level_init+0x120>)
 8003596:	4a3a      	ldr	r2, [pc, #232]	@ (8003680 <low_level_init+0x12c>)
 8003598:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800359a:	4b36      	ldr	r3, [pc, #216]	@ (8003674 <low_level_init+0x120>)
 800359c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80035a0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80035a2:	4834      	ldr	r0, [pc, #208]	@ (8003674 <low_level_init+0x120>)
 80035a4:	f7fd fe16 	bl	80011d4 <HAL_ETH_Init>
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80035ac:	2238      	movs	r2, #56	@ 0x38
 80035ae:	2100      	movs	r1, #0
 80035b0:	4834      	ldr	r0, [pc, #208]	@ (8003684 <low_level_init+0x130>)
 80035b2:	f00a fca4 	bl	800defe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80035b6:	4b33      	ldr	r3, [pc, #204]	@ (8003684 <low_level_init+0x130>)
 80035b8:	2221      	movs	r2, #33	@ 0x21
 80035ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80035bc:	4b31      	ldr	r3, [pc, #196]	@ (8003684 <low_level_init+0x130>)
 80035be:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80035c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80035c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003684 <low_level_init+0x130>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80035ca:	482f      	ldr	r0, [pc, #188]	@ (8003688 <low_level_init+0x134>)
 80035cc:	f000 ff48 	bl	8004460 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2206      	movs	r2, #6
 80035d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80035d8:	4b26      	ldr	r3, [pc, #152]	@ (8003674 <low_level_init+0x120>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	781a      	ldrb	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <low_level_init+0x120>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	785a      	ldrb	r2, [r3, #1]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80035f0:	4b20      	ldr	r3, [pc, #128]	@ (8003674 <low_level_init+0x120>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	789a      	ldrb	r2, [r3, #2]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80035fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003674 <low_level_init+0x120>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	78da      	ldrb	r2, [r3, #3]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003608:	4b1a      	ldr	r3, [pc, #104]	@ (8003674 <low_level_init+0x120>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	791a      	ldrb	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003614:	4b17      	ldr	r3, [pc, #92]	@ (8003674 <low_level_init+0x120>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	795a      	ldrb	r2, [r3, #5]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003626:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800362e:	f043 030a 	orr.w	r3, r3, #10
 8003632:	b2da      	uxtb	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800363a:	4914      	ldr	r1, [pc, #80]	@ (800368c <low_level_init+0x138>)
 800363c:	4814      	ldr	r0, [pc, #80]	@ (8003690 <low_level_init+0x13c>)
 800363e:	f7fd fb1a 	bl	8000c76 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003642:	4813      	ldr	r0, [pc, #76]	@ (8003690 <low_level_init+0x13c>)
 8003644:	f7fd fb49 	bl	8000cda <LAN8742_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d006      	beq.n	800365c <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f001 fad2 	bl	8004bf8 <netif_set_link_down>
    netif_set_down(netif);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f001 fa69 	bl	8004b2c <netif_set_down>
 800365a:	e008      	b.n	800366e <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d103      	bne.n	800366a <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fa1e 	bl	8003aa4 <ethernet_link_check_state>
 8003668:	e001      	b.n	800366e <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800366a:	f7fd f991 	bl	8000990 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20004bd8 	.word	0x20004bd8
 8003678:	40028000 	.word	0x40028000
 800367c:	20004b38 	.word	0x20004b38
 8003680:	20004a98 	.word	0x20004a98
 8003684:	20004c88 	.word	0x20004c88
 8003688:	0801166c 	.word	0x0801166c
 800368c:	2000000c 	.word	0x2000000c
 8003690:	20004cc0 	.word	0x20004cc0

08003694 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b092      	sub	sp, #72	@ 0x48
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	2230      	movs	r2, #48	@ 0x30
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f00a fc22 	bl	800defe <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	2230      	movs	r2, #48	@ 0x30
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f00a fc1b 	bl	800defe <memset>

  for(q = p; q != NULL; q = q->next)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80036cc:	e045      	b.n	800375a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80036ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d902      	bls.n	80036da <low_level_output+0x46>
      return ERR_IF;
 80036d4:	f06f 030b 	mvn.w	r3, #11
 80036d8:	e055      	b.n	8003786 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80036da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036dc:	6859      	ldr	r1, [r3, #4]
 80036de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036e0:	4613      	mov	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	3348      	adds	r3, #72	@ 0x48
 80036ea:	443b      	add	r3, r7
 80036ec:	3b3c      	subs	r3, #60	@ 0x3c
 80036ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80036f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f2:	895b      	ldrh	r3, [r3, #10]
 80036f4:	4619      	mov	r1, r3
 80036f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	3348      	adds	r3, #72	@ 0x48
 8003702:	443b      	add	r3, r7
 8003704:	3b38      	subs	r3, #56	@ 0x38
 8003706:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370a:	2b00      	cmp	r3, #0
 800370c:	d011      	beq.n	8003732 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800370e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003710:	1e5a      	subs	r2, r3, #1
 8003712:	f107 000c 	add.w	r0, r7, #12
 8003716:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003718:	460b      	mov	r3, r1
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	440b      	add	r3, r1
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	18c1      	adds	r1, r0, r3
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	3348      	adds	r3, #72	@ 0x48
 800372c:	443b      	add	r3, r7
 800372e:	3b34      	subs	r3, #52	@ 0x34
 8003730:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800373a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	3348      	adds	r3, #72	@ 0x48
 8003746:	443b      	add	r3, r7
 8003748:	3b34      	subs	r3, #52	@ 0x34
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800374e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003750:	3301      	adds	r3, #1
 8003752:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	643b      	str	r3, [r7, #64]	@ 0x40
 800375a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1b6      	bne.n	80036ce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	891b      	ldrh	r3, [r3, #8]
 8003764:	461a      	mov	r2, r3
 8003766:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <low_level_output+0xfc>)
 8003768:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800376a:	4a09      	ldr	r2, [pc, #36]	@ (8003790 <low_level_output+0xfc>)
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003772:	4a07      	ldr	r2, [pc, #28]	@ (8003790 <low_level_output+0xfc>)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003778:	2214      	movs	r2, #20
 800377a:	4905      	ldr	r1, [pc, #20]	@ (8003790 <low_level_output+0xfc>)
 800377c:	4805      	ldr	r0, [pc, #20]	@ (8003794 <low_level_output+0x100>)
 800377e:	f7fd feb4 	bl	80014ea <HAL_ETH_Transmit>

  return errval;
 8003782:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003786:	4618      	mov	r0, r3
 8003788:	3748      	adds	r7, #72	@ 0x48
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20004c88 	.word	0x20004c88
 8003794:	20004bd8 	.word	0x20004bd8

08003798 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80037a4:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <low_level_input+0x2c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	4619      	mov	r1, r3
 80037b2:	4805      	ldr	r0, [pc, #20]	@ (80037c8 <low_level_input+0x30>)
 80037b4:	f7fd ff2d 	bl	8001612 <HAL_ETH_ReadData>
  }

  return p;
 80037b8:	68fb      	ldr	r3, [r7, #12]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20004a94 	.word	0x20004a94
 80037c8:	20004bd8 	.word	0x20004bd8

080037cc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ffdd 	bl	8003798 <low_level_input>
 80037de:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	4798      	blx	r3
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f001 fdae 	bl	8005358 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ea      	bne.n	80037d8 <ethernetif_input+0xc>
}
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <ethernetif_init+0x1c>
 800381a:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <ethernetif_init+0x48>)
 800381c:	f240 126f 	movw	r2, #367	@ 0x16f
 8003820:	490d      	ldr	r1, [pc, #52]	@ (8003858 <ethernetif_init+0x4c>)
 8003822:	480e      	ldr	r0, [pc, #56]	@ (800385c <ethernetif_init+0x50>)
 8003824:	f00a fb06 	bl	800de34 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2273      	movs	r2, #115	@ 0x73
 800382c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2274      	movs	r2, #116	@ 0x74
 8003834:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a09      	ldr	r2, [pc, #36]	@ (8003860 <ethernetif_init+0x54>)
 800383c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a08      	ldr	r2, [pc, #32]	@ (8003864 <ethernetif_init+0x58>)
 8003842:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fe85 	bl	8003554 <low_level_init>

  return ERR_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	0800ec7c 	.word	0x0800ec7c
 8003858:	0800ec98 	.word	0x0800ec98
 800385c:	0800eca8 	.word	0x0800eca8
 8003860:	0800bf41 	.word	0x0800bf41
 8003864:	08003695 	.word	0x08003695

08003868 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003874:	68f9      	ldr	r1, [r7, #12]
 8003876:	4807      	ldr	r0, [pc, #28]	@ (8003894 <pbuf_free_custom+0x2c>)
 8003878:	f000 fed4 	bl	8004624 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800387c:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <pbuf_free_custom+0x30>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d102      	bne.n	800388a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <pbuf_free_custom+0x30>)
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
  }
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	0801166c 	.word	0x0801166c
 8003898:	20004a94 	.word	0x20004a94

0800389c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80038a0:	f7fd fb56 	bl	8000f50 <HAL_GetTick>
 80038a4:	4603      	mov	r3, r0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08e      	sub	sp, #56	@ 0x38
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a4a      	ldr	r2, [pc, #296]	@ (80039f4 <HAL_ETH_MspInit+0x148>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	f040 808d 	bne.w	80039ea <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80038d0:	2300      	movs	r3, #0
 80038d2:	623b      	str	r3, [r7, #32]
 80038d4:	4b48      	ldr	r3, [pc, #288]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	4a47      	ldr	r2, [pc, #284]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 80038da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038de:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e0:	4b45      	ldr	r3, [pc, #276]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e8:	623b      	str	r3, [r7, #32]
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	4b41      	ldr	r3, [pc, #260]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	4a40      	ldr	r2, [pc, #256]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 80038f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80038fc:	4b3e      	ldr	r3, [pc, #248]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003900:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2300      	movs	r3, #0
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	4b3a      	ldr	r3, [pc, #232]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	4a39      	ldr	r2, [pc, #228]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 8003912:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003916:	6313      	str	r3, [r2, #48]	@ 0x30
 8003918:	4b37      	ldr	r3, [pc, #220]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	4b33      	ldr	r3, [pc, #204]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 800392a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392c:	4a32      	ldr	r2, [pc, #200]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 800392e:	f043 0304 	orr.w	r3, r3, #4
 8003932:	6313      	str	r3, [r2, #48]	@ 0x30
 8003934:	4b30      	ldr	r3, [pc, #192]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003940:	2300      	movs	r3, #0
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	4b2c      	ldr	r3, [pc, #176]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	4a2b      	ldr	r2, [pc, #172]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003950:	4b29      	ldr	r3, [pc, #164]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	4b25      	ldr	r3, [pc, #148]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	4a24      	ldr	r2, [pc, #144]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 8003966:	f043 0302 	orr.w	r3, r3, #2
 800396a:	6313      	str	r3, [r2, #48]	@ 0x30
 800396c:	4b22      	ldr	r3, [pc, #136]	@ (80039f8 <HAL_ETH_MspInit+0x14c>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003978:	2332      	movs	r3, #50	@ 0x32
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003984:	2303      	movs	r3, #3
 8003986:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003988:	230b      	movs	r3, #11
 800398a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800398c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003990:	4619      	mov	r1, r3
 8003992:	481a      	ldr	r0, [pc, #104]	@ (80039fc <HAL_ETH_MspInit+0x150>)
 8003994:	f7fe fe6e 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003998:	2386      	movs	r3, #134	@ 0x86
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	2302      	movs	r3, #2
 800399e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a4:	2303      	movs	r3, #3
 80039a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039a8:	230b      	movs	r3, #11
 80039aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039b0:	4619      	mov	r1, r3
 80039b2:	4813      	ldr	r0, [pc, #76]	@ (8003a00 <HAL_ETH_MspInit+0x154>)
 80039b4:	f7fe fe5e 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80039b8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039be:	2302      	movs	r3, #2
 80039c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c6:	2303      	movs	r3, #3
 80039c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039ca:	230b      	movs	r3, #11
 80039cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039d2:	4619      	mov	r1, r3
 80039d4:	480b      	ldr	r0, [pc, #44]	@ (8003a04 <HAL_ETH_MspInit+0x158>)
 80039d6:	f7fe fe4d 	bl	8002674 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80039da:	2200      	movs	r2, #0
 80039dc:	2100      	movs	r1, #0
 80039de:	203d      	movs	r0, #61	@ 0x3d
 80039e0:	f7fd fbc1 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80039e4:	203d      	movs	r0, #61	@ 0x3d
 80039e6:	f7fd fbda 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80039ea:	bf00      	nop
 80039ec:	3738      	adds	r7, #56	@ 0x38
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40028000 	.word	0x40028000
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40020800 	.word	0x40020800
 8003a00:	40020000 	.word	0x40020000
 8003a04:	40020400 	.word	0x40020400

08003a08 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003a0c:	4802      	ldr	r0, [pc, #8]	@ (8003a18 <ETH_PHY_IO_Init+0x10>)
 8003a0e:	f7fe f9cd 	bl	8001dac <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20004bd8 	.word	0x20004bd8

08003a1c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return 0;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	68f9      	ldr	r1, [r7, #12]
 8003a3e:	4807      	ldr	r0, [pc, #28]	@ (8003a5c <ETH_PHY_IO_ReadReg+0x30>)
 8003a40:	f7fe f80e 	bl	8001a60 <HAL_ETH_ReadPHYRegister>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	e000      	b.n	8003a52 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20004bd8 	.word	0x20004bd8

08003a60 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	68f9      	ldr	r1, [r7, #12]
 8003a72:	4807      	ldr	r0, [pc, #28]	@ (8003a90 <ETH_PHY_IO_WriteReg+0x30>)
 8003a74:	f7fe f83f 	bl	8001af6 <HAL_ETH_WritePHYRegister>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	e000      	b.n	8003a86 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20004bd8 	.word	0x20004bd8

08003a94 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003a98:	f7fd fa5a 	bl	8000f50 <HAL_GetTick>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b0a0      	sub	sp, #128	@ 0x80
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003aac:	f107 030c 	add.w	r3, r7, #12
 8003ab0:	2264      	movs	r2, #100	@ 0x64
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f00a fa22 	bl	800defe <memset>
  int32_t PHYLinkState = 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003aca:	483a      	ldr	r0, [pc, #232]	@ (8003bb4 <ethernet_link_check_state+0x110>)
 8003acc:	f7fd f952 	bl	8000d74 <LAN8742_GetLinkState>
 8003ad0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00c      	beq.n	8003afe <ethernet_link_check_state+0x5a>
 8003ae4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	dc09      	bgt.n	8003afe <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8003aea:	4833      	ldr	r0, [pc, #204]	@ (8003bb8 <ethernet_link_check_state+0x114>)
 8003aec:	f7fd fc7e 	bl	80013ec <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f001 f81b 	bl	8004b2c <netif_set_down>
    netif_set_link_down(netif);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f001 f87e 	bl	8004bf8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003afc:	e055      	b.n	8003baa <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d14e      	bne.n	8003baa <ethernet_link_check_state+0x106>
 8003b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	dd4b      	ble.n	8003baa <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b14:	3b02      	subs	r3, #2
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d82a      	bhi.n	8003b70 <ethernet_link_check_state+0xcc>
 8003b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b20 <ethernet_link_check_state+0x7c>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b31 	.word	0x08003b31
 8003b24:	08003b43 	.word	0x08003b43
 8003b28:	08003b53 	.word	0x08003b53
 8003b2c:	08003b63 	.word	0x08003b63
      duplex = ETH_FULLDUPLEX_MODE;
 8003b30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b34:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003b36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003b40:	e017      	b.n	8003b72 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003b46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003b50:	e00f      	b.n	8003b72 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003b52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b56:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003b60:	e007      	b.n	8003b72 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003b66:	2300      	movs	r3, #0
 8003b68:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003b6e:	e000      	b.n	8003b72 <ethernet_link_check_state+0xce>
      break;
 8003b70:	bf00      	nop
    if(linkchanged)
 8003b72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d018      	beq.n	8003baa <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003b78:	f107 030c 	add.w	r3, r7, #12
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	480e      	ldr	r0, [pc, #56]	@ (8003bb8 <ethernet_link_check_state+0x114>)
 8003b80:	f7fe f802 	bl	8001b88 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8003b88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b8a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003b8c:	f107 030c 	add.w	r3, r7, #12
 8003b90:	4619      	mov	r1, r3
 8003b92:	4809      	ldr	r0, [pc, #36]	@ (8003bb8 <ethernet_link_check_state+0x114>)
 8003b94:	f7fe f8ef 	bl	8001d76 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8003b98:	4807      	ldr	r0, [pc, #28]	@ (8003bb8 <ethernet_link_check_state+0x114>)
 8003b9a:	f7fd fbb7 	bl	800130c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 ff58 	bl	8004a54 <netif_set_up>
      netif_set_link_up(netif);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fff3 	bl	8004b90 <netif_set_link_up>
}
 8003baa:	bf00      	nop
 8003bac:	3780      	adds	r7, #128	@ 0x80
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20004cc0 	.word	0x20004cc0
 8003bb8:	20004bd8 	.word	0x20004bd8

08003bbc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003bc4:	4812      	ldr	r0, [pc, #72]	@ (8003c10 <HAL_ETH_RxAllocateCallback+0x54>)
 8003bc6:	f000 fcbf 	bl	8004548 <memp_malloc_pool>
 8003bca:	60f8      	str	r0, [r7, #12]
  if (p)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d014      	beq.n	8003bfc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f103 0220 	add.w	r2, r3, #32
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a0d      	ldr	r2, [pc, #52]	@ (8003c14 <HAL_ETH_RxAllocateCallback+0x58>)
 8003be0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003bea:	9201      	str	r2, [sp, #4]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2241      	movs	r2, #65	@ 0x41
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f001 f9f5 	bl	8004fe4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003bfa:	e005      	b.n	8003c08 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <HAL_ETH_RxAllocateCallback+0x5c>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	0801166c 	.word	0x0801166c
 8003c14:	08003869 	.word	0x08003869
 8003c18:	20004a94 	.word	0x20004a94

08003c1c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	@ 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3b20      	subs	r3, #32
 8003c3a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	2200      	movs	r2, #0
 8003c46:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e003      	b.n	8003c66 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e009      	b.n	8003c88 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	891a      	ldrh	r2, [r3, #8]
 8003c78:	887b      	ldrh	r3, [r7, #2]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f2      	bne.n	8003c74 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	3724      	adds	r7, #36	@ 0x24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	b21a      	sxth	r2, r3
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	b21b      	sxth	r3, r3
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	b21b      	sxth	r3, r3
 8003cba:	b29b      	uxth	r3, r3
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	061a      	lsls	r2, r3, #24
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	0e1b      	lsrs	r3, r3, #24
 8003cec:	4313      	orrs	r3, r2
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003d04:	f000 f8d4 	bl	8003eb0 <mem_init>
  memp_init();
 8003d08:	f000 fbda 	bl	80044c0 <memp_init>
  pbuf_init();
  netif_init();
 8003d0c:	f000 fcd8 	bl	80046c0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003d10:	f007 f862 	bl	800add8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003d14:	f001 fdbe 	bl	8005894 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003d18:	f006 ffd4 	bl	800acc4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003d2e:	4b05      	ldr	r3, [pc, #20]	@ (8003d44 <ptr_to_mem+0x20>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	4413      	add	r3, r2
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	2000534c 	.word	0x2000534c

08003d48 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003d50:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <mem_to_ptr+0x20>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	b29b      	uxth	r3, r3
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	2000534c 	.word	0x2000534c

08003d6c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003d6c:	b590      	push	{r4, r7, lr}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003d74:	4b45      	ldr	r3, [pc, #276]	@ (8003e8c <plug_holes+0x120>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d206      	bcs.n	8003d8c <plug_holes+0x20>
 8003d7e:	4b44      	ldr	r3, [pc, #272]	@ (8003e90 <plug_holes+0x124>)
 8003d80:	f240 12df 	movw	r2, #479	@ 0x1df
 8003d84:	4943      	ldr	r1, [pc, #268]	@ (8003e94 <plug_holes+0x128>)
 8003d86:	4844      	ldr	r0, [pc, #272]	@ (8003e98 <plug_holes+0x12c>)
 8003d88:	f00a f854 	bl	800de34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003d8c:	4b43      	ldr	r3, [pc, #268]	@ (8003e9c <plug_holes+0x130>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d306      	bcc.n	8003da4 <plug_holes+0x38>
 8003d96:	4b3e      	ldr	r3, [pc, #248]	@ (8003e90 <plug_holes+0x124>)
 8003d98:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003d9c:	4940      	ldr	r1, [pc, #256]	@ (8003ea0 <plug_holes+0x134>)
 8003d9e:	483e      	ldr	r0, [pc, #248]	@ (8003e98 <plug_holes+0x12c>)
 8003da0:	f00a f848 	bl	800de34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	791b      	ldrb	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d006      	beq.n	8003dba <plug_holes+0x4e>
 8003dac:	4b38      	ldr	r3, [pc, #224]	@ (8003e90 <plug_holes+0x124>)
 8003dae:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8003db2:	493c      	ldr	r1, [pc, #240]	@ (8003ea4 <plug_holes+0x138>)
 8003db4:	4838      	ldr	r0, [pc, #224]	@ (8003e98 <plug_holes+0x12c>)
 8003db6:	f00a f83d 	bl	800de34 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003dc2:	d906      	bls.n	8003dd2 <plug_holes+0x66>
 8003dc4:	4b32      	ldr	r3, [pc, #200]	@ (8003e90 <plug_holes+0x124>)
 8003dc6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8003dca:	4937      	ldr	r1, [pc, #220]	@ (8003ea8 <plug_holes+0x13c>)
 8003dcc:	4832      	ldr	r0, [pc, #200]	@ (8003e98 <plug_holes+0x12c>)
 8003dce:	f00a f831 	bl	800de34 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff ffa4 	bl	8003d24 <ptr_to_mem>
 8003ddc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d024      	beq.n	8003e30 <plug_holes+0xc4>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	791b      	ldrb	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d120      	bne.n	8003e30 <plug_holes+0xc4>
 8003dee:	4b2b      	ldr	r3, [pc, #172]	@ (8003e9c <plug_holes+0x130>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d01b      	beq.n	8003e30 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003df8:	4b2c      	ldr	r3, [pc, #176]	@ (8003eac <plug_holes+0x140>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d102      	bne.n	8003e08 <plug_holes+0x9c>
      lfree = mem;
 8003e02:	4a2a      	ldr	r2, [pc, #168]	@ (8003eac <plug_holes+0x140>)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	881a      	ldrh	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003e18:	d00a      	beq.n	8003e30 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff ff80 	bl	8003d24 <ptr_to_mem>
 8003e24:	4604      	mov	r4, r0
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ff8e 	bl	8003d48 <mem_to_ptr>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	885b      	ldrh	r3, [r3, #2]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff75 	bl	8003d24 <ptr_to_mem>
 8003e3a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d01f      	beq.n	8003e84 <plug_holes+0x118>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	791b      	ldrb	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d11b      	bne.n	8003e84 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003e4c:	4b17      	ldr	r3, [pc, #92]	@ (8003eac <plug_holes+0x140>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d102      	bne.n	8003e5c <plug_holes+0xf0>
      lfree = pmem;
 8003e56:	4a15      	ldr	r2, [pc, #84]	@ (8003eac <plug_holes+0x140>)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	881a      	ldrh	r2, [r3, #0]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003e6c:	d00a      	beq.n	8003e84 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ff56 	bl	8003d24 <ptr_to_mem>
 8003e78:	4604      	mov	r4, r0
 8003e7a:	68b8      	ldr	r0, [r7, #8]
 8003e7c:	f7ff ff64 	bl	8003d48 <mem_to_ptr>
 8003e80:	4603      	mov	r3, r0
 8003e82:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd90      	pop	{r4, r7, pc}
 8003e8c:	2000534c 	.word	0x2000534c
 8003e90:	0800ecd0 	.word	0x0800ecd0
 8003e94:	0800ed00 	.word	0x0800ed00
 8003e98:	0800ed18 	.word	0x0800ed18
 8003e9c:	20005350 	.word	0x20005350
 8003ea0:	0800ed40 	.word	0x0800ed40
 8003ea4:	0800ed5c 	.word	0x0800ed5c
 8003ea8:	0800ed78 	.word	0x0800ed78
 8003eac:	20005354 	.word	0x20005354

08003eb0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003eb6:	4b18      	ldr	r3, [pc, #96]	@ (8003f18 <mem_init+0x68>)
 8003eb8:	3303      	adds	r3, #3
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <mem_init+0x6c>)
 8003ec2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003ec4:	4b15      	ldr	r3, [pc, #84]	@ (8003f1c <mem_init+0x6c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003ed0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003ede:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8003ee2:	f7ff ff1f 	bl	8003d24 <ptr_to_mem>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f20 <mem_init+0x70>)
 8003eea:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003eec:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <mem_init+0x70>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f20 <mem_init+0x70>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003efc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003efe:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <mem_init+0x70>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003f06:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003f08:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <mem_init+0x6c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a05      	ldr	r2, [pc, #20]	@ (8003f24 <mem_init+0x74>)
 8003f0e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20004cf8 	.word	0x20004cf8
 8003f1c:	2000534c 	.word	0x2000534c
 8003f20:	20005350 	.word	0x20005350
 8003f24:	20005354 	.word	0x20005354

08003f28 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff09 	bl	8003d48 <mem_to_ptr>
 8003f36:	4603      	mov	r3, r0
 8003f38:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fef0 	bl	8003d24 <ptr_to_mem>
 8003f44:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	885b      	ldrh	r3, [r3, #2]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff feea 	bl	8003d24 <ptr_to_mem>
 8003f50:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003f5a:	d818      	bhi.n	8003f8e <mem_link_valid+0x66>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	885b      	ldrh	r3, [r3, #2]
 8003f60:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003f64:	d813      	bhi.n	8003f8e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003f6a:	8afa      	ldrh	r2, [r7, #22]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d004      	beq.n	8003f7a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	8afa      	ldrh	r2, [r7, #22]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d109      	bne.n	8003f8e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003f7a:	4b08      	ldr	r3, [pc, #32]	@ (8003f9c <mem_link_valid+0x74>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d006      	beq.n	8003f92 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	885b      	ldrh	r3, [r3, #2]
 8003f88:	8afa      	ldrh	r2, [r7, #22]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d001      	beq.n	8003f92 <mem_link_valid+0x6a>
    return 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e000      	b.n	8003f94 <mem_link_valid+0x6c>
  }
  return 1;
 8003f92:	2301      	movs	r3, #1
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20005350 	.word	0x20005350

08003fa0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d04c      	beq.n	8004048 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003fb8:	4b25      	ldr	r3, [pc, #148]	@ (8004050 <mem_free+0xb0>)
 8003fba:	f240 2273 	movw	r2, #627	@ 0x273
 8003fbe:	4925      	ldr	r1, [pc, #148]	@ (8004054 <mem_free+0xb4>)
 8003fc0:	4825      	ldr	r0, [pc, #148]	@ (8004058 <mem_free+0xb8>)
 8003fc2:	f009 ff37 	bl	800de34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003fc6:	e040      	b.n	800404a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3b08      	subs	r3, #8
 8003fcc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003fce:	4b23      	ldr	r3, [pc, #140]	@ (800405c <mem_free+0xbc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d306      	bcc.n	8003fe6 <mem_free+0x46>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f103 020c 	add.w	r2, r3, #12
 8003fde:	4b20      	ldr	r3, [pc, #128]	@ (8004060 <mem_free+0xc0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d907      	bls.n	8003ff6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8004050 <mem_free+0xb0>)
 8003fe8:	f240 227f 	movw	r2, #639	@ 0x27f
 8003fec:	491d      	ldr	r1, [pc, #116]	@ (8004064 <mem_free+0xc4>)
 8003fee:	481a      	ldr	r0, [pc, #104]	@ (8004058 <mem_free+0xb8>)
 8003ff0:	f009 ff20 	bl	800de34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003ff4:	e029      	b.n	800404a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	791b      	ldrb	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d107      	bne.n	800400e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003ffe:	4b14      	ldr	r3, [pc, #80]	@ (8004050 <mem_free+0xb0>)
 8004000:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8004004:	4918      	ldr	r1, [pc, #96]	@ (8004068 <mem_free+0xc8>)
 8004006:	4814      	ldr	r0, [pc, #80]	@ (8004058 <mem_free+0xb8>)
 8004008:	f009 ff14 	bl	800de34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800400c:	e01d      	b.n	800404a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff ff8a 	bl	8003f28 <mem_link_valid>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d107      	bne.n	800402a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800401a:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <mem_free+0xb0>)
 800401c:	f240 2295 	movw	r2, #661	@ 0x295
 8004020:	4912      	ldr	r1, [pc, #72]	@ (800406c <mem_free+0xcc>)
 8004022:	480d      	ldr	r0, [pc, #52]	@ (8004058 <mem_free+0xb8>)
 8004024:	f009 ff06 	bl	800de34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004028:	e00f      	b.n	800404a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004030:	4b0f      	ldr	r3, [pc, #60]	@ (8004070 <mem_free+0xd0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	429a      	cmp	r2, r3
 8004038:	d202      	bcs.n	8004040 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800403a:	4a0d      	ldr	r2, [pc, #52]	@ (8004070 <mem_free+0xd0>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff fe93 	bl	8003d6c <plug_holes>
 8004046:	e000      	b.n	800404a <mem_free+0xaa>
    return;
 8004048:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	0800ecd0 	.word	0x0800ecd0
 8004054:	0800eda4 	.word	0x0800eda4
 8004058:	0800ed18 	.word	0x0800ed18
 800405c:	2000534c 	.word	0x2000534c
 8004060:	20005350 	.word	0x20005350
 8004064:	0800edc8 	.word	0x0800edc8
 8004068:	0800ede4 	.word	0x0800ede4
 800406c:	0800ee0c 	.word	0x0800ee0c
 8004070:	20005354 	.word	0x20005354

08004074 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004080:	887b      	ldrh	r3, [r7, #2]
 8004082:	3303      	adds	r3, #3
 8004084:	b29b      	uxth	r3, r3
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800408c:	8bfb      	ldrh	r3, [r7, #30]
 800408e:	2b0b      	cmp	r3, #11
 8004090:	d801      	bhi.n	8004096 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004092:	230c      	movs	r3, #12
 8004094:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004096:	8bfb      	ldrh	r3, [r7, #30]
 8004098:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800409c:	d803      	bhi.n	80040a6 <mem_trim+0x32>
 800409e:	8bfa      	ldrh	r2, [r7, #30]
 80040a0:	887b      	ldrh	r3, [r7, #2]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d201      	bcs.n	80040aa <mem_trim+0x36>
    return NULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e0cc      	b.n	8004244 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80040aa:	4b68      	ldr	r3, [pc, #416]	@ (800424c <mem_trim+0x1d8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d304      	bcc.n	80040be <mem_trim+0x4a>
 80040b4:	4b66      	ldr	r3, [pc, #408]	@ (8004250 <mem_trim+0x1dc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d306      	bcc.n	80040cc <mem_trim+0x58>
 80040be:	4b65      	ldr	r3, [pc, #404]	@ (8004254 <mem_trim+0x1e0>)
 80040c0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80040c4:	4964      	ldr	r1, [pc, #400]	@ (8004258 <mem_trim+0x1e4>)
 80040c6:	4865      	ldr	r0, [pc, #404]	@ (800425c <mem_trim+0x1e8>)
 80040c8:	f009 feb4 	bl	800de34 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80040cc:	4b5f      	ldr	r3, [pc, #380]	@ (800424c <mem_trim+0x1d8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d304      	bcc.n	80040e0 <mem_trim+0x6c>
 80040d6:	4b5e      	ldr	r3, [pc, #376]	@ (8004250 <mem_trim+0x1dc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d301      	bcc.n	80040e4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	e0af      	b.n	8004244 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3b08      	subs	r3, #8
 80040e8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80040ea:	69b8      	ldr	r0, [r7, #24]
 80040ec:	f7ff fe2c 	bl	8003d48 <mem_to_ptr>
 80040f0:	4603      	mov	r3, r0
 80040f2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	8afb      	ldrh	r3, [r7, #22]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b08      	subs	r3, #8
 8004100:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004102:	8bfa      	ldrh	r2, [r7, #30]
 8004104:	8abb      	ldrh	r3, [r7, #20]
 8004106:	429a      	cmp	r2, r3
 8004108:	d906      	bls.n	8004118 <mem_trim+0xa4>
 800410a:	4b52      	ldr	r3, [pc, #328]	@ (8004254 <mem_trim+0x1e0>)
 800410c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8004110:	4953      	ldr	r1, [pc, #332]	@ (8004260 <mem_trim+0x1ec>)
 8004112:	4852      	ldr	r0, [pc, #328]	@ (800425c <mem_trim+0x1e8>)
 8004114:	f009 fe8e 	bl	800de34 <iprintf>
  if (newsize > size) {
 8004118:	8bfa      	ldrh	r2, [r7, #30]
 800411a:	8abb      	ldrh	r3, [r7, #20]
 800411c:	429a      	cmp	r2, r3
 800411e:	d901      	bls.n	8004124 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	e08f      	b.n	8004244 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004124:	8bfa      	ldrh	r2, [r7, #30]
 8004126:	8abb      	ldrh	r3, [r7, #20]
 8004128:	429a      	cmp	r2, r3
 800412a:	d101      	bne.n	8004130 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	e089      	b.n	8004244 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fdf5 	bl	8003d24 <ptr_to_mem>
 800413a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	791b      	ldrb	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d13f      	bne.n	80041c4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800414c:	d106      	bne.n	800415c <mem_trim+0xe8>
 800414e:	4b41      	ldr	r3, [pc, #260]	@ (8004254 <mem_trim+0x1e0>)
 8004150:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8004154:	4943      	ldr	r1, [pc, #268]	@ (8004264 <mem_trim+0x1f0>)
 8004156:	4841      	ldr	r0, [pc, #260]	@ (800425c <mem_trim+0x1e8>)
 8004158:	f009 fe6c 	bl	800de34 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004162:	8afa      	ldrh	r2, [r7, #22]
 8004164:	8bfb      	ldrh	r3, [r7, #30]
 8004166:	4413      	add	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	3308      	adds	r3, #8
 800416c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800416e:	4b3e      	ldr	r3, [pc, #248]	@ (8004268 <mem_trim+0x1f4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	429a      	cmp	r2, r3
 8004176:	d106      	bne.n	8004186 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004178:	89fb      	ldrh	r3, [r7, #14]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fdd2 	bl	8003d24 <ptr_to_mem>
 8004180:	4603      	mov	r3, r0
 8004182:	4a39      	ldr	r2, [pc, #228]	@ (8004268 <mem_trim+0x1f4>)
 8004184:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004186:	89fb      	ldrh	r3, [r7, #14]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fdcb 	bl	8003d24 <ptr_to_mem>
 800418e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2200      	movs	r2, #0
 8004194:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	89ba      	ldrh	r2, [r7, #12]
 800419a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	8afa      	ldrh	r2, [r7, #22]
 80041a0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	89fa      	ldrh	r2, [r7, #14]
 80041a6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80041b0:	d047      	beq.n	8004242 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fdb4 	bl	8003d24 <ptr_to_mem>
 80041bc:	4602      	mov	r2, r0
 80041be:	89fb      	ldrh	r3, [r7, #14]
 80041c0:	8053      	strh	r3, [r2, #2]
 80041c2:	e03e      	b.n	8004242 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80041c4:	8bfb      	ldrh	r3, [r7, #30]
 80041c6:	f103 0214 	add.w	r2, r3, #20
 80041ca:	8abb      	ldrh	r3, [r7, #20]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d838      	bhi.n	8004242 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80041d0:	8afa      	ldrh	r2, [r7, #22]
 80041d2:	8bfb      	ldrh	r3, [r7, #30]
 80041d4:	4413      	add	r3, r2
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3308      	adds	r3, #8
 80041da:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80041e4:	d106      	bne.n	80041f4 <mem_trim+0x180>
 80041e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004254 <mem_trim+0x1e0>)
 80041e8:	f240 3216 	movw	r2, #790	@ 0x316
 80041ec:	491d      	ldr	r1, [pc, #116]	@ (8004264 <mem_trim+0x1f0>)
 80041ee:	481b      	ldr	r0, [pc, #108]	@ (800425c <mem_trim+0x1e8>)
 80041f0:	f009 fe20 	bl	800de34 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80041f4:	89fb      	ldrh	r3, [r7, #14]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fd94 	bl	8003d24 <ptr_to_mem>
 80041fc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80041fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <mem_trim+0x1f4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	429a      	cmp	r2, r3
 8004206:	d202      	bcs.n	800420e <mem_trim+0x19a>
      lfree = mem2;
 8004208:	4a17      	ldr	r2, [pc, #92]	@ (8004268 <mem_trim+0x1f4>)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2200      	movs	r2, #0
 8004212:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	881a      	ldrh	r2, [r3, #0]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	8afa      	ldrh	r2, [r7, #22]
 8004220:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	89fa      	ldrh	r2, [r7, #14]
 8004226:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004230:	d007      	beq.n	8004242 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff fd74 	bl	8003d24 <ptr_to_mem>
 800423c:	4602      	mov	r2, r0
 800423e:	89fb      	ldrh	r3, [r7, #14]
 8004240:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004242:	687b      	ldr	r3, [r7, #4]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	2000534c 	.word	0x2000534c
 8004250:	20005350 	.word	0x20005350
 8004254:	0800ecd0 	.word	0x0800ecd0
 8004258:	0800ee40 	.word	0x0800ee40
 800425c:	0800ed18 	.word	0x0800ed18
 8004260:	0800ee58 	.word	0x0800ee58
 8004264:	0800ee78 	.word	0x0800ee78
 8004268:	20005354 	.word	0x20005354

0800426c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <mem_malloc+0x14>
    return NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	e0d9      	b.n	8004434 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	3303      	adds	r3, #3
 8004284:	b29b      	uxth	r3, r3
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800428c:	8bbb      	ldrh	r3, [r7, #28]
 800428e:	2b0b      	cmp	r3, #11
 8004290:	d801      	bhi.n	8004296 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004292:	230c      	movs	r3, #12
 8004294:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004296:	8bbb      	ldrh	r3, [r7, #28]
 8004298:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800429c:	d803      	bhi.n	80042a6 <mem_malloc+0x3a>
 800429e:	8bba      	ldrh	r2, [r7, #28]
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d201      	bcs.n	80042aa <mem_malloc+0x3e>
    return NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e0c4      	b.n	8004434 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80042aa:	4b64      	ldr	r3, [pc, #400]	@ (800443c <mem_malloc+0x1d0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fd4a 	bl	8003d48 <mem_to_ptr>
 80042b4:	4603      	mov	r3, r0
 80042b6:	83fb      	strh	r3, [r7, #30]
 80042b8:	e0b4      	b.n	8004424 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80042ba:	8bfb      	ldrh	r3, [r7, #30]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fd31 	bl	8003d24 <ptr_to_mem>
 80042c2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	791b      	ldrb	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f040 80a4 	bne.w	8004416 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	8bfb      	ldrh	r3, [r7, #30]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f1a3 0208 	sub.w	r2, r3, #8
 80042dc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80042de:	429a      	cmp	r2, r3
 80042e0:	f0c0 8099 	bcc.w	8004416 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	8bfb      	ldrh	r3, [r7, #30]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f1a3 0208 	sub.w	r2, r3, #8
 80042f2:	8bbb      	ldrh	r3, [r7, #28]
 80042f4:	3314      	adds	r3, #20
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d333      	bcc.n	8004362 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80042fa:	8bfa      	ldrh	r2, [r7, #30]
 80042fc:	8bbb      	ldrh	r3, [r7, #28]
 80042fe:	4413      	add	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	3308      	adds	r3, #8
 8004304:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004306:	8a7b      	ldrh	r3, [r7, #18]
 8004308:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800430c:	d106      	bne.n	800431c <mem_malloc+0xb0>
 800430e:	4b4c      	ldr	r3, [pc, #304]	@ (8004440 <mem_malloc+0x1d4>)
 8004310:	f240 3287 	movw	r2, #903	@ 0x387
 8004314:	494b      	ldr	r1, [pc, #300]	@ (8004444 <mem_malloc+0x1d8>)
 8004316:	484c      	ldr	r0, [pc, #304]	@ (8004448 <mem_malloc+0x1dc>)
 8004318:	f009 fd8c 	bl	800de34 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800431c:	8a7b      	ldrh	r3, [r7, #18]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fd00 	bl	8003d24 <ptr_to_mem>
 8004324:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	881a      	ldrh	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8bfa      	ldrh	r2, [r7, #30]
 8004338:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	8a7a      	ldrh	r2, [r7, #18]
 800433e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2201      	movs	r2, #1
 8004344:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800434e:	d00b      	beq.n	8004368 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fce5 	bl	8003d24 <ptr_to_mem>
 800435a:	4602      	mov	r2, r0
 800435c:	8a7b      	ldrh	r3, [r7, #18]
 800435e:	8053      	strh	r3, [r2, #2]
 8004360:	e002      	b.n	8004368 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2201      	movs	r2, #1
 8004366:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004368:	4b34      	ldr	r3, [pc, #208]	@ (800443c <mem_malloc+0x1d0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	429a      	cmp	r2, r3
 8004370:	d127      	bne.n	80043c2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004372:	4b32      	ldr	r3, [pc, #200]	@ (800443c <mem_malloc+0x1d0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004378:	e005      	b.n	8004386 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fcd0 	bl	8003d24 <ptr_to_mem>
 8004384:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	791b      	ldrb	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <mem_malloc+0x12c>
 800438e:	4b2f      	ldr	r3, [pc, #188]	@ (800444c <mem_malloc+0x1e0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	429a      	cmp	r2, r3
 8004396:	d1f0      	bne.n	800437a <mem_malloc+0x10e>
          }
          lfree = cur;
 8004398:	4a28      	ldr	r2, [pc, #160]	@ (800443c <mem_malloc+0x1d0>)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800439e:	4b27      	ldr	r3, [pc, #156]	@ (800443c <mem_malloc+0x1d0>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b2a      	ldr	r3, [pc, #168]	@ (800444c <mem_malloc+0x1e0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d00b      	beq.n	80043c2 <mem_malloc+0x156>
 80043aa:	4b24      	ldr	r3, [pc, #144]	@ (800443c <mem_malloc+0x1d0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	791b      	ldrb	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d006      	beq.n	80043c2 <mem_malloc+0x156>
 80043b4:	4b22      	ldr	r3, [pc, #136]	@ (8004440 <mem_malloc+0x1d4>)
 80043b6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80043ba:	4925      	ldr	r1, [pc, #148]	@ (8004450 <mem_malloc+0x1e4>)
 80043bc:	4822      	ldr	r0, [pc, #136]	@ (8004448 <mem_malloc+0x1dc>)
 80043be:	f009 fd39 	bl	800de34 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80043c2:	8bba      	ldrh	r2, [r7, #28]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4413      	add	r3, r2
 80043c8:	3308      	adds	r3, #8
 80043ca:	4a20      	ldr	r2, [pc, #128]	@ (800444c <mem_malloc+0x1e0>)
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d906      	bls.n	80043e0 <mem_malloc+0x174>
 80043d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <mem_malloc+0x1d4>)
 80043d4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80043d8:	491e      	ldr	r1, [pc, #120]	@ (8004454 <mem_malloc+0x1e8>)
 80043da:	481b      	ldr	r0, [pc, #108]	@ (8004448 <mem_malloc+0x1dc>)
 80043dc:	f009 fd2a 	bl	800de34 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d006      	beq.n	80043f8 <mem_malloc+0x18c>
 80043ea:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <mem_malloc+0x1d4>)
 80043ec:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80043f0:	4919      	ldr	r1, [pc, #100]	@ (8004458 <mem_malloc+0x1ec>)
 80043f2:	4815      	ldr	r0, [pc, #84]	@ (8004448 <mem_malloc+0x1dc>)
 80043f4:	f009 fd1e 	bl	800de34 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d006      	beq.n	8004410 <mem_malloc+0x1a4>
 8004402:	4b0f      	ldr	r3, [pc, #60]	@ (8004440 <mem_malloc+0x1d4>)
 8004404:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8004408:	4914      	ldr	r1, [pc, #80]	@ (800445c <mem_malloc+0x1f0>)
 800440a:	480f      	ldr	r0, [pc, #60]	@ (8004448 <mem_malloc+0x1dc>)
 800440c:	f009 fd12 	bl	800de34 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	3308      	adds	r3, #8
 8004414:	e00e      	b.n	8004434 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004416:	8bfb      	ldrh	r3, [r7, #30]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fc83 	bl	8003d24 <ptr_to_mem>
 800441e:	4603      	mov	r3, r0
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004424:	8bfa      	ldrh	r2, [r7, #30]
 8004426:	8bbb      	ldrh	r3, [r7, #28]
 8004428:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800442c:	429a      	cmp	r2, r3
 800442e:	f4ff af44 	bcc.w	80042ba <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20005354 	.word	0x20005354
 8004440:	0800ecd0 	.word	0x0800ecd0
 8004444:	0800ee78 	.word	0x0800ee78
 8004448:	0800ed18 	.word	0x0800ed18
 800444c:	20005350 	.word	0x20005350
 8004450:	0800ee8c 	.word	0x0800ee8c
 8004454:	0800eea8 	.word	0x0800eea8
 8004458:	0800eed8 	.word	0x0800eed8
 800445c:	0800ef08 	.word	0x0800ef08

08004460 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	3303      	adds	r3, #3
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e011      	b.n	80044a6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4413      	add	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3301      	adds	r3, #1
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	885b      	ldrh	r3, [r3, #2]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4293      	cmp	r3, r2
 80044b0:	dbe7      	blt.n	8004482 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80044c6:	2300      	movs	r3, #0
 80044c8:	80fb      	strh	r3, [r7, #6]
 80044ca:	e009      	b.n	80044e0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <memp_init+0x30>)
 80044d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff ffc3 	bl	8004460 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	3301      	adds	r3, #1
 80044de:	80fb      	strh	r3, [r7, #6]
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d9f2      	bls.n	80044cc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	080116e4 	.word	0x080116e4

080044f4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d012      	beq.n	8004530 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d006      	beq.n	800452c <do_memp_malloc_pool+0x38>
 800451e:	4b07      	ldr	r3, [pc, #28]	@ (800453c <do_memp_malloc_pool+0x48>)
 8004520:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8004524:	4906      	ldr	r1, [pc, #24]	@ (8004540 <do_memp_malloc_pool+0x4c>)
 8004526:	4807      	ldr	r0, [pc, #28]	@ (8004544 <do_memp_malloc_pool+0x50>)
 8004528:	f009 fc84 	bl	800de34 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	e000      	b.n	8004532 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	0800ef2c 	.word	0x0800ef2c
 8004540:	0800ef5c 	.word	0x0800ef5c
 8004544:	0800ef80 	.word	0x0800ef80

08004548 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <memp_malloc_pool+0x1c>
 8004556:	4b0a      	ldr	r3, [pc, #40]	@ (8004580 <memp_malloc_pool+0x38>)
 8004558:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800455c:	4909      	ldr	r1, [pc, #36]	@ (8004584 <memp_malloc_pool+0x3c>)
 800455e:	480a      	ldr	r0, [pc, #40]	@ (8004588 <memp_malloc_pool+0x40>)
 8004560:	f009 fc68 	bl	800de34 <iprintf>
  if (desc == NULL) {
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <memp_malloc_pool+0x26>
    return NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	e003      	b.n	8004576 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff ffc0 	bl	80044f4 <do_memp_malloc_pool>
 8004574:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	0800ef2c 	.word	0x0800ef2c
 8004584:	0800efa8 	.word	0x0800efa8
 8004588:	0800ef80 	.word	0x0800ef80

0800458c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d908      	bls.n	80045ae <memp_malloc+0x22>
 800459c:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <memp_malloc+0x3c>)
 800459e:	f240 1257 	movw	r2, #343	@ 0x157
 80045a2:	490a      	ldr	r1, [pc, #40]	@ (80045cc <memp_malloc+0x40>)
 80045a4:	480a      	ldr	r0, [pc, #40]	@ (80045d0 <memp_malloc+0x44>)
 80045a6:	f009 fc45 	bl	800de34 <iprintf>
 80045aa:	2300      	movs	r3, #0
 80045ac:	e008      	b.n	80045c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	4a08      	ldr	r2, [pc, #32]	@ (80045d4 <memp_malloc+0x48>)
 80045b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff ff9c 	bl	80044f4 <do_memp_malloc_pool>
 80045bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80045be:	68fb      	ldr	r3, [r7, #12]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	0800ef2c 	.word	0x0800ef2c
 80045cc:	0800efbc 	.word	0x0800efbc
 80045d0:	0800ef80 	.word	0x0800ef80
 80045d4:	080116e4 	.word	0x080116e4

080045d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <do_memp_free_pool+0x22>
 80045ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <do_memp_free_pool+0x40>)
 80045ee:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80045f2:	490a      	ldr	r1, [pc, #40]	@ (800461c <do_memp_free_pool+0x44>)
 80045f4:	480a      	ldr	r0, [pc, #40]	@ (8004620 <do_memp_free_pool+0x48>)
 80045f6:	f009 fc1d 	bl	800de34 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	0800ef2c 	.word	0x0800ef2c
 800461c:	0800efdc 	.word	0x0800efdc
 8004620:	0800ef80 	.word	0x0800ef80

08004624 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d106      	bne.n	8004642 <memp_free_pool+0x1e>
 8004634:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <memp_free_pool+0x3c>)
 8004636:	f240 1295 	movw	r2, #405	@ 0x195
 800463a:	490a      	ldr	r1, [pc, #40]	@ (8004664 <memp_free_pool+0x40>)
 800463c:	480a      	ldr	r0, [pc, #40]	@ (8004668 <memp_free_pool+0x44>)
 800463e:	f009 fbf9 	bl	800de34 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <memp_free_pool+0x34>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ffc1 	bl	80045d8 <do_memp_free_pool>
 8004656:	e000      	b.n	800465a <memp_free_pool+0x36>
    return;
 8004658:	bf00      	nop
}
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	0800ef2c 	.word	0x0800ef2c
 8004664:	0800efa8 	.word	0x0800efa8
 8004668:	0800ef80 	.word	0x0800ef80

0800466c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	6039      	str	r1, [r7, #0]
 8004676:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	2b08      	cmp	r3, #8
 800467c:	d907      	bls.n	800468e <memp_free+0x22>
 800467e:	4b0c      	ldr	r3, [pc, #48]	@ (80046b0 <memp_free+0x44>)
 8004680:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8004684:	490b      	ldr	r1, [pc, #44]	@ (80046b4 <memp_free+0x48>)
 8004686:	480c      	ldr	r0, [pc, #48]	@ (80046b8 <memp_free+0x4c>)
 8004688:	f009 fbd4 	bl	800de34 <iprintf>
 800468c:	e00c      	b.n	80046a8 <memp_free+0x3c>

  if (mem == NULL) {
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	4a09      	ldr	r2, [pc, #36]	@ (80046bc <memp_free+0x50>)
 8004698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469c:	6839      	ldr	r1, [r7, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ff9a 	bl	80045d8 <do_memp_free_pool>
 80046a4:	e000      	b.n	80046a8 <memp_free+0x3c>
    return;
 80046a6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	0800ef2c 	.word	0x0800ef2c
 80046b4:	0800effc 	.word	0x0800effc
 80046b8:	0800ef80 	.word	0x0800ef80
 80046bc:	080116e4 	.word	0x080116e4

080046c0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d108      	bne.n	80046f6 <netif_add+0x26>
 80046e4:	4b57      	ldr	r3, [pc, #348]	@ (8004844 <netif_add+0x174>)
 80046e6:	f240 1227 	movw	r2, #295	@ 0x127
 80046ea:	4957      	ldr	r1, [pc, #348]	@ (8004848 <netif_add+0x178>)
 80046ec:	4857      	ldr	r0, [pc, #348]	@ (800484c <netif_add+0x17c>)
 80046ee:	f009 fba1 	bl	800de34 <iprintf>
 80046f2:	2300      	movs	r3, #0
 80046f4:	e0a2      	b.n	800483c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <netif_add+0x3e>
 80046fc:	4b51      	ldr	r3, [pc, #324]	@ (8004844 <netif_add+0x174>)
 80046fe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004702:	4953      	ldr	r1, [pc, #332]	@ (8004850 <netif_add+0x180>)
 8004704:	4851      	ldr	r0, [pc, #324]	@ (800484c <netif_add+0x17c>)
 8004706:	f009 fb95 	bl	800de34 <iprintf>
 800470a:	2300      	movs	r3, #0
 800470c:	e096      	b.n	800483c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004714:	4b4f      	ldr	r3, [pc, #316]	@ (8004854 <netif_add+0x184>)
 8004716:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800471e:	4b4d      	ldr	r3, [pc, #308]	@ (8004854 <netif_add+0x184>)
 8004720:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004728:	4b4a      	ldr	r3, [pc, #296]	@ (8004854 <netif_add+0x184>)
 800472a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a45      	ldr	r2, [pc, #276]	@ (8004858 <netif_add+0x188>)
 8004742:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a3a      	ldr	r2, [r7, #32]
 800475c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800475e:	4b3f      	ldr	r3, [pc, #252]	@ (800485c <netif_add+0x18c>)
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800476c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f913 	bl	80049a0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	4798      	blx	r3
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <netif_add+0xba>
    return NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	e058      	b.n	800483c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004790:	2bff      	cmp	r3, #255	@ 0xff
 8004792:	d103      	bne.n	800479c <netif_add+0xcc>
        netif->num = 0;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80047a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004860 <netif_add+0x190>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e02b      	b.n	8004800 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d106      	bne.n	80047be <netif_add+0xee>
 80047b0:	4b24      	ldr	r3, [pc, #144]	@ (8004844 <netif_add+0x174>)
 80047b2:	f240 128b 	movw	r2, #395	@ 0x18b
 80047b6:	492b      	ldr	r1, [pc, #172]	@ (8004864 <netif_add+0x194>)
 80047b8:	4824      	ldr	r0, [pc, #144]	@ (800484c <netif_add+0x17c>)
 80047ba:	f009 fb3b 	bl	800de34 <iprintf>
        num_netifs++;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	3301      	adds	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2bff      	cmp	r3, #255	@ 0xff
 80047c8:	dd06      	ble.n	80047d8 <netif_add+0x108>
 80047ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004844 <netif_add+0x174>)
 80047cc:	f240 128d 	movw	r2, #397	@ 0x18d
 80047d0:	4925      	ldr	r1, [pc, #148]	@ (8004868 <netif_add+0x198>)
 80047d2:	481e      	ldr	r0, [pc, #120]	@ (800484c <netif_add+0x17c>)
 80047d4:	f009 fb2e 	bl	800de34 <iprintf>
        if (netif2->num == netif->num) {
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d108      	bne.n	80047fa <netif_add+0x12a>
          netif->num++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047ee:	3301      	adds	r3, #1
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80047f8:	e005      	b.n	8004806 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1d0      	bne.n	80047a8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1be      	bne.n	800478a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004812:	2bfe      	cmp	r3, #254	@ 0xfe
 8004814:	d103      	bne.n	800481e <netif_add+0x14e>
    netif_num = 0;
 8004816:	4b11      	ldr	r3, [pc, #68]	@ (800485c <netif_add+0x18c>)
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e006      	b.n	800482c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004824:	3301      	adds	r3, #1
 8004826:	b2da      	uxtb	r2, r3
 8004828:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <netif_add+0x18c>)
 800482a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800482c:	4b0c      	ldr	r3, [pc, #48]	@ (8004860 <netif_add+0x190>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004834:	4a0a      	ldr	r2, [pc, #40]	@ (8004860 <netif_add+0x190>)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800483a:	68fb      	ldr	r3, [r7, #12]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	0800f018 	.word	0x0800f018
 8004848:	0800f0ac 	.word	0x0800f0ac
 800484c:	0800f068 	.word	0x0800f068
 8004850:	0800f0c8 	.word	0x0800f0c8
 8004854:	08011748 	.word	0x08011748
 8004858:	08004c7b 	.word	0x08004c7b
 800485c:	2000824c 	.word	0x2000824c
 8004860:	20008244 	.word	0x20008244
 8004864:	0800f0ec 	.word	0x0800f0ec
 8004868:	0800f100 	.word	0x0800f100

0800486c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004876:	6839      	ldr	r1, [r7, #0]
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f002 fb55 	bl	8006f28 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800487e:	6839      	ldr	r1, [r7, #0]
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f006 fee1 	bl	800b648 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <netif_do_set_ipaddr+0x20>
 80048a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004918 <netif_do_set_ipaddr+0x88>)
 80048a4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80048a8:	491c      	ldr	r1, [pc, #112]	@ (800491c <netif_do_set_ipaddr+0x8c>)
 80048aa:	481d      	ldr	r0, [pc, #116]	@ (8004920 <netif_do_set_ipaddr+0x90>)
 80048ac:	f009 fac2 	bl	800de34 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <netif_do_set_ipaddr+0x34>
 80048b6:	4b18      	ldr	r3, [pc, #96]	@ (8004918 <netif_do_set_ipaddr+0x88>)
 80048b8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80048bc:	4917      	ldr	r1, [pc, #92]	@ (800491c <netif_do_set_ipaddr+0x8c>)
 80048be:	4818      	ldr	r0, [pc, #96]	@ (8004920 <netif_do_set_ipaddr+0x90>)
 80048c0:	f009 fab8 	bl	800de34 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3304      	adds	r3, #4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d01c      	beq.n	800490c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3304      	adds	r3, #4
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80048e2:	f107 0314 	add.w	r3, r7, #20
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff ffbf 	bl	800486c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <netif_do_set_ipaddr+0x6a>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	e000      	b.n	80048fc <netif_do_set_ipaddr+0x6c>
 80048fa:	2300      	movs	r3, #0
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004900:	2101      	movs	r1, #1
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f8d2 	bl	8004aac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	0800f018 	.word	0x0800f018
 800491c:	0800f130 	.word	0x0800f130
 8004920:	0800f068 	.word	0x0800f068

08004924 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3308      	adds	r3, #8
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d00a      	beq.n	8004954 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <netif_do_set_netmask+0x26>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	e000      	b.n	800494c <netif_do_set_netmask+0x28>
 800494a:	2300      	movs	r3, #0
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	330c      	adds	r3, #12
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d00a      	beq.n	8004992 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <netif_do_set_gw+0x26>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	e000      	b.n	800498a <netif_do_set_gw+0x28>
 8004988:	2300      	movs	r3, #0
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80049bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004a30 <netif_set_addr+0x90>)
 80049be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80049c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <netif_set_addr+0x90>)
 80049c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80049d0:	4b17      	ldr	r3, [pc, #92]	@ (8004a30 <netif_set_addr+0x90>)
 80049d2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <netif_set_addr+0x42>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <netif_set_addr+0x46>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <netif_set_addr+0x48>
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80049f0:	f107 0310 	add.w	r3, r7, #16
 80049f4:	461a      	mov	r2, r3
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff ff49 	bl	8004890 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7ff ff8e 	bl	8004924 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	6839      	ldr	r1, [r7, #0]
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f7ff ffa8 	bl	8004962 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004a18:	f107 0310 	add.w	r3, r7, #16
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7ff ff35 	bl	8004890 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004a26:	bf00      	nop
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	08011748 	.word	0x08011748

08004a34 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004a3c:	4a04      	ldr	r2, [pc, #16]	@ (8004a50 <netif_set_default+0x1c>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20008248 	.word	0x20008248

08004a54 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d107      	bne.n	8004a72 <netif_set_up+0x1e>
 8004a62:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa0 <netif_set_up+0x4c>)
 8004a64:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8004a68:	490e      	ldr	r1, [pc, #56]	@ (8004aa4 <netif_set_up+0x50>)
 8004a6a:	480f      	ldr	r0, [pc, #60]	@ (8004aa8 <netif_set_up+0x54>)
 8004a6c:	f009 f9e2 	bl	800de34 <iprintf>
 8004a70:	e013      	b.n	8004a9a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10c      	bne.n	8004a9a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004a92:	2103      	movs	r1, #3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f809 	bl	8004aac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	0800f018 	.word	0x0800f018
 8004aa4:	0800f1a0 	.word	0x0800f1a0
 8004aa8:	0800f068 	.word	0x0800f068

08004aac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <netif_issue_reports+0x20>
 8004abe:	4b18      	ldr	r3, [pc, #96]	@ (8004b20 <netif_issue_reports+0x74>)
 8004ac0:	f240 326d 	movw	r2, #877	@ 0x36d
 8004ac4:	4917      	ldr	r1, [pc, #92]	@ (8004b24 <netif_issue_reports+0x78>)
 8004ac6:	4818      	ldr	r0, [pc, #96]	@ (8004b28 <netif_issue_reports+0x7c>)
 8004ac8:	f009 f9b4 	bl	800de34 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01e      	beq.n	8004b18 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ae0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d017      	beq.n	8004b18 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d013      	beq.n	8004b1a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3304      	adds	r3, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00e      	beq.n	8004b1a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f007 fd03 	bl	800c51c <etharp_request>
 8004b16:	e000      	b.n	8004b1a <netif_issue_reports+0x6e>
    return;
 8004b18:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	0800f018 	.word	0x0800f018
 8004b24:	0800f1bc 	.word	0x0800f1bc
 8004b28:	0800f068 	.word	0x0800f068

08004b2c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d107      	bne.n	8004b4a <netif_set_down+0x1e>
 8004b3a:	4b12      	ldr	r3, [pc, #72]	@ (8004b84 <netif_set_down+0x58>)
 8004b3c:	f240 329b 	movw	r2, #923	@ 0x39b
 8004b40:	4911      	ldr	r1, [pc, #68]	@ (8004b88 <netif_set_down+0x5c>)
 8004b42:	4812      	ldr	r0, [pc, #72]	@ (8004b8c <netif_set_down+0x60>)
 8004b44:	f009 f976 	bl	800de34 <iprintf>
 8004b48:	e019      	b.n	8004b7e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d012      	beq.n	8004b7e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f007 f88d 	bl	800bc98 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	0800f018 	.word	0x0800f018
 8004b88:	0800f1e0 	.word	0x0800f1e0
 8004b8c:	0800f068 	.word	0x0800f068

08004b90 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d107      	bne.n	8004bae <netif_set_link_up+0x1e>
 8004b9e:	4b13      	ldr	r3, [pc, #76]	@ (8004bec <netif_set_link_up+0x5c>)
 8004ba0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8004ba4:	4912      	ldr	r1, [pc, #72]	@ (8004bf0 <netif_set_link_up+0x60>)
 8004ba6:	4813      	ldr	r0, [pc, #76]	@ (8004bf4 <netif_set_link_up+0x64>)
 8004ba8:	f009 f944 	bl	800de34 <iprintf>
 8004bac:	e01b      	b.n	8004be6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d114      	bne.n	8004be6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004bc2:	f043 0304 	orr.w	r3, r3, #4
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004bce:	2103      	movs	r1, #3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff ff6b 	bl	8004aac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <netif_set_link_up+0x56>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	0800f018 	.word	0x0800f018
 8004bf0:	0800f200 	.word	0x0800f200
 8004bf4:	0800f068 	.word	0x0800f068

08004bf8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d107      	bne.n	8004c16 <netif_set_link_down+0x1e>
 8004c06:	4b11      	ldr	r3, [pc, #68]	@ (8004c4c <netif_set_link_down+0x54>)
 8004c08:	f240 4206 	movw	r2, #1030	@ 0x406
 8004c0c:	4910      	ldr	r1, [pc, #64]	@ (8004c50 <netif_set_link_down+0x58>)
 8004c0e:	4811      	ldr	r0, [pc, #68]	@ (8004c54 <netif_set_link_down+0x5c>)
 8004c10:	f009 f910 	bl	800de34 <iprintf>
 8004c14:	e017      	b.n	8004c46 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d010      	beq.n	8004c46 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004c2a:	f023 0304 	bic.w	r3, r3, #4
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <netif_set_link_down+0x4e>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	0800f018 	.word	0x0800f018
 8004c50:	0800f224 	.word	0x0800f224
 8004c54:	0800f068 	.word	0x0800f068

08004c58 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	61da      	str	r2, [r3, #28]
  }
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004c86:	f06f 030b 	mvn.w	r3, #11
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d013      	beq.n	8004cd0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce0 <netif_get_by_index+0x48>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	e00c      	b.n	8004cca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	79fa      	ldrb	r2, [r7, #7]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d101      	bne.n	8004cc4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	e006      	b.n	8004cd2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1ef      	bne.n	8004cb0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20008244 	.word	0x20008244

08004ce4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004cea:	4b0c      	ldr	r3, [pc, #48]	@ (8004d1c <pbuf_free_ooseq+0x38>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <pbuf_free_ooseq+0x3c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	e00a      	b.n	8004d0e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f002 f94f 	bl	8006fa4 <tcp_free_ooseq>
      return;
 8004d06:	e005      	b.n	8004d14 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f1      	bne.n	8004cf8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	2000824d 	.word	0x2000824d
 8004d20:	2000825c 	.word	0x2000825c

08004d24 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004d28:	4b03      	ldr	r3, [pc, #12]	@ (8004d38 <pbuf_pool_is_empty+0x14>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004d2e:	bf00      	nop
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	2000824d 	.word	0x2000824d

08004d3c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	4611      	mov	r1, r2
 8004d48:	461a      	mov	r2, r3
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	80fb      	strh	r3, [r7, #6]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	88fa      	ldrh	r2, [r7, #6]
 8004d62:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	88ba      	ldrh	r2, [r7, #4]
 8004d68:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004d6a:	8b3b      	ldrh	r3, [r7, #24]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	7f3a      	ldrb	r2, [r7, #28]
 8004d76:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	73da      	strb	r2, [r3, #15]
}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08c      	sub	sp, #48	@ 0x30
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	4603      	mov	r3, r0
 8004d98:	71fb      	strb	r3, [r7, #7]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	80bb      	strh	r3, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004da6:	887b      	ldrh	r3, [r7, #2]
 8004da8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8004dac:	d07f      	beq.n	8004eae <pbuf_alloc+0x11e>
 8004dae:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8004db2:	f300 80c8 	bgt.w	8004f46 <pbuf_alloc+0x1b6>
 8004db6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8004dba:	d010      	beq.n	8004dde <pbuf_alloc+0x4e>
 8004dbc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8004dc0:	f300 80c1 	bgt.w	8004f46 <pbuf_alloc+0x1b6>
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d002      	beq.n	8004dce <pbuf_alloc+0x3e>
 8004dc8:	2b41      	cmp	r3, #65	@ 0x41
 8004dca:	f040 80bc 	bne.w	8004f46 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	88bb      	ldrh	r3, [r7, #4]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f000 f8d1 	bl	8004f7c <pbuf_alloc_reference>
 8004dda:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8004ddc:	e0bd      	b.n	8004f5a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004de6:	88bb      	ldrh	r3, [r7, #4]
 8004de8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004dea:	2008      	movs	r0, #8
 8004dec:	f7ff fbce 	bl	800458c <memp_malloc>
 8004df0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d109      	bne.n	8004e0c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004df8:	f7ff ff94 	bl	8004d24 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004e02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e04:	f000 faa8 	bl	8005358 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e0a7      	b.n	8004f5c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004e0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e0e:	3303      	adds	r3, #3
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f023 0303 	bic.w	r3, r3, #3
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	8b7a      	ldrh	r2, [r7, #26]
 8004e20:	4293      	cmp	r3, r2
 8004e22:	bf28      	it	cs
 8004e24:	4613      	movcs	r3, r2
 8004e26:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004e28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e2a:	3310      	adds	r3, #16
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4413      	add	r3, r2
 8004e30:	3303      	adds	r3, #3
 8004e32:	f023 0303 	bic.w	r3, r3, #3
 8004e36:	4618      	mov	r0, r3
 8004e38:	89f9      	ldrh	r1, [r7, #14]
 8004e3a:	8b7a      	ldrh	r2, [r7, #26]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	887b      	ldrh	r3, [r7, #2]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	460b      	mov	r3, r1
 8004e46:	4601      	mov	r1, r0
 8004e48:	6938      	ldr	r0, [r7, #16]
 8004e4a:	f7ff ff77 	bl	8004d3c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d006      	beq.n	8004e68 <pbuf_alloc+0xd8>
 8004e5a:	4b42      	ldr	r3, [pc, #264]	@ (8004f64 <pbuf_alloc+0x1d4>)
 8004e5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e60:	4941      	ldr	r1, [pc, #260]	@ (8004f68 <pbuf_alloc+0x1d8>)
 8004e62:	4842      	ldr	r0, [pc, #264]	@ (8004f6c <pbuf_alloc+0x1dc>)
 8004e64:	f008 ffe6 	bl	800de34 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004e68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e6a:	3303      	adds	r3, #3
 8004e6c:	f023 0303 	bic.w	r3, r3, #3
 8004e70:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8004e74:	d106      	bne.n	8004e84 <pbuf_alloc+0xf4>
 8004e76:	4b3b      	ldr	r3, [pc, #236]	@ (8004f64 <pbuf_alloc+0x1d4>)
 8004e78:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8004e7c:	493c      	ldr	r1, [pc, #240]	@ (8004f70 <pbuf_alloc+0x1e0>)
 8004e7e:	483b      	ldr	r0, [pc, #236]	@ (8004f6c <pbuf_alloc+0x1dc>)
 8004e80:	f008 ffd8 	bl	800de34 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e8e:	e002      	b.n	8004e96 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004e9a:	8b7a      	ldrh	r2, [r7, #26]
 8004e9c:	89fb      	ldrh	r3, [r7, #14]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8004ea6:	8b7b      	ldrh	r3, [r7, #26]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d19e      	bne.n	8004dea <pbuf_alloc+0x5a>
      break;
 8004eac:	e055      	b.n	8004f5a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004eae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004eb0:	3303      	adds	r3, #3
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f023 0303 	bic.w	r3, r3, #3
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	88bb      	ldrh	r3, [r7, #4]
 8004ebc:	3303      	adds	r3, #3
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f023 0303 	bic.w	r3, r3, #3
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004eca:	8b3b      	ldrh	r3, [r7, #24]
 8004ecc:	3310      	adds	r3, #16
 8004ece:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004ed0:	8b3a      	ldrh	r2, [r7, #24]
 8004ed2:	88bb      	ldrh	r3, [r7, #4]
 8004ed4:	3303      	adds	r3, #3
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d306      	bcc.n	8004eec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004ede:	8afa      	ldrh	r2, [r7, #22]
 8004ee0:	88bb      	ldrh	r3, [r7, #4]
 8004ee2:	3303      	adds	r3, #3
 8004ee4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d201      	bcs.n	8004ef0 <pbuf_alloc+0x160>
        return NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	e035      	b.n	8004f5c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004ef0:	8afb      	ldrh	r3, [r7, #22]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff f9ba 	bl	800426c <mem_malloc>
 8004ef8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <pbuf_alloc+0x174>
        return NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e02b      	b.n	8004f5c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004f04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004f06:	3310      	adds	r3, #16
 8004f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3303      	adds	r3, #3
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	4618      	mov	r0, r3
 8004f14:	88b9      	ldrh	r1, [r7, #4]
 8004f16:	88ba      	ldrh	r2, [r7, #4]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	460b      	mov	r3, r1
 8004f22:	4601      	mov	r1, r0
 8004f24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f26:	f7ff ff09 	bl	8004d3c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d010      	beq.n	8004f58 <pbuf_alloc+0x1c8>
 8004f36:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <pbuf_alloc+0x1d4>)
 8004f38:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8004f3c:	490d      	ldr	r1, [pc, #52]	@ (8004f74 <pbuf_alloc+0x1e4>)
 8004f3e:	480b      	ldr	r0, [pc, #44]	@ (8004f6c <pbuf_alloc+0x1dc>)
 8004f40:	f008 ff78 	bl	800de34 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004f44:	e008      	b.n	8004f58 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004f46:	4b07      	ldr	r3, [pc, #28]	@ (8004f64 <pbuf_alloc+0x1d4>)
 8004f48:	f240 1227 	movw	r2, #295	@ 0x127
 8004f4c:	490a      	ldr	r1, [pc, #40]	@ (8004f78 <pbuf_alloc+0x1e8>)
 8004f4e:	4807      	ldr	r0, [pc, #28]	@ (8004f6c <pbuf_alloc+0x1dc>)
 8004f50:	f008 ff70 	bl	800de34 <iprintf>
      return NULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e001      	b.n	8004f5c <pbuf_alloc+0x1cc>
      break;
 8004f58:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3728      	adds	r7, #40	@ 0x28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	0800f248 	.word	0x0800f248
 8004f68:	0800f278 	.word	0x0800f278
 8004f6c:	0800f2a8 	.word	0x0800f2a8
 8004f70:	0800f2d0 	.word	0x0800f2d0
 8004f74:	0800f304 	.word	0x0800f304
 8004f78:	0800f330 	.word	0x0800f330

08004f7c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	807b      	strh	r3, [r7, #2]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004f8c:	883b      	ldrh	r3, [r7, #0]
 8004f8e:	2b41      	cmp	r3, #65	@ 0x41
 8004f90:	d009      	beq.n	8004fa6 <pbuf_alloc_reference+0x2a>
 8004f92:	883b      	ldrh	r3, [r7, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d006      	beq.n	8004fa6 <pbuf_alloc_reference+0x2a>
 8004f98:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd8 <pbuf_alloc_reference+0x5c>)
 8004f9a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8004f9e:	490f      	ldr	r1, [pc, #60]	@ (8004fdc <pbuf_alloc_reference+0x60>)
 8004fa0:	480f      	ldr	r0, [pc, #60]	@ (8004fe0 <pbuf_alloc_reference+0x64>)
 8004fa2:	f008 ff47 	bl	800de34 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004fa6:	2007      	movs	r0, #7
 8004fa8:	f7ff faf0 	bl	800458c <memp_malloc>
 8004fac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e00b      	b.n	8004fd0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004fb8:	8879      	ldrh	r1, [r7, #2]
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	883b      	ldrh	r3, [r7, #0]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f7ff feb7 	bl	8004d3c <pbuf_init_alloced_pbuf>
  return p;
 8004fce:	68fb      	ldr	r3, [r7, #12]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	0800f248 	.word	0x0800f248
 8004fdc:	0800f34c 	.word	0x0800f34c
 8004fe0:	0800f2a8 	.word	0x0800f2a8

08004fe4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	607b      	str	r3, [r7, #4]
 8004fec:	4603      	mov	r3, r0
 8004fee:	73fb      	strb	r3, [r7, #15]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	81bb      	strh	r3, [r7, #12]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004ffc:	8a7b      	ldrh	r3, [r7, #18]
 8004ffe:	3303      	adds	r3, #3
 8005000:	f023 0203 	bic.w	r2, r3, #3
 8005004:	89bb      	ldrh	r3, [r7, #12]
 8005006:	441a      	add	r2, r3
 8005008:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800500a:	429a      	cmp	r2, r3
 800500c:	d901      	bls.n	8005012 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800500e:	2300      	movs	r3, #0
 8005010:	e018      	b.n	8005044 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005018:	8a7b      	ldrh	r3, [r7, #18]
 800501a:	3303      	adds	r3, #3
 800501c:	f023 0303 	bic.w	r3, r3, #3
 8005020:	6a3a      	ldr	r2, [r7, #32]
 8005022:	4413      	add	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	e001      	b.n	800502c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	89b9      	ldrh	r1, [r7, #12]
 8005030:	89ba      	ldrh	r2, [r7, #12]
 8005032:	2302      	movs	r3, #2
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	897b      	ldrh	r3, [r7, #10]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	460b      	mov	r3, r1
 800503c:	6979      	ldr	r1, [r7, #20]
 800503e:	f7ff fe7d 	bl	8004d3c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005042:	687b      	ldr	r3, [r7, #4]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <pbuf_realloc+0x20>
 800505e:	4b3a      	ldr	r3, [pc, #232]	@ (8005148 <pbuf_realloc+0xfc>)
 8005060:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8005064:	4939      	ldr	r1, [pc, #228]	@ (800514c <pbuf_realloc+0x100>)
 8005066:	483a      	ldr	r0, [pc, #232]	@ (8005150 <pbuf_realloc+0x104>)
 8005068:	f008 fee4 	bl	800de34 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	891b      	ldrh	r3, [r3, #8]
 8005070:	887a      	ldrh	r2, [r7, #2]
 8005072:	429a      	cmp	r2, r3
 8005074:	d263      	bcs.n	800513e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	891a      	ldrh	r2, [r3, #8]
 800507a:	887b      	ldrh	r3, [r7, #2]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005080:	887b      	ldrh	r3, [r7, #2]
 8005082:	817b      	strh	r3, [r7, #10]
  q = p;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005088:	e018      	b.n	80050bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	895b      	ldrh	r3, [r3, #10]
 800508e:	897a      	ldrh	r2, [r7, #10]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	891a      	ldrh	r2, [r3, #8]
 8005098:	893b      	ldrh	r3, [r7, #8]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <pbuf_realloc+0x70>
 80050ae:	4b26      	ldr	r3, [pc, #152]	@ (8005148 <pbuf_realloc+0xfc>)
 80050b0:	f240 12af 	movw	r2, #431	@ 0x1af
 80050b4:	4927      	ldr	r1, [pc, #156]	@ (8005154 <pbuf_realloc+0x108>)
 80050b6:	4826      	ldr	r0, [pc, #152]	@ (8005150 <pbuf_realloc+0x104>)
 80050b8:	f008 febc 	bl	800de34 <iprintf>
  while (rem_len > q->len) {
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	895b      	ldrh	r3, [r3, #10]
 80050c0:	897a      	ldrh	r2, [r7, #10]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d8e1      	bhi.n	800508a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	7b1b      	ldrb	r3, [r3, #12]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d121      	bne.n	8005116 <pbuf_realloc+0xca>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	895b      	ldrh	r3, [r3, #10]
 80050d6:	897a      	ldrh	r2, [r7, #10]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d01c      	beq.n	8005116 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	7b5b      	ldrb	r3, [r3, #13]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d116      	bne.n	8005116 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	897b      	ldrh	r3, [r7, #10]
 80050f4:	4413      	add	r3, r2
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	4619      	mov	r1, r3
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7fe ffba 	bl	8004074 <mem_trim>
 8005100:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <pbuf_realloc+0xca>
 8005108:	4b0f      	ldr	r3, [pc, #60]	@ (8005148 <pbuf_realloc+0xfc>)
 800510a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800510e:	4912      	ldr	r1, [pc, #72]	@ (8005158 <pbuf_realloc+0x10c>)
 8005110:	480f      	ldr	r0, [pc, #60]	@ (8005150 <pbuf_realloc+0x104>)
 8005112:	f008 fe8f 	bl	800de34 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	897a      	ldrh	r2, [r7, #10]
 800511a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	895a      	ldrh	r2, [r3, #10]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f000 f911 	bl	8005358 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e000      	b.n	8005140 <pbuf_realloc+0xf4>
    return;
 800513e:	bf00      	nop

}
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	0800f248 	.word	0x0800f248
 800514c:	0800f360 	.word	0x0800f360
 8005150:	0800f2a8 	.word	0x0800f2a8
 8005154:	0800f378 	.word	0x0800f378
 8005158:	0800f390 	.word	0x0800f390

0800515c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	4613      	mov	r3, r2
 8005168:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <pbuf_add_header_impl+0x22>
 8005170:	4b2b      	ldr	r3, [pc, #172]	@ (8005220 <pbuf_add_header_impl+0xc4>)
 8005172:	f240 12df 	movw	r2, #479	@ 0x1df
 8005176:	492b      	ldr	r1, [pc, #172]	@ (8005224 <pbuf_add_header_impl+0xc8>)
 8005178:	482b      	ldr	r0, [pc, #172]	@ (8005228 <pbuf_add_header_impl+0xcc>)
 800517a:	f008 fe5b 	bl	800de34 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <pbuf_add_header_impl+0x30>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800518a:	d301      	bcc.n	8005190 <pbuf_add_header_impl+0x34>
    return 1;
 800518c:	2301      	movs	r3, #1
 800518e:	e043      	b.n	8005218 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <pbuf_add_header_impl+0x3e>
    return 0;
 8005196:	2300      	movs	r3, #0
 8005198:	e03e      	b.n	8005218 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	891a      	ldrh	r2, [r3, #8]
 80051a2:	8a7b      	ldrh	r3, [r7, #18]
 80051a4:	4413      	add	r3, r2
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	8a7a      	ldrh	r2, [r7, #18]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d901      	bls.n	80051b2 <pbuf_add_header_impl+0x56>
    return 1;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e032      	b.n	8005218 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	7b1b      	ldrb	r3, [r3, #12]
 80051b6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80051b8:	8a3b      	ldrh	r3, [r7, #16]
 80051ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00c      	beq.n	80051dc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	425b      	negs	r3, r3
 80051ca:	4413      	add	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3310      	adds	r3, #16
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d20d      	bcs.n	80051f4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80051d8:	2301      	movs	r3, #1
 80051da:	e01d      	b.n	8005218 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d006      	beq.n	80051f0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	425b      	negs	r3, r3
 80051ea:	4413      	add	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e001      	b.n	80051f4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e011      	b.n	8005218 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	895a      	ldrh	r2, [r3, #10]
 80051fe:	8a7b      	ldrh	r3, [r7, #18]
 8005200:	4413      	add	r3, r2
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	891a      	ldrh	r2, [r3, #8]
 800520c:	8a7b      	ldrh	r3, [r7, #18]
 800520e:	4413      	add	r3, r2
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	811a      	strh	r2, [r3, #8]


  return 0;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	0800f248 	.word	0x0800f248
 8005224:	0800f3ac 	.word	0x0800f3ac
 8005228:	0800f2a8 	.word	0x0800f2a8

0800522c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005236:	2200      	movs	r2, #0
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff ff8e 	bl	800515c <pbuf_add_header_impl>
 8005240:	4603      	mov	r3, r0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <pbuf_remove_header+0x1e>
 800525c:	4b20      	ldr	r3, [pc, #128]	@ (80052e0 <pbuf_remove_header+0x94>)
 800525e:	f240 224b 	movw	r2, #587	@ 0x24b
 8005262:	4920      	ldr	r1, [pc, #128]	@ (80052e4 <pbuf_remove_header+0x98>)
 8005264:	4820      	ldr	r0, [pc, #128]	@ (80052e8 <pbuf_remove_header+0x9c>)
 8005266:	f008 fde5 	bl	800de34 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <pbuf_remove_header+0x2c>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005276:	d301      	bcc.n	800527c <pbuf_remove_header+0x30>
    return 1;
 8005278:	2301      	movs	r3, #1
 800527a:	e02c      	b.n	80052d6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <pbuf_remove_header+0x3a>
    return 0;
 8005282:	2300      	movs	r3, #0
 8005284:	e027      	b.n	80052d6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	895b      	ldrh	r3, [r3, #10]
 800528e:	89fa      	ldrh	r2, [r7, #14]
 8005290:	429a      	cmp	r2, r3
 8005292:	d908      	bls.n	80052a6 <pbuf_remove_header+0x5a>
 8005294:	4b12      	ldr	r3, [pc, #72]	@ (80052e0 <pbuf_remove_header+0x94>)
 8005296:	f240 2255 	movw	r2, #597	@ 0x255
 800529a:	4914      	ldr	r1, [pc, #80]	@ (80052ec <pbuf_remove_header+0xa0>)
 800529c:	4812      	ldr	r0, [pc, #72]	@ (80052e8 <pbuf_remove_header+0x9c>)
 800529e:	f008 fdc9 	bl	800de34 <iprintf>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e017      	b.n	80052d6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	441a      	add	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	895a      	ldrh	r2, [r3, #10]
 80052bc:	89fb      	ldrh	r3, [r7, #14]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	891a      	ldrh	r2, [r3, #8]
 80052ca:	89fb      	ldrh	r3, [r7, #14]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	0800f248 	.word	0x0800f248
 80052e4:	0800f3ac 	.word	0x0800f3ac
 80052e8:	0800f2a8 	.word	0x0800f2a8
 80052ec:	0800f3b8 	.word	0x0800f3b8

080052f0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	807b      	strh	r3, [r7, #2]
 80052fc:	4613      	mov	r3, r2
 80052fe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005304:	2b00      	cmp	r3, #0
 8005306:	da08      	bge.n	800531a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005308:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800530c:	425b      	negs	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff ff9b 	bl	800524c <pbuf_remove_header>
 8005316:	4603      	mov	r3, r0
 8005318:	e007      	b.n	800532a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800531a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800531e:	787a      	ldrb	r2, [r7, #1]
 8005320:	4619      	mov	r1, r3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff ff1a 	bl	800515c <pbuf_add_header_impl>
 8005328:	4603      	mov	r3, r0
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b082      	sub	sp, #8
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800533e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005342:	2201      	movs	r2, #1
 8005344:	4619      	mov	r1, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff ffd2 	bl	80052f0 <pbuf_header_impl>
 800534c:	4603      	mov	r3, r0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10b      	bne.n	800537e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <pbuf_free+0x22>
 800536c:	4b38      	ldr	r3, [pc, #224]	@ (8005450 <pbuf_free+0xf8>)
 800536e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8005372:	4938      	ldr	r1, [pc, #224]	@ (8005454 <pbuf_free+0xfc>)
 8005374:	4838      	ldr	r0, [pc, #224]	@ (8005458 <pbuf_free+0x100>)
 8005376:	f008 fd5d 	bl	800de34 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800537a:	2300      	movs	r3, #0
 800537c:	e063      	b.n	8005446 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005382:	e05c      	b.n	800543e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	7b9b      	ldrb	r3, [r3, #14]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <pbuf_free+0x42>
 800538c:	4b30      	ldr	r3, [pc, #192]	@ (8005450 <pbuf_free+0xf8>)
 800538e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8005392:	4932      	ldr	r1, [pc, #200]	@ (800545c <pbuf_free+0x104>)
 8005394:	4830      	ldr	r0, [pc, #192]	@ (8005458 <pbuf_free+0x100>)
 8005396:	f008 fd4d 	bl	800de34 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7b9b      	ldrb	r3, [r3, #14]
 800539e:	3b01      	subs	r3, #1
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	739a      	strb	r2, [r3, #14]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	7b9b      	ldrb	r3, [r3, #14]
 80053aa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80053ac:	7dbb      	ldrb	r3, [r7, #22]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d143      	bne.n	800543a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	7b1b      	ldrb	r3, [r3, #12]
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	7b5b      	ldrb	r3, [r3, #13]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d011      	beq.n	80053f2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <pbuf_free+0x90>
 80053da:	4b1d      	ldr	r3, [pc, #116]	@ (8005450 <pbuf_free+0xf8>)
 80053dc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80053e0:	491f      	ldr	r1, [pc, #124]	@ (8005460 <pbuf_free+0x108>)
 80053e2:	481d      	ldr	r0, [pc, #116]	@ (8005458 <pbuf_free+0x100>)
 80053e4:	f008 fd26 	bl	800de34 <iprintf>
        pc->custom_free_function(p);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
 80053f0:	e01d      	b.n	800542e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d104      	bne.n	8005402 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	2008      	movs	r0, #8
 80053fc:	f7ff f936 	bl	800466c <memp_free>
 8005400:	e015      	b.n	800542e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d104      	bne.n	8005412 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	2007      	movs	r0, #7
 800540c:	f7ff f92e 	bl	800466c <memp_free>
 8005410:	e00d      	b.n	800542e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d103      	bne.n	8005420 <pbuf_free+0xc8>
          mem_free(p);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7fe fdc1 	bl	8003fa0 <mem_free>
 800541e:	e006      	b.n	800542e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005420:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <pbuf_free+0xf8>)
 8005422:	f240 320f 	movw	r2, #783	@ 0x30f
 8005426:	490f      	ldr	r1, [pc, #60]	@ (8005464 <pbuf_free+0x10c>)
 8005428:	480b      	ldr	r0, [pc, #44]	@ (8005458 <pbuf_free+0x100>)
 800542a:	f008 fd03 	bl	800de34 <iprintf>
        }
      }
      count++;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	3301      	adds	r3, #1
 8005432:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	607b      	str	r3, [r7, #4]
 8005438:	e001      	b.n	800543e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800543a:	2300      	movs	r3, #0
 800543c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d19f      	bne.n	8005384 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005444:	7dfb      	ldrb	r3, [r7, #23]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	0800f248 	.word	0x0800f248
 8005454:	0800f3ac 	.word	0x0800f3ac
 8005458:	0800f2a8 	.word	0x0800f2a8
 800545c:	0800f3d8 	.word	0x0800f3d8
 8005460:	0800f3f0 	.word	0x0800f3f0
 8005464:	0800f414 	.word	0x0800f414

08005468 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005474:	e005      	b.n	8005482 <pbuf_clen+0x1a>
    ++len;
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	3301      	adds	r3, #1
 800547a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1f6      	bne.n	8005476 <pbuf_clen+0xe>
  }
  return len;
 8005488:	89fb      	ldrh	r3, [r7, #14]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d010      	beq.n	80054c8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7b9b      	ldrb	r3, [r3, #14]
 80054aa:	3301      	adds	r3, #1
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	7b9b      	ldrb	r3, [r3, #14]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <pbuf_ref+0x30>
 80054ba:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <pbuf_ref+0x38>)
 80054bc:	f240 3242 	movw	r2, #834	@ 0x342
 80054c0:	4904      	ldr	r1, [pc, #16]	@ (80054d4 <pbuf_ref+0x3c>)
 80054c2:	4805      	ldr	r0, [pc, #20]	@ (80054d8 <pbuf_ref+0x40>)
 80054c4:	f008 fcb6 	bl	800de34 <iprintf>
  }
}
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	0800f248 	.word	0x0800f248
 80054d4:	0800f428 	.word	0x0800f428
 80054d8:	0800f2a8 	.word	0x0800f2a8

080054dc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <pbuf_cat+0x16>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d107      	bne.n	8005502 <pbuf_cat+0x26>
 80054f2:	4b20      	ldr	r3, [pc, #128]	@ (8005574 <pbuf_cat+0x98>)
 80054f4:	f240 3259 	movw	r2, #857	@ 0x359
 80054f8:	491f      	ldr	r1, [pc, #124]	@ (8005578 <pbuf_cat+0x9c>)
 80054fa:	4820      	ldr	r0, [pc, #128]	@ (800557c <pbuf_cat+0xa0>)
 80054fc:	f008 fc9a 	bl	800de34 <iprintf>
 8005500:	e034      	b.n	800556c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e00a      	b.n	800551e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	891a      	ldrh	r2, [r3, #8]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	891b      	ldrh	r3, [r3, #8]
 8005510:	4413      	add	r3, r2
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f0      	bne.n	8005508 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	891a      	ldrh	r2, [r3, #8]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	895b      	ldrh	r3, [r3, #10]
 800552e:	429a      	cmp	r2, r3
 8005530:	d006      	beq.n	8005540 <pbuf_cat+0x64>
 8005532:	4b10      	ldr	r3, [pc, #64]	@ (8005574 <pbuf_cat+0x98>)
 8005534:	f240 3262 	movw	r2, #866	@ 0x362
 8005538:	4911      	ldr	r1, [pc, #68]	@ (8005580 <pbuf_cat+0xa4>)
 800553a:	4810      	ldr	r0, [pc, #64]	@ (800557c <pbuf_cat+0xa0>)
 800553c:	f008 fc7a 	bl	800de34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <pbuf_cat+0x7a>
 8005548:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <pbuf_cat+0x98>)
 800554a:	f240 3263 	movw	r2, #867	@ 0x363
 800554e:	490d      	ldr	r1, [pc, #52]	@ (8005584 <pbuf_cat+0xa8>)
 8005550:	480a      	ldr	r0, [pc, #40]	@ (800557c <pbuf_cat+0xa0>)
 8005552:	f008 fc6f 	bl	800de34 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	891a      	ldrh	r2, [r3, #8]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	891b      	ldrh	r3, [r3, #8]
 800555e:	4413      	add	r3, r2
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	0800f248 	.word	0x0800f248
 8005578:	0800f43c 	.word	0x0800f43c
 800557c:	0800f2a8 	.word	0x0800f2a8
 8005580:	0800f474 	.word	0x0800f474
 8005584:	0800f4a4 	.word	0x0800f4a4

08005588 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff ffa1 	bl	80054dc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800559a:	6838      	ldr	r0, [r7, #0]
 800559c:	f7ff ff7c 	bl	8005498 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <pbuf_copy+0x2a>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <pbuf_copy+0x2a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	891a      	ldrh	r2, [r3, #8]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	891b      	ldrh	r3, [r3, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d209      	bcs.n	80055e6 <pbuf_copy+0x3e>
 80055d2:	4b57      	ldr	r3, [pc, #348]	@ (8005730 <pbuf_copy+0x188>)
 80055d4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80055d8:	4956      	ldr	r1, [pc, #344]	@ (8005734 <pbuf_copy+0x18c>)
 80055da:	4857      	ldr	r0, [pc, #348]	@ (8005738 <pbuf_copy+0x190>)
 80055dc:	f008 fc2a 	bl	800de34 <iprintf>
 80055e0:	f06f 030f 	mvn.w	r3, #15
 80055e4:	e09f      	b.n	8005726 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	895b      	ldrh	r3, [r3, #10]
 80055ea:	461a      	mov	r2, r3
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	895b      	ldrh	r3, [r3, #10]
 80055f4:	4619      	mov	r1, r3
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1acb      	subs	r3, r1, r3
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d306      	bcc.n	800560c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	895b      	ldrh	r3, [r3, #10]
 8005602:	461a      	mov	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	e005      	b.n	8005618 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	895b      	ldrh	r3, [r3, #10]
 8005610:	461a      	mov	r2, r3
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	18d0      	adds	r0, r2, r3
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4413      	add	r3, r2
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4619      	mov	r1, r3
 800562c:	f008 fcdd 	bl	800dfea <memcpy>
    offset_to += len;
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	895b      	ldrh	r3, [r3, #10]
 8005644:	461a      	mov	r2, r3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	4293      	cmp	r3, r2
 800564a:	d906      	bls.n	800565a <pbuf_copy+0xb2>
 800564c:	4b38      	ldr	r3, [pc, #224]	@ (8005730 <pbuf_copy+0x188>)
 800564e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8005652:	493a      	ldr	r1, [pc, #232]	@ (800573c <pbuf_copy+0x194>)
 8005654:	4838      	ldr	r0, [pc, #224]	@ (8005738 <pbuf_copy+0x190>)
 8005656:	f008 fbed 	bl	800de34 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	895b      	ldrh	r3, [r3, #10]
 800565e:	461a      	mov	r2, r3
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4293      	cmp	r3, r2
 8005664:	d906      	bls.n	8005674 <pbuf_copy+0xcc>
 8005666:	4b32      	ldr	r3, [pc, #200]	@ (8005730 <pbuf_copy+0x188>)
 8005668:	f240 32da 	movw	r2, #986	@ 0x3da
 800566c:	4934      	ldr	r1, [pc, #208]	@ (8005740 <pbuf_copy+0x198>)
 800566e:	4832      	ldr	r0, [pc, #200]	@ (8005738 <pbuf_copy+0x190>)
 8005670:	f008 fbe0 	bl	800de34 <iprintf>
    if (offset_from >= p_from->len) {
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	895b      	ldrh	r3, [r3, #10]
 8005678:	461a      	mov	r2, r3
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4293      	cmp	r3, r2
 800567e:	d304      	bcc.n	800568a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	895b      	ldrh	r3, [r3, #10]
 800568e:	461a      	mov	r2, r3
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	4293      	cmp	r3, r2
 8005694:	d114      	bne.n	80056c0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10c      	bne.n	80056c0 <pbuf_copy+0x118>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <pbuf_copy+0x118>
 80056ac:	4b20      	ldr	r3, [pc, #128]	@ (8005730 <pbuf_copy+0x188>)
 80056ae:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80056b2:	4924      	ldr	r1, [pc, #144]	@ (8005744 <pbuf_copy+0x19c>)
 80056b4:	4820      	ldr	r0, [pc, #128]	@ (8005738 <pbuf_copy+0x190>)
 80056b6:	f008 fbbd 	bl	800de34 <iprintf>
 80056ba:	f06f 030f 	mvn.w	r3, #15
 80056be:	e032      	b.n	8005726 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d013      	beq.n	80056ee <pbuf_copy+0x146>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	895a      	ldrh	r2, [r3, #10]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	891b      	ldrh	r3, [r3, #8]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d10d      	bne.n	80056ee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <pbuf_copy+0x146>
 80056da:	4b15      	ldr	r3, [pc, #84]	@ (8005730 <pbuf_copy+0x188>)
 80056dc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80056e0:	4919      	ldr	r1, [pc, #100]	@ (8005748 <pbuf_copy+0x1a0>)
 80056e2:	4815      	ldr	r0, [pc, #84]	@ (8005738 <pbuf_copy+0x190>)
 80056e4:	f008 fba6 	bl	800de34 <iprintf>
 80056e8:	f06f 0305 	mvn.w	r3, #5
 80056ec:	e01b      	b.n	8005726 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <pbuf_copy+0x174>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	895a      	ldrh	r2, [r3, #10]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	891b      	ldrh	r3, [r3, #8]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d10d      	bne.n	800571c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d009      	beq.n	800571c <pbuf_copy+0x174>
 8005708:	4b09      	ldr	r3, [pc, #36]	@ (8005730 <pbuf_copy+0x188>)
 800570a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800570e:	490e      	ldr	r1, [pc, #56]	@ (8005748 <pbuf_copy+0x1a0>)
 8005710:	4809      	ldr	r0, [pc, #36]	@ (8005738 <pbuf_copy+0x190>)
 8005712:	f008 fb8f 	bl	800de34 <iprintf>
 8005716:	f06f 0305 	mvn.w	r3, #5
 800571a:	e004      	b.n	8005726 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f47f af61 	bne.w	80055e6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	0800f248 	.word	0x0800f248
 8005734:	0800f4f0 	.word	0x0800f4f0
 8005738:	0800f2a8 	.word	0x0800f2a8
 800573c:	0800f520 	.word	0x0800f520
 8005740:	0800f538 	.word	0x0800f538
 8005744:	0800f554 	.word	0x0800f554
 8005748:	0800f564 	.word	0x0800f564

0800574c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	460b      	mov	r3, r1
 800575c:	80fb      	strh	r3, [r7, #6]
 800575e:	4613      	mov	r3, r2
 8005760:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d108      	bne.n	8005782 <pbuf_copy_partial+0x36>
 8005770:	4b2b      	ldr	r3, [pc, #172]	@ (8005820 <pbuf_copy_partial+0xd4>)
 8005772:	f240 420a 	movw	r2, #1034	@ 0x40a
 8005776:	492b      	ldr	r1, [pc, #172]	@ (8005824 <pbuf_copy_partial+0xd8>)
 8005778:	482b      	ldr	r0, [pc, #172]	@ (8005828 <pbuf_copy_partial+0xdc>)
 800577a:	f008 fb5b 	bl	800de34 <iprintf>
 800577e:	2300      	movs	r3, #0
 8005780:	e04a      	b.n	8005818 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d108      	bne.n	800579a <pbuf_copy_partial+0x4e>
 8005788:	4b25      	ldr	r3, [pc, #148]	@ (8005820 <pbuf_copy_partial+0xd4>)
 800578a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800578e:	4927      	ldr	r1, [pc, #156]	@ (800582c <pbuf_copy_partial+0xe0>)
 8005790:	4825      	ldr	r0, [pc, #148]	@ (8005828 <pbuf_copy_partial+0xdc>)
 8005792:	f008 fb4f 	bl	800de34 <iprintf>
 8005796:	2300      	movs	r3, #0
 8005798:	e03e      	b.n	8005818 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	61fb      	str	r3, [r7, #28]
 800579e:	e034      	b.n	800580a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80057a0:	88bb      	ldrh	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <pbuf_copy_partial+0x70>
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	895b      	ldrh	r3, [r3, #10]
 80057aa:	88ba      	ldrh	r2, [r7, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d305      	bcc.n	80057bc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	895b      	ldrh	r3, [r3, #10]
 80057b4:	88ba      	ldrh	r2, [r7, #4]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	80bb      	strh	r3, [r7, #4]
 80057ba:	e023      	b.n	8005804 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	895a      	ldrh	r2, [r3, #10]
 80057c0:	88bb      	ldrh	r3, [r7, #4]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80057c6:	8b3a      	ldrh	r2, [r7, #24]
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d901      	bls.n	80057d2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80057d2:	8b7b      	ldrh	r3, [r7, #26]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	18d0      	adds	r0, r2, r3
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	88bb      	ldrh	r3, [r7, #4]
 80057de:	4413      	add	r3, r2
 80057e0:	8b3a      	ldrh	r2, [r7, #24]
 80057e2:	4619      	mov	r1, r3
 80057e4:	f008 fc01 	bl	800dfea <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80057e8:	8afa      	ldrh	r2, [r7, #22]
 80057ea:	8b3b      	ldrh	r3, [r7, #24]
 80057ec:	4413      	add	r3, r2
 80057ee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80057f0:	8b7a      	ldrh	r2, [r7, #26]
 80057f2:	8b3b      	ldrh	r3, [r7, #24]
 80057f4:	4413      	add	r3, r2
 80057f6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	8b3b      	ldrh	r3, [r7, #24]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	61fb      	str	r3, [r7, #28]
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <pbuf_copy_partial+0xca>
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1c4      	bne.n	80057a0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005816:	8afb      	ldrh	r3, [r7, #22]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	0800f248 	.word	0x0800f248
 8005824:	0800f590 	.word	0x0800f590
 8005828:	0800f2a8 	.word	0x0800f2a8
 800582c:	0800f5b0 	.word	0x0800f5b0

08005830 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	4603      	mov	r3, r0
 8005838:	603a      	str	r2, [r7, #0]
 800583a:	71fb      	strb	r3, [r7, #7]
 800583c:	460b      	mov	r3, r1
 800583e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	8919      	ldrh	r1, [r3, #8]
 8005844:	88ba      	ldrh	r2, [r7, #4]
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff faa1 	bl	8004d90 <pbuf_alloc>
 800584e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <pbuf_clone+0x2a>
    return NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	e011      	b.n	800587e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7ff fea3 	bl	80055a8 <pbuf_copy>
 8005862:	4603      	mov	r3, r0
 8005864:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005866:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d006      	beq.n	800587c <pbuf_clone+0x4c>
 800586e:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <pbuf_clone+0x58>)
 8005870:	f240 5224 	movw	r2, #1316	@ 0x524
 8005874:	4905      	ldr	r1, [pc, #20]	@ (800588c <pbuf_clone+0x5c>)
 8005876:	4806      	ldr	r0, [pc, #24]	@ (8005890 <pbuf_clone+0x60>)
 8005878:	f008 fadc 	bl	800de34 <iprintf>
  return q;
 800587c:	68fb      	ldr	r3, [r7, #12]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	0800f248 	.word	0x0800f248
 800588c:	0800f6bc 	.word	0x0800f6bc
 8005890:	0800f2a8 	.word	0x0800f2a8

08005894 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005898:	f008 f9cc 	bl	800dc34 <rand>
 800589c:	4603      	mov	r3, r0
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	4b01      	ldr	r3, [pc, #4]	@ (80058b4 <tcp_init+0x20>)
 80058ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80058b0:	bf00      	nop
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000020 	.word	0x20000020

080058b8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	7d1b      	ldrb	r3, [r3, #20]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d105      	bne.n	80058d4 <tcp_free+0x1c>
 80058c8:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <tcp_free+0x2c>)
 80058ca:	22d4      	movs	r2, #212	@ 0xd4
 80058cc:	4906      	ldr	r1, [pc, #24]	@ (80058e8 <tcp_free+0x30>)
 80058ce:	4807      	ldr	r0, [pc, #28]	@ (80058ec <tcp_free+0x34>)
 80058d0:	f008 fab0 	bl	800de34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	2001      	movs	r0, #1
 80058d8:	f7fe fec8 	bl	800466c <memp_free>
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	0800f748 	.word	0x0800f748
 80058e8:	0800f778 	.word	0x0800f778
 80058ec:	0800f78c 	.word	0x0800f78c

080058f0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	7d1b      	ldrb	r3, [r3, #20]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d105      	bne.n	800590c <tcp_free_listen+0x1c>
 8005900:	4b06      	ldr	r3, [pc, #24]	@ (800591c <tcp_free_listen+0x2c>)
 8005902:	22df      	movs	r2, #223	@ 0xdf
 8005904:	4906      	ldr	r1, [pc, #24]	@ (8005920 <tcp_free_listen+0x30>)
 8005906:	4807      	ldr	r0, [pc, #28]	@ (8005924 <tcp_free_listen+0x34>)
 8005908:	f008 fa94 	bl	800de34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	2002      	movs	r0, #2
 8005910:	f7fe feac 	bl	800466c <memp_free>
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	0800f748 	.word	0x0800f748
 8005920:	0800f7b4 	.word	0x0800f7b4
 8005924:	0800f78c 	.word	0x0800f78c

08005928 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800592c:	f000 fea4 	bl	8006678 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005930:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <tcp_tmr+0x28>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	b2da      	uxtb	r2, r3
 8005938:	4b05      	ldr	r3, [pc, #20]	@ (8005950 <tcp_tmr+0x28>)
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	4b04      	ldr	r3, [pc, #16]	@ (8005950 <tcp_tmr+0x28>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005948:	f000 fb54 	bl	8005ff4 <tcp_slowtmr>
  }
}
 800594c:	bf00      	nop
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20008265 	.word	0x20008265

08005954 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d105      	bne.n	8005970 <tcp_remove_listener+0x1c>
 8005964:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <tcp_remove_listener+0x48>)
 8005966:	22ff      	movs	r2, #255	@ 0xff
 8005968:	490d      	ldr	r1, [pc, #52]	@ (80059a0 <tcp_remove_listener+0x4c>)
 800596a:	480e      	ldr	r0, [pc, #56]	@ (80059a4 <tcp_remove_listener+0x50>)
 800596c:	f008 fa62 	bl	800de34 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	e00a      	b.n	800598c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d102      	bne.n	8005986 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f1      	bne.n	8005976 <tcp_remove_listener+0x22>
    }
  }
}
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	0800f748 	.word	0x0800f748
 80059a0:	0800f7d0 	.word	0x0800f7d0
 80059a4:	0800f78c 	.word	0x0800f78c

080059a8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <tcp_listen_closed+0x1c>
 80059b6:	4b14      	ldr	r3, [pc, #80]	@ (8005a08 <tcp_listen_closed+0x60>)
 80059b8:	f240 1211 	movw	r2, #273	@ 0x111
 80059bc:	4913      	ldr	r1, [pc, #76]	@ (8005a0c <tcp_listen_closed+0x64>)
 80059be:	4814      	ldr	r0, [pc, #80]	@ (8005a10 <tcp_listen_closed+0x68>)
 80059c0:	f008 fa38 	bl	800de34 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	7d1b      	ldrb	r3, [r3, #20]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d006      	beq.n	80059da <tcp_listen_closed+0x32>
 80059cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a08 <tcp_listen_closed+0x60>)
 80059ce:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80059d2:	4910      	ldr	r1, [pc, #64]	@ (8005a14 <tcp_listen_closed+0x6c>)
 80059d4:	480e      	ldr	r0, [pc, #56]	@ (8005a10 <tcp_listen_closed+0x68>)
 80059d6:	f008 fa2d 	bl	800de34 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80059da:	2301      	movs	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e00b      	b.n	80059f8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80059e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005a18 <tcp_listen_closed+0x70>)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff ffb1 	bl	8005954 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d9f0      	bls.n	80059e0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80059fe:	bf00      	nop
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	0800f748 	.word	0x0800f748
 8005a0c:	0800f7f8 	.word	0x0800f7f8
 8005a10:	0800f78c 	.word	0x0800f78c
 8005a14:	0800f804 	.word	0x0800f804
 8005a18:	08011720 	.word	0x08011720

08005a1c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005a1c:	b5b0      	push	{r4, r5, r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af04      	add	r7, sp, #16
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <tcp_close_shutdown+0x20>
 8005a2e:	4b63      	ldr	r3, [pc, #396]	@ (8005bbc <tcp_close_shutdown+0x1a0>)
 8005a30:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8005a34:	4962      	ldr	r1, [pc, #392]	@ (8005bc0 <tcp_close_shutdown+0x1a4>)
 8005a36:	4863      	ldr	r0, [pc, #396]	@ (8005bc4 <tcp_close_shutdown+0x1a8>)
 8005a38:	f008 f9fc 	bl	800de34 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d066      	beq.n	8005b10 <tcp_close_shutdown+0xf4>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	7d1b      	ldrb	r3, [r3, #20]
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d003      	beq.n	8005a52 <tcp_close_shutdown+0x36>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	7d1b      	ldrb	r3, [r3, #20]
 8005a4e:	2b07      	cmp	r3, #7
 8005a50:	d15e      	bne.n	8005b10 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d104      	bne.n	8005a64 <tcp_close_shutdown+0x48>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005a62:	d055      	beq.n	8005b10 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8b5b      	ldrh	r3, [r3, #26]
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <tcp_close_shutdown+0x62>
 8005a70:	4b52      	ldr	r3, [pc, #328]	@ (8005bbc <tcp_close_shutdown+0x1a0>)
 8005a72:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8005a76:	4954      	ldr	r1, [pc, #336]	@ (8005bc8 <tcp_close_shutdown+0x1ac>)
 8005a78:	4852      	ldr	r0, [pc, #328]	@ (8005bc4 <tcp_close_shutdown+0x1a8>)
 8005a7a:	f008 f9db 	bl	800de34 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005a86:	687d      	ldr	r5, [r7, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	8ad2      	ldrh	r2, [r2, #22]
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	8b09      	ldrh	r1, [r1, #24]
 8005a94:	9102      	str	r1, [sp, #8]
 8005a96:	9201      	str	r2, [sp, #4]
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	462b      	mov	r3, r5
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	4601      	mov	r1, r0
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f004 fe8d 	bl	800a7c0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 f8c8 	bl	8006c3c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005aac:	4b47      	ldr	r3, [pc, #284]	@ (8005bcc <tcp_close_shutdown+0x1b0>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d105      	bne.n	8005ac2 <tcp_close_shutdown+0xa6>
 8005ab6:	4b45      	ldr	r3, [pc, #276]	@ (8005bcc <tcp_close_shutdown+0x1b0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4a43      	ldr	r2, [pc, #268]	@ (8005bcc <tcp_close_shutdown+0x1b0>)
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	e013      	b.n	8005aea <tcp_close_shutdown+0xce>
 8005ac2:	4b42      	ldr	r3, [pc, #264]	@ (8005bcc <tcp_close_shutdown+0x1b0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e00c      	b.n	8005ae4 <tcp_close_shutdown+0xc8>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d104      	bne.n	8005ade <tcp_close_shutdown+0xc2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	60da      	str	r2, [r3, #12]
 8005adc:	e005      	b.n	8005aea <tcp_close_shutdown+0xce>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1ef      	bne.n	8005aca <tcp_close_shutdown+0xae>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	60da      	str	r2, [r3, #12]
 8005af0:	4b37      	ldr	r3, [pc, #220]	@ (8005bd0 <tcp_close_shutdown+0x1b4>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005af6:	4b37      	ldr	r3, [pc, #220]	@ (8005bd4 <tcp_close_shutdown+0x1b8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d102      	bne.n	8005b06 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005b00:	f003 fd5c 	bl	80095bc <tcp_trigger_input_pcb_close>
 8005b04:	e002      	b.n	8005b0c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fed6 	bl	80058b8 <tcp_free>
      }
      return ERR_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e050      	b.n	8005bb2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	7d1b      	ldrb	r3, [r3, #20]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d03b      	beq.n	8005b90 <tcp_close_shutdown+0x174>
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	dc44      	bgt.n	8005ba6 <tcp_close_shutdown+0x18a>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <tcp_close_shutdown+0x10a>
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d02a      	beq.n	8005b7a <tcp_close_shutdown+0x15e>
 8005b24:	e03f      	b.n	8005ba6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8adb      	ldrh	r3, [r3, #22]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d021      	beq.n	8005b72 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd8 <tcp_close_shutdown+0x1bc>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d105      	bne.n	8005b44 <tcp_close_shutdown+0x128>
 8005b38:	4b27      	ldr	r3, [pc, #156]	@ (8005bd8 <tcp_close_shutdown+0x1bc>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	4a26      	ldr	r2, [pc, #152]	@ (8005bd8 <tcp_close_shutdown+0x1bc>)
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	e013      	b.n	8005b6c <tcp_close_shutdown+0x150>
 8005b44:	4b24      	ldr	r3, [pc, #144]	@ (8005bd8 <tcp_close_shutdown+0x1bc>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	e00c      	b.n	8005b66 <tcp_close_shutdown+0x14a>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d104      	bne.n	8005b60 <tcp_close_shutdown+0x144>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	60da      	str	r2, [r3, #12]
 8005b5e:	e005      	b.n	8005b6c <tcp_close_shutdown+0x150>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ef      	bne.n	8005b4c <tcp_close_shutdown+0x130>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff fea0 	bl	80058b8 <tcp_free>
      break;
 8005b78:	e01a      	b.n	8005bb0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff ff14 	bl	80059a8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4816      	ldr	r0, [pc, #88]	@ (8005bdc <tcp_close_shutdown+0x1c0>)
 8005b84:	f001 f8aa 	bl	8006cdc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff feb1 	bl	80058f0 <tcp_free_listen>
      break;
 8005b8e:	e00f      	b.n	8005bb0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	480e      	ldr	r0, [pc, #56]	@ (8005bcc <tcp_close_shutdown+0x1b0>)
 8005b94:	f001 f8a2 	bl	8006cdc <tcp_pcb_remove>
 8005b98:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd0 <tcp_close_shutdown+0x1b4>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff fe8a 	bl	80058b8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005ba4:	e004      	b.n	8005bb0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f81a 	bl	8005be0 <tcp_close_shutdown_fin>
 8005bac:	4603      	mov	r3, r0
 8005bae:	e000      	b.n	8005bb2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	0800f748 	.word	0x0800f748
 8005bc0:	0800f81c 	.word	0x0800f81c
 8005bc4:	0800f78c 	.word	0x0800f78c
 8005bc8:	0800f83c 	.word	0x0800f83c
 8005bcc:	2000825c 	.word	0x2000825c
 8005bd0:	20008264 	.word	0x20008264
 8005bd4:	2000829c 	.word	0x2000829c
 8005bd8:	20008254 	.word	0x20008254
 8005bdc:	20008258 	.word	0x20008258

08005be0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <tcp_close_shutdown_fin+0x1c>
 8005bee:	4b2e      	ldr	r3, [pc, #184]	@ (8005ca8 <tcp_close_shutdown_fin+0xc8>)
 8005bf0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8005bf4:	492d      	ldr	r1, [pc, #180]	@ (8005cac <tcp_close_shutdown_fin+0xcc>)
 8005bf6:	482e      	ldr	r0, [pc, #184]	@ (8005cb0 <tcp_close_shutdown_fin+0xd0>)
 8005bf8:	f008 f91c 	bl	800de34 <iprintf>

  switch (pcb->state) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7d1b      	ldrb	r3, [r3, #20]
 8005c00:	2b07      	cmp	r3, #7
 8005c02:	d020      	beq.n	8005c46 <tcp_close_shutdown_fin+0x66>
 8005c04:	2b07      	cmp	r3, #7
 8005c06:	dc2b      	bgt.n	8005c60 <tcp_close_shutdown_fin+0x80>
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d002      	beq.n	8005c12 <tcp_close_shutdown_fin+0x32>
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d00d      	beq.n	8005c2c <tcp_close_shutdown_fin+0x4c>
 8005c10:	e026      	b.n	8005c60 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f003 fee2 	bl	80099dc <tcp_send_fin>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11f      	bne.n	8005c64 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2205      	movs	r2, #5
 8005c28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005c2a:	e01b      	b.n	8005c64 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f003 fed5 	bl	80099dc <tcp_send_fin>
 8005c32:	4603      	mov	r3, r0
 8005c34:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d114      	bne.n	8005c68 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2205      	movs	r2, #5
 8005c42:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005c44:	e010      	b.n	8005c68 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f003 fec8 	bl	80099dc <tcp_send_fin>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2209      	movs	r2, #9
 8005c5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005c5e:	e005      	b.n	8005c6c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e01c      	b.n	8005c9e <tcp_close_shutdown_fin+0xbe>
      break;
 8005c64:	bf00      	nop
 8005c66:	e002      	b.n	8005c6e <tcp_close_shutdown_fin+0x8e>
      break;
 8005c68:	bf00      	nop
 8005c6a:	e000      	b.n	8005c6e <tcp_close_shutdown_fin+0x8e>
      break;
 8005c6c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f003 ffee 	bl	8009c58 <tcp_output>
 8005c7c:	e00d      	b.n	8005c9a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d108      	bne.n	8005c9a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8b5b      	ldrh	r3, [r3, #26]
 8005c8c:	f043 0308 	orr.w	r3, r3, #8
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e001      	b.n	8005c9e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	0800f748 	.word	0x0800f748
 8005cac:	0800f7f8 	.word	0x0800f7f8
 8005cb0:	0800f78c 	.word	0x0800f78c

08005cb4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <tcp_close+0x22>
 8005cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005d00 <tcp_close+0x4c>)
 8005cc4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8005cc8:	490e      	ldr	r1, [pc, #56]	@ (8005d04 <tcp_close+0x50>)
 8005cca:	480f      	ldr	r0, [pc, #60]	@ (8005d08 <tcp_close+0x54>)
 8005ccc:	f008 f8b2 	bl	800de34 <iprintf>
 8005cd0:	f06f 030f 	mvn.w	r3, #15
 8005cd4:	e00f      	b.n	8005cf6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	7d1b      	ldrb	r3, [r3, #20]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d006      	beq.n	8005cec <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8b5b      	ldrh	r3, [r3, #26]
 8005ce2:	f043 0310 	orr.w	r3, r3, #16
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005cec:	2101      	movs	r1, #1
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff fe94 	bl	8005a1c <tcp_close_shutdown>
 8005cf4:	4603      	mov	r3, r0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	0800f748 	.word	0x0800f748
 8005d04:	0800f858 	.word	0x0800f858
 8005d08:	0800f78c 	.word	0x0800f78c

08005d0c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08e      	sub	sp, #56	@ 0x38
 8005d10:	af04      	add	r7, sp, #16
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d107      	bne.n	8005d2c <tcp_abandon+0x20>
 8005d1c:	4b52      	ldr	r3, [pc, #328]	@ (8005e68 <tcp_abandon+0x15c>)
 8005d1e:	f240 223d 	movw	r2, #573	@ 0x23d
 8005d22:	4952      	ldr	r1, [pc, #328]	@ (8005e6c <tcp_abandon+0x160>)
 8005d24:	4852      	ldr	r0, [pc, #328]	@ (8005e70 <tcp_abandon+0x164>)
 8005d26:	f008 f885 	bl	800de34 <iprintf>
 8005d2a:	e099      	b.n	8005e60 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	7d1b      	ldrb	r3, [r3, #20]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d106      	bne.n	8005d42 <tcp_abandon+0x36>
 8005d34:	4b4c      	ldr	r3, [pc, #304]	@ (8005e68 <tcp_abandon+0x15c>)
 8005d36:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8005d3a:	494e      	ldr	r1, [pc, #312]	@ (8005e74 <tcp_abandon+0x168>)
 8005d3c:	484c      	ldr	r0, [pc, #304]	@ (8005e70 <tcp_abandon+0x164>)
 8005d3e:	f008 f879 	bl	800de34 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	7d1b      	ldrb	r3, [r3, #20]
 8005d46:	2b0a      	cmp	r3, #10
 8005d48:	d107      	bne.n	8005d5a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	484a      	ldr	r0, [pc, #296]	@ (8005e78 <tcp_abandon+0x16c>)
 8005d4e:	f000 ffc5 	bl	8006cdc <tcp_pcb_remove>
    tcp_free(pcb);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff fdb0 	bl	80058b8 <tcp_free>
 8005d58:	e082      	b.n	8005e60 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d66:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d74:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	7d1b      	ldrb	r3, [r3, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d126      	bne.n	8005dd2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8adb      	ldrh	r3, [r3, #22]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d02e      	beq.n	8005dea <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e7c <tcp_abandon+0x170>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d105      	bne.n	8005da2 <tcp_abandon+0x96>
 8005d96:	4b39      	ldr	r3, [pc, #228]	@ (8005e7c <tcp_abandon+0x170>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	4a37      	ldr	r2, [pc, #220]	@ (8005e7c <tcp_abandon+0x170>)
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e013      	b.n	8005dca <tcp_abandon+0xbe>
 8005da2:	4b36      	ldr	r3, [pc, #216]	@ (8005e7c <tcp_abandon+0x170>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e00c      	b.n	8005dc4 <tcp_abandon+0xb8>
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d104      	bne.n	8005dbe <tcp_abandon+0xb2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	60da      	str	r2, [r3, #12]
 8005dbc:	e005      	b.n	8005dca <tcp_abandon+0xbe>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1ef      	bne.n	8005daa <tcp_abandon+0x9e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	60da      	str	r2, [r3, #12]
 8005dd0:	e00b      	b.n	8005dea <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8adb      	ldrh	r3, [r3, #22]
 8005dda:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	4828      	ldr	r0, [pc, #160]	@ (8005e80 <tcp_abandon+0x174>)
 8005de0:	f000 ff7c 	bl	8006cdc <tcp_pcb_remove>
 8005de4:	4b27      	ldr	r3, [pc, #156]	@ (8005e84 <tcp_abandon+0x178>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fd1e 	bl	8006838 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fd15 	bl	8006838 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fd0c 	bl	8006838 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00e      	beq.n	8005e44 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	8b12      	ldrh	r2, [r2, #24]
 8005e30:	9202      	str	r2, [sp, #8]
 8005e32:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005e34:	9201      	str	r2, [sp, #4]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	69b9      	ldr	r1, [r7, #24]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f004 fcbe 	bl	800a7c0 <tcp_rst>
    }
    last_state = pcb->state;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7d1b      	ldrb	r3, [r3, #20]
 8005e48:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fd34 	bl	80058b8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <tcp_abandon+0x154>
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f06f 010c 	mvn.w	r1, #12
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	4798      	blx	r3
  }
}
 8005e60:	3728      	adds	r7, #40	@ 0x28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	0800f748 	.word	0x0800f748
 8005e6c:	0800f88c 	.word	0x0800f88c
 8005e70:	0800f78c 	.word	0x0800f78c
 8005e74:	0800f8a8 	.word	0x0800f8a8
 8005e78:	20008260 	.word	0x20008260
 8005e7c:	20008254 	.word	0x20008254
 8005e80:	2000825c 	.word	0x2000825c
 8005e84:	20008264 	.word	0x20008264

08005e88 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005e90:	2101      	movs	r1, #1
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff ff3a 	bl	8005d0c <tcp_abandon>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <tcp_update_rcv_ann_wnd+0x1c>
 8005eae:	4b25      	ldr	r3, [pc, #148]	@ (8005f44 <tcp_update_rcv_ann_wnd+0xa4>)
 8005eb0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8005eb4:	4924      	ldr	r1, [pc, #144]	@ (8005f48 <tcp_update_rcv_ann_wnd+0xa8>)
 8005eb6:	4825      	ldr	r0, [pc, #148]	@ (8005f4c <tcp_update_rcv_ann_wnd+0xac>)
 8005eb8:	f007 ffbc 	bl	800de34 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8005ed0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8005ed4:	bf28      	it	cs
 8005ed6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8005eda:	b292      	uxth	r2, r2
 8005edc:	4413      	add	r3, r2
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	db08      	blt.n	8005ef8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	e020      	b.n	8005f3a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	dd03      	ble.n	8005f0e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f0c:	e014      	b.n	8005f38 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f20:	d306      	bcc.n	8005f30 <tcp_update_rcv_ann_wnd+0x90>
 8005f22:	4b08      	ldr	r3, [pc, #32]	@ (8005f44 <tcp_update_rcv_ann_wnd+0xa4>)
 8005f24:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8005f28:	4909      	ldr	r1, [pc, #36]	@ (8005f50 <tcp_update_rcv_ann_wnd+0xb0>)
 8005f2a:	4808      	ldr	r0, [pc, #32]	@ (8005f4c <tcp_update_rcv_ann_wnd+0xac>)
 8005f2c:	f007 ff82 	bl	800de34 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8005f38:	2300      	movs	r3, #0
  }
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	0800f748 	.word	0x0800f748
 8005f48:	0800f9a4 	.word	0x0800f9a4
 8005f4c:	0800f78c 	.word	0x0800f78c
 8005f50:	0800f9c8 	.word	0x0800f9c8

08005f54 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <tcp_recved+0x22>
 8005f66:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe4 <tcp_recved+0x90>)
 8005f68:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8005f6c:	491e      	ldr	r1, [pc, #120]	@ (8005fe8 <tcp_recved+0x94>)
 8005f6e:	481f      	ldr	r0, [pc, #124]	@ (8005fec <tcp_recved+0x98>)
 8005f70:	f007 ff60 	bl	800de34 <iprintf>
 8005f74:	e032      	b.n	8005fdc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	7d1b      	ldrb	r3, [r3, #20]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d106      	bne.n	8005f8c <tcp_recved+0x38>
 8005f7e:	4b19      	ldr	r3, [pc, #100]	@ (8005fe4 <tcp_recved+0x90>)
 8005f80:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8005f84:	491a      	ldr	r1, [pc, #104]	@ (8005ff0 <tcp_recved+0x9c>)
 8005f86:	4819      	ldr	r0, [pc, #100]	@ (8005fec <tcp_recved+0x98>)
 8005f88:	f007 ff54 	bl	800de34 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005f90:	887b      	ldrh	r3, [r7, #2]
 8005f92:	4413      	add	r3, r2
 8005f94:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005f96:	89fb      	ldrh	r3, [r7, #14]
 8005f98:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005f9c:	d804      	bhi.n	8005fa8 <tcp_recved+0x54>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa2:	89fa      	ldrh	r2, [r7, #14]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d204      	bcs.n	8005fb2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8005fae:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005fb0:	e002      	b.n	8005fb8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	89fa      	ldrh	r2, [r7, #14]
 8005fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff ff71 	bl	8005ea0 <tcp_update_rcv_ann_wnd>
 8005fbe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8005fc6:	d309      	bcc.n	8005fdc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8b5b      	ldrh	r3, [r3, #26]
 8005fcc:	f043 0302 	orr.w	r3, r3, #2
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f003 fe3e 	bl	8009c58 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	0800f748 	.word	0x0800f748
 8005fe8:	0800f9e4 	.word	0x0800f9e4
 8005fec:	0800f78c 	.word	0x0800f78c
 8005ff0:	0800f9fc 	.word	0x0800f9fc

08005ff4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005ff4:	b5b0      	push	{r4, r5, r7, lr}
 8005ff6:	b090      	sub	sp, #64	@ 0x40
 8005ff8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8006000:	4b95      	ldr	r3, [pc, #596]	@ (8006258 <tcp_slowtmr+0x264>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a94      	ldr	r2, [pc, #592]	@ (8006258 <tcp_slowtmr+0x264>)
 8006008:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800600a:	4b94      	ldr	r3, [pc, #592]	@ (800625c <tcp_slowtmr+0x268>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	3301      	adds	r3, #1
 8006010:	b2da      	uxtb	r2, r3
 8006012:	4b92      	ldr	r3, [pc, #584]	@ (800625c <tcp_slowtmr+0x268>)
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e000      	b.n	800601a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8006018:	bf00      	nop
  prev = NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800601e:	4b90      	ldr	r3, [pc, #576]	@ (8006260 <tcp_slowtmr+0x26c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006024:	e29f      	b.n	8006566 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006028:	7d1b      	ldrb	r3, [r3, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <tcp_slowtmr+0x48>
 800602e:	4b8d      	ldr	r3, [pc, #564]	@ (8006264 <tcp_slowtmr+0x270>)
 8006030:	f240 42be 	movw	r2, #1214	@ 0x4be
 8006034:	498c      	ldr	r1, [pc, #560]	@ (8006268 <tcp_slowtmr+0x274>)
 8006036:	488d      	ldr	r0, [pc, #564]	@ (800626c <tcp_slowtmr+0x278>)
 8006038:	f007 fefc 	bl	800de34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800603c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603e:	7d1b      	ldrb	r3, [r3, #20]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d106      	bne.n	8006052 <tcp_slowtmr+0x5e>
 8006044:	4b87      	ldr	r3, [pc, #540]	@ (8006264 <tcp_slowtmr+0x270>)
 8006046:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800604a:	4989      	ldr	r1, [pc, #548]	@ (8006270 <tcp_slowtmr+0x27c>)
 800604c:	4887      	ldr	r0, [pc, #540]	@ (800626c <tcp_slowtmr+0x278>)
 800604e:	f007 fef1 	bl	800de34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006054:	7d1b      	ldrb	r3, [r3, #20]
 8006056:	2b0a      	cmp	r3, #10
 8006058:	d106      	bne.n	8006068 <tcp_slowtmr+0x74>
 800605a:	4b82      	ldr	r3, [pc, #520]	@ (8006264 <tcp_slowtmr+0x270>)
 800605c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8006060:	4984      	ldr	r1, [pc, #528]	@ (8006274 <tcp_slowtmr+0x280>)
 8006062:	4882      	ldr	r0, [pc, #520]	@ (800626c <tcp_slowtmr+0x278>)
 8006064:	f007 fee6 	bl	800de34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606a:	7f9a      	ldrb	r2, [r3, #30]
 800606c:	4b7b      	ldr	r3, [pc, #492]	@ (800625c <tcp_slowtmr+0x268>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d105      	bne.n	8006080 <tcp_slowtmr+0x8c>
      prev = pcb;
 8006074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006076:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800607e:	e272      	b.n	8006566 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8006080:	4b76      	ldr	r3, [pc, #472]	@ (800625c <tcp_slowtmr+0x268>)
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006086:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006096:	7d1b      	ldrb	r3, [r3, #20]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d10a      	bne.n	80060b2 <tcp_slowtmr+0xbe>
 800609c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d905      	bls.n	80060b2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80060a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060aa:	3301      	adds	r3, #1
 80060ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80060b0:	e11e      	b.n	80062f0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80060b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060b8:	2b0b      	cmp	r3, #11
 80060ba:	d905      	bls.n	80060c8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80060bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060c0:	3301      	adds	r3, #1
 80060c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80060c6:	e113      	b.n	80062f0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80060c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d075      	beq.n	80061be <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80060d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d006      	beq.n	80060e8 <tcp_slowtmr+0xf4>
 80060da:	4b62      	ldr	r3, [pc, #392]	@ (8006264 <tcp_slowtmr+0x270>)
 80060dc:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80060e0:	4965      	ldr	r1, [pc, #404]	@ (8006278 <tcp_slowtmr+0x284>)
 80060e2:	4862      	ldr	r0, [pc, #392]	@ (800626c <tcp_slowtmr+0x278>)
 80060e4:	f007 fea6 	bl	800de34 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80060e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d106      	bne.n	80060fe <tcp_slowtmr+0x10a>
 80060f0:	4b5c      	ldr	r3, [pc, #368]	@ (8006264 <tcp_slowtmr+0x270>)
 80060f2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80060f6:	4961      	ldr	r1, [pc, #388]	@ (800627c <tcp_slowtmr+0x288>)
 80060f8:	485c      	ldr	r0, [pc, #368]	@ (800626c <tcp_slowtmr+0x278>)
 80060fa:	f007 fe9b 	bl	800de34 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80060fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006100:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8006104:	2b0b      	cmp	r3, #11
 8006106:	d905      	bls.n	8006114 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8006108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800610c:	3301      	adds	r3, #1
 800610e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006112:	e0ed      	b.n	80062f0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006116:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800611a:	3b01      	subs	r3, #1
 800611c:	4a58      	ldr	r2, [pc, #352]	@ (8006280 <tcp_slowtmr+0x28c>)
 800611e:	5cd3      	ldrb	r3, [r2, r3]
 8006120:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006124:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006128:	7c7a      	ldrb	r2, [r7, #17]
 800612a:	429a      	cmp	r2, r3
 800612c:	d907      	bls.n	800613e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800612e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006130:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006134:	3301      	adds	r3, #1
 8006136:	b2da      	uxtb	r2, r3
 8006138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006144:	7c7a      	ldrb	r2, [r7, #17]
 8006146:	429a      	cmp	r2, r3
 8006148:	f200 80d2 	bhi.w	80062f0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800614c:	2301      	movs	r3, #1
 800614e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8006150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006152:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006156:	2b00      	cmp	r3, #0
 8006158:	d108      	bne.n	800616c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800615a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800615c:	f004 fc24 	bl	800a9a8 <tcp_zero_window_probe>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d014      	beq.n	8006190 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8006166:	2300      	movs	r3, #0
 8006168:	623b      	str	r3, [r7, #32]
 800616a:	e011      	b.n	8006190 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800616c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006172:	4619      	mov	r1, r3
 8006174:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006176:	f003 fae9 	bl	800974c <tcp_split_unsent_seg>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d107      	bne.n	8006190 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8006180:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006182:	f003 fd69 	bl	8009c58 <tcp_output>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 80ac 	beq.w	80062f0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8006198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80061a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80061a6:	2b06      	cmp	r3, #6
 80061a8:	f200 80a2 	bhi.w	80062f0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80061ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80061b2:	3301      	adds	r3, #1
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80061bc:	e098      	b.n	80062f0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80061be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	db0f      	blt.n	80061e8 <tcp_slowtmr+0x1f4>
 80061c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80061ce:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d008      	beq.n	80061e8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3301      	adds	r3, #1
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	b21a      	sxth	r2, r3
 80061e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80061e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80061ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80061f4:	429a      	cmp	r2, r3
 80061f6:	db7b      	blt.n	80062f0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80061f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061fa:	f004 f821 	bl	800a240 <tcp_rexmit_rto_prepare>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <tcp_slowtmr+0x220>
 8006204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006208:	2b00      	cmp	r3, #0
 800620a:	d171      	bne.n	80062f0 <tcp_slowtmr+0x2fc>
 800620c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d06d      	beq.n	80062f0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	7d1b      	ldrb	r3, [r3, #20]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d03a      	beq.n	8006292 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800621c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006222:	2b0c      	cmp	r3, #12
 8006224:	bf28      	it	cs
 8006226:	230c      	movcs	r3, #12
 8006228:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800622a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006230:	10db      	asrs	r3, r3, #3
 8006232:	b21b      	sxth	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006238:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800623c:	4413      	add	r3, r2
 800623e:	7efa      	ldrb	r2, [r7, #27]
 8006240:	4910      	ldr	r1, [pc, #64]	@ (8006284 <tcp_slowtmr+0x290>)
 8006242:	5c8a      	ldrb	r2, [r1, r2]
 8006244:	4093      	lsls	r3, r2
 8006246:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800624e:	4293      	cmp	r3, r2
 8006250:	dc1a      	bgt.n	8006288 <tcp_slowtmr+0x294>
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	b21a      	sxth	r2, r3
 8006256:	e019      	b.n	800628c <tcp_slowtmr+0x298>
 8006258:	20008250 	.word	0x20008250
 800625c:	20008266 	.word	0x20008266
 8006260:	2000825c 	.word	0x2000825c
 8006264:	0800f748 	.word	0x0800f748
 8006268:	0800fa8c 	.word	0x0800fa8c
 800626c:	0800f78c 	.word	0x0800f78c
 8006270:	0800fab8 	.word	0x0800fab8
 8006274:	0800fae4 	.word	0x0800fae4
 8006278:	0800fb14 	.word	0x0800fb14
 800627c:	0800fb48 	.word	0x0800fb48
 8006280:	08011718 	.word	0x08011718
 8006284:	08011708 	.word	0x08011708
 8006288:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800628c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8006292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006294:	2200      	movs	r2, #0
 8006296:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800629e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80062a4:	4293      	cmp	r3, r2
 80062a6:	bf28      	it	cs
 80062a8:	4613      	movcs	r3, r2
 80062aa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80062ac:	8a7b      	ldrh	r3, [r7, #18]
 80062ae:	085b      	lsrs	r3, r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80062be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d206      	bcs.n	80062d8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80062ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80062d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062da:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80062dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80062e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80062ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062ec:	f004 f818 	bl	800a320 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f2:	7d1b      	ldrb	r3, [r3, #20]
 80062f4:	2b06      	cmp	r3, #6
 80062f6:	d111      	bne.n	800631c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80062f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fa:	8b5b      	ldrh	r3, [r3, #26]
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006304:	4b9d      	ldr	r3, [pc, #628]	@ (800657c <tcp_slowtmr+0x588>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b28      	cmp	r3, #40	@ 0x28
 8006310:	d904      	bls.n	800631c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8006312:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006316:	3301      	adds	r3, #1
 8006318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800631c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631e:	7a5b      	ldrb	r3, [r3, #9]
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b00      	cmp	r3, #0
 8006326:	d04c      	beq.n	80063c2 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8006328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800632c:	2b04      	cmp	r3, #4
 800632e:	d003      	beq.n	8006338 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8006330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006332:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006334:	2b07      	cmp	r3, #7
 8006336:	d144      	bne.n	80063c2 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006338:	4b90      	ldr	r3, [pc, #576]	@ (800657c <tcp_slowtmr+0x588>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006344:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006348:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800634c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8006350:	498b      	ldr	r1, [pc, #556]	@ (8006580 <tcp_slowtmr+0x58c>)
 8006352:	fba1 1303 	umull	r1, r3, r1, r3
 8006356:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006358:	429a      	cmp	r2, r3
 800635a:	d90a      	bls.n	8006372 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800635c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006360:	3301      	adds	r3, #1
 8006362:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8006366:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800636a:	3301      	adds	r3, #1
 800636c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006370:	e027      	b.n	80063c2 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006372:	4b82      	ldr	r3, [pc, #520]	@ (800657c <tcp_slowtmr+0x588>)
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800637c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8006382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006384:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006388:	4618      	mov	r0, r3
 800638a:	4b7e      	ldr	r3, [pc, #504]	@ (8006584 <tcp_slowtmr+0x590>)
 800638c:	fb00 f303 	mul.w	r3, r0, r3
 8006390:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006392:	497b      	ldr	r1, [pc, #492]	@ (8006580 <tcp_slowtmr+0x58c>)
 8006394:	fba1 1303 	umull	r1, r3, r1, r3
 8006398:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800639a:	429a      	cmp	r2, r3
 800639c:	d911      	bls.n	80063c2 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800639e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063a0:	f004 fac2 	bl	800a928 <tcp_keepalive>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80063aa:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d107      	bne.n	80063c2 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80063b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80063b8:	3301      	adds	r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063be:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80063c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d011      	beq.n	80063ee <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80063ca:	4b6c      	ldr	r3, [pc, #432]	@ (800657c <tcp_slowtmr+0x588>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	1ad2      	subs	r2, r2, r3
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80063da:	4619      	mov	r1, r3
 80063dc:	460b      	mov	r3, r1
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	440b      	add	r3, r1
 80063e2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d302      	bcc.n	80063ee <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80063e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063ea:	f000 fddb 	bl	8006fa4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80063ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f0:	7d1b      	ldrb	r3, [r3, #20]
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d10b      	bne.n	800640e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80063f6:	4b61      	ldr	r3, [pc, #388]	@ (800657c <tcp_slowtmr+0x588>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b28      	cmp	r3, #40	@ 0x28
 8006402:	d904      	bls.n	800640e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8006404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006408:	3301      	adds	r3, #1
 800640a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800640e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006410:	7d1b      	ldrb	r3, [r3, #20]
 8006412:	2b09      	cmp	r3, #9
 8006414:	d10b      	bne.n	800642e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006416:	4b59      	ldr	r3, [pc, #356]	@ (800657c <tcp_slowtmr+0x588>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2bf0      	cmp	r3, #240	@ 0xf0
 8006422:	d904      	bls.n	800642e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8006424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006428:	3301      	adds	r3, #1
 800642a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800642e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006432:	2b00      	cmp	r3, #0
 8006434:	d060      	beq.n	80064f8 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8006436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800643e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006440:	f000 fbfc 	bl	8006c3c <tcp_pcb_purge>
      if (prev != NULL) {
 8006444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006446:	2b00      	cmp	r3, #0
 8006448:	d010      	beq.n	800646c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800644a:	4b4f      	ldr	r3, [pc, #316]	@ (8006588 <tcp_slowtmr+0x594>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006450:	429a      	cmp	r2, r3
 8006452:	d106      	bne.n	8006462 <tcp_slowtmr+0x46e>
 8006454:	4b4d      	ldr	r3, [pc, #308]	@ (800658c <tcp_slowtmr+0x598>)
 8006456:	f240 526d 	movw	r2, #1389	@ 0x56d
 800645a:	494d      	ldr	r1, [pc, #308]	@ (8006590 <tcp_slowtmr+0x59c>)
 800645c:	484d      	ldr	r0, [pc, #308]	@ (8006594 <tcp_slowtmr+0x5a0>)
 800645e:	f007 fce9 	bl	800de34 <iprintf>
        prev->next = pcb->next;
 8006462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006468:	60da      	str	r2, [r3, #12]
 800646a:	e00f      	b.n	800648c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800646c:	4b46      	ldr	r3, [pc, #280]	@ (8006588 <tcp_slowtmr+0x594>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006472:	429a      	cmp	r2, r3
 8006474:	d006      	beq.n	8006484 <tcp_slowtmr+0x490>
 8006476:	4b45      	ldr	r3, [pc, #276]	@ (800658c <tcp_slowtmr+0x598>)
 8006478:	f240 5271 	movw	r2, #1393	@ 0x571
 800647c:	4946      	ldr	r1, [pc, #280]	@ (8006598 <tcp_slowtmr+0x5a4>)
 800647e:	4845      	ldr	r0, [pc, #276]	@ (8006594 <tcp_slowtmr+0x5a0>)
 8006480:	f007 fcd8 	bl	800de34 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	4a3f      	ldr	r2, [pc, #252]	@ (8006588 <tcp_slowtmr+0x594>)
 800648a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800648c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006490:	2b00      	cmp	r3, #0
 8006492:	d013      	beq.n	80064bc <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006496:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800649c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800649e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a0:	3304      	adds	r3, #4
 80064a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064a4:	8ad2      	ldrh	r2, [r2, #22]
 80064a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064a8:	8b09      	ldrh	r1, [r1, #24]
 80064aa:	9102      	str	r1, [sp, #8]
 80064ac:	9201      	str	r2, [sp, #4]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	462b      	mov	r3, r5
 80064b2:	4622      	mov	r2, r4
 80064b4:	4601      	mov	r1, r0
 80064b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064b8:	f004 f982 	bl	800a7c0 <tcp_rst>
      err_arg = pcb->callback_arg;
 80064bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80064c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c4:	7d1b      	ldrb	r3, [r3, #20]
 80064c6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80064c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ca:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80064cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80064d2:	6838      	ldr	r0, [r7, #0]
 80064d4:	f7ff f9f0 	bl	80058b8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80064d8:	4b30      	ldr	r3, [pc, #192]	@ (800659c <tcp_slowtmr+0x5a8>)
 80064da:	2200      	movs	r2, #0
 80064dc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <tcp_slowtmr+0x4fa>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f06f 010c 	mvn.w	r1, #12
 80064ea:	68b8      	ldr	r0, [r7, #8]
 80064ec:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80064ee:	4b2b      	ldr	r3, [pc, #172]	@ (800659c <tcp_slowtmr+0x5a8>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d037      	beq.n	8006566 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80064f6:	e590      	b.n	800601a <tcp_slowtmr+0x26>
      prev = pcb;
 80064f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80064fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8006502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006504:	7f1b      	ldrb	r3, [r3, #28]
 8006506:	3301      	adds	r3, #1
 8006508:	b2da      	uxtb	r2, r3
 800650a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800650e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006510:	7f1a      	ldrb	r2, [r3, #28]
 8006512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006514:	7f5b      	ldrb	r3, [r3, #29]
 8006516:	429a      	cmp	r2, r3
 8006518:	d325      	bcc.n	8006566 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800651a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8006520:	4b1e      	ldr	r3, [pc, #120]	@ (800659c <tcp_slowtmr+0x5a8>)
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <tcp_slowtmr+0x554>
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006538:	6912      	ldr	r2, [r2, #16]
 800653a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800653c:	4610      	mov	r0, r2
 800653e:	4798      	blx	r3
 8006540:	4603      	mov	r3, r0
 8006542:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006546:	e002      	b.n	800654e <tcp_slowtmr+0x55a>
 8006548:	2300      	movs	r3, #0
 800654a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800654e:	4b13      	ldr	r3, [pc, #76]	@ (800659c <tcp_slowtmr+0x5a8>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	f47f ad60 	bne.w	8006018 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006558:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8006560:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006562:	f003 fb79 	bl	8009c58 <tcp_output>
  while (pcb != NULL) {
 8006566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006568:	2b00      	cmp	r3, #0
 800656a:	f47f ad5c 	bne.w	8006026 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8006572:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <tcp_slowtmr+0x5ac>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006578:	e067      	b.n	800664a <tcp_slowtmr+0x656>
 800657a:	bf00      	nop
 800657c:	20008250 	.word	0x20008250
 8006580:	10624dd3 	.word	0x10624dd3
 8006584:	000124f8 	.word	0x000124f8
 8006588:	2000825c 	.word	0x2000825c
 800658c:	0800f748 	.word	0x0800f748
 8006590:	0800fb80 	.word	0x0800fb80
 8006594:	0800f78c 	.word	0x0800f78c
 8006598:	0800fbac 	.word	0x0800fbac
 800659c:	20008264 	.word	0x20008264
 80065a0:	20008260 	.word	0x20008260
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80065a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a6:	7d1b      	ldrb	r3, [r3, #20]
 80065a8:	2b0a      	cmp	r3, #10
 80065aa:	d006      	beq.n	80065ba <tcp_slowtmr+0x5c6>
 80065ac:	4b2b      	ldr	r3, [pc, #172]	@ (800665c <tcp_slowtmr+0x668>)
 80065ae:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80065b2:	492b      	ldr	r1, [pc, #172]	@ (8006660 <tcp_slowtmr+0x66c>)
 80065b4:	482b      	ldr	r0, [pc, #172]	@ (8006664 <tcp_slowtmr+0x670>)
 80065b6:	f007 fc3d 	bl	800de34 <iprintf>
    pcb_remove = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80065c0:	4b29      	ldr	r3, [pc, #164]	@ (8006668 <tcp_slowtmr+0x674>)
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2bf0      	cmp	r3, #240	@ 0xf0
 80065cc:	d904      	bls.n	80065d8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80065ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065d2:	3301      	adds	r3, #1
 80065d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80065d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d02f      	beq.n	8006640 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80065e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065e2:	f000 fb2b 	bl	8006c3c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80065e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d010      	beq.n	800660e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80065ec:	4b1f      	ldr	r3, [pc, #124]	@ (800666c <tcp_slowtmr+0x678>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d106      	bne.n	8006604 <tcp_slowtmr+0x610>
 80065f6:	4b19      	ldr	r3, [pc, #100]	@ (800665c <tcp_slowtmr+0x668>)
 80065f8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80065fc:	491c      	ldr	r1, [pc, #112]	@ (8006670 <tcp_slowtmr+0x67c>)
 80065fe:	4819      	ldr	r0, [pc, #100]	@ (8006664 <tcp_slowtmr+0x670>)
 8006600:	f007 fc18 	bl	800de34 <iprintf>
        prev->next = pcb->next;
 8006604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660a:	60da      	str	r2, [r3, #12]
 800660c:	e00f      	b.n	800662e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800660e:	4b17      	ldr	r3, [pc, #92]	@ (800666c <tcp_slowtmr+0x678>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006614:	429a      	cmp	r2, r3
 8006616:	d006      	beq.n	8006626 <tcp_slowtmr+0x632>
 8006618:	4b10      	ldr	r3, [pc, #64]	@ (800665c <tcp_slowtmr+0x668>)
 800661a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800661e:	4915      	ldr	r1, [pc, #84]	@ (8006674 <tcp_slowtmr+0x680>)
 8006620:	4810      	ldr	r0, [pc, #64]	@ (8006664 <tcp_slowtmr+0x670>)
 8006622:	f007 fc07 	bl	800de34 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	4a10      	ldr	r2, [pc, #64]	@ (800666c <tcp_slowtmr+0x678>)
 800662c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800662e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006630:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006638:	69f8      	ldr	r0, [r7, #28]
 800663a:	f7ff f93d 	bl	80058b8 <tcp_free>
 800663e:	e004      	b.n	800664a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8006640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006642:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1a9      	bne.n	80065a4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	3730      	adds	r7, #48	@ 0x30
 8006656:	46bd      	mov	sp, r7
 8006658:	bdb0      	pop	{r4, r5, r7, pc}
 800665a:	bf00      	nop
 800665c:	0800f748 	.word	0x0800f748
 8006660:	0800fbd8 	.word	0x0800fbd8
 8006664:	0800f78c 	.word	0x0800f78c
 8006668:	20008250 	.word	0x20008250
 800666c:	20008260 	.word	0x20008260
 8006670:	0800fc08 	.word	0x0800fc08
 8006674:	0800fc30 	.word	0x0800fc30

08006678 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800667e:	4b2d      	ldr	r3, [pc, #180]	@ (8006734 <tcp_fasttmr+0xbc>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	b2da      	uxtb	r2, r3
 8006686:	4b2b      	ldr	r3, [pc, #172]	@ (8006734 <tcp_fasttmr+0xbc>)
 8006688:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800668a:	4b2b      	ldr	r3, [pc, #172]	@ (8006738 <tcp_fasttmr+0xc0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006690:	e048      	b.n	8006724 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	7f9a      	ldrb	r2, [r3, #30]
 8006696:	4b27      	ldr	r3, [pc, #156]	@ (8006734 <tcp_fasttmr+0xbc>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d03f      	beq.n	800671e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800669e:	4b25      	ldr	r3, [pc, #148]	@ (8006734 <tcp_fasttmr+0xbc>)
 80066a0:	781a      	ldrb	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8b5b      	ldrh	r3, [r3, #26]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d010      	beq.n	80066d4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	8b5b      	ldrh	r3, [r3, #26]
 80066b6:	f043 0302 	orr.w	r3, r3, #2
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f003 fac9 	bl	8009c58 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	8b5b      	ldrh	r3, [r3, #26]
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8b5b      	ldrh	r3, [r3, #26]
 80066d8:	f003 0308 	and.w	r3, r3, #8
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8b5b      	ldrh	r3, [r3, #26]
 80066e4:	f023 0308 	bic.w	r3, r3, #8
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fa76 	bl	8005be0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006702:	4b0e      	ldr	r3, [pc, #56]	@ (800673c <tcp_fasttmr+0xc4>)
 8006704:	2200      	movs	r2, #0
 8006706:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f819 	bl	8006740 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800670e:	4b0b      	ldr	r3, [pc, #44]	@ (800673c <tcp_fasttmr+0xc4>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d000      	beq.n	8006718 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006716:	e7b8      	b.n	800668a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	607b      	str	r3, [r7, #4]
 800671c:	e002      	b.n	8006724 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1b3      	bne.n	8006692 <tcp_fasttmr+0x1a>
    }
  }
}
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20008266 	.word	0x20008266
 8006738:	2000825c 	.word	0x2000825c
 800673c:	20008264 	.word	0x20008264

08006740 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006740:	b590      	push	{r4, r7, lr}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <tcp_process_refused_data+0x22>
 800674e:	4b37      	ldr	r3, [pc, #220]	@ (800682c <tcp_process_refused_data+0xec>)
 8006750:	f240 6209 	movw	r2, #1545	@ 0x609
 8006754:	4936      	ldr	r1, [pc, #216]	@ (8006830 <tcp_process_refused_data+0xf0>)
 8006756:	4837      	ldr	r0, [pc, #220]	@ (8006834 <tcp_process_refused_data+0xf4>)
 8006758:	f007 fb6c 	bl	800de34 <iprintf>
 800675c:	f06f 030f 	mvn.w	r3, #15
 8006760:	e060      	b.n	8006824 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006766:	7b5b      	ldrb	r3, [r3, #13]
 8006768:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800676e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <tcp_process_refused_data+0x58>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6918      	ldr	r0, [r3, #16]
 800678a:	2300      	movs	r3, #0
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	47a0      	blx	r4
 8006792:	4603      	mov	r3, r0
 8006794:	73fb      	strb	r3, [r7, #15]
 8006796:	e007      	b.n	80067a8 <tcp_process_refused_data+0x68>
 8006798:	2300      	movs	r3, #0
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	2000      	movs	r0, #0
 80067a0:	f000 f8a4 	bl	80068ec <tcp_recv_null>
 80067a4:	4603      	mov	r3, r0
 80067a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80067a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d12a      	bne.n	8006806 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d033      	beq.n	8006822 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067be:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80067c2:	d005      	beq.n	80067d0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067c8:	3301      	adds	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <tcp_process_refused_data+0xb2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6918      	ldr	r0, [r3, #16]
 80067e4:	2300      	movs	r3, #0
 80067e6:	2200      	movs	r2, #0
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	47a0      	blx	r4
 80067ec:	4603      	mov	r3, r0
 80067ee:	73fb      	strb	r3, [r7, #15]
 80067f0:	e001      	b.n	80067f6 <tcp_process_refused_data+0xb6>
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80067f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067fa:	f113 0f0d 	cmn.w	r3, #13
 80067fe:	d110      	bne.n	8006822 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006800:	f06f 030c 	mvn.w	r3, #12
 8006804:	e00e      	b.n	8006824 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800680a:	f113 0f0d 	cmn.w	r3, #13
 800680e:	d102      	bne.n	8006816 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006810:	f06f 030c 	mvn.w	r3, #12
 8006814:	e006      	b.n	8006824 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800681c:	f06f 0304 	mvn.w	r3, #4
 8006820:	e000      	b.n	8006824 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	bd90      	pop	{r4, r7, pc}
 800682c:	0800f748 	.word	0x0800f748
 8006830:	0800fc58 	.word	0x0800fc58
 8006834:	0800f78c 	.word	0x0800f78c

08006838 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006840:	e007      	b.n	8006852 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f80a 	bl	8006862 <tcp_seg_free>
    seg = next;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1f4      	bne.n	8006842 <tcp_segs_free+0xa>
  }
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00c      	beq.n	800688a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe fd6b 	bl	8005358 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	2003      	movs	r0, #3
 8006886:	f7fd fef1 	bl	800466c <memp_free>
  }
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <tcp_seg_copy+0x1c>
 80068a2:	4b0f      	ldr	r3, [pc, #60]	@ (80068e0 <tcp_seg_copy+0x4c>)
 80068a4:	f240 6282 	movw	r2, #1666	@ 0x682
 80068a8:	490e      	ldr	r1, [pc, #56]	@ (80068e4 <tcp_seg_copy+0x50>)
 80068aa:	480f      	ldr	r0, [pc, #60]	@ (80068e8 <tcp_seg_copy+0x54>)
 80068ac:	f007 fac2 	bl	800de34 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80068b0:	2003      	movs	r0, #3
 80068b2:	f7fd fe6b 	bl	800458c <memp_malloc>
 80068b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <tcp_seg_copy+0x2e>
    return NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	e00a      	b.n	80068d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80068c2:	2210      	movs	r2, #16
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f007 fb8f 	bl	800dfea <memcpy>
  pbuf_ref(cseg->p);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe fde1 	bl	8005498 <pbuf_ref>
  return cseg;
 80068d6:	68fb      	ldr	r3, [r7, #12]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	0800f748 	.word	0x0800f748
 80068e4:	0800fc9c 	.word	0x0800fc9c
 80068e8:	0800f78c 	.word	0x0800f78c

080068ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d109      	bne.n	8006914 <tcp_recv_null+0x28>
 8006900:	4b12      	ldr	r3, [pc, #72]	@ (800694c <tcp_recv_null+0x60>)
 8006902:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8006906:	4912      	ldr	r1, [pc, #72]	@ (8006950 <tcp_recv_null+0x64>)
 8006908:	4812      	ldr	r0, [pc, #72]	@ (8006954 <tcp_recv_null+0x68>)
 800690a:	f007 fa93 	bl	800de34 <iprintf>
 800690e:	f06f 030f 	mvn.w	r3, #15
 8006912:	e016      	b.n	8006942 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	891b      	ldrh	r3, [r3, #8]
 800691e:	4619      	mov	r1, r3
 8006920:	68b8      	ldr	r0, [r7, #8]
 8006922:	f7ff fb17 	bl	8005f54 <tcp_recved>
    pbuf_free(p);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fe fd16 	bl	8005358 <pbuf_free>
 800692c:	e008      	b.n	8006940 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800692e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006936:	68b8      	ldr	r0, [r7, #8]
 8006938:	f7ff f9bc 	bl	8005cb4 <tcp_close>
 800693c:	4603      	mov	r3, r0
 800693e:	e000      	b.n	8006942 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	0800f748 	.word	0x0800f748
 8006950:	0800fcb8 	.word	0x0800fcb8
 8006954:	0800f78c 	.word	0x0800f78c

08006958 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006966:	2b00      	cmp	r3, #0
 8006968:	db01      	blt.n	800696e <tcp_kill_prio+0x16>
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	e000      	b.n	8006970 <tcp_kill_prio+0x18>
 800696e:	237f      	movs	r3, #127	@ 0x7f
 8006970:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006972:	7afb      	ldrb	r3, [r7, #11]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d034      	beq.n	80069e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006978:	7afb      	ldrb	r3, [r7, #11]
 800697a:	3b01      	subs	r3, #1
 800697c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006986:	4b19      	ldr	r3, [pc, #100]	@ (80069ec <tcp_kill_prio+0x94>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e01f      	b.n	80069ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	7d5b      	ldrb	r3, [r3, #21]
 8006992:	7afa      	ldrb	r2, [r7, #11]
 8006994:	429a      	cmp	r2, r3
 8006996:	d80c      	bhi.n	80069b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800699c:	7afa      	ldrb	r2, [r7, #11]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d112      	bne.n	80069c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80069a2:	4b13      	ldr	r3, [pc, #76]	@ (80069f0 <tcp_kill_prio+0x98>)
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d80a      	bhi.n	80069c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80069b2:	4b0f      	ldr	r3, [pc, #60]	@ (80069f0 <tcp_kill_prio+0x98>)
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	7d5b      	ldrb	r3, [r3, #21]
 80069c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1dc      	bne.n	800698e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d004      	beq.n	80069e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80069da:	6938      	ldr	r0, [r7, #16]
 80069dc:	f7ff fa54 	bl	8005e88 <tcp_abort>
 80069e0:	e000      	b.n	80069e4 <tcp_kill_prio+0x8c>
    return;
 80069e2:	bf00      	nop
  }
}
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	2000825c 	.word	0x2000825c
 80069f0:	20008250 	.word	0x20008250

080069f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	4603      	mov	r3, r0
 80069fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80069fe:	79fb      	ldrb	r3, [r7, #7]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d009      	beq.n	8006a18 <tcp_kill_state+0x24>
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	2b09      	cmp	r3, #9
 8006a08:	d006      	beq.n	8006a18 <tcp_kill_state+0x24>
 8006a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006a74 <tcp_kill_state+0x80>)
 8006a0c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8006a10:	4919      	ldr	r1, [pc, #100]	@ (8006a78 <tcp_kill_state+0x84>)
 8006a12:	481a      	ldr	r0, [pc, #104]	@ (8006a7c <tcp_kill_state+0x88>)
 8006a14:	f007 fa0e 	bl	800de34 <iprintf>

  inactivity = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a20:	4b17      	ldr	r3, [pc, #92]	@ (8006a80 <tcp_kill_state+0x8c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	e017      	b.n	8006a58 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	7d1b      	ldrb	r3, [r3, #20]
 8006a2c:	79fa      	ldrb	r2, [r7, #7]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d10f      	bne.n	8006a52 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006a32:	4b14      	ldr	r3, [pc, #80]	@ (8006a84 <tcp_kill_state+0x90>)
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d807      	bhi.n	8006a52 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006a42:	4b10      	ldr	r3, [pc, #64]	@ (8006a84 <tcp_kill_state+0x90>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e4      	bne.n	8006a28 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006a64:	2100      	movs	r1, #0
 8006a66:	6938      	ldr	r0, [r7, #16]
 8006a68:	f7ff f950 	bl	8005d0c <tcp_abandon>
  }
}
 8006a6c:	bf00      	nop
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	0800f748 	.word	0x0800f748
 8006a78:	0800fcd4 	.word	0x0800fcd4
 8006a7c:	0800f78c 	.word	0x0800f78c
 8006a80:	2000825c 	.word	0x2000825c
 8006a84:	20008250 	.word	0x20008250

08006a88 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a96:	4b12      	ldr	r3, [pc, #72]	@ (8006ae0 <tcp_kill_timewait+0x58>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	e012      	b.n	8006ac4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006a9e:	4b11      	ldr	r3, [pc, #68]	@ (8006ae4 <tcp_kill_timewait+0x5c>)
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d807      	bhi.n	8006abe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006aae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae4 <tcp_kill_timewait+0x5c>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e9      	bne.n	8006a9e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006ad0:	68b8      	ldr	r0, [r7, #8]
 8006ad2:	f7ff f9d9 	bl	8005e88 <tcp_abort>
  }
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20008260 	.word	0x20008260
 8006ae4:	20008250 	.word	0x20008250

08006ae8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006aee:	4b10      	ldr	r3, [pc, #64]	@ (8006b30 <tcp_handle_closepend+0x48>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006af4:	e014      	b.n	8006b20 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	8b5b      	ldrh	r3, [r3, #26]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	8b5b      	ldrh	r3, [r3, #26]
 8006b0c:	f023 0308 	bic.w	r3, r3, #8
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff f862 	bl	8005be0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e7      	bne.n	8006af6 <tcp_handle_closepend+0xe>
  }
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	2000825c 	.word	0x2000825c

08006b34 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006b3e:	2001      	movs	r0, #1
 8006b40:	f7fd fd24 	bl	800458c <memp_malloc>
 8006b44:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d126      	bne.n	8006b9a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006b4c:	f7ff ffcc 	bl	8006ae8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006b50:	f7ff ff9a 	bl	8006a88 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006b54:	2001      	movs	r0, #1
 8006b56:	f7fd fd19 	bl	800458c <memp_malloc>
 8006b5a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d11b      	bne.n	8006b9a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006b62:	2009      	movs	r0, #9
 8006b64:	f7ff ff46 	bl	80069f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006b68:	2001      	movs	r0, #1
 8006b6a:	f7fd fd0f 	bl	800458c <memp_malloc>
 8006b6e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d111      	bne.n	8006b9a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006b76:	2008      	movs	r0, #8
 8006b78:	f7ff ff3c 	bl	80069f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	f7fd fd05 	bl	800458c <memp_malloc>
 8006b82:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d107      	bne.n	8006b9a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fee3 	bl	8006958 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006b92:	2001      	movs	r0, #1
 8006b94:	f7fd fcfa 	bl	800458c <memp_malloc>
 8006b98:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d03f      	beq.n	8006c20 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006ba0:	229c      	movs	r2, #156	@ 0x9c
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f007 f9aa 	bl	800defe <memset>
    pcb->prio = prio;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	79fa      	ldrb	r2, [r7, #7]
 8006bae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006bb6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	22ff      	movs	r2, #255	@ 0xff
 8006bce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8006bd6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2206      	movs	r2, #6
 8006bdc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2206      	movs	r2, #6
 8006be4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006bec:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c2c <tcp_alloc+0xf8>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006c30 <tcp_alloc+0xfc>)
 8006c00:	781a      	ldrb	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006c0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a08      	ldr	r2, [pc, #32]	@ (8006c34 <tcp_alloc+0x100>)
 8006c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4a07      	ldr	r2, [pc, #28]	@ (8006c38 <tcp_alloc+0x104>)
 8006c1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006c20:	68fb      	ldr	r3, [r7, #12]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20008250 	.word	0x20008250
 8006c30:	20008266 	.word	0x20008266
 8006c34:	080068ed 	.word	0x080068ed
 8006c38:	006ddd00 	.word	0x006ddd00

08006c3c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d107      	bne.n	8006c5a <tcp_pcb_purge+0x1e>
 8006c4a:	4b21      	ldr	r3, [pc, #132]	@ (8006cd0 <tcp_pcb_purge+0x94>)
 8006c4c:	f640 0251 	movw	r2, #2129	@ 0x851
 8006c50:	4920      	ldr	r1, [pc, #128]	@ (8006cd4 <tcp_pcb_purge+0x98>)
 8006c52:	4821      	ldr	r0, [pc, #132]	@ (8006cd8 <tcp_pcb_purge+0x9c>)
 8006c54:	f007 f8ee 	bl	800de34 <iprintf>
 8006c58:	e037      	b.n	8006cca <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	7d1b      	ldrb	r3, [r3, #20]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d033      	beq.n	8006cca <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006c66:	2b0a      	cmp	r3, #10
 8006c68:	d02f      	beq.n	8006cca <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d02b      	beq.n	8006cca <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fb6a 	bl	8005358 <pbuf_free>
      pcb->refused_data = NULL;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f986 	bl	8006fa4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c9e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff fdc7 	bl	8006838 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fdc2 	bl	8006838 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	0800f748 	.word	0x0800f748
 8006cd4:	0800fd94 	.word	0x0800fd94
 8006cd8:	0800f78c 	.word	0x0800f78c

08006cdc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d106      	bne.n	8006cfa <tcp_pcb_remove+0x1e>
 8006cec:	4b3e      	ldr	r3, [pc, #248]	@ (8006de8 <tcp_pcb_remove+0x10c>)
 8006cee:	f640 0283 	movw	r2, #2179	@ 0x883
 8006cf2:	493e      	ldr	r1, [pc, #248]	@ (8006dec <tcp_pcb_remove+0x110>)
 8006cf4:	483e      	ldr	r0, [pc, #248]	@ (8006df0 <tcp_pcb_remove+0x114>)
 8006cf6:	f007 f89d 	bl	800de34 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <tcp_pcb_remove+0x32>
 8006d00:	4b39      	ldr	r3, [pc, #228]	@ (8006de8 <tcp_pcb_remove+0x10c>)
 8006d02:	f640 0284 	movw	r2, #2180	@ 0x884
 8006d06:	493b      	ldr	r1, [pc, #236]	@ (8006df4 <tcp_pcb_remove+0x118>)
 8006d08:	4839      	ldr	r0, [pc, #228]	@ (8006df0 <tcp_pcb_remove+0x114>)
 8006d0a:	f007 f893 	bl	800de34 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d105      	bne.n	8006d24 <tcp_pcb_remove+0x48>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e013      	b.n	8006d4c <tcp_pcb_remove+0x70>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	e00c      	b.n	8006d46 <tcp_pcb_remove+0x6a>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d104      	bne.n	8006d40 <tcp_pcb_remove+0x64>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	60da      	str	r2, [r3, #12]
 8006d3e:	e005      	b.n	8006d4c <tcp_pcb_remove+0x70>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1ef      	bne.n	8006d2c <tcp_pcb_remove+0x50>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006d52:	6838      	ldr	r0, [r7, #0]
 8006d54:	f7ff ff72 	bl	8006c3c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	7d1b      	ldrb	r3, [r3, #20]
 8006d5c:	2b0a      	cmp	r3, #10
 8006d5e:	d013      	beq.n	8006d88 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d00f      	beq.n	8006d88 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	8b5b      	ldrh	r3, [r3, #26]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d009      	beq.n	8006d88 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	8b5b      	ldrh	r3, [r3, #26]
 8006d78:	f043 0302 	orr.w	r3, r3, #2
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006d82:	6838      	ldr	r0, [r7, #0]
 8006d84:	f002 ff68 	bl	8009c58 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	7d1b      	ldrb	r3, [r3, #20]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d020      	beq.n	8006dd2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <tcp_pcb_remove+0xca>
 8006d98:	4b13      	ldr	r3, [pc, #76]	@ (8006de8 <tcp_pcb_remove+0x10c>)
 8006d9a:	f640 0293 	movw	r2, #2195	@ 0x893
 8006d9e:	4916      	ldr	r1, [pc, #88]	@ (8006df8 <tcp_pcb_remove+0x11c>)
 8006da0:	4813      	ldr	r0, [pc, #76]	@ (8006df0 <tcp_pcb_remove+0x114>)
 8006da2:	f007 f847 	bl	800de34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d006      	beq.n	8006dbc <tcp_pcb_remove+0xe0>
 8006dae:	4b0e      	ldr	r3, [pc, #56]	@ (8006de8 <tcp_pcb_remove+0x10c>)
 8006db0:	f640 0294 	movw	r2, #2196	@ 0x894
 8006db4:	4911      	ldr	r1, [pc, #68]	@ (8006dfc <tcp_pcb_remove+0x120>)
 8006db6:	480e      	ldr	r0, [pc, #56]	@ (8006df0 <tcp_pcb_remove+0x114>)
 8006db8:	f007 f83c 	bl	800de34 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d006      	beq.n	8006dd2 <tcp_pcb_remove+0xf6>
 8006dc4:	4b08      	ldr	r3, [pc, #32]	@ (8006de8 <tcp_pcb_remove+0x10c>)
 8006dc6:	f640 0296 	movw	r2, #2198	@ 0x896
 8006dca:	490d      	ldr	r1, [pc, #52]	@ (8006e00 <tcp_pcb_remove+0x124>)
 8006dcc:	4808      	ldr	r0, [pc, #32]	@ (8006df0 <tcp_pcb_remove+0x114>)
 8006dce:	f007 f831 	bl	800de34 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	0800f748 	.word	0x0800f748
 8006dec:	0800fdb0 	.word	0x0800fdb0
 8006df0:	0800f78c 	.word	0x0800f78c
 8006df4:	0800fdcc 	.word	0x0800fdcc
 8006df8:	0800fdec 	.word	0x0800fdec
 8006dfc:	0800fe04 	.word	0x0800fe04
 8006e00:	0800fe20 	.word	0x0800fe20

08006e04 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <tcp_next_iss+0x1c>
 8006e12:	4b0a      	ldr	r3, [pc, #40]	@ (8006e3c <tcp_next_iss+0x38>)
 8006e14:	f640 02af 	movw	r2, #2223	@ 0x8af
 8006e18:	4909      	ldr	r1, [pc, #36]	@ (8006e40 <tcp_next_iss+0x3c>)
 8006e1a:	480a      	ldr	r0, [pc, #40]	@ (8006e44 <tcp_next_iss+0x40>)
 8006e1c:	f007 f80a 	bl	800de34 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006e20:	4b09      	ldr	r3, [pc, #36]	@ (8006e48 <tcp_next_iss+0x44>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	4b09      	ldr	r3, [pc, #36]	@ (8006e4c <tcp_next_iss+0x48>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4413      	add	r3, r2
 8006e2a:	4a07      	ldr	r2, [pc, #28]	@ (8006e48 <tcp_next_iss+0x44>)
 8006e2c:	6013      	str	r3, [r2, #0]
  return iss;
 8006e2e:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <tcp_next_iss+0x44>)
 8006e30:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	0800f748 	.word	0x0800f748
 8006e40:	0800fe38 	.word	0x0800fe38
 8006e44:	0800f78c 	.word	0x0800f78c
 8006e48:	20000024 	.word	0x20000024
 8006e4c:	20008250 	.word	0x20008250

08006e50 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d106      	bne.n	8006e72 <tcp_eff_send_mss_netif+0x22>
 8006e64:	4b14      	ldr	r3, [pc, #80]	@ (8006eb8 <tcp_eff_send_mss_netif+0x68>)
 8006e66:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8006e6a:	4914      	ldr	r1, [pc, #80]	@ (8006ebc <tcp_eff_send_mss_netif+0x6c>)
 8006e6c:	4814      	ldr	r0, [pc, #80]	@ (8006ec0 <tcp_eff_send_mss_netif+0x70>)
 8006e6e:	f006 ffe1 	bl	800de34 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006e78:	89fb      	ldrh	r3, [r7, #14]
 8006e7a:	e019      	b.n	8006eb0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006e80:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006e82:	8afb      	ldrh	r3, [r7, #22]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d012      	beq.n	8006eae <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006e88:	2328      	movs	r3, #40	@ 0x28
 8006e8a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006e8c:	8afa      	ldrh	r2, [r7, #22]
 8006e8e:	8abb      	ldrh	r3, [r7, #20]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d904      	bls.n	8006e9e <tcp_eff_send_mss_netif+0x4e>
 8006e94:	8afa      	ldrh	r2, [r7, #22]
 8006e96:	8abb      	ldrh	r3, [r7, #20]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	e000      	b.n	8006ea0 <tcp_eff_send_mss_netif+0x50>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006ea2:	8a7a      	ldrh	r2, [r7, #18]
 8006ea4:	89fb      	ldrh	r3, [r7, #14]
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	bf28      	it	cs
 8006eaa:	4613      	movcs	r3, r2
 8006eac:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006eae:	89fb      	ldrh	r3, [r7, #14]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	0800f748 	.word	0x0800f748
 8006ebc:	0800fe54 	.word	0x0800fe54
 8006ec0:	0800f78c 	.word	0x0800f78c

08006ec4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d119      	bne.n	8006f0c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006ed8:	4b10      	ldr	r3, [pc, #64]	@ (8006f1c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006eda:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8006ede:	4910      	ldr	r1, [pc, #64]	@ (8006f20 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006ee0:	4810      	ldr	r0, [pc, #64]	@ (8006f24 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006ee2:	f006 ffa7 	bl	800de34 <iprintf>

  while (pcb != NULL) {
 8006ee6:	e011      	b.n	8006f0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d108      	bne.n	8006f06 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f7fe ffc4 	bl	8005e88 <tcp_abort>
      pcb = next;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e002      	b.n	8006f0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1ea      	bne.n	8006ee8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	0800f748 	.word	0x0800f748
 8006f20:	0800fe7c 	.word	0x0800fe7c
 8006f24:	0800f78c 	.word	0x0800f78c

08006f28 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d02a      	beq.n	8006f8e <tcp_netif_ip_addr_changed+0x66>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d026      	beq.n	8006f8e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006f40:	4b15      	ldr	r3, [pc, #84]	@ (8006f98 <tcp_netif_ip_addr_changed+0x70>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff ffbc 	bl	8006ec4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006f4c:	4b13      	ldr	r3, [pc, #76]	@ (8006f9c <tcp_netif_ip_addr_changed+0x74>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff ffb6 	bl	8006ec4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d017      	beq.n	8006f8e <tcp_netif_ip_addr_changed+0x66>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d013      	beq.n	8006f8e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f66:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa0 <tcp_netif_ip_addr_changed+0x78>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	e00c      	b.n	8006f88 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d103      	bne.n	8006f82 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1ef      	bne.n	8006f6e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	2000825c 	.word	0x2000825c
 8006f9c:	20008254 	.word	0x20008254
 8006fa0:	20008258 	.word	0x20008258

08006fa4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d007      	beq.n	8006fc4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff fc3d 	bl	8006838 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006fcc:	b590      	push	{r4, r7, lr}
 8006fce:	b08d      	sub	sp, #52	@ 0x34
 8006fd0:	af04      	add	r7, sp, #16
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d105      	bne.n	8006fe8 <tcp_input+0x1c>
 8006fdc:	4b9b      	ldr	r3, [pc, #620]	@ (800724c <tcp_input+0x280>)
 8006fde:	2283      	movs	r2, #131	@ 0x83
 8006fe0:	499b      	ldr	r1, [pc, #620]	@ (8007250 <tcp_input+0x284>)
 8006fe2:	489c      	ldr	r0, [pc, #624]	@ (8007254 <tcp_input+0x288>)
 8006fe4:	f006 ff26 	bl	800de34 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	4a9a      	ldr	r2, [pc, #616]	@ (8007258 <tcp_input+0x28c>)
 8006fee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	895b      	ldrh	r3, [r3, #10]
 8006ff4:	2b13      	cmp	r3, #19
 8006ff6:	f240 83d1 	bls.w	800779c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006ffa:	4b98      	ldr	r3, [pc, #608]	@ (800725c <tcp_input+0x290>)
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	4a97      	ldr	r2, [pc, #604]	@ (800725c <tcp_input+0x290>)
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	4611      	mov	r1, r2
 8007004:	4618      	mov	r0, r3
 8007006:	f005 febf 	bl	800cd88 <ip4_addr_isbroadcast_u32>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	f040 83c7 	bne.w	80077a0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007012:	4b92      	ldr	r3, [pc, #584]	@ (800725c <tcp_input+0x290>)
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800701a:	2be0      	cmp	r3, #224	@ 0xe0
 800701c:	f000 83c0 	beq.w	80077a0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007020:	4b8d      	ldr	r3, [pc, #564]	@ (8007258 <tcp_input+0x28c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	899b      	ldrh	r3, [r3, #12]
 8007026:	b29b      	uxth	r3, r3
 8007028:	4618      	mov	r0, r3
 800702a:	f7fc fe37 	bl	8003c9c <lwip_htons>
 800702e:	4603      	mov	r3, r0
 8007030:	0b1b      	lsrs	r3, r3, #12
 8007032:	b29b      	uxth	r3, r3
 8007034:	b2db      	uxtb	r3, r3
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800703a:	7cbb      	ldrb	r3, [r7, #18]
 800703c:	2b13      	cmp	r3, #19
 800703e:	f240 83b1 	bls.w	80077a4 <tcp_input+0x7d8>
 8007042:	7cbb      	ldrb	r3, [r7, #18]
 8007044:	b29a      	uxth	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	891b      	ldrh	r3, [r3, #8]
 800704a:	429a      	cmp	r2, r3
 800704c:	f200 83aa 	bhi.w	80077a4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007050:	7cbb      	ldrb	r3, [r7, #18]
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b14      	subs	r3, #20
 8007056:	b29a      	uxth	r2, r3
 8007058:	4b81      	ldr	r3, [pc, #516]	@ (8007260 <tcp_input+0x294>)
 800705a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800705c:	4b81      	ldr	r3, [pc, #516]	@ (8007264 <tcp_input+0x298>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	895a      	ldrh	r2, [r3, #10]
 8007066:	7cbb      	ldrb	r3, [r7, #18]
 8007068:	b29b      	uxth	r3, r3
 800706a:	429a      	cmp	r2, r3
 800706c:	d309      	bcc.n	8007082 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800706e:	4b7c      	ldr	r3, [pc, #496]	@ (8007260 <tcp_input+0x294>)
 8007070:	881a      	ldrh	r2, [r3, #0]
 8007072:	4b7d      	ldr	r3, [pc, #500]	@ (8007268 <tcp_input+0x29c>)
 8007074:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007076:	7cbb      	ldrb	r3, [r7, #18]
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7fe f8e6 	bl	800524c <pbuf_remove_header>
 8007080:	e04e      	b.n	8007120 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <tcp_input+0xca>
 800708a:	4b70      	ldr	r3, [pc, #448]	@ (800724c <tcp_input+0x280>)
 800708c:	22c2      	movs	r2, #194	@ 0xc2
 800708e:	4977      	ldr	r1, [pc, #476]	@ (800726c <tcp_input+0x2a0>)
 8007090:	4870      	ldr	r0, [pc, #448]	@ (8007254 <tcp_input+0x288>)
 8007092:	f006 fecf 	bl	800de34 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007096:	2114      	movs	r1, #20
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7fe f8d7 	bl	800524c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	895a      	ldrh	r2, [r3, #10]
 80070a2:	4b71      	ldr	r3, [pc, #452]	@ (8007268 <tcp_input+0x29c>)
 80070a4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80070a6:	4b6e      	ldr	r3, [pc, #440]	@ (8007260 <tcp_input+0x294>)
 80070a8:	881a      	ldrh	r2, [r3, #0]
 80070aa:	4b6f      	ldr	r3, [pc, #444]	@ (8007268 <tcp_input+0x29c>)
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80070b2:	4b6d      	ldr	r3, [pc, #436]	@ (8007268 <tcp_input+0x29c>)
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7fe f8c7 	bl	800524c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	895b      	ldrh	r3, [r3, #10]
 80070c4:	8a3a      	ldrh	r2, [r7, #16]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	f200 836e 	bhi.w	80077a8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	4a64      	ldr	r2, [pc, #400]	@ (8007264 <tcp_input+0x298>)
 80070d4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	8a3a      	ldrh	r2, [r7, #16]
 80070dc:	4611      	mov	r1, r2
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe f8b4 	bl	800524c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	891a      	ldrh	r2, [r3, #8]
 80070e8:	8a3b      	ldrh	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	895b      	ldrh	r3, [r3, #10]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <tcp_input+0x13a>
 80070fa:	4b54      	ldr	r3, [pc, #336]	@ (800724c <tcp_input+0x280>)
 80070fc:	22df      	movs	r2, #223	@ 0xdf
 80070fe:	495c      	ldr	r1, [pc, #368]	@ (8007270 <tcp_input+0x2a4>)
 8007100:	4854      	ldr	r0, [pc, #336]	@ (8007254 <tcp_input+0x288>)
 8007102:	f006 fe97 	bl	800de34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	891a      	ldrh	r2, [r3, #8]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	891b      	ldrh	r3, [r3, #8]
 8007110:	429a      	cmp	r2, r3
 8007112:	d005      	beq.n	8007120 <tcp_input+0x154>
 8007114:	4b4d      	ldr	r3, [pc, #308]	@ (800724c <tcp_input+0x280>)
 8007116:	22e0      	movs	r2, #224	@ 0xe0
 8007118:	4956      	ldr	r1, [pc, #344]	@ (8007274 <tcp_input+0x2a8>)
 800711a:	484e      	ldr	r0, [pc, #312]	@ (8007254 <tcp_input+0x288>)
 800711c:	f006 fe8a 	bl	800de34 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007120:	4b4d      	ldr	r3, [pc, #308]	@ (8007258 <tcp_input+0x28c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	4a4b      	ldr	r2, [pc, #300]	@ (8007258 <tcp_input+0x28c>)
 800712a:	6814      	ldr	r4, [r2, #0]
 800712c:	4618      	mov	r0, r3
 800712e:	f7fc fdb5 	bl	8003c9c <lwip_htons>
 8007132:	4603      	mov	r3, r0
 8007134:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007136:	4b48      	ldr	r3, [pc, #288]	@ (8007258 <tcp_input+0x28c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	885b      	ldrh	r3, [r3, #2]
 800713c:	b29b      	uxth	r3, r3
 800713e:	4a46      	ldr	r2, [pc, #280]	@ (8007258 <tcp_input+0x28c>)
 8007140:	6814      	ldr	r4, [r2, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f7fc fdaa 	bl	8003c9c <lwip_htons>
 8007148:	4603      	mov	r3, r0
 800714a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800714c:	4b42      	ldr	r3, [pc, #264]	@ (8007258 <tcp_input+0x28c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4a41      	ldr	r2, [pc, #260]	@ (8007258 <tcp_input+0x28c>)
 8007154:	6814      	ldr	r4, [r2, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f7fc fdb6 	bl	8003cc8 <lwip_htonl>
 800715c:	4603      	mov	r3, r0
 800715e:	6063      	str	r3, [r4, #4]
 8007160:	6863      	ldr	r3, [r4, #4]
 8007162:	4a45      	ldr	r2, [pc, #276]	@ (8007278 <tcp_input+0x2ac>)
 8007164:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007166:	4b3c      	ldr	r3, [pc, #240]	@ (8007258 <tcp_input+0x28c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	4a3a      	ldr	r2, [pc, #232]	@ (8007258 <tcp_input+0x28c>)
 800716e:	6814      	ldr	r4, [r2, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f7fc fda9 	bl	8003cc8 <lwip_htonl>
 8007176:	4603      	mov	r3, r0
 8007178:	60a3      	str	r3, [r4, #8]
 800717a:	68a3      	ldr	r3, [r4, #8]
 800717c:	4a3f      	ldr	r2, [pc, #252]	@ (800727c <tcp_input+0x2b0>)
 800717e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007180:	4b35      	ldr	r3, [pc, #212]	@ (8007258 <tcp_input+0x28c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	89db      	ldrh	r3, [r3, #14]
 8007186:	b29b      	uxth	r3, r3
 8007188:	4a33      	ldr	r2, [pc, #204]	@ (8007258 <tcp_input+0x28c>)
 800718a:	6814      	ldr	r4, [r2, #0]
 800718c:	4618      	mov	r0, r3
 800718e:	f7fc fd85 	bl	8003c9c <lwip_htons>
 8007192:	4603      	mov	r3, r0
 8007194:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007196:	4b30      	ldr	r3, [pc, #192]	@ (8007258 <tcp_input+0x28c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	899b      	ldrh	r3, [r3, #12]
 800719c:	b29b      	uxth	r3, r3
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fc fd7c 	bl	8003c9c <lwip_htons>
 80071a4:	4603      	mov	r3, r0
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	4b34      	ldr	r3, [pc, #208]	@ (8007280 <tcp_input+0x2b4>)
 80071b0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	891a      	ldrh	r2, [r3, #8]
 80071b6:	4b33      	ldr	r3, [pc, #204]	@ (8007284 <tcp_input+0x2b8>)
 80071b8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80071ba:	4b31      	ldr	r3, [pc, #196]	@ (8007280 <tcp_input+0x2b4>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00c      	beq.n	80071e0 <tcp_input+0x214>
    tcplen++;
 80071c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007284 <tcp_input+0x2b8>)
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	3301      	adds	r3, #1
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	4b2d      	ldr	r3, [pc, #180]	@ (8007284 <tcp_input+0x2b8>)
 80071d0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	891a      	ldrh	r2, [r3, #8]
 80071d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007284 <tcp_input+0x2b8>)
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	f200 82e6 	bhi.w	80077ac <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80071e4:	4b28      	ldr	r3, [pc, #160]	@ (8007288 <tcp_input+0x2bc>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	e09d      	b.n	8007328 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	7d1b      	ldrb	r3, [r3, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <tcp_input+0x234>
 80071f4:	4b15      	ldr	r3, [pc, #84]	@ (800724c <tcp_input+0x280>)
 80071f6:	22fb      	movs	r2, #251	@ 0xfb
 80071f8:	4924      	ldr	r1, [pc, #144]	@ (800728c <tcp_input+0x2c0>)
 80071fa:	4816      	ldr	r0, [pc, #88]	@ (8007254 <tcp_input+0x288>)
 80071fc:	f006 fe1a 	bl	800de34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	7d1b      	ldrb	r3, [r3, #20]
 8007204:	2b0a      	cmp	r3, #10
 8007206:	d105      	bne.n	8007214 <tcp_input+0x248>
 8007208:	4b10      	ldr	r3, [pc, #64]	@ (800724c <tcp_input+0x280>)
 800720a:	22fc      	movs	r2, #252	@ 0xfc
 800720c:	4920      	ldr	r1, [pc, #128]	@ (8007290 <tcp_input+0x2c4>)
 800720e:	4811      	ldr	r0, [pc, #68]	@ (8007254 <tcp_input+0x288>)
 8007210:	f006 fe10 	bl	800de34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	7d1b      	ldrb	r3, [r3, #20]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d105      	bne.n	8007228 <tcp_input+0x25c>
 800721c:	4b0b      	ldr	r3, [pc, #44]	@ (800724c <tcp_input+0x280>)
 800721e:	22fd      	movs	r2, #253	@ 0xfd
 8007220:	491c      	ldr	r1, [pc, #112]	@ (8007294 <tcp_input+0x2c8>)
 8007222:	480c      	ldr	r0, [pc, #48]	@ (8007254 <tcp_input+0x288>)
 8007224:	f006 fe06 	bl	800de34 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	7a1b      	ldrb	r3, [r3, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d033      	beq.n	8007298 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	7a1a      	ldrb	r2, [r3, #8]
 8007234:	4b09      	ldr	r3, [pc, #36]	@ (800725c <tcp_input+0x290>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800723c:	3301      	adds	r3, #1
 800723e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007240:	429a      	cmp	r2, r3
 8007242:	d029      	beq.n	8007298 <tcp_input+0x2cc>
      prev = pcb;
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	61bb      	str	r3, [r7, #24]
      continue;
 8007248:	e06b      	b.n	8007322 <tcp_input+0x356>
 800724a:	bf00      	nop
 800724c:	0800feb0 	.word	0x0800feb0
 8007250:	0800fee4 	.word	0x0800fee4
 8007254:	0800fefc 	.word	0x0800fefc
 8007258:	20008278 	.word	0x20008278
 800725c:	20004ce0 	.word	0x20004ce0
 8007260:	2000827c 	.word	0x2000827c
 8007264:	20008280 	.word	0x20008280
 8007268:	2000827e 	.word	0x2000827e
 800726c:	0800ff24 	.word	0x0800ff24
 8007270:	0800ff34 	.word	0x0800ff34
 8007274:	0800ff40 	.word	0x0800ff40
 8007278:	20008288 	.word	0x20008288
 800727c:	2000828c 	.word	0x2000828c
 8007280:	20008294 	.word	0x20008294
 8007284:	20008292 	.word	0x20008292
 8007288:	2000825c 	.word	0x2000825c
 800728c:	0800ff60 	.word	0x0800ff60
 8007290:	0800ff88 	.word	0x0800ff88
 8007294:	0800ffb4 	.word	0x0800ffb4
    }

    if (pcb->remote_port == tcphdr->src &&
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	8b1a      	ldrh	r2, [r3, #24]
 800729c:	4b72      	ldr	r3, [pc, #456]	@ (8007468 <tcp_input+0x49c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d13a      	bne.n	800731e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	8ada      	ldrh	r2, [r3, #22]
 80072ac:	4b6e      	ldr	r3, [pc, #440]	@ (8007468 <tcp_input+0x49c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	885b      	ldrh	r3, [r3, #2]
 80072b2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d132      	bne.n	800731e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	4b6b      	ldr	r3, [pc, #428]	@ (800746c <tcp_input+0x4a0>)
 80072be:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d12c      	bne.n	800731e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	4b68      	ldr	r3, [pc, #416]	@ (800746c <tcp_input+0x4a0>)
 80072ca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d126      	bne.n	800731e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d106      	bne.n	80072e8 <tcp_input+0x31c>
 80072da:	4b65      	ldr	r3, [pc, #404]	@ (8007470 <tcp_input+0x4a4>)
 80072dc:	f240 120d 	movw	r2, #269	@ 0x10d
 80072e0:	4964      	ldr	r1, [pc, #400]	@ (8007474 <tcp_input+0x4a8>)
 80072e2:	4865      	ldr	r0, [pc, #404]	@ (8007478 <tcp_input+0x4ac>)
 80072e4:	f006 fda6 	bl	800de34 <iprintf>
      if (prev != NULL) {
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <tcp_input+0x338>
        prev->next = pcb->next;
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80072f6:	4b61      	ldr	r3, [pc, #388]	@ (800747c <tcp_input+0x4b0>)
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80072fe:	4a5f      	ldr	r2, [pc, #380]	@ (800747c <tcp_input+0x4b0>)
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	429a      	cmp	r2, r3
 800730c:	d111      	bne.n	8007332 <tcp_input+0x366>
 800730e:	4b58      	ldr	r3, [pc, #352]	@ (8007470 <tcp_input+0x4a4>)
 8007310:	f240 1215 	movw	r2, #277	@ 0x115
 8007314:	495a      	ldr	r1, [pc, #360]	@ (8007480 <tcp_input+0x4b4>)
 8007316:	4858      	ldr	r0, [pc, #352]	@ (8007478 <tcp_input+0x4ac>)
 8007318:	f006 fd8c 	bl	800de34 <iprintf>
      break;
 800731c:	e009      	b.n	8007332 <tcp_input+0x366>
    }
    prev = pcb;
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f47f af5e 	bne.w	80071ec <tcp_input+0x220>
 8007330:	e000      	b.n	8007334 <tcp_input+0x368>
      break;
 8007332:	bf00      	nop
  }

  if (pcb == NULL) {
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f040 80aa 	bne.w	8007490 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800733c:	4b51      	ldr	r3, [pc, #324]	@ (8007484 <tcp_input+0x4b8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	61fb      	str	r3, [r7, #28]
 8007342:	e03f      	b.n	80073c4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	7d1b      	ldrb	r3, [r3, #20]
 8007348:	2b0a      	cmp	r3, #10
 800734a:	d006      	beq.n	800735a <tcp_input+0x38e>
 800734c:	4b48      	ldr	r3, [pc, #288]	@ (8007470 <tcp_input+0x4a4>)
 800734e:	f240 121f 	movw	r2, #287	@ 0x11f
 8007352:	494d      	ldr	r1, [pc, #308]	@ (8007488 <tcp_input+0x4bc>)
 8007354:	4848      	ldr	r0, [pc, #288]	@ (8007478 <tcp_input+0x4ac>)
 8007356:	f006 fd6d 	bl	800de34 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	7a1b      	ldrb	r3, [r3, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	7a1a      	ldrb	r2, [r3, #8]
 8007366:	4b41      	ldr	r3, [pc, #260]	@ (800746c <tcp_input+0x4a0>)
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800736e:	3301      	adds	r3, #1
 8007370:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007372:	429a      	cmp	r2, r3
 8007374:	d122      	bne.n	80073bc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	8b1a      	ldrh	r2, [r3, #24]
 800737a:	4b3b      	ldr	r3, [pc, #236]	@ (8007468 <tcp_input+0x49c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b29b      	uxth	r3, r3
 8007382:	429a      	cmp	r2, r3
 8007384:	d11b      	bne.n	80073be <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	8ada      	ldrh	r2, [r3, #22]
 800738a:	4b37      	ldr	r3, [pc, #220]	@ (8007468 <tcp_input+0x49c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	885b      	ldrh	r3, [r3, #2]
 8007390:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007392:	429a      	cmp	r2, r3
 8007394:	d113      	bne.n	80073be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	4b34      	ldr	r3, [pc, #208]	@ (800746c <tcp_input+0x4a0>)
 800739c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800739e:	429a      	cmp	r2, r3
 80073a0:	d10d      	bne.n	80073be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4b31      	ldr	r3, [pc, #196]	@ (800746c <tcp_input+0x4a0>)
 80073a8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d107      	bne.n	80073be <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80073ae:	69f8      	ldr	r0, [r7, #28]
 80073b0:	f000 fb56 	bl	8007a60 <tcp_timewait_input>
        }
        pbuf_free(p);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7fd ffcf 	bl	8005358 <pbuf_free>
        return;
 80073ba:	e1fd      	b.n	80077b8 <tcp_input+0x7ec>
        continue;
 80073bc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	61fb      	str	r3, [r7, #28]
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1bc      	bne.n	8007344 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80073ce:	4b2f      	ldr	r3, [pc, #188]	@ (800748c <tcp_input+0x4c0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e02a      	b.n	800742c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	7a1b      	ldrb	r3, [r3, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00c      	beq.n	80073f8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	7a1a      	ldrb	r2, [r3, #8]
 80073e2:	4b22      	ldr	r3, [pc, #136]	@ (800746c <tcp_input+0x4a0>)
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80073ea:	3301      	adds	r3, #1
 80073ec:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d002      	beq.n	80073f8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	61bb      	str	r3, [r7, #24]
        continue;
 80073f6:	e016      	b.n	8007426 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	8ada      	ldrh	r2, [r3, #22]
 80073fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007468 <tcp_input+0x49c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	885b      	ldrh	r3, [r3, #2]
 8007402:	b29b      	uxth	r3, r3
 8007404:	429a      	cmp	r2, r3
 8007406:	d10c      	bne.n	8007422 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	4b17      	ldr	r3, [pc, #92]	@ (800746c <tcp_input+0x4a0>)
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	429a      	cmp	r2, r3
 8007412:	d00f      	beq.n	8007434 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00d      	beq.n	8007436 <tcp_input+0x46a>
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d009      	beq.n	8007436 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1d1      	bne.n	80073d6 <tcp_input+0x40a>
 8007432:	e000      	b.n	8007436 <tcp_input+0x46a>
            break;
 8007434:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d029      	beq.n	8007490 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800744a:	4b10      	ldr	r3, [pc, #64]	@ (800748c <tcp_input+0x4c0>)
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007452:	4a0e      	ldr	r2, [pc, #56]	@ (800748c <tcp_input+0x4c0>)
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007458:	6978      	ldr	r0, [r7, #20]
 800745a:	f000 fa03 	bl	8007864 <tcp_listen_input>
      }
      pbuf_free(p);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fd ff7a 	bl	8005358 <pbuf_free>
      return;
 8007464:	e1a8      	b.n	80077b8 <tcp_input+0x7ec>
 8007466:	bf00      	nop
 8007468:	20008278 	.word	0x20008278
 800746c:	20004ce0 	.word	0x20004ce0
 8007470:	0800feb0 	.word	0x0800feb0
 8007474:	0800ffdc 	.word	0x0800ffdc
 8007478:	0800fefc 	.word	0x0800fefc
 800747c:	2000825c 	.word	0x2000825c
 8007480:	08010008 	.word	0x08010008
 8007484:	20008260 	.word	0x20008260
 8007488:	08010034 	.word	0x08010034
 800748c:	20008258 	.word	0x20008258
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 8158 	beq.w	8007748 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007498:	4b95      	ldr	r3, [pc, #596]	@ (80076f0 <tcp_input+0x724>)
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	891a      	ldrh	r2, [r3, #8]
 80074a2:	4b93      	ldr	r3, [pc, #588]	@ (80076f0 <tcp_input+0x724>)
 80074a4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80074a6:	4a92      	ldr	r2, [pc, #584]	@ (80076f0 <tcp_input+0x724>)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80074ac:	4b91      	ldr	r3, [pc, #580]	@ (80076f4 <tcp_input+0x728>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a8f      	ldr	r2, [pc, #572]	@ (80076f0 <tcp_input+0x724>)
 80074b2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80074b4:	4b90      	ldr	r3, [pc, #576]	@ (80076f8 <tcp_input+0x72c>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80074ba:	4b90      	ldr	r3, [pc, #576]	@ (80076fc <tcp_input+0x730>)
 80074bc:	2200      	movs	r2, #0
 80074be:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80074c0:	4b8f      	ldr	r3, [pc, #572]	@ (8007700 <tcp_input+0x734>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80074c6:	4b8f      	ldr	r3, [pc, #572]	@ (8007704 <tcp_input+0x738>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d006      	beq.n	80074e0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	7b5b      	ldrb	r3, [r3, #13]
 80074d6:	f043 0301 	orr.w	r3, r3, #1
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d017      	beq.n	8007518 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80074e8:	69f8      	ldr	r0, [r7, #28]
 80074ea:	f7ff f929 	bl	8006740 <tcp_process_refused_data>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f113 0f0d 	cmn.w	r3, #13
 80074f4:	d007      	beq.n	8007506 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00c      	beq.n	8007518 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80074fe:	4b82      	ldr	r3, [pc, #520]	@ (8007708 <tcp_input+0x73c>)
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d008      	beq.n	8007518 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800750a:	2b00      	cmp	r3, #0
 800750c:	f040 80e3 	bne.w	80076d6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007510:	69f8      	ldr	r0, [r7, #28]
 8007512:	f003 f9a7 	bl	800a864 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007516:	e0de      	b.n	80076d6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007518:	4a7c      	ldr	r2, [pc, #496]	@ (800770c <tcp_input+0x740>)
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800751e:	69f8      	ldr	r0, [r7, #28]
 8007520:	f000 fb18 	bl	8007b54 <tcp_process>
 8007524:	4603      	mov	r3, r0
 8007526:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007528:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800752c:	f113 0f0d 	cmn.w	r3, #13
 8007530:	f000 80d3 	beq.w	80076da <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007534:	4b71      	ldr	r3, [pc, #452]	@ (80076fc <tcp_input+0x730>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d015      	beq.n	800756c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007546:	2b00      	cmp	r3, #0
 8007548:	d008      	beq.n	800755c <tcp_input+0x590>
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007550:	69fa      	ldr	r2, [r7, #28]
 8007552:	6912      	ldr	r2, [r2, #16]
 8007554:	f06f 010d 	mvn.w	r1, #13
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800755c:	69f9      	ldr	r1, [r7, #28]
 800755e:	486c      	ldr	r0, [pc, #432]	@ (8007710 <tcp_input+0x744>)
 8007560:	f7ff fbbc 	bl	8006cdc <tcp_pcb_remove>
        tcp_free(pcb);
 8007564:	69f8      	ldr	r0, [r7, #28]
 8007566:	f7fe f9a7 	bl	80058b8 <tcp_free>
 800756a:	e0da      	b.n	8007722 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007570:	4b63      	ldr	r3, [pc, #396]	@ (8007700 <tcp_input+0x734>)
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01d      	beq.n	80075b4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007578:	4b61      	ldr	r3, [pc, #388]	@ (8007700 <tcp_input+0x734>)
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00a      	beq.n	800759e <tcp_input+0x5d2>
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	6910      	ldr	r0, [r2, #16]
 8007592:	89fa      	ldrh	r2, [r7, #14]
 8007594:	69f9      	ldr	r1, [r7, #28]
 8007596:	4798      	blx	r3
 8007598:	4603      	mov	r3, r0
 800759a:	74fb      	strb	r3, [r7, #19]
 800759c:	e001      	b.n	80075a2 <tcp_input+0x5d6>
 800759e:	2300      	movs	r3, #0
 80075a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80075a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80075a6:	f113 0f0d 	cmn.w	r3, #13
 80075aa:	f000 8098 	beq.w	80076de <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80075ae:	4b54      	ldr	r3, [pc, #336]	@ (8007700 <tcp_input+0x734>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80075b4:	69f8      	ldr	r0, [r7, #28]
 80075b6:	f000 f915 	bl	80077e4 <tcp_input_delayed_close>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f040 8090 	bne.w	80076e2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80075c2:	4b4d      	ldr	r3, [pc, #308]	@ (80076f8 <tcp_input+0x72c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d041      	beq.n	800764e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d006      	beq.n	80075e0 <tcp_input+0x614>
 80075d2:	4b50      	ldr	r3, [pc, #320]	@ (8007714 <tcp_input+0x748>)
 80075d4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80075d8:	494f      	ldr	r1, [pc, #316]	@ (8007718 <tcp_input+0x74c>)
 80075da:	4850      	ldr	r0, [pc, #320]	@ (800771c <tcp_input+0x750>)
 80075dc:	f006 fc2a 	bl	800de34 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	8b5b      	ldrh	r3, [r3, #26]
 80075e4:	f003 0310 	and.w	r3, r3, #16
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80075ec:	4b42      	ldr	r3, [pc, #264]	@ (80076f8 <tcp_input+0x72c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fd feb1 	bl	8005358 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80075f6:	69f8      	ldr	r0, [r7, #28]
 80075f8:	f7fe fc46 	bl	8005e88 <tcp_abort>
            goto aborted;
 80075fc:	e091      	b.n	8007722 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00c      	beq.n	8007622 <tcp_input+0x656>
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	6918      	ldr	r0, [r3, #16]
 8007612:	4b39      	ldr	r3, [pc, #228]	@ (80076f8 <tcp_input+0x72c>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	2300      	movs	r3, #0
 8007618:	69f9      	ldr	r1, [r7, #28]
 800761a:	47a0      	blx	r4
 800761c:	4603      	mov	r3, r0
 800761e:	74fb      	strb	r3, [r7, #19]
 8007620:	e008      	b.n	8007634 <tcp_input+0x668>
 8007622:	4b35      	ldr	r3, [pc, #212]	@ (80076f8 <tcp_input+0x72c>)
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	2300      	movs	r3, #0
 8007628:	69f9      	ldr	r1, [r7, #28]
 800762a:	2000      	movs	r0, #0
 800762c:	f7ff f95e 	bl	80068ec <tcp_recv_null>
 8007630:	4603      	mov	r3, r0
 8007632:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007634:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007638:	f113 0f0d 	cmn.w	r3, #13
 800763c:	d053      	beq.n	80076e6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800763e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007646:	4b2c      	ldr	r3, [pc, #176]	@ (80076f8 <tcp_input+0x72c>)
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800764e:	4b2b      	ldr	r3, [pc, #172]	@ (80076fc <tcp_input+0x730>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d030      	beq.n	80076bc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800765e:	2b00      	cmp	r3, #0
 8007660:	d009      	beq.n	8007676 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007666:	7b5a      	ldrb	r2, [r3, #13]
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800766c:	f042 0220 	orr.w	r2, r2, #32
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	735a      	strb	r2, [r3, #13]
 8007674:	e022      	b.n	80076bc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800767a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800767e:	d005      	beq.n	800768c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007684:	3301      	adds	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00b      	beq.n	80076ae <tcp_input+0x6e2>
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	6918      	ldr	r0, [r3, #16]
 80076a0:	2300      	movs	r3, #0
 80076a2:	2200      	movs	r2, #0
 80076a4:	69f9      	ldr	r1, [r7, #28]
 80076a6:	47a0      	blx	r4
 80076a8:	4603      	mov	r3, r0
 80076aa:	74fb      	strb	r3, [r7, #19]
 80076ac:	e001      	b.n	80076b2 <tcp_input+0x6e6>
 80076ae:	2300      	movs	r3, #0
 80076b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80076b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80076b6:	f113 0f0d 	cmn.w	r3, #13
 80076ba:	d016      	beq.n	80076ea <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80076bc:	4b13      	ldr	r3, [pc, #76]	@ (800770c <tcp_input+0x740>)
 80076be:	2200      	movs	r2, #0
 80076c0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80076c2:	69f8      	ldr	r0, [r7, #28]
 80076c4:	f000 f88e 	bl	80077e4 <tcp_input_delayed_close>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d128      	bne.n	8007720 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80076ce:	69f8      	ldr	r0, [r7, #28]
 80076d0:	f002 fac2 	bl	8009c58 <tcp_output>
 80076d4:	e025      	b.n	8007722 <tcp_input+0x756>
        goto aborted;
 80076d6:	bf00      	nop
 80076d8:	e023      	b.n	8007722 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80076da:	bf00      	nop
 80076dc:	e021      	b.n	8007722 <tcp_input+0x756>
              goto aborted;
 80076de:	bf00      	nop
 80076e0:	e01f      	b.n	8007722 <tcp_input+0x756>
          goto aborted;
 80076e2:	bf00      	nop
 80076e4:	e01d      	b.n	8007722 <tcp_input+0x756>
            goto aborted;
 80076e6:	bf00      	nop
 80076e8:	e01b      	b.n	8007722 <tcp_input+0x756>
              goto aborted;
 80076ea:	bf00      	nop
 80076ec:	e019      	b.n	8007722 <tcp_input+0x756>
 80076ee:	bf00      	nop
 80076f0:	20008268 	.word	0x20008268
 80076f4:	20008278 	.word	0x20008278
 80076f8:	20008298 	.word	0x20008298
 80076fc:	20008295 	.word	0x20008295
 8007700:	20008290 	.word	0x20008290
 8007704:	20008294 	.word	0x20008294
 8007708:	20008292 	.word	0x20008292
 800770c:	2000829c 	.word	0x2000829c
 8007710:	2000825c 	.word	0x2000825c
 8007714:	0800feb0 	.word	0x0800feb0
 8007718:	08010064 	.word	0x08010064
 800771c:	0800fefc 	.word	0x0800fefc
          goto aborted;
 8007720:	bf00      	nop
    tcp_input_pcb = NULL;
 8007722:	4b27      	ldr	r3, [pc, #156]	@ (80077c0 <tcp_input+0x7f4>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007728:	4b26      	ldr	r3, [pc, #152]	@ (80077c4 <tcp_input+0x7f8>)
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800772e:	4b26      	ldr	r3, [pc, #152]	@ (80077c8 <tcp_input+0x7fc>)
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d03f      	beq.n	80077b6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007736:	4b24      	ldr	r3, [pc, #144]	@ (80077c8 <tcp_input+0x7fc>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	4618      	mov	r0, r3
 800773c:	f7fd fe0c 	bl	8005358 <pbuf_free>
      inseg.p = NULL;
 8007740:	4b21      	ldr	r3, [pc, #132]	@ (80077c8 <tcp_input+0x7fc>)
 8007742:	2200      	movs	r2, #0
 8007744:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007746:	e036      	b.n	80077b6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007748:	4b20      	ldr	r3, [pc, #128]	@ (80077cc <tcp_input+0x800>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	899b      	ldrh	r3, [r3, #12]
 800774e:	b29b      	uxth	r3, r3
 8007750:	4618      	mov	r0, r3
 8007752:	f7fc faa3 	bl	8003c9c <lwip_htons>
 8007756:	4603      	mov	r3, r0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	f003 0304 	and.w	r3, r3, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	d118      	bne.n	8007794 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007762:	4b1b      	ldr	r3, [pc, #108]	@ (80077d0 <tcp_input+0x804>)
 8007764:	6819      	ldr	r1, [r3, #0]
 8007766:	4b1b      	ldr	r3, [pc, #108]	@ (80077d4 <tcp_input+0x808>)
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	4b1a      	ldr	r3, [pc, #104]	@ (80077d8 <tcp_input+0x80c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007772:	4b16      	ldr	r3, [pc, #88]	@ (80077cc <tcp_input+0x800>)
 8007774:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007776:	885b      	ldrh	r3, [r3, #2]
 8007778:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800777a:	4a14      	ldr	r2, [pc, #80]	@ (80077cc <tcp_input+0x800>)
 800777c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800777e:	8812      	ldrh	r2, [r2, #0]
 8007780:	b292      	uxth	r2, r2
 8007782:	9202      	str	r2, [sp, #8]
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	4b15      	ldr	r3, [pc, #84]	@ (80077dc <tcp_input+0x810>)
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	4b15      	ldr	r3, [pc, #84]	@ (80077e0 <tcp_input+0x814>)
 800778c:	4602      	mov	r2, r0
 800778e:	2000      	movs	r0, #0
 8007790:	f003 f816 	bl	800a7c0 <tcp_rst>
    pbuf_free(p);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7fd fddf 	bl	8005358 <pbuf_free>
  return;
 800779a:	e00c      	b.n	80077b6 <tcp_input+0x7ea>
    goto dropped;
 800779c:	bf00      	nop
 800779e:	e006      	b.n	80077ae <tcp_input+0x7e2>
    goto dropped;
 80077a0:	bf00      	nop
 80077a2:	e004      	b.n	80077ae <tcp_input+0x7e2>
    goto dropped;
 80077a4:	bf00      	nop
 80077a6:	e002      	b.n	80077ae <tcp_input+0x7e2>
      goto dropped;
 80077a8:	bf00      	nop
 80077aa:	e000      	b.n	80077ae <tcp_input+0x7e2>
      goto dropped;
 80077ac:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fd fdd2 	bl	8005358 <pbuf_free>
 80077b4:	e000      	b.n	80077b8 <tcp_input+0x7ec>
  return;
 80077b6:	bf00      	nop
}
 80077b8:	3724      	adds	r7, #36	@ 0x24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd90      	pop	{r4, r7, pc}
 80077be:	bf00      	nop
 80077c0:	2000829c 	.word	0x2000829c
 80077c4:	20008298 	.word	0x20008298
 80077c8:	20008268 	.word	0x20008268
 80077cc:	20008278 	.word	0x20008278
 80077d0:	2000828c 	.word	0x2000828c
 80077d4:	20008292 	.word	0x20008292
 80077d8:	20008288 	.word	0x20008288
 80077dc:	20004cf0 	.word	0x20004cf0
 80077e0:	20004cf4 	.word	0x20004cf4

080077e4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <tcp_input_delayed_close+0x1c>
 80077f2:	4b17      	ldr	r3, [pc, #92]	@ (8007850 <tcp_input_delayed_close+0x6c>)
 80077f4:	f240 225a 	movw	r2, #602	@ 0x25a
 80077f8:	4916      	ldr	r1, [pc, #88]	@ (8007854 <tcp_input_delayed_close+0x70>)
 80077fa:	4817      	ldr	r0, [pc, #92]	@ (8007858 <tcp_input_delayed_close+0x74>)
 80077fc:	f006 fb1a 	bl	800de34 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007800:	4b16      	ldr	r3, [pc, #88]	@ (800785c <tcp_input_delayed_close+0x78>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01c      	beq.n	8007846 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	8b5b      	ldrh	r3, [r3, #26]
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10d      	bne.n	8007834 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781e:	2b00      	cmp	r3, #0
 8007820:	d008      	beq.n	8007834 <tcp_input_delayed_close+0x50>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6912      	ldr	r2, [r2, #16]
 800782c:	f06f 010e 	mvn.w	r1, #14
 8007830:	4610      	mov	r0, r2
 8007832:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007834:	6879      	ldr	r1, [r7, #4]
 8007836:	480a      	ldr	r0, [pc, #40]	@ (8007860 <tcp_input_delayed_close+0x7c>)
 8007838:	f7ff fa50 	bl	8006cdc <tcp_pcb_remove>
    tcp_free(pcb);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7fe f83b 	bl	80058b8 <tcp_free>
    return 1;
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	0800feb0 	.word	0x0800feb0
 8007854:	08010080 	.word	0x08010080
 8007858:	0800fefc 	.word	0x0800fefc
 800785c:	20008295 	.word	0x20008295
 8007860:	2000825c 	.word	0x2000825c

08007864 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007864:	b590      	push	{r4, r7, lr}
 8007866:	b08b      	sub	sp, #44	@ 0x2c
 8007868:	af04      	add	r7, sp, #16
 800786a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800786c:	4b6f      	ldr	r3, [pc, #444]	@ (8007a2c <tcp_listen_input+0x1c8>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b00      	cmp	r3, #0
 8007876:	f040 80d2 	bne.w	8007a1e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d106      	bne.n	800788e <tcp_listen_input+0x2a>
 8007880:	4b6b      	ldr	r3, [pc, #428]	@ (8007a30 <tcp_listen_input+0x1cc>)
 8007882:	f240 2281 	movw	r2, #641	@ 0x281
 8007886:	496b      	ldr	r1, [pc, #428]	@ (8007a34 <tcp_listen_input+0x1d0>)
 8007888:	486b      	ldr	r0, [pc, #428]	@ (8007a38 <tcp_listen_input+0x1d4>)
 800788a:	f006 fad3 	bl	800de34 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800788e:	4b67      	ldr	r3, [pc, #412]	@ (8007a2c <tcp_listen_input+0x1c8>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	f003 0310 	and.w	r3, r3, #16
 8007896:	2b00      	cmp	r3, #0
 8007898:	d019      	beq.n	80078ce <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800789a:	4b68      	ldr	r3, [pc, #416]	@ (8007a3c <tcp_listen_input+0x1d8>)
 800789c:	6819      	ldr	r1, [r3, #0]
 800789e:	4b68      	ldr	r3, [pc, #416]	@ (8007a40 <tcp_listen_input+0x1dc>)
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	4b67      	ldr	r3, [pc, #412]	@ (8007a44 <tcp_listen_input+0x1e0>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078aa:	4b67      	ldr	r3, [pc, #412]	@ (8007a48 <tcp_listen_input+0x1e4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078ae:	885b      	ldrh	r3, [r3, #2]
 80078b0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078b2:	4a65      	ldr	r2, [pc, #404]	@ (8007a48 <tcp_listen_input+0x1e4>)
 80078b4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078b6:	8812      	ldrh	r2, [r2, #0]
 80078b8:	b292      	uxth	r2, r2
 80078ba:	9202      	str	r2, [sp, #8]
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	4b63      	ldr	r3, [pc, #396]	@ (8007a4c <tcp_listen_input+0x1e8>)
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	4b63      	ldr	r3, [pc, #396]	@ (8007a50 <tcp_listen_input+0x1ec>)
 80078c4:	4602      	mov	r2, r0
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f002 ff7a 	bl	800a7c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80078cc:	e0a9      	b.n	8007a22 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80078ce:	4b57      	ldr	r3, [pc, #348]	@ (8007a2c <tcp_listen_input+0x1c8>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80a3 	beq.w	8007a22 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7d5b      	ldrb	r3, [r3, #21]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff f927 	bl	8006b34 <tcp_alloc>
 80078e6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d111      	bne.n	8007912 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <tcp_listen_input+0xa8>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6910      	ldr	r0, [r2, #16]
 80078fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007902:	2100      	movs	r1, #0
 8007904:	4798      	blx	r3
 8007906:	4603      	mov	r3, r0
 8007908:	73bb      	strb	r3, [r7, #14]
      return;
 800790a:	e08b      	b.n	8007a24 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800790c:	23f0      	movs	r3, #240	@ 0xf0
 800790e:	73bb      	strb	r3, [r7, #14]
      return;
 8007910:	e088      	b.n	8007a24 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007912:	4b50      	ldr	r3, [pc, #320]	@ (8007a54 <tcp_listen_input+0x1f0>)
 8007914:	695a      	ldr	r2, [r3, #20]
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800791a:	4b4e      	ldr	r3, [pc, #312]	@ (8007a54 <tcp_listen_input+0x1f0>)
 800791c:	691a      	ldr	r2, [r3, #16]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	8ada      	ldrh	r2, [r3, #22]
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800792a:	4b47      	ldr	r3, [pc, #284]	@ (8007a48 <tcp_listen_input+0x1e4>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b29a      	uxth	r2, r3
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2203      	movs	r2, #3
 800793a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800793c:	4b41      	ldr	r3, [pc, #260]	@ (8007a44 <tcp_listen_input+0x1e0>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800794e:	6978      	ldr	r0, [r7, #20]
 8007950:	f7ff fa58 	bl	8006e04 <tcp_next_iss>
 8007954:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800796e:	4b35      	ldr	r3, [pc, #212]	@ (8007a44 <tcp_listen_input+0x1e0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	1e5a      	subs	r2, r3, #1
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7a5b      	ldrb	r3, [r3, #9]
 800798a:	f003 030c 	and.w	r3, r3, #12
 800798e:	b2da      	uxtb	r2, r3
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	7a1a      	ldrb	r2, [r3, #8]
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800799c:	4b2e      	ldr	r3, [pc, #184]	@ (8007a58 <tcp_listen_input+0x1f4>)
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	60da      	str	r2, [r3, #12]
 80079a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007a58 <tcp_listen_input+0x1f4>)
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	f003 f8cb 	bl	800ab44 <tcp_timer_needed>
 80079ae:	4b2b      	ldr	r3, [pc, #172]	@ (8007a5c <tcp_listen_input+0x1f8>)
 80079b0:	2201      	movs	r2, #1
 80079b2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80079b4:	6978      	ldr	r0, [r7, #20]
 80079b6:	f001 fd8b 	bl	80094d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80079ba:	4b23      	ldr	r3, [pc, #140]	@ (8007a48 <tcp_listen_input+0x1e4>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	89db      	ldrh	r3, [r3, #14]
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	3304      	adds	r3, #4
 80079dc:	4618      	mov	r0, r3
 80079de:	f004 ff3d 	bl	800c85c <ip4_route>
 80079e2:	4601      	mov	r1, r0
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	3304      	adds	r3, #4
 80079e8:	461a      	mov	r2, r3
 80079ea:	4620      	mov	r0, r4
 80079ec:	f7ff fa30 	bl	8006e50 <tcp_eff_send_mss_netif>
 80079f0:	4603      	mov	r3, r0
 80079f2:	461a      	mov	r2, r3
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80079f8:	2112      	movs	r1, #18
 80079fa:	6978      	ldr	r0, [r7, #20]
 80079fc:	f002 f83e 	bl	8009a7c <tcp_enqueue_flags>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d004      	beq.n	8007a16 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	6978      	ldr	r0, [r7, #20]
 8007a10:	f7fe f97c 	bl	8005d0c <tcp_abandon>
      return;
 8007a14:	e006      	b.n	8007a24 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007a16:	6978      	ldr	r0, [r7, #20]
 8007a18:	f002 f91e 	bl	8009c58 <tcp_output>
  return;
 8007a1c:	e001      	b.n	8007a22 <tcp_listen_input+0x1be>
    return;
 8007a1e:	bf00      	nop
 8007a20:	e000      	b.n	8007a24 <tcp_listen_input+0x1c0>
  return;
 8007a22:	bf00      	nop
}
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd90      	pop	{r4, r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20008294 	.word	0x20008294
 8007a30:	0800feb0 	.word	0x0800feb0
 8007a34:	080100a8 	.word	0x080100a8
 8007a38:	0800fefc 	.word	0x0800fefc
 8007a3c:	2000828c 	.word	0x2000828c
 8007a40:	20008292 	.word	0x20008292
 8007a44:	20008288 	.word	0x20008288
 8007a48:	20008278 	.word	0x20008278
 8007a4c:	20004cf0 	.word	0x20004cf0
 8007a50:	20004cf4 	.word	0x20004cf4
 8007a54:	20004ce0 	.word	0x20004ce0
 8007a58:	2000825c 	.word	0x2000825c
 8007a5c:	20008264 	.word	0x20008264

08007a60 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af04      	add	r7, sp, #16
 8007a66:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007a68:	4b2f      	ldr	r3, [pc, #188]	@ (8007b28 <tcp_timewait_input+0xc8>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d153      	bne.n	8007b1c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d106      	bne.n	8007a88 <tcp_timewait_input+0x28>
 8007a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8007b2c <tcp_timewait_input+0xcc>)
 8007a7c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8007a80:	492b      	ldr	r1, [pc, #172]	@ (8007b30 <tcp_timewait_input+0xd0>)
 8007a82:	482c      	ldr	r0, [pc, #176]	@ (8007b34 <tcp_timewait_input+0xd4>)
 8007a84:	f006 f9d6 	bl	800de34 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007a88:	4b27      	ldr	r3, [pc, #156]	@ (8007b28 <tcp_timewait_input+0xc8>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d02a      	beq.n	8007aea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007a94:	4b28      	ldr	r3, [pc, #160]	@ (8007b38 <tcp_timewait_input+0xd8>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	db2d      	blt.n	8007afe <tcp_timewait_input+0x9e>
 8007aa2:	4b25      	ldr	r3, [pc, #148]	@ (8007b38 <tcp_timewait_input+0xd8>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007aae:	440b      	add	r3, r1
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dc23      	bgt.n	8007afe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ab6:	4b21      	ldr	r3, [pc, #132]	@ (8007b3c <tcp_timewait_input+0xdc>)
 8007ab8:	6819      	ldr	r1, [r3, #0]
 8007aba:	4b21      	ldr	r3, [pc, #132]	@ (8007b40 <tcp_timewait_input+0xe0>)
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b38 <tcp_timewait_input+0xd8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8007b44 <tcp_timewait_input+0xe4>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007aca:	885b      	ldrh	r3, [r3, #2]
 8007acc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ace:	4a1d      	ldr	r2, [pc, #116]	@ (8007b44 <tcp_timewait_input+0xe4>)
 8007ad0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ad2:	8812      	ldrh	r2, [r2, #0]
 8007ad4:	b292      	uxth	r2, r2
 8007ad6:	9202      	str	r2, [sp, #8]
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	4b1b      	ldr	r3, [pc, #108]	@ (8007b48 <tcp_timewait_input+0xe8>)
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	4b1b      	ldr	r3, [pc, #108]	@ (8007b4c <tcp_timewait_input+0xec>)
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f002 fe6c 	bl	800a7c0 <tcp_rst>
      return;
 8007ae8:	e01b      	b.n	8007b22 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007aea:	4b0f      	ldr	r3, [pc, #60]	@ (8007b28 <tcp_timewait_input+0xc8>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007af6:	4b16      	ldr	r3, [pc, #88]	@ (8007b50 <tcp_timewait_input+0xf0>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007afe:	4b10      	ldr	r3, [pc, #64]	@ (8007b40 <tcp_timewait_input+0xe0>)
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00c      	beq.n	8007b20 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	8b5b      	ldrh	r3, [r3, #26]
 8007b0a:	f043 0302 	orr.w	r3, r3, #2
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f002 f89f 	bl	8009c58 <tcp_output>
  }
  return;
 8007b1a:	e001      	b.n	8007b20 <tcp_timewait_input+0xc0>
    return;
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <tcp_timewait_input+0xc2>
  return;
 8007b20:	bf00      	nop
}
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20008294 	.word	0x20008294
 8007b2c:	0800feb0 	.word	0x0800feb0
 8007b30:	080100c8 	.word	0x080100c8
 8007b34:	0800fefc 	.word	0x0800fefc
 8007b38:	20008288 	.word	0x20008288
 8007b3c:	2000828c 	.word	0x2000828c
 8007b40:	20008292 	.word	0x20008292
 8007b44:	20008278 	.word	0x20008278
 8007b48:	20004cf0 	.word	0x20004cf0
 8007b4c:	20004cf4 	.word	0x20004cf4
 8007b50:	20008250 	.word	0x20008250

08007b54 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007b54:	b590      	push	{r4, r7, lr}
 8007b56:	b08d      	sub	sp, #52	@ 0x34
 8007b58:	af04      	add	r7, sp, #16
 8007b5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <tcp_process+0x24>
 8007b6a:	4b9d      	ldr	r3, [pc, #628]	@ (8007de0 <tcp_process+0x28c>)
 8007b6c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8007b70:	499c      	ldr	r1, [pc, #624]	@ (8007de4 <tcp_process+0x290>)
 8007b72:	489d      	ldr	r0, [pc, #628]	@ (8007de8 <tcp_process+0x294>)
 8007b74:	f006 f95e 	bl	800de34 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007b78:	4b9c      	ldr	r3, [pc, #624]	@ (8007dec <tcp_process+0x298>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d04e      	beq.n	8007c22 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7d1b      	ldrb	r3, [r3, #20]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d108      	bne.n	8007b9e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b90:	4b97      	ldr	r3, [pc, #604]	@ (8007df0 <tcp_process+0x29c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d123      	bne.n	8007be0 <tcp_process+0x8c>
        acceptable = 1;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	76fb      	strb	r3, [r7, #27]
 8007b9c:	e020      	b.n	8007be0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ba2:	4b94      	ldr	r3, [pc, #592]	@ (8007df4 <tcp_process+0x2a0>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d102      	bne.n	8007bb0 <tcp_process+0x5c>
        acceptable = 1;
 8007baa:	2301      	movs	r3, #1
 8007bac:	76fb      	strb	r3, [r7, #27]
 8007bae:	e017      	b.n	8007be0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007bb0:	4b90      	ldr	r3, [pc, #576]	@ (8007df4 <tcp_process+0x2a0>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	db10      	blt.n	8007be0 <tcp_process+0x8c>
 8007bbe:	4b8d      	ldr	r3, [pc, #564]	@ (8007df4 <tcp_process+0x2a0>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007bca:	440b      	add	r3, r1
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dc06      	bgt.n	8007be0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	8b5b      	ldrh	r3, [r3, #26]
 8007bd6:	f043 0302 	orr.w	r3, r3, #2
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007be0:	7efb      	ldrb	r3, [r7, #27]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01b      	beq.n	8007c1e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7d1b      	ldrb	r3, [r3, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d106      	bne.n	8007bfc <tcp_process+0xa8>
 8007bee:	4b7c      	ldr	r3, [pc, #496]	@ (8007de0 <tcp_process+0x28c>)
 8007bf0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8007bf4:	4980      	ldr	r1, [pc, #512]	@ (8007df8 <tcp_process+0x2a4>)
 8007bf6:	487c      	ldr	r0, [pc, #496]	@ (8007de8 <tcp_process+0x294>)
 8007bf8:	f006 f91c 	bl	800de34 <iprintf>
      recv_flags |= TF_RESET;
 8007bfc:	4b7f      	ldr	r3, [pc, #508]	@ (8007dfc <tcp_process+0x2a8>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	f043 0308 	orr.w	r3, r3, #8
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	4b7d      	ldr	r3, [pc, #500]	@ (8007dfc <tcp_process+0x2a8>)
 8007c08:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	8b5b      	ldrh	r3, [r3, #26]
 8007c0e:	f023 0301 	bic.w	r3, r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007c18:	f06f 030d 	mvn.w	r3, #13
 8007c1c:	e37a      	b.n	8008314 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e378      	b.n	8008314 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007c22:	4b72      	ldr	r3, [pc, #456]	@ (8007dec <tcp_process+0x298>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d010      	beq.n	8007c50 <tcp_process+0xfc>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7d1b      	ldrb	r3, [r3, #20]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d00c      	beq.n	8007c50 <tcp_process+0xfc>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	7d1b      	ldrb	r3, [r3, #20]
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d008      	beq.n	8007c50 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	8b5b      	ldrh	r3, [r3, #26]
 8007c42:	f043 0302 	orr.w	r3, r3, #2
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e361      	b.n	8008314 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	8b5b      	ldrh	r3, [r3, #26]
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d103      	bne.n	8007c64 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007c5c:	4b68      	ldr	r3, [pc, #416]	@ (8007e00 <tcp_process+0x2ac>)
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 fc2b 	bl	80094d0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7d1b      	ldrb	r3, [r3, #20]
 8007c7e:	3b02      	subs	r3, #2
 8007c80:	2b07      	cmp	r3, #7
 8007c82:	f200 8337 	bhi.w	80082f4 <tcp_process+0x7a0>
 8007c86:	a201      	add	r2, pc, #4	@ (adr r2, 8007c8c <tcp_process+0x138>)
 8007c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8c:	08007cad 	.word	0x08007cad
 8007c90:	08007edd 	.word	0x08007edd
 8007c94:	08008055 	.word	0x08008055
 8007c98:	0800807f 	.word	0x0800807f
 8007c9c:	080081a3 	.word	0x080081a3
 8007ca0:	08008055 	.word	0x08008055
 8007ca4:	0800822f 	.word	0x0800822f
 8007ca8:	080082bf 	.word	0x080082bf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007cac:	4b4f      	ldr	r3, [pc, #316]	@ (8007dec <tcp_process+0x298>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80e4 	beq.w	8007e82 <tcp_process+0x32e>
 8007cba:	4b4c      	ldr	r3, [pc, #304]	@ (8007dec <tcp_process+0x298>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 80dd 	beq.w	8007e82 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	4b48      	ldr	r3, [pc, #288]	@ (8007df0 <tcp_process+0x29c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	f040 80d5 	bne.w	8007e82 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007cd8:	4b46      	ldr	r3, [pc, #280]	@ (8007df4 <tcp_process+0x2a0>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8007cea:	4b41      	ldr	r3, [pc, #260]	@ (8007df0 <tcp_process+0x29c>)
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007cf2:	4b44      	ldr	r3, [pc, #272]	@ (8007e04 <tcp_process+0x2b0>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	89db      	ldrh	r3, [r3, #14]
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007d0c:	4b39      	ldr	r3, [pc, #228]	@ (8007df4 <tcp_process+0x2a0>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	1e5a      	subs	r2, r3, #1
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2204      	movs	r2, #4
 8007d1a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4618      	mov	r0, r3
 8007d26:	f004 fd99 	bl	800c85c <ip4_route>
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	461a      	mov	r2, r3
 8007d32:	4620      	mov	r0, r4
 8007d34:	f7ff f88c 	bl	8006e50 <tcp_eff_send_mss_netif>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d44:	009a      	lsls	r2, r3, #2
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8007d50:	428b      	cmp	r3, r1
 8007d52:	bf38      	it	cc
 8007d54:	460b      	movcc	r3, r1
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d204      	bcs.n	8007d64 <tcp_process+0x210>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	e00d      	b.n	8007d80 <tcp_process+0x22c>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	f241 121c 	movw	r2, #4380	@ 0x111c
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d904      	bls.n	8007d7c <tcp_process+0x228>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	e001      	b.n	8007d80 <tcp_process+0x22c>
 8007d7c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d106      	bne.n	8007d9e <tcp_process+0x24a>
 8007d90:	4b13      	ldr	r3, [pc, #76]	@ (8007de0 <tcp_process+0x28c>)
 8007d92:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8007d96:	491c      	ldr	r1, [pc, #112]	@ (8007e08 <tcp_process+0x2b4>)
 8007d98:	4813      	ldr	r0, [pc, #76]	@ (8007de8 <tcp_process+0x294>)
 8007d9a:	f006 f84b 	bl	800de34 <iprintf>
        --pcb->snd_queuelen;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d12a      	bne.n	8007e10 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dbe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d106      	bne.n	8007dd4 <tcp_process+0x280>
 8007dc6:	4b06      	ldr	r3, [pc, #24]	@ (8007de0 <tcp_process+0x28c>)
 8007dc8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8007dcc:	490f      	ldr	r1, [pc, #60]	@ (8007e0c <tcp_process+0x2b8>)
 8007dce:	4806      	ldr	r0, [pc, #24]	@ (8007de8 <tcp_process+0x294>)
 8007dd0:	f006 f830 	bl	800de34 <iprintf>
          pcb->unsent = rseg->next;
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007ddc:	e01c      	b.n	8007e18 <tcp_process+0x2c4>
 8007dde:	bf00      	nop
 8007de0:	0800feb0 	.word	0x0800feb0
 8007de4:	080100e8 	.word	0x080100e8
 8007de8:	0800fefc 	.word	0x0800fefc
 8007dec:	20008294 	.word	0x20008294
 8007df0:	2000828c 	.word	0x2000828c
 8007df4:	20008288 	.word	0x20008288
 8007df8:	08010104 	.word	0x08010104
 8007dfc:	20008295 	.word	0x20008295
 8007e00:	20008250 	.word	0x20008250
 8007e04:	20008278 	.word	0x20008278
 8007e08:	08010124 	.word	0x08010124
 8007e0c:	0801013c 	.word	0x0801013c
        } else {
          pcb->unacked = rseg->next;
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8007e18:	69f8      	ldr	r0, [r7, #28]
 8007e1a:	f7fe fd22 	bl	8006862 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d104      	bne.n	8007e30 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e2c:	861a      	strh	r2, [r3, #48]	@ 0x30
 8007e2e:	e006      	b.n	8007e3e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00a      	beq.n	8007e5e <tcp_process+0x30a>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	6910      	ldr	r0, [r2, #16]
 8007e52:	2200      	movs	r2, #0
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	4798      	blx	r3
 8007e58:	4603      	mov	r3, r0
 8007e5a:	76bb      	strb	r3, [r7, #26]
 8007e5c:	e001      	b.n	8007e62 <tcp_process+0x30e>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007e62:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007e66:	f113 0f0d 	cmn.w	r3, #13
 8007e6a:	d102      	bne.n	8007e72 <tcp_process+0x31e>
          return ERR_ABRT;
 8007e6c:	f06f 030c 	mvn.w	r3, #12
 8007e70:	e250      	b.n	8008314 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8b5b      	ldrh	r3, [r3, #26]
 8007e76:	f043 0302 	orr.w	r3, r3, #2
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007e80:	e23a      	b.n	80082f8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007e82:	4b98      	ldr	r3, [pc, #608]	@ (80080e4 <tcp_process+0x590>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	f003 0310 	and.w	r3, r3, #16
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 8234 	beq.w	80082f8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e90:	4b95      	ldr	r3, [pc, #596]	@ (80080e8 <tcp_process+0x594>)
 8007e92:	6819      	ldr	r1, [r3, #0]
 8007e94:	4b95      	ldr	r3, [pc, #596]	@ (80080ec <tcp_process+0x598>)
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4b95      	ldr	r3, [pc, #596]	@ (80080f0 <tcp_process+0x59c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ea0:	4b94      	ldr	r3, [pc, #592]	@ (80080f4 <tcp_process+0x5a0>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ea4:	885b      	ldrh	r3, [r3, #2]
 8007ea6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ea8:	4a92      	ldr	r2, [pc, #584]	@ (80080f4 <tcp_process+0x5a0>)
 8007eaa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007eac:	8812      	ldrh	r2, [r2, #0]
 8007eae:	b292      	uxth	r2, r2
 8007eb0:	9202      	str	r2, [sp, #8]
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	4b90      	ldr	r3, [pc, #576]	@ (80080f8 <tcp_process+0x5a4>)
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	4b90      	ldr	r3, [pc, #576]	@ (80080fc <tcp_process+0x5a8>)
 8007eba:	4602      	mov	r2, r0
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f002 fc7f 	bl	800a7c0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ec8:	2b05      	cmp	r3, #5
 8007eca:	f200 8215 	bhi.w	80082f8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f002 fa4b 	bl	800a370 <tcp_rexmit_rto>
      break;
 8007eda:	e20d      	b.n	80082f8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007edc:	4b81      	ldr	r3, [pc, #516]	@ (80080e4 <tcp_process+0x590>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80a1 	beq.w	800802c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007eea:	4b7f      	ldr	r3, [pc, #508]	@ (80080e8 <tcp_process+0x594>)
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	db7e      	blt.n	8007ff8 <tcp_process+0x4a4>
 8007efa:	4b7b      	ldr	r3, [pc, #492]	@ (80080e8 <tcp_process+0x594>)
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dc77      	bgt.n	8007ff8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d102      	bne.n	8007f1c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007f16:	23fa      	movs	r3, #250	@ 0xfa
 8007f18:	76bb      	strb	r3, [r7, #26]
 8007f1a:	e01d      	b.n	8007f58 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <tcp_process+0x3e0>
 8007f26:	4b76      	ldr	r3, [pc, #472]	@ (8008100 <tcp_process+0x5ac>)
 8007f28:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8007f2c:	4975      	ldr	r1, [pc, #468]	@ (8008104 <tcp_process+0x5b0>)
 8007f2e:	4876      	ldr	r0, [pc, #472]	@ (8008108 <tcp_process+0x5b4>)
 8007f30:	f005 ff80 	bl	800de34 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <tcp_process+0x400>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	6910      	ldr	r0, [r2, #16]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	4798      	blx	r3
 8007f4e:	4603      	mov	r3, r0
 8007f50:	76bb      	strb	r3, [r7, #26]
 8007f52:	e001      	b.n	8007f58 <tcp_process+0x404>
 8007f54:	23f0      	movs	r3, #240	@ 0xf0
 8007f56:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007f58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007f60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f64:	f113 0f0d 	cmn.w	r3, #13
 8007f68:	d002      	beq.n	8007f70 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7fd ff8c 	bl	8005e88 <tcp_abort>
            }
            return ERR_ABRT;
 8007f70:	f06f 030c 	mvn.w	r3, #12
 8007f74:	e1ce      	b.n	8008314 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fae0 	bl	800853c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007f7c:	4b63      	ldr	r3, [pc, #396]	@ (800810c <tcp_process+0x5b8>)
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <tcp_process+0x43c>
            recv_acked--;
 8007f84:	4b61      	ldr	r3, [pc, #388]	@ (800810c <tcp_process+0x5b8>)
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	4b5f      	ldr	r3, [pc, #380]	@ (800810c <tcp_process+0x5b8>)
 8007f8e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007f94:	009a      	lsls	r2, r3, #2
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8007fa0:	428b      	cmp	r3, r1
 8007fa2:	bf38      	it	cc
 8007fa4:	460b      	movcc	r3, r1
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d204      	bcs.n	8007fb4 <tcp_process+0x460>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	e00d      	b.n	8007fd0 <tcp_process+0x47c>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	f241 121c 	movw	r2, #4380	@ 0x111c
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d904      	bls.n	8007fcc <tcp_process+0x478>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	e001      	b.n	8007fd0 <tcp_process+0x47c>
 8007fcc:	f241 131c 	movw	r3, #4380	@ 0x111c
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007fd6:	4b4e      	ldr	r3, [pc, #312]	@ (8008110 <tcp_process+0x5bc>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	f003 0320 	and.w	r3, r3, #32
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d037      	beq.n	8008052 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	8b5b      	ldrh	r3, [r3, #26]
 8007fe6:	f043 0302 	orr.w	r3, r3, #2
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2207      	movs	r2, #7
 8007ff4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007ff6:	e02c      	b.n	8008052 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80080e8 <tcp_process+0x594>)
 8007ffa:	6819      	ldr	r1, [r3, #0]
 8007ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80080ec <tcp_process+0x598>)
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	4b3b      	ldr	r3, [pc, #236]	@ (80080f0 <tcp_process+0x59c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008008:	4b3a      	ldr	r3, [pc, #232]	@ (80080f4 <tcp_process+0x5a0>)
 800800a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800800c:	885b      	ldrh	r3, [r3, #2]
 800800e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008010:	4a38      	ldr	r2, [pc, #224]	@ (80080f4 <tcp_process+0x5a0>)
 8008012:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008014:	8812      	ldrh	r2, [r2, #0]
 8008016:	b292      	uxth	r2, r2
 8008018:	9202      	str	r2, [sp, #8]
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	4b36      	ldr	r3, [pc, #216]	@ (80080f8 <tcp_process+0x5a4>)
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	4b36      	ldr	r3, [pc, #216]	@ (80080fc <tcp_process+0x5a8>)
 8008022:	4602      	mov	r2, r0
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f002 fbcb 	bl	800a7c0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800802a:	e167      	b.n	80082fc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800802c:	4b2d      	ldr	r3, [pc, #180]	@ (80080e4 <tcp_process+0x590>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 8161 	beq.w	80082fc <tcp_process+0x7a8>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803e:	1e5a      	subs	r2, r3, #1
 8008040:	4b2b      	ldr	r3, [pc, #172]	@ (80080f0 <tcp_process+0x59c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	429a      	cmp	r2, r3
 8008046:	f040 8159 	bne.w	80082fc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f002 f9b2 	bl	800a3b4 <tcp_rexmit>
      break;
 8008050:	e154      	b.n	80082fc <tcp_process+0x7a8>
 8008052:	e153      	b.n	80082fc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fa71 	bl	800853c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800805a:	4b2d      	ldr	r3, [pc, #180]	@ (8008110 <tcp_process+0x5bc>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 814c 	beq.w	8008300 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	8b5b      	ldrh	r3, [r3, #26]
 800806c:	f043 0302 	orr.w	r3, r3, #2
 8008070:	b29a      	uxth	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2207      	movs	r2, #7
 800807a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800807c:	e140      	b.n	8008300 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa5c 	bl	800853c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008084:	4b22      	ldr	r3, [pc, #136]	@ (8008110 <tcp_process+0x5bc>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	f003 0320 	and.w	r3, r3, #32
 800808c:	2b00      	cmp	r3, #0
 800808e:	d071      	beq.n	8008174 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008090:	4b14      	ldr	r3, [pc, #80]	@ (80080e4 <tcp_process+0x590>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	2b00      	cmp	r3, #0
 800809a:	d060      	beq.n	800815e <tcp_process+0x60a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080a0:	4b11      	ldr	r3, [pc, #68]	@ (80080e8 <tcp_process+0x594>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d15a      	bne.n	800815e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d156      	bne.n	800815e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	8b5b      	ldrh	r3, [r3, #26]
 80080b4:	f043 0302 	orr.w	r3, r3, #2
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fe fdbc 	bl	8006c3c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80080c4:	4b13      	ldr	r3, [pc, #76]	@ (8008114 <tcp_process+0x5c0>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d105      	bne.n	80080da <tcp_process+0x586>
 80080ce:	4b11      	ldr	r3, [pc, #68]	@ (8008114 <tcp_process+0x5c0>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	4a0f      	ldr	r2, [pc, #60]	@ (8008114 <tcp_process+0x5c0>)
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	e02e      	b.n	8008138 <tcp_process+0x5e4>
 80080da:	4b0e      	ldr	r3, [pc, #56]	@ (8008114 <tcp_process+0x5c0>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	e027      	b.n	8008132 <tcp_process+0x5de>
 80080e2:	bf00      	nop
 80080e4:	20008294 	.word	0x20008294
 80080e8:	2000828c 	.word	0x2000828c
 80080ec:	20008292 	.word	0x20008292
 80080f0:	20008288 	.word	0x20008288
 80080f4:	20008278 	.word	0x20008278
 80080f8:	20004cf0 	.word	0x20004cf0
 80080fc:	20004cf4 	.word	0x20004cf4
 8008100:	0800feb0 	.word	0x0800feb0
 8008104:	08010150 	.word	0x08010150
 8008108:	0800fefc 	.word	0x0800fefc
 800810c:	20008290 	.word	0x20008290
 8008110:	20008295 	.word	0x20008295
 8008114:	2000825c 	.word	0x2000825c
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	429a      	cmp	r2, r3
 8008120:	d104      	bne.n	800812c <tcp_process+0x5d8>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	60da      	str	r2, [r3, #12]
 800812a:	e005      	b.n	8008138 <tcp_process+0x5e4>
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1ef      	bne.n	8008118 <tcp_process+0x5c4>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	60da      	str	r2, [r3, #12]
 800813e:	4b77      	ldr	r3, [pc, #476]	@ (800831c <tcp_process+0x7c8>)
 8008140:	2201      	movs	r2, #1
 8008142:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	220a      	movs	r2, #10
 8008148:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800814a:	4b75      	ldr	r3, [pc, #468]	@ (8008320 <tcp_process+0x7cc>)
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	60da      	str	r2, [r3, #12]
 8008152:	4a73      	ldr	r2, [pc, #460]	@ (8008320 <tcp_process+0x7cc>)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	f002 fcf4 	bl	800ab44 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800815c:	e0d2      	b.n	8008304 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	8b5b      	ldrh	r3, [r3, #26]
 8008162:	f043 0302 	orr.w	r3, r3, #2
 8008166:	b29a      	uxth	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2208      	movs	r2, #8
 8008170:	751a      	strb	r2, [r3, #20]
      break;
 8008172:	e0c7      	b.n	8008304 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008174:	4b6b      	ldr	r3, [pc, #428]	@ (8008324 <tcp_process+0x7d0>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 80c1 	beq.w	8008304 <tcp_process+0x7b0>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008186:	4b68      	ldr	r3, [pc, #416]	@ (8008328 <tcp_process+0x7d4>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	f040 80ba 	bne.w	8008304 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008194:	2b00      	cmp	r3, #0
 8008196:	f040 80b5 	bne.w	8008304 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2206      	movs	r2, #6
 800819e:	751a      	strb	r2, [r3, #20]
      break;
 80081a0:	e0b0      	b.n	8008304 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f9ca 	bl	800853c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80081a8:	4b60      	ldr	r3, [pc, #384]	@ (800832c <tcp_process+0x7d8>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	f003 0320 	and.w	r3, r3, #32
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 80a9 	beq.w	8008308 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	8b5b      	ldrh	r3, [r3, #26]
 80081ba:	f043 0302 	orr.w	r3, r3, #2
 80081be:	b29a      	uxth	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7fe fd39 	bl	8006c3c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80081ca:	4b59      	ldr	r3, [pc, #356]	@ (8008330 <tcp_process+0x7dc>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d105      	bne.n	80081e0 <tcp_process+0x68c>
 80081d4:	4b56      	ldr	r3, [pc, #344]	@ (8008330 <tcp_process+0x7dc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	4a55      	ldr	r2, [pc, #340]	@ (8008330 <tcp_process+0x7dc>)
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	e013      	b.n	8008208 <tcp_process+0x6b4>
 80081e0:	4b53      	ldr	r3, [pc, #332]	@ (8008330 <tcp_process+0x7dc>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	e00c      	b.n	8008202 <tcp_process+0x6ae>
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d104      	bne.n	80081fc <tcp_process+0x6a8>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	60da      	str	r2, [r3, #12]
 80081fa:	e005      	b.n	8008208 <tcp_process+0x6b4>
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	613b      	str	r3, [r7, #16]
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1ef      	bne.n	80081e8 <tcp_process+0x694>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	60da      	str	r2, [r3, #12]
 800820e:	4b43      	ldr	r3, [pc, #268]	@ (800831c <tcp_process+0x7c8>)
 8008210:	2201      	movs	r2, #1
 8008212:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	220a      	movs	r2, #10
 8008218:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800821a:	4b41      	ldr	r3, [pc, #260]	@ (8008320 <tcp_process+0x7cc>)
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	60da      	str	r2, [r3, #12]
 8008222:	4a3f      	ldr	r2, [pc, #252]	@ (8008320 <tcp_process+0x7cc>)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	f002 fc8c 	bl	800ab44 <tcp_timer_needed>
      }
      break;
 800822c:	e06c      	b.n	8008308 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f984 	bl	800853c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008234:	4b3b      	ldr	r3, [pc, #236]	@ (8008324 <tcp_process+0x7d0>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b00      	cmp	r3, #0
 800823e:	d065      	beq.n	800830c <tcp_process+0x7b8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008244:	4b38      	ldr	r3, [pc, #224]	@ (8008328 <tcp_process+0x7d4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d15f      	bne.n	800830c <tcp_process+0x7b8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d15b      	bne.n	800830c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7fe fcf1 	bl	8006c3c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800825a:	4b35      	ldr	r3, [pc, #212]	@ (8008330 <tcp_process+0x7dc>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	429a      	cmp	r2, r3
 8008262:	d105      	bne.n	8008270 <tcp_process+0x71c>
 8008264:	4b32      	ldr	r3, [pc, #200]	@ (8008330 <tcp_process+0x7dc>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	4a31      	ldr	r2, [pc, #196]	@ (8008330 <tcp_process+0x7dc>)
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	e013      	b.n	8008298 <tcp_process+0x744>
 8008270:	4b2f      	ldr	r3, [pc, #188]	@ (8008330 <tcp_process+0x7dc>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	e00c      	b.n	8008292 <tcp_process+0x73e>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	429a      	cmp	r2, r3
 8008280:	d104      	bne.n	800828c <tcp_process+0x738>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	60da      	str	r2, [r3, #12]
 800828a:	e005      	b.n	8008298 <tcp_process+0x744>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1ef      	bne.n	8008278 <tcp_process+0x724>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	60da      	str	r2, [r3, #12]
 800829e:	4b1f      	ldr	r3, [pc, #124]	@ (800831c <tcp_process+0x7c8>)
 80082a0:	2201      	movs	r2, #1
 80082a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	220a      	movs	r2, #10
 80082a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80082aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008320 <tcp_process+0x7cc>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	60da      	str	r2, [r3, #12]
 80082b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008320 <tcp_process+0x7cc>)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	f002 fc44 	bl	800ab44 <tcp_timer_needed>
      }
      break;
 80082bc:	e026      	b.n	800830c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f93c 	bl	800853c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80082c4:	4b17      	ldr	r3, [pc, #92]	@ (8008324 <tcp_process+0x7d0>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f003 0310 	and.w	r3, r3, #16
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01f      	beq.n	8008310 <tcp_process+0x7bc>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082d4:	4b14      	ldr	r3, [pc, #80]	@ (8008328 <tcp_process+0x7d4>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d119      	bne.n	8008310 <tcp_process+0x7bc>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d115      	bne.n	8008310 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80082e4:	4b11      	ldr	r3, [pc, #68]	@ (800832c <tcp_process+0x7d8>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	f043 0310 	orr.w	r3, r3, #16
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	4b0f      	ldr	r3, [pc, #60]	@ (800832c <tcp_process+0x7d8>)
 80082f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80082f2:	e00d      	b.n	8008310 <tcp_process+0x7bc>
    default:
      break;
 80082f4:	bf00      	nop
 80082f6:	e00c      	b.n	8008312 <tcp_process+0x7be>
      break;
 80082f8:	bf00      	nop
 80082fa:	e00a      	b.n	8008312 <tcp_process+0x7be>
      break;
 80082fc:	bf00      	nop
 80082fe:	e008      	b.n	8008312 <tcp_process+0x7be>
      break;
 8008300:	bf00      	nop
 8008302:	e006      	b.n	8008312 <tcp_process+0x7be>
      break;
 8008304:	bf00      	nop
 8008306:	e004      	b.n	8008312 <tcp_process+0x7be>
      break;
 8008308:	bf00      	nop
 800830a:	e002      	b.n	8008312 <tcp_process+0x7be>
      break;
 800830c:	bf00      	nop
 800830e:	e000      	b.n	8008312 <tcp_process+0x7be>
      break;
 8008310:	bf00      	nop
  }
  return ERR_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3724      	adds	r7, #36	@ 0x24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd90      	pop	{r4, r7, pc}
 800831c:	20008264 	.word	0x20008264
 8008320:	20008260 	.word	0x20008260
 8008324:	20008294 	.word	0x20008294
 8008328:	2000828c 	.word	0x2000828c
 800832c:	20008295 	.word	0x20008295
 8008330:	2000825c 	.word	0x2000825c

08008334 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d106      	bne.n	8008352 <tcp_oos_insert_segment+0x1e>
 8008344:	4b3b      	ldr	r3, [pc, #236]	@ (8008434 <tcp_oos_insert_segment+0x100>)
 8008346:	f240 421f 	movw	r2, #1055	@ 0x41f
 800834a:	493b      	ldr	r1, [pc, #236]	@ (8008438 <tcp_oos_insert_segment+0x104>)
 800834c:	483b      	ldr	r0, [pc, #236]	@ (800843c <tcp_oos_insert_segment+0x108>)
 800834e:	f005 fd71 	bl	800de34 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	899b      	ldrh	r3, [r3, #12]
 8008358:	b29b      	uxth	r3, r3
 800835a:	4618      	mov	r0, r3
 800835c:	f7fb fc9e 	bl	8003c9c <lwip_htons>
 8008360:	4603      	mov	r3, r0
 8008362:	b2db      	uxtb	r3, r3
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d028      	beq.n	80083be <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800836c:	6838      	ldr	r0, [r7, #0]
 800836e:	f7fe fa63 	bl	8006838 <tcp_segs_free>
    next = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	603b      	str	r3, [r7, #0]
 8008376:	e056      	b.n	8008426 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	899b      	ldrh	r3, [r3, #12]
 800837e:	b29b      	uxth	r3, r3
 8008380:	4618      	mov	r0, r3
 8008382:	f7fb fc8b 	bl	8003c9c <lwip_htons>
 8008386:	4603      	mov	r3, r0
 8008388:	b2db      	uxtb	r3, r3
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00d      	beq.n	80083ae <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	899b      	ldrh	r3, [r3, #12]
 8008398:	b29c      	uxth	r4, r3
 800839a:	2001      	movs	r0, #1
 800839c:	f7fb fc7e 	bl	8003c9c <lwip_htons>
 80083a0:	4603      	mov	r3, r0
 80083a2:	461a      	mov	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	4322      	orrs	r2, r4
 80083aa:	b292      	uxth	r2, r2
 80083ac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f7fe fa52 	bl	8006862 <tcp_seg_free>
    while (next &&
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00e      	beq.n	80083e2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	891b      	ldrh	r3, [r3, #8]
 80083c8:	461a      	mov	r2, r3
 80083ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008440 <tcp_oos_insert_segment+0x10c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	441a      	add	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	8909      	ldrh	r1, [r1, #8]
 80083da:	440b      	add	r3, r1
 80083dc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80083de:	2b00      	cmp	r3, #0
 80083e0:	daca      	bge.n	8008378 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01e      	beq.n	8008426 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	891b      	ldrh	r3, [r3, #8]
 80083ec:	461a      	mov	r2, r3
 80083ee:	4b14      	ldr	r3, [pc, #80]	@ (8008440 <tcp_oos_insert_segment+0x10c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	441a      	add	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	1ad3      	subs	r3, r2, r3
    if (next &&
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	dd12      	ble.n	8008426 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	b29a      	uxth	r2, r3
 8008408:	4b0d      	ldr	r3, [pc, #52]	@ (8008440 <tcp_oos_insert_segment+0x10c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	b29b      	uxth	r3, r3
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	891b      	ldrh	r3, [r3, #8]
 800841e:	4619      	mov	r1, r3
 8008420:	4610      	mov	r0, r2
 8008422:	f7fc fe13 	bl	800504c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	601a      	str	r2, [r3, #0]
}
 800842c:	bf00      	nop
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	bd90      	pop	{r4, r7, pc}
 8008434:	0800feb0 	.word	0x0800feb0
 8008438:	08010170 	.word	0x08010170
 800843c:	0800fefc 	.word	0x0800fefc
 8008440:	20008288 	.word	0x20008288

08008444 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008444:	b5b0      	push	{r4, r5, r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008452:	e03e      	b.n	80084d2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	4618      	mov	r0, r3
 8008464:	f7fd f800 	bl	8005468 <pbuf_clen>
 8008468:	4603      	mov	r3, r0
 800846a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008472:	8a7a      	ldrh	r2, [r7, #18]
 8008474:	429a      	cmp	r2, r3
 8008476:	d906      	bls.n	8008486 <tcp_free_acked_segments+0x42>
 8008478:	4b2a      	ldr	r3, [pc, #168]	@ (8008524 <tcp_free_acked_segments+0xe0>)
 800847a:	f240 4257 	movw	r2, #1111	@ 0x457
 800847e:	492a      	ldr	r1, [pc, #168]	@ (8008528 <tcp_free_acked_segments+0xe4>)
 8008480:	482a      	ldr	r0, [pc, #168]	@ (800852c <tcp_free_acked_segments+0xe8>)
 8008482:	f005 fcd7 	bl	800de34 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800848c:	8a7b      	ldrh	r3, [r7, #18]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	891a      	ldrh	r2, [r3, #8]
 800849c:	4b24      	ldr	r3, [pc, #144]	@ (8008530 <tcp_free_acked_segments+0xec>)
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	4413      	add	r3, r2
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	4b22      	ldr	r3, [pc, #136]	@ (8008530 <tcp_free_acked_segments+0xec>)
 80084a6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80084a8:	6978      	ldr	r0, [r7, #20]
 80084aa:	f7fe f9da 	bl	8006862 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00c      	beq.n	80084d2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <tcp_free_acked_segments+0x8e>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d106      	bne.n	80084d2 <tcp_free_acked_segments+0x8e>
 80084c4:	4b17      	ldr	r3, [pc, #92]	@ (8008524 <tcp_free_acked_segments+0xe0>)
 80084c6:	f240 4261 	movw	r2, #1121	@ 0x461
 80084ca:	491a      	ldr	r1, [pc, #104]	@ (8008534 <tcp_free_acked_segments+0xf0>)
 80084cc:	4817      	ldr	r0, [pc, #92]	@ (800852c <tcp_free_acked_segments+0xe8>)
 80084ce:	f005 fcb1 	bl	800de34 <iprintf>
  while (seg_list != NULL &&
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d020      	beq.n	800851a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fb fbf2 	bl	8003cc8 <lwip_htonl>
 80084e4:	4604      	mov	r4, r0
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	891b      	ldrh	r3, [r3, #8]
 80084ea:	461d      	mov	r5, r3
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	899b      	ldrh	r3, [r3, #12]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fb fbd1 	bl	8003c9c <lwip_htons>
 80084fa:	4603      	mov	r3, r0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	f003 0303 	and.w	r3, r3, #3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <tcp_free_acked_segments+0xc6>
 8008506:	2301      	movs	r3, #1
 8008508:	e000      	b.n	800850c <tcp_free_acked_segments+0xc8>
 800850a:	2300      	movs	r3, #0
 800850c:	442b      	add	r3, r5
 800850e:	18e2      	adds	r2, r4, r3
 8008510:	4b09      	ldr	r3, [pc, #36]	@ (8008538 <tcp_free_acked_segments+0xf4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008516:	2b00      	cmp	r3, #0
 8008518:	dd9c      	ble.n	8008454 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800851a:	68bb      	ldr	r3, [r7, #8]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bdb0      	pop	{r4, r5, r7, pc}
 8008524:	0800feb0 	.word	0x0800feb0
 8008528:	08010198 	.word	0x08010198
 800852c:	0800fefc 	.word	0x0800fefc
 8008530:	20008290 	.word	0x20008290
 8008534:	080101c0 	.word	0x080101c0
 8008538:	2000828c 	.word	0x2000828c

0800853c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800853c:	b5b0      	push	{r4, r5, r7, lr}
 800853e:	b094      	sub	sp, #80	@ 0x50
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d106      	bne.n	800855c <tcp_receive+0x20>
 800854e:	4b91      	ldr	r3, [pc, #580]	@ (8008794 <tcp_receive+0x258>)
 8008550:	f240 427b 	movw	r2, #1147	@ 0x47b
 8008554:	4990      	ldr	r1, [pc, #576]	@ (8008798 <tcp_receive+0x25c>)
 8008556:	4891      	ldr	r0, [pc, #580]	@ (800879c <tcp_receive+0x260>)
 8008558:	f005 fc6c 	bl	800de34 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	7d1b      	ldrb	r3, [r3, #20]
 8008560:	2b03      	cmp	r3, #3
 8008562:	d806      	bhi.n	8008572 <tcp_receive+0x36>
 8008564:	4b8b      	ldr	r3, [pc, #556]	@ (8008794 <tcp_receive+0x258>)
 8008566:	f240 427c 	movw	r2, #1148	@ 0x47c
 800856a:	498d      	ldr	r1, [pc, #564]	@ (80087a0 <tcp_receive+0x264>)
 800856c:	488b      	ldr	r0, [pc, #556]	@ (800879c <tcp_receive+0x260>)
 800856e:	f005 fc61 	bl	800de34 <iprintf>

  if (flags & TCP_ACK) {
 8008572:	4b8c      	ldr	r3, [pc, #560]	@ (80087a4 <tcp_receive+0x268>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	f003 0310 	and.w	r3, r3, #16
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 8264 	beq.w	8008a48 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800858c:	4413      	add	r3, r2
 800858e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008594:	4b84      	ldr	r3, [pc, #528]	@ (80087a8 <tcp_receive+0x26c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	db1b      	blt.n	80085d6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085a2:	4b81      	ldr	r3, [pc, #516]	@ (80087a8 <tcp_receive+0x26c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d106      	bne.n	80085b8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085ae:	4b7f      	ldr	r3, [pc, #508]	@ (80087ac <tcp_receive+0x270>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	db0e      	blt.n	80085d6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085bc:	4b7b      	ldr	r3, [pc, #492]	@ (80087ac <tcp_receive+0x270>)
 80085be:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d125      	bne.n	8008610 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80085c4:	4b7a      	ldr	r3, [pc, #488]	@ (80087b0 <tcp_receive+0x274>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	89db      	ldrh	r3, [r3, #14]
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d91c      	bls.n	8008610 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80085d6:	4b76      	ldr	r3, [pc, #472]	@ (80087b0 <tcp_receive+0x274>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	89db      	ldrh	r3, [r3, #14]
 80085dc:	b29a      	uxth	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d205      	bcs.n	8008600 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8008600:	4b69      	ldr	r3, [pc, #420]	@ (80087a8 <tcp_receive+0x26c>)
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8008608:	4b68      	ldr	r3, [pc, #416]	@ (80087ac <tcp_receive+0x270>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008610:	4b66      	ldr	r3, [pc, #408]	@ (80087ac <tcp_receive+0x270>)
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	dc58      	bgt.n	80086d0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800861e:	4b65      	ldr	r3, [pc, #404]	@ (80087b4 <tcp_receive+0x278>)
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d14b      	bne.n	80086be <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8008630:	4413      	add	r3, r2
 8008632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008634:	429a      	cmp	r2, r3
 8008636:	d142      	bne.n	80086be <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800863e:	2b00      	cmp	r3, #0
 8008640:	db3d      	blt.n	80086be <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008646:	4b59      	ldr	r3, [pc, #356]	@ (80087ac <tcp_receive+0x270>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	429a      	cmp	r2, r3
 800864c:	d137      	bne.n	80086be <tcp_receive+0x182>
              found_dupack = 1;
 800864e:	2301      	movs	r3, #1
 8008650:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008658:	2bff      	cmp	r3, #255	@ 0xff
 800865a:	d007      	beq.n	800866c <tcp_receive+0x130>
                ++pcb->dupacks;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008662:	3301      	adds	r3, #1
 8008664:	b2da      	uxtb	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008672:	2b03      	cmp	r3, #3
 8008674:	d91b      	bls.n	80086ae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008680:	4413      	add	r3, r2
 8008682:	b29a      	uxth	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800868a:	429a      	cmp	r2, r3
 800868c:	d30a      	bcc.n	80086a4 <tcp_receive+0x168>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008698:	4413      	add	r3, r2
 800869a:	b29a      	uxth	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80086a2:	e004      	b.n	80086ae <tcp_receive+0x172>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80086aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d902      	bls.n	80086be <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 fee7 	bl	800a48c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80086be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f040 8161 	bne.w	8008988 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80086ce:	e15b      	b.n	8008988 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80086d0:	4b36      	ldr	r3, [pc, #216]	@ (80087ac <tcp_receive+0x270>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f2c0 814e 	blt.w	800897e <tcp_receive+0x442>
 80086e2:	4b32      	ldr	r3, [pc, #200]	@ (80087ac <tcp_receive+0x270>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f300 8146 	bgt.w	800897e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	8b5b      	ldrh	r3, [r3, #26]
 80086f6:	f003 0304 	and.w	r3, r3, #4
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d010      	beq.n	8008720 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	8b5b      	ldrh	r3, [r3, #26]
 8008702:	f023 0304 	bic.w	r3, r3, #4
 8008706:	b29a      	uxth	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800872e:	10db      	asrs	r3, r3, #3
 8008730:	b21b      	sxth	r3, r3
 8008732:	b29a      	uxth	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800873a:	b29b      	uxth	r3, r3
 800873c:	4413      	add	r3, r2
 800873e:	b29b      	uxth	r3, r3
 8008740:	b21a      	sxth	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008748:	4b18      	ldr	r3, [pc, #96]	@ (80087ac <tcp_receive+0x270>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	b29a      	uxth	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008752:	b29b      	uxth	r3, r3
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8008760:	4b12      	ldr	r3, [pc, #72]	@ (80087ac <tcp_receive+0x270>)
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7d1b      	ldrb	r3, [r3, #20]
 800876c:	2b03      	cmp	r3, #3
 800876e:	f240 8097 	bls.w	80088a0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800877e:	429a      	cmp	r2, r3
 8008780:	d245      	bcs.n	800880e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	8b5b      	ldrh	r3, [r3, #26]
 8008786:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800878a:	2b00      	cmp	r3, #0
 800878c:	d014      	beq.n	80087b8 <tcp_receive+0x27c>
 800878e:	2301      	movs	r3, #1
 8008790:	e013      	b.n	80087ba <tcp_receive+0x27e>
 8008792:	bf00      	nop
 8008794:	0800feb0 	.word	0x0800feb0
 8008798:	080101e0 	.word	0x080101e0
 800879c:	0800fefc 	.word	0x0800fefc
 80087a0:	080101fc 	.word	0x080101fc
 80087a4:	20008294 	.word	0x20008294
 80087a8:	20008288 	.word	0x20008288
 80087ac:	2000828c 	.word	0x2000828c
 80087b0:	20008278 	.word	0x20008278
 80087b4:	20008292 	.word	0x20008292
 80087b8:	2302      	movs	r3, #2
 80087ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80087be:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80087c8:	fb12 f303 	smulbb	r3, r2, r3
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80087d0:	4293      	cmp	r3, r2
 80087d2:	bf28      	it	cs
 80087d4:	4613      	movcs	r3, r2
 80087d6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80087de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80087e0:	4413      	add	r3, r2
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d309      	bcc.n	8008802 <tcp_receive+0x2c6>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80087f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80087f6:	4413      	add	r3, r2
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008800:	e04e      	b.n	80088a0 <tcp_receive+0x364>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008808:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800880c:	e048      	b.n	80088a0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008814:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008816:	4413      	add	r3, r2
 8008818:	b29a      	uxth	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008820:	429a      	cmp	r2, r3
 8008822:	d309      	bcc.n	8008838 <tcp_receive+0x2fc>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800882a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800882c:	4413      	add	r3, r2
 800882e:	b29a      	uxth	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008836:	e004      	b.n	8008842 <tcp_receive+0x306>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800883e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800884e:	429a      	cmp	r2, r3
 8008850:	d326      	bcc.n	80088a0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	b29a      	uxth	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008872:	4413      	add	r3, r2
 8008874:	b29a      	uxth	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800887c:	429a      	cmp	r2, r3
 800887e:	d30a      	bcc.n	8008896 <tcp_receive+0x35a>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800888a:	4413      	add	r3, r2
 800888c:	b29a      	uxth	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008894:	e004      	b.n	80088a0 <tcp_receive+0x364>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800889c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088a8:	4a98      	ldr	r2, [pc, #608]	@ (8008b0c <tcp_receive+0x5d0>)
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fdca 	bl	8008444 <tcp_free_acked_segments>
 80088b0:	4602      	mov	r2, r0
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088be:	4a94      	ldr	r2, [pc, #592]	@ (8008b10 <tcp_receive+0x5d4>)
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff fdbf 	bl	8008444 <tcp_free_acked_segments>
 80088c6:	4602      	mov	r2, r0
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d104      	bne.n	80088de <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80088da:	861a      	strh	r2, [r3, #48]	@ 0x30
 80088dc:	e002      	b.n	80088e4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d103      	bne.n	80088fa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8008900:	4b84      	ldr	r3, [pc, #528]	@ (8008b14 <tcp_receive+0x5d8>)
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	4413      	add	r3, r2
 8008906:	b29a      	uxth	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	8b5b      	ldrh	r3, [r3, #26]
 8008912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008916:	2b00      	cmp	r3, #0
 8008918:	d035      	beq.n	8008986 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800891e:	2b00      	cmp	r3, #0
 8008920:	d118      	bne.n	8008954 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00c      	beq.n	8008944 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	4618      	mov	r0, r3
 8008938:	f7fb f9c6 	bl	8003cc8 <lwip_htonl>
 800893c:	4603      	mov	r3, r0
 800893e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008940:	2b00      	cmp	r3, #0
 8008942:	dc20      	bgt.n	8008986 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	8b5b      	ldrh	r3, [r3, #26]
 8008948:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800894c:	b29a      	uxth	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008952:	e018      	b.n	8008986 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4618      	mov	r0, r3
 8008962:	f7fb f9b1 	bl	8003cc8 <lwip_htonl>
 8008966:	4603      	mov	r3, r0
 8008968:	1ae3      	subs	r3, r4, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	dc0b      	bgt.n	8008986 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	8b5b      	ldrh	r3, [r3, #26]
 8008972:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008976:	b29a      	uxth	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800897c:	e003      	b.n	8008986 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 ff70 	bl	800a864 <tcp_send_empty_ack>
 8008984:	e000      	b.n	8008988 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008986:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800898c:	2b00      	cmp	r3, #0
 800898e:	d05b      	beq.n	8008a48 <tcp_receive+0x50c>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008994:	4b60      	ldr	r3, [pc, #384]	@ (8008b18 <tcp_receive+0x5dc>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	da54      	bge.n	8008a48 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800899e:	4b5f      	ldr	r3, [pc, #380]	@ (8008b1c <tcp_receive+0x5e0>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80089b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80089bc:	10db      	asrs	r3, r3, #3
 80089be:	b21b      	sxth	r3, r3
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80089d6:	4413      	add	r3, r2
 80089d8:	b29b      	uxth	r3, r3
 80089da:	b21a      	sxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80089e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	da05      	bge.n	80089f4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80089e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80089ec:	425b      	negs	r3, r3
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80089f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80089fe:	109b      	asrs	r3, r3, #2
 8008a00:	b21b      	sxth	r3, r3
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008a18:	4413      	add	r3, r2
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	b21a      	sxth	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008a28:	10db      	asrs	r3, r3, #3
 8008a2a:	b21b      	sxth	r3, r3
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	4413      	add	r3, r2
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	b21a      	sxth	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008a48:	4b35      	ldr	r3, [pc, #212]	@ (8008b20 <tcp_receive+0x5e4>)
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 84df 	beq.w	8009410 <tcp_receive+0xed4>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	7d1b      	ldrb	r3, [r3, #20]
 8008a56:	2b06      	cmp	r3, #6
 8008a58:	f200 84da 	bhi.w	8009410 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a60:	4b30      	ldr	r3, [pc, #192]	@ (8008b24 <tcp_receive+0x5e8>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	3b01      	subs	r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f2c0 808f 	blt.w	8008b8c <tcp_receive+0x650>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a72:	4b2b      	ldr	r3, [pc, #172]	@ (8008b20 <tcp_receive+0x5e4>)
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	4619      	mov	r1, r3
 8008a78:	4b2a      	ldr	r3, [pc, #168]	@ (8008b24 <tcp_receive+0x5e8>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	440b      	add	r3, r1
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	3301      	adds	r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f300 8082 	bgt.w	8008b8c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008a88:	4b27      	ldr	r3, [pc, #156]	@ (8008b28 <tcp_receive+0x5ec>)
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a92:	4b24      	ldr	r3, [pc, #144]	@ (8008b24 <tcp_receive+0x5e8>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008a9a:	4b23      	ldr	r3, [pc, #140]	@ (8008b28 <tcp_receive+0x5ec>)
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d106      	bne.n	8008ab0 <tcp_receive+0x574>
 8008aa2:	4b22      	ldr	r3, [pc, #136]	@ (8008b2c <tcp_receive+0x5f0>)
 8008aa4:	f240 5294 	movw	r2, #1428	@ 0x594
 8008aa8:	4921      	ldr	r1, [pc, #132]	@ (8008b30 <tcp_receive+0x5f4>)
 8008aaa:	4822      	ldr	r0, [pc, #136]	@ (8008b34 <tcp_receive+0x5f8>)
 8008aac:	f005 f9c2 	bl	800de34 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d906      	bls.n	8008ac8 <tcp_receive+0x58c>
 8008aba:	4b1c      	ldr	r3, [pc, #112]	@ (8008b2c <tcp_receive+0x5f0>)
 8008abc:	f240 5295 	movw	r2, #1429	@ 0x595
 8008ac0:	491d      	ldr	r1, [pc, #116]	@ (8008b38 <tcp_receive+0x5fc>)
 8008ac2:	481c      	ldr	r0, [pc, #112]	@ (8008b34 <tcp_receive+0x5f8>)
 8008ac4:	f005 f9b6 	bl	800de34 <iprintf>
      off = (u16_t)off32;
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008ace:	4b16      	ldr	r3, [pc, #88]	@ (8008b28 <tcp_receive+0x5ec>)
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	891b      	ldrh	r3, [r3, #8]
 8008ad4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d906      	bls.n	8008aea <tcp_receive+0x5ae>
 8008adc:	4b13      	ldr	r3, [pc, #76]	@ (8008b2c <tcp_receive+0x5f0>)
 8008ade:	f240 5297 	movw	r2, #1431	@ 0x597
 8008ae2:	4916      	ldr	r1, [pc, #88]	@ (8008b3c <tcp_receive+0x600>)
 8008ae4:	4813      	ldr	r0, [pc, #76]	@ (8008b34 <tcp_receive+0x5f8>)
 8008ae6:	f005 f9a5 	bl	800de34 <iprintf>
      inseg.len -= off;
 8008aea:	4b0f      	ldr	r3, [pc, #60]	@ (8008b28 <tcp_receive+0x5ec>)
 8008aec:	891a      	ldrh	r2, [r3, #8]
 8008aee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	4b0c      	ldr	r3, [pc, #48]	@ (8008b28 <tcp_receive+0x5ec>)
 8008af8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008afa:	4b0b      	ldr	r3, [pc, #44]	@ (8008b28 <tcp_receive+0x5ec>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	891a      	ldrh	r2, [r3, #8]
 8008b00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8008b08:	e02a      	b.n	8008b60 <tcp_receive+0x624>
 8008b0a:	bf00      	nop
 8008b0c:	08010218 	.word	0x08010218
 8008b10:	08010220 	.word	0x08010220
 8008b14:	20008290 	.word	0x20008290
 8008b18:	2000828c 	.word	0x2000828c
 8008b1c:	20008250 	.word	0x20008250
 8008b20:	20008292 	.word	0x20008292
 8008b24:	20008288 	.word	0x20008288
 8008b28:	20008268 	.word	0x20008268
 8008b2c:	0800feb0 	.word	0x0800feb0
 8008b30:	08010228 	.word	0x08010228
 8008b34:	0800fefc 	.word	0x0800fefc
 8008b38:	08010238 	.word	0x08010238
 8008b3c:	08010248 	.word	0x08010248
        off -= p->len;
 8008b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b42:	895b      	ldrh	r3, [r3, #10]
 8008b44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b50:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008b52:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b56:	2200      	movs	r2, #0
 8008b58:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8008b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b62:	895b      	ldrh	r3, [r3, #10]
 8008b64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d8e9      	bhi.n	8008b40 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008b6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008b70:	4619      	mov	r1, r3
 8008b72:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008b74:	f7fc fb6a 	bl	800524c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b7c:	4a90      	ldr	r2, [pc, #576]	@ (8008dc0 <tcp_receive+0x884>)
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	4b90      	ldr	r3, [pc, #576]	@ (8008dc4 <tcp_receive+0x888>)
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	4a8e      	ldr	r2, [pc, #568]	@ (8008dc0 <tcp_receive+0x884>)
 8008b86:	6812      	ldr	r2, [r2, #0]
 8008b88:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008b8a:	e00d      	b.n	8008ba8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008b8c:	4b8c      	ldr	r3, [pc, #560]	@ (8008dc0 <tcp_receive+0x884>)
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	da06      	bge.n	8008ba8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	8b5b      	ldrh	r3, [r3, #26]
 8008b9e:	f043 0302 	orr.w	r3, r3, #2
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008ba8:	4b85      	ldr	r3, [pc, #532]	@ (8008dc0 <tcp_receive+0x884>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f2c0 8427 	blt.w	8009406 <tcp_receive+0xeca>
 8008bb8:	4b81      	ldr	r3, [pc, #516]	@ (8008dc0 <tcp_receive+0x884>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008bc4:	440b      	add	r3, r1
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	3301      	adds	r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f300 841b 	bgt.w	8009406 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bd4:	4b7a      	ldr	r3, [pc, #488]	@ (8008dc0 <tcp_receive+0x884>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	f040 8298 	bne.w	800910e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008bde:	4b79      	ldr	r3, [pc, #484]	@ (8008dc4 <tcp_receive+0x888>)
 8008be0:	891c      	ldrh	r4, [r3, #8]
 8008be2:	4b78      	ldr	r3, [pc, #480]	@ (8008dc4 <tcp_receive+0x888>)
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	899b      	ldrh	r3, [r3, #12]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fb f856 	bl	8003c9c <lwip_htons>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 0303 	and.w	r3, r3, #3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <tcp_receive+0x6c4>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <tcp_receive+0x6c6>
 8008c00:	2300      	movs	r3, #0
 8008c02:	4423      	add	r3, r4
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	4b70      	ldr	r3, [pc, #448]	@ (8008dc8 <tcp_receive+0x88c>)
 8008c08:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008c0e:	4b6e      	ldr	r3, [pc, #440]	@ (8008dc8 <tcp_receive+0x88c>)
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d274      	bcs.n	8008d00 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008c16:	4b6b      	ldr	r3, [pc, #428]	@ (8008dc4 <tcp_receive+0x888>)
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	899b      	ldrh	r3, [r3, #12]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fb f83c 	bl	8003c9c <lwip_htons>
 8008c24:	4603      	mov	r3, r0
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01e      	beq.n	8008c6e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008c30:	4b64      	ldr	r3, [pc, #400]	@ (8008dc4 <tcp_receive+0x888>)
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	899b      	ldrh	r3, [r3, #12]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	b21b      	sxth	r3, r3
 8008c3a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008c3e:	b21c      	sxth	r4, r3
 8008c40:	4b60      	ldr	r3, [pc, #384]	@ (8008dc4 <tcp_receive+0x888>)
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	899b      	ldrh	r3, [r3, #12]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fb f827 	bl	8003c9c <lwip_htons>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fb f81f 	bl	8003c9c <lwip_htons>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	b21b      	sxth	r3, r3
 8008c62:	4323      	orrs	r3, r4
 8008c64:	b21a      	sxth	r2, r3
 8008c66:	4b57      	ldr	r3, [pc, #348]	@ (8008dc4 <tcp_receive+0x888>)
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	b292      	uxth	r2, r2
 8008c6c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008c72:	4b54      	ldr	r3, [pc, #336]	@ (8008dc4 <tcp_receive+0x888>)
 8008c74:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008c76:	4b53      	ldr	r3, [pc, #332]	@ (8008dc4 <tcp_receive+0x888>)
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	899b      	ldrh	r3, [r3, #12]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fb f80c 	bl	8003c9c <lwip_htons>
 8008c84:	4603      	mov	r3, r0
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	f003 0302 	and.w	r3, r3, #2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d005      	beq.n	8008c9c <tcp_receive+0x760>
            inseg.len -= 1;
 8008c90:	4b4c      	ldr	r3, [pc, #304]	@ (8008dc4 <tcp_receive+0x888>)
 8008c92:	891b      	ldrh	r3, [r3, #8]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	4b4a      	ldr	r3, [pc, #296]	@ (8008dc4 <tcp_receive+0x888>)
 8008c9a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008c9c:	4b49      	ldr	r3, [pc, #292]	@ (8008dc4 <tcp_receive+0x888>)
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4a48      	ldr	r2, [pc, #288]	@ (8008dc4 <tcp_receive+0x888>)
 8008ca2:	8912      	ldrh	r2, [r2, #8]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fc f9d0 	bl	800504c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008cac:	4b45      	ldr	r3, [pc, #276]	@ (8008dc4 <tcp_receive+0x888>)
 8008cae:	891c      	ldrh	r4, [r3, #8]
 8008cb0:	4b44      	ldr	r3, [pc, #272]	@ (8008dc4 <tcp_receive+0x888>)
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	899b      	ldrh	r3, [r3, #12]
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fa ffef 	bl	8003c9c <lwip_htons>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	f003 0303 	and.w	r3, r3, #3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <tcp_receive+0x792>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e000      	b.n	8008cd0 <tcp_receive+0x794>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	4423      	add	r3, r4
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8008dc8 <tcp_receive+0x88c>)
 8008cd6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8008dc8 <tcp_receive+0x88c>)
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	4b38      	ldr	r3, [pc, #224]	@ (8008dc0 <tcp_receive+0x884>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	441a      	add	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce8:	6879      	ldr	r1, [r7, #4]
 8008cea:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008cec:	440b      	add	r3, r1
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d006      	beq.n	8008d00 <tcp_receive+0x7c4>
 8008cf2:	4b36      	ldr	r3, [pc, #216]	@ (8008dcc <tcp_receive+0x890>)
 8008cf4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8008cf8:	4935      	ldr	r1, [pc, #212]	@ (8008dd0 <tcp_receive+0x894>)
 8008cfa:	4836      	ldr	r0, [pc, #216]	@ (8008dd4 <tcp_receive+0x898>)
 8008cfc:	f005 f89a 	bl	800de34 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 80e6 	beq.w	8008ed6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8008dc4 <tcp_receive+0x888>)
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	899b      	ldrh	r3, [r3, #12]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fa ffc2 	bl	8003c9c <lwip_htons>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d010      	beq.n	8008d46 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008d24:	e00a      	b.n	8008d3c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d2a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f7fd fd93 	bl	8006862 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1f0      	bne.n	8008d26 <tcp_receive+0x7ea>
 8008d44:	e0c7      	b.n	8008ed6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008d4c:	e051      	b.n	8008df2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	899b      	ldrh	r3, [r3, #12]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fa ffa0 	bl	8003c9c <lwip_htons>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d03c      	beq.n	8008de2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008d68:	4b16      	ldr	r3, [pc, #88]	@ (8008dc4 <tcp_receive+0x888>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	899b      	ldrh	r3, [r3, #12]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fa ff93 	bl	8003c9c <lwip_htons>
 8008d76:	4603      	mov	r3, r0
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d12f      	bne.n	8008de2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008d82:	4b10      	ldr	r3, [pc, #64]	@ (8008dc4 <tcp_receive+0x888>)
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	899b      	ldrh	r3, [r3, #12]
 8008d88:	b29c      	uxth	r4, r3
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	f7fa ff86 	bl	8003c9c <lwip_htons>
 8008d90:	4603      	mov	r3, r0
 8008d92:	461a      	mov	r2, r3
 8008d94:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc4 <tcp_receive+0x888>)
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	4322      	orrs	r2, r4
 8008d9a:	b292      	uxth	r2, r2
 8008d9c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008d9e:	4b09      	ldr	r3, [pc, #36]	@ (8008dc4 <tcp_receive+0x888>)
 8008da0:	891c      	ldrh	r4, [r3, #8]
 8008da2:	4b08      	ldr	r3, [pc, #32]	@ (8008dc4 <tcp_receive+0x888>)
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	899b      	ldrh	r3, [r3, #12]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fa ff76 	bl	8003c9c <lwip_htons>
 8008db0:	4603      	mov	r3, r0
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	f003 0303 	and.w	r3, r3, #3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00d      	beq.n	8008dd8 <tcp_receive+0x89c>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e00c      	b.n	8008dda <tcp_receive+0x89e>
 8008dc0:	20008288 	.word	0x20008288
 8008dc4:	20008268 	.word	0x20008268
 8008dc8:	20008292 	.word	0x20008292
 8008dcc:	0800feb0 	.word	0x0800feb0
 8008dd0:	08010258 	.word	0x08010258
 8008dd4:	0800fefc 	.word	0x0800fefc
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4423      	add	r3, r4
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	4b98      	ldr	r3, [pc, #608]	@ (8009040 <tcp_receive+0xb04>)
 8008de0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8008dec:	6938      	ldr	r0, [r7, #16]
 8008dee:	f7fd fd38 	bl	8006862 <tcp_seg_free>
            while (next &&
 8008df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00e      	beq.n	8008e16 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008df8:	4b91      	ldr	r3, [pc, #580]	@ (8009040 <tcp_receive+0xb04>)
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	4b91      	ldr	r3, [pc, #580]	@ (8009044 <tcp_receive+0xb08>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	441a      	add	r2, r3
 8008e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e0c:	8909      	ldrh	r1, [r1, #8]
 8008e0e:	440b      	add	r3, r1
 8008e10:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	da9b      	bge.n	8008d4e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d059      	beq.n	8008ed0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008e1c:	4b88      	ldr	r3, [pc, #544]	@ (8009040 <tcp_receive+0xb04>)
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	4b88      	ldr	r3, [pc, #544]	@ (8009044 <tcp_receive+0xb08>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	441a      	add	r2, r3
 8008e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	dd4d      	ble.n	8008ed0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	4b81      	ldr	r3, [pc, #516]	@ (8009044 <tcp_receive+0xb08>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	4b80      	ldr	r3, [pc, #512]	@ (8009048 <tcp_receive+0xb0c>)
 8008e48:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8009048 <tcp_receive+0xb0c>)
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	899b      	ldrh	r3, [r3, #12]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fa ff22 	bl	8003c9c <lwip_htons>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	f003 0302 	and.w	r3, r3, #2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d005      	beq.n	8008e70 <tcp_receive+0x934>
                inseg.len -= 1;
 8008e64:	4b78      	ldr	r3, [pc, #480]	@ (8009048 <tcp_receive+0xb0c>)
 8008e66:	891b      	ldrh	r3, [r3, #8]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	4b76      	ldr	r3, [pc, #472]	@ (8009048 <tcp_receive+0xb0c>)
 8008e6e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008e70:	4b75      	ldr	r3, [pc, #468]	@ (8009048 <tcp_receive+0xb0c>)
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	4a74      	ldr	r2, [pc, #464]	@ (8009048 <tcp_receive+0xb0c>)
 8008e76:	8912      	ldrh	r2, [r2, #8]
 8008e78:	4611      	mov	r1, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fc f8e6 	bl	800504c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008e80:	4b71      	ldr	r3, [pc, #452]	@ (8009048 <tcp_receive+0xb0c>)
 8008e82:	891c      	ldrh	r4, [r3, #8]
 8008e84:	4b70      	ldr	r3, [pc, #448]	@ (8009048 <tcp_receive+0xb0c>)
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	899b      	ldrh	r3, [r3, #12]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fa ff05 	bl	8003c9c <lwip_htons>
 8008e92:	4603      	mov	r3, r0
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <tcp_receive+0x966>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e000      	b.n	8008ea4 <tcp_receive+0x968>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	4423      	add	r3, r4
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	4b65      	ldr	r3, [pc, #404]	@ (8009040 <tcp_receive+0xb04>)
 8008eaa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008eac:	4b64      	ldr	r3, [pc, #400]	@ (8009040 <tcp_receive+0xb04>)
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	4b64      	ldr	r3, [pc, #400]	@ (8009044 <tcp_receive+0xb08>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	441a      	add	r2, r3
 8008eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d006      	beq.n	8008ed0 <tcp_receive+0x994>
 8008ec2:	4b62      	ldr	r3, [pc, #392]	@ (800904c <tcp_receive+0xb10>)
 8008ec4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8008ec8:	4961      	ldr	r1, [pc, #388]	@ (8009050 <tcp_receive+0xb14>)
 8008eca:	4862      	ldr	r0, [pc, #392]	@ (8009054 <tcp_receive+0xb18>)
 8008ecc:	f004 ffb2 	bl	800de34 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ed4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008ed6:	4b5a      	ldr	r3, [pc, #360]	@ (8009040 <tcp_receive+0xb04>)
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	4b59      	ldr	r3, [pc, #356]	@ (8009044 <tcp_receive+0xb08>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	441a      	add	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008eea:	4b55      	ldr	r3, [pc, #340]	@ (8009040 <tcp_receive+0xb04>)
 8008eec:	881b      	ldrh	r3, [r3, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d206      	bcs.n	8008f00 <tcp_receive+0x9c4>
 8008ef2:	4b56      	ldr	r3, [pc, #344]	@ (800904c <tcp_receive+0xb10>)
 8008ef4:	f240 6207 	movw	r2, #1543	@ 0x607
 8008ef8:	4957      	ldr	r1, [pc, #348]	@ (8009058 <tcp_receive+0xb1c>)
 8008efa:	4856      	ldr	r0, [pc, #344]	@ (8009054 <tcp_receive+0xb18>)
 8008efc:	f004 ff9a 	bl	800de34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008f04:	4b4e      	ldr	r3, [pc, #312]	@ (8009040 <tcp_receive+0xb04>)
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7fc ffc5 	bl	8005ea0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008f16:	4b4c      	ldr	r3, [pc, #304]	@ (8009048 <tcp_receive+0xb0c>)
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	891b      	ldrh	r3, [r3, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d006      	beq.n	8008f2e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8008f20:	4b49      	ldr	r3, [pc, #292]	@ (8009048 <tcp_receive+0xb0c>)
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	4a4d      	ldr	r2, [pc, #308]	@ (800905c <tcp_receive+0xb20>)
 8008f26:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008f28:	4b47      	ldr	r3, [pc, #284]	@ (8009048 <tcp_receive+0xb0c>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008f2e:	4b46      	ldr	r3, [pc, #280]	@ (8009048 <tcp_receive+0xb0c>)
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	899b      	ldrh	r3, [r3, #12]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fa feb0 	bl	8003c9c <lwip_htons>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 80b8 	beq.w	80090ba <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008f4a:	4b45      	ldr	r3, [pc, #276]	@ (8009060 <tcp_receive+0xb24>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	f043 0320 	orr.w	r3, r3, #32
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	4b42      	ldr	r3, [pc, #264]	@ (8009060 <tcp_receive+0xb24>)
 8008f56:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008f58:	e0af      	b.n	80090ba <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f5e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a36      	ldr	r2, [pc, #216]	@ (8009044 <tcp_receive+0xb08>)
 8008f6a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	891b      	ldrh	r3, [r3, #8]
 8008f70:	461c      	mov	r4, r3
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	899b      	ldrh	r3, [r3, #12]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fa fe8e 	bl	8003c9c <lwip_htons>
 8008f80:	4603      	mov	r3, r0
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	f003 0303 	and.w	r3, r3, #3
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <tcp_receive+0xa54>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e000      	b.n	8008f92 <tcp_receive+0xa56>
 8008f90:	2300      	movs	r3, #0
 8008f92:	191a      	adds	r2, r3, r4
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f98:	441a      	add	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fa2:	461c      	mov	r4, r3
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	891b      	ldrh	r3, [r3, #8]
 8008fa8:	461d      	mov	r5, r3
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	899b      	ldrh	r3, [r3, #12]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fa fe72 	bl	8003c9c <lwip_htons>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f003 0303 	and.w	r3, r3, #3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <tcp_receive+0xa8c>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e000      	b.n	8008fca <tcp_receive+0xa8e>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	442b      	add	r3, r5
 8008fcc:	429c      	cmp	r4, r3
 8008fce:	d206      	bcs.n	8008fde <tcp_receive+0xaa2>
 8008fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800904c <tcp_receive+0xb10>)
 8008fd2:	f240 622b 	movw	r2, #1579	@ 0x62b
 8008fd6:	4923      	ldr	r1, [pc, #140]	@ (8009064 <tcp_receive+0xb28>)
 8008fd8:	481e      	ldr	r0, [pc, #120]	@ (8009054 <tcp_receive+0xb18>)
 8008fda:	f004 ff2b 	bl	800de34 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	891b      	ldrh	r3, [r3, #8]
 8008fe2:	461c      	mov	r4, r3
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	899b      	ldrh	r3, [r3, #12]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fa fe55 	bl	8003c9c <lwip_htons>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <tcp_receive+0xac6>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e000      	b.n	8009004 <tcp_receive+0xac8>
 8009002:	2300      	movs	r3, #0
 8009004:	1919      	adds	r1, r3, r4
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800900a:	b28b      	uxth	r3, r1
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	b29a      	uxth	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7fc ff43 	bl	8005ea0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	891b      	ldrh	r3, [r3, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d028      	beq.n	8009076 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009024:	4b0d      	ldr	r3, [pc, #52]	@ (800905c <tcp_receive+0xb20>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d01d      	beq.n	8009068 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800902c:	4b0b      	ldr	r3, [pc, #44]	@ (800905c <tcp_receive+0xb20>)
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	4619      	mov	r1, r3
 8009036:	4610      	mov	r0, r2
 8009038:	f7fc fa50 	bl	80054dc <pbuf_cat>
 800903c:	e018      	b.n	8009070 <tcp_receive+0xb34>
 800903e:	bf00      	nop
 8009040:	20008292 	.word	0x20008292
 8009044:	20008288 	.word	0x20008288
 8009048:	20008268 	.word	0x20008268
 800904c:	0800feb0 	.word	0x0800feb0
 8009050:	08010290 	.word	0x08010290
 8009054:	0800fefc 	.word	0x0800fefc
 8009058:	080102cc 	.word	0x080102cc
 800905c:	20008298 	.word	0x20008298
 8009060:	20008295 	.word	0x20008295
 8009064:	080102ec 	.word	0x080102ec
            } else {
              recv_data = cseg->p;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	4a70      	ldr	r2, [pc, #448]	@ (8009230 <tcp_receive+0xcf4>)
 800906e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	2200      	movs	r2, #0
 8009074:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	899b      	ldrh	r3, [r3, #12]
 800907c:	b29b      	uxth	r3, r3
 800907e:	4618      	mov	r0, r3
 8009080:	f7fa fe0c 	bl	8003c9c <lwip_htons>
 8009084:	4603      	mov	r3, r0
 8009086:	b2db      	uxtb	r3, r3
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00d      	beq.n	80090ac <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009090:	4b68      	ldr	r3, [pc, #416]	@ (8009234 <tcp_receive+0xcf8>)
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	f043 0320 	orr.w	r3, r3, #32
 8009098:	b2da      	uxtb	r2, r3
 800909a:	4b66      	ldr	r3, [pc, #408]	@ (8009234 <tcp_receive+0xcf8>)
 800909c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	7d1b      	ldrb	r3, [r3, #20]
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d102      	bne.n	80090ac <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2207      	movs	r2, #7
 80090aa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80090b4:	68b8      	ldr	r0, [r7, #8]
 80090b6:	f7fd fbd4 	bl	8006862 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d008      	beq.n	80090d4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80090ce:	429a      	cmp	r2, r3
 80090d0:	f43f af43 	beq.w	8008f5a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	8b5b      	ldrh	r3, [r3, #26]
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00e      	beq.n	80090fe <tcp_receive+0xbc2>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	8b5b      	ldrh	r3, [r3, #26]
 80090e4:	f023 0301 	bic.w	r3, r3, #1
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	835a      	strh	r2, [r3, #26]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	8b5b      	ldrh	r3, [r3, #26]
 80090f2:	f043 0302 	orr.w	r3, r3, #2
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80090fc:	e187      	b.n	800940e <tcp_receive+0xed2>
        tcp_ack(pcb);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	8b5b      	ldrh	r3, [r3, #26]
 8009102:	f043 0301 	orr.w	r3, r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800910c:	e17f      	b.n	800940e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009112:	2b00      	cmp	r3, #0
 8009114:	d106      	bne.n	8009124 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009116:	4848      	ldr	r0, [pc, #288]	@ (8009238 <tcp_receive+0xcfc>)
 8009118:	f7fd fbbc 	bl	8006894 <tcp_seg_copy>
 800911c:	4602      	mov	r2, r0
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	675a      	str	r2, [r3, #116]	@ 0x74
 8009122:	e16c      	b.n	80093fe <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009124:	2300      	movs	r3, #0
 8009126:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800912c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800912e:	e156      	b.n	80093de <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8009130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	4b41      	ldr	r3, [pc, #260]	@ (800923c <tcp_receive+0xd00>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d11d      	bne.n	800917a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800913e:	4b3e      	ldr	r3, [pc, #248]	@ (8009238 <tcp_receive+0xcfc>)
 8009140:	891a      	ldrh	r2, [r3, #8]
 8009142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009144:	891b      	ldrh	r3, [r3, #8]
 8009146:	429a      	cmp	r2, r3
 8009148:	f240 814e 	bls.w	80093e8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800914c:	483a      	ldr	r0, [pc, #232]	@ (8009238 <tcp_receive+0xcfc>)
 800914e:	f7fd fba1 	bl	8006894 <tcp_seg_copy>
 8009152:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 8148 	beq.w	80093ec <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800915c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	e002      	b.n	8009170 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009170:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009172:	6978      	ldr	r0, [r7, #20]
 8009174:	f7ff f8de 	bl	8008334 <tcp_oos_insert_segment>
                }
                break;
 8009178:	e138      	b.n	80093ec <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800917a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800917c:	2b00      	cmp	r3, #0
 800917e:	d117      	bne.n	80091b0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009180:	4b2e      	ldr	r3, [pc, #184]	@ (800923c <tcp_receive+0xd00>)
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	da57      	bge.n	8009240 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009190:	4829      	ldr	r0, [pc, #164]	@ (8009238 <tcp_receive+0xcfc>)
 8009192:	f7fd fb7f 	bl	8006894 <tcp_seg_copy>
 8009196:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 8128 	beq.w	80093f0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80091a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091a8:	69b8      	ldr	r0, [r7, #24]
 80091aa:	f7ff f8c3 	bl	8008334 <tcp_oos_insert_segment>
                  }
                  break;
 80091ae:	e11f      	b.n	80093f0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80091b0:	4b22      	ldr	r3, [pc, #136]	@ (800923c <tcp_receive+0xd00>)
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	3b01      	subs	r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	db3e      	blt.n	8009240 <tcp_receive+0xd04>
 80091c2:	4b1e      	ldr	r3, [pc, #120]	@ (800923c <tcp_receive+0xd00>)
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	3301      	adds	r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dc35      	bgt.n	8009240 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80091d4:	4818      	ldr	r0, [pc, #96]	@ (8009238 <tcp_receive+0xcfc>)
 80091d6:	f7fd fb5d 	bl	8006894 <tcp_seg_copy>
 80091da:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 8108 	beq.w	80093f4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80091e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091ec:	8912      	ldrh	r2, [r2, #8]
 80091ee:	441a      	add	r2, r3
 80091f0:	4b12      	ldr	r3, [pc, #72]	@ (800923c <tcp_receive+0xd00>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dd12      	ble.n	8009220 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80091fa:	4b10      	ldr	r3, [pc, #64]	@ (800923c <tcp_receive+0xd00>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	b29a      	uxth	r2, r3
 8009200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	b29b      	uxth	r3, r3
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	b29a      	uxth	r2, r3
 800920c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800920e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009216:	891b      	ldrh	r3, [r3, #8]
 8009218:	4619      	mov	r1, r3
 800921a:	4610      	mov	r0, r2
 800921c:	f7fb ff16 	bl	800504c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009222:	69fa      	ldr	r2, [r7, #28]
 8009224:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009226:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009228:	69f8      	ldr	r0, [r7, #28]
 800922a:	f7ff f883 	bl	8008334 <tcp_oos_insert_segment>
                  }
                  break;
 800922e:	e0e1      	b.n	80093f4 <tcp_receive+0xeb8>
 8009230:	20008298 	.word	0x20008298
 8009234:	20008295 	.word	0x20008295
 8009238:	20008268 	.word	0x20008268
 800923c:	20008288 	.word	0x20008288
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009242:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	f040 80c5 	bne.w	80093d8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800924e:	4b7f      	ldr	r3, [pc, #508]	@ (800944c <tcp_receive+0xf10>)
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800925a:	2b00      	cmp	r3, #0
 800925c:	f340 80bc 	ble.w	80093d8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	899b      	ldrh	r3, [r3, #12]
 8009266:	b29b      	uxth	r3, r3
 8009268:	4618      	mov	r0, r3
 800926a:	f7fa fd17 	bl	8003c9c <lwip_htons>
 800926e:	4603      	mov	r3, r0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	f040 80be 	bne.w	80093f8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800927c:	4874      	ldr	r0, [pc, #464]	@ (8009450 <tcp_receive+0xf14>)
 800927e:	f7fd fb09 	bl	8006894 <tcp_seg_copy>
 8009282:	4602      	mov	r2, r0
 8009284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009286:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 80b5 	beq.w	80093fc <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800929a:	8912      	ldrh	r2, [r2, #8]
 800929c:	441a      	add	r2, r3
 800929e:	4b6b      	ldr	r3, [pc, #428]	@ (800944c <tcp_receive+0xf10>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dd12      	ble.n	80092ce <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80092a8:	4b68      	ldr	r3, [pc, #416]	@ (800944c <tcp_receive+0xf10>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80092be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c4:	891b      	ldrh	r3, [r3, #8]
 80092c6:	4619      	mov	r1, r3
 80092c8:	4610      	mov	r0, r2
 80092ca:	f7fb febf 	bl	800504c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80092ce:	4b61      	ldr	r3, [pc, #388]	@ (8009454 <tcp_receive+0xf18>)
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	4b5d      	ldr	r3, [pc, #372]	@ (800944c <tcp_receive+0xf10>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	441a      	add	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80092e2:	440b      	add	r3, r1
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f340 8088 	ble.w	80093fc <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80092ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	899b      	ldrh	r3, [r3, #12]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fa fcd0 	bl	8003c9c <lwip_htons>
 80092fc:	4603      	mov	r3, r0
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	2b00      	cmp	r3, #0
 8009306:	d021      	beq.n	800934c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	899b      	ldrh	r3, [r3, #12]
 8009310:	b29b      	uxth	r3, r3
 8009312:	b21b      	sxth	r3, r3
 8009314:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009318:	b21c      	sxth	r4, r3
 800931a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	899b      	ldrh	r3, [r3, #12]
 8009322:	b29b      	uxth	r3, r3
 8009324:	4618      	mov	r0, r3
 8009326:	f7fa fcb9 	bl	8003c9c <lwip_htons>
 800932a:	4603      	mov	r3, r0
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009332:	b29b      	uxth	r3, r3
 8009334:	4618      	mov	r0, r3
 8009336:	f7fa fcb1 	bl	8003c9c <lwip_htons>
 800933a:	4603      	mov	r3, r0
 800933c:	b21b      	sxth	r3, r3
 800933e:	4323      	orrs	r3, r4
 8009340:	b21a      	sxth	r2, r3
 8009342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	b292      	uxth	r2, r2
 800934a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009350:	b29a      	uxth	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009356:	4413      	add	r3, r2
 8009358:	b299      	uxth	r1, r3
 800935a:	4b3c      	ldr	r3, [pc, #240]	@ (800944c <tcp_receive+0xf10>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	b29a      	uxth	r2, r3
 8009360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	1a8a      	subs	r2, r1, r2
 8009366:	b292      	uxth	r2, r2
 8009368:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800936a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	891b      	ldrh	r3, [r3, #8]
 8009376:	4619      	mov	r1, r3
 8009378:	4610      	mov	r0, r2
 800937a:	f7fb fe67 	bl	800504c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800937e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	891c      	ldrh	r4, [r3, #8]
 8009384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	899b      	ldrh	r3, [r3, #12]
 800938c:	b29b      	uxth	r3, r3
 800938e:	4618      	mov	r0, r3
 8009390:	f7fa fc84 	bl	8003c9c <lwip_htons>
 8009394:	4603      	mov	r3, r0
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f003 0303 	and.w	r3, r3, #3
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <tcp_receive+0xe68>
 80093a0:	2301      	movs	r3, #1
 80093a2:	e000      	b.n	80093a6 <tcp_receive+0xe6a>
 80093a4:	2300      	movs	r3, #0
 80093a6:	4423      	add	r3, r4
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009454 <tcp_receive+0xf18>)
 80093ac:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80093ae:	4b29      	ldr	r3, [pc, #164]	@ (8009454 <tcp_receive+0xf18>)
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	4b25      	ldr	r3, [pc, #148]	@ (800944c <tcp_receive+0xf10>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	441a      	add	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80093c2:	440b      	add	r3, r1
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d019      	beq.n	80093fc <tcp_receive+0xec0>
 80093c8:	4b23      	ldr	r3, [pc, #140]	@ (8009458 <tcp_receive+0xf1c>)
 80093ca:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80093ce:	4923      	ldr	r1, [pc, #140]	@ (800945c <tcp_receive+0xf20>)
 80093d0:	4823      	ldr	r0, [pc, #140]	@ (8009460 <tcp_receive+0xf24>)
 80093d2:	f004 fd2f 	bl	800de34 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80093d6:	e011      	b.n	80093fc <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80093d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f47f aea5 	bne.w	8009130 <tcp_receive+0xbf4>
 80093e6:	e00a      	b.n	80093fe <tcp_receive+0xec2>
                break;
 80093e8:	bf00      	nop
 80093ea:	e008      	b.n	80093fe <tcp_receive+0xec2>
                break;
 80093ec:	bf00      	nop
 80093ee:	e006      	b.n	80093fe <tcp_receive+0xec2>
                  break;
 80093f0:	bf00      	nop
 80093f2:	e004      	b.n	80093fe <tcp_receive+0xec2>
                  break;
 80093f4:	bf00      	nop
 80093f6:	e002      	b.n	80093fe <tcp_receive+0xec2>
                  break;
 80093f8:	bf00      	nop
 80093fa:	e000      	b.n	80093fe <tcp_receive+0xec2>
                break;
 80093fc:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 fa30 	bl	800a864 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009404:	e003      	b.n	800940e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f001 fa2c 	bl	800a864 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800940c:	e01a      	b.n	8009444 <tcp_receive+0xf08>
 800940e:	e019      	b.n	8009444 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009410:	4b0e      	ldr	r3, [pc, #56]	@ (800944c <tcp_receive+0xf10>)
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	db0a      	blt.n	8009434 <tcp_receive+0xef8>
 800941e:	4b0b      	ldr	r3, [pc, #44]	@ (800944c <tcp_receive+0xf10>)
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800942a:	440b      	add	r3, r1
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	3301      	adds	r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	dd07      	ble.n	8009444 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	8b5b      	ldrh	r3, [r3, #26]
 8009438:	f043 0302 	orr.w	r3, r3, #2
 800943c:	b29a      	uxth	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009442:	e7ff      	b.n	8009444 <tcp_receive+0xf08>
 8009444:	bf00      	nop
 8009446:	3750      	adds	r7, #80	@ 0x50
 8009448:	46bd      	mov	sp, r7
 800944a:	bdb0      	pop	{r4, r5, r7, pc}
 800944c:	20008288 	.word	0x20008288
 8009450:	20008268 	.word	0x20008268
 8009454:	20008292 	.word	0x20008292
 8009458:	0800feb0 	.word	0x0800feb0
 800945c:	08010258 	.word	0x08010258
 8009460:	0800fefc 	.word	0x0800fefc

08009464 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800946a:	4b15      	ldr	r3, [pc, #84]	@ (80094c0 <tcp_get_next_optbyte+0x5c>)
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	b291      	uxth	r1, r2
 8009472:	4a13      	ldr	r2, [pc, #76]	@ (80094c0 <tcp_get_next_optbyte+0x5c>)
 8009474:	8011      	strh	r1, [r2, #0]
 8009476:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009478:	4b12      	ldr	r3, [pc, #72]	@ (80094c4 <tcp_get_next_optbyte+0x60>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d004      	beq.n	800948a <tcp_get_next_optbyte+0x26>
 8009480:	4b11      	ldr	r3, [pc, #68]	@ (80094c8 <tcp_get_next_optbyte+0x64>)
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	88fa      	ldrh	r2, [r7, #6]
 8009486:	429a      	cmp	r2, r3
 8009488:	d208      	bcs.n	800949c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800948a:	4b10      	ldr	r3, [pc, #64]	@ (80094cc <tcp_get_next_optbyte+0x68>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3314      	adds	r3, #20
 8009490:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009492:	88fb      	ldrh	r3, [r7, #6]
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	4413      	add	r3, r2
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	e00b      	b.n	80094b4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	4b09      	ldr	r3, [pc, #36]	@ (80094c8 <tcp_get_next_optbyte+0x64>)
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80094aa:	4b06      	ldr	r3, [pc, #24]	@ (80094c4 <tcp_get_next_optbyte+0x60>)
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	797b      	ldrb	r3, [r7, #5]
 80094b0:	4413      	add	r3, r2
 80094b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	20008284 	.word	0x20008284
 80094c4:	20008280 	.word	0x20008280
 80094c8:	2000827e 	.word	0x2000827e
 80094cc:	20008278 	.word	0x20008278

080094d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <tcp_parseopt+0x1c>
 80094de:	4b32      	ldr	r3, [pc, #200]	@ (80095a8 <tcp_parseopt+0xd8>)
 80094e0:	f240 727d 	movw	r2, #1917	@ 0x77d
 80094e4:	4931      	ldr	r1, [pc, #196]	@ (80095ac <tcp_parseopt+0xdc>)
 80094e6:	4832      	ldr	r0, [pc, #200]	@ (80095b0 <tcp_parseopt+0xe0>)
 80094e8:	f004 fca4 	bl	800de34 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80094ec:	4b31      	ldr	r3, [pc, #196]	@ (80095b4 <tcp_parseopt+0xe4>)
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d056      	beq.n	80095a2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80094f4:	4b30      	ldr	r3, [pc, #192]	@ (80095b8 <tcp_parseopt+0xe8>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	801a      	strh	r2, [r3, #0]
 80094fa:	e046      	b.n	800958a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80094fc:	f7ff ffb2 	bl	8009464 <tcp_get_next_optbyte>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	2b02      	cmp	r3, #2
 8009508:	d006      	beq.n	8009518 <tcp_parseopt+0x48>
 800950a:	2b02      	cmp	r3, #2
 800950c:	dc2a      	bgt.n	8009564 <tcp_parseopt+0x94>
 800950e:	2b00      	cmp	r3, #0
 8009510:	d042      	beq.n	8009598 <tcp_parseopt+0xc8>
 8009512:	2b01      	cmp	r3, #1
 8009514:	d038      	beq.n	8009588 <tcp_parseopt+0xb8>
 8009516:	e025      	b.n	8009564 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009518:	f7ff ffa4 	bl	8009464 <tcp_get_next_optbyte>
 800951c:	4603      	mov	r3, r0
 800951e:	2b04      	cmp	r3, #4
 8009520:	d13c      	bne.n	800959c <tcp_parseopt+0xcc>
 8009522:	4b25      	ldr	r3, [pc, #148]	@ (80095b8 <tcp_parseopt+0xe8>)
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	3301      	adds	r3, #1
 8009528:	4a22      	ldr	r2, [pc, #136]	@ (80095b4 <tcp_parseopt+0xe4>)
 800952a:	8812      	ldrh	r2, [r2, #0]
 800952c:	4293      	cmp	r3, r2
 800952e:	da35      	bge.n	800959c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009530:	f7ff ff98 	bl	8009464 <tcp_get_next_optbyte>
 8009534:	4603      	mov	r3, r0
 8009536:	021b      	lsls	r3, r3, #8
 8009538:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800953a:	f7ff ff93 	bl	8009464 <tcp_get_next_optbyte>
 800953e:	4603      	mov	r3, r0
 8009540:	461a      	mov	r2, r3
 8009542:	89bb      	ldrh	r3, [r7, #12]
 8009544:	4313      	orrs	r3, r2
 8009546:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009548:	89bb      	ldrh	r3, [r7, #12]
 800954a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800954e:	d804      	bhi.n	800955a <tcp_parseopt+0x8a>
 8009550:	89bb      	ldrh	r3, [r7, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <tcp_parseopt+0x8a>
 8009556:	89ba      	ldrh	r2, [r7, #12]
 8009558:	e001      	b.n	800955e <tcp_parseopt+0x8e>
 800955a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8009562:	e012      	b.n	800958a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009564:	f7ff ff7e 	bl	8009464 <tcp_get_next_optbyte>
 8009568:	4603      	mov	r3, r0
 800956a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800956c:	7afb      	ldrb	r3, [r7, #11]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d916      	bls.n	80095a0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009572:	7afb      	ldrb	r3, [r7, #11]
 8009574:	b29a      	uxth	r2, r3
 8009576:	4b10      	ldr	r3, [pc, #64]	@ (80095b8 <tcp_parseopt+0xe8>)
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	4413      	add	r3, r2
 800957c:	b29b      	uxth	r3, r3
 800957e:	3b02      	subs	r3, #2
 8009580:	b29a      	uxth	r2, r3
 8009582:	4b0d      	ldr	r3, [pc, #52]	@ (80095b8 <tcp_parseopt+0xe8>)
 8009584:	801a      	strh	r2, [r3, #0]
 8009586:	e000      	b.n	800958a <tcp_parseopt+0xba>
          break;
 8009588:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800958a:	4b0b      	ldr	r3, [pc, #44]	@ (80095b8 <tcp_parseopt+0xe8>)
 800958c:	881a      	ldrh	r2, [r3, #0]
 800958e:	4b09      	ldr	r3, [pc, #36]	@ (80095b4 <tcp_parseopt+0xe4>)
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	429a      	cmp	r2, r3
 8009594:	d3b2      	bcc.n	80094fc <tcp_parseopt+0x2c>
 8009596:	e004      	b.n	80095a2 <tcp_parseopt+0xd2>
          return;
 8009598:	bf00      	nop
 800959a:	e002      	b.n	80095a2 <tcp_parseopt+0xd2>
            return;
 800959c:	bf00      	nop
 800959e:	e000      	b.n	80095a2 <tcp_parseopt+0xd2>
            return;
 80095a0:	bf00      	nop
      }
    }
  }
}
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	0800feb0 	.word	0x0800feb0
 80095ac:	08010314 	.word	0x08010314
 80095b0:	0800fefc 	.word	0x0800fefc
 80095b4:	2000827c 	.word	0x2000827c
 80095b8:	20008284 	.word	0x20008284

080095bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80095c0:	4b05      	ldr	r3, [pc, #20]	@ (80095d8 <tcp_trigger_input_pcb_close+0x1c>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	f043 0310 	orr.w	r3, r3, #16
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	4b03      	ldr	r3, [pc, #12]	@ (80095d8 <tcp_trigger_input_pcb_close+0x1c>)
 80095cc:	701a      	strb	r2, [r3, #0]
}
 80095ce:	bf00      	nop
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	20008295 	.word	0x20008295

080095dc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00a      	beq.n	8009604 <tcp_route+0x28>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	7a1b      	ldrb	r3, [r3, #8]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d006      	beq.n	8009604 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	7a1b      	ldrb	r3, [r3, #8]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fb fb4c 	bl	8004c98 <netif_get_by_index>
 8009600:	4603      	mov	r3, r0
 8009602:	e003      	b.n	800960c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f003 f929 	bl	800c85c <ip4_route>
 800960a:	4603      	mov	r3, r0
  }
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009614:	b590      	push	{r4, r7, lr}
 8009616:	b087      	sub	sp, #28
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	4613      	mov	r3, r2
 8009622:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d105      	bne.n	8009636 <tcp_create_segment+0x22>
 800962a:	4b43      	ldr	r3, [pc, #268]	@ (8009738 <tcp_create_segment+0x124>)
 800962c:	22a3      	movs	r2, #163	@ 0xa3
 800962e:	4943      	ldr	r1, [pc, #268]	@ (800973c <tcp_create_segment+0x128>)
 8009630:	4843      	ldr	r0, [pc, #268]	@ (8009740 <tcp_create_segment+0x12c>)
 8009632:	f004 fbff 	bl	800de34 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <tcp_create_segment+0x34>
 800963c:	4b3e      	ldr	r3, [pc, #248]	@ (8009738 <tcp_create_segment+0x124>)
 800963e:	22a4      	movs	r2, #164	@ 0xa4
 8009640:	4940      	ldr	r1, [pc, #256]	@ (8009744 <tcp_create_segment+0x130>)
 8009642:	483f      	ldr	r0, [pc, #252]	@ (8009740 <tcp_create_segment+0x12c>)
 8009644:	f004 fbf6 	bl	800de34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009648:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	b2db      	uxtb	r3, r3
 8009650:	f003 0304 	and.w	r3, r3, #4
 8009654:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009656:	2003      	movs	r0, #3
 8009658:	f7fa ff98 	bl	800458c <memp_malloc>
 800965c:	6138      	str	r0, [r7, #16]
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d104      	bne.n	800966e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009664:	68b8      	ldr	r0, [r7, #8]
 8009666:	f7fb fe77 	bl	8005358 <pbuf_free>
    return NULL;
 800966a:	2300      	movs	r3, #0
 800966c:	e060      	b.n	8009730 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8009674:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	891a      	ldrh	r2, [r3, #8]
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	b29b      	uxth	r3, r3
 800968a:	429a      	cmp	r2, r3
 800968c:	d205      	bcs.n	800969a <tcp_create_segment+0x86>
 800968e:	4b2a      	ldr	r3, [pc, #168]	@ (8009738 <tcp_create_segment+0x124>)
 8009690:	22b0      	movs	r2, #176	@ 0xb0
 8009692:	492d      	ldr	r1, [pc, #180]	@ (8009748 <tcp_create_segment+0x134>)
 8009694:	482a      	ldr	r0, [pc, #168]	@ (8009740 <tcp_create_segment+0x12c>)
 8009696:	f004 fbcd 	bl	800de34 <iprintf>
  seg->len = p->tot_len - optlen;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	891a      	ldrh	r2, [r3, #8]
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80096aa:	2114      	movs	r1, #20
 80096ac:	68b8      	ldr	r0, [r7, #8]
 80096ae:	f7fb fdbd 	bl	800522c <pbuf_add_header>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d004      	beq.n	80096c2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80096b8:	6938      	ldr	r0, [r7, #16]
 80096ba:	f7fd f8d2 	bl	8006862 <tcp_seg_free>
    return NULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	e036      	b.n	8009730 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8ada      	ldrh	r2, [r3, #22]
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	68dc      	ldr	r4, [r3, #12]
 80096d4:	4610      	mov	r0, r2
 80096d6:	f7fa fae1 	bl	8003c9c <lwip_htons>
 80096da:	4603      	mov	r3, r0
 80096dc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8b1a      	ldrh	r2, [r3, #24]
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	68dc      	ldr	r4, [r3, #12]
 80096e6:	4610      	mov	r0, r2
 80096e8:	f7fa fad8 	bl	8003c9c <lwip_htons>
 80096ec:	4603      	mov	r3, r0
 80096ee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	68dc      	ldr	r4, [r3, #12]
 80096f4:	6838      	ldr	r0, [r7, #0]
 80096f6:	f7fa fae7 	bl	8003cc8 <lwip_htonl>
 80096fa:	4603      	mov	r3, r0
 80096fc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	089b      	lsrs	r3, r3, #2
 8009702:	b2db      	uxtb	r3, r3
 8009704:	3305      	adds	r3, #5
 8009706:	b29b      	uxth	r3, r3
 8009708:	031b      	lsls	r3, r3, #12
 800970a:	b29a      	uxth	r2, r3
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	b29b      	uxth	r3, r3
 8009710:	4313      	orrs	r3, r2
 8009712:	b29a      	uxth	r2, r3
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	68dc      	ldr	r4, [r3, #12]
 8009718:	4610      	mov	r0, r2
 800971a:	f7fa fabf 	bl	8003c9c <lwip_htons>
 800971e:	4603      	mov	r3, r0
 8009720:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	749a      	strb	r2, [r3, #18]
 800972a:	2200      	movs	r2, #0
 800972c:	74da      	strb	r2, [r3, #19]
  return seg;
 800972e:	693b      	ldr	r3, [r7, #16]
}
 8009730:	4618      	mov	r0, r3
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	bd90      	pop	{r4, r7, pc}
 8009738:	08010330 	.word	0x08010330
 800973c:	08010364 	.word	0x08010364
 8009740:	08010384 	.word	0x08010384
 8009744:	080103ac 	.word	0x080103ac
 8009748:	080103d0 	.word	0x080103d0

0800974c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800974c:	b590      	push	{r4, r7, lr}
 800974e:	b08b      	sub	sp, #44	@ 0x2c
 8009750:	af02      	add	r7, sp, #8
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009758:	2300      	movs	r3, #0
 800975a:	61fb      	str	r3, [r7, #28]
 800975c:	2300      	movs	r3, #0
 800975e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009760:	2300      	movs	r3, #0
 8009762:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d106      	bne.n	8009778 <tcp_split_unsent_seg+0x2c>
 800976a:	4b95      	ldr	r3, [pc, #596]	@ (80099c0 <tcp_split_unsent_seg+0x274>)
 800976c:	f240 324b 	movw	r2, #843	@ 0x34b
 8009770:	4994      	ldr	r1, [pc, #592]	@ (80099c4 <tcp_split_unsent_seg+0x278>)
 8009772:	4895      	ldr	r0, [pc, #596]	@ (80099c8 <tcp_split_unsent_seg+0x27c>)
 8009774:	f004 fb5e 	bl	800de34 <iprintf>

  useg = pcb->unsent;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800977c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d102      	bne.n	800978a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009784:	f04f 33ff 	mov.w	r3, #4294967295
 8009788:	e116      	b.n	80099b8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800978a:	887b      	ldrh	r3, [r7, #2]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d109      	bne.n	80097a4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009790:	4b8b      	ldr	r3, [pc, #556]	@ (80099c0 <tcp_split_unsent_seg+0x274>)
 8009792:	f240 3253 	movw	r2, #851	@ 0x353
 8009796:	498d      	ldr	r1, [pc, #564]	@ (80099cc <tcp_split_unsent_seg+0x280>)
 8009798:	488b      	ldr	r0, [pc, #556]	@ (80099c8 <tcp_split_unsent_seg+0x27c>)
 800979a:	f004 fb4b 	bl	800de34 <iprintf>
    return ERR_VAL;
 800979e:	f06f 0305 	mvn.w	r3, #5
 80097a2:	e109      	b.n	80099b8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	891b      	ldrh	r3, [r3, #8]
 80097a8:	887a      	ldrh	r2, [r7, #2]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d301      	bcc.n	80097b2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	e102      	b.n	80099b8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80097b6:	887a      	ldrh	r2, [r7, #2]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d906      	bls.n	80097ca <tcp_split_unsent_seg+0x7e>
 80097bc:	4b80      	ldr	r3, [pc, #512]	@ (80099c0 <tcp_split_unsent_seg+0x274>)
 80097be:	f240 325b 	movw	r2, #859	@ 0x35b
 80097c2:	4983      	ldr	r1, [pc, #524]	@ (80099d0 <tcp_split_unsent_seg+0x284>)
 80097c4:	4880      	ldr	r0, [pc, #512]	@ (80099c8 <tcp_split_unsent_seg+0x27c>)
 80097c6:	f004 fb35 	bl	800de34 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	891b      	ldrh	r3, [r3, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d106      	bne.n	80097e0 <tcp_split_unsent_seg+0x94>
 80097d2:	4b7b      	ldr	r3, [pc, #492]	@ (80099c0 <tcp_split_unsent_seg+0x274>)
 80097d4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80097d8:	497e      	ldr	r1, [pc, #504]	@ (80099d4 <tcp_split_unsent_seg+0x288>)
 80097da:	487b      	ldr	r0, [pc, #492]	@ (80099c8 <tcp_split_unsent_seg+0x27c>)
 80097dc:	f004 fb2a 	bl	800de34 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	7a9b      	ldrb	r3, [r3, #10]
 80097e4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	891a      	ldrh	r2, [r3, #8]
 80097f6:	887b      	ldrh	r3, [r7, #2]
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	b29a      	uxth	r2, r3
 8009800:	89bb      	ldrh	r3, [r7, #12]
 8009802:	4413      	add	r3, r2
 8009804:	b29b      	uxth	r3, r3
 8009806:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800980a:	4619      	mov	r1, r3
 800980c:	2036      	movs	r0, #54	@ 0x36
 800980e:	f7fb fabf 	bl	8004d90 <pbuf_alloc>
 8009812:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	2b00      	cmp	r3, #0
 8009818:	f000 80b7 	beq.w	800998a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	891a      	ldrh	r2, [r3, #8]
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	891b      	ldrh	r3, [r3, #8]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	b29a      	uxth	r2, r3
 800982a:	887b      	ldrh	r3, [r7, #2]
 800982c:	4413      	add	r3, r2
 800982e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	6858      	ldr	r0, [r3, #4]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	18d1      	adds	r1, r2, r3
 800983c:	897b      	ldrh	r3, [r7, #10]
 800983e:	89ba      	ldrh	r2, [r7, #12]
 8009840:	f7fb ff84 	bl	800574c <pbuf_copy_partial>
 8009844:	4603      	mov	r3, r0
 8009846:	461a      	mov	r2, r3
 8009848:	89bb      	ldrh	r3, [r7, #12]
 800984a:	4293      	cmp	r3, r2
 800984c:	f040 809f 	bne.w	800998e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	899b      	ldrh	r3, [r3, #12]
 8009856:	b29b      	uxth	r3, r3
 8009858:	4618      	mov	r0, r3
 800985a:	f7fa fa1f 	bl	8003c9c <lwip_htons>
 800985e:	4603      	mov	r3, r0
 8009860:	b2db      	uxtb	r3, r3
 8009862:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009866:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009868:	2300      	movs	r3, #0
 800986a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800986c:	7efb      	ldrb	r3, [r7, #27]
 800986e:	f003 0308 	and.w	r3, r3, #8
 8009872:	2b00      	cmp	r3, #0
 8009874:	d007      	beq.n	8009886 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009876:	7efb      	ldrb	r3, [r7, #27]
 8009878:	f023 0308 	bic.w	r3, r3, #8
 800987c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800987e:	7ebb      	ldrb	r3, [r7, #26]
 8009880:	f043 0308 	orr.w	r3, r3, #8
 8009884:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009886:	7efb      	ldrb	r3, [r7, #27]
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	d007      	beq.n	80098a0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009890:	7efb      	ldrb	r3, [r7, #27]
 8009892:	f023 0301 	bic.w	r3, r3, #1
 8009896:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009898:	7ebb      	ldrb	r3, [r7, #26]
 800989a:	f043 0301 	orr.w	r3, r3, #1
 800989e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fa fa0e 	bl	8003cc8 <lwip_htonl>
 80098ac:	4602      	mov	r2, r0
 80098ae:	887b      	ldrh	r3, [r7, #2]
 80098b0:	18d1      	adds	r1, r2, r3
 80098b2:	7eba      	ldrb	r2, [r7, #26]
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	460b      	mov	r3, r1
 80098ba:	6939      	ldr	r1, [r7, #16]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff fea9 	bl	8009614 <tcp_create_segment>
 80098c2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d063      	beq.n	8009992 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fb fdca 	bl	8005468 <pbuf_clen>
 80098d4:	4603      	mov	r3, r0
 80098d6:	461a      	mov	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80098de:	1a9b      	subs	r3, r3, r2
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	6858      	ldr	r0, [r3, #4]
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	891a      	ldrh	r2, [r3, #8]
 80098f2:	89bb      	ldrh	r3, [r7, #12]
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	4619      	mov	r1, r3
 80098fa:	f7fb fba7 	bl	800504c <pbuf_realloc>
  useg->len -= remainder;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	891a      	ldrh	r2, [r3, #8]
 8009902:	89bb      	ldrh	r3, [r7, #12]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	b29a      	uxth	r2, r3
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	899b      	ldrh	r3, [r3, #12]
 8009912:	b29c      	uxth	r4, r3
 8009914:	7efb      	ldrb	r3, [r7, #27]
 8009916:	b29b      	uxth	r3, r3
 8009918:	4618      	mov	r0, r3
 800991a:	f7fa f9bf 	bl	8003c9c <lwip_htons>
 800991e:	4603      	mov	r3, r0
 8009920:	461a      	mov	r2, r3
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	4322      	orrs	r2, r4
 8009928:	b292      	uxth	r2, r2
 800992a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	4618      	mov	r0, r3
 8009932:	f7fb fd99 	bl	8005468 <pbuf_clen>
 8009936:	4603      	mov	r3, r0
 8009938:	461a      	mov	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009940:	4413      	add	r3, r2
 8009942:	b29a      	uxth	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	4618      	mov	r0, r3
 8009950:	f7fb fd8a 	bl	8005468 <pbuf_clen>
 8009954:	4603      	mov	r3, r0
 8009956:	461a      	mov	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800995e:	4413      	add	r3, r2
 8009960:	b29a      	uxth	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d103      	bne.n	8009986 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	e016      	b.n	80099b8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800998a:	bf00      	nop
 800998c:	e002      	b.n	8009994 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800998e:	bf00      	nop
 8009990:	e000      	b.n	8009994 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009992:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d006      	beq.n	80099a8 <tcp_split_unsent_seg+0x25c>
 800999a:	4b09      	ldr	r3, [pc, #36]	@ (80099c0 <tcp_split_unsent_seg+0x274>)
 800999c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80099a0:	490d      	ldr	r1, [pc, #52]	@ (80099d8 <tcp_split_unsent_seg+0x28c>)
 80099a2:	4809      	ldr	r0, [pc, #36]	@ (80099c8 <tcp_split_unsent_seg+0x27c>)
 80099a4:	f004 fa46 	bl	800de34 <iprintf>
  if (p != NULL) {
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80099ae:	6938      	ldr	r0, [r7, #16]
 80099b0:	f7fb fcd2 	bl	8005358 <pbuf_free>
  }

  return ERR_MEM;
 80099b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3724      	adds	r7, #36	@ 0x24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd90      	pop	{r4, r7, pc}
 80099c0:	08010330 	.word	0x08010330
 80099c4:	080106c4 	.word	0x080106c4
 80099c8:	08010384 	.word	0x08010384
 80099cc:	080106e8 	.word	0x080106e8
 80099d0:	0801070c 	.word	0x0801070c
 80099d4:	0801071c 	.word	0x0801071c
 80099d8:	0801072c 	.word	0x0801072c

080099dc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80099dc:	b590      	push	{r4, r7, lr}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d106      	bne.n	80099f8 <tcp_send_fin+0x1c>
 80099ea:	4b21      	ldr	r3, [pc, #132]	@ (8009a70 <tcp_send_fin+0x94>)
 80099ec:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80099f0:	4920      	ldr	r1, [pc, #128]	@ (8009a74 <tcp_send_fin+0x98>)
 80099f2:	4821      	ldr	r0, [pc, #132]	@ (8009a78 <tcp_send_fin+0x9c>)
 80099f4:	f004 fa1e 	bl	800de34 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d02e      	beq.n	8009a5e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	e002      	b.n	8009a0e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1f8      	bne.n	8009a08 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	899b      	ldrh	r3, [r3, #12]
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fa f93c 	bl	8003c9c <lwip_htons>
 8009a24:	4603      	mov	r3, r0
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f003 0307 	and.w	r3, r3, #7
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d116      	bne.n	8009a5e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	899b      	ldrh	r3, [r3, #12]
 8009a36:	b29c      	uxth	r4, r3
 8009a38:	2001      	movs	r0, #1
 8009a3a:	f7fa f92f 	bl	8003c9c <lwip_htons>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	461a      	mov	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	4322      	orrs	r2, r4
 8009a48:	b292      	uxth	r2, r2
 8009a4a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	8b5b      	ldrh	r3, [r3, #26]
 8009a50:	f043 0320 	orr.w	r3, r3, #32
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e004      	b.n	8009a68 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009a5e:	2101      	movs	r1, #1
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f80b 	bl	8009a7c <tcp_enqueue_flags>
 8009a66:	4603      	mov	r3, r0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd90      	pop	{r4, r7, pc}
 8009a70:	08010330 	.word	0x08010330
 8009a74:	08010738 	.word	0x08010738
 8009a78:	08010384 	.word	0x08010384

08009a7c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	@ 0x28
 8009a80:	af02      	add	r7, sp, #8
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	f003 0303 	and.w	r3, r3, #3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d106      	bne.n	8009aa8 <tcp_enqueue_flags+0x2c>
 8009a9a:	4b67      	ldr	r3, [pc, #412]	@ (8009c38 <tcp_enqueue_flags+0x1bc>)
 8009a9c:	f240 4211 	movw	r2, #1041	@ 0x411
 8009aa0:	4966      	ldr	r1, [pc, #408]	@ (8009c3c <tcp_enqueue_flags+0x1c0>)
 8009aa2:	4867      	ldr	r0, [pc, #412]	@ (8009c40 <tcp_enqueue_flags+0x1c4>)
 8009aa4:	f004 f9c6 	bl	800de34 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <tcp_enqueue_flags+0x40>
 8009aae:	4b62      	ldr	r3, [pc, #392]	@ (8009c38 <tcp_enqueue_flags+0x1bc>)
 8009ab0:	f240 4213 	movw	r2, #1043	@ 0x413
 8009ab4:	4963      	ldr	r1, [pc, #396]	@ (8009c44 <tcp_enqueue_flags+0x1c8>)
 8009ab6:	4862      	ldr	r0, [pc, #392]	@ (8009c40 <tcp_enqueue_flags+0x1c4>)
 8009ab8:	f004 f9bc 	bl	800de34 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009abc:	78fb      	ldrb	r3, [r7, #3]
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009aca:	7ffb      	ldrb	r3, [r7, #31]
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	f003 0304 	and.w	r3, r3, #4
 8009ad4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009ade:	4619      	mov	r1, r3
 8009ae0:	2036      	movs	r0, #54	@ 0x36
 8009ae2:	f7fb f955 	bl	8004d90 <pbuf_alloc>
 8009ae6:	6138      	str	r0, [r7, #16]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d109      	bne.n	8009b02 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	8b5b      	ldrh	r3, [r3, #26]
 8009af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009afc:	f04f 33ff 	mov.w	r3, #4294967295
 8009b00:	e095      	b.n	8009c2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	895a      	ldrh	r2, [r3, #10]
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d206      	bcs.n	8009b1c <tcp_enqueue_flags+0xa0>
 8009b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8009c38 <tcp_enqueue_flags+0x1bc>)
 8009b10:	f240 4239 	movw	r2, #1081	@ 0x439
 8009b14:	494c      	ldr	r1, [pc, #304]	@ (8009c48 <tcp_enqueue_flags+0x1cc>)
 8009b16:	484a      	ldr	r0, [pc, #296]	@ (8009c40 <tcp_enqueue_flags+0x1c4>)
 8009b18:	f004 f98c 	bl	800de34 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8009b20:	78fa      	ldrb	r2, [r7, #3]
 8009b22:	7ffb      	ldrb	r3, [r7, #31]
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	460b      	mov	r3, r1
 8009b28:	6939      	ldr	r1, [r7, #16]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff fd72 	bl	8009614 <tcp_create_segment>
 8009b30:	60f8      	str	r0, [r7, #12]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d109      	bne.n	8009b4c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	8b5b      	ldrh	r3, [r3, #26]
 8009b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009b46:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4a:	e070      	b.n	8009c2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	f003 0303 	and.w	r3, r3, #3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d006      	beq.n	8009b66 <tcp_enqueue_flags+0xea>
 8009b58:	4b37      	ldr	r3, [pc, #220]	@ (8009c38 <tcp_enqueue_flags+0x1bc>)
 8009b5a:	f240 4242 	movw	r2, #1090	@ 0x442
 8009b5e:	493b      	ldr	r1, [pc, #236]	@ (8009c4c <tcp_enqueue_flags+0x1d0>)
 8009b60:	4837      	ldr	r0, [pc, #220]	@ (8009c40 <tcp_enqueue_flags+0x1c4>)
 8009b62:	f004 f967 	bl	800de34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	891b      	ldrh	r3, [r3, #8]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d006      	beq.n	8009b7c <tcp_enqueue_flags+0x100>
 8009b6e:	4b32      	ldr	r3, [pc, #200]	@ (8009c38 <tcp_enqueue_flags+0x1bc>)
 8009b70:	f240 4243 	movw	r2, #1091	@ 0x443
 8009b74:	4936      	ldr	r1, [pc, #216]	@ (8009c50 <tcp_enqueue_flags+0x1d4>)
 8009b76:	4832      	ldr	r0, [pc, #200]	@ (8009c40 <tcp_enqueue_flags+0x1c4>)
 8009b78:	f004 f95c 	bl	800de34 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d103      	bne.n	8009b8c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009b8a:	e00d      	b.n	8009ba8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b90:	61bb      	str	r3, [r7, #24]
 8009b92:	e002      	b.n	8009b9a <tcp_enqueue_flags+0x11e>
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	61bb      	str	r3, [r7, #24]
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1f8      	bne.n	8009b94 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	f003 0302 	and.w	r3, r3, #2
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d104      	bne.n	8009bc4 <tcp_enqueue_flags+0x148>
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d004      	beq.n	8009bce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bc8:	1c5a      	adds	r2, r3, #1
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009bce:	78fb      	ldrb	r3, [r7, #3]
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d006      	beq.n	8009be6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	8b5b      	ldrh	r3, [r3, #26]
 8009bdc:	f043 0320 	orr.w	r3, r3, #32
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fb fc3c 	bl	8005468 <pbuf_clen>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009bfa:	4413      	add	r3, r2
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00e      	beq.n	8009c2c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10a      	bne.n	8009c2c <tcp_enqueue_flags+0x1b0>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d106      	bne.n	8009c2c <tcp_enqueue_flags+0x1b0>
 8009c1e:	4b06      	ldr	r3, [pc, #24]	@ (8009c38 <tcp_enqueue_flags+0x1bc>)
 8009c20:	f240 4265 	movw	r2, #1125	@ 0x465
 8009c24:	490b      	ldr	r1, [pc, #44]	@ (8009c54 <tcp_enqueue_flags+0x1d8>)
 8009c26:	4806      	ldr	r0, [pc, #24]	@ (8009c40 <tcp_enqueue_flags+0x1c4>)
 8009c28:	f004 f904 	bl	800de34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3720      	adds	r7, #32
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	08010330 	.word	0x08010330
 8009c3c:	08010754 	.word	0x08010754
 8009c40:	08010384 	.word	0x08010384
 8009c44:	080107ac 	.word	0x080107ac
 8009c48:	080107cc 	.word	0x080107cc
 8009c4c:	08010808 	.word	0x08010808
 8009c50:	08010820 	.word	0x08010820
 8009c54:	0801084c 	.word	0x0801084c

08009c58 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009c58:	b5b0      	push	{r4, r5, r7, lr}
 8009c5a:	b08a      	sub	sp, #40	@ 0x28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d106      	bne.n	8009c74 <tcp_output+0x1c>
 8009c66:	4b8a      	ldr	r3, [pc, #552]	@ (8009e90 <tcp_output+0x238>)
 8009c68:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8009c6c:	4989      	ldr	r1, [pc, #548]	@ (8009e94 <tcp_output+0x23c>)
 8009c6e:	488a      	ldr	r0, [pc, #552]	@ (8009e98 <tcp_output+0x240>)
 8009c70:	f004 f8e0 	bl	800de34 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	7d1b      	ldrb	r3, [r3, #20]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d106      	bne.n	8009c8a <tcp_output+0x32>
 8009c7c:	4b84      	ldr	r3, [pc, #528]	@ (8009e90 <tcp_output+0x238>)
 8009c7e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8009c82:	4986      	ldr	r1, [pc, #536]	@ (8009e9c <tcp_output+0x244>)
 8009c84:	4884      	ldr	r0, [pc, #528]	@ (8009e98 <tcp_output+0x240>)
 8009c86:	f004 f8d5 	bl	800de34 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009c8a:	4b85      	ldr	r3, [pc, #532]	@ (8009ea0 <tcp_output+0x248>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d101      	bne.n	8009c98 <tcp_output+0x40>
    return ERR_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	e1ce      	b.n	800a036 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	bf28      	it	cs
 8009ca8:	4613      	movcs	r3, r2
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cb2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10b      	bne.n	8009cd2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	8b5b      	ldrh	r3, [r3, #26]
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 81aa 	beq.w	800a01c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fdcb 	bl	800a864 <tcp_send_empty_ack>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	e1b1      	b.n	800a036 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009cd2:	6879      	ldr	r1, [r7, #4]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	461a      	mov	r2, r3
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff fc7e 	bl	80095dc <tcp_route>
 8009ce0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d102      	bne.n	8009cee <tcp_output+0x96>
    return ERR_RTE;
 8009ce8:	f06f 0303 	mvn.w	r3, #3
 8009cec:	e1a3      	b.n	800a036 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d003      	beq.n	8009cfc <tcp_output+0xa4>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d111      	bne.n	8009d20 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <tcp_output+0xb0>
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	3304      	adds	r3, #4
 8009d06:	e000      	b.n	8009d0a <tcp_output+0xb2>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d102      	bne.n	8009d18 <tcp_output+0xc0>
      return ERR_RTE;
 8009d12:	f06f 0303 	mvn.w	r3, #3
 8009d16:	e18e      	b.n	800a036 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7f9 ffce 	bl	8003cc8 <lwip_htonl>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d36:	8912      	ldrh	r2, [r2, #8]
 8009d38:	4413      	add	r3, r2
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d227      	bcs.n	8009d90 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d46:	461a      	mov	r2, r3
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d114      	bne.n	8009d78 <tcp_output+0x120>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d110      	bne.n	8009d78 <tcp_output+0x120>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10b      	bne.n	8009d78 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	8b5b      	ldrh	r3, [r3, #26]
 8009d7c:	f003 0302 	and.w	r3, r3, #2
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 814d 	beq.w	800a020 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fd6c 	bl	800a864 <tcp_send_empty_ack>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	e152      	b.n	800a036 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d9c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 811c 	beq.w	8009fde <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009da6:	e002      	b.n	8009dae <tcp_output+0x156>
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	623b      	str	r3, [r7, #32]
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1f8      	bne.n	8009da8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009db6:	e112      	b.n	8009fde <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	899b      	ldrh	r3, [r3, #12]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7f9 ff6b 	bl	8003c9c <lwip_htons>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d006      	beq.n	8009de0 <tcp_output+0x188>
 8009dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8009e90 <tcp_output+0x238>)
 8009dd4:	f240 5236 	movw	r2, #1334	@ 0x536
 8009dd8:	4932      	ldr	r1, [pc, #200]	@ (8009ea4 <tcp_output+0x24c>)
 8009dda:	482f      	ldr	r0, [pc, #188]	@ (8009e98 <tcp_output+0x240>)
 8009ddc:	f004 f82a 	bl	800de34 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d01f      	beq.n	8009e28 <tcp_output+0x1d0>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	8b5b      	ldrh	r3, [r3, #26]
 8009dec:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d119      	bne.n	8009e28 <tcp_output+0x1d0>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00b      	beq.n	8009e14 <tcp_output+0x1bc>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d110      	bne.n	8009e28 <tcp_output+0x1d0>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e0a:	891a      	ldrh	r2, [r3, #8]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d209      	bcs.n	8009e28 <tcp_output+0x1d0>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d004      	beq.n	8009e28 <tcp_output+0x1d0>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d901      	bls.n	8009e2c <tcp_output+0x1d4>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e000      	b.n	8009e2e <tcp_output+0x1d6>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d106      	bne.n	8009e40 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	8b5b      	ldrh	r3, [r3, #26]
 8009e36:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 80e4 	beq.w	800a008 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	7d1b      	ldrb	r3, [r3, #20]
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d00d      	beq.n	8009e64 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	899b      	ldrh	r3, [r3, #12]
 8009e4e:	b29c      	uxth	r4, r3
 8009e50:	2010      	movs	r0, #16
 8009e52:	f7f9 ff23 	bl	8003c9c <lwip_htons>
 8009e56:	4603      	mov	r3, r0
 8009e58:	461a      	mov	r2, r3
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	4322      	orrs	r2, r4
 8009e60:	b292      	uxth	r2, r2
 8009e62:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009e64:	697a      	ldr	r2, [r7, #20]
 8009e66:	6879      	ldr	r1, [r7, #4]
 8009e68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e6a:	f000 f909 	bl	800a080 <tcp_output_segment>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d016      	beq.n	8009ea8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	8b5b      	ldrh	r3, [r3, #26]
 8009e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	835a      	strh	r2, [r3, #26]
      return err;
 8009e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e8c:	e0d3      	b.n	800a036 <tcp_output+0x3de>
 8009e8e:	bf00      	nop
 8009e90:	08010330 	.word	0x08010330
 8009e94:	08010874 	.word	0x08010874
 8009e98:	08010384 	.word	0x08010384
 8009e9c:	0801088c 	.word	0x0801088c
 8009ea0:	2000829c 	.word	0x2000829c
 8009ea4:	080108b4 	.word	0x080108b4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	7d1b      	ldrb	r3, [r3, #20]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d006      	beq.n	8009ec6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	8b5b      	ldrh	r3, [r3, #26]
 8009ebc:	f023 0303 	bic.w	r3, r3, #3
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7f9 fefb 	bl	8003cc8 <lwip_htonl>
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed6:	891b      	ldrh	r3, [r3, #8]
 8009ed8:	461d      	mov	r5, r3
 8009eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	899b      	ldrh	r3, [r3, #12]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7f9 feda 	bl	8003c9c <lwip_htons>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	f003 0303 	and.w	r3, r3, #3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <tcp_output+0x2a0>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e000      	b.n	8009efa <tcp_output+0x2a2>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	442b      	add	r3, r5
 8009efc:	4423      	add	r3, r4
 8009efe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	da02      	bge.n	8009f12 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f14:	891b      	ldrh	r3, [r3, #8]
 8009f16:	461c      	mov	r4, r3
 8009f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	899b      	ldrh	r3, [r3, #12]
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7f9 febb 	bl	8003c9c <lwip_htons>
 8009f26:	4603      	mov	r3, r0
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <tcp_output+0x2de>
 8009f32:	2301      	movs	r3, #1
 8009f34:	e000      	b.n	8009f38 <tcp_output+0x2e0>
 8009f36:	2300      	movs	r3, #0
 8009f38:	4423      	add	r3, r4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d049      	beq.n	8009fd2 <tcp_output+0x37a>
      seg->next = NULL;
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f40:	2200      	movs	r2, #0
 8009f42:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d105      	bne.n	8009f58 <tcp_output+0x300>
        pcb->unacked = seg;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f50:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8009f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f54:	623b      	str	r3, [r7, #32]
 8009f56:	e03f      	b.n	8009fd8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7f9 feb2 	bl	8003cc8 <lwip_htonl>
 8009f64:	4604      	mov	r4, r0
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7f9 feab 	bl	8003cc8 <lwip_htonl>
 8009f72:	4603      	mov	r3, r0
 8009f74:	1ae3      	subs	r3, r4, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	da24      	bge.n	8009fc4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3370      	adds	r3, #112	@ 0x70
 8009f7e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009f80:	e002      	b.n	8009f88 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d011      	beq.n	8009fb4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7f9 fe95 	bl	8003cc8 <lwip_htonl>
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7f9 fe8e 	bl	8003cc8 <lwip_htonl>
 8009fac:	4603      	mov	r3, r0
 8009fae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dbe6      	blt.n	8009f82 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fc0:	601a      	str	r2, [r3, #0]
 8009fc2:	e009      	b.n	8009fd8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fc8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	623b      	str	r3, [r7, #32]
 8009fd0:	e002      	b.n	8009fd8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009fd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009fd4:	f7fc fc45 	bl	8006862 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8009fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d012      	beq.n	800a00a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7f9 fe6c 	bl	8003cc8 <lwip_htonl>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ffa:	8912      	ldrh	r2, [r2, #8]
 8009ffc:	4413      	add	r3, r2
  while (seg != NULL &&
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	429a      	cmp	r2, r3
 800a002:	f4bf aed9 	bcs.w	8009db8 <tcp_output+0x160>
 800a006:	e000      	b.n	800a00a <tcp_output+0x3b2>
      break;
 800a008:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d108      	bne.n	800a024 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800a01a:	e004      	b.n	800a026 <tcp_output+0x3ce>
    goto output_done;
 800a01c:	bf00      	nop
 800a01e:	e002      	b.n	800a026 <tcp_output+0x3ce>
    goto output_done;
 800a020:	bf00      	nop
 800a022:	e000      	b.n	800a026 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a024:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	8b5b      	ldrh	r3, [r3, #26]
 800a02a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a02e:	b29a      	uxth	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3728      	adds	r7, #40	@ 0x28
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bdb0      	pop	{r4, r5, r7, pc}
 800a03e:	bf00      	nop

0800a040 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d106      	bne.n	800a05c <tcp_output_segment_busy+0x1c>
 800a04e:	4b09      	ldr	r3, [pc, #36]	@ (800a074 <tcp_output_segment_busy+0x34>)
 800a050:	f240 529a 	movw	r2, #1434	@ 0x59a
 800a054:	4908      	ldr	r1, [pc, #32]	@ (800a078 <tcp_output_segment_busy+0x38>)
 800a056:	4809      	ldr	r0, [pc, #36]	@ (800a07c <tcp_output_segment_busy+0x3c>)
 800a058:	f003 feec 	bl	800de34 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	7b9b      	ldrb	r3, [r3, #14]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d001      	beq.n	800a06a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	08010330 	.word	0x08010330
 800a078:	080108cc 	.word	0x080108cc
 800a07c:	08010384 	.word	0x08010384

0800a080 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a080:	b5b0      	push	{r4, r5, r7, lr}
 800a082:	b08c      	sub	sp, #48	@ 0x30
 800a084:	af04      	add	r7, sp, #16
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d106      	bne.n	800a0a0 <tcp_output_segment+0x20>
 800a092:	4b64      	ldr	r3, [pc, #400]	@ (800a224 <tcp_output_segment+0x1a4>)
 800a094:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800a098:	4963      	ldr	r1, [pc, #396]	@ (800a228 <tcp_output_segment+0x1a8>)
 800a09a:	4864      	ldr	r0, [pc, #400]	@ (800a22c <tcp_output_segment+0x1ac>)
 800a09c:	f003 feca 	bl	800de34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d106      	bne.n	800a0b4 <tcp_output_segment+0x34>
 800a0a6:	4b5f      	ldr	r3, [pc, #380]	@ (800a224 <tcp_output_segment+0x1a4>)
 800a0a8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800a0ac:	4960      	ldr	r1, [pc, #384]	@ (800a230 <tcp_output_segment+0x1b0>)
 800a0ae:	485f      	ldr	r0, [pc, #380]	@ (800a22c <tcp_output_segment+0x1ac>)
 800a0b0:	f003 fec0 	bl	800de34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <tcp_output_segment+0x48>
 800a0ba:	4b5a      	ldr	r3, [pc, #360]	@ (800a224 <tcp_output_segment+0x1a4>)
 800a0bc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800a0c0:	495c      	ldr	r1, [pc, #368]	@ (800a234 <tcp_output_segment+0x1b4>)
 800a0c2:	485a      	ldr	r0, [pc, #360]	@ (800a22c <tcp_output_segment+0x1ac>)
 800a0c4:	f003 feb6 	bl	800de34 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f7ff ffb9 	bl	800a040 <tcp_output_segment_busy>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e0a1      	b.n	800a21c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	68dc      	ldr	r4, [r3, #12]
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	f7f9 fdf1 	bl	8003cc8 <lwip_htonl>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	68dc      	ldr	r4, [r3, #12]
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	f7f9 fdd2 	bl	8003c9c <lwip_htons>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800a104:	441a      	add	r2, r3
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	3314      	adds	r3, #20
 800a110:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	7a9b      	ldrb	r3, [r3, #10]
 800a116:	f003 0301 	and.w	r3, r3, #1
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d015      	beq.n	800a14a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	3304      	adds	r3, #4
 800a122:	461a      	mov	r2, r3
 800a124:	6879      	ldr	r1, [r7, #4]
 800a126:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800a12a:	f7fc fe91 	bl	8006e50 <tcp_eff_send_mss_netif>
 800a12e:	4603      	mov	r3, r0
 800a130:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a132:	8b7b      	ldrh	r3, [r7, #26]
 800a134:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800a138:	4618      	mov	r0, r3
 800a13a:	f7f9 fdc5 	bl	8003cc8 <lwip_htonl>
 800a13e:	4602      	mov	r2, r0
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	3304      	adds	r3, #4
 800a148:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a150:	2b00      	cmp	r3, #0
 800a152:	da02      	bge.n	800a15a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2200      	movs	r2, #0
 800a158:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10c      	bne.n	800a17c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a162:	4b35      	ldr	r3, [pc, #212]	@ (800a238 <tcp_output_segment+0x1b8>)
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	4618      	mov	r0, r3
 800a172:	f7f9 fda9 	bl	8003cc8 <lwip_htonl>
 800a176:	4602      	mov	r2, r0
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	68da      	ldr	r2, [r3, #12]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	8959      	ldrh	r1, [r3, #10]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	8b3a      	ldrh	r2, [r7, #24]
 800a196:	1a8a      	subs	r2, r1, r2
 800a198:	b292      	uxth	r2, r2
 800a19a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	8919      	ldrh	r1, [r3, #8]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	8b3a      	ldrh	r2, [r7, #24]
 800a1a8:	1a8a      	subs	r2, r1, r2
 800a1aa:	b292      	uxth	r2, r2
 800a1ac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	68d2      	ldr	r2, [r2, #12]
 800a1b6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	741a      	strb	r2, [r3, #16]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	68da      	ldr	r2, [r3, #12]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	7a9b      	ldrb	r3, [r3, #10]
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <tcp_output_segment+0x158>
 800a1d4:	2318      	movs	r3, #24
 800a1d6:	e000      	b.n	800a1da <tcp_output_segment+0x15a>
 800a1d8:	2314      	movs	r3, #20
 800a1da:	4413      	add	r3, r2
 800a1dc:	69fa      	ldr	r2, [r7, #28]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d006      	beq.n	800a1f0 <tcp_output_segment+0x170>
 800a1e2:	4b10      	ldr	r3, [pc, #64]	@ (800a224 <tcp_output_segment+0x1a4>)
 800a1e4:	f240 621c 	movw	r2, #1564	@ 0x61c
 800a1e8:	4914      	ldr	r1, [pc, #80]	@ (800a23c <tcp_output_segment+0x1bc>)
 800a1ea:	4810      	ldr	r0, [pc, #64]	@ (800a22c <tcp_output_segment+0x1ac>)
 800a1ec:	f003 fe22 	bl	800de34 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6858      	ldr	r0, [r3, #4]
 800a1f4:	68b9      	ldr	r1, [r7, #8]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	1d1c      	adds	r4, r3, #4
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	7add      	ldrb	r5, [r3, #11]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	7a9b      	ldrb	r3, [r3, #10]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	9202      	str	r2, [sp, #8]
 800a206:	2206      	movs	r2, #6
 800a208:	9201      	str	r2, [sp, #4]
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	462b      	mov	r3, r5
 800a20e:	4622      	mov	r2, r4
 800a210:	f002 fce2 	bl	800cbd8 <ip4_output_if>
 800a214:	4603      	mov	r3, r0
 800a216:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a218:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3720      	adds	r7, #32
 800a220:	46bd      	mov	sp, r7
 800a222:	bdb0      	pop	{r4, r5, r7, pc}
 800a224:	08010330 	.word	0x08010330
 800a228:	080108f4 	.word	0x080108f4
 800a22c:	08010384 	.word	0x08010384
 800a230:	08010914 	.word	0x08010914
 800a234:	08010934 	.word	0x08010934
 800a238:	20008250 	.word	0x20008250
 800a23c:	08010958 	.word	0x08010958

0800a240 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a240:	b5b0      	push	{r4, r5, r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d106      	bne.n	800a25c <tcp_rexmit_rto_prepare+0x1c>
 800a24e:	4b31      	ldr	r3, [pc, #196]	@ (800a314 <tcp_rexmit_rto_prepare+0xd4>)
 800a250:	f240 6263 	movw	r2, #1635	@ 0x663
 800a254:	4930      	ldr	r1, [pc, #192]	@ (800a318 <tcp_rexmit_rto_prepare+0xd8>)
 800a256:	4831      	ldr	r0, [pc, #196]	@ (800a31c <tcp_rexmit_rto_prepare+0xdc>)
 800a258:	f003 fdec 	bl	800de34 <iprintf>

  if (pcb->unacked == NULL) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a260:	2b00      	cmp	r3, #0
 800a262:	d102      	bne.n	800a26a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a264:	f06f 0305 	mvn.w	r3, #5
 800a268:	e050      	b.n	800a30c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	e00b      	b.n	800a28a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f7ff fee4 	bl	800a040 <tcp_output_segment_busy>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d002      	beq.n	800a284 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a27e:	f06f 0305 	mvn.w	r3, #5
 800a282:	e043      	b.n	800a30c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	60fb      	str	r3, [r7, #12]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1ef      	bne.n	800a272 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f7ff fed4 	bl	800a040 <tcp_output_segment_busy>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d002      	beq.n	800a2a4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a29e:	f06f 0305 	mvn.w	r3, #5
 800a2a2:	e033      	b.n	800a30c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	8b5b      	ldrh	r3, [r3, #26]
 800a2be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7f9 fcfa 	bl	8003cc8 <lwip_htonl>
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	891b      	ldrh	r3, [r3, #8]
 800a2da:	461d      	mov	r5, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	899b      	ldrh	r3, [r3, #12]
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7f9 fcd9 	bl	8003c9c <lwip_htons>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	f003 0303 	and.w	r3, r3, #3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <tcp_rexmit_rto_prepare+0xba>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e000      	b.n	800a2fc <tcp_rexmit_rto_prepare+0xbc>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	442b      	add	r3, r5
 800a2fe:	18e2      	adds	r2, r4, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bdb0      	pop	{r4, r5, r7, pc}
 800a314:	08010330 	.word	0x08010330
 800a318:	0801096c 	.word	0x0801096c
 800a31c:	08010384 	.word	0x08010384

0800a320 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d106      	bne.n	800a33c <tcp_rexmit_rto_commit+0x1c>
 800a32e:	4b0d      	ldr	r3, [pc, #52]	@ (800a364 <tcp_rexmit_rto_commit+0x44>)
 800a330:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a334:	490c      	ldr	r1, [pc, #48]	@ (800a368 <tcp_rexmit_rto_commit+0x48>)
 800a336:	480d      	ldr	r0, [pc, #52]	@ (800a36c <tcp_rexmit_rto_commit+0x4c>)
 800a338:	f003 fd7c 	bl	800de34 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a342:	2bff      	cmp	r3, #255	@ 0xff
 800a344:	d007      	beq.n	800a356 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a34c:	3301      	adds	r3, #1
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7ff fc7e 	bl	8009c58 <tcp_output>
}
 800a35c:	bf00      	nop
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	08010330 	.word	0x08010330
 800a368:	08010990 	.word	0x08010990
 800a36c:	08010384 	.word	0x08010384

0800a370 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d106      	bne.n	800a38c <tcp_rexmit_rto+0x1c>
 800a37e:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a8 <tcp_rexmit_rto+0x38>)
 800a380:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800a384:	4909      	ldr	r1, [pc, #36]	@ (800a3ac <tcp_rexmit_rto+0x3c>)
 800a386:	480a      	ldr	r0, [pc, #40]	@ (800a3b0 <tcp_rexmit_rto+0x40>)
 800a388:	f003 fd54 	bl	800de34 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff ff57 	bl	800a240 <tcp_rexmit_rto_prepare>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d102      	bne.n	800a39e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff ffc1 	bl	800a320 <tcp_rexmit_rto_commit>
  }
}
 800a39e:	bf00      	nop
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	08010330 	.word	0x08010330
 800a3ac:	080109b4 	.word	0x080109b4
 800a3b0:	08010384 	.word	0x08010384

0800a3b4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a3b4:	b590      	push	{r4, r7, lr}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d106      	bne.n	800a3d0 <tcp_rexmit+0x1c>
 800a3c2:	4b2f      	ldr	r3, [pc, #188]	@ (800a480 <tcp_rexmit+0xcc>)
 800a3c4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800a3c8:	492e      	ldr	r1, [pc, #184]	@ (800a484 <tcp_rexmit+0xd0>)
 800a3ca:	482f      	ldr	r0, [pc, #188]	@ (800a488 <tcp_rexmit+0xd4>)
 800a3cc:	f003 fd32 	bl	800de34 <iprintf>

  if (pcb->unacked == NULL) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a3d8:	f06f 0305 	mvn.w	r3, #5
 800a3dc:	e04c      	b.n	800a478 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3e2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a3e4:	68b8      	ldr	r0, [r7, #8]
 800a3e6:	f7ff fe2b 	bl	800a040 <tcp_output_segment_busy>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a3f0:	f06f 0305 	mvn.w	r3, #5
 800a3f4:	e040      	b.n	800a478 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	336c      	adds	r3, #108	@ 0x6c
 800a402:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a404:	e002      	b.n	800a40c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d011      	beq.n	800a438 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7f9 fc53 	bl	8003cc8 <lwip_htonl>
 800a422:	4604      	mov	r4, r0
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7f9 fc4c 	bl	8003cc8 <lwip_htonl>
 800a430:	4603      	mov	r3, r0
 800a432:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a434:	2b00      	cmp	r3, #0
 800a436:	dbe6      	blt.n	800a406 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d103      	bne.n	800a456 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a45c:	2bff      	cmp	r3, #255	@ 0xff
 800a45e:	d007      	beq.n	800a470 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a466:	3301      	adds	r3, #1
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd90      	pop	{r4, r7, pc}
 800a480:	08010330 	.word	0x08010330
 800a484:	080109d0 	.word	0x080109d0
 800a488:	08010384 	.word	0x08010384

0800a48c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <tcp_rexmit_fast+0x1c>
 800a49a:	4b2a      	ldr	r3, [pc, #168]	@ (800a544 <tcp_rexmit_fast+0xb8>)
 800a49c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800a4a0:	4929      	ldr	r1, [pc, #164]	@ (800a548 <tcp_rexmit_fast+0xbc>)
 800a4a2:	482a      	ldr	r0, [pc, #168]	@ (800a54c <tcp_rexmit_fast+0xc0>)
 800a4a4:	f003 fcc6 	bl	800de34 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d044      	beq.n	800a53a <tcp_rexmit_fast+0xae>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	8b5b      	ldrh	r3, [r3, #26]
 800a4b4:	f003 0304 	and.w	r3, r3, #4
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d13e      	bne.n	800a53a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff ff79 	bl	800a3b4 <tcp_rexmit>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d138      	bne.n	800a53a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	bf28      	it	cs
 800a4d8:	4613      	movcs	r3, r2
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	0fda      	lsrs	r2, r3, #31
 800a4de:	4413      	add	r3, r2
 800a4e0:	105b      	asrs	r3, r3, #1
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a4f6:	005b      	lsls	r3, r3, #1
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d206      	bcs.n	800a50a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	b29a      	uxth	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a514:	4619      	mov	r1, r3
 800a516:	0049      	lsls	r1, r1, #1
 800a518:	440b      	add	r3, r1
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	4413      	add	r3, r2
 800a51e:	b29a      	uxth	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	8b5b      	ldrh	r3, [r3, #26]
 800a52a:	f043 0304 	orr.w	r3, r3, #4
 800a52e:	b29a      	uxth	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800a53a:	bf00      	nop
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	08010330 	.word	0x08010330
 800a548:	080109e8 	.word	0x080109e8
 800a54c:	08010384 	.word	0x08010384

0800a550 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	607b      	str	r3, [r7, #4]
 800a55a:	460b      	mov	r3, r1
 800a55c:	817b      	strh	r3, [r7, #10]
 800a55e:	4613      	mov	r3, r2
 800a560:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a562:	897a      	ldrh	r2, [r7, #10]
 800a564:	893b      	ldrh	r3, [r7, #8]
 800a566:	4413      	add	r3, r2
 800a568:	b29b      	uxth	r3, r3
 800a56a:	3314      	adds	r3, #20
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a572:	4619      	mov	r1, r3
 800a574:	2022      	movs	r0, #34	@ 0x22
 800a576:	f7fa fc0b 	bl	8004d90 <pbuf_alloc>
 800a57a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d04d      	beq.n	800a61e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a582:	897b      	ldrh	r3, [r7, #10]
 800a584:	3313      	adds	r3, #19
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	8952      	ldrh	r2, [r2, #10]
 800a58a:	4293      	cmp	r3, r2
 800a58c:	db06      	blt.n	800a59c <tcp_output_alloc_header_common+0x4c>
 800a58e:	4b26      	ldr	r3, [pc, #152]	@ (800a628 <tcp_output_alloc_header_common+0xd8>)
 800a590:	f240 7223 	movw	r2, #1827	@ 0x723
 800a594:	4925      	ldr	r1, [pc, #148]	@ (800a62c <tcp_output_alloc_header_common+0xdc>)
 800a596:	4826      	ldr	r0, [pc, #152]	@ (800a630 <tcp_output_alloc_header_common+0xe0>)
 800a598:	f003 fc4c 	bl	800de34 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a5a2:	8c3b      	ldrh	r3, [r7, #32]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7f9 fb79 	bl	8003c9c <lwip_htons>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a5b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7f9 fb71 	bl	8003c9c <lwip_htons>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	461a      	mov	r2, r3
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7f9 fb7d 	bl	8003cc8 <lwip_htonl>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a5d4:	897b      	ldrh	r3, [r7, #10]
 800a5d6:	089b      	lsrs	r3, r3, #2
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	3305      	adds	r3, #5
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	031b      	lsls	r3, r3, #12
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7f9 fb55 	bl	8003c9c <lwip_htons>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a5fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7f9 fb4d 	bl	8003c9c <lwip_htons>
 800a602:	4603      	mov	r3, r0
 800a604:	461a      	mov	r2, r3
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	2200      	movs	r2, #0
 800a60e:	741a      	strb	r2, [r3, #16]
 800a610:	2200      	movs	r2, #0
 800a612:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	2200      	movs	r2, #0
 800a618:	749a      	strb	r2, [r3, #18]
 800a61a:	2200      	movs	r2, #0
 800a61c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a61e:	697b      	ldr	r3, [r7, #20]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	08010330 	.word	0x08010330
 800a62c:	08010a08 	.word	0x08010a08
 800a630:	08010384 	.word	0x08010384

0800a634 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a634:	b5b0      	push	{r4, r5, r7, lr}
 800a636:	b08a      	sub	sp, #40	@ 0x28
 800a638:	af04      	add	r7, sp, #16
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	607b      	str	r3, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	817b      	strh	r3, [r7, #10]
 800a642:	4613      	mov	r3, r2
 800a644:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d106      	bne.n	800a65a <tcp_output_alloc_header+0x26>
 800a64c:	4b15      	ldr	r3, [pc, #84]	@ (800a6a4 <tcp_output_alloc_header+0x70>)
 800a64e:	f240 7242 	movw	r2, #1858	@ 0x742
 800a652:	4915      	ldr	r1, [pc, #84]	@ (800a6a8 <tcp_output_alloc_header+0x74>)
 800a654:	4815      	ldr	r0, [pc, #84]	@ (800a6ac <tcp_output_alloc_header+0x78>)
 800a656:	f003 fbed 	bl	800de34 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	8adb      	ldrh	r3, [r3, #22]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	8b12      	ldrh	r2, [r2, #24]
 800a666:	68f9      	ldr	r1, [r7, #12]
 800a668:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800a66a:	893d      	ldrh	r5, [r7, #8]
 800a66c:	897c      	ldrh	r4, [r7, #10]
 800a66e:	9103      	str	r1, [sp, #12]
 800a670:	2110      	movs	r1, #16
 800a672:	9102      	str	r1, [sp, #8]
 800a674:	9201      	str	r2, [sp, #4]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	462a      	mov	r2, r5
 800a67c:	4621      	mov	r1, r4
 800a67e:	f7ff ff67 	bl	800a550 <tcp_output_alloc_header_common>
 800a682:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d006      	beq.n	800a698 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800a692:	441a      	add	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800a698:	697b      	ldr	r3, [r7, #20]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3718      	adds	r7, #24
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	08010330 	.word	0x08010330
 800a6a8:	08010a38 	.word	0x08010a38
 800a6ac:	08010384 	.word	0x08010384

0800a6b0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b088      	sub	sp, #32
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	461a      	mov	r2, r3
 800a6be:	460b      	mov	r3, r1
 800a6c0:	71fb      	strb	r3, [r7, #7]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d106      	bne.n	800a6de <tcp_output_fill_options+0x2e>
 800a6d0:	4b12      	ldr	r3, [pc, #72]	@ (800a71c <tcp_output_fill_options+0x6c>)
 800a6d2:	f240 7256 	movw	r2, #1878	@ 0x756
 800a6d6:	4912      	ldr	r1, [pc, #72]	@ (800a720 <tcp_output_fill_options+0x70>)
 800a6d8:	4812      	ldr	r0, [pc, #72]	@ (800a724 <tcp_output_fill_options+0x74>)
 800a6da:	f003 fbab 	bl	800de34 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	3314      	adds	r3, #20
 800a6e8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a6ea:	8bfb      	ldrh	r3, [r7, #30]
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	f003 0304 	and.w	r3, r3, #4
 800a6f8:	4413      	add	r3, r2
 800a6fa:	3314      	adds	r3, #20
 800a6fc:	69ba      	ldr	r2, [r7, #24]
 800a6fe:	4413      	add	r3, r2
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	429a      	cmp	r2, r3
 800a704:	d006      	beq.n	800a714 <tcp_output_fill_options+0x64>
 800a706:	4b05      	ldr	r3, [pc, #20]	@ (800a71c <tcp_output_fill_options+0x6c>)
 800a708:	f240 7275 	movw	r2, #1909	@ 0x775
 800a70c:	4906      	ldr	r1, [pc, #24]	@ (800a728 <tcp_output_fill_options+0x78>)
 800a70e:	4805      	ldr	r0, [pc, #20]	@ (800a724 <tcp_output_fill_options+0x74>)
 800a710:	f003 fb90 	bl	800de34 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a714:	bf00      	nop
 800a716:	3720      	adds	r7, #32
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	08010330 	.word	0x08010330
 800a720:	08010a60 	.word	0x08010a60
 800a724:	08010384 	.word	0x08010384
 800a728:	08010958 	.word	0x08010958

0800a72c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08a      	sub	sp, #40	@ 0x28
 800a730:	af04      	add	r7, sp, #16
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d106      	bne.n	800a74e <tcp_output_control_segment+0x22>
 800a740:	4b1c      	ldr	r3, [pc, #112]	@ (800a7b4 <tcp_output_control_segment+0x88>)
 800a742:	f240 7287 	movw	r2, #1927	@ 0x787
 800a746:	491c      	ldr	r1, [pc, #112]	@ (800a7b8 <tcp_output_control_segment+0x8c>)
 800a748:	481c      	ldr	r0, [pc, #112]	@ (800a7bc <tcp_output_control_segment+0x90>)
 800a74a:	f003 fb73 	bl	800de34 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a74e:	683a      	ldr	r2, [r7, #0]
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7fe ff42 	bl	80095dc <tcp_route>
 800a758:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d102      	bne.n	800a766 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a760:	23fc      	movs	r3, #252	@ 0xfc
 800a762:	75fb      	strb	r3, [r7, #23]
 800a764:	e01c      	b.n	800a7a0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d006      	beq.n	800a77a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	7adb      	ldrb	r3, [r3, #11]
 800a770:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	7a9b      	ldrb	r3, [r3, #10]
 800a776:	757b      	strb	r3, [r7, #21]
 800a778:	e003      	b.n	800a782 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a77a:	23ff      	movs	r3, #255	@ 0xff
 800a77c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a782:	7dba      	ldrb	r2, [r7, #22]
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	9302      	str	r3, [sp, #8]
 800a788:	2306      	movs	r3, #6
 800a78a:	9301      	str	r3, [sp, #4]
 800a78c:	7d7b      	ldrb	r3, [r7, #21]
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	4613      	mov	r3, r2
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	6879      	ldr	r1, [r7, #4]
 800a796:	68b8      	ldr	r0, [r7, #8]
 800a798:	f002 fa1e 	bl	800cbd8 <ip4_output_if>
 800a79c:	4603      	mov	r3, r0
 800a79e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a7a0:	68b8      	ldr	r0, [r7, #8]
 800a7a2:	f7fa fdd9 	bl	8005358 <pbuf_free>
  return err;
 800a7a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	08010330 	.word	0x08010330
 800a7b8:	08010a88 	.word	0x08010a88
 800a7bc:	08010384 	.word	0x08010384

0800a7c0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a7c0:	b590      	push	{r4, r7, lr}
 800a7c2:	b08b      	sub	sp, #44	@ 0x2c
 800a7c4:	af04      	add	r7, sp, #16
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d106      	bne.n	800a7e2 <tcp_rst+0x22>
 800a7d4:	4b1f      	ldr	r3, [pc, #124]	@ (800a854 <tcp_rst+0x94>)
 800a7d6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800a7da:	491f      	ldr	r1, [pc, #124]	@ (800a858 <tcp_rst+0x98>)
 800a7dc:	481f      	ldr	r0, [pc, #124]	@ (800a85c <tcp_rst+0x9c>)
 800a7de:	f003 fb29 	bl	800de34 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <tcp_rst+0x36>
 800a7e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a854 <tcp_rst+0x94>)
 800a7ea:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800a7ee:	491c      	ldr	r1, [pc, #112]	@ (800a860 <tcp_rst+0xa0>)
 800a7f0:	481a      	ldr	r0, [pc, #104]	@ (800a85c <tcp_rst+0x9c>)
 800a7f2:	f003 fb1f 	bl	800de34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a7fa:	f246 0308 	movw	r3, #24584	@ 0x6008
 800a7fe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	b29c      	uxth	r4, r3
 800a804:	68b8      	ldr	r0, [r7, #8]
 800a806:	f7f9 fa5f 	bl	8003cc8 <lwip_htonl>
 800a80a:	4602      	mov	r2, r0
 800a80c:	8abb      	ldrh	r3, [r7, #20]
 800a80e:	9303      	str	r3, [sp, #12]
 800a810:	2314      	movs	r3, #20
 800a812:	9302      	str	r3, [sp, #8]
 800a814:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a816:	9301      	str	r3, [sp, #4]
 800a818:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	4613      	mov	r3, r2
 800a81e:	2200      	movs	r2, #0
 800a820:	4621      	mov	r1, r4
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff fe94 	bl	800a550 <tcp_output_alloc_header_common>
 800a828:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00c      	beq.n	800a84a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	2200      	movs	r2, #0
 800a834:	6939      	ldr	r1, [r7, #16]
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7ff ff3a 	bl	800a6b0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	6939      	ldr	r1, [r7, #16]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff ff72 	bl	800a72c <tcp_output_control_segment>
 800a848:	e000      	b.n	800a84c <tcp_rst+0x8c>
    return;
 800a84a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a84c:	371c      	adds	r7, #28
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd90      	pop	{r4, r7, pc}
 800a852:	bf00      	nop
 800a854:	08010330 	.word	0x08010330
 800a858:	08010ab4 	.word	0x08010ab4
 800a85c:	08010384 	.word	0x08010384
 800a860:	08010ad0 	.word	0x08010ad0

0800a864 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a864:	b590      	push	{r4, r7, lr}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d106      	bne.n	800a888 <tcp_send_empty_ack+0x24>
 800a87a:	4b28      	ldr	r3, [pc, #160]	@ (800a91c <tcp_send_empty_ack+0xb8>)
 800a87c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800a880:	4927      	ldr	r1, [pc, #156]	@ (800a920 <tcp_send_empty_ack+0xbc>)
 800a882:	4828      	ldr	r0, [pc, #160]	@ (800a924 <tcp_send_empty_ack+0xc0>)
 800a884:	f003 fad6 	bl	800de34 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a888:	7dfb      	ldrb	r3, [r7, #23]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	f003 0304 	and.w	r3, r3, #4
 800a892:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a894:	7d7b      	ldrb	r3, [r7, #21]
 800a896:	b29c      	uxth	r4, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7f9 fa13 	bl	8003cc8 <lwip_htonl>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff fec3 	bl	800a634 <tcp_output_alloc_header>
 800a8ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d109      	bne.n	800a8ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	8b5b      	ldrh	r3, [r3, #26]
 800a8ba:	f043 0303 	orr.w	r3, r3, #3
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a8c4:	f06f 0301 	mvn.w	r3, #1
 800a8c8:	e023      	b.n	800a912 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a8ca:	7dbb      	ldrb	r3, [r7, #22]
 800a8cc:	7dfa      	ldrb	r2, [r7, #23]
 800a8ce:	6939      	ldr	r1, [r7, #16]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff feed 	bl	800a6b0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	6939      	ldr	r1, [r7, #16]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7ff ff24 	bl	800a72c <tcp_output_control_segment>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a8e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d007      	beq.n	800a900 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	8b5b      	ldrh	r3, [r3, #26]
 800a8f4:	f043 0303 	orr.w	r3, r3, #3
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	835a      	strh	r2, [r3, #26]
 800a8fe:	e006      	b.n	800a90e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	8b5b      	ldrh	r3, [r3, #26]
 800a904:	f023 0303 	bic.w	r3, r3, #3
 800a908:	b29a      	uxth	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a912:	4618      	mov	r0, r3
 800a914:	371c      	adds	r7, #28
 800a916:	46bd      	mov	sp, r7
 800a918:	bd90      	pop	{r4, r7, pc}
 800a91a:	bf00      	nop
 800a91c:	08010330 	.word	0x08010330
 800a920:	08010aec 	.word	0x08010aec
 800a924:	08010384 	.word	0x08010384

0800a928 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a928:	b590      	push	{r4, r7, lr}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a930:	2300      	movs	r3, #0
 800a932:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d106      	bne.n	800a948 <tcp_keepalive+0x20>
 800a93a:	4b18      	ldr	r3, [pc, #96]	@ (800a99c <tcp_keepalive+0x74>)
 800a93c:	f640 0224 	movw	r2, #2084	@ 0x824
 800a940:	4917      	ldr	r1, [pc, #92]	@ (800a9a0 <tcp_keepalive+0x78>)
 800a942:	4818      	ldr	r0, [pc, #96]	@ (800a9a4 <tcp_keepalive+0x7c>)
 800a944:	f003 fa76 	bl	800de34 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a948:	7dfb      	ldrb	r3, [r7, #23]
 800a94a:	b29c      	uxth	r4, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a950:	3b01      	subs	r3, #1
 800a952:	4618      	mov	r0, r3
 800a954:	f7f9 f9b8 	bl	8003cc8 <lwip_htonl>
 800a958:	4603      	mov	r3, r0
 800a95a:	2200      	movs	r2, #0
 800a95c:	4621      	mov	r1, r4
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7ff fe68 	bl	800a634 <tcp_output_alloc_header>
 800a964:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d102      	bne.n	800a972 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a96c:	f04f 33ff 	mov.w	r3, #4294967295
 800a970:	e010      	b.n	800a994 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a972:	7dfb      	ldrb	r3, [r7, #23]
 800a974:	2200      	movs	r2, #0
 800a976:	6939      	ldr	r1, [r7, #16]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff fe99 	bl	800a6b0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3304      	adds	r3, #4
 800a984:	6939      	ldr	r1, [r7, #16]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff fed0 	bl	800a72c <tcp_output_control_segment>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a990:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a994:	4618      	mov	r0, r3
 800a996:	371c      	adds	r7, #28
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd90      	pop	{r4, r7, pc}
 800a99c:	08010330 	.word	0x08010330
 800a9a0:	08010b0c 	.word	0x08010b0c
 800a9a4:	08010384 	.word	0x08010384

0800a9a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a9a8:	b590      	push	{r4, r7, lr}
 800a9aa:	b08b      	sub	sp, #44	@ 0x2c
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d106      	bne.n	800a9ca <tcp_zero_window_probe+0x22>
 800a9bc:	4b4c      	ldr	r3, [pc, #304]	@ (800aaf0 <tcp_zero_window_probe+0x148>)
 800a9be:	f640 024f 	movw	r2, #2127	@ 0x84f
 800a9c2:	494c      	ldr	r1, [pc, #304]	@ (800aaf4 <tcp_zero_window_probe+0x14c>)
 800a9c4:	484c      	ldr	r0, [pc, #304]	@ (800aaf8 <tcp_zero_window_probe+0x150>)
 800a9c6:	f003 fa35 	bl	800de34 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9ce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	e086      	b.n	800aae8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800a9e0:	2bff      	cmp	r3, #255	@ 0xff
 800a9e2:	d007      	beq.n	800a9f4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a9f4:	6a3b      	ldr	r3, [r7, #32]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	899b      	ldrh	r3, [r3, #12]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f9 f94d 	bl	8003c9c <lwip_htons>
 800aa02:	4603      	mov	r3, r0
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d005      	beq.n	800aa1a <tcp_zero_window_probe+0x72>
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	891b      	ldrh	r3, [r3, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d101      	bne.n	800aa1a <tcp_zero_window_probe+0x72>
 800aa16:	2301      	movs	r3, #1
 800aa18:	e000      	b.n	800aa1c <tcp_zero_window_probe+0x74>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800aa1e:	7ffb      	ldrb	r3, [r7, #31]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	bf0c      	ite	eq
 800aa24:	2301      	moveq	r3, #1
 800aa26:	2300      	movne	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800aa2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa30:	b299      	uxth	r1, r3
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	8bba      	ldrh	r2, [r7, #28]
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff fdfa 	bl	800a634 <tcp_output_alloc_header>
 800aa40:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d102      	bne.n	800aa4e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800aa48:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4c:	e04c      	b.n	800aae8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800aa54:	7ffb      	ldrb	r3, [r7, #31]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d011      	beq.n	800aa7e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	899b      	ldrh	r3, [r3, #12]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	b21b      	sxth	r3, r3
 800aa62:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aa66:	b21c      	sxth	r4, r3
 800aa68:	2011      	movs	r0, #17
 800aa6a:	f7f9 f917 	bl	8003c9c <lwip_htons>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	b21b      	sxth	r3, r3
 800aa72:	4323      	orrs	r3, r4
 800aa74:	b21b      	sxth	r3, r3
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	819a      	strh	r2, [r3, #12]
 800aa7c:	e010      	b.n	800aaa0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	3314      	adds	r3, #20
 800aa84:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	6858      	ldr	r0, [r3, #4]
 800aa8a:	6a3b      	ldr	r3, [r7, #32]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	891a      	ldrh	r2, [r3, #8]
 800aa90:	6a3b      	ldr	r3, [r7, #32]
 800aa92:	891b      	ldrh	r3, [r3, #8]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	2201      	movs	r2, #1
 800aa9a:	6939      	ldr	r1, [r7, #16]
 800aa9c:	f7fa fe56 	bl	800574c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7f9 f90e 	bl	8003cc8 <lwip_htonl>
 800aaac:	4603      	mov	r3, r0
 800aaae:	3301      	adds	r3, #1
 800aab0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	da02      	bge.n	800aac4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800aac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aac8:	2200      	movs	r2, #0
 800aaca:	69b9      	ldr	r1, [r7, #24]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff fdef 	bl	800a6b0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3304      	adds	r3, #4
 800aad8:	69b9      	ldr	r1, [r7, #24]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7ff fe26 	bl	800a72c <tcp_output_control_segment>
 800aae0:	4603      	mov	r3, r0
 800aae2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800aae4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	372c      	adds	r7, #44	@ 0x2c
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd90      	pop	{r4, r7, pc}
 800aaf0:	08010330 	.word	0x08010330
 800aaf4:	08010b28 	.word	0x08010b28
 800aaf8:	08010384 	.word	0x08010384

0800aafc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ab04:	f7fa ff10 	bl	8005928 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ab08:	4b0a      	ldr	r3, [pc, #40]	@ (800ab34 <tcpip_tcp_timer+0x38>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d103      	bne.n	800ab18 <tcpip_tcp_timer+0x1c>
 800ab10:	4b09      	ldr	r3, [pc, #36]	@ (800ab38 <tcpip_tcp_timer+0x3c>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d005      	beq.n	800ab24 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ab18:	2200      	movs	r2, #0
 800ab1a:	4908      	ldr	r1, [pc, #32]	@ (800ab3c <tcpip_tcp_timer+0x40>)
 800ab1c:	20fa      	movs	r0, #250	@ 0xfa
 800ab1e:	f000 f8f3 	bl	800ad08 <sys_timeout>
 800ab22:	e003      	b.n	800ab2c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ab24:	4b06      	ldr	r3, [pc, #24]	@ (800ab40 <tcpip_tcp_timer+0x44>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
  }
}
 800ab2a:	bf00      	nop
 800ab2c:	bf00      	nop
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	2000825c 	.word	0x2000825c
 800ab38:	20008260 	.word	0x20008260
 800ab3c:	0800aafd 	.word	0x0800aafd
 800ab40:	200082a8 	.word	0x200082a8

0800ab44 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ab48:	4b0a      	ldr	r3, [pc, #40]	@ (800ab74 <tcp_timer_needed+0x30>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10f      	bne.n	800ab70 <tcp_timer_needed+0x2c>
 800ab50:	4b09      	ldr	r3, [pc, #36]	@ (800ab78 <tcp_timer_needed+0x34>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d103      	bne.n	800ab60 <tcp_timer_needed+0x1c>
 800ab58:	4b08      	ldr	r3, [pc, #32]	@ (800ab7c <tcp_timer_needed+0x38>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d007      	beq.n	800ab70 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ab60:	4b04      	ldr	r3, [pc, #16]	@ (800ab74 <tcp_timer_needed+0x30>)
 800ab62:	2201      	movs	r2, #1
 800ab64:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ab66:	2200      	movs	r2, #0
 800ab68:	4905      	ldr	r1, [pc, #20]	@ (800ab80 <tcp_timer_needed+0x3c>)
 800ab6a:	20fa      	movs	r0, #250	@ 0xfa
 800ab6c:	f000 f8cc 	bl	800ad08 <sys_timeout>
  }
}
 800ab70:	bf00      	nop
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	200082a8 	.word	0x200082a8
 800ab78:	2000825c 	.word	0x2000825c
 800ab7c:	20008260 	.word	0x20008260
 800ab80:	0800aafd 	.word	0x0800aafd

0800ab84 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ab90:	2006      	movs	r0, #6
 800ab92:	f7f9 fcfb 	bl	800458c <memp_malloc>
 800ab96:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d109      	bne.n	800abb2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d151      	bne.n	800ac48 <sys_timeout_abs+0xc4>
 800aba4:	4b2a      	ldr	r3, [pc, #168]	@ (800ac50 <sys_timeout_abs+0xcc>)
 800aba6:	22be      	movs	r2, #190	@ 0xbe
 800aba8:	492a      	ldr	r1, [pc, #168]	@ (800ac54 <sys_timeout_abs+0xd0>)
 800abaa:	482b      	ldr	r0, [pc, #172]	@ (800ac58 <sys_timeout_abs+0xd4>)
 800abac:	f003 f942 	bl	800de34 <iprintf>
    return;
 800abb0:	e04a      	b.n	800ac48 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2200      	movs	r2, #0
 800abb6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800abca:	4b24      	ldr	r3, [pc, #144]	@ (800ac5c <sys_timeout_abs+0xd8>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d103      	bne.n	800abda <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800abd2:	4a22      	ldr	r2, [pc, #136]	@ (800ac5c <sys_timeout_abs+0xd8>)
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	6013      	str	r3, [r2, #0]
    return;
 800abd8:	e037      	b.n	800ac4a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	685a      	ldr	r2, [r3, #4]
 800abde:	4b1f      	ldr	r3, [pc, #124]	@ (800ac5c <sys_timeout_abs+0xd8>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	0fdb      	lsrs	r3, r3, #31
 800abe8:	f003 0301 	and.w	r3, r3, #1
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d007      	beq.n	800ac02 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800abf2:	4b1a      	ldr	r3, [pc, #104]	@ (800ac5c <sys_timeout_abs+0xd8>)
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800abfa:	4a18      	ldr	r2, [pc, #96]	@ (800ac5c <sys_timeout_abs+0xd8>)
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	6013      	str	r3, [r2, #0]
 800ac00:	e023      	b.n	800ac4a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ac02:	4b16      	ldr	r3, [pc, #88]	@ (800ac5c <sys_timeout_abs+0xd8>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	617b      	str	r3, [r7, #20]
 800ac08:	e01a      	b.n	800ac40 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00b      	beq.n	800ac2a <sys_timeout_abs+0xa6>
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	0fdb      	lsrs	r3, r3, #31
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d007      	beq.n	800ac3a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	601a      	str	r2, [r3, #0]
        break;
 800ac38:	e007      	b.n	800ac4a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	617b      	str	r3, [r7, #20]
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1e1      	bne.n	800ac0a <sys_timeout_abs+0x86>
 800ac46:	e000      	b.n	800ac4a <sys_timeout_abs+0xc6>
    return;
 800ac48:	bf00      	nop
      }
    }
  }
}
 800ac4a:	3718      	adds	r7, #24
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	08010b4c 	.word	0x08010b4c
 800ac54:	08010b80 	.word	0x08010b80
 800ac58:	08010bc0 	.word	0x08010bc0
 800ac5c:	200082a0 	.word	0x200082a0

0800ac60 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	4798      	blx	r3

  now = sys_now();
 800ac72:	f7f8 fe13 	bl	800389c <sys_now>
 800ac76:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	4b0f      	ldr	r3, [pc, #60]	@ (800acbc <lwip_cyclic_timer+0x5c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4413      	add	r3, r2
 800ac82:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	0fdb      	lsrs	r3, r3, #31
 800ac8c:	f003 0301 	and.w	r3, r3, #1
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d009      	beq.n	800acaa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	4907      	ldr	r1, [pc, #28]	@ (800acc0 <lwip_cyclic_timer+0x60>)
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff ff6e 	bl	800ab84 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800aca8:	e004      	b.n	800acb4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	4904      	ldr	r1, [pc, #16]	@ (800acc0 <lwip_cyclic_timer+0x60>)
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f7ff ff68 	bl	800ab84 <sys_timeout_abs>
}
 800acb4:	bf00      	nop
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	200082a4 	.word	0x200082a4
 800acc0:	0800ac61 	.word	0x0800ac61

0800acc4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800acca:	2301      	movs	r3, #1
 800accc:	607b      	str	r3, [r7, #4]
 800acce:	e00e      	b.n	800acee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800acd0:	4a0b      	ldr	r2, [pc, #44]	@ (800ad00 <sys_timeouts_init+0x3c>)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	4a08      	ldr	r2, [pc, #32]	@ (800ad00 <sys_timeouts_init+0x3c>)
 800acde:	4413      	add	r3, r2
 800ace0:	461a      	mov	r2, r3
 800ace2:	4908      	ldr	r1, [pc, #32]	@ (800ad04 <sys_timeouts_init+0x40>)
 800ace4:	f000 f810 	bl	800ad08 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	3301      	adds	r3, #1
 800acec:	607b      	str	r3, [r7, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d9ed      	bls.n	800acd0 <sys_timeouts_init+0xc>
  }
}
 800acf4:	bf00      	nop
 800acf6:	bf00      	nop
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	08011730 	.word	0x08011730
 800ad04:	0800ac61 	.word	0x0800ac61

0800ad08 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad1a:	d306      	bcc.n	800ad2a <sys_timeout+0x22>
 800ad1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad48 <sys_timeout+0x40>)
 800ad1e:	f240 1229 	movw	r2, #297	@ 0x129
 800ad22:	490a      	ldr	r1, [pc, #40]	@ (800ad4c <sys_timeout+0x44>)
 800ad24:	480a      	ldr	r0, [pc, #40]	@ (800ad50 <sys_timeout+0x48>)
 800ad26:	f003 f885 	bl	800de34 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ad2a:	f7f8 fdb7 	bl	800389c <sys_now>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	4413      	add	r3, r2
 800ad34:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	6978      	ldr	r0, [r7, #20]
 800ad3c:	f7ff ff22 	bl	800ab84 <sys_timeout_abs>
#endif
}
 800ad40:	bf00      	nop
 800ad42:	3718      	adds	r7, #24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	08010b4c 	.word	0x08010b4c
 800ad4c:	08010be8 	.word	0x08010be8
 800ad50:	08010bc0 	.word	0x08010bc0

0800ad54 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ad5a:	f7f8 fd9f 	bl	800389c <sys_now>
 800ad5e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ad60:	4b1a      	ldr	r3, [pc, #104]	@ (800adcc <sys_check_timeouts+0x78>)
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <sys_check_timeouts+0x1a>
 800ad6a:	f7f9 ffbb 	bl	8004ce4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ad6e:	4b18      	ldr	r3, [pc, #96]	@ (800add0 <sys_check_timeouts+0x7c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d022      	beq.n	800adc0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	0fdb      	lsrs	r3, r3, #31
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d11a      	bne.n	800adc4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a0f      	ldr	r2, [pc, #60]	@ (800add0 <sys_check_timeouts+0x7c>)
 800ad94:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	4a0b      	ldr	r2, [pc, #44]	@ (800add4 <sys_check_timeouts+0x80>)
 800ada8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800adaa:	68b9      	ldr	r1, [r7, #8]
 800adac:	2006      	movs	r0, #6
 800adae:	f7f9 fc5d 	bl	800466c <memp_free>
    if (handler != NULL) {
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d0d3      	beq.n	800ad60 <sys_check_timeouts+0xc>
      handler(arg);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6838      	ldr	r0, [r7, #0]
 800adbc:	4798      	blx	r3
  do {
 800adbe:	e7cf      	b.n	800ad60 <sys_check_timeouts+0xc>
      return;
 800adc0:	bf00      	nop
 800adc2:	e000      	b.n	800adc6 <sys_check_timeouts+0x72>
      return;
 800adc4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	2000824d 	.word	0x2000824d
 800add0:	200082a0 	.word	0x200082a0
 800add4:	200082a4 	.word	0x200082a4

0800add8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800addc:	f002 ff2a 	bl	800dc34 <rand>
 800ade0:	4603      	mov	r3, r0
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ade8:	b29b      	uxth	r3, r3
 800adea:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800adee:	b29a      	uxth	r2, r3
 800adf0:	4b01      	ldr	r3, [pc, #4]	@ (800adf8 <udp_init+0x20>)
 800adf2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800adf4:	bf00      	nop
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	20000028 	.word	0x20000028

0800adfc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ae06:	4b17      	ldr	r3, [pc, #92]	@ (800ae64 <udp_new_port+0x68>)
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	1c5a      	adds	r2, r3, #1
 800ae0c:	b291      	uxth	r1, r2
 800ae0e:	4a15      	ldr	r2, [pc, #84]	@ (800ae64 <udp_new_port+0x68>)
 800ae10:	8011      	strh	r1, [r2, #0]
 800ae12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d103      	bne.n	800ae22 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ae1a:	4b12      	ldr	r3, [pc, #72]	@ (800ae64 <udp_new_port+0x68>)
 800ae1c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800ae20:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae22:	4b11      	ldr	r3, [pc, #68]	@ (800ae68 <udp_new_port+0x6c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	603b      	str	r3, [r7, #0]
 800ae28:	e011      	b.n	800ae4e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	8a5a      	ldrh	r2, [r3, #18]
 800ae2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae64 <udp_new_port+0x68>)
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d108      	bne.n	800ae48 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ae36:	88fb      	ldrh	r3, [r7, #6]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	80fb      	strh	r3, [r7, #6]
 800ae3c:	88fb      	ldrh	r3, [r7, #6]
 800ae3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae42:	d3e0      	bcc.n	800ae06 <udp_new_port+0xa>
        return 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	e007      	b.n	800ae58 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	603b      	str	r3, [r7, #0]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1ea      	bne.n	800ae2a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ae54:	4b03      	ldr	r3, [pc, #12]	@ (800ae64 <udp_new_port+0x68>)
 800ae56:	881b      	ldrh	r3, [r3, #0]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	20000028 	.word	0x20000028
 800ae68:	200082ac 	.word	0x200082ac

0800ae6c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	4613      	mov	r3, r2
 800ae78:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d105      	bne.n	800ae8c <udp_input_local_match+0x20>
 800ae80:	4b27      	ldr	r3, [pc, #156]	@ (800af20 <udp_input_local_match+0xb4>)
 800ae82:	2287      	movs	r2, #135	@ 0x87
 800ae84:	4927      	ldr	r1, [pc, #156]	@ (800af24 <udp_input_local_match+0xb8>)
 800ae86:	4828      	ldr	r0, [pc, #160]	@ (800af28 <udp_input_local_match+0xbc>)
 800ae88:	f002 ffd4 	bl	800de34 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d105      	bne.n	800ae9e <udp_input_local_match+0x32>
 800ae92:	4b23      	ldr	r3, [pc, #140]	@ (800af20 <udp_input_local_match+0xb4>)
 800ae94:	2288      	movs	r2, #136	@ 0x88
 800ae96:	4925      	ldr	r1, [pc, #148]	@ (800af2c <udp_input_local_match+0xc0>)
 800ae98:	4823      	ldr	r0, [pc, #140]	@ (800af28 <udp_input_local_match+0xbc>)
 800ae9a:	f002 ffcb 	bl	800de34 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	7a1b      	ldrb	r3, [r3, #8]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00b      	beq.n	800aebe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	7a1a      	ldrb	r2, [r3, #8]
 800aeaa:	4b21      	ldr	r3, [pc, #132]	@ (800af30 <udp_input_local_match+0xc4>)
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d001      	beq.n	800aebe <udp_input_local_match+0x52>
    return 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	e02b      	b.n	800af16 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d018      	beq.n	800aef6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d013      	beq.n	800aef2 <udp_input_local_match+0x86>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00f      	beq.n	800aef2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800aed2:	4b17      	ldr	r3, [pc, #92]	@ (800af30 <udp_input_local_match+0xc4>)
 800aed4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeda:	d00a      	beq.n	800aef2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	4b13      	ldr	r3, [pc, #76]	@ (800af30 <udp_input_local_match+0xc4>)
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	405a      	eors	r2, r3
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	3308      	adds	r3, #8
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d110      	bne.n	800af14 <udp_input_local_match+0xa8>
          return 1;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e00f      	b.n	800af16 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d009      	beq.n	800af10 <udp_input_local_match+0xa4>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d005      	beq.n	800af10 <udp_input_local_match+0xa4>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	4b09      	ldr	r3, [pc, #36]	@ (800af30 <udp_input_local_match+0xc4>)
 800af0a:	695b      	ldr	r3, [r3, #20]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d101      	bne.n	800af14 <udp_input_local_match+0xa8>
        return 1;
 800af10:	2301      	movs	r3, #1
 800af12:	e000      	b.n	800af16 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	08010c34 	.word	0x08010c34
 800af24:	08010c64 	.word	0x08010c64
 800af28:	08010c88 	.word	0x08010c88
 800af2c:	08010cb0 	.word	0x08010cb0
 800af30:	20004ce0 	.word	0x20004ce0

0800af34 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800af34:	b590      	push	{r4, r7, lr}
 800af36:	b08d      	sub	sp, #52	@ 0x34
 800af38:	af02      	add	r7, sp, #8
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800af3e:	2300      	movs	r3, #0
 800af40:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d105      	bne.n	800af54 <udp_input+0x20>
 800af48:	4b7c      	ldr	r3, [pc, #496]	@ (800b13c <udp_input+0x208>)
 800af4a:	22cf      	movs	r2, #207	@ 0xcf
 800af4c:	497c      	ldr	r1, [pc, #496]	@ (800b140 <udp_input+0x20c>)
 800af4e:	487d      	ldr	r0, [pc, #500]	@ (800b144 <udp_input+0x210>)
 800af50:	f002 ff70 	bl	800de34 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d105      	bne.n	800af66 <udp_input+0x32>
 800af5a:	4b78      	ldr	r3, [pc, #480]	@ (800b13c <udp_input+0x208>)
 800af5c:	22d0      	movs	r2, #208	@ 0xd0
 800af5e:	497a      	ldr	r1, [pc, #488]	@ (800b148 <udp_input+0x214>)
 800af60:	4878      	ldr	r0, [pc, #480]	@ (800b144 <udp_input+0x210>)
 800af62:	f002 ff67 	bl	800de34 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	895b      	ldrh	r3, [r3, #10]
 800af6a:	2b07      	cmp	r3, #7
 800af6c:	d803      	bhi.n	800af76 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7fa f9f2 	bl	8005358 <pbuf_free>
    goto end;
 800af74:	e0de      	b.n	800b134 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800af7c:	4b73      	ldr	r3, [pc, #460]	@ (800b14c <udp_input+0x218>)
 800af7e:	695b      	ldr	r3, [r3, #20]
 800af80:	4a72      	ldr	r2, [pc, #456]	@ (800b14c <udp_input+0x218>)
 800af82:	6812      	ldr	r2, [r2, #0]
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f001 fefe 	bl	800cd88 <ip4_addr_isbroadcast_u32>
 800af8c:	4603      	mov	r3, r0
 800af8e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	b29b      	uxth	r3, r3
 800af96:	4618      	mov	r0, r3
 800af98:	f7f8 fe80 	bl	8003c9c <lwip_htons>
 800af9c:	4603      	mov	r3, r0
 800af9e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	885b      	ldrh	r3, [r3, #2]
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7f8 fe78 	bl	8003c9c <lwip_htons>
 800afac:	4603      	mov	r3, r0
 800afae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800afb4:	2300      	movs	r3, #0
 800afb6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800afb8:	2300      	movs	r3, #0
 800afba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800afbc:	4b64      	ldr	r3, [pc, #400]	@ (800b150 <udp_input+0x21c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800afc2:	e054      	b.n	800b06e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800afc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc6:	8a5b      	ldrh	r3, [r3, #18]
 800afc8:	89fa      	ldrh	r2, [r7, #14]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d14a      	bne.n	800b064 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800afce:	7cfb      	ldrb	r3, [r7, #19]
 800afd0:	461a      	mov	r2, r3
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afd6:	f7ff ff49 	bl	800ae6c <udp_input_local_match>
 800afda:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d041      	beq.n	800b064 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800afe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe2:	7c1b      	ldrb	r3, [r3, #16]
 800afe4:	f003 0304 	and.w	r3, r3, #4
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d11d      	bne.n	800b028 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d102      	bne.n	800aff8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800aff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff4:	61fb      	str	r3, [r7, #28]
 800aff6:	e017      	b.n	800b028 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800aff8:	7cfb      	ldrb	r3, [r7, #19]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d014      	beq.n	800b028 <udp_input+0xf4>
 800affe:	4b53      	ldr	r3, [pc, #332]	@ (800b14c <udp_input+0x218>)
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b006:	d10f      	bne.n	800b028 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	3304      	adds	r3, #4
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	429a      	cmp	r2, r3
 800b014:	d008      	beq.n	800b028 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	3304      	adds	r3, #4
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d101      	bne.n	800b028 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b026:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02a:	8a9b      	ldrh	r3, [r3, #20]
 800b02c:	8a3a      	ldrh	r2, [r7, #16]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d118      	bne.n	800b064 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b034:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b036:	2b00      	cmp	r3, #0
 800b038:	d005      	beq.n	800b046 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	4b43      	ldr	r3, [pc, #268]	@ (800b14c <udp_input+0x218>)
 800b040:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b042:	429a      	cmp	r2, r3
 800b044:	d10e      	bne.n	800b064 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d014      	beq.n	800b076 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04e:	68da      	ldr	r2, [r3, #12]
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b054:	4b3e      	ldr	r3, [pc, #248]	@ (800b150 <udp_input+0x21c>)
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b05c:	4a3c      	ldr	r2, [pc, #240]	@ (800b150 <udp_input+0x21c>)
 800b05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b060:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b062:	e008      	b.n	800b076 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b066:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1a7      	bne.n	800afc4 <udp_input+0x90>
 800b074:	e000      	b.n	800b078 <udp_input+0x144>
        break;
 800b076:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <udp_input+0x14e>
    pcb = uncon_pcb;
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <udp_input+0x15a>
    for_us = 1;
 800b088:	2301      	movs	r3, #1
 800b08a:	76fb      	strb	r3, [r7, #27]
 800b08c:	e00a      	b.n	800b0a4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	3304      	adds	r3, #4
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	4b2d      	ldr	r3, [pc, #180]	@ (800b14c <udp_input+0x218>)
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	429a      	cmp	r2, r3
 800b09a:	bf0c      	ite	eq
 800b09c:	2301      	moveq	r3, #1
 800b09e:	2300      	movne	r3, #0
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b0a4:	7efb      	ldrb	r3, [r7, #27]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d041      	beq.n	800b12e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b0aa:	2108      	movs	r1, #8
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7fa f8cd 	bl	800524c <pbuf_remove_header>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00a      	beq.n	800b0ce <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b0b8:	4b20      	ldr	r3, [pc, #128]	@ (800b13c <udp_input+0x208>)
 800b0ba:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800b0be:	4925      	ldr	r1, [pc, #148]	@ (800b154 <udp_input+0x220>)
 800b0c0:	4820      	ldr	r0, [pc, #128]	@ (800b144 <udp_input+0x210>)
 800b0c2:	f002 feb7 	bl	800de34 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7fa f946 	bl	8005358 <pbuf_free>
      goto end;
 800b0cc:	e032      	b.n	800b134 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d012      	beq.n	800b0fa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00a      	beq.n	800b0f2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0de:	699c      	ldr	r4, [r3, #24]
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e2:	69d8      	ldr	r0, [r3, #28]
 800b0e4:	8a3b      	ldrh	r3, [r7, #16]
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	4b1b      	ldr	r3, [pc, #108]	@ (800b158 <udp_input+0x224>)
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b0ee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b0f0:	e021      	b.n	800b136 <udp_input+0x202>
        pbuf_free(p);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7fa f930 	bl	8005358 <pbuf_free>
        goto end;
 800b0f8:	e01c      	b.n	800b134 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b0fa:	7cfb      	ldrb	r3, [r7, #19]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d112      	bne.n	800b126 <udp_input+0x1f2>
 800b100:	4b12      	ldr	r3, [pc, #72]	@ (800b14c <udp_input+0x218>)
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b108:	2be0      	cmp	r3, #224	@ 0xe0
 800b10a:	d00c      	beq.n	800b126 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b10c:	4b0f      	ldr	r3, [pc, #60]	@ (800b14c <udp_input+0x218>)
 800b10e:	899b      	ldrh	r3, [r3, #12]
 800b110:	3308      	adds	r3, #8
 800b112:	b29b      	uxth	r3, r3
 800b114:	b21b      	sxth	r3, r3
 800b116:	4619      	mov	r1, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7fa f90a 	bl	8005332 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b11e:	2103      	movs	r1, #3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f001 fb11 	bl	800c748 <icmp_dest_unreach>
      pbuf_free(p);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7fa f916 	bl	8005358 <pbuf_free>
  return;
 800b12c:	e003      	b.n	800b136 <udp_input+0x202>
    pbuf_free(p);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7fa f912 	bl	8005358 <pbuf_free>
  return;
 800b134:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b136:	372c      	adds	r7, #44	@ 0x2c
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd90      	pop	{r4, r7, pc}
 800b13c:	08010c34 	.word	0x08010c34
 800b140:	08010cd8 	.word	0x08010cd8
 800b144:	08010c88 	.word	0x08010c88
 800b148:	08010cf0 	.word	0x08010cf0
 800b14c:	20004ce0 	.word	0x20004ce0
 800b150:	200082ac 	.word	0x200082ac
 800b154:	08010d0c 	.word	0x08010d0c
 800b158:	20004cf0 	.word	0x20004cf0

0800b15c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b088      	sub	sp, #32
 800b160:	af02      	add	r7, sp, #8
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d109      	bne.n	800b184 <udp_sendto+0x28>
 800b170:	4b23      	ldr	r3, [pc, #140]	@ (800b200 <udp_sendto+0xa4>)
 800b172:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b176:	4923      	ldr	r1, [pc, #140]	@ (800b204 <udp_sendto+0xa8>)
 800b178:	4823      	ldr	r0, [pc, #140]	@ (800b208 <udp_sendto+0xac>)
 800b17a:	f002 fe5b 	bl	800de34 <iprintf>
 800b17e:	f06f 030f 	mvn.w	r3, #15
 800b182:	e038      	b.n	800b1f6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d109      	bne.n	800b19e <udp_sendto+0x42>
 800b18a:	4b1d      	ldr	r3, [pc, #116]	@ (800b200 <udp_sendto+0xa4>)
 800b18c:	f240 2219 	movw	r2, #537	@ 0x219
 800b190:	491e      	ldr	r1, [pc, #120]	@ (800b20c <udp_sendto+0xb0>)
 800b192:	481d      	ldr	r0, [pc, #116]	@ (800b208 <udp_sendto+0xac>)
 800b194:	f002 fe4e 	bl	800de34 <iprintf>
 800b198:	f06f 030f 	mvn.w	r3, #15
 800b19c:	e02b      	b.n	800b1f6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d109      	bne.n	800b1b8 <udp_sendto+0x5c>
 800b1a4:	4b16      	ldr	r3, [pc, #88]	@ (800b200 <udp_sendto+0xa4>)
 800b1a6:	f240 221a 	movw	r2, #538	@ 0x21a
 800b1aa:	4919      	ldr	r1, [pc, #100]	@ (800b210 <udp_sendto+0xb4>)
 800b1ac:	4816      	ldr	r0, [pc, #88]	@ (800b208 <udp_sendto+0xac>)
 800b1ae:	f002 fe41 	bl	800de34 <iprintf>
 800b1b2:	f06f 030f 	mvn.w	r3, #15
 800b1b6:	e01e      	b.n	800b1f6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	7a1b      	ldrb	r3, [r3, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d006      	beq.n	800b1ce <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	7a1b      	ldrb	r3, [r3, #8]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7f9 fd67 	bl	8004c98 <netif_get_by_index>
 800b1ca:	6178      	str	r0, [r7, #20]
 800b1cc:	e003      	b.n	800b1d6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f001 fb44 	bl	800c85c <ip4_route>
 800b1d4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d102      	bne.n	800b1e2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b1dc:	f06f 0303 	mvn.w	r3, #3
 800b1e0:	e009      	b.n	800b1f6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b1e2:	887a      	ldrh	r2, [r7, #2]
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	68b9      	ldr	r1, [r7, #8]
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f000 f810 	bl	800b214 <udp_sendto_if>
 800b1f4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	08010c34 	.word	0x08010c34
 800b204:	08010d58 	.word	0x08010d58
 800b208:	08010c88 	.word	0x08010c88
 800b20c:	08010d70 	.word	0x08010d70
 800b210:	08010d8c 	.word	0x08010d8c

0800b214 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af02      	add	r7, sp, #8
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d109      	bne.n	800b23c <udp_sendto_if+0x28>
 800b228:	4b2e      	ldr	r3, [pc, #184]	@ (800b2e4 <udp_sendto_if+0xd0>)
 800b22a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b22e:	492e      	ldr	r1, [pc, #184]	@ (800b2e8 <udp_sendto_if+0xd4>)
 800b230:	482e      	ldr	r0, [pc, #184]	@ (800b2ec <udp_sendto_if+0xd8>)
 800b232:	f002 fdff 	bl	800de34 <iprintf>
 800b236:	f06f 030f 	mvn.w	r3, #15
 800b23a:	e04f      	b.n	800b2dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d109      	bne.n	800b256 <udp_sendto_if+0x42>
 800b242:	4b28      	ldr	r3, [pc, #160]	@ (800b2e4 <udp_sendto_if+0xd0>)
 800b244:	f240 2281 	movw	r2, #641	@ 0x281
 800b248:	4929      	ldr	r1, [pc, #164]	@ (800b2f0 <udp_sendto_if+0xdc>)
 800b24a:	4828      	ldr	r0, [pc, #160]	@ (800b2ec <udp_sendto_if+0xd8>)
 800b24c:	f002 fdf2 	bl	800de34 <iprintf>
 800b250:	f06f 030f 	mvn.w	r3, #15
 800b254:	e042      	b.n	800b2dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d109      	bne.n	800b270 <udp_sendto_if+0x5c>
 800b25c:	4b21      	ldr	r3, [pc, #132]	@ (800b2e4 <udp_sendto_if+0xd0>)
 800b25e:	f240 2282 	movw	r2, #642	@ 0x282
 800b262:	4924      	ldr	r1, [pc, #144]	@ (800b2f4 <udp_sendto_if+0xe0>)
 800b264:	4821      	ldr	r0, [pc, #132]	@ (800b2ec <udp_sendto_if+0xd8>)
 800b266:	f002 fde5 	bl	800de34 <iprintf>
 800b26a:	f06f 030f 	mvn.w	r3, #15
 800b26e:	e035      	b.n	800b2dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d109      	bne.n	800b28a <udp_sendto_if+0x76>
 800b276:	4b1b      	ldr	r3, [pc, #108]	@ (800b2e4 <udp_sendto_if+0xd0>)
 800b278:	f240 2283 	movw	r2, #643	@ 0x283
 800b27c:	491e      	ldr	r1, [pc, #120]	@ (800b2f8 <udp_sendto_if+0xe4>)
 800b27e:	481b      	ldr	r0, [pc, #108]	@ (800b2ec <udp_sendto_if+0xd8>)
 800b280:	f002 fdd8 	bl	800de34 <iprintf>
 800b284:	f06f 030f 	mvn.w	r3, #15
 800b288:	e028      	b.n	800b2dc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d009      	beq.n	800b2a4 <udp_sendto_if+0x90>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d005      	beq.n	800b2a4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b2a0:	2be0      	cmp	r3, #224	@ 0xe0
 800b2a2:	d103      	bne.n	800b2ac <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	617b      	str	r3, [r7, #20]
 800b2aa:	e00b      	b.n	800b2c4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d002      	beq.n	800b2c0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b2ba:	f06f 0303 	mvn.w	r3, #3
 800b2be:	e00d      	b.n	800b2dc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b2c4:	887a      	ldrh	r2, [r7, #2]
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	6a3b      	ldr	r3, [r7, #32]
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	68b9      	ldr	r1, [r7, #8]
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 f811 	bl	800b2fc <udp_sendto_if_src>
 800b2da:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	08010c34 	.word	0x08010c34
 800b2e8:	08010da8 	.word	0x08010da8
 800b2ec:	08010c88 	.word	0x08010c88
 800b2f0:	08010dc4 	.word	0x08010dc4
 800b2f4:	08010de0 	.word	0x08010de0
 800b2f8:	08010e00 	.word	0x08010e00

0800b2fc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08c      	sub	sp, #48	@ 0x30
 800b300:	af04      	add	r7, sp, #16
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
 800b308:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d109      	bne.n	800b324 <udp_sendto_if_src+0x28>
 800b310:	4b65      	ldr	r3, [pc, #404]	@ (800b4a8 <udp_sendto_if_src+0x1ac>)
 800b312:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b316:	4965      	ldr	r1, [pc, #404]	@ (800b4ac <udp_sendto_if_src+0x1b0>)
 800b318:	4865      	ldr	r0, [pc, #404]	@ (800b4b0 <udp_sendto_if_src+0x1b4>)
 800b31a:	f002 fd8b 	bl	800de34 <iprintf>
 800b31e:	f06f 030f 	mvn.w	r3, #15
 800b322:	e0bc      	b.n	800b49e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d109      	bne.n	800b33e <udp_sendto_if_src+0x42>
 800b32a:	4b5f      	ldr	r3, [pc, #380]	@ (800b4a8 <udp_sendto_if_src+0x1ac>)
 800b32c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800b330:	4960      	ldr	r1, [pc, #384]	@ (800b4b4 <udp_sendto_if_src+0x1b8>)
 800b332:	485f      	ldr	r0, [pc, #380]	@ (800b4b0 <udp_sendto_if_src+0x1b4>)
 800b334:	f002 fd7e 	bl	800de34 <iprintf>
 800b338:	f06f 030f 	mvn.w	r3, #15
 800b33c:	e0af      	b.n	800b49e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d109      	bne.n	800b358 <udp_sendto_if_src+0x5c>
 800b344:	4b58      	ldr	r3, [pc, #352]	@ (800b4a8 <udp_sendto_if_src+0x1ac>)
 800b346:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800b34a:	495b      	ldr	r1, [pc, #364]	@ (800b4b8 <udp_sendto_if_src+0x1bc>)
 800b34c:	4858      	ldr	r0, [pc, #352]	@ (800b4b0 <udp_sendto_if_src+0x1b4>)
 800b34e:	f002 fd71 	bl	800de34 <iprintf>
 800b352:	f06f 030f 	mvn.w	r3, #15
 800b356:	e0a2      	b.n	800b49e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d109      	bne.n	800b372 <udp_sendto_if_src+0x76>
 800b35e:	4b52      	ldr	r3, [pc, #328]	@ (800b4a8 <udp_sendto_if_src+0x1ac>)
 800b360:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800b364:	4955      	ldr	r1, [pc, #340]	@ (800b4bc <udp_sendto_if_src+0x1c0>)
 800b366:	4852      	ldr	r0, [pc, #328]	@ (800b4b0 <udp_sendto_if_src+0x1b4>)
 800b368:	f002 fd64 	bl	800de34 <iprintf>
 800b36c:	f06f 030f 	mvn.w	r3, #15
 800b370:	e095      	b.n	800b49e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b374:	2b00      	cmp	r3, #0
 800b376:	d109      	bne.n	800b38c <udp_sendto_if_src+0x90>
 800b378:	4b4b      	ldr	r3, [pc, #300]	@ (800b4a8 <udp_sendto_if_src+0x1ac>)
 800b37a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800b37e:	4950      	ldr	r1, [pc, #320]	@ (800b4c0 <udp_sendto_if_src+0x1c4>)
 800b380:	484b      	ldr	r0, [pc, #300]	@ (800b4b0 <udp_sendto_if_src+0x1b4>)
 800b382:	f002 fd57 	bl	800de34 <iprintf>
 800b386:	f06f 030f 	mvn.w	r3, #15
 800b38a:	e088      	b.n	800b49e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	8a5b      	ldrh	r3, [r3, #18]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10f      	bne.n	800b3b4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b394:	68f9      	ldr	r1, [r7, #12]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	8a5b      	ldrh	r3, [r3, #18]
 800b39a:	461a      	mov	r2, r3
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 f893 	bl	800b4c8 <udp_bind>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b3a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b3ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b3b2:	e074      	b.n	800b49e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	891b      	ldrh	r3, [r3, #8]
 800b3b8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d902      	bls.n	800b3c6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c4:	e06b      	b.n	800b49e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b3c6:	2108      	movs	r1, #8
 800b3c8:	68b8      	ldr	r0, [r7, #8]
 800b3ca:	f7f9 ff2f 	bl	800522c <pbuf_add_header>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d015      	beq.n	800b400 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b3d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b3d8:	2108      	movs	r1, #8
 800b3da:	2022      	movs	r0, #34	@ 0x22
 800b3dc:	f7f9 fcd8 	bl	8004d90 <pbuf_alloc>
 800b3e0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d102      	bne.n	800b3ee <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ec:	e057      	b.n	800b49e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	891b      	ldrh	r3, [r3, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d006      	beq.n	800b404 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b3f6:	68b9      	ldr	r1, [r7, #8]
 800b3f8:	69f8      	ldr	r0, [r7, #28]
 800b3fa:	f7fa f8c5 	bl	8005588 <pbuf_chain>
 800b3fe:	e001      	b.n	800b404 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	895b      	ldrh	r3, [r3, #10]
 800b408:	2b07      	cmp	r3, #7
 800b40a:	d806      	bhi.n	800b41a <udp_sendto_if_src+0x11e>
 800b40c:	4b26      	ldr	r3, [pc, #152]	@ (800b4a8 <udp_sendto_if_src+0x1ac>)
 800b40e:	f240 320d 	movw	r2, #781	@ 0x30d
 800b412:	492c      	ldr	r1, [pc, #176]	@ (800b4c4 <udp_sendto_if_src+0x1c8>)
 800b414:	4826      	ldr	r0, [pc, #152]	@ (800b4b0 <udp_sendto_if_src+0x1b4>)
 800b416:	f002 fd0d 	bl	800de34 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	8a5b      	ldrh	r3, [r3, #18]
 800b424:	4618      	mov	r0, r3
 800b426:	f7f8 fc39 	bl	8003c9c <lwip_htons>
 800b42a:	4603      	mov	r3, r0
 800b42c:	461a      	mov	r2, r3
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b432:	887b      	ldrh	r3, [r7, #2]
 800b434:	4618      	mov	r0, r3
 800b436:	f7f8 fc31 	bl	8003c9c <lwip_htons>
 800b43a:	4603      	mov	r3, r0
 800b43c:	461a      	mov	r2, r3
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	2200      	movs	r2, #0
 800b446:	719a      	strb	r2, [r3, #6]
 800b448:	2200      	movs	r2, #0
 800b44a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	891b      	ldrh	r3, [r3, #8]
 800b450:	4618      	mov	r0, r3
 800b452:	f7f8 fc23 	bl	8003c9c <lwip_htons>
 800b456:	4603      	mov	r3, r0
 800b458:	461a      	mov	r2, r3
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b45e:	2311      	movs	r3, #17
 800b460:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	7adb      	ldrb	r3, [r3, #11]
 800b466:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	7a9b      	ldrb	r3, [r3, #10]
 800b46c:	7cb9      	ldrb	r1, [r7, #18]
 800b46e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b470:	9202      	str	r2, [sp, #8]
 800b472:	7cfa      	ldrb	r2, [r7, #19]
 800b474:	9201      	str	r2, [sp, #4]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	460b      	mov	r3, r1
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b47e:	69f8      	ldr	r0, [r7, #28]
 800b480:	f001 fbd4 	bl	800cc2c <ip4_output_if_src>
 800b484:	4603      	mov	r3, r0
 800b486:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b488:	69fa      	ldr	r2, [r7, #28]
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d004      	beq.n	800b49a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b490:	69f8      	ldr	r0, [r7, #28]
 800b492:	f7f9 ff61 	bl	8005358 <pbuf_free>
    q = NULL;
 800b496:	2300      	movs	r3, #0
 800b498:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b49a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3720      	adds	r7, #32
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	08010c34 	.word	0x08010c34
 800b4ac:	08010e20 	.word	0x08010e20
 800b4b0:	08010c88 	.word	0x08010c88
 800b4b4:	08010e40 	.word	0x08010e40
 800b4b8:	08010e60 	.word	0x08010e60
 800b4bc:	08010e84 	.word	0x08010e84
 800b4c0:	08010ea8 	.word	0x08010ea8
 800b4c4:	08010ecc 	.word	0x08010ecc

0800b4c8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b4dc:	4b39      	ldr	r3, [pc, #228]	@ (800b5c4 <udp_bind+0xfc>)
 800b4de:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d109      	bne.n	800b4fa <udp_bind+0x32>
 800b4e6:	4b38      	ldr	r3, [pc, #224]	@ (800b5c8 <udp_bind+0x100>)
 800b4e8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800b4ec:	4937      	ldr	r1, [pc, #220]	@ (800b5cc <udp_bind+0x104>)
 800b4ee:	4838      	ldr	r0, [pc, #224]	@ (800b5d0 <udp_bind+0x108>)
 800b4f0:	f002 fca0 	bl	800de34 <iprintf>
 800b4f4:	f06f 030f 	mvn.w	r3, #15
 800b4f8:	e060      	b.n	800b5bc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b4fe:	4b35      	ldr	r3, [pc, #212]	@ (800b5d4 <udp_bind+0x10c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	617b      	str	r3, [r7, #20]
 800b504:	e009      	b.n	800b51a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d102      	bne.n	800b514 <udp_bind+0x4c>
      rebind = 1;
 800b50e:	2301      	movs	r3, #1
 800b510:	74fb      	strb	r3, [r7, #19]
      break;
 800b512:	e005      	b.n	800b520 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	617b      	str	r3, [r7, #20]
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1f2      	bne.n	800b506 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b520:	88fb      	ldrh	r3, [r7, #6]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d109      	bne.n	800b53a <udp_bind+0x72>
    port = udp_new_port();
 800b526:	f7ff fc69 	bl	800adfc <udp_new_port>
 800b52a:	4603      	mov	r3, r0
 800b52c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b52e:	88fb      	ldrh	r3, [r7, #6]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d12c      	bne.n	800b58e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b534:	f06f 0307 	mvn.w	r3, #7
 800b538:	e040      	b.n	800b5bc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b53a:	4b26      	ldr	r3, [pc, #152]	@ (800b5d4 <udp_bind+0x10c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	e022      	b.n	800b588 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	429a      	cmp	r2, r3
 800b548:	d01b      	beq.n	800b582 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	8a5b      	ldrh	r3, [r3, #18]
 800b54e:	88fa      	ldrh	r2, [r7, #6]
 800b550:	429a      	cmp	r2, r3
 800b552:	d116      	bne.n	800b582 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d00d      	beq.n	800b57c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00a      	beq.n	800b57c <udp_bind+0xb4>
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d006      	beq.n	800b57c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b56e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d102      	bne.n	800b582 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b57c:	f06f 0307 	mvn.w	r3, #7
 800b580:	e01c      	b.n	800b5bc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	617b      	str	r3, [r7, #20]
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1d9      	bne.n	800b542 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <udp_bind+0xd2>
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	e000      	b.n	800b59c <udp_bind+0xd4>
 800b59a:	2300      	movs	r3, #0
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	88fa      	ldrh	r2, [r7, #6]
 800b5a4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b5a6:	7cfb      	ldrb	r3, [r7, #19]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d106      	bne.n	800b5ba <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b5ac:	4b09      	ldr	r3, [pc, #36]	@ (800b5d4 <udp_bind+0x10c>)
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b5b4:	4a07      	ldr	r2, [pc, #28]	@ (800b5d4 <udp_bind+0x10c>)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	08011748 	.word	0x08011748
 800b5c8:	08010c34 	.word	0x08010c34
 800b5cc:	08010efc 	.word	0x08010efc
 800b5d0:	08010c88 	.word	0x08010c88
 800b5d4:	200082ac 	.word	0x200082ac

0800b5d8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d107      	bne.n	800b5fa <udp_recv+0x22>
 800b5ea:	4b08      	ldr	r3, [pc, #32]	@ (800b60c <udp_recv+0x34>)
 800b5ec:	f240 428a 	movw	r2, #1162	@ 0x48a
 800b5f0:	4907      	ldr	r1, [pc, #28]	@ (800b610 <udp_recv+0x38>)
 800b5f2:	4808      	ldr	r0, [pc, #32]	@ (800b614 <udp_recv+0x3c>)
 800b5f4:	f002 fc1e 	bl	800de34 <iprintf>
 800b5f8:	e005      	b.n	800b606 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	61da      	str	r2, [r3, #28]
}
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	08010c34 	.word	0x08010c34
 800b610:	08010f68 	.word	0x08010f68
 800b614:	08010c88 	.word	0x08010c88

0800b618 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b61e:	2000      	movs	r0, #0
 800b620:	f7f8 ffb4 	bl	800458c <memp_malloc>
 800b624:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d007      	beq.n	800b63c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b62c:	2220      	movs	r2, #32
 800b62e:	2100      	movs	r1, #0
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f002 fc64 	bl	800defe <memset>
    pcb->ttl = UDP_TTL;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	22ff      	movs	r2, #255	@ 0xff
 800b63a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b63c:	687b      	ldr	r3, [r7, #4]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
	...

0800b648 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d01e      	beq.n	800b696 <udp_netif_ip_addr_changed+0x4e>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d01a      	beq.n	800b696 <udp_netif_ip_addr_changed+0x4e>
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d017      	beq.n	800b696 <udp_netif_ip_addr_changed+0x4e>
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d013      	beq.n	800b696 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b66e:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a4 <udp_netif_ip_addr_changed+0x5c>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	60fb      	str	r3, [r7, #12]
 800b674:	e00c      	b.n	800b690 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d103      	bne.n	800b68a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1ef      	bne.n	800b676 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b696:	bf00      	nop
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	200082ac 	.word	0x200082ac

0800b6a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b6b0:	4915      	ldr	r1, [pc, #84]	@ (800b708 <etharp_free_entry+0x60>)
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	005b      	lsls	r3, r3, #1
 800b6b8:	4413      	add	r3, r2
 800b6ba:	00db      	lsls	r3, r3, #3
 800b6bc:	440b      	add	r3, r1
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d013      	beq.n	800b6ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b6c4:	4910      	ldr	r1, [pc, #64]	@ (800b708 <etharp_free_entry+0x60>)
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	005b      	lsls	r3, r3, #1
 800b6cc:	4413      	add	r3, r2
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	440b      	add	r3, r1
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7f9 fe3f 	bl	8005358 <pbuf_free>
    arp_table[i].q = NULL;
 800b6da:	490b      	ldr	r1, [pc, #44]	@ (800b708 <etharp_free_entry+0x60>)
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	4413      	add	r3, r2
 800b6e4:	00db      	lsls	r3, r3, #3
 800b6e6:	440b      	add	r3, r1
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b6ec:	4906      	ldr	r1, [pc, #24]	@ (800b708 <etharp_free_entry+0x60>)
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	4613      	mov	r3, r2
 800b6f2:	005b      	lsls	r3, r3, #1
 800b6f4:	4413      	add	r3, r2
 800b6f6:	00db      	lsls	r3, r3, #3
 800b6f8:	440b      	add	r3, r1
 800b6fa:	3314      	adds	r3, #20
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b700:	bf00      	nop
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	200082b0 	.word	0x200082b0

0800b70c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b712:	2300      	movs	r3, #0
 800b714:	607b      	str	r3, [r7, #4]
 800b716:	e096      	b.n	800b846 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b718:	494f      	ldr	r1, [pc, #316]	@ (800b858 <etharp_tmr+0x14c>)
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	4613      	mov	r3, r2
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	4413      	add	r3, r2
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	440b      	add	r3, r1
 800b726:	3314      	adds	r3, #20
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b72c:	78fb      	ldrb	r3, [r7, #3]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 8086 	beq.w	800b840 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b734:	4948      	ldr	r1, [pc, #288]	@ (800b858 <etharp_tmr+0x14c>)
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	4613      	mov	r3, r2
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	4413      	add	r3, r2
 800b73e:	00db      	lsls	r3, r3, #3
 800b740:	440b      	add	r3, r1
 800b742:	3312      	adds	r3, #18
 800b744:	881b      	ldrh	r3, [r3, #0]
 800b746:	3301      	adds	r3, #1
 800b748:	b298      	uxth	r0, r3
 800b74a:	4943      	ldr	r1, [pc, #268]	@ (800b858 <etharp_tmr+0x14c>)
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	4613      	mov	r3, r2
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	4413      	add	r3, r2
 800b754:	00db      	lsls	r3, r3, #3
 800b756:	440b      	add	r3, r1
 800b758:	3312      	adds	r3, #18
 800b75a:	4602      	mov	r2, r0
 800b75c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b75e:	493e      	ldr	r1, [pc, #248]	@ (800b858 <etharp_tmr+0x14c>)
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	4613      	mov	r3, r2
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	4413      	add	r3, r2
 800b768:	00db      	lsls	r3, r3, #3
 800b76a:	440b      	add	r3, r1
 800b76c:	3312      	adds	r3, #18
 800b76e:	881b      	ldrh	r3, [r3, #0]
 800b770:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800b774:	d215      	bcs.n	800b7a2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b776:	4938      	ldr	r1, [pc, #224]	@ (800b858 <etharp_tmr+0x14c>)
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	4613      	mov	r3, r2
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	4413      	add	r3, r2
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	440b      	add	r3, r1
 800b784:	3314      	adds	r3, #20
 800b786:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d10e      	bne.n	800b7aa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b78c:	4932      	ldr	r1, [pc, #200]	@ (800b858 <etharp_tmr+0x14c>)
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	4613      	mov	r3, r2
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	4413      	add	r3, r2
 800b796:	00db      	lsls	r3, r3, #3
 800b798:	440b      	add	r3, r1
 800b79a:	3312      	adds	r3, #18
 800b79c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b79e:	2b04      	cmp	r3, #4
 800b7a0:	d903      	bls.n	800b7aa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7ff ff80 	bl	800b6a8 <etharp_free_entry>
 800b7a8:	e04a      	b.n	800b840 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b7aa:	492b      	ldr	r1, [pc, #172]	@ (800b858 <etharp_tmr+0x14c>)
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	005b      	lsls	r3, r3, #1
 800b7b2:	4413      	add	r3, r2
 800b7b4:	00db      	lsls	r3, r3, #3
 800b7b6:	440b      	add	r3, r1
 800b7b8:	3314      	adds	r3, #20
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d10a      	bne.n	800b7d6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b7c0:	4925      	ldr	r1, [pc, #148]	@ (800b858 <etharp_tmr+0x14c>)
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	005b      	lsls	r3, r3, #1
 800b7c8:	4413      	add	r3, r2
 800b7ca:	00db      	lsls	r3, r3, #3
 800b7cc:	440b      	add	r3, r1
 800b7ce:	3314      	adds	r3, #20
 800b7d0:	2204      	movs	r2, #4
 800b7d2:	701a      	strb	r2, [r3, #0]
 800b7d4:	e034      	b.n	800b840 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b7d6:	4920      	ldr	r1, [pc, #128]	@ (800b858 <etharp_tmr+0x14c>)
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	005b      	lsls	r3, r3, #1
 800b7de:	4413      	add	r3, r2
 800b7e0:	00db      	lsls	r3, r3, #3
 800b7e2:	440b      	add	r3, r1
 800b7e4:	3314      	adds	r3, #20
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b04      	cmp	r3, #4
 800b7ea:	d10a      	bne.n	800b802 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b7ec:	491a      	ldr	r1, [pc, #104]	@ (800b858 <etharp_tmr+0x14c>)
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	005b      	lsls	r3, r3, #1
 800b7f4:	4413      	add	r3, r2
 800b7f6:	00db      	lsls	r3, r3, #3
 800b7f8:	440b      	add	r3, r1
 800b7fa:	3314      	adds	r3, #20
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	701a      	strb	r2, [r3, #0]
 800b800:	e01e      	b.n	800b840 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b802:	4915      	ldr	r1, [pc, #84]	@ (800b858 <etharp_tmr+0x14c>)
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	4613      	mov	r3, r2
 800b808:	005b      	lsls	r3, r3, #1
 800b80a:	4413      	add	r3, r2
 800b80c:	00db      	lsls	r3, r3, #3
 800b80e:	440b      	add	r3, r1
 800b810:	3314      	adds	r3, #20
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d113      	bne.n	800b840 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b818:	490f      	ldr	r1, [pc, #60]	@ (800b858 <etharp_tmr+0x14c>)
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	4613      	mov	r3, r2
 800b81e:	005b      	lsls	r3, r3, #1
 800b820:	4413      	add	r3, r2
 800b822:	00db      	lsls	r3, r3, #3
 800b824:	440b      	add	r3, r1
 800b826:	3308      	adds	r3, #8
 800b828:	6818      	ldr	r0, [r3, #0]
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	4613      	mov	r3, r2
 800b82e:	005b      	lsls	r3, r3, #1
 800b830:	4413      	add	r3, r2
 800b832:	00db      	lsls	r3, r3, #3
 800b834:	4a08      	ldr	r2, [pc, #32]	@ (800b858 <etharp_tmr+0x14c>)
 800b836:	4413      	add	r3, r2
 800b838:	3304      	adds	r3, #4
 800b83a:	4619      	mov	r1, r3
 800b83c:	f000 fe6e 	bl	800c51c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	3301      	adds	r3, #1
 800b844:	607b      	str	r3, [r7, #4]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2b09      	cmp	r3, #9
 800b84a:	f77f af65 	ble.w	800b718 <etharp_tmr+0xc>
      }
    }
  }
}
 800b84e:	bf00      	nop
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	200082b0 	.word	0x200082b0

0800b85c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	@ 0x28
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	460b      	mov	r3, r1
 800b866:	607a      	str	r2, [r7, #4]
 800b868:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b86a:	230a      	movs	r3, #10
 800b86c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b86e:	230a      	movs	r3, #10
 800b870:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800b872:	230a      	movs	r3, #10
 800b874:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b87a:	230a      	movs	r3, #10
 800b87c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	83bb      	strh	r3, [r7, #28]
 800b882:	2300      	movs	r3, #0
 800b884:	837b      	strh	r3, [r7, #26]
 800b886:	2300      	movs	r3, #0
 800b888:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b88a:	2300      	movs	r3, #0
 800b88c:	843b      	strh	r3, [r7, #32]
 800b88e:	e0ae      	b.n	800b9ee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800b890:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b894:	49a6      	ldr	r1, [pc, #664]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800b896:	4613      	mov	r3, r2
 800b898:	005b      	lsls	r3, r3, #1
 800b89a:	4413      	add	r3, r2
 800b89c:	00db      	lsls	r3, r3, #3
 800b89e:	440b      	add	r3, r1
 800b8a0:	3314      	adds	r3, #20
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b8a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b8aa:	2b0a      	cmp	r3, #10
 800b8ac:	d105      	bne.n	800b8ba <etharp_find_entry+0x5e>
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d102      	bne.n	800b8ba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800b8b4:	8c3b      	ldrh	r3, [r7, #32]
 800b8b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b8b8:	e095      	b.n	800b9e6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 8092 	beq.w	800b9e6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b8c2:	7dfb      	ldrb	r3, [r7, #23]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d009      	beq.n	800b8dc <etharp_find_entry+0x80>
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d806      	bhi.n	800b8dc <etharp_find_entry+0x80>
 800b8ce:	4b99      	ldr	r3, [pc, #612]	@ (800bb34 <etharp_find_entry+0x2d8>)
 800b8d0:	f240 1223 	movw	r2, #291	@ 0x123
 800b8d4:	4998      	ldr	r1, [pc, #608]	@ (800bb38 <etharp_find_entry+0x2dc>)
 800b8d6:	4899      	ldr	r0, [pc, #612]	@ (800bb3c <etharp_find_entry+0x2e0>)
 800b8d8:	f002 faac 	bl	800de34 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d020      	beq.n	800b924 <etharp_find_entry+0xc8>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6819      	ldr	r1, [r3, #0]
 800b8e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b8ea:	4891      	ldr	r0, [pc, #580]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	4413      	add	r3, r2
 800b8f2:	00db      	lsls	r3, r3, #3
 800b8f4:	4403      	add	r3, r0
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4299      	cmp	r1, r3
 800b8fc:	d112      	bne.n	800b924 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00c      	beq.n	800b91e <etharp_find_entry+0xc2>
 800b904:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b908:	4989      	ldr	r1, [pc, #548]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800b90a:	4613      	mov	r3, r2
 800b90c:	005b      	lsls	r3, r3, #1
 800b90e:	4413      	add	r3, r2
 800b910:	00db      	lsls	r3, r3, #3
 800b912:	440b      	add	r3, r1
 800b914:	3308      	adds	r3, #8
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d102      	bne.n	800b924 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b91e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b922:	e100      	b.n	800bb26 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b924:	7dfb      	ldrb	r3, [r7, #23]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d140      	bne.n	800b9ac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b92a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b92e:	4980      	ldr	r1, [pc, #512]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800b930:	4613      	mov	r3, r2
 800b932:	005b      	lsls	r3, r3, #1
 800b934:	4413      	add	r3, r2
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	440b      	add	r3, r1
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d01a      	beq.n	800b976 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800b940:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b944:	497a      	ldr	r1, [pc, #488]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800b946:	4613      	mov	r3, r2
 800b948:	005b      	lsls	r3, r3, #1
 800b94a:	4413      	add	r3, r2
 800b94c:	00db      	lsls	r3, r3, #3
 800b94e:	440b      	add	r3, r1
 800b950:	3312      	adds	r3, #18
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	8bba      	ldrh	r2, [r7, #28]
 800b956:	429a      	cmp	r2, r3
 800b958:	d845      	bhi.n	800b9e6 <etharp_find_entry+0x18a>
            old_queue = i;
 800b95a:	8c3b      	ldrh	r3, [r7, #32]
 800b95c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800b95e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b962:	4973      	ldr	r1, [pc, #460]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800b964:	4613      	mov	r3, r2
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	4413      	add	r3, r2
 800b96a:	00db      	lsls	r3, r3, #3
 800b96c:	440b      	add	r3, r1
 800b96e:	3312      	adds	r3, #18
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	83bb      	strh	r3, [r7, #28]
 800b974:	e037      	b.n	800b9e6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b976:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b97a:	496d      	ldr	r1, [pc, #436]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800b97c:	4613      	mov	r3, r2
 800b97e:	005b      	lsls	r3, r3, #1
 800b980:	4413      	add	r3, r2
 800b982:	00db      	lsls	r3, r3, #3
 800b984:	440b      	add	r3, r1
 800b986:	3312      	adds	r3, #18
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	8b7a      	ldrh	r2, [r7, #26]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d82a      	bhi.n	800b9e6 <etharp_find_entry+0x18a>
            old_pending = i;
 800b990:	8c3b      	ldrh	r3, [r7, #32]
 800b992:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800b994:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b998:	4965      	ldr	r1, [pc, #404]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800b99a:	4613      	mov	r3, r2
 800b99c:	005b      	lsls	r3, r3, #1
 800b99e:	4413      	add	r3, r2
 800b9a0:	00db      	lsls	r3, r3, #3
 800b9a2:	440b      	add	r3, r1
 800b9a4:	3312      	adds	r3, #18
 800b9a6:	881b      	ldrh	r3, [r3, #0]
 800b9a8:	837b      	strh	r3, [r7, #26]
 800b9aa:	e01c      	b.n	800b9e6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b9ac:	7dfb      	ldrb	r3, [r7, #23]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d919      	bls.n	800b9e6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b9b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b9b6:	495e      	ldr	r1, [pc, #376]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	005b      	lsls	r3, r3, #1
 800b9bc:	4413      	add	r3, r2
 800b9be:	00db      	lsls	r3, r3, #3
 800b9c0:	440b      	add	r3, r1
 800b9c2:	3312      	adds	r3, #18
 800b9c4:	881b      	ldrh	r3, [r3, #0]
 800b9c6:	8b3a      	ldrh	r2, [r7, #24]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d80c      	bhi.n	800b9e6 <etharp_find_entry+0x18a>
            old_stable = i;
 800b9cc:	8c3b      	ldrh	r3, [r7, #32]
 800b9ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800b9d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b9d4:	4956      	ldr	r1, [pc, #344]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	005b      	lsls	r3, r3, #1
 800b9da:	4413      	add	r3, r2
 800b9dc:	00db      	lsls	r3, r3, #3
 800b9de:	440b      	add	r3, r1
 800b9e0:	3312      	adds	r3, #18
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b9e6:	8c3b      	ldrh	r3, [r7, #32]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	843b      	strh	r3, [r7, #32]
 800b9ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b9f2:	2b09      	cmp	r3, #9
 800b9f4:	f77f af4c 	ble.w	800b890 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b9f8:	7afb      	ldrb	r3, [r7, #11]
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d108      	bne.n	800ba14 <etharp_find_entry+0x1b8>
 800ba02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ba06:	2b0a      	cmp	r3, #10
 800ba08:	d107      	bne.n	800ba1a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ba0a:	7afb      	ldrb	r3, [r7, #11]
 800ba0c:	f003 0301 	and.w	r3, r3, #1
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d102      	bne.n	800ba1a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ba14:	f04f 33ff 	mov.w	r3, #4294967295
 800ba18:	e085      	b.n	800bb26 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ba1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ba1e:	2b09      	cmp	r3, #9
 800ba20:	dc02      	bgt.n	800ba28 <etharp_find_entry+0x1cc>
    i = empty;
 800ba22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba24:	843b      	strh	r3, [r7, #32]
 800ba26:	e039      	b.n	800ba9c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ba28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800ba2c:	2b09      	cmp	r3, #9
 800ba2e:	dc14      	bgt.n	800ba5a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ba30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba32:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ba34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ba38:	493d      	ldr	r1, [pc, #244]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	4413      	add	r3, r2
 800ba40:	00db      	lsls	r3, r3, #3
 800ba42:	440b      	add	r3, r1
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d018      	beq.n	800ba7c <etharp_find_entry+0x220>
 800ba4a:	4b3a      	ldr	r3, [pc, #232]	@ (800bb34 <etharp_find_entry+0x2d8>)
 800ba4c:	f240 126d 	movw	r2, #365	@ 0x16d
 800ba50:	493b      	ldr	r1, [pc, #236]	@ (800bb40 <etharp_find_entry+0x2e4>)
 800ba52:	483a      	ldr	r0, [pc, #232]	@ (800bb3c <etharp_find_entry+0x2e0>)
 800ba54:	f002 f9ee 	bl	800de34 <iprintf>
 800ba58:	e010      	b.n	800ba7c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ba5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800ba5e:	2b09      	cmp	r3, #9
 800ba60:	dc02      	bgt.n	800ba68 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ba62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba64:	843b      	strh	r3, [r7, #32]
 800ba66:	e009      	b.n	800ba7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ba68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ba6c:	2b09      	cmp	r3, #9
 800ba6e:	dc02      	bgt.n	800ba76 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ba70:	8bfb      	ldrh	r3, [r7, #30]
 800ba72:	843b      	strh	r3, [r7, #32]
 800ba74:	e002      	b.n	800ba7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ba76:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7a:	e054      	b.n	800bb26 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ba7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ba80:	2b09      	cmp	r3, #9
 800ba82:	dd06      	ble.n	800ba92 <etharp_find_entry+0x236>
 800ba84:	4b2b      	ldr	r3, [pc, #172]	@ (800bb34 <etharp_find_entry+0x2d8>)
 800ba86:	f240 127f 	movw	r2, #383	@ 0x17f
 800ba8a:	492e      	ldr	r1, [pc, #184]	@ (800bb44 <etharp_find_entry+0x2e8>)
 800ba8c:	482b      	ldr	r0, [pc, #172]	@ (800bb3c <etharp_find_entry+0x2e0>)
 800ba8e:	f002 f9d1 	bl	800de34 <iprintf>
    etharp_free_entry(i);
 800ba92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7ff fe06 	bl	800b6a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ba9c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800baa0:	2b09      	cmp	r3, #9
 800baa2:	dd06      	ble.n	800bab2 <etharp_find_entry+0x256>
 800baa4:	4b23      	ldr	r3, [pc, #140]	@ (800bb34 <etharp_find_entry+0x2d8>)
 800baa6:	f240 1283 	movw	r2, #387	@ 0x183
 800baaa:	4926      	ldr	r1, [pc, #152]	@ (800bb44 <etharp_find_entry+0x2e8>)
 800baac:	4823      	ldr	r0, [pc, #140]	@ (800bb3c <etharp_find_entry+0x2e0>)
 800baae:	f002 f9c1 	bl	800de34 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bab2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bab6:	491e      	ldr	r1, [pc, #120]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800bab8:	4613      	mov	r3, r2
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	4413      	add	r3, r2
 800babe:	00db      	lsls	r3, r3, #3
 800bac0:	440b      	add	r3, r1
 800bac2:	3314      	adds	r3, #20
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d006      	beq.n	800bad8 <etharp_find_entry+0x27c>
 800baca:	4b1a      	ldr	r3, [pc, #104]	@ (800bb34 <etharp_find_entry+0x2d8>)
 800bacc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800bad0:	491d      	ldr	r1, [pc, #116]	@ (800bb48 <etharp_find_entry+0x2ec>)
 800bad2:	481a      	ldr	r0, [pc, #104]	@ (800bb3c <etharp_find_entry+0x2e0>)
 800bad4:	f002 f9ae 	bl	800de34 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00b      	beq.n	800baf6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6819      	ldr	r1, [r3, #0]
 800bae6:	4812      	ldr	r0, [pc, #72]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800bae8:	4613      	mov	r3, r2
 800baea:	005b      	lsls	r3, r3, #1
 800baec:	4413      	add	r3, r2
 800baee:	00db      	lsls	r3, r3, #3
 800baf0:	4403      	add	r3, r0
 800baf2:	3304      	adds	r3, #4
 800baf4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800baf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bafa:	490d      	ldr	r1, [pc, #52]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800bafc:	4613      	mov	r3, r2
 800bafe:	005b      	lsls	r3, r3, #1
 800bb00:	4413      	add	r3, r2
 800bb02:	00db      	lsls	r3, r3, #3
 800bb04:	440b      	add	r3, r1
 800bb06:	3312      	adds	r3, #18
 800bb08:	2200      	movs	r2, #0
 800bb0a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800bb0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bb10:	4907      	ldr	r1, [pc, #28]	@ (800bb30 <etharp_find_entry+0x2d4>)
 800bb12:	4613      	mov	r3, r2
 800bb14:	005b      	lsls	r3, r3, #1
 800bb16:	4413      	add	r3, r2
 800bb18:	00db      	lsls	r3, r3, #3
 800bb1a:	440b      	add	r3, r1
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800bb22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3728      	adds	r7, #40	@ 0x28
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	200082b0 	.word	0x200082b0
 800bb34:	08010f98 	.word	0x08010f98
 800bb38:	08010fd0 	.word	0x08010fd0
 800bb3c:	08011010 	.word	0x08011010
 800bb40:	08011038 	.word	0x08011038
 800bb44:	08011050 	.word	0x08011050
 800bb48:	08011064 	.word	0x08011064

0800bb4c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af02      	add	r7, sp, #8
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
 800bb58:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bb60:	2b06      	cmp	r3, #6
 800bb62:	d006      	beq.n	800bb72 <etharp_update_arp_entry+0x26>
 800bb64:	4b48      	ldr	r3, [pc, #288]	@ (800bc88 <etharp_update_arp_entry+0x13c>)
 800bb66:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800bb6a:	4948      	ldr	r1, [pc, #288]	@ (800bc8c <etharp_update_arp_entry+0x140>)
 800bb6c:	4848      	ldr	r0, [pc, #288]	@ (800bc90 <etharp_update_arp_entry+0x144>)
 800bb6e:	f002 f961 	bl	800de34 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d012      	beq.n	800bb9e <etharp_update_arp_entry+0x52>
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00e      	beq.n	800bb9e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68f9      	ldr	r1, [r7, #12]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f001 f8fe 	bl	800cd88 <ip4_addr_isbroadcast_u32>
 800bb8c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d105      	bne.n	800bb9e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bb9a:	2be0      	cmp	r3, #224	@ 0xe0
 800bb9c:	d102      	bne.n	800bba4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bb9e:	f06f 030f 	mvn.w	r3, #15
 800bba2:	e06c      	b.n	800bc7e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bba4:	78fb      	ldrb	r3, [r7, #3]
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	68b8      	ldr	r0, [r7, #8]
 800bbac:	f7ff fe56 	bl	800b85c <etharp_find_entry>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bbb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	da02      	bge.n	800bbc2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bbbc:	8afb      	ldrh	r3, [r7, #22]
 800bbbe:	b25b      	sxtb	r3, r3
 800bbc0:	e05d      	b.n	800bc7e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bbc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bbc6:	4933      	ldr	r1, [pc, #204]	@ (800bc94 <etharp_update_arp_entry+0x148>)
 800bbc8:	4613      	mov	r3, r2
 800bbca:	005b      	lsls	r3, r3, #1
 800bbcc:	4413      	add	r3, r2
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	440b      	add	r3, r1
 800bbd2:	3314      	adds	r3, #20
 800bbd4:	2202      	movs	r2, #2
 800bbd6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bbd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bbdc:	492d      	ldr	r1, [pc, #180]	@ (800bc94 <etharp_update_arp_entry+0x148>)
 800bbde:	4613      	mov	r3, r2
 800bbe0:	005b      	lsls	r3, r3, #1
 800bbe2:	4413      	add	r3, r2
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	440b      	add	r3, r1
 800bbe8:	3308      	adds	r3, #8
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800bbee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	005b      	lsls	r3, r3, #1
 800bbf6:	4413      	add	r3, r2
 800bbf8:	00db      	lsls	r3, r3, #3
 800bbfa:	3308      	adds	r3, #8
 800bbfc:	4a25      	ldr	r2, [pc, #148]	@ (800bc94 <etharp_update_arp_entry+0x148>)
 800bbfe:	4413      	add	r3, r2
 800bc00:	3304      	adds	r3, #4
 800bc02:	2206      	movs	r2, #6
 800bc04:	6879      	ldr	r1, [r7, #4]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f002 f9ef 	bl	800dfea <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bc0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bc10:	4920      	ldr	r1, [pc, #128]	@ (800bc94 <etharp_update_arp_entry+0x148>)
 800bc12:	4613      	mov	r3, r2
 800bc14:	005b      	lsls	r3, r3, #1
 800bc16:	4413      	add	r3, r2
 800bc18:	00db      	lsls	r3, r3, #3
 800bc1a:	440b      	add	r3, r1
 800bc1c:	3312      	adds	r3, #18
 800bc1e:	2200      	movs	r2, #0
 800bc20:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bc22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bc26:	491b      	ldr	r1, [pc, #108]	@ (800bc94 <etharp_update_arp_entry+0x148>)
 800bc28:	4613      	mov	r3, r2
 800bc2a:	005b      	lsls	r3, r3, #1
 800bc2c:	4413      	add	r3, r2
 800bc2e:	00db      	lsls	r3, r3, #3
 800bc30:	440b      	add	r3, r1
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d021      	beq.n	800bc7c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bc38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bc3c:	4915      	ldr	r1, [pc, #84]	@ (800bc94 <etharp_update_arp_entry+0x148>)
 800bc3e:	4613      	mov	r3, r2
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	4413      	add	r3, r2
 800bc44:	00db      	lsls	r3, r3, #3
 800bc46:	440b      	add	r3, r1
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bc4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bc50:	4910      	ldr	r1, [pc, #64]	@ (800bc94 <etharp_update_arp_entry+0x148>)
 800bc52:	4613      	mov	r3, r2
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	4413      	add	r3, r2
 800bc58:	00db      	lsls	r3, r3, #3
 800bc5a:	440b      	add	r3, r1
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800bc66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6939      	ldr	r1, [r7, #16]
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f001 ff97 	bl	800dba4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800bc76:	6938      	ldr	r0, [r7, #16]
 800bc78:	f7f9 fb6e 	bl	8005358 <pbuf_free>
  }
  return ERR_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3718      	adds	r7, #24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	08010f98 	.word	0x08010f98
 800bc8c:	08011090 	.word	0x08011090
 800bc90:	08011010 	.word	0x08011010
 800bc94:	200082b0 	.word	0x200082b0

0800bc98 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bca0:	2300      	movs	r3, #0
 800bca2:	60fb      	str	r3, [r7, #12]
 800bca4:	e01e      	b.n	800bce4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800bca6:	4913      	ldr	r1, [pc, #76]	@ (800bcf4 <etharp_cleanup_netif+0x5c>)
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	4413      	add	r3, r2
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	440b      	add	r3, r1
 800bcb4:	3314      	adds	r3, #20
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800bcba:	7afb      	ldrb	r3, [r7, #11]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00e      	beq.n	800bcde <etharp_cleanup_netif+0x46>
 800bcc0:	490c      	ldr	r1, [pc, #48]	@ (800bcf4 <etharp_cleanup_netif+0x5c>)
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	005b      	lsls	r3, r3, #1
 800bcc8:	4413      	add	r3, r2
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	440b      	add	r3, r1
 800bcce:	3308      	adds	r3, #8
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d102      	bne.n	800bcde <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f7ff fce5 	bl	800b6a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	3301      	adds	r3, #1
 800bce2:	60fb      	str	r3, [r7, #12]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b09      	cmp	r3, #9
 800bce8:	dddd      	ble.n	800bca6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800bcea:	bf00      	nop
 800bcec:	bf00      	nop
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	200082b0 	.word	0x200082b0

0800bcf8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800bcf8:	b5b0      	push	{r4, r5, r7, lr}
 800bcfa:	b08a      	sub	sp, #40	@ 0x28
 800bcfc:	af04      	add	r7, sp, #16
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d107      	bne.n	800bd18 <etharp_input+0x20>
 800bd08:	4b3d      	ldr	r3, [pc, #244]	@ (800be00 <etharp_input+0x108>)
 800bd0a:	f240 228a 	movw	r2, #650	@ 0x28a
 800bd0e:	493d      	ldr	r1, [pc, #244]	@ (800be04 <etharp_input+0x10c>)
 800bd10:	483d      	ldr	r0, [pc, #244]	@ (800be08 <etharp_input+0x110>)
 800bd12:	f002 f88f 	bl	800de34 <iprintf>
 800bd16:	e06f      	b.n	800bdf8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd28:	d10c      	bne.n	800bd44 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800bd2e:	2b06      	cmp	r3, #6
 800bd30:	d108      	bne.n	800bd44 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bd36:	2b04      	cmp	r3, #4
 800bd38:	d104      	bne.n	800bd44 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	885b      	ldrh	r3, [r3, #2]
 800bd3e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bd40:	2b08      	cmp	r3, #8
 800bd42:	d003      	beq.n	800bd4c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f7f9 fb07 	bl	8005358 <pbuf_free>
    return;
 800bd4a:	e055      	b.n	800bdf8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	330e      	adds	r3, #14
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	3318      	adds	r3, #24
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	3304      	adds	r3, #4
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d102      	bne.n	800bd6c <etharp_input+0x74>
    for_us = 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	75fb      	strb	r3, [r7, #23]
 800bd6a:	e009      	b.n	800bd80 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	3304      	adds	r3, #4
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	bf0c      	ite	eq
 800bd78:	2301      	moveq	r3, #1
 800bd7a:	2300      	movne	r3, #0
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	f103 0208 	add.w	r2, r3, #8
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <etharp_input+0x98>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e000      	b.n	800bd92 <etharp_input+0x9a>
 800bd90:	2302      	movs	r3, #2
 800bd92:	f107 010c 	add.w	r1, r7, #12
 800bd96:	6838      	ldr	r0, [r7, #0]
 800bd98:	f7ff fed8 	bl	800bb4c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	88db      	ldrh	r3, [r3, #6]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bda6:	d003      	beq.n	800bdb0 <etharp_input+0xb8>
 800bda8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdac:	d01e      	beq.n	800bdec <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800bdae:	e020      	b.n	800bdf2 <etharp_input+0xfa>
      if (for_us) {
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d01c      	beq.n	800bdf0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	3208      	adds	r2, #8
        etharp_raw(netif,
 800bdd0:	2102      	movs	r1, #2
 800bdd2:	9103      	str	r1, [sp, #12]
 800bdd4:	f107 010c 	add.w	r1, r7, #12
 800bdd8:	9102      	str	r1, [sp, #8]
 800bdda:	9201      	str	r2, [sp, #4]
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	462b      	mov	r3, r5
 800bde0:	4622      	mov	r2, r4
 800bde2:	4601      	mov	r1, r0
 800bde4:	6838      	ldr	r0, [r7, #0]
 800bde6:	f000 faeb 	bl	800c3c0 <etharp_raw>
      break;
 800bdea:	e001      	b.n	800bdf0 <etharp_input+0xf8>
      break;
 800bdec:	bf00      	nop
 800bdee:	e000      	b.n	800bdf2 <etharp_input+0xfa>
      break;
 800bdf0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7f9 fab0 	bl	8005358 <pbuf_free>
}
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bdb0      	pop	{r4, r5, r7, pc}
 800bdfe:	bf00      	nop
 800be00:	08010f98 	.word	0x08010f98
 800be04:	080110e8 	.word	0x080110e8
 800be08:	08011010 	.word	0x08011010

0800be0c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af02      	add	r7, sp, #8
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	4613      	mov	r3, r2
 800be18:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800be1a:	79fa      	ldrb	r2, [r7, #7]
 800be1c:	4944      	ldr	r1, [pc, #272]	@ (800bf30 <etharp_output_to_arp_index+0x124>)
 800be1e:	4613      	mov	r3, r2
 800be20:	005b      	lsls	r3, r3, #1
 800be22:	4413      	add	r3, r2
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	440b      	add	r3, r1
 800be28:	3314      	adds	r3, #20
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d806      	bhi.n	800be3e <etharp_output_to_arp_index+0x32>
 800be30:	4b40      	ldr	r3, [pc, #256]	@ (800bf34 <etharp_output_to_arp_index+0x128>)
 800be32:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800be36:	4940      	ldr	r1, [pc, #256]	@ (800bf38 <etharp_output_to_arp_index+0x12c>)
 800be38:	4840      	ldr	r0, [pc, #256]	@ (800bf3c <etharp_output_to_arp_index+0x130>)
 800be3a:	f001 fffb 	bl	800de34 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800be3e:	79fa      	ldrb	r2, [r7, #7]
 800be40:	493b      	ldr	r1, [pc, #236]	@ (800bf30 <etharp_output_to_arp_index+0x124>)
 800be42:	4613      	mov	r3, r2
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	4413      	add	r3, r2
 800be48:	00db      	lsls	r3, r3, #3
 800be4a:	440b      	add	r3, r1
 800be4c:	3314      	adds	r3, #20
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	2b02      	cmp	r3, #2
 800be52:	d153      	bne.n	800befc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800be54:	79fa      	ldrb	r2, [r7, #7]
 800be56:	4936      	ldr	r1, [pc, #216]	@ (800bf30 <etharp_output_to_arp_index+0x124>)
 800be58:	4613      	mov	r3, r2
 800be5a:	005b      	lsls	r3, r3, #1
 800be5c:	4413      	add	r3, r2
 800be5e:	00db      	lsls	r3, r3, #3
 800be60:	440b      	add	r3, r1
 800be62:	3312      	adds	r3, #18
 800be64:	881b      	ldrh	r3, [r3, #0]
 800be66:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800be6a:	d919      	bls.n	800bea0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800be6c:	79fa      	ldrb	r2, [r7, #7]
 800be6e:	4613      	mov	r3, r2
 800be70:	005b      	lsls	r3, r3, #1
 800be72:	4413      	add	r3, r2
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	4a2e      	ldr	r2, [pc, #184]	@ (800bf30 <etharp_output_to_arp_index+0x124>)
 800be78:	4413      	add	r3, r2
 800be7a:	3304      	adds	r3, #4
 800be7c:	4619      	mov	r1, r3
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f000 fb4c 	bl	800c51c <etharp_request>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d138      	bne.n	800befc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800be8a:	79fa      	ldrb	r2, [r7, #7]
 800be8c:	4928      	ldr	r1, [pc, #160]	@ (800bf30 <etharp_output_to_arp_index+0x124>)
 800be8e:	4613      	mov	r3, r2
 800be90:	005b      	lsls	r3, r3, #1
 800be92:	4413      	add	r3, r2
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	440b      	add	r3, r1
 800be98:	3314      	adds	r3, #20
 800be9a:	2203      	movs	r2, #3
 800be9c:	701a      	strb	r2, [r3, #0]
 800be9e:	e02d      	b.n	800befc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800bea0:	79fa      	ldrb	r2, [r7, #7]
 800bea2:	4923      	ldr	r1, [pc, #140]	@ (800bf30 <etharp_output_to_arp_index+0x124>)
 800bea4:	4613      	mov	r3, r2
 800bea6:	005b      	lsls	r3, r3, #1
 800bea8:	4413      	add	r3, r2
 800beaa:	00db      	lsls	r3, r3, #3
 800beac:	440b      	add	r3, r1
 800beae:	3312      	adds	r3, #18
 800beb0:	881b      	ldrh	r3, [r3, #0]
 800beb2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800beb6:	d321      	bcc.n	800befc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800beb8:	79fa      	ldrb	r2, [r7, #7]
 800beba:	4613      	mov	r3, r2
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	4413      	add	r3, r2
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	4a1b      	ldr	r2, [pc, #108]	@ (800bf30 <etharp_output_to_arp_index+0x124>)
 800bec4:	4413      	add	r3, r2
 800bec6:	1d19      	adds	r1, r3, #4
 800bec8:	79fa      	ldrb	r2, [r7, #7]
 800beca:	4613      	mov	r3, r2
 800becc:	005b      	lsls	r3, r3, #1
 800bece:	4413      	add	r3, r2
 800bed0:	00db      	lsls	r3, r3, #3
 800bed2:	3308      	adds	r3, #8
 800bed4:	4a16      	ldr	r2, [pc, #88]	@ (800bf30 <etharp_output_to_arp_index+0x124>)
 800bed6:	4413      	add	r3, r2
 800bed8:	3304      	adds	r3, #4
 800beda:	461a      	mov	r2, r3
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f000 fafb 	bl	800c4d8 <etharp_request_dst>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d109      	bne.n	800befc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bee8:	79fa      	ldrb	r2, [r7, #7]
 800beea:	4911      	ldr	r1, [pc, #68]	@ (800bf30 <etharp_output_to_arp_index+0x124>)
 800beec:	4613      	mov	r3, r2
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	4413      	add	r3, r2
 800bef2:	00db      	lsls	r3, r3, #3
 800bef4:	440b      	add	r3, r1
 800bef6:	3314      	adds	r3, #20
 800bef8:	2203      	movs	r2, #3
 800befa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800bf02:	79fa      	ldrb	r2, [r7, #7]
 800bf04:	4613      	mov	r3, r2
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	4413      	add	r3, r2
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	3308      	adds	r3, #8
 800bf0e:	4a08      	ldr	r2, [pc, #32]	@ (800bf30 <etharp_output_to_arp_index+0x124>)
 800bf10:	4413      	add	r3, r2
 800bf12:	3304      	adds	r3, #4
 800bf14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf18:	9200      	str	r2, [sp, #0]
 800bf1a:	460a      	mov	r2, r1
 800bf1c:	68b9      	ldr	r1, [r7, #8]
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f001 fe40 	bl	800dba4 <ethernet_output>
 800bf24:	4603      	mov	r3, r0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	200082b0 	.word	0x200082b0
 800bf34:	08010f98 	.word	0x08010f98
 800bf38:	08011108 	.word	0x08011108
 800bf3c:	08011010 	.word	0x08011010

0800bf40 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08a      	sub	sp, #40	@ 0x28
 800bf44:	af02      	add	r7, sp, #8
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d106      	bne.n	800bf64 <etharp_output+0x24>
 800bf56:	4b73      	ldr	r3, [pc, #460]	@ (800c124 <etharp_output+0x1e4>)
 800bf58:	f240 321e 	movw	r2, #798	@ 0x31e
 800bf5c:	4972      	ldr	r1, [pc, #456]	@ (800c128 <etharp_output+0x1e8>)
 800bf5e:	4873      	ldr	r0, [pc, #460]	@ (800c12c <etharp_output+0x1ec>)
 800bf60:	f001 ff68 	bl	800de34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d106      	bne.n	800bf78 <etharp_output+0x38>
 800bf6a:	4b6e      	ldr	r3, [pc, #440]	@ (800c124 <etharp_output+0x1e4>)
 800bf6c:	f240 321f 	movw	r2, #799	@ 0x31f
 800bf70:	496f      	ldr	r1, [pc, #444]	@ (800c130 <etharp_output+0x1f0>)
 800bf72:	486e      	ldr	r0, [pc, #440]	@ (800c12c <etharp_output+0x1ec>)
 800bf74:	f001 ff5e 	bl	800de34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d106      	bne.n	800bf8c <etharp_output+0x4c>
 800bf7e:	4b69      	ldr	r3, [pc, #420]	@ (800c124 <etharp_output+0x1e4>)
 800bf80:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800bf84:	496b      	ldr	r1, [pc, #428]	@ (800c134 <etharp_output+0x1f4>)
 800bf86:	4869      	ldr	r0, [pc, #420]	@ (800c12c <etharp_output+0x1ec>)
 800bf88:	f001 ff54 	bl	800de34 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68f9      	ldr	r1, [r7, #12]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f000 fef8 	bl	800cd88 <ip4_addr_isbroadcast_u32>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800bf9e:	4b66      	ldr	r3, [pc, #408]	@ (800c138 <etharp_output+0x1f8>)
 800bfa0:	61fb      	str	r3, [r7, #28]
 800bfa2:	e0af      	b.n	800c104 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bfac:	2be0      	cmp	r3, #224	@ 0xe0
 800bfae:	d118      	bne.n	800bfe2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bfb8:	235e      	movs	r3, #94	@ 0x5e
 800bfba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	3302      	adds	r3, #2
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	3303      	adds	r3, #3
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800bfda:	f107 0310 	add.w	r3, r7, #16
 800bfde:	61fb      	str	r3, [r7, #28]
 800bfe0:	e090      	b.n	800c104 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3304      	adds	r3, #4
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	405a      	eors	r2, r3
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	3308      	adds	r3, #8
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4013      	ands	r3, r2
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d012      	beq.n	800c020 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c000:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800c004:	4293      	cmp	r3, r2
 800c006:	d00b      	beq.n	800c020 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	330c      	adds	r3, #12
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d003      	beq.n	800c01a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	330c      	adds	r3, #12
 800c016:	61bb      	str	r3, [r7, #24]
 800c018:	e002      	b.n	800c020 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c01a:	f06f 0303 	mvn.w	r3, #3
 800c01e:	e07d      	b.n	800c11c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c020:	4b46      	ldr	r3, [pc, #280]	@ (800c13c <etharp_output+0x1fc>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	4619      	mov	r1, r3
 800c026:	4a46      	ldr	r2, [pc, #280]	@ (800c140 <etharp_output+0x200>)
 800c028:	460b      	mov	r3, r1
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	440b      	add	r3, r1
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	4413      	add	r3, r2
 800c032:	3314      	adds	r3, #20
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d925      	bls.n	800c086 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c03a:	4b40      	ldr	r3, [pc, #256]	@ (800c13c <etharp_output+0x1fc>)
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	4619      	mov	r1, r3
 800c040:	4a3f      	ldr	r2, [pc, #252]	@ (800c140 <etharp_output+0x200>)
 800c042:	460b      	mov	r3, r1
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	440b      	add	r3, r1
 800c048:	00db      	lsls	r3, r3, #3
 800c04a:	4413      	add	r3, r2
 800c04c:	3308      	adds	r3, #8
 800c04e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	429a      	cmp	r2, r3
 800c054:	d117      	bne.n	800c086 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	4b38      	ldr	r3, [pc, #224]	@ (800c13c <etharp_output+0x1fc>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	4618      	mov	r0, r3
 800c060:	4937      	ldr	r1, [pc, #220]	@ (800c140 <etharp_output+0x200>)
 800c062:	4603      	mov	r3, r0
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	4403      	add	r3, r0
 800c068:	00db      	lsls	r3, r3, #3
 800c06a:	440b      	add	r3, r1
 800c06c:	3304      	adds	r3, #4
 800c06e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c070:	429a      	cmp	r2, r3
 800c072:	d108      	bne.n	800c086 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c074:	4b31      	ldr	r3, [pc, #196]	@ (800c13c <etharp_output+0x1fc>)
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	461a      	mov	r2, r3
 800c07a:	68b9      	ldr	r1, [r7, #8]
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f7ff fec5 	bl	800be0c <etharp_output_to_arp_index>
 800c082:	4603      	mov	r3, r0
 800c084:	e04a      	b.n	800c11c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c086:	2300      	movs	r3, #0
 800c088:	75fb      	strb	r3, [r7, #23]
 800c08a:	e031      	b.n	800c0f0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c08c:	7dfa      	ldrb	r2, [r7, #23]
 800c08e:	492c      	ldr	r1, [pc, #176]	@ (800c140 <etharp_output+0x200>)
 800c090:	4613      	mov	r3, r2
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	4413      	add	r3, r2
 800c096:	00db      	lsls	r3, r3, #3
 800c098:	440b      	add	r3, r1
 800c09a:	3314      	adds	r3, #20
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d923      	bls.n	800c0ea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c0a2:	7dfa      	ldrb	r2, [r7, #23]
 800c0a4:	4926      	ldr	r1, [pc, #152]	@ (800c140 <etharp_output+0x200>)
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	005b      	lsls	r3, r3, #1
 800c0aa:	4413      	add	r3, r2
 800c0ac:	00db      	lsls	r3, r3, #3
 800c0ae:	440b      	add	r3, r1
 800c0b0:	3308      	adds	r3, #8
 800c0b2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d117      	bne.n	800c0ea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	6819      	ldr	r1, [r3, #0]
 800c0be:	7dfa      	ldrb	r2, [r7, #23]
 800c0c0:	481f      	ldr	r0, [pc, #124]	@ (800c140 <etharp_output+0x200>)
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	4413      	add	r3, r2
 800c0c8:	00db      	lsls	r3, r3, #3
 800c0ca:	4403      	add	r3, r0
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c0d0:	4299      	cmp	r1, r3
 800c0d2:	d10a      	bne.n	800c0ea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c0d4:	4a19      	ldr	r2, [pc, #100]	@ (800c13c <etharp_output+0x1fc>)
 800c0d6:	7dfb      	ldrb	r3, [r7, #23]
 800c0d8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	68b9      	ldr	r1, [r7, #8]
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f7ff fe93 	bl	800be0c <etharp_output_to_arp_index>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	e018      	b.n	800c11c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c0ea:	7dfb      	ldrb	r3, [r7, #23]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	75fb      	strb	r3, [r7, #23]
 800c0f0:	7dfb      	ldrb	r3, [r7, #23]
 800c0f2:	2b09      	cmp	r3, #9
 800c0f4:	d9ca      	bls.n	800c08c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	69b9      	ldr	r1, [r7, #24]
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f000 f822 	bl	800c144 <etharp_query>
 800c100:	4603      	mov	r3, r0
 800c102:	e00b      	b.n	800c11c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800c10a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	68b9      	ldr	r1, [r7, #8]
 800c114:	68f8      	ldr	r0, [r7, #12]
 800c116:	f001 fd45 	bl	800dba4 <ethernet_output>
 800c11a:	4603      	mov	r3, r0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3720      	adds	r7, #32
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	08010f98 	.word	0x08010f98
 800c128:	080110e8 	.word	0x080110e8
 800c12c:	08011010 	.word	0x08011010
 800c130:	08011138 	.word	0x08011138
 800c134:	080110d8 	.word	0x080110d8
 800c138:	0801174c 	.word	0x0801174c
 800c13c:	200083a0 	.word	0x200083a0
 800c140:	200082b0 	.word	0x200082b0

0800c144 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b08c      	sub	sp, #48	@ 0x30
 800c148:	af02      	add	r7, sp, #8
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3326      	adds	r3, #38	@ 0x26
 800c154:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c156:	23ff      	movs	r3, #255	@ 0xff
 800c158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68f9      	ldr	r1, [r7, #12]
 800c166:	4618      	mov	r0, r3
 800c168:	f000 fe0e 	bl	800cd88 <ip4_addr_isbroadcast_u32>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10c      	bne.n	800c18c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c17a:	2be0      	cmp	r3, #224	@ 0xe0
 800c17c:	d006      	beq.n	800c18c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d003      	beq.n	800c18c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d102      	bne.n	800c192 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c18c:	f06f 030f 	mvn.w	r3, #15
 800c190:	e101      	b.n	800c396 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	2101      	movs	r1, #1
 800c196:	68b8      	ldr	r0, [r7, #8]
 800c198:	f7ff fb60 	bl	800b85c <etharp_find_entry>
 800c19c:	4603      	mov	r3, r0
 800c19e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c1a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	da02      	bge.n	800c1ae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c1a8:	8a7b      	ldrh	r3, [r7, #18]
 800c1aa:	b25b      	sxtb	r3, r3
 800c1ac:	e0f3      	b.n	800c396 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c1ae:	8a7b      	ldrh	r3, [r7, #18]
 800c1b0:	2b7e      	cmp	r3, #126	@ 0x7e
 800c1b2:	d906      	bls.n	800c1c2 <etharp_query+0x7e>
 800c1b4:	4b7a      	ldr	r3, [pc, #488]	@ (800c3a0 <etharp_query+0x25c>)
 800c1b6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800c1ba:	497a      	ldr	r1, [pc, #488]	@ (800c3a4 <etharp_query+0x260>)
 800c1bc:	487a      	ldr	r0, [pc, #488]	@ (800c3a8 <etharp_query+0x264>)
 800c1be:	f001 fe39 	bl	800de34 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c1c2:	8a7b      	ldrh	r3, [r7, #18]
 800c1c4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c1c6:	7c7a      	ldrb	r2, [r7, #17]
 800c1c8:	4978      	ldr	r1, [pc, #480]	@ (800c3ac <etharp_query+0x268>)
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	005b      	lsls	r3, r3, #1
 800c1ce:	4413      	add	r3, r2
 800c1d0:	00db      	lsls	r3, r3, #3
 800c1d2:	440b      	add	r3, r1
 800c1d4:	3314      	adds	r3, #20
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d115      	bne.n	800c208 <etharp_query+0xc4>
    is_new_entry = 1;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c1e0:	7c7a      	ldrb	r2, [r7, #17]
 800c1e2:	4972      	ldr	r1, [pc, #456]	@ (800c3ac <etharp_query+0x268>)
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	005b      	lsls	r3, r3, #1
 800c1e8:	4413      	add	r3, r2
 800c1ea:	00db      	lsls	r3, r3, #3
 800c1ec:	440b      	add	r3, r1
 800c1ee:	3314      	adds	r3, #20
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c1f4:	7c7a      	ldrb	r2, [r7, #17]
 800c1f6:	496d      	ldr	r1, [pc, #436]	@ (800c3ac <etharp_query+0x268>)
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	005b      	lsls	r3, r3, #1
 800c1fc:	4413      	add	r3, r2
 800c1fe:	00db      	lsls	r3, r3, #3
 800c200:	440b      	add	r3, r1
 800c202:	3308      	adds	r3, #8
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c208:	7c7a      	ldrb	r2, [r7, #17]
 800c20a:	4968      	ldr	r1, [pc, #416]	@ (800c3ac <etharp_query+0x268>)
 800c20c:	4613      	mov	r3, r2
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	4413      	add	r3, r2
 800c212:	00db      	lsls	r3, r3, #3
 800c214:	440b      	add	r3, r1
 800c216:	3314      	adds	r3, #20
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d011      	beq.n	800c242 <etharp_query+0xfe>
 800c21e:	7c7a      	ldrb	r2, [r7, #17]
 800c220:	4962      	ldr	r1, [pc, #392]	@ (800c3ac <etharp_query+0x268>)
 800c222:	4613      	mov	r3, r2
 800c224:	005b      	lsls	r3, r3, #1
 800c226:	4413      	add	r3, r2
 800c228:	00db      	lsls	r3, r3, #3
 800c22a:	440b      	add	r3, r1
 800c22c:	3314      	adds	r3, #20
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d806      	bhi.n	800c242 <etharp_query+0xfe>
 800c234:	4b5a      	ldr	r3, [pc, #360]	@ (800c3a0 <etharp_query+0x25c>)
 800c236:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800c23a:	495d      	ldr	r1, [pc, #372]	@ (800c3b0 <etharp_query+0x26c>)
 800c23c:	485a      	ldr	r0, [pc, #360]	@ (800c3a8 <etharp_query+0x264>)
 800c23e:	f001 fdf9 	bl	800de34 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c242:	6a3b      	ldr	r3, [r7, #32]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d102      	bne.n	800c24e <etharp_query+0x10a>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10c      	bne.n	800c268 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c24e:	68b9      	ldr	r1, [r7, #8]
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f000 f963 	bl	800c51c <etharp_request>
 800c256:	4603      	mov	r3, r0
 800c258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d102      	bne.n	800c268 <etharp_query+0x124>
      return result;
 800c262:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c266:	e096      	b.n	800c396 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d106      	bne.n	800c27c <etharp_query+0x138>
 800c26e:	4b4c      	ldr	r3, [pc, #304]	@ (800c3a0 <etharp_query+0x25c>)
 800c270:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800c274:	494f      	ldr	r1, [pc, #316]	@ (800c3b4 <etharp_query+0x270>)
 800c276:	484c      	ldr	r0, [pc, #304]	@ (800c3a8 <etharp_query+0x264>)
 800c278:	f001 fddc 	bl	800de34 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c27c:	7c7a      	ldrb	r2, [r7, #17]
 800c27e:	494b      	ldr	r1, [pc, #300]	@ (800c3ac <etharp_query+0x268>)
 800c280:	4613      	mov	r3, r2
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	4413      	add	r3, r2
 800c286:	00db      	lsls	r3, r3, #3
 800c288:	440b      	add	r3, r1
 800c28a:	3314      	adds	r3, #20
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d917      	bls.n	800c2c2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c292:	4a49      	ldr	r2, [pc, #292]	@ (800c3b8 <etharp_query+0x274>)
 800c294:	7c7b      	ldrb	r3, [r7, #17]
 800c296:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c298:	7c7a      	ldrb	r2, [r7, #17]
 800c29a:	4613      	mov	r3, r2
 800c29c:	005b      	lsls	r3, r3, #1
 800c29e:	4413      	add	r3, r2
 800c2a0:	00db      	lsls	r3, r3, #3
 800c2a2:	3308      	adds	r3, #8
 800c2a4:	4a41      	ldr	r2, [pc, #260]	@ (800c3ac <etharp_query+0x268>)
 800c2a6:	4413      	add	r3, r2
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2ae:	9200      	str	r2, [sp, #0]
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	6879      	ldr	r1, [r7, #4]
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f001 fc75 	bl	800dba4 <ethernet_output>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c2c0:	e067      	b.n	800c392 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c2c2:	7c7a      	ldrb	r2, [r7, #17]
 800c2c4:	4939      	ldr	r1, [pc, #228]	@ (800c3ac <etharp_query+0x268>)
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	005b      	lsls	r3, r3, #1
 800c2ca:	4413      	add	r3, r2
 800c2cc:	00db      	lsls	r3, r3, #3
 800c2ce:	440b      	add	r3, r1
 800c2d0:	3314      	adds	r3, #20
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d15c      	bne.n	800c392 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c2e0:	e01c      	b.n	800c31c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	895a      	ldrh	r2, [r3, #10]
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	891b      	ldrh	r3, [r3, #8]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d10a      	bne.n	800c304 <etharp_query+0x1c0>
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d006      	beq.n	800c304 <etharp_query+0x1c0>
 800c2f6:	4b2a      	ldr	r3, [pc, #168]	@ (800c3a0 <etharp_query+0x25c>)
 800c2f8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800c2fc:	492f      	ldr	r1, [pc, #188]	@ (800c3bc <etharp_query+0x278>)
 800c2fe:	482a      	ldr	r0, [pc, #168]	@ (800c3a8 <etharp_query+0x264>)
 800c300:	f001 fd98 	bl	800de34 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	7b1b      	ldrb	r3, [r3, #12]
 800c308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <etharp_query+0x1d2>
        copy_needed = 1;
 800c310:	2301      	movs	r3, #1
 800c312:	61bb      	str	r3, [r7, #24]
        break;
 800c314:	e005      	b.n	800c322 <etharp_query+0x1de>
      }
      p = p->next;
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1df      	bne.n	800c2e2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d007      	beq.n	800c338 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800c32e:	200e      	movs	r0, #14
 800c330:	f7f9 fa7e 	bl	8005830 <pbuf_clone>
 800c334:	61f8      	str	r0, [r7, #28]
 800c336:	e004      	b.n	800c342 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c33c:	69f8      	ldr	r0, [r7, #28]
 800c33e:	f7f9 f8ab 	bl	8005498 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d021      	beq.n	800c38c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c348:	7c7a      	ldrb	r2, [r7, #17]
 800c34a:	4918      	ldr	r1, [pc, #96]	@ (800c3ac <etharp_query+0x268>)
 800c34c:	4613      	mov	r3, r2
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	4413      	add	r3, r2
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	440b      	add	r3, r1
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00a      	beq.n	800c372 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c35c:	7c7a      	ldrb	r2, [r7, #17]
 800c35e:	4913      	ldr	r1, [pc, #76]	@ (800c3ac <etharp_query+0x268>)
 800c360:	4613      	mov	r3, r2
 800c362:	005b      	lsls	r3, r3, #1
 800c364:	4413      	add	r3, r2
 800c366:	00db      	lsls	r3, r3, #3
 800c368:	440b      	add	r3, r1
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7f8 fff3 	bl	8005358 <pbuf_free>
      }
      arp_table[i].q = p;
 800c372:	7c7a      	ldrb	r2, [r7, #17]
 800c374:	490d      	ldr	r1, [pc, #52]	@ (800c3ac <etharp_query+0x268>)
 800c376:	4613      	mov	r3, r2
 800c378:	005b      	lsls	r3, r3, #1
 800c37a:	4413      	add	r3, r2
 800c37c:	00db      	lsls	r3, r3, #3
 800c37e:	440b      	add	r3, r1
 800c380:	69fa      	ldr	r2, [r7, #28]
 800c382:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c38a:	e002      	b.n	800c392 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c38c:	23ff      	movs	r3, #255	@ 0xff
 800c38e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800c392:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c396:	4618      	mov	r0, r3
 800c398:	3728      	adds	r7, #40	@ 0x28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	08010f98 	.word	0x08010f98
 800c3a4:	08011144 	.word	0x08011144
 800c3a8:	08011010 	.word	0x08011010
 800c3ac:	200082b0 	.word	0x200082b0
 800c3b0:	08011154 	.word	0x08011154
 800c3b4:	08011138 	.word	0x08011138
 800c3b8:	200083a0 	.word	0x200083a0
 800c3bc:	0801117c 	.word	0x0801117c

0800c3c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b08a      	sub	sp, #40	@ 0x28
 800c3c4:	af02      	add	r7, sp, #8
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
 800c3cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d106      	bne.n	800c3e6 <etharp_raw+0x26>
 800c3d8:	4b3a      	ldr	r3, [pc, #232]	@ (800c4c4 <etharp_raw+0x104>)
 800c3da:	f240 4257 	movw	r2, #1111	@ 0x457
 800c3de:	493a      	ldr	r1, [pc, #232]	@ (800c4c8 <etharp_raw+0x108>)
 800c3e0:	483a      	ldr	r0, [pc, #232]	@ (800c4cc <etharp_raw+0x10c>)
 800c3e2:	f001 fd27 	bl	800de34 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c3e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c3ea:	211c      	movs	r1, #28
 800c3ec:	200e      	movs	r0, #14
 800c3ee:	f7f8 fccf 	bl	8004d90 <pbuf_alloc>
 800c3f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d102      	bne.n	800c400 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c3fe:	e05d      	b.n	800c4bc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	895b      	ldrh	r3, [r3, #10]
 800c404:	2b1b      	cmp	r3, #27
 800c406:	d806      	bhi.n	800c416 <etharp_raw+0x56>
 800c408:	4b2e      	ldr	r3, [pc, #184]	@ (800c4c4 <etharp_raw+0x104>)
 800c40a:	f240 4262 	movw	r2, #1122	@ 0x462
 800c40e:	4930      	ldr	r1, [pc, #192]	@ (800c4d0 <etharp_raw+0x110>)
 800c410:	482e      	ldr	r0, [pc, #184]	@ (800c4cc <etharp_raw+0x10c>)
 800c412:	f001 fd0f 	bl	800de34 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c41c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c41e:	4618      	mov	r0, r3
 800c420:	f7f7 fc3c 	bl	8003c9c <lwip_htons>
 800c424:	4603      	mov	r3, r0
 800c426:	461a      	mov	r2, r3
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c432:	2b06      	cmp	r3, #6
 800c434:	d006      	beq.n	800c444 <etharp_raw+0x84>
 800c436:	4b23      	ldr	r3, [pc, #140]	@ (800c4c4 <etharp_raw+0x104>)
 800c438:	f240 4269 	movw	r2, #1129	@ 0x469
 800c43c:	4925      	ldr	r1, [pc, #148]	@ (800c4d4 <etharp_raw+0x114>)
 800c43e:	4823      	ldr	r0, [pc, #140]	@ (800c4cc <etharp_raw+0x10c>)
 800c440:	f001 fcf8 	bl	800de34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	3308      	adds	r3, #8
 800c448:	2206      	movs	r2, #6
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f001 fdcc 	bl	800dfea <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	3312      	adds	r3, #18
 800c456:	2206      	movs	r2, #6
 800c458:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c45a:	4618      	mov	r0, r3
 800c45c:	f001 fdc5 	bl	800dfea <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	330e      	adds	r3, #14
 800c464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c466:	6812      	ldr	r2, [r2, #0]
 800c468:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	3318      	adds	r3, #24
 800c46e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c470:	6812      	ldr	r2, [r2, #0]
 800c472:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	2200      	movs	r2, #0
 800c478:	701a      	strb	r2, [r3, #0]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f042 0201 	orr.w	r2, r2, #1
 800c480:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2200      	movs	r2, #0
 800c486:	f042 0208 	orr.w	r2, r2, #8
 800c48a:	709a      	strb	r2, [r3, #2]
 800c48c:	2200      	movs	r2, #0
 800c48e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	2206      	movs	r2, #6
 800c494:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	2204      	movs	r2, #4
 800c49a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c49c:	f640 0306 	movw	r3, #2054	@ 0x806
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	69b9      	ldr	r1, [r7, #24]
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f001 fb7b 	bl	800dba4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c4ae:	69b8      	ldr	r0, [r7, #24]
 800c4b0:	f7f8 ff52 	bl	8005358 <pbuf_free>
  p = NULL;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c4b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3720      	adds	r7, #32
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	08010f98 	.word	0x08010f98
 800c4c8:	080110e8 	.word	0x080110e8
 800c4cc:	08011010 	.word	0x08011010
 800c4d0:	08011198 	.word	0x08011198
 800c4d4:	080111cc 	.word	0x080111cc

0800c4d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b088      	sub	sp, #32
 800c4dc:	af04      	add	r7, sp, #16
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	9203      	str	r2, [sp, #12]
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	9202      	str	r2, [sp, #8]
 800c4fc:	4a06      	ldr	r2, [pc, #24]	@ (800c518 <etharp_request_dst+0x40>)
 800c4fe:	9201      	str	r2, [sp, #4]
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	4603      	mov	r3, r0
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	f7ff ff5a 	bl	800c3c0 <etharp_raw>
 800c50c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	08011754 	.word	0x08011754

0800c51c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c526:	4a05      	ldr	r2, [pc, #20]	@ (800c53c <etharp_request+0x20>)
 800c528:	6839      	ldr	r1, [r7, #0]
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7ff ffd4 	bl	800c4d8 <etharp_request_dst>
 800c530:	4603      	mov	r3, r0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	0801174c 	.word	0x0801174c

0800c540 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b08e      	sub	sp, #56	@ 0x38
 800c544:	af04      	add	r7, sp, #16
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c54a:	4b79      	ldr	r3, [pc, #484]	@ (800c730 <icmp_input+0x1f0>)
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	f003 030f 	and.w	r3, r3, #15
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800c560:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c562:	2b13      	cmp	r3, #19
 800c564:	f240 80cd 	bls.w	800c702 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	895b      	ldrh	r3, [r3, #10]
 800c56c:	2b03      	cmp	r3, #3
 800c56e:	f240 80ca 	bls.w	800c706 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c57c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 80b7 	beq.w	800c6f4 <icmp_input+0x1b4>
 800c586:	2b08      	cmp	r3, #8
 800c588:	f040 80b7 	bne.w	800c6fa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c58c:	4b69      	ldr	r3, [pc, #420]	@ (800c734 <icmp_input+0x1f4>)
 800c58e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c590:	4b67      	ldr	r3, [pc, #412]	@ (800c730 <icmp_input+0x1f0>)
 800c592:	695b      	ldr	r3, [r3, #20]
 800c594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c598:	2be0      	cmp	r3, #224	@ 0xe0
 800c59a:	f000 80bb 	beq.w	800c714 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c59e:	4b64      	ldr	r3, [pc, #400]	@ (800c730 <icmp_input+0x1f0>)
 800c5a0:	695b      	ldr	r3, [r3, #20]
 800c5a2:	4a63      	ldr	r2, [pc, #396]	@ (800c730 <icmp_input+0x1f0>)
 800c5a4:	6812      	ldr	r2, [r2, #0]
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f000 fbed 	bl	800cd88 <ip4_addr_isbroadcast_u32>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f040 80b1 	bne.w	800c718 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	891b      	ldrh	r3, [r3, #8]
 800c5ba:	2b07      	cmp	r3, #7
 800c5bc:	f240 80a5 	bls.w	800c70a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c5c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5c2:	330e      	adds	r3, #14
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7f8 fe30 	bl	800522c <pbuf_add_header>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d04b      	beq.n	800c66a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	891a      	ldrh	r2, [r3, #8]
 800c5d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5d8:	4413      	add	r3, r2
 800c5da:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	891b      	ldrh	r3, [r3, #8]
 800c5e0:	8b7a      	ldrh	r2, [r7, #26]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	f0c0 809a 	bcc.w	800c71c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c5e8:	8b7b      	ldrh	r3, [r7, #26]
 800c5ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	200e      	movs	r0, #14
 800c5f2:	f7f8 fbcd 	bl	8004d90 <pbuf_alloc>
 800c5f6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 8090 	beq.w	800c720 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	895b      	ldrh	r3, [r3, #10]
 800c604:	461a      	mov	r2, r3
 800c606:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c608:	3308      	adds	r3, #8
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d203      	bcs.n	800c616 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c60e:	6978      	ldr	r0, [r7, #20]
 800c610:	f7f8 fea2 	bl	8005358 <pbuf_free>
          goto icmperr;
 800c614:	e085      	b.n	800c722 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c61c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c61e:	4618      	mov	r0, r3
 800c620:	f001 fce3 	bl	800dfea <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c624:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c626:	4619      	mov	r1, r3
 800c628:	6978      	ldr	r0, [r7, #20]
 800c62a:	f7f8 fe0f 	bl	800524c <pbuf_remove_header>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d009      	beq.n	800c648 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c634:	4b40      	ldr	r3, [pc, #256]	@ (800c738 <icmp_input+0x1f8>)
 800c636:	22b6      	movs	r2, #182	@ 0xb6
 800c638:	4940      	ldr	r1, [pc, #256]	@ (800c73c <icmp_input+0x1fc>)
 800c63a:	4841      	ldr	r0, [pc, #260]	@ (800c740 <icmp_input+0x200>)
 800c63c:	f001 fbfa 	bl	800de34 <iprintf>
          pbuf_free(r);
 800c640:	6978      	ldr	r0, [r7, #20]
 800c642:	f7f8 fe89 	bl	8005358 <pbuf_free>
          goto icmperr;
 800c646:	e06c      	b.n	800c722 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c648:	6879      	ldr	r1, [r7, #4]
 800c64a:	6978      	ldr	r0, [r7, #20]
 800c64c:	f7f8 ffac 	bl	80055a8 <pbuf_copy>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c656:	6978      	ldr	r0, [r7, #20]
 800c658:	f7f8 fe7e 	bl	8005358 <pbuf_free>
          goto icmperr;
 800c65c:	e061      	b.n	800c722 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f7f8 fe7a 	bl	8005358 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	607b      	str	r3, [r7, #4]
 800c668:	e00f      	b.n	800c68a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c66a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c66c:	330e      	adds	r3, #14
 800c66e:	4619      	mov	r1, r3
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7f8 fdeb 	bl	800524c <pbuf_remove_header>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d006      	beq.n	800c68a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c67c:	4b2e      	ldr	r3, [pc, #184]	@ (800c738 <icmp_input+0x1f8>)
 800c67e:	22c7      	movs	r2, #199	@ 0xc7
 800c680:	4930      	ldr	r1, [pc, #192]	@ (800c744 <icmp_input+0x204>)
 800c682:	482f      	ldr	r0, [pc, #188]	@ (800c740 <icmp_input+0x200>)
 800c684:	f001 fbd6 	bl	800de34 <iprintf>
          goto icmperr;
 800c688:	e04b      	b.n	800c722 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c690:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c692:	4619      	mov	r1, r3
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7f8 fdc9 	bl	800522c <pbuf_add_header>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d12b      	bne.n	800c6f8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c6ae:	4b20      	ldr	r3, [pc, #128]	@ (800c730 <icmp_input+0x1f0>)
 800c6b0:	691a      	ldr	r2, [r3, #16]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	709a      	strb	r2, [r3, #2]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	22ff      	movs	r2, #255	@ 0xff
 800c6ca:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	729a      	strb	r2, [r3, #10]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	9302      	str	r3, [sp, #8]
 800c6da:	2301      	movs	r3, #1
 800c6dc:	9301      	str	r3, [sp, #4]
 800c6de:	2300      	movs	r3, #0
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	23ff      	movs	r3, #255	@ 0xff
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	69f9      	ldr	r1, [r7, #28]
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 fa75 	bl	800cbd8 <ip4_output_if>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c6f2:	e001      	b.n	800c6f8 <icmp_input+0x1b8>
      break;
 800c6f4:	bf00      	nop
 800c6f6:	e000      	b.n	800c6fa <icmp_input+0x1ba>
      break;
 800c6f8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7f8 fe2c 	bl	8005358 <pbuf_free>
  return;
 800c700:	e013      	b.n	800c72a <icmp_input+0x1ea>
    goto lenerr;
 800c702:	bf00      	nop
 800c704:	e002      	b.n	800c70c <icmp_input+0x1cc>
    goto lenerr;
 800c706:	bf00      	nop
 800c708:	e000      	b.n	800c70c <icmp_input+0x1cc>
        goto lenerr;
 800c70a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7f8 fe23 	bl	8005358 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c712:	e00a      	b.n	800c72a <icmp_input+0x1ea>
        goto icmperr;
 800c714:	bf00      	nop
 800c716:	e004      	b.n	800c722 <icmp_input+0x1e2>
        goto icmperr;
 800c718:	bf00      	nop
 800c71a:	e002      	b.n	800c722 <icmp_input+0x1e2>
          goto icmperr;
 800c71c:	bf00      	nop
 800c71e:	e000      	b.n	800c722 <icmp_input+0x1e2>
          goto icmperr;
 800c720:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7f8 fe18 	bl	8005358 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c728:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c72a:	3728      	adds	r7, #40	@ 0x28
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	20004ce0 	.word	0x20004ce0
 800c734:	20004cf4 	.word	0x20004cf4
 800c738:	08011210 	.word	0x08011210
 800c73c:	08011248 	.word	0x08011248
 800c740:	08011280 	.word	0x08011280
 800c744:	080112a8 	.word	0x080112a8

0800c748 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	460b      	mov	r3, r1
 800c752:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c754:	78fb      	ldrb	r3, [r7, #3]
 800c756:	461a      	mov	r2, r3
 800c758:	2103      	movs	r1, #3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f814 	bl	800c788 <icmp_send_response>
}
 800c760:	bf00      	nop
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	460b      	mov	r3, r1
 800c772:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c774:	78fb      	ldrb	r3, [r7, #3]
 800c776:	461a      	mov	r2, r3
 800c778:	210b      	movs	r1, #11
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f804 	bl	800c788 <icmp_send_response>
}
 800c780:	bf00      	nop
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b08c      	sub	sp, #48	@ 0x30
 800c78c:	af04      	add	r7, sp, #16
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	460b      	mov	r3, r1
 800c792:	70fb      	strb	r3, [r7, #3]
 800c794:	4613      	mov	r3, r2
 800c796:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c798:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c79c:	2124      	movs	r1, #36	@ 0x24
 800c79e:	2022      	movs	r0, #34	@ 0x22
 800c7a0:	f7f8 faf6 	bl	8004d90 <pbuf_alloc>
 800c7a4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d04c      	beq.n	800c846 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	895b      	ldrh	r3, [r3, #10]
 800c7b0:	2b23      	cmp	r3, #35	@ 0x23
 800c7b2:	d806      	bhi.n	800c7c2 <icmp_send_response+0x3a>
 800c7b4:	4b26      	ldr	r3, [pc, #152]	@ (800c850 <icmp_send_response+0xc8>)
 800c7b6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800c7ba:	4926      	ldr	r1, [pc, #152]	@ (800c854 <icmp_send_response+0xcc>)
 800c7bc:	4826      	ldr	r0, [pc, #152]	@ (800c858 <icmp_send_response+0xd0>)
 800c7be:	f001 fb39 	bl	800de34 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	78fa      	ldrb	r2, [r7, #3]
 800c7d2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	78ba      	ldrb	r2, [r7, #2]
 800c7d8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	711a      	strb	r2, [r3, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	719a      	strb	r2, [r3, #6]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	f103 0008 	add.w	r0, r3, #8
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	221c      	movs	r2, #28
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	f001 fbf4 	bl	800dfea <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c808:	f107 030c 	add.w	r3, r7, #12
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 f825 	bl	800c85c <ip4_route>
 800c812:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d011      	beq.n	800c83e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2200      	movs	r2, #0
 800c81e:	709a      	strb	r2, [r3, #2]
 800c820:	2200      	movs	r2, #0
 800c822:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c824:	f107 020c 	add.w	r2, r7, #12
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	9302      	str	r3, [sp, #8]
 800c82c:	2301      	movs	r3, #1
 800c82e:	9301      	str	r3, [sp, #4]
 800c830:	2300      	movs	r3, #0
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	23ff      	movs	r3, #255	@ 0xff
 800c836:	2100      	movs	r1, #0
 800c838:	69f8      	ldr	r0, [r7, #28]
 800c83a:	f000 f9cd 	bl	800cbd8 <ip4_output_if>
  }
  pbuf_free(q);
 800c83e:	69f8      	ldr	r0, [r7, #28]
 800c840:	f7f8 fd8a 	bl	8005358 <pbuf_free>
 800c844:	e000      	b.n	800c848 <icmp_send_response+0xc0>
    return;
 800c846:	bf00      	nop
}
 800c848:	3720      	adds	r7, #32
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	08011210 	.word	0x08011210
 800c854:	080112dc 	.word	0x080112dc
 800c858:	08011280 	.word	0x08011280

0800c85c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800c864:	4b33      	ldr	r3, [pc, #204]	@ (800c934 <ip4_route+0xd8>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	60fb      	str	r3, [r7, #12]
 800c86a:	e036      	b.n	800c8da <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c872:	f003 0301 	and.w	r3, r3, #1
 800c876:	b2db      	uxtb	r3, r3
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d02b      	beq.n	800c8d4 <ip4_route+0x78>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c882:	089b      	lsrs	r3, r3, #2
 800c884:	f003 0301 	and.w	r3, r3, #1
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d022      	beq.n	800c8d4 <ip4_route+0x78>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3304      	adds	r3, #4
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d01d      	beq.n	800c8d4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3304      	adds	r3, #4
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	405a      	eors	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	3308      	adds	r3, #8
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d101      	bne.n	800c8b4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	e038      	b.n	800c926 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8ba:	f003 0302 	and.w	r3, r3, #2
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d108      	bne.n	800c8d4 <ip4_route+0x78>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	330c      	adds	r3, #12
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d101      	bne.n	800c8d4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	e028      	b.n	800c926 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1c5      	bne.n	800c86c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c8e0:	4b15      	ldr	r3, [pc, #84]	@ (800c938 <ip4_route+0xdc>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d01a      	beq.n	800c91e <ip4_route+0xc2>
 800c8e8:	4b13      	ldr	r3, [pc, #76]	@ (800c938 <ip4_route+0xdc>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8f0:	f003 0301 	and.w	r3, r3, #1
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d012      	beq.n	800c91e <ip4_route+0xc2>
 800c8f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c938 <ip4_route+0xdc>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c900:	f003 0304 	and.w	r3, r3, #4
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00a      	beq.n	800c91e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c908:	4b0b      	ldr	r3, [pc, #44]	@ (800c938 <ip4_route+0xdc>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	3304      	adds	r3, #4
 800c90e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c910:	2b00      	cmp	r3, #0
 800c912:	d004      	beq.n	800c91e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c91c:	d101      	bne.n	800c922 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c91e:	2300      	movs	r3, #0
 800c920:	e001      	b.n	800c926 <ip4_route+0xca>
  }

  return netif_default;
 800c922:	4b05      	ldr	r3, [pc, #20]	@ (800c938 <ip4_route+0xdc>)
 800c924:	681b      	ldr	r3, [r3, #0]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	20008244 	.word	0x20008244
 800c938:	20008248 	.word	0x20008248

0800c93c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	2b00      	cmp	r3, #0
 800c952:	d016      	beq.n	800c982 <ip4_input_accept+0x46>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	3304      	adds	r3, #4
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d011      	beq.n	800c982 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c95e:	4b0b      	ldr	r3, [pc, #44]	@ (800c98c <ip4_input_accept+0x50>)
 800c960:	695a      	ldr	r2, [r3, #20]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	3304      	adds	r3, #4
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d008      	beq.n	800c97e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c96c:	4b07      	ldr	r3, [pc, #28]	@ (800c98c <ip4_input_accept+0x50>)
 800c96e:	695b      	ldr	r3, [r3, #20]
 800c970:	6879      	ldr	r1, [r7, #4]
 800c972:	4618      	mov	r0, r3
 800c974:	f000 fa08 	bl	800cd88 <ip4_addr_isbroadcast_u32>
 800c978:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800c97e:	2301      	movs	r3, #1
 800c980:	e000      	b.n	800c984 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800c982:	2300      	movs	r3, #0
}
 800c984:	4618      	mov	r0, r3
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	20004ce0 	.word	0x20004ce0

0800c990 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	091b      	lsrs	r3, r3, #4
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b04      	cmp	r3, #4
 800c9aa:	d004      	beq.n	800c9b6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7f8 fcd3 	bl	8005358 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e107      	b.n	800cbc6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	f003 030f 	and.w	r3, r3, #15
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	885b      	ldrh	r3, [r3, #2]
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7f7 f965 	bl	8003c9c <lwip_htons>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	891b      	ldrh	r3, [r3, #8]
 800c9da:	89ba      	ldrh	r2, [r7, #12]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d204      	bcs.n	800c9ea <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c9e0:	89bb      	ldrh	r3, [r7, #12]
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7f8 fb31 	bl	800504c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	895b      	ldrh	r3, [r3, #10]
 800c9ee:	89fa      	ldrh	r2, [r7, #14]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d807      	bhi.n	800ca04 <ip4_input+0x74>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	891b      	ldrh	r3, [r3, #8]
 800c9f8:	89ba      	ldrh	r2, [r7, #12]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d802      	bhi.n	800ca04 <ip4_input+0x74>
 800c9fe:	89fb      	ldrh	r3, [r7, #14]
 800ca00:	2b13      	cmp	r3, #19
 800ca02:	d804      	bhi.n	800ca0e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f7f8 fca7 	bl	8005358 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e0db      	b.n	800cbc6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	4a6f      	ldr	r2, [pc, #444]	@ (800cbd0 <ip4_input+0x240>)
 800ca14:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	4a6d      	ldr	r2, [pc, #436]	@ (800cbd0 <ip4_input+0x240>)
 800ca1c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ca1e:	4b6c      	ldr	r3, [pc, #432]	@ (800cbd0 <ip4_input+0x240>)
 800ca20:	695b      	ldr	r3, [r3, #20]
 800ca22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca26:	2be0      	cmp	r3, #224	@ 0xe0
 800ca28:	d112      	bne.n	800ca50 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d007      	beq.n	800ca4a <ip4_input+0xba>
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <ip4_input+0xba>
      netif = inp;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	613b      	str	r3, [r7, #16]
 800ca48:	e02a      	b.n	800caa0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	613b      	str	r3, [r7, #16]
 800ca4e:	e027      	b.n	800caa0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ca50:	6838      	ldr	r0, [r7, #0]
 800ca52:	f7ff ff73 	bl	800c93c <ip4_input_accept>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <ip4_input+0xd2>
      netif = inp;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	613b      	str	r3, [r7, #16]
 800ca60:	e01e      	b.n	800caa0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ca62:	2300      	movs	r3, #0
 800ca64:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ca66:	4b5a      	ldr	r3, [pc, #360]	@ (800cbd0 <ip4_input+0x240>)
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca6e:	d017      	beq.n	800caa0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ca70:	4b58      	ldr	r3, [pc, #352]	@ (800cbd4 <ip4_input+0x244>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	613b      	str	r3, [r7, #16]
 800ca76:	e00e      	b.n	800ca96 <ip4_input+0x106>
          if (netif == inp) {
 800ca78:	693a      	ldr	r2, [r7, #16]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d006      	beq.n	800ca8e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ca80:	6938      	ldr	r0, [r7, #16]
 800ca82:	f7ff ff5b 	bl	800c93c <ip4_input_accept>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d108      	bne.n	800ca9e <ip4_input+0x10e>
 800ca8c:	e000      	b.n	800ca90 <ip4_input+0x100>
            continue;
 800ca8e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	613b      	str	r3, [r7, #16]
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d1ed      	bne.n	800ca78 <ip4_input+0xe8>
 800ca9c:	e000      	b.n	800caa0 <ip4_input+0x110>
            break;
 800ca9e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800caa0:	4b4b      	ldr	r3, [pc, #300]	@ (800cbd0 <ip4_input+0x240>)
 800caa2:	691b      	ldr	r3, [r3, #16]
 800caa4:	6839      	ldr	r1, [r7, #0]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f000 f96e 	bl	800cd88 <ip4_addr_isbroadcast_u32>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d105      	bne.n	800cabe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cab2:	4b47      	ldr	r3, [pc, #284]	@ (800cbd0 <ip4_input+0x240>)
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800caba:	2be0      	cmp	r3, #224	@ 0xe0
 800cabc:	d104      	bne.n	800cac8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7f8 fc4a 	bl	8005358 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	e07e      	b.n	800cbc6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d104      	bne.n	800cad8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7f8 fc42 	bl	8005358 <pbuf_free>
    return ERR_OK;
 800cad4:	2300      	movs	r3, #0
 800cad6:	e076      	b.n	800cbc6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	88db      	ldrh	r3, [r3, #6]
 800cadc:	b29b      	uxth	r3, r3
 800cade:	461a      	mov	r2, r3
 800cae0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800cae4:	4013      	ands	r3, r2
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00b      	beq.n	800cb02 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 fc92 	bl	800d414 <ip4_reass>
 800caf0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <ip4_input+0x16c>
      return ERR_OK;
 800caf8:	2300      	movs	r3, #0
 800cafa:	e064      	b.n	800cbc6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800cb02:	4a33      	ldr	r2, [pc, #204]	@ (800cbd0 <ip4_input+0x240>)
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800cb08:	4a31      	ldr	r2, [pc, #196]	@ (800cbd0 <ip4_input+0x240>)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800cb0e:	4a30      	ldr	r2, [pc, #192]	@ (800cbd0 <ip4_input+0x240>)
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	f003 030f 	and.w	r3, r3, #15
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	461a      	mov	r2, r3
 800cb24:	4b2a      	ldr	r3, [pc, #168]	@ (800cbd0 <ip4_input+0x240>)
 800cb26:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800cb28:	89fb      	ldrh	r3, [r7, #14]
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7f8 fb8d 	bl	800524c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	7a5b      	ldrb	r3, [r3, #9]
 800cb36:	2b11      	cmp	r3, #17
 800cb38:	d006      	beq.n	800cb48 <ip4_input+0x1b8>
 800cb3a:	2b11      	cmp	r3, #17
 800cb3c:	dc13      	bgt.n	800cb66 <ip4_input+0x1d6>
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d00c      	beq.n	800cb5c <ip4_input+0x1cc>
 800cb42:	2b06      	cmp	r3, #6
 800cb44:	d005      	beq.n	800cb52 <ip4_input+0x1c2>
 800cb46:	e00e      	b.n	800cb66 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7fe f9f2 	bl	800af34 <udp_input>
        break;
 800cb50:	e026      	b.n	800cba0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800cb52:	6839      	ldr	r1, [r7, #0]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7fa fa39 	bl	8006fcc <tcp_input>
        break;
 800cb5a:	e021      	b.n	800cba0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7ff fcee 	bl	800c540 <icmp_input>
        break;
 800cb64:	e01c      	b.n	800cba0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cb66:	4b1a      	ldr	r3, [pc, #104]	@ (800cbd0 <ip4_input+0x240>)
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	6939      	ldr	r1, [r7, #16]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f000 f90b 	bl	800cd88 <ip4_addr_isbroadcast_u32>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d10f      	bne.n	800cb98 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cb78:	4b15      	ldr	r3, [pc, #84]	@ (800cbd0 <ip4_input+0x240>)
 800cb7a:	695b      	ldr	r3, [r3, #20]
 800cb7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cb80:	2be0      	cmp	r3, #224	@ 0xe0
 800cb82:	d009      	beq.n	800cb98 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800cb84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7f8 fbd1 	bl	8005332 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800cb90:	2102      	movs	r1, #2
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f7ff fdd8 	bl	800c748 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7f8 fbdd 	bl	8005358 <pbuf_free>
        break;
 800cb9e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cba0:	4b0b      	ldr	r3, [pc, #44]	@ (800cbd0 <ip4_input+0x240>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cba6:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd0 <ip4_input+0x240>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cbac:	4b08      	ldr	r3, [pc, #32]	@ (800cbd0 <ip4_input+0x240>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cbb2:	4b07      	ldr	r3, [pc, #28]	@ (800cbd0 <ip4_input+0x240>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800cbb8:	4b05      	ldr	r3, [pc, #20]	@ (800cbd0 <ip4_input+0x240>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cbbe:	4b04      	ldr	r3, [pc, #16]	@ (800cbd0 <ip4_input+0x240>)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3718      	adds	r7, #24
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	20004ce0 	.word	0x20004ce0
 800cbd4:	20008244 	.word	0x20008244

0800cbd8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08a      	sub	sp, #40	@ 0x28
 800cbdc:	af04      	add	r7, sp, #16
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
 800cbe4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d009      	beq.n	800cc04 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d003      	beq.n	800cbfe <ip4_output_if+0x26>
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d102      	bne.n	800cc04 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc00:	3304      	adds	r3, #4
 800cc02:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cc04:	78fa      	ldrb	r2, [r7, #3]
 800cc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc08:	9302      	str	r3, [sp, #8]
 800cc0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	4613      	mov	r3, r2
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	6979      	ldr	r1, [r7, #20]
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f000 f805 	bl	800cc2c <ip4_output_if_src>
 800cc22:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3718      	adds	r7, #24
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b088      	sub	sp, #32
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
 800cc38:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	7b9b      	ldrb	r3, [r3, #14]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d006      	beq.n	800cc50 <ip4_output_if_src+0x24>
 800cc42:	4b4b      	ldr	r3, [pc, #300]	@ (800cd70 <ip4_output_if_src+0x144>)
 800cc44:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800cc48:	494a      	ldr	r1, [pc, #296]	@ (800cd74 <ip4_output_if_src+0x148>)
 800cc4a:	484b      	ldr	r0, [pc, #300]	@ (800cd78 <ip4_output_if_src+0x14c>)
 800cc4c:	f001 f8f2 	bl	800de34 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d060      	beq.n	800cd18 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cc56:	2314      	movs	r3, #20
 800cc58:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800cc5a:	2114      	movs	r1, #20
 800cc5c:	68f8      	ldr	r0, [r7, #12]
 800cc5e:	f7f8 fae5 	bl	800522c <pbuf_add_header>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cc68:	f06f 0301 	mvn.w	r3, #1
 800cc6c:	e07c      	b.n	800cd68 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	895b      	ldrh	r3, [r3, #10]
 800cc78:	2b13      	cmp	r3, #19
 800cc7a:	d806      	bhi.n	800cc8a <ip4_output_if_src+0x5e>
 800cc7c:	4b3c      	ldr	r3, [pc, #240]	@ (800cd70 <ip4_output_if_src+0x144>)
 800cc7e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800cc82:	493e      	ldr	r1, [pc, #248]	@ (800cd7c <ip4_output_if_src+0x150>)
 800cc84:	483c      	ldr	r0, [pc, #240]	@ (800cd78 <ip4_output_if_src+0x14c>)
 800cc86:	f001 f8d5 	bl	800de34 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	78fa      	ldrb	r2, [r7, #3]
 800cc8e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800cc96:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cca0:	8b7b      	ldrh	r3, [r7, #26]
 800cca2:	089b      	lsrs	r3, r3, #2
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ccb8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	891b      	ldrh	r3, [r3, #8]
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7f6 ffec 	bl	8003c9c <lwip_htons>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	719a      	strb	r2, [r3, #6]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ccd6:	4b2a      	ldr	r3, [pc, #168]	@ (800cd80 <ip4_output_if_src+0x154>)
 800ccd8:	881b      	ldrh	r3, [r3, #0]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7f6 ffde 	bl	8003c9c <lwip_htons>
 800cce0:	4603      	mov	r3, r0
 800cce2:	461a      	mov	r2, r3
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800cce8:	4b25      	ldr	r3, [pc, #148]	@ (800cd80 <ip4_output_if_src+0x154>)
 800ccea:	881b      	ldrh	r3, [r3, #0]
 800ccec:	3301      	adds	r3, #1
 800ccee:	b29a      	uxth	r2, r3
 800ccf0:	4b23      	ldr	r3, [pc, #140]	@ (800cd80 <ip4_output_if_src+0x154>)
 800ccf2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d104      	bne.n	800cd04 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ccfa:	4b22      	ldr	r3, [pc, #136]	@ (800cd84 <ip4_output_if_src+0x158>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	60da      	str	r2, [r3, #12]
 800cd02:	e003      	b.n	800cd0c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	729a      	strb	r2, [r3, #10]
 800cd12:	2200      	movs	r2, #0
 800cd14:	72da      	strb	r2, [r3, #11]
 800cd16:	e00f      	b.n	800cd38 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	895b      	ldrh	r3, [r3, #10]
 800cd1c:	2b13      	cmp	r3, #19
 800cd1e:	d802      	bhi.n	800cd26 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cd20:	f06f 0301 	mvn.w	r3, #1
 800cd24:	e020      	b.n	800cd68 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	691b      	ldr	r3, [r3, #16]
 800cd30:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800cd32:	f107 0314 	add.w	r3, r7, #20
 800cd36:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00c      	beq.n	800cd5a <ip4_output_if_src+0x12e>
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	891a      	ldrh	r2, [r3, #8]
 800cd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd46:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d906      	bls.n	800cd5a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f000 fd53 	bl	800d7fc <ip4_frag>
 800cd56:	4603      	mov	r3, r0
 800cd58:	e006      	b.n	800cd68 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	68f9      	ldr	r1, [r7, #12]
 800cd62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd64:	4798      	blx	r3
 800cd66:	4603      	mov	r3, r0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3720      	adds	r7, #32
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	08011308 	.word	0x08011308
 800cd74:	0801133c 	.word	0x0801133c
 800cd78:	08011348 	.word	0x08011348
 800cd7c:	08011370 	.word	0x08011370
 800cd80:	200083a2 	.word	0x200083a2
 800cd84:	08011748 	.word	0x08011748

0800cd88 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9c:	d002      	beq.n	800cda4 <ip4_addr_isbroadcast_u32+0x1c>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800cda4:	2301      	movs	r3, #1
 800cda6:	e02a      	b.n	800cdfe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cdae:	f003 0302 	and.w	r3, r3, #2
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	e021      	b.n	800cdfe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	3304      	adds	r3, #4
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d101      	bne.n	800cdca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	e019      	b.n	800cdfe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cdca:	68fa      	ldr	r2, [r7, #12]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	3304      	adds	r3, #4
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	405a      	eors	r2, r3
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	3308      	adds	r3, #8
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4013      	ands	r3, r2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10d      	bne.n	800cdfc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	3308      	adds	r3, #8
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	43da      	mvns	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	3308      	adds	r3, #8
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d101      	bne.n	800cdfc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e000      	b.n	800cdfe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cdfc:	2300      	movs	r3, #0
  }
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3714      	adds	r7, #20
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
	...

0800ce0c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ce12:	2300      	movs	r3, #0
 800ce14:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ce16:	4b12      	ldr	r3, [pc, #72]	@ (800ce60 <ip_reass_tmr+0x54>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ce1c:	e018      	b.n	800ce50 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	7fdb      	ldrb	r3, [r3, #31]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00b      	beq.n	800ce3e <ip_reass_tmr+0x32>
      r->timer--;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	7fdb      	ldrb	r3, [r3, #31]
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	60fb      	str	r3, [r7, #12]
 800ce3c:	e008      	b.n	800ce50 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ce48:	68b9      	ldr	r1, [r7, #8]
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f80a 	bl	800ce64 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1e3      	bne.n	800ce1e <ip_reass_tmr+0x12>
    }
  }
}
 800ce56:	bf00      	nop
 800ce58:	bf00      	nop
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	200083a4 	.word	0x200083a4

0800ce64 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b088      	sub	sp, #32
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ce72:	683a      	ldr	r2, [r7, #0]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d105      	bne.n	800ce86 <ip_reass_free_complete_datagram+0x22>
 800ce7a:	4b45      	ldr	r3, [pc, #276]	@ (800cf90 <ip_reass_free_complete_datagram+0x12c>)
 800ce7c:	22ab      	movs	r2, #171	@ 0xab
 800ce7e:	4945      	ldr	r1, [pc, #276]	@ (800cf94 <ip_reass_free_complete_datagram+0x130>)
 800ce80:	4845      	ldr	r0, [pc, #276]	@ (800cf98 <ip_reass_free_complete_datagram+0x134>)
 800ce82:	f000 ffd7 	bl	800de34 <iprintf>
  if (prev != NULL) {
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00a      	beq.n	800cea2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d005      	beq.n	800cea2 <ip_reass_free_complete_datagram+0x3e>
 800ce96:	4b3e      	ldr	r3, [pc, #248]	@ (800cf90 <ip_reass_free_complete_datagram+0x12c>)
 800ce98:	22ad      	movs	r2, #173	@ 0xad
 800ce9a:	4940      	ldr	r1, [pc, #256]	@ (800cf9c <ip_reass_free_complete_datagram+0x138>)
 800ce9c:	483e      	ldr	r0, [pc, #248]	@ (800cf98 <ip_reass_free_complete_datagram+0x134>)
 800ce9e:	f000 ffc9 	bl	800de34 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	889b      	ldrh	r3, [r3, #4]
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d12a      	bne.n	800cf0a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	6858      	ldr	r0, [r3, #4]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	3308      	adds	r3, #8
 800ceca:	2214      	movs	r2, #20
 800cecc:	4619      	mov	r1, r3
 800cece:	f001 f88c 	bl	800dfea <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ced2:	2101      	movs	r1, #1
 800ced4:	69b8      	ldr	r0, [r7, #24]
 800ced6:	f7ff fc47 	bl	800c768 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ceda:	69b8      	ldr	r0, [r7, #24]
 800cedc:	f7f8 fac4 	bl	8005468 <pbuf_clen>
 800cee0:	4603      	mov	r3, r0
 800cee2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cee4:	8bfa      	ldrh	r2, [r7, #30]
 800cee6:	8a7b      	ldrh	r3, [r7, #18]
 800cee8:	4413      	add	r3, r2
 800ceea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ceee:	db05      	blt.n	800cefc <ip_reass_free_complete_datagram+0x98>
 800cef0:	4b27      	ldr	r3, [pc, #156]	@ (800cf90 <ip_reass_free_complete_datagram+0x12c>)
 800cef2:	22bc      	movs	r2, #188	@ 0xbc
 800cef4:	492a      	ldr	r1, [pc, #168]	@ (800cfa0 <ip_reass_free_complete_datagram+0x13c>)
 800cef6:	4828      	ldr	r0, [pc, #160]	@ (800cf98 <ip_reass_free_complete_datagram+0x134>)
 800cef8:	f000 ff9c 	bl	800de34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800cefc:	8bfa      	ldrh	r2, [r7, #30]
 800cefe:	8a7b      	ldrh	r3, [r7, #18]
 800cf00:	4413      	add	r3, r2
 800cf02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800cf04:	69b8      	ldr	r0, [r7, #24]
 800cf06:	f7f8 fa27 	bl	8005358 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800cf10:	e01f      	b.n	800cf52 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	617b      	str	r3, [r7, #20]
    pcur = p;
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f7f8 faa0 	bl	8005468 <pbuf_clen>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cf2c:	8bfa      	ldrh	r2, [r7, #30]
 800cf2e:	8a7b      	ldrh	r3, [r7, #18]
 800cf30:	4413      	add	r3, r2
 800cf32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf36:	db05      	blt.n	800cf44 <ip_reass_free_complete_datagram+0xe0>
 800cf38:	4b15      	ldr	r3, [pc, #84]	@ (800cf90 <ip_reass_free_complete_datagram+0x12c>)
 800cf3a:	22cc      	movs	r2, #204	@ 0xcc
 800cf3c:	4918      	ldr	r1, [pc, #96]	@ (800cfa0 <ip_reass_free_complete_datagram+0x13c>)
 800cf3e:	4816      	ldr	r0, [pc, #88]	@ (800cf98 <ip_reass_free_complete_datagram+0x134>)
 800cf40:	f000 ff78 	bl	800de34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800cf44:	8bfa      	ldrh	r2, [r7, #30]
 800cf46:	8a7b      	ldrh	r3, [r7, #18]
 800cf48:	4413      	add	r3, r2
 800cf4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f7f8 fa03 	bl	8005358 <pbuf_free>
  while (p != NULL) {
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1dc      	bne.n	800cf12 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800cf58:	6839      	ldr	r1, [r7, #0]
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 f8c2 	bl	800d0e4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800cf60:	4b10      	ldr	r3, [pc, #64]	@ (800cfa4 <ip_reass_free_complete_datagram+0x140>)
 800cf62:	881b      	ldrh	r3, [r3, #0]
 800cf64:	8bfa      	ldrh	r2, [r7, #30]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d905      	bls.n	800cf76 <ip_reass_free_complete_datagram+0x112>
 800cf6a:	4b09      	ldr	r3, [pc, #36]	@ (800cf90 <ip_reass_free_complete_datagram+0x12c>)
 800cf6c:	22d2      	movs	r2, #210	@ 0xd2
 800cf6e:	490e      	ldr	r1, [pc, #56]	@ (800cfa8 <ip_reass_free_complete_datagram+0x144>)
 800cf70:	4809      	ldr	r0, [pc, #36]	@ (800cf98 <ip_reass_free_complete_datagram+0x134>)
 800cf72:	f000 ff5f 	bl	800de34 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800cf76:	4b0b      	ldr	r3, [pc, #44]	@ (800cfa4 <ip_reass_free_complete_datagram+0x140>)
 800cf78:	881a      	ldrh	r2, [r3, #0]
 800cf7a:	8bfb      	ldrh	r3, [r7, #30]
 800cf7c:	1ad3      	subs	r3, r2, r3
 800cf7e:	b29a      	uxth	r2, r3
 800cf80:	4b08      	ldr	r3, [pc, #32]	@ (800cfa4 <ip_reass_free_complete_datagram+0x140>)
 800cf82:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800cf84:	8bfb      	ldrh	r3, [r7, #30]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3720      	adds	r7, #32
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	080113a0 	.word	0x080113a0
 800cf94:	080113dc 	.word	0x080113dc
 800cf98:	080113e8 	.word	0x080113e8
 800cf9c:	08011410 	.word	0x08011410
 800cfa0:	08011424 	.word	0x08011424
 800cfa4:	200083a8 	.word	0x200083a8
 800cfa8:	08011444 	.word	0x08011444

0800cfac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b08a      	sub	sp, #40	@ 0x28
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800cfca:	4b28      	ldr	r3, [pc, #160]	@ (800d06c <ip_reass_remove_oldest_datagram+0xc0>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800cfd0:	e030      	b.n	800d034 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800cfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd4:	695a      	ldr	r2, [r3, #20]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d10c      	bne.n	800cff8 <ip_reass_remove_oldest_datagram+0x4c>
 800cfde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe0:	699a      	ldr	r2, [r3, #24]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d106      	bne.n	800cff8 <ip_reass_remove_oldest_datagram+0x4c>
 800cfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfec:	899a      	ldrh	r2, [r3, #12]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	889b      	ldrh	r3, [r3, #4]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d014      	beq.n	800d022 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	3301      	adds	r3, #1
 800cffc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800cffe:	6a3b      	ldr	r3, [r7, #32]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d104      	bne.n	800d00e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d006:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	61bb      	str	r3, [r7, #24]
 800d00c:	e009      	b.n	800d022 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d010:	7fda      	ldrb	r2, [r3, #31]
 800d012:	6a3b      	ldr	r3, [r7, #32]
 800d014:	7fdb      	ldrb	r3, [r3, #31]
 800d016:	429a      	cmp	r2, r3
 800d018:	d803      	bhi.n	800d022 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d001      	beq.n	800d02e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800d034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1cb      	bne.n	800cfd2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d03a:	6a3b      	ldr	r3, [r7, #32]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d008      	beq.n	800d052 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d040:	69b9      	ldr	r1, [r7, #24]
 800d042:	6a38      	ldr	r0, [r7, #32]
 800d044:	f7ff ff0e 	bl	800ce64 <ip_reass_free_complete_datagram>
 800d048:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4413      	add	r3, r2
 800d050:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	429a      	cmp	r2, r3
 800d058:	da02      	bge.n	800d060 <ip_reass_remove_oldest_datagram+0xb4>
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	dcac      	bgt.n	800cfba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d060:	697b      	ldr	r3, [r7, #20]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3728      	adds	r7, #40	@ 0x28
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	200083a4 	.word	0x200083a4

0800d070 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d07a:	2004      	movs	r0, #4
 800d07c:	f7f7 fa86 	bl	800458c <memp_malloc>
 800d080:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d110      	bne.n	800d0aa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7ff ff8e 	bl	800cfac <ip_reass_remove_oldest_datagram>
 800d090:	4602      	mov	r2, r0
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	4293      	cmp	r3, r2
 800d096:	dc03      	bgt.n	800d0a0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d098:	2004      	movs	r0, #4
 800d09a:	f7f7 fa77 	bl	800458c <memp_malloc>
 800d09e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	e016      	b.n	800d0d8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d0aa:	2220      	movs	r2, #32
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	68f8      	ldr	r0, [r7, #12]
 800d0b0:	f000 ff25 	bl	800defe <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	220f      	movs	r2, #15
 800d0b8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d0ba:	4b09      	ldr	r3, [pc, #36]	@ (800d0e0 <ip_reass_enqueue_new_datagram+0x70>)
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d0c2:	4a07      	ldr	r2, [pc, #28]	@ (800d0e0 <ip_reass_enqueue_new_datagram+0x70>)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	3308      	adds	r3, #8
 800d0cc:	2214      	movs	r2, #20
 800d0ce:	6879      	ldr	r1, [r7, #4]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f000 ff8a 	bl	800dfea <memcpy>
  return ipr;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	200083a4 	.word	0x200083a4

0800d0e4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d0ee:	4b10      	ldr	r3, [pc, #64]	@ (800d130 <ip_reass_dequeue_datagram+0x4c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d104      	bne.n	800d102 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a0c      	ldr	r2, [pc, #48]	@ (800d130 <ip_reass_dequeue_datagram+0x4c>)
 800d0fe:	6013      	str	r3, [r2, #0]
 800d100:	e00d      	b.n	800d11e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d106      	bne.n	800d116 <ip_reass_dequeue_datagram+0x32>
 800d108:	4b0a      	ldr	r3, [pc, #40]	@ (800d134 <ip_reass_dequeue_datagram+0x50>)
 800d10a:	f240 1245 	movw	r2, #325	@ 0x145
 800d10e:	490a      	ldr	r1, [pc, #40]	@ (800d138 <ip_reass_dequeue_datagram+0x54>)
 800d110:	480a      	ldr	r0, [pc, #40]	@ (800d13c <ip_reass_dequeue_datagram+0x58>)
 800d112:	f000 fe8f 	bl	800de34 <iprintf>
    prev->next = ipr->next;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d11e:	6879      	ldr	r1, [r7, #4]
 800d120:	2004      	movs	r0, #4
 800d122:	f7f7 faa3 	bl	800466c <memp_free>
}
 800d126:	bf00      	nop
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	200083a4 	.word	0x200083a4
 800d134:	080113a0 	.word	0x080113a0
 800d138:	08011468 	.word	0x08011468
 800d13c:	080113e8 	.word	0x080113e8

0800d140 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08c      	sub	sp, #48	@ 0x30
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d14c:	2300      	movs	r3, #0
 800d14e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d150:	2301      	movs	r3, #1
 800d152:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	885b      	ldrh	r3, [r3, #2]
 800d15e:	b29b      	uxth	r3, r3
 800d160:	4618      	mov	r0, r3
 800d162:	f7f6 fd9b 	bl	8003c9c <lwip_htons>
 800d166:	4603      	mov	r3, r0
 800d168:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	f003 030f 	and.w	r3, r3, #15
 800d172:	b2db      	uxtb	r3, r3
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d178:	7e7b      	ldrb	r3, [r7, #25]
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	8b7a      	ldrh	r2, [r7, #26]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d202      	bcs.n	800d188 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d182:	f04f 33ff 	mov.w	r3, #4294967295
 800d186:	e135      	b.n	800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d188:	7e7b      	ldrb	r3, [r7, #25]
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	8b7a      	ldrh	r2, [r7, #26]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	88db      	ldrh	r3, [r3, #6]
 800d196:	b29b      	uxth	r3, r3
 800d198:	4618      	mov	r0, r3
 800d19a:	f7f6 fd7f 	bl	8003c9c <lwip_htons>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	00db      	lsls	r3, r3, #3
 800d1a8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800d1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	701a      	strb	r2, [r3, #0]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	705a      	strb	r2, [r3, #1]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	709a      	strb	r2, [r3, #2]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c4:	8afa      	ldrh	r2, [r7, #22]
 800d1c6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d1c8:	8afa      	ldrh	r2, [r7, #22]
 800d1ca:	8b7b      	ldrh	r3, [r7, #26]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d6:	88db      	ldrh	r3, [r3, #6]
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	8afa      	ldrh	r2, [r7, #22]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d902      	bls.n	800d1e6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e4:	e106      	b.n	800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1ec:	e068      	b.n	800d2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f6:	889b      	ldrh	r3, [r3, #4]
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	889b      	ldrh	r3, [r3, #4]
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	429a      	cmp	r2, r3
 800d202:	d235      	bcs.n	800d270 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d208:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d020      	beq.n	800d252 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d212:	889b      	ldrh	r3, [r3, #4]
 800d214:	b29a      	uxth	r2, r3
 800d216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d218:	88db      	ldrh	r3, [r3, #6]
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d307      	bcc.n	800d230 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d222:	88db      	ldrh	r3, [r3, #6]
 800d224:	b29a      	uxth	r2, r3
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	889b      	ldrh	r3, [r3, #4]
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d902      	bls.n	800d236 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d230:	f04f 33ff 	mov.w	r3, #4294967295
 800d234:	e0de      	b.n	800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d238:	68ba      	ldr	r2, [r7, #8]
 800d23a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d23e:	88db      	ldrh	r3, [r3, #6]
 800d240:	b29a      	uxth	r2, r3
 800d242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d244:	889b      	ldrh	r3, [r3, #4]
 800d246:	b29b      	uxth	r3, r3
 800d248:	429a      	cmp	r2, r3
 800d24a:	d03d      	beq.n	800d2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d24c:	2300      	movs	r3, #0
 800d24e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d250:	e03a      	b.n	800d2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d254:	88db      	ldrh	r3, [r3, #6]
 800d256:	b29a      	uxth	r2, r3
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	889b      	ldrh	r3, [r3, #4]
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	429a      	cmp	r2, r3
 800d260:	d902      	bls.n	800d268 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d262:	f04f 33ff 	mov.w	r3, #4294967295
 800d266:	e0c5      	b.n	800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	68ba      	ldr	r2, [r7, #8]
 800d26c:	605a      	str	r2, [r3, #4]
      break;
 800d26e:	e02b      	b.n	800d2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d272:	889b      	ldrh	r3, [r3, #4]
 800d274:	b29a      	uxth	r2, r3
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	889b      	ldrh	r3, [r3, #4]
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d102      	bne.n	800d286 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d280:	f04f 33ff 	mov.w	r3, #4294967295
 800d284:	e0b6      	b.n	800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d288:	889b      	ldrh	r3, [r3, #4]
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	88db      	ldrh	r3, [r3, #6]
 800d290:	b29b      	uxth	r3, r3
 800d292:	429a      	cmp	r2, r3
 800d294:	d202      	bcs.n	800d29c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d296:	f04f 33ff 	mov.w	r3, #4294967295
 800d29a:	e0ab      	b.n	800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d009      	beq.n	800d2b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2a4:	88db      	ldrh	r3, [r3, #6]
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	889b      	ldrh	r3, [r3, #4]
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d001      	beq.n	800d2b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800d2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d193      	bne.n	800d1ee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d2c6:	e000      	b.n	800d2ca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d2c8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d12d      	bne.n	800d32c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d01c      	beq.n	800d310 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d8:	88db      	ldrh	r3, [r3, #6]
 800d2da:	b29a      	uxth	r2, r3
 800d2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2de:	889b      	ldrh	r3, [r3, #4]
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d906      	bls.n	800d2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d2e6:	4b45      	ldr	r3, [pc, #276]	@ (800d3fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d2e8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800d2ec:	4944      	ldr	r1, [pc, #272]	@ (800d400 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d2ee:	4845      	ldr	r0, [pc, #276]	@ (800d404 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d2f0:	f000 fda0 	bl	800de34 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f6:	68ba      	ldr	r2, [r7, #8]
 800d2f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fc:	88db      	ldrh	r3, [r3, #6]
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d302:	889b      	ldrh	r3, [r3, #4]
 800d304:	b29b      	uxth	r3, r3
 800d306:	429a      	cmp	r2, r3
 800d308:	d010      	beq.n	800d32c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d30a:	2300      	movs	r3, #0
 800d30c:	623b      	str	r3, [r7, #32]
 800d30e:	e00d      	b.n	800d32c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d006      	beq.n	800d326 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d318:	4b38      	ldr	r3, [pc, #224]	@ (800d3fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d31a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800d31e:	493a      	ldr	r1, [pc, #232]	@ (800d408 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d320:	4838      	ldr	r0, [pc, #224]	@ (800d404 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d322:	f000 fd87 	bl	800de34 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	68ba      	ldr	r2, [r7, #8]
 800d32a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d105      	bne.n	800d33e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	7f9b      	ldrb	r3, [r3, #30]
 800d336:	f003 0301 	and.w	r3, r3, #1
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d059      	beq.n	800d3f2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d33e:	6a3b      	ldr	r3, [r7, #32]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d04f      	beq.n	800d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d006      	beq.n	800d35a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	889b      	ldrh	r3, [r3, #4]
 800d354:	b29b      	uxth	r3, r3
 800d356:	2b00      	cmp	r3, #0
 800d358:	d002      	beq.n	800d360 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d35a:	2300      	movs	r3, #0
 800d35c:	623b      	str	r3, [r7, #32]
 800d35e:	e041      	b.n	800d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d362:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800d364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d36a:	e012      	b.n	800d392 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800d372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d374:	88db      	ldrh	r3, [r3, #6]
 800d376:	b29a      	uxth	r2, r3
 800d378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d37a:	889b      	ldrh	r3, [r3, #4]
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	429a      	cmp	r2, r3
 800d380:	d002      	beq.n	800d388 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d382:	2300      	movs	r3, #0
 800d384:	623b      	str	r3, [r7, #32]
            break;
 800d386:	e007      	b.n	800d398 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800d38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1e9      	bne.n	800d36c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d398:	6a3b      	ldr	r3, [r7, #32]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d022      	beq.n	800d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d106      	bne.n	800d3b4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d3a6:	4b15      	ldr	r3, [pc, #84]	@ (800d3fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d3a8:	f240 12df 	movw	r2, #479	@ 0x1df
 800d3ac:	4917      	ldr	r1, [pc, #92]	@ (800d40c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d3ae:	4815      	ldr	r0, [pc, #84]	@ (800d404 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d3b0:	f000 fd40 	bl	800de34 <iprintf>
          LWIP_ASSERT("sanity check",
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d106      	bne.n	800d3ce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d3c0:	4b0e      	ldr	r3, [pc, #56]	@ (800d3fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d3c2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d3c6:	4911      	ldr	r1, [pc, #68]	@ (800d40c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d3c8:	480e      	ldr	r0, [pc, #56]	@ (800d404 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d3ca:	f000 fd33 	bl	800de34 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d006      	beq.n	800d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d3d6:	4b09      	ldr	r3, [pc, #36]	@ (800d3fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d3d8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800d3dc:	490c      	ldr	r1, [pc, #48]	@ (800d410 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d3de:	4809      	ldr	r0, [pc, #36]	@ (800d404 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d3e0:	f000 fd28 	bl	800de34 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d3e4:	6a3b      	ldr	r3, [r7, #32]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	bf14      	ite	ne
 800d3ea:	2301      	movne	r3, #1
 800d3ec:	2300      	moveq	r3, #0
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	e000      	b.n	800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3730      	adds	r7, #48	@ 0x30
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	080113a0 	.word	0x080113a0
 800d400:	08011484 	.word	0x08011484
 800d404:	080113e8 	.word	0x080113e8
 800d408:	080114a4 	.word	0x080114a4
 800d40c:	080114dc 	.word	0x080114dc
 800d410:	080114ec 	.word	0x080114ec

0800d414 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b08e      	sub	sp, #56	@ 0x38
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	f003 030f 	and.w	r3, r3, #15
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	2b14      	cmp	r3, #20
 800d432:	f040 8171 	bne.w	800d718 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d438:	88db      	ldrh	r3, [r3, #6]
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7f6 fc2d 	bl	8003c9c <lwip_htons>
 800d442:	4603      	mov	r3, r0
 800d444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d448:	b29b      	uxth	r3, r3
 800d44a:	00db      	lsls	r3, r3, #3
 800d44c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d450:	885b      	ldrh	r3, [r3, #2]
 800d452:	b29b      	uxth	r3, r3
 800d454:	4618      	mov	r0, r3
 800d456:	f7f6 fc21 	bl	8003c9c <lwip_htons>
 800d45a:	4603      	mov	r3, r0
 800d45c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	f003 030f 	and.w	r3, r3, #15
 800d466:	b2db      	uxtb	r3, r3
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800d46e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d472:	b29b      	uxth	r3, r3
 800d474:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d476:	429a      	cmp	r2, r3
 800d478:	f0c0 8150 	bcc.w	800d71c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d47c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d480:	b29b      	uxth	r3, r3
 800d482:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d484:	1ad3      	subs	r3, r2, r3
 800d486:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f7f7 ffed 	bl	8005468 <pbuf_clen>
 800d48e:	4603      	mov	r3, r0
 800d490:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d492:	4b8c      	ldr	r3, [pc, #560]	@ (800d6c4 <ip4_reass+0x2b0>)
 800d494:	881b      	ldrh	r3, [r3, #0]
 800d496:	461a      	mov	r2, r3
 800d498:	8c3b      	ldrh	r3, [r7, #32]
 800d49a:	4413      	add	r3, r2
 800d49c:	2b0a      	cmp	r3, #10
 800d49e:	dd10      	ble.n	800d4c2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d4a0:	8c3b      	ldrh	r3, [r7, #32]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4a6:	f7ff fd81 	bl	800cfac <ip_reass_remove_oldest_datagram>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f000 8137 	beq.w	800d720 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d4b2:	4b84      	ldr	r3, [pc, #528]	@ (800d6c4 <ip4_reass+0x2b0>)
 800d4b4:	881b      	ldrh	r3, [r3, #0]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	8c3b      	ldrh	r3, [r7, #32]
 800d4ba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d4bc:	2b0a      	cmp	r3, #10
 800d4be:	f300 812f 	bgt.w	800d720 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d4c2:	4b81      	ldr	r3, [pc, #516]	@ (800d6c8 <ip4_reass+0x2b4>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4c8:	e015      	b.n	800d4f6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4cc:	695a      	ldr	r2, [r3, #20]
 800d4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d10c      	bne.n	800d4f0 <ip4_reass+0xdc>
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d8:	699a      	ldr	r2, [r3, #24]
 800d4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d106      	bne.n	800d4f0 <ip4_reass+0xdc>
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e4:	899a      	ldrh	r2, [r3, #12]
 800d4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e8:	889b      	ldrh	r3, [r3, #4]
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d006      	beq.n	800d4fe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1e6      	bne.n	800d4ca <ip4_reass+0xb6>
 800d4fc:	e000      	b.n	800d500 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d4fe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d502:	2b00      	cmp	r3, #0
 800d504:	d109      	bne.n	800d51a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d506:	8c3b      	ldrh	r3, [r7, #32]
 800d508:	4619      	mov	r1, r3
 800d50a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d50c:	f7ff fdb0 	bl	800d070 <ip_reass_enqueue_new_datagram>
 800d510:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d514:	2b00      	cmp	r3, #0
 800d516:	d11c      	bne.n	800d552 <ip4_reass+0x13e>
      goto nullreturn;
 800d518:	e105      	b.n	800d726 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d51c:	88db      	ldrh	r3, [r3, #6]
 800d51e:	b29b      	uxth	r3, r3
 800d520:	4618      	mov	r0, r3
 800d522:	f7f6 fbbb 	bl	8003c9c <lwip_htons>
 800d526:	4603      	mov	r3, r0
 800d528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d110      	bne.n	800d552 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d532:	89db      	ldrh	r3, [r3, #14]
 800d534:	4618      	mov	r0, r3
 800d536:	f7f6 fbb1 	bl	8003c9c <lwip_htons>
 800d53a:	4603      	mov	r3, r0
 800d53c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d540:	2b00      	cmp	r3, #0
 800d542:	d006      	beq.n	800d552 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d546:	3308      	adds	r3, #8
 800d548:	2214      	movs	r2, #20
 800d54a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 fd4c 	bl	800dfea <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d554:	88db      	ldrh	r3, [r3, #6]
 800d556:	b29b      	uxth	r3, r3
 800d558:	f003 0320 	and.w	r3, r3, #32
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	bf0c      	ite	eq
 800d560:	2301      	moveq	r3, #1
 800d562:	2300      	movne	r3, #0
 800d564:	b2db      	uxtb	r3, r3
 800d566:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00e      	beq.n	800d58c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d56e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d570:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d572:	4413      	add	r3, r2
 800d574:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d576:	8b7a      	ldrh	r2, [r7, #26]
 800d578:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d57a:	429a      	cmp	r2, r3
 800d57c:	f0c0 80a0 	bcc.w	800d6c0 <ip4_reass+0x2ac>
 800d580:	8b7b      	ldrh	r3, [r7, #26]
 800d582:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d586:	4293      	cmp	r3, r2
 800d588:	f200 809a 	bhi.w	800d6c0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d58c:	69fa      	ldr	r2, [r7, #28]
 800d58e:	6879      	ldr	r1, [r7, #4]
 800d590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d592:	f7ff fdd5 	bl	800d140 <ip_reass_chain_frag_into_datagram_and_validate>
 800d596:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59e:	f000 809b 	beq.w	800d6d8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d5a2:	4b48      	ldr	r3, [pc, #288]	@ (800d6c4 <ip4_reass+0x2b0>)
 800d5a4:	881a      	ldrh	r2, [r3, #0]
 800d5a6:	8c3b      	ldrh	r3, [r7, #32]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	4b45      	ldr	r3, [pc, #276]	@ (800d6c4 <ip4_reass+0x2b0>)
 800d5ae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00d      	beq.n	800d5d2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d5b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d5b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5ba:	4413      	add	r3, r2
 800d5bc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c0:	8a7a      	ldrh	r2, [r7, #18]
 800d5c2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c6:	7f9b      	ldrb	r3, [r3, #30]
 800d5c8:	f043 0301 	orr.w	r3, r3, #1
 800d5cc:	b2da      	uxtb	r2, r3
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d171      	bne.n	800d6bc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5da:	8b9b      	ldrh	r3, [r3, #28]
 800d5dc:	3314      	adds	r3, #20
 800d5de:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f4:	3308      	adds	r3, #8
 800d5f6:	2214      	movs	r2, #20
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5fc:	f000 fcf5 	bl	800dfea <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d600:	8a3b      	ldrh	r3, [r7, #16]
 800d602:	4618      	mov	r0, r3
 800d604:	f7f6 fb4a 	bl	8003c9c <lwip_htons>
 800d608:	4603      	mov	r3, r0
 800d60a:	461a      	mov	r2, r3
 800d60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d60e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d612:	2200      	movs	r2, #0
 800d614:	719a      	strb	r2, [r3, #6]
 800d616:	2200      	movs	r2, #0
 800d618:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61c:	2200      	movs	r2, #0
 800d61e:	729a      	strb	r2, [r3, #10]
 800d620:	2200      	movs	r2, #0
 800d622:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d62a:	e00d      	b.n	800d648 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d62c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d632:	2114      	movs	r1, #20
 800d634:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d636:	f7f7 fe09 	bl	800524c <pbuf_remove_header>
      pbuf_cat(p, r);
 800d63a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7f7 ff4d 	bl	80054dc <pbuf_cat>
      r = iprh->next_pbuf;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800d648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d1ee      	bne.n	800d62c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d64e:	4b1e      	ldr	r3, [pc, #120]	@ (800d6c8 <ip4_reass+0x2b4>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d654:	429a      	cmp	r2, r3
 800d656:	d102      	bne.n	800d65e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d658:	2300      	movs	r3, #0
 800d65a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d65c:	e010      	b.n	800d680 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d65e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6c8 <ip4_reass+0x2b4>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d664:	e007      	b.n	800d676 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d006      	beq.n	800d67e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d1f4      	bne.n	800d666 <ip4_reass+0x252>
 800d67c:	e000      	b.n	800d680 <ip4_reass+0x26c>
          break;
 800d67e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d680:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d684:	f7ff fd2e 	bl	800d0e4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f7f7 feed 	bl	8005468 <pbuf_clen>
 800d68e:	4603      	mov	r3, r0
 800d690:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d692:	4b0c      	ldr	r3, [pc, #48]	@ (800d6c4 <ip4_reass+0x2b0>)
 800d694:	881b      	ldrh	r3, [r3, #0]
 800d696:	8c3a      	ldrh	r2, [r7, #32]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d906      	bls.n	800d6aa <ip4_reass+0x296>
 800d69c:	4b0b      	ldr	r3, [pc, #44]	@ (800d6cc <ip4_reass+0x2b8>)
 800d69e:	f240 229b 	movw	r2, #667	@ 0x29b
 800d6a2:	490b      	ldr	r1, [pc, #44]	@ (800d6d0 <ip4_reass+0x2bc>)
 800d6a4:	480b      	ldr	r0, [pc, #44]	@ (800d6d4 <ip4_reass+0x2c0>)
 800d6a6:	f000 fbc5 	bl	800de34 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d6aa:	4b06      	ldr	r3, [pc, #24]	@ (800d6c4 <ip4_reass+0x2b0>)
 800d6ac:	881a      	ldrh	r2, [r3, #0]
 800d6ae:	8c3b      	ldrh	r3, [r7, #32]
 800d6b0:	1ad3      	subs	r3, r2, r3
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	4b03      	ldr	r3, [pc, #12]	@ (800d6c4 <ip4_reass+0x2b0>)
 800d6b6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	e038      	b.n	800d72e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	e036      	b.n	800d72e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800d6c0:	bf00      	nop
 800d6c2:	e00a      	b.n	800d6da <ip4_reass+0x2c6>
 800d6c4:	200083a8 	.word	0x200083a8
 800d6c8:	200083a4 	.word	0x200083a4
 800d6cc:	080113a0 	.word	0x080113a0
 800d6d0:	08011510 	.word	0x08011510
 800d6d4:	080113e8 	.word	0x080113e8
    goto nullreturn_ipr;
 800d6d8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d106      	bne.n	800d6ee <ip4_reass+0x2da>
 800d6e0:	4b15      	ldr	r3, [pc, #84]	@ (800d738 <ip4_reass+0x324>)
 800d6e2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800d6e6:	4915      	ldr	r1, [pc, #84]	@ (800d73c <ip4_reass+0x328>)
 800d6e8:	4815      	ldr	r0, [pc, #84]	@ (800d740 <ip4_reass+0x32c>)
 800d6ea:	f000 fba3 	bl	800de34 <iprintf>
  if (ipr->p == NULL) {
 800d6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d116      	bne.n	800d724 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d6f6:	4b13      	ldr	r3, [pc, #76]	@ (800d744 <ip4_reass+0x330>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d006      	beq.n	800d70e <ip4_reass+0x2fa>
 800d700:	4b0d      	ldr	r3, [pc, #52]	@ (800d738 <ip4_reass+0x324>)
 800d702:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d706:	4910      	ldr	r1, [pc, #64]	@ (800d748 <ip4_reass+0x334>)
 800d708:	480d      	ldr	r0, [pc, #52]	@ (800d740 <ip4_reass+0x32c>)
 800d70a:	f000 fb93 	bl	800de34 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d70e:	2100      	movs	r1, #0
 800d710:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d712:	f7ff fce7 	bl	800d0e4 <ip_reass_dequeue_datagram>
 800d716:	e006      	b.n	800d726 <ip4_reass+0x312>
    goto nullreturn;
 800d718:	bf00      	nop
 800d71a:	e004      	b.n	800d726 <ip4_reass+0x312>
    goto nullreturn;
 800d71c:	bf00      	nop
 800d71e:	e002      	b.n	800d726 <ip4_reass+0x312>
      goto nullreturn;
 800d720:	bf00      	nop
 800d722:	e000      	b.n	800d726 <ip4_reass+0x312>
  }

nullreturn:
 800d724:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f7f7 fe16 	bl	8005358 <pbuf_free>
  return NULL;
 800d72c:	2300      	movs	r3, #0
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3738      	adds	r7, #56	@ 0x38
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	080113a0 	.word	0x080113a0
 800d73c:	0801152c 	.word	0x0801152c
 800d740:	080113e8 	.word	0x080113e8
 800d744:	200083a4 	.word	0x200083a4
 800d748:	08011538 	.word	0x08011538

0800d74c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d750:	2005      	movs	r0, #5
 800d752:	f7f6 ff1b 	bl	800458c <memp_malloc>
 800d756:	4603      	mov	r3, r0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d106      	bne.n	800d778 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d76a:	4b07      	ldr	r3, [pc, #28]	@ (800d788 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d76c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800d770:	4906      	ldr	r1, [pc, #24]	@ (800d78c <ip_frag_free_pbuf_custom_ref+0x30>)
 800d772:	4807      	ldr	r0, [pc, #28]	@ (800d790 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d774:	f000 fb5e 	bl	800de34 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d778:	6879      	ldr	r1, [r7, #4]
 800d77a:	2005      	movs	r0, #5
 800d77c:	f7f6 ff76 	bl	800466c <memp_free>
}
 800d780:	bf00      	nop
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	080113a0 	.word	0x080113a0
 800d78c:	08011558 	.word	0x08011558
 800d790:	080113e8 	.word	0x080113e8

0800d794 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d106      	bne.n	800d7b4 <ipfrag_free_pbuf_custom+0x20>
 800d7a6:	4b11      	ldr	r3, [pc, #68]	@ (800d7ec <ipfrag_free_pbuf_custom+0x58>)
 800d7a8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800d7ac:	4910      	ldr	r1, [pc, #64]	@ (800d7f0 <ipfrag_free_pbuf_custom+0x5c>)
 800d7ae:	4811      	ldr	r0, [pc, #68]	@ (800d7f4 <ipfrag_free_pbuf_custom+0x60>)
 800d7b0:	f000 fb40 	bl	800de34 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d006      	beq.n	800d7ca <ipfrag_free_pbuf_custom+0x36>
 800d7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ec <ipfrag_free_pbuf_custom+0x58>)
 800d7be:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800d7c2:	490d      	ldr	r1, [pc, #52]	@ (800d7f8 <ipfrag_free_pbuf_custom+0x64>)
 800d7c4:	480b      	ldr	r0, [pc, #44]	@ (800d7f4 <ipfrag_free_pbuf_custom+0x60>)
 800d7c6:	f000 fb35 	bl	800de34 <iprintf>
  if (pcr->original != NULL) {
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	695b      	ldr	r3, [r3, #20]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d004      	beq.n	800d7dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	695b      	ldr	r3, [r3, #20]
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7f7 fdbe 	bl	8005358 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f7ff ffbd 	bl	800d75c <ip_frag_free_pbuf_custom_ref>
}
 800d7e2:	bf00      	nop
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	080113a0 	.word	0x080113a0
 800d7f0:	08011564 	.word	0x08011564
 800d7f4:	080113e8 	.word	0x080113e8
 800d7f8:	08011570 	.word	0x08011570

0800d7fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b094      	sub	sp, #80	@ 0x50
 800d800:	af02      	add	r7, sp, #8
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d812:	3b14      	subs	r3, #20
 800d814:	2b00      	cmp	r3, #0
 800d816:	da00      	bge.n	800d81a <ip4_frag+0x1e>
 800d818:	3307      	adds	r3, #7
 800d81a:	10db      	asrs	r3, r3, #3
 800d81c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d81e:	2314      	movs	r3, #20
 800d820:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800d828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d82a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	f003 030f 	and.w	r3, r3, #15
 800d834:	b2db      	uxtb	r3, r3
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b14      	cmp	r3, #20
 800d83c:	d002      	beq.n	800d844 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d83e:	f06f 0305 	mvn.w	r3, #5
 800d842:	e110      	b.n	800da66 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	895b      	ldrh	r3, [r3, #10]
 800d848:	2b13      	cmp	r3, #19
 800d84a:	d809      	bhi.n	800d860 <ip4_frag+0x64>
 800d84c:	4b88      	ldr	r3, [pc, #544]	@ (800da70 <ip4_frag+0x274>)
 800d84e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800d852:	4988      	ldr	r1, [pc, #544]	@ (800da74 <ip4_frag+0x278>)
 800d854:	4888      	ldr	r0, [pc, #544]	@ (800da78 <ip4_frag+0x27c>)
 800d856:	f000 faed 	bl	800de34 <iprintf>
 800d85a:	f06f 0305 	mvn.w	r3, #5
 800d85e:	e102      	b.n	800da66 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d862:	88db      	ldrh	r3, [r3, #6]
 800d864:	b29b      	uxth	r3, r3
 800d866:	4618      	mov	r0, r3
 800d868:	f7f6 fa18 	bl	8003c9c <lwip_htons>
 800d86c:	4603      	mov	r3, r0
 800d86e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800d870:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d876:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800d87a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d87c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d880:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	891b      	ldrh	r3, [r3, #8]
 800d886:	3b14      	subs	r3, #20
 800d888:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800d88c:	e0e1      	b.n	800da52 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d88e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d890:	00db      	lsls	r3, r3, #3
 800d892:	b29b      	uxth	r3, r3
 800d894:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d898:	4293      	cmp	r3, r2
 800d89a:	bf28      	it	cs
 800d89c:	4613      	movcs	r3, r2
 800d89e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d8a0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d8a4:	2114      	movs	r1, #20
 800d8a6:	200e      	movs	r0, #14
 800d8a8:	f7f7 fa72 	bl	8004d90 <pbuf_alloc>
 800d8ac:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f000 80d5 	beq.w	800da60 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b8:	895b      	ldrh	r3, [r3, #10]
 800d8ba:	2b13      	cmp	r3, #19
 800d8bc:	d806      	bhi.n	800d8cc <ip4_frag+0xd0>
 800d8be:	4b6c      	ldr	r3, [pc, #432]	@ (800da70 <ip4_frag+0x274>)
 800d8c0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800d8c4:	496d      	ldr	r1, [pc, #436]	@ (800da7c <ip4_frag+0x280>)
 800d8c6:	486c      	ldr	r0, [pc, #432]	@ (800da78 <ip4_frag+0x27c>)
 800d8c8:	f000 fab4 	bl	800de34 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	2214      	movs	r2, #20
 800d8d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f000 fb88 	bl	800dfea <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800d8e0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d8e2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800d8e6:	e064      	b.n	800d9b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	895a      	ldrh	r2, [r3, #10]
 800d8ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	895b      	ldrh	r3, [r3, #10]
 800d8f6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d906      	bls.n	800d90a <ip4_frag+0x10e>
 800d8fc:	4b5c      	ldr	r3, [pc, #368]	@ (800da70 <ip4_frag+0x274>)
 800d8fe:	f240 322d 	movw	r2, #813	@ 0x32d
 800d902:	495f      	ldr	r1, [pc, #380]	@ (800da80 <ip4_frag+0x284>)
 800d904:	485c      	ldr	r0, [pc, #368]	@ (800da78 <ip4_frag+0x27c>)
 800d906:	f000 fa95 	bl	800de34 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d90a:	8bfa      	ldrh	r2, [r7, #30]
 800d90c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d910:	4293      	cmp	r3, r2
 800d912:	bf28      	it	cs
 800d914:	4613      	movcs	r3, r2
 800d916:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d91a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d105      	bne.n	800d92e <ip4_frag+0x132>
        poff = 0;
 800d922:	2300      	movs	r3, #0
 800d924:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	60fb      	str	r3, [r7, #12]
        continue;
 800d92c:	e041      	b.n	800d9b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d92e:	f7ff ff0d 	bl	800d74c <ip_frag_alloc_pbuf_custom_ref>
 800d932:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d103      	bne.n	800d942 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800d93a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d93c:	f7f7 fd0c 	bl	8005358 <pbuf_free>
        goto memerr;
 800d940:	e08f      	b.n	800da62 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d942:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d948:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d94a:	4413      	add	r3, r2
 800d94c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800d950:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d954:	9201      	str	r2, [sp, #4]
 800d956:	9300      	str	r3, [sp, #0]
 800d958:	4603      	mov	r3, r0
 800d95a:	2241      	movs	r2, #65	@ 0x41
 800d95c:	2000      	movs	r0, #0
 800d95e:	f7f7 fb41 	bl	8004fe4 <pbuf_alloced_custom>
 800d962:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d106      	bne.n	800d978 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d96a:	69b8      	ldr	r0, [r7, #24]
 800d96c:	f7ff fef6 	bl	800d75c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d970:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d972:	f7f7 fcf1 	bl	8005358 <pbuf_free>
        goto memerr;
 800d976:	e074      	b.n	800da62 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f7f7 fd8d 	bl	8005498 <pbuf_ref>
      pcr->original = p;
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	4a3f      	ldr	r2, [pc, #252]	@ (800da84 <ip4_frag+0x288>)
 800d988:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d98a:	6979      	ldr	r1, [r7, #20]
 800d98c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d98e:	f7f7 fda5 	bl	80054dc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d992:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800d996:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800d9a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d004      	beq.n	800d9b2 <ip4_frag+0x1b6>
        poff = 0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d9b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d196      	bne.n	800d8e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800d9ba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d9bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d9c0:	4413      	add	r3, r2
 800d9c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d9c8:	f1a3 0213 	sub.w	r2, r3, #19
 800d9cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	bfcc      	ite	gt
 800d9d4:	2301      	movgt	r3, #1
 800d9d6:	2300      	movle	r3, #0
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d9dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d9e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <ip4_frag+0x1f6>
 800d9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d9f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d9f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d9f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d9fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7f6 f94d 	bl	8003c9c <lwip_htons>
 800da02:	4603      	mov	r3, r0
 800da04:	461a      	mov	r2, r3
 800da06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da08:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800da0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800da0c:	3314      	adds	r3, #20
 800da0e:	b29b      	uxth	r3, r3
 800da10:	4618      	mov	r0, r3
 800da12:	f7f6 f943 	bl	8003c9c <lwip_htons>
 800da16:	4603      	mov	r3, r0
 800da18:	461a      	mov	r2, r3
 800da1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800da1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da20:	2200      	movs	r2, #0
 800da22:	729a      	strb	r2, [r3, #10]
 800da24:	2200      	movs	r2, #0
 800da26:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	695b      	ldr	r3, [r3, #20]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da30:	68b8      	ldr	r0, [r7, #8]
 800da32:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800da34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800da36:	f7f7 fc8f 	bl	8005358 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800da3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800da3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800da46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800da4a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800da4c:	4413      	add	r3, r2
 800da4e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800da52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800da56:	2b00      	cmp	r3, #0
 800da58:	f47f af19 	bne.w	800d88e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	e002      	b.n	800da66 <ip4_frag+0x26a>
      goto memerr;
 800da60:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800da62:	f04f 33ff 	mov.w	r3, #4294967295
}
 800da66:	4618      	mov	r0, r3
 800da68:	3748      	adds	r7, #72	@ 0x48
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	080113a0 	.word	0x080113a0
 800da74:	0801157c 	.word	0x0801157c
 800da78:	080113e8 	.word	0x080113e8
 800da7c:	08011598 	.word	0x08011598
 800da80:	080115b8 	.word	0x080115b8
 800da84:	0800d795 	.word	0x0800d795

0800da88 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b086      	sub	sp, #24
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800da92:	230e      	movs	r3, #14
 800da94:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	895b      	ldrh	r3, [r3, #10]
 800da9a:	2b0e      	cmp	r3, #14
 800da9c:	d96e      	bls.n	800db7c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	7bdb      	ldrb	r3, [r3, #15]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d106      	bne.n	800dab4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800daac:	3301      	adds	r3, #1
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	7b1a      	ldrb	r2, [r3, #12]
 800dabe:	7b5b      	ldrb	r3, [r3, #13]
 800dac0:	021b      	lsls	r3, r3, #8
 800dac2:	4313      	orrs	r3, r2
 800dac4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	f003 0301 	and.w	r3, r3, #1
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d023      	beq.n	800db1a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d10f      	bne.n	800dafa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	785b      	ldrb	r3, [r3, #1]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d11b      	bne.n	800db1a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dae6:	2b5e      	cmp	r3, #94	@ 0x5e
 800dae8:	d117      	bne.n	800db1a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	7b5b      	ldrb	r3, [r3, #13]
 800daee:	f043 0310 	orr.w	r3, r3, #16
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	735a      	strb	r2, [r3, #13]
 800daf8:	e00f      	b.n	800db1a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	2206      	movs	r2, #6
 800dafe:	4928      	ldr	r1, [pc, #160]	@ (800dba0 <ethernet_input+0x118>)
 800db00:	4618      	mov	r0, r3
 800db02:	f000 f9ec 	bl	800dede <memcmp>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d106      	bne.n	800db1a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	7b5b      	ldrb	r3, [r3, #13]
 800db10:	f043 0308 	orr.w	r3, r3, #8
 800db14:	b2da      	uxtb	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800db1a:	89fb      	ldrh	r3, [r7, #14]
 800db1c:	2b08      	cmp	r3, #8
 800db1e:	d003      	beq.n	800db28 <ethernet_input+0xa0>
 800db20:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800db24:	d014      	beq.n	800db50 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800db26:	e032      	b.n	800db8e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db2e:	f003 0308 	and.w	r3, r3, #8
 800db32:	2b00      	cmp	r3, #0
 800db34:	d024      	beq.n	800db80 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800db36:	8afb      	ldrh	r3, [r7, #22]
 800db38:	4619      	mov	r1, r3
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7f7 fb86 	bl	800524c <pbuf_remove_header>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d11e      	bne.n	800db84 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7fe ff21 	bl	800c990 <ip4_input>
      break;
 800db4e:	e013      	b.n	800db78 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db56:	f003 0308 	and.w	r3, r3, #8
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d014      	beq.n	800db88 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800db5e:	8afb      	ldrh	r3, [r7, #22]
 800db60:	4619      	mov	r1, r3
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f7f7 fb72 	bl	800524c <pbuf_remove_header>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10e      	bne.n	800db8c <ethernet_input+0x104>
        etharp_input(p, netif);
 800db6e:	6839      	ldr	r1, [r7, #0]
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7fe f8c1 	bl	800bcf8 <etharp_input>
      break;
 800db76:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800db78:	2300      	movs	r3, #0
 800db7a:	e00c      	b.n	800db96 <ethernet_input+0x10e>
    goto free_and_return;
 800db7c:	bf00      	nop
 800db7e:	e006      	b.n	800db8e <ethernet_input+0x106>
        goto free_and_return;
 800db80:	bf00      	nop
 800db82:	e004      	b.n	800db8e <ethernet_input+0x106>
        goto free_and_return;
 800db84:	bf00      	nop
 800db86:	e002      	b.n	800db8e <ethernet_input+0x106>
        goto free_and_return;
 800db88:	bf00      	nop
 800db8a:	e000      	b.n	800db8e <ethernet_input+0x106>
        goto free_and_return;
 800db8c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7f7 fbe2 	bl	8005358 <pbuf_free>
  return ERR_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3718      	adds	r7, #24
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	0801174c 	.word	0x0801174c

0800dba4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b086      	sub	sp, #24
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800dbb2:	8c3b      	ldrh	r3, [r7, #32]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7f6 f871 	bl	8003c9c <lwip_htons>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800dbbe:	210e      	movs	r1, #14
 800dbc0:	68b8      	ldr	r0, [r7, #8]
 800dbc2:	f7f7 fb33 	bl	800522c <pbuf_add_header>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d125      	bne.n	800dc18 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	8afa      	ldrh	r2, [r7, #22]
 800dbd6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	2206      	movs	r2, #6
 800dbdc:	6839      	ldr	r1, [r7, #0]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f000 fa03 	bl	800dfea <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	3306      	adds	r3, #6
 800dbe8:	2206      	movs	r2, #6
 800dbea:	6879      	ldr	r1, [r7, #4]
 800dbec:	4618      	mov	r0, r3
 800dbee:	f000 f9fc 	bl	800dfea <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dbf8:	2b06      	cmp	r3, #6
 800dbfa:	d006      	beq.n	800dc0a <ethernet_output+0x66>
 800dbfc:	4b0a      	ldr	r3, [pc, #40]	@ (800dc28 <ethernet_output+0x84>)
 800dbfe:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800dc02:	490a      	ldr	r1, [pc, #40]	@ (800dc2c <ethernet_output+0x88>)
 800dc04:	480a      	ldr	r0, [pc, #40]	@ (800dc30 <ethernet_output+0x8c>)
 800dc06:	f000 f915 	bl	800de34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	699b      	ldr	r3, [r3, #24]
 800dc0e:	68b9      	ldr	r1, [r7, #8]
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	4798      	blx	r3
 800dc14:	4603      	mov	r3, r0
 800dc16:	e002      	b.n	800dc1e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800dc18:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800dc1a:	f06f 0301 	mvn.w	r3, #1
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3718      	adds	r7, #24
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	080115c8 	.word	0x080115c8
 800dc2c:	08011600 	.word	0x08011600
 800dc30:	08011634 	.word	0x08011634

0800dc34 <rand>:
 800dc34:	4b16      	ldr	r3, [pc, #88]	@ (800dc90 <rand+0x5c>)
 800dc36:	b510      	push	{r4, lr}
 800dc38:	681c      	ldr	r4, [r3, #0]
 800dc3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dc3c:	b9b3      	cbnz	r3, 800dc6c <rand+0x38>
 800dc3e:	2018      	movs	r0, #24
 800dc40:	f000 fa4a 	bl	800e0d8 <malloc>
 800dc44:	4602      	mov	r2, r0
 800dc46:	6320      	str	r0, [r4, #48]	@ 0x30
 800dc48:	b920      	cbnz	r0, 800dc54 <rand+0x20>
 800dc4a:	4b12      	ldr	r3, [pc, #72]	@ (800dc94 <rand+0x60>)
 800dc4c:	4812      	ldr	r0, [pc, #72]	@ (800dc98 <rand+0x64>)
 800dc4e:	2152      	movs	r1, #82	@ 0x52
 800dc50:	f000 f9da 	bl	800e008 <__assert_func>
 800dc54:	4911      	ldr	r1, [pc, #68]	@ (800dc9c <rand+0x68>)
 800dc56:	4b12      	ldr	r3, [pc, #72]	@ (800dca0 <rand+0x6c>)
 800dc58:	e9c0 1300 	strd	r1, r3, [r0]
 800dc5c:	4b11      	ldr	r3, [pc, #68]	@ (800dca4 <rand+0x70>)
 800dc5e:	6083      	str	r3, [r0, #8]
 800dc60:	230b      	movs	r3, #11
 800dc62:	8183      	strh	r3, [r0, #12]
 800dc64:	2100      	movs	r1, #0
 800dc66:	2001      	movs	r0, #1
 800dc68:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dc6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dc6e:	480e      	ldr	r0, [pc, #56]	@ (800dca8 <rand+0x74>)
 800dc70:	690b      	ldr	r3, [r1, #16]
 800dc72:	694c      	ldr	r4, [r1, #20]
 800dc74:	4a0d      	ldr	r2, [pc, #52]	@ (800dcac <rand+0x78>)
 800dc76:	4358      	muls	r0, r3
 800dc78:	fb02 0004 	mla	r0, r2, r4, r0
 800dc7c:	fba3 3202 	umull	r3, r2, r3, r2
 800dc80:	3301      	adds	r3, #1
 800dc82:	eb40 0002 	adc.w	r0, r0, r2
 800dc86:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800dc8a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800dc8e:	bd10      	pop	{r4, pc}
 800dc90:	20000038 	.word	0x20000038
 800dc94:	0801175a 	.word	0x0801175a
 800dc98:	08011771 	.word	0x08011771
 800dc9c:	abcd330e 	.word	0xabcd330e
 800dca0:	e66d1234 	.word	0xe66d1234
 800dca4:	0005deec 	.word	0x0005deec
 800dca8:	5851f42d 	.word	0x5851f42d
 800dcac:	4c957f2d 	.word	0x4c957f2d

0800dcb0 <std>:
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	b510      	push	{r4, lr}
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	e9c0 3300 	strd	r3, r3, [r0]
 800dcba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcbe:	6083      	str	r3, [r0, #8]
 800dcc0:	8181      	strh	r1, [r0, #12]
 800dcc2:	6643      	str	r3, [r0, #100]	@ 0x64
 800dcc4:	81c2      	strh	r2, [r0, #14]
 800dcc6:	6183      	str	r3, [r0, #24]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	2208      	movs	r2, #8
 800dccc:	305c      	adds	r0, #92	@ 0x5c
 800dcce:	f000 f916 	bl	800defe <memset>
 800dcd2:	4b0d      	ldr	r3, [pc, #52]	@ (800dd08 <std+0x58>)
 800dcd4:	6263      	str	r3, [r4, #36]	@ 0x24
 800dcd6:	4b0d      	ldr	r3, [pc, #52]	@ (800dd0c <std+0x5c>)
 800dcd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dcda:	4b0d      	ldr	r3, [pc, #52]	@ (800dd10 <std+0x60>)
 800dcdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dcde:	4b0d      	ldr	r3, [pc, #52]	@ (800dd14 <std+0x64>)
 800dce0:	6323      	str	r3, [r4, #48]	@ 0x30
 800dce2:	4b0d      	ldr	r3, [pc, #52]	@ (800dd18 <std+0x68>)
 800dce4:	6224      	str	r4, [r4, #32]
 800dce6:	429c      	cmp	r4, r3
 800dce8:	d006      	beq.n	800dcf8 <std+0x48>
 800dcea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dcee:	4294      	cmp	r4, r2
 800dcf0:	d002      	beq.n	800dcf8 <std+0x48>
 800dcf2:	33d0      	adds	r3, #208	@ 0xd0
 800dcf4:	429c      	cmp	r4, r3
 800dcf6:	d105      	bne.n	800dd04 <std+0x54>
 800dcf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dcfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd00:	f000 b970 	b.w	800dfe4 <__retarget_lock_init_recursive>
 800dd04:	bd10      	pop	{r4, pc}
 800dd06:	bf00      	nop
 800dd08:	0800de59 	.word	0x0800de59
 800dd0c:	0800de7b 	.word	0x0800de7b
 800dd10:	0800deb3 	.word	0x0800deb3
 800dd14:	0800ded7 	.word	0x0800ded7
 800dd18:	200083ac 	.word	0x200083ac

0800dd1c <stdio_exit_handler>:
 800dd1c:	4a02      	ldr	r2, [pc, #8]	@ (800dd28 <stdio_exit_handler+0xc>)
 800dd1e:	4903      	ldr	r1, [pc, #12]	@ (800dd2c <stdio_exit_handler+0x10>)
 800dd20:	4803      	ldr	r0, [pc, #12]	@ (800dd30 <stdio_exit_handler+0x14>)
 800dd22:	f000 b869 	b.w	800ddf8 <_fwalk_sglue>
 800dd26:	bf00      	nop
 800dd28:	2000002c 	.word	0x2000002c
 800dd2c:	0800e8e9 	.word	0x0800e8e9
 800dd30:	2000003c 	.word	0x2000003c

0800dd34 <cleanup_stdio>:
 800dd34:	6841      	ldr	r1, [r0, #4]
 800dd36:	4b0c      	ldr	r3, [pc, #48]	@ (800dd68 <cleanup_stdio+0x34>)
 800dd38:	4299      	cmp	r1, r3
 800dd3a:	b510      	push	{r4, lr}
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	d001      	beq.n	800dd44 <cleanup_stdio+0x10>
 800dd40:	f000 fdd2 	bl	800e8e8 <_fflush_r>
 800dd44:	68a1      	ldr	r1, [r4, #8]
 800dd46:	4b09      	ldr	r3, [pc, #36]	@ (800dd6c <cleanup_stdio+0x38>)
 800dd48:	4299      	cmp	r1, r3
 800dd4a:	d002      	beq.n	800dd52 <cleanup_stdio+0x1e>
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f000 fdcb 	bl	800e8e8 <_fflush_r>
 800dd52:	68e1      	ldr	r1, [r4, #12]
 800dd54:	4b06      	ldr	r3, [pc, #24]	@ (800dd70 <cleanup_stdio+0x3c>)
 800dd56:	4299      	cmp	r1, r3
 800dd58:	d004      	beq.n	800dd64 <cleanup_stdio+0x30>
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd60:	f000 bdc2 	b.w	800e8e8 <_fflush_r>
 800dd64:	bd10      	pop	{r4, pc}
 800dd66:	bf00      	nop
 800dd68:	200083ac 	.word	0x200083ac
 800dd6c:	20008414 	.word	0x20008414
 800dd70:	2000847c 	.word	0x2000847c

0800dd74 <global_stdio_init.part.0>:
 800dd74:	b510      	push	{r4, lr}
 800dd76:	4b0b      	ldr	r3, [pc, #44]	@ (800dda4 <global_stdio_init.part.0+0x30>)
 800dd78:	4c0b      	ldr	r4, [pc, #44]	@ (800dda8 <global_stdio_init.part.0+0x34>)
 800dd7a:	4a0c      	ldr	r2, [pc, #48]	@ (800ddac <global_stdio_init.part.0+0x38>)
 800dd7c:	601a      	str	r2, [r3, #0]
 800dd7e:	4620      	mov	r0, r4
 800dd80:	2200      	movs	r2, #0
 800dd82:	2104      	movs	r1, #4
 800dd84:	f7ff ff94 	bl	800dcb0 <std>
 800dd88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	2109      	movs	r1, #9
 800dd90:	f7ff ff8e 	bl	800dcb0 <std>
 800dd94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dd98:	2202      	movs	r2, #2
 800dd9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd9e:	2112      	movs	r1, #18
 800dda0:	f7ff bf86 	b.w	800dcb0 <std>
 800dda4:	200084e4 	.word	0x200084e4
 800dda8:	200083ac 	.word	0x200083ac
 800ddac:	0800dd1d 	.word	0x0800dd1d

0800ddb0 <__sfp_lock_acquire>:
 800ddb0:	4801      	ldr	r0, [pc, #4]	@ (800ddb8 <__sfp_lock_acquire+0x8>)
 800ddb2:	f000 b918 	b.w	800dfe6 <__retarget_lock_acquire_recursive>
 800ddb6:	bf00      	nop
 800ddb8:	200084ed 	.word	0x200084ed

0800ddbc <__sfp_lock_release>:
 800ddbc:	4801      	ldr	r0, [pc, #4]	@ (800ddc4 <__sfp_lock_release+0x8>)
 800ddbe:	f000 b913 	b.w	800dfe8 <__retarget_lock_release_recursive>
 800ddc2:	bf00      	nop
 800ddc4:	200084ed 	.word	0x200084ed

0800ddc8 <__sinit>:
 800ddc8:	b510      	push	{r4, lr}
 800ddca:	4604      	mov	r4, r0
 800ddcc:	f7ff fff0 	bl	800ddb0 <__sfp_lock_acquire>
 800ddd0:	6a23      	ldr	r3, [r4, #32]
 800ddd2:	b11b      	cbz	r3, 800dddc <__sinit+0x14>
 800ddd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddd8:	f7ff bff0 	b.w	800ddbc <__sfp_lock_release>
 800dddc:	4b04      	ldr	r3, [pc, #16]	@ (800ddf0 <__sinit+0x28>)
 800ddde:	6223      	str	r3, [r4, #32]
 800dde0:	4b04      	ldr	r3, [pc, #16]	@ (800ddf4 <__sinit+0x2c>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d1f5      	bne.n	800ddd4 <__sinit+0xc>
 800dde8:	f7ff ffc4 	bl	800dd74 <global_stdio_init.part.0>
 800ddec:	e7f2      	b.n	800ddd4 <__sinit+0xc>
 800ddee:	bf00      	nop
 800ddf0:	0800dd35 	.word	0x0800dd35
 800ddf4:	200084e4 	.word	0x200084e4

0800ddf8 <_fwalk_sglue>:
 800ddf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddfc:	4607      	mov	r7, r0
 800ddfe:	4688      	mov	r8, r1
 800de00:	4614      	mov	r4, r2
 800de02:	2600      	movs	r6, #0
 800de04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de08:	f1b9 0901 	subs.w	r9, r9, #1
 800de0c:	d505      	bpl.n	800de1a <_fwalk_sglue+0x22>
 800de0e:	6824      	ldr	r4, [r4, #0]
 800de10:	2c00      	cmp	r4, #0
 800de12:	d1f7      	bne.n	800de04 <_fwalk_sglue+0xc>
 800de14:	4630      	mov	r0, r6
 800de16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de1a:	89ab      	ldrh	r3, [r5, #12]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d907      	bls.n	800de30 <_fwalk_sglue+0x38>
 800de20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de24:	3301      	adds	r3, #1
 800de26:	d003      	beq.n	800de30 <_fwalk_sglue+0x38>
 800de28:	4629      	mov	r1, r5
 800de2a:	4638      	mov	r0, r7
 800de2c:	47c0      	blx	r8
 800de2e:	4306      	orrs	r6, r0
 800de30:	3568      	adds	r5, #104	@ 0x68
 800de32:	e7e9      	b.n	800de08 <_fwalk_sglue+0x10>

0800de34 <iprintf>:
 800de34:	b40f      	push	{r0, r1, r2, r3}
 800de36:	b507      	push	{r0, r1, r2, lr}
 800de38:	4906      	ldr	r1, [pc, #24]	@ (800de54 <iprintf+0x20>)
 800de3a:	ab04      	add	r3, sp, #16
 800de3c:	6808      	ldr	r0, [r1, #0]
 800de3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de42:	6881      	ldr	r1, [r0, #8]
 800de44:	9301      	str	r3, [sp, #4]
 800de46:	f000 fa27 	bl	800e298 <_vfiprintf_r>
 800de4a:	b003      	add	sp, #12
 800de4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de50:	b004      	add	sp, #16
 800de52:	4770      	bx	lr
 800de54:	20000038 	.word	0x20000038

0800de58 <__sread>:
 800de58:	b510      	push	{r4, lr}
 800de5a:	460c      	mov	r4, r1
 800de5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de60:	f000 f878 	bl	800df54 <_read_r>
 800de64:	2800      	cmp	r0, #0
 800de66:	bfab      	itete	ge
 800de68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800de6a:	89a3      	ldrhlt	r3, [r4, #12]
 800de6c:	181b      	addge	r3, r3, r0
 800de6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800de72:	bfac      	ite	ge
 800de74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800de76:	81a3      	strhlt	r3, [r4, #12]
 800de78:	bd10      	pop	{r4, pc}

0800de7a <__swrite>:
 800de7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de7e:	461f      	mov	r7, r3
 800de80:	898b      	ldrh	r3, [r1, #12]
 800de82:	05db      	lsls	r3, r3, #23
 800de84:	4605      	mov	r5, r0
 800de86:	460c      	mov	r4, r1
 800de88:	4616      	mov	r6, r2
 800de8a:	d505      	bpl.n	800de98 <__swrite+0x1e>
 800de8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de90:	2302      	movs	r3, #2
 800de92:	2200      	movs	r2, #0
 800de94:	f000 f84c 	bl	800df30 <_lseek_r>
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dea2:	81a3      	strh	r3, [r4, #12]
 800dea4:	4632      	mov	r2, r6
 800dea6:	463b      	mov	r3, r7
 800dea8:	4628      	mov	r0, r5
 800deaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800deae:	f000 b863 	b.w	800df78 <_write_r>

0800deb2 <__sseek>:
 800deb2:	b510      	push	{r4, lr}
 800deb4:	460c      	mov	r4, r1
 800deb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deba:	f000 f839 	bl	800df30 <_lseek_r>
 800debe:	1c43      	adds	r3, r0, #1
 800dec0:	89a3      	ldrh	r3, [r4, #12]
 800dec2:	bf15      	itete	ne
 800dec4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dec6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800deca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dece:	81a3      	strheq	r3, [r4, #12]
 800ded0:	bf18      	it	ne
 800ded2:	81a3      	strhne	r3, [r4, #12]
 800ded4:	bd10      	pop	{r4, pc}

0800ded6 <__sclose>:
 800ded6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deda:	f000 b819 	b.w	800df10 <_close_r>

0800dede <memcmp>:
 800dede:	b510      	push	{r4, lr}
 800dee0:	3901      	subs	r1, #1
 800dee2:	4402      	add	r2, r0
 800dee4:	4290      	cmp	r0, r2
 800dee6:	d101      	bne.n	800deec <memcmp+0xe>
 800dee8:	2000      	movs	r0, #0
 800deea:	e005      	b.n	800def8 <memcmp+0x1a>
 800deec:	7803      	ldrb	r3, [r0, #0]
 800deee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800def2:	42a3      	cmp	r3, r4
 800def4:	d001      	beq.n	800defa <memcmp+0x1c>
 800def6:	1b18      	subs	r0, r3, r4
 800def8:	bd10      	pop	{r4, pc}
 800defa:	3001      	adds	r0, #1
 800defc:	e7f2      	b.n	800dee4 <memcmp+0x6>

0800defe <memset>:
 800defe:	4402      	add	r2, r0
 800df00:	4603      	mov	r3, r0
 800df02:	4293      	cmp	r3, r2
 800df04:	d100      	bne.n	800df08 <memset+0xa>
 800df06:	4770      	bx	lr
 800df08:	f803 1b01 	strb.w	r1, [r3], #1
 800df0c:	e7f9      	b.n	800df02 <memset+0x4>
	...

0800df10 <_close_r>:
 800df10:	b538      	push	{r3, r4, r5, lr}
 800df12:	4d06      	ldr	r5, [pc, #24]	@ (800df2c <_close_r+0x1c>)
 800df14:	2300      	movs	r3, #0
 800df16:	4604      	mov	r4, r0
 800df18:	4608      	mov	r0, r1
 800df1a:	602b      	str	r3, [r5, #0]
 800df1c:	f7f2 fe04 	bl	8000b28 <_close>
 800df20:	1c43      	adds	r3, r0, #1
 800df22:	d102      	bne.n	800df2a <_close_r+0x1a>
 800df24:	682b      	ldr	r3, [r5, #0]
 800df26:	b103      	cbz	r3, 800df2a <_close_r+0x1a>
 800df28:	6023      	str	r3, [r4, #0]
 800df2a:	bd38      	pop	{r3, r4, r5, pc}
 800df2c:	200084e8 	.word	0x200084e8

0800df30 <_lseek_r>:
 800df30:	b538      	push	{r3, r4, r5, lr}
 800df32:	4d07      	ldr	r5, [pc, #28]	@ (800df50 <_lseek_r+0x20>)
 800df34:	4604      	mov	r4, r0
 800df36:	4608      	mov	r0, r1
 800df38:	4611      	mov	r1, r2
 800df3a:	2200      	movs	r2, #0
 800df3c:	602a      	str	r2, [r5, #0]
 800df3e:	461a      	mov	r2, r3
 800df40:	f7f2 fe19 	bl	8000b76 <_lseek>
 800df44:	1c43      	adds	r3, r0, #1
 800df46:	d102      	bne.n	800df4e <_lseek_r+0x1e>
 800df48:	682b      	ldr	r3, [r5, #0]
 800df4a:	b103      	cbz	r3, 800df4e <_lseek_r+0x1e>
 800df4c:	6023      	str	r3, [r4, #0]
 800df4e:	bd38      	pop	{r3, r4, r5, pc}
 800df50:	200084e8 	.word	0x200084e8

0800df54 <_read_r>:
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	4d07      	ldr	r5, [pc, #28]	@ (800df74 <_read_r+0x20>)
 800df58:	4604      	mov	r4, r0
 800df5a:	4608      	mov	r0, r1
 800df5c:	4611      	mov	r1, r2
 800df5e:	2200      	movs	r2, #0
 800df60:	602a      	str	r2, [r5, #0]
 800df62:	461a      	mov	r2, r3
 800df64:	f7f2 fda7 	bl	8000ab6 <_read>
 800df68:	1c43      	adds	r3, r0, #1
 800df6a:	d102      	bne.n	800df72 <_read_r+0x1e>
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	b103      	cbz	r3, 800df72 <_read_r+0x1e>
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	bd38      	pop	{r3, r4, r5, pc}
 800df74:	200084e8 	.word	0x200084e8

0800df78 <_write_r>:
 800df78:	b538      	push	{r3, r4, r5, lr}
 800df7a:	4d07      	ldr	r5, [pc, #28]	@ (800df98 <_write_r+0x20>)
 800df7c:	4604      	mov	r4, r0
 800df7e:	4608      	mov	r0, r1
 800df80:	4611      	mov	r1, r2
 800df82:	2200      	movs	r2, #0
 800df84:	602a      	str	r2, [r5, #0]
 800df86:	461a      	mov	r2, r3
 800df88:	f7f2 fdb2 	bl	8000af0 <_write>
 800df8c:	1c43      	adds	r3, r0, #1
 800df8e:	d102      	bne.n	800df96 <_write_r+0x1e>
 800df90:	682b      	ldr	r3, [r5, #0]
 800df92:	b103      	cbz	r3, 800df96 <_write_r+0x1e>
 800df94:	6023      	str	r3, [r4, #0]
 800df96:	bd38      	pop	{r3, r4, r5, pc}
 800df98:	200084e8 	.word	0x200084e8

0800df9c <__libc_init_array>:
 800df9c:	b570      	push	{r4, r5, r6, lr}
 800df9e:	4d0d      	ldr	r5, [pc, #52]	@ (800dfd4 <__libc_init_array+0x38>)
 800dfa0:	4c0d      	ldr	r4, [pc, #52]	@ (800dfd8 <__libc_init_array+0x3c>)
 800dfa2:	1b64      	subs	r4, r4, r5
 800dfa4:	10a4      	asrs	r4, r4, #2
 800dfa6:	2600      	movs	r6, #0
 800dfa8:	42a6      	cmp	r6, r4
 800dfaa:	d109      	bne.n	800dfc0 <__libc_init_array+0x24>
 800dfac:	4d0b      	ldr	r5, [pc, #44]	@ (800dfdc <__libc_init_array+0x40>)
 800dfae:	4c0c      	ldr	r4, [pc, #48]	@ (800dfe0 <__libc_init_array+0x44>)
 800dfb0:	f000 fe48 	bl	800ec44 <_init>
 800dfb4:	1b64      	subs	r4, r4, r5
 800dfb6:	10a4      	asrs	r4, r4, #2
 800dfb8:	2600      	movs	r6, #0
 800dfba:	42a6      	cmp	r6, r4
 800dfbc:	d105      	bne.n	800dfca <__libc_init_array+0x2e>
 800dfbe:	bd70      	pop	{r4, r5, r6, pc}
 800dfc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfc4:	4798      	blx	r3
 800dfc6:	3601      	adds	r6, #1
 800dfc8:	e7ee      	b.n	800dfa8 <__libc_init_array+0xc>
 800dfca:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfce:	4798      	blx	r3
 800dfd0:	3601      	adds	r6, #1
 800dfd2:	e7f2      	b.n	800dfba <__libc_init_array+0x1e>
 800dfd4:	08011840 	.word	0x08011840
 800dfd8:	08011840 	.word	0x08011840
 800dfdc:	08011840 	.word	0x08011840
 800dfe0:	08011844 	.word	0x08011844

0800dfe4 <__retarget_lock_init_recursive>:
 800dfe4:	4770      	bx	lr

0800dfe6 <__retarget_lock_acquire_recursive>:
 800dfe6:	4770      	bx	lr

0800dfe8 <__retarget_lock_release_recursive>:
 800dfe8:	4770      	bx	lr

0800dfea <memcpy>:
 800dfea:	440a      	add	r2, r1
 800dfec:	4291      	cmp	r1, r2
 800dfee:	f100 33ff 	add.w	r3, r0, #4294967295
 800dff2:	d100      	bne.n	800dff6 <memcpy+0xc>
 800dff4:	4770      	bx	lr
 800dff6:	b510      	push	{r4, lr}
 800dff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e000:	4291      	cmp	r1, r2
 800e002:	d1f9      	bne.n	800dff8 <memcpy+0xe>
 800e004:	bd10      	pop	{r4, pc}
	...

0800e008 <__assert_func>:
 800e008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e00a:	4614      	mov	r4, r2
 800e00c:	461a      	mov	r2, r3
 800e00e:	4b09      	ldr	r3, [pc, #36]	@ (800e034 <__assert_func+0x2c>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4605      	mov	r5, r0
 800e014:	68d8      	ldr	r0, [r3, #12]
 800e016:	b14c      	cbz	r4, 800e02c <__assert_func+0x24>
 800e018:	4b07      	ldr	r3, [pc, #28]	@ (800e038 <__assert_func+0x30>)
 800e01a:	9100      	str	r1, [sp, #0]
 800e01c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e020:	4906      	ldr	r1, [pc, #24]	@ (800e03c <__assert_func+0x34>)
 800e022:	462b      	mov	r3, r5
 800e024:	f000 fc88 	bl	800e938 <fiprintf>
 800e028:	f000 fd3c 	bl	800eaa4 <abort>
 800e02c:	4b04      	ldr	r3, [pc, #16]	@ (800e040 <__assert_func+0x38>)
 800e02e:	461c      	mov	r4, r3
 800e030:	e7f3      	b.n	800e01a <__assert_func+0x12>
 800e032:	bf00      	nop
 800e034:	20000038 	.word	0x20000038
 800e038:	080117c9 	.word	0x080117c9
 800e03c:	080117d6 	.word	0x080117d6
 800e040:	08011804 	.word	0x08011804

0800e044 <_free_r>:
 800e044:	b538      	push	{r3, r4, r5, lr}
 800e046:	4605      	mov	r5, r0
 800e048:	2900      	cmp	r1, #0
 800e04a:	d041      	beq.n	800e0d0 <_free_r+0x8c>
 800e04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e050:	1f0c      	subs	r4, r1, #4
 800e052:	2b00      	cmp	r3, #0
 800e054:	bfb8      	it	lt
 800e056:	18e4      	addlt	r4, r4, r3
 800e058:	f000 f8e8 	bl	800e22c <__malloc_lock>
 800e05c:	4a1d      	ldr	r2, [pc, #116]	@ (800e0d4 <_free_r+0x90>)
 800e05e:	6813      	ldr	r3, [r2, #0]
 800e060:	b933      	cbnz	r3, 800e070 <_free_r+0x2c>
 800e062:	6063      	str	r3, [r4, #4]
 800e064:	6014      	str	r4, [r2, #0]
 800e066:	4628      	mov	r0, r5
 800e068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e06c:	f000 b8e4 	b.w	800e238 <__malloc_unlock>
 800e070:	42a3      	cmp	r3, r4
 800e072:	d908      	bls.n	800e086 <_free_r+0x42>
 800e074:	6820      	ldr	r0, [r4, #0]
 800e076:	1821      	adds	r1, r4, r0
 800e078:	428b      	cmp	r3, r1
 800e07a:	bf01      	itttt	eq
 800e07c:	6819      	ldreq	r1, [r3, #0]
 800e07e:	685b      	ldreq	r3, [r3, #4]
 800e080:	1809      	addeq	r1, r1, r0
 800e082:	6021      	streq	r1, [r4, #0]
 800e084:	e7ed      	b.n	800e062 <_free_r+0x1e>
 800e086:	461a      	mov	r2, r3
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	b10b      	cbz	r3, 800e090 <_free_r+0x4c>
 800e08c:	42a3      	cmp	r3, r4
 800e08e:	d9fa      	bls.n	800e086 <_free_r+0x42>
 800e090:	6811      	ldr	r1, [r2, #0]
 800e092:	1850      	adds	r0, r2, r1
 800e094:	42a0      	cmp	r0, r4
 800e096:	d10b      	bne.n	800e0b0 <_free_r+0x6c>
 800e098:	6820      	ldr	r0, [r4, #0]
 800e09a:	4401      	add	r1, r0
 800e09c:	1850      	adds	r0, r2, r1
 800e09e:	4283      	cmp	r3, r0
 800e0a0:	6011      	str	r1, [r2, #0]
 800e0a2:	d1e0      	bne.n	800e066 <_free_r+0x22>
 800e0a4:	6818      	ldr	r0, [r3, #0]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	6053      	str	r3, [r2, #4]
 800e0aa:	4408      	add	r0, r1
 800e0ac:	6010      	str	r0, [r2, #0]
 800e0ae:	e7da      	b.n	800e066 <_free_r+0x22>
 800e0b0:	d902      	bls.n	800e0b8 <_free_r+0x74>
 800e0b2:	230c      	movs	r3, #12
 800e0b4:	602b      	str	r3, [r5, #0]
 800e0b6:	e7d6      	b.n	800e066 <_free_r+0x22>
 800e0b8:	6820      	ldr	r0, [r4, #0]
 800e0ba:	1821      	adds	r1, r4, r0
 800e0bc:	428b      	cmp	r3, r1
 800e0be:	bf04      	itt	eq
 800e0c0:	6819      	ldreq	r1, [r3, #0]
 800e0c2:	685b      	ldreq	r3, [r3, #4]
 800e0c4:	6063      	str	r3, [r4, #4]
 800e0c6:	bf04      	itt	eq
 800e0c8:	1809      	addeq	r1, r1, r0
 800e0ca:	6021      	streq	r1, [r4, #0]
 800e0cc:	6054      	str	r4, [r2, #4]
 800e0ce:	e7ca      	b.n	800e066 <_free_r+0x22>
 800e0d0:	bd38      	pop	{r3, r4, r5, pc}
 800e0d2:	bf00      	nop
 800e0d4:	200084f4 	.word	0x200084f4

0800e0d8 <malloc>:
 800e0d8:	4b02      	ldr	r3, [pc, #8]	@ (800e0e4 <malloc+0xc>)
 800e0da:	4601      	mov	r1, r0
 800e0dc:	6818      	ldr	r0, [r3, #0]
 800e0de:	f000 b825 	b.w	800e12c <_malloc_r>
 800e0e2:	bf00      	nop
 800e0e4:	20000038 	.word	0x20000038

0800e0e8 <sbrk_aligned>:
 800e0e8:	b570      	push	{r4, r5, r6, lr}
 800e0ea:	4e0f      	ldr	r6, [pc, #60]	@ (800e128 <sbrk_aligned+0x40>)
 800e0ec:	460c      	mov	r4, r1
 800e0ee:	6831      	ldr	r1, [r6, #0]
 800e0f0:	4605      	mov	r5, r0
 800e0f2:	b911      	cbnz	r1, 800e0fa <sbrk_aligned+0x12>
 800e0f4:	f000 fcc6 	bl	800ea84 <_sbrk_r>
 800e0f8:	6030      	str	r0, [r6, #0]
 800e0fa:	4621      	mov	r1, r4
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	f000 fcc1 	bl	800ea84 <_sbrk_r>
 800e102:	1c43      	adds	r3, r0, #1
 800e104:	d103      	bne.n	800e10e <sbrk_aligned+0x26>
 800e106:	f04f 34ff 	mov.w	r4, #4294967295
 800e10a:	4620      	mov	r0, r4
 800e10c:	bd70      	pop	{r4, r5, r6, pc}
 800e10e:	1cc4      	adds	r4, r0, #3
 800e110:	f024 0403 	bic.w	r4, r4, #3
 800e114:	42a0      	cmp	r0, r4
 800e116:	d0f8      	beq.n	800e10a <sbrk_aligned+0x22>
 800e118:	1a21      	subs	r1, r4, r0
 800e11a:	4628      	mov	r0, r5
 800e11c:	f000 fcb2 	bl	800ea84 <_sbrk_r>
 800e120:	3001      	adds	r0, #1
 800e122:	d1f2      	bne.n	800e10a <sbrk_aligned+0x22>
 800e124:	e7ef      	b.n	800e106 <sbrk_aligned+0x1e>
 800e126:	bf00      	nop
 800e128:	200084f0 	.word	0x200084f0

0800e12c <_malloc_r>:
 800e12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e130:	1ccd      	adds	r5, r1, #3
 800e132:	f025 0503 	bic.w	r5, r5, #3
 800e136:	3508      	adds	r5, #8
 800e138:	2d0c      	cmp	r5, #12
 800e13a:	bf38      	it	cc
 800e13c:	250c      	movcc	r5, #12
 800e13e:	2d00      	cmp	r5, #0
 800e140:	4606      	mov	r6, r0
 800e142:	db01      	blt.n	800e148 <_malloc_r+0x1c>
 800e144:	42a9      	cmp	r1, r5
 800e146:	d904      	bls.n	800e152 <_malloc_r+0x26>
 800e148:	230c      	movs	r3, #12
 800e14a:	6033      	str	r3, [r6, #0]
 800e14c:	2000      	movs	r0, #0
 800e14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e228 <_malloc_r+0xfc>
 800e156:	f000 f869 	bl	800e22c <__malloc_lock>
 800e15a:	f8d8 3000 	ldr.w	r3, [r8]
 800e15e:	461c      	mov	r4, r3
 800e160:	bb44      	cbnz	r4, 800e1b4 <_malloc_r+0x88>
 800e162:	4629      	mov	r1, r5
 800e164:	4630      	mov	r0, r6
 800e166:	f7ff ffbf 	bl	800e0e8 <sbrk_aligned>
 800e16a:	1c43      	adds	r3, r0, #1
 800e16c:	4604      	mov	r4, r0
 800e16e:	d158      	bne.n	800e222 <_malloc_r+0xf6>
 800e170:	f8d8 4000 	ldr.w	r4, [r8]
 800e174:	4627      	mov	r7, r4
 800e176:	2f00      	cmp	r7, #0
 800e178:	d143      	bne.n	800e202 <_malloc_r+0xd6>
 800e17a:	2c00      	cmp	r4, #0
 800e17c:	d04b      	beq.n	800e216 <_malloc_r+0xea>
 800e17e:	6823      	ldr	r3, [r4, #0]
 800e180:	4639      	mov	r1, r7
 800e182:	4630      	mov	r0, r6
 800e184:	eb04 0903 	add.w	r9, r4, r3
 800e188:	f000 fc7c 	bl	800ea84 <_sbrk_r>
 800e18c:	4581      	cmp	r9, r0
 800e18e:	d142      	bne.n	800e216 <_malloc_r+0xea>
 800e190:	6821      	ldr	r1, [r4, #0]
 800e192:	1a6d      	subs	r5, r5, r1
 800e194:	4629      	mov	r1, r5
 800e196:	4630      	mov	r0, r6
 800e198:	f7ff ffa6 	bl	800e0e8 <sbrk_aligned>
 800e19c:	3001      	adds	r0, #1
 800e19e:	d03a      	beq.n	800e216 <_malloc_r+0xea>
 800e1a0:	6823      	ldr	r3, [r4, #0]
 800e1a2:	442b      	add	r3, r5
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	f8d8 3000 	ldr.w	r3, [r8]
 800e1aa:	685a      	ldr	r2, [r3, #4]
 800e1ac:	bb62      	cbnz	r2, 800e208 <_malloc_r+0xdc>
 800e1ae:	f8c8 7000 	str.w	r7, [r8]
 800e1b2:	e00f      	b.n	800e1d4 <_malloc_r+0xa8>
 800e1b4:	6822      	ldr	r2, [r4, #0]
 800e1b6:	1b52      	subs	r2, r2, r5
 800e1b8:	d420      	bmi.n	800e1fc <_malloc_r+0xd0>
 800e1ba:	2a0b      	cmp	r2, #11
 800e1bc:	d917      	bls.n	800e1ee <_malloc_r+0xc2>
 800e1be:	1961      	adds	r1, r4, r5
 800e1c0:	42a3      	cmp	r3, r4
 800e1c2:	6025      	str	r5, [r4, #0]
 800e1c4:	bf18      	it	ne
 800e1c6:	6059      	strne	r1, [r3, #4]
 800e1c8:	6863      	ldr	r3, [r4, #4]
 800e1ca:	bf08      	it	eq
 800e1cc:	f8c8 1000 	streq.w	r1, [r8]
 800e1d0:	5162      	str	r2, [r4, r5]
 800e1d2:	604b      	str	r3, [r1, #4]
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	f000 f82f 	bl	800e238 <__malloc_unlock>
 800e1da:	f104 000b 	add.w	r0, r4, #11
 800e1de:	1d23      	adds	r3, r4, #4
 800e1e0:	f020 0007 	bic.w	r0, r0, #7
 800e1e4:	1ac2      	subs	r2, r0, r3
 800e1e6:	bf1c      	itt	ne
 800e1e8:	1a1b      	subne	r3, r3, r0
 800e1ea:	50a3      	strne	r3, [r4, r2]
 800e1ec:	e7af      	b.n	800e14e <_malloc_r+0x22>
 800e1ee:	6862      	ldr	r2, [r4, #4]
 800e1f0:	42a3      	cmp	r3, r4
 800e1f2:	bf0c      	ite	eq
 800e1f4:	f8c8 2000 	streq.w	r2, [r8]
 800e1f8:	605a      	strne	r2, [r3, #4]
 800e1fa:	e7eb      	b.n	800e1d4 <_malloc_r+0xa8>
 800e1fc:	4623      	mov	r3, r4
 800e1fe:	6864      	ldr	r4, [r4, #4]
 800e200:	e7ae      	b.n	800e160 <_malloc_r+0x34>
 800e202:	463c      	mov	r4, r7
 800e204:	687f      	ldr	r7, [r7, #4]
 800e206:	e7b6      	b.n	800e176 <_malloc_r+0x4a>
 800e208:	461a      	mov	r2, r3
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	42a3      	cmp	r3, r4
 800e20e:	d1fb      	bne.n	800e208 <_malloc_r+0xdc>
 800e210:	2300      	movs	r3, #0
 800e212:	6053      	str	r3, [r2, #4]
 800e214:	e7de      	b.n	800e1d4 <_malloc_r+0xa8>
 800e216:	230c      	movs	r3, #12
 800e218:	6033      	str	r3, [r6, #0]
 800e21a:	4630      	mov	r0, r6
 800e21c:	f000 f80c 	bl	800e238 <__malloc_unlock>
 800e220:	e794      	b.n	800e14c <_malloc_r+0x20>
 800e222:	6005      	str	r5, [r0, #0]
 800e224:	e7d6      	b.n	800e1d4 <_malloc_r+0xa8>
 800e226:	bf00      	nop
 800e228:	200084f4 	.word	0x200084f4

0800e22c <__malloc_lock>:
 800e22c:	4801      	ldr	r0, [pc, #4]	@ (800e234 <__malloc_lock+0x8>)
 800e22e:	f7ff beda 	b.w	800dfe6 <__retarget_lock_acquire_recursive>
 800e232:	bf00      	nop
 800e234:	200084ec 	.word	0x200084ec

0800e238 <__malloc_unlock>:
 800e238:	4801      	ldr	r0, [pc, #4]	@ (800e240 <__malloc_unlock+0x8>)
 800e23a:	f7ff bed5 	b.w	800dfe8 <__retarget_lock_release_recursive>
 800e23e:	bf00      	nop
 800e240:	200084ec 	.word	0x200084ec

0800e244 <__sfputc_r>:
 800e244:	6893      	ldr	r3, [r2, #8]
 800e246:	3b01      	subs	r3, #1
 800e248:	2b00      	cmp	r3, #0
 800e24a:	b410      	push	{r4}
 800e24c:	6093      	str	r3, [r2, #8]
 800e24e:	da08      	bge.n	800e262 <__sfputc_r+0x1e>
 800e250:	6994      	ldr	r4, [r2, #24]
 800e252:	42a3      	cmp	r3, r4
 800e254:	db01      	blt.n	800e25a <__sfputc_r+0x16>
 800e256:	290a      	cmp	r1, #10
 800e258:	d103      	bne.n	800e262 <__sfputc_r+0x1e>
 800e25a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e25e:	f000 bb7d 	b.w	800e95c <__swbuf_r>
 800e262:	6813      	ldr	r3, [r2, #0]
 800e264:	1c58      	adds	r0, r3, #1
 800e266:	6010      	str	r0, [r2, #0]
 800e268:	7019      	strb	r1, [r3, #0]
 800e26a:	4608      	mov	r0, r1
 800e26c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <__sfputs_r>:
 800e272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e274:	4606      	mov	r6, r0
 800e276:	460f      	mov	r7, r1
 800e278:	4614      	mov	r4, r2
 800e27a:	18d5      	adds	r5, r2, r3
 800e27c:	42ac      	cmp	r4, r5
 800e27e:	d101      	bne.n	800e284 <__sfputs_r+0x12>
 800e280:	2000      	movs	r0, #0
 800e282:	e007      	b.n	800e294 <__sfputs_r+0x22>
 800e284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e288:	463a      	mov	r2, r7
 800e28a:	4630      	mov	r0, r6
 800e28c:	f7ff ffda 	bl	800e244 <__sfputc_r>
 800e290:	1c43      	adds	r3, r0, #1
 800e292:	d1f3      	bne.n	800e27c <__sfputs_r+0xa>
 800e294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e298 <_vfiprintf_r>:
 800e298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29c:	460d      	mov	r5, r1
 800e29e:	b09d      	sub	sp, #116	@ 0x74
 800e2a0:	4614      	mov	r4, r2
 800e2a2:	4698      	mov	r8, r3
 800e2a4:	4606      	mov	r6, r0
 800e2a6:	b118      	cbz	r0, 800e2b0 <_vfiprintf_r+0x18>
 800e2a8:	6a03      	ldr	r3, [r0, #32]
 800e2aa:	b90b      	cbnz	r3, 800e2b0 <_vfiprintf_r+0x18>
 800e2ac:	f7ff fd8c 	bl	800ddc8 <__sinit>
 800e2b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2b2:	07d9      	lsls	r1, r3, #31
 800e2b4:	d405      	bmi.n	800e2c2 <_vfiprintf_r+0x2a>
 800e2b6:	89ab      	ldrh	r3, [r5, #12]
 800e2b8:	059a      	lsls	r2, r3, #22
 800e2ba:	d402      	bmi.n	800e2c2 <_vfiprintf_r+0x2a>
 800e2bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2be:	f7ff fe92 	bl	800dfe6 <__retarget_lock_acquire_recursive>
 800e2c2:	89ab      	ldrh	r3, [r5, #12]
 800e2c4:	071b      	lsls	r3, r3, #28
 800e2c6:	d501      	bpl.n	800e2cc <_vfiprintf_r+0x34>
 800e2c8:	692b      	ldr	r3, [r5, #16]
 800e2ca:	b99b      	cbnz	r3, 800e2f4 <_vfiprintf_r+0x5c>
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	f000 fb82 	bl	800e9d8 <__swsetup_r>
 800e2d4:	b170      	cbz	r0, 800e2f4 <_vfiprintf_r+0x5c>
 800e2d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2d8:	07dc      	lsls	r4, r3, #31
 800e2da:	d504      	bpl.n	800e2e6 <_vfiprintf_r+0x4e>
 800e2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e0:	b01d      	add	sp, #116	@ 0x74
 800e2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e6:	89ab      	ldrh	r3, [r5, #12]
 800e2e8:	0598      	lsls	r0, r3, #22
 800e2ea:	d4f7      	bmi.n	800e2dc <_vfiprintf_r+0x44>
 800e2ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2ee:	f7ff fe7b 	bl	800dfe8 <__retarget_lock_release_recursive>
 800e2f2:	e7f3      	b.n	800e2dc <_vfiprintf_r+0x44>
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2f8:	2320      	movs	r3, #32
 800e2fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e2fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800e302:	2330      	movs	r3, #48	@ 0x30
 800e304:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e4b4 <_vfiprintf_r+0x21c>
 800e308:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e30c:	f04f 0901 	mov.w	r9, #1
 800e310:	4623      	mov	r3, r4
 800e312:	469a      	mov	sl, r3
 800e314:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e318:	b10a      	cbz	r2, 800e31e <_vfiprintf_r+0x86>
 800e31a:	2a25      	cmp	r2, #37	@ 0x25
 800e31c:	d1f9      	bne.n	800e312 <_vfiprintf_r+0x7a>
 800e31e:	ebba 0b04 	subs.w	fp, sl, r4
 800e322:	d00b      	beq.n	800e33c <_vfiprintf_r+0xa4>
 800e324:	465b      	mov	r3, fp
 800e326:	4622      	mov	r2, r4
 800e328:	4629      	mov	r1, r5
 800e32a:	4630      	mov	r0, r6
 800e32c:	f7ff ffa1 	bl	800e272 <__sfputs_r>
 800e330:	3001      	adds	r0, #1
 800e332:	f000 80a7 	beq.w	800e484 <_vfiprintf_r+0x1ec>
 800e336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e338:	445a      	add	r2, fp
 800e33a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e33c:	f89a 3000 	ldrb.w	r3, [sl]
 800e340:	2b00      	cmp	r3, #0
 800e342:	f000 809f 	beq.w	800e484 <_vfiprintf_r+0x1ec>
 800e346:	2300      	movs	r3, #0
 800e348:	f04f 32ff 	mov.w	r2, #4294967295
 800e34c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e350:	f10a 0a01 	add.w	sl, sl, #1
 800e354:	9304      	str	r3, [sp, #16]
 800e356:	9307      	str	r3, [sp, #28]
 800e358:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e35c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e35e:	4654      	mov	r4, sl
 800e360:	2205      	movs	r2, #5
 800e362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e366:	4853      	ldr	r0, [pc, #332]	@ (800e4b4 <_vfiprintf_r+0x21c>)
 800e368:	f7f1 ff4a 	bl	8000200 <memchr>
 800e36c:	9a04      	ldr	r2, [sp, #16]
 800e36e:	b9d8      	cbnz	r0, 800e3a8 <_vfiprintf_r+0x110>
 800e370:	06d1      	lsls	r1, r2, #27
 800e372:	bf44      	itt	mi
 800e374:	2320      	movmi	r3, #32
 800e376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e37a:	0713      	lsls	r3, r2, #28
 800e37c:	bf44      	itt	mi
 800e37e:	232b      	movmi	r3, #43	@ 0x2b
 800e380:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e384:	f89a 3000 	ldrb.w	r3, [sl]
 800e388:	2b2a      	cmp	r3, #42	@ 0x2a
 800e38a:	d015      	beq.n	800e3b8 <_vfiprintf_r+0x120>
 800e38c:	9a07      	ldr	r2, [sp, #28]
 800e38e:	4654      	mov	r4, sl
 800e390:	2000      	movs	r0, #0
 800e392:	f04f 0c0a 	mov.w	ip, #10
 800e396:	4621      	mov	r1, r4
 800e398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e39c:	3b30      	subs	r3, #48	@ 0x30
 800e39e:	2b09      	cmp	r3, #9
 800e3a0:	d94b      	bls.n	800e43a <_vfiprintf_r+0x1a2>
 800e3a2:	b1b0      	cbz	r0, 800e3d2 <_vfiprintf_r+0x13a>
 800e3a4:	9207      	str	r2, [sp, #28]
 800e3a6:	e014      	b.n	800e3d2 <_vfiprintf_r+0x13a>
 800e3a8:	eba0 0308 	sub.w	r3, r0, r8
 800e3ac:	fa09 f303 	lsl.w	r3, r9, r3
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	9304      	str	r3, [sp, #16]
 800e3b4:	46a2      	mov	sl, r4
 800e3b6:	e7d2      	b.n	800e35e <_vfiprintf_r+0xc6>
 800e3b8:	9b03      	ldr	r3, [sp, #12]
 800e3ba:	1d19      	adds	r1, r3, #4
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	9103      	str	r1, [sp, #12]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	bfbb      	ittet	lt
 800e3c4:	425b      	neglt	r3, r3
 800e3c6:	f042 0202 	orrlt.w	r2, r2, #2
 800e3ca:	9307      	strge	r3, [sp, #28]
 800e3cc:	9307      	strlt	r3, [sp, #28]
 800e3ce:	bfb8      	it	lt
 800e3d0:	9204      	strlt	r2, [sp, #16]
 800e3d2:	7823      	ldrb	r3, [r4, #0]
 800e3d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3d6:	d10a      	bne.n	800e3ee <_vfiprintf_r+0x156>
 800e3d8:	7863      	ldrb	r3, [r4, #1]
 800e3da:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3dc:	d132      	bne.n	800e444 <_vfiprintf_r+0x1ac>
 800e3de:	9b03      	ldr	r3, [sp, #12]
 800e3e0:	1d1a      	adds	r2, r3, #4
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	9203      	str	r2, [sp, #12]
 800e3e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e3ea:	3402      	adds	r4, #2
 800e3ec:	9305      	str	r3, [sp, #20]
 800e3ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e4c4 <_vfiprintf_r+0x22c>
 800e3f2:	7821      	ldrb	r1, [r4, #0]
 800e3f4:	2203      	movs	r2, #3
 800e3f6:	4650      	mov	r0, sl
 800e3f8:	f7f1 ff02 	bl	8000200 <memchr>
 800e3fc:	b138      	cbz	r0, 800e40e <_vfiprintf_r+0x176>
 800e3fe:	9b04      	ldr	r3, [sp, #16]
 800e400:	eba0 000a 	sub.w	r0, r0, sl
 800e404:	2240      	movs	r2, #64	@ 0x40
 800e406:	4082      	lsls	r2, r0
 800e408:	4313      	orrs	r3, r2
 800e40a:	3401      	adds	r4, #1
 800e40c:	9304      	str	r3, [sp, #16]
 800e40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e412:	4829      	ldr	r0, [pc, #164]	@ (800e4b8 <_vfiprintf_r+0x220>)
 800e414:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e418:	2206      	movs	r2, #6
 800e41a:	f7f1 fef1 	bl	8000200 <memchr>
 800e41e:	2800      	cmp	r0, #0
 800e420:	d03f      	beq.n	800e4a2 <_vfiprintf_r+0x20a>
 800e422:	4b26      	ldr	r3, [pc, #152]	@ (800e4bc <_vfiprintf_r+0x224>)
 800e424:	bb1b      	cbnz	r3, 800e46e <_vfiprintf_r+0x1d6>
 800e426:	9b03      	ldr	r3, [sp, #12]
 800e428:	3307      	adds	r3, #7
 800e42a:	f023 0307 	bic.w	r3, r3, #7
 800e42e:	3308      	adds	r3, #8
 800e430:	9303      	str	r3, [sp, #12]
 800e432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e434:	443b      	add	r3, r7
 800e436:	9309      	str	r3, [sp, #36]	@ 0x24
 800e438:	e76a      	b.n	800e310 <_vfiprintf_r+0x78>
 800e43a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e43e:	460c      	mov	r4, r1
 800e440:	2001      	movs	r0, #1
 800e442:	e7a8      	b.n	800e396 <_vfiprintf_r+0xfe>
 800e444:	2300      	movs	r3, #0
 800e446:	3401      	adds	r4, #1
 800e448:	9305      	str	r3, [sp, #20]
 800e44a:	4619      	mov	r1, r3
 800e44c:	f04f 0c0a 	mov.w	ip, #10
 800e450:	4620      	mov	r0, r4
 800e452:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e456:	3a30      	subs	r2, #48	@ 0x30
 800e458:	2a09      	cmp	r2, #9
 800e45a:	d903      	bls.n	800e464 <_vfiprintf_r+0x1cc>
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d0c6      	beq.n	800e3ee <_vfiprintf_r+0x156>
 800e460:	9105      	str	r1, [sp, #20]
 800e462:	e7c4      	b.n	800e3ee <_vfiprintf_r+0x156>
 800e464:	fb0c 2101 	mla	r1, ip, r1, r2
 800e468:	4604      	mov	r4, r0
 800e46a:	2301      	movs	r3, #1
 800e46c:	e7f0      	b.n	800e450 <_vfiprintf_r+0x1b8>
 800e46e:	ab03      	add	r3, sp, #12
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	462a      	mov	r2, r5
 800e474:	4b12      	ldr	r3, [pc, #72]	@ (800e4c0 <_vfiprintf_r+0x228>)
 800e476:	a904      	add	r1, sp, #16
 800e478:	4630      	mov	r0, r6
 800e47a:	f3af 8000 	nop.w
 800e47e:	4607      	mov	r7, r0
 800e480:	1c78      	adds	r0, r7, #1
 800e482:	d1d6      	bne.n	800e432 <_vfiprintf_r+0x19a>
 800e484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e486:	07d9      	lsls	r1, r3, #31
 800e488:	d405      	bmi.n	800e496 <_vfiprintf_r+0x1fe>
 800e48a:	89ab      	ldrh	r3, [r5, #12]
 800e48c:	059a      	lsls	r2, r3, #22
 800e48e:	d402      	bmi.n	800e496 <_vfiprintf_r+0x1fe>
 800e490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e492:	f7ff fda9 	bl	800dfe8 <__retarget_lock_release_recursive>
 800e496:	89ab      	ldrh	r3, [r5, #12]
 800e498:	065b      	lsls	r3, r3, #25
 800e49a:	f53f af1f 	bmi.w	800e2dc <_vfiprintf_r+0x44>
 800e49e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4a0:	e71e      	b.n	800e2e0 <_vfiprintf_r+0x48>
 800e4a2:	ab03      	add	r3, sp, #12
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	462a      	mov	r2, r5
 800e4a8:	4b05      	ldr	r3, [pc, #20]	@ (800e4c0 <_vfiprintf_r+0x228>)
 800e4aa:	a904      	add	r1, sp, #16
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	f000 f879 	bl	800e5a4 <_printf_i>
 800e4b2:	e7e4      	b.n	800e47e <_vfiprintf_r+0x1e6>
 800e4b4:	08011805 	.word	0x08011805
 800e4b8:	0801180f 	.word	0x0801180f
 800e4bc:	00000000 	.word	0x00000000
 800e4c0:	0800e273 	.word	0x0800e273
 800e4c4:	0801180b 	.word	0x0801180b

0800e4c8 <_printf_common>:
 800e4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4cc:	4616      	mov	r6, r2
 800e4ce:	4698      	mov	r8, r3
 800e4d0:	688a      	ldr	r2, [r1, #8]
 800e4d2:	690b      	ldr	r3, [r1, #16]
 800e4d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	bfb8      	it	lt
 800e4dc:	4613      	movlt	r3, r2
 800e4de:	6033      	str	r3, [r6, #0]
 800e4e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	b10a      	cbz	r2, 800e4ee <_printf_common+0x26>
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	6033      	str	r3, [r6, #0]
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	0699      	lsls	r1, r3, #26
 800e4f2:	bf42      	ittt	mi
 800e4f4:	6833      	ldrmi	r3, [r6, #0]
 800e4f6:	3302      	addmi	r3, #2
 800e4f8:	6033      	strmi	r3, [r6, #0]
 800e4fa:	6825      	ldr	r5, [r4, #0]
 800e4fc:	f015 0506 	ands.w	r5, r5, #6
 800e500:	d106      	bne.n	800e510 <_printf_common+0x48>
 800e502:	f104 0a19 	add.w	sl, r4, #25
 800e506:	68e3      	ldr	r3, [r4, #12]
 800e508:	6832      	ldr	r2, [r6, #0]
 800e50a:	1a9b      	subs	r3, r3, r2
 800e50c:	42ab      	cmp	r3, r5
 800e50e:	dc26      	bgt.n	800e55e <_printf_common+0x96>
 800e510:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e514:	6822      	ldr	r2, [r4, #0]
 800e516:	3b00      	subs	r3, #0
 800e518:	bf18      	it	ne
 800e51a:	2301      	movne	r3, #1
 800e51c:	0692      	lsls	r2, r2, #26
 800e51e:	d42b      	bmi.n	800e578 <_printf_common+0xb0>
 800e520:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e524:	4641      	mov	r1, r8
 800e526:	4638      	mov	r0, r7
 800e528:	47c8      	blx	r9
 800e52a:	3001      	adds	r0, #1
 800e52c:	d01e      	beq.n	800e56c <_printf_common+0xa4>
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	6922      	ldr	r2, [r4, #16]
 800e532:	f003 0306 	and.w	r3, r3, #6
 800e536:	2b04      	cmp	r3, #4
 800e538:	bf02      	ittt	eq
 800e53a:	68e5      	ldreq	r5, [r4, #12]
 800e53c:	6833      	ldreq	r3, [r6, #0]
 800e53e:	1aed      	subeq	r5, r5, r3
 800e540:	68a3      	ldr	r3, [r4, #8]
 800e542:	bf0c      	ite	eq
 800e544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e548:	2500      	movne	r5, #0
 800e54a:	4293      	cmp	r3, r2
 800e54c:	bfc4      	itt	gt
 800e54e:	1a9b      	subgt	r3, r3, r2
 800e550:	18ed      	addgt	r5, r5, r3
 800e552:	2600      	movs	r6, #0
 800e554:	341a      	adds	r4, #26
 800e556:	42b5      	cmp	r5, r6
 800e558:	d11a      	bne.n	800e590 <_printf_common+0xc8>
 800e55a:	2000      	movs	r0, #0
 800e55c:	e008      	b.n	800e570 <_printf_common+0xa8>
 800e55e:	2301      	movs	r3, #1
 800e560:	4652      	mov	r2, sl
 800e562:	4641      	mov	r1, r8
 800e564:	4638      	mov	r0, r7
 800e566:	47c8      	blx	r9
 800e568:	3001      	adds	r0, #1
 800e56a:	d103      	bne.n	800e574 <_printf_common+0xac>
 800e56c:	f04f 30ff 	mov.w	r0, #4294967295
 800e570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e574:	3501      	adds	r5, #1
 800e576:	e7c6      	b.n	800e506 <_printf_common+0x3e>
 800e578:	18e1      	adds	r1, r4, r3
 800e57a:	1c5a      	adds	r2, r3, #1
 800e57c:	2030      	movs	r0, #48	@ 0x30
 800e57e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e582:	4422      	add	r2, r4
 800e584:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e588:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e58c:	3302      	adds	r3, #2
 800e58e:	e7c7      	b.n	800e520 <_printf_common+0x58>
 800e590:	2301      	movs	r3, #1
 800e592:	4622      	mov	r2, r4
 800e594:	4641      	mov	r1, r8
 800e596:	4638      	mov	r0, r7
 800e598:	47c8      	blx	r9
 800e59a:	3001      	adds	r0, #1
 800e59c:	d0e6      	beq.n	800e56c <_printf_common+0xa4>
 800e59e:	3601      	adds	r6, #1
 800e5a0:	e7d9      	b.n	800e556 <_printf_common+0x8e>
	...

0800e5a4 <_printf_i>:
 800e5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a8:	7e0f      	ldrb	r7, [r1, #24]
 800e5aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e5ac:	2f78      	cmp	r7, #120	@ 0x78
 800e5ae:	4691      	mov	r9, r2
 800e5b0:	4680      	mov	r8, r0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	469a      	mov	sl, r3
 800e5b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e5ba:	d807      	bhi.n	800e5cc <_printf_i+0x28>
 800e5bc:	2f62      	cmp	r7, #98	@ 0x62
 800e5be:	d80a      	bhi.n	800e5d6 <_printf_i+0x32>
 800e5c0:	2f00      	cmp	r7, #0
 800e5c2:	f000 80d1 	beq.w	800e768 <_printf_i+0x1c4>
 800e5c6:	2f58      	cmp	r7, #88	@ 0x58
 800e5c8:	f000 80b8 	beq.w	800e73c <_printf_i+0x198>
 800e5cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e5d4:	e03a      	b.n	800e64c <_printf_i+0xa8>
 800e5d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e5da:	2b15      	cmp	r3, #21
 800e5dc:	d8f6      	bhi.n	800e5cc <_printf_i+0x28>
 800e5de:	a101      	add	r1, pc, #4	@ (adr r1, 800e5e4 <_printf_i+0x40>)
 800e5e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5e4:	0800e63d 	.word	0x0800e63d
 800e5e8:	0800e651 	.word	0x0800e651
 800e5ec:	0800e5cd 	.word	0x0800e5cd
 800e5f0:	0800e5cd 	.word	0x0800e5cd
 800e5f4:	0800e5cd 	.word	0x0800e5cd
 800e5f8:	0800e5cd 	.word	0x0800e5cd
 800e5fc:	0800e651 	.word	0x0800e651
 800e600:	0800e5cd 	.word	0x0800e5cd
 800e604:	0800e5cd 	.word	0x0800e5cd
 800e608:	0800e5cd 	.word	0x0800e5cd
 800e60c:	0800e5cd 	.word	0x0800e5cd
 800e610:	0800e74f 	.word	0x0800e74f
 800e614:	0800e67b 	.word	0x0800e67b
 800e618:	0800e709 	.word	0x0800e709
 800e61c:	0800e5cd 	.word	0x0800e5cd
 800e620:	0800e5cd 	.word	0x0800e5cd
 800e624:	0800e771 	.word	0x0800e771
 800e628:	0800e5cd 	.word	0x0800e5cd
 800e62c:	0800e67b 	.word	0x0800e67b
 800e630:	0800e5cd 	.word	0x0800e5cd
 800e634:	0800e5cd 	.word	0x0800e5cd
 800e638:	0800e711 	.word	0x0800e711
 800e63c:	6833      	ldr	r3, [r6, #0]
 800e63e:	1d1a      	adds	r2, r3, #4
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	6032      	str	r2, [r6, #0]
 800e644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e648:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e64c:	2301      	movs	r3, #1
 800e64e:	e09c      	b.n	800e78a <_printf_i+0x1e6>
 800e650:	6833      	ldr	r3, [r6, #0]
 800e652:	6820      	ldr	r0, [r4, #0]
 800e654:	1d19      	adds	r1, r3, #4
 800e656:	6031      	str	r1, [r6, #0]
 800e658:	0606      	lsls	r6, r0, #24
 800e65a:	d501      	bpl.n	800e660 <_printf_i+0xbc>
 800e65c:	681d      	ldr	r5, [r3, #0]
 800e65e:	e003      	b.n	800e668 <_printf_i+0xc4>
 800e660:	0645      	lsls	r5, r0, #25
 800e662:	d5fb      	bpl.n	800e65c <_printf_i+0xb8>
 800e664:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e668:	2d00      	cmp	r5, #0
 800e66a:	da03      	bge.n	800e674 <_printf_i+0xd0>
 800e66c:	232d      	movs	r3, #45	@ 0x2d
 800e66e:	426d      	negs	r5, r5
 800e670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e674:	4858      	ldr	r0, [pc, #352]	@ (800e7d8 <_printf_i+0x234>)
 800e676:	230a      	movs	r3, #10
 800e678:	e011      	b.n	800e69e <_printf_i+0xfa>
 800e67a:	6821      	ldr	r1, [r4, #0]
 800e67c:	6833      	ldr	r3, [r6, #0]
 800e67e:	0608      	lsls	r0, r1, #24
 800e680:	f853 5b04 	ldr.w	r5, [r3], #4
 800e684:	d402      	bmi.n	800e68c <_printf_i+0xe8>
 800e686:	0649      	lsls	r1, r1, #25
 800e688:	bf48      	it	mi
 800e68a:	b2ad      	uxthmi	r5, r5
 800e68c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e68e:	4852      	ldr	r0, [pc, #328]	@ (800e7d8 <_printf_i+0x234>)
 800e690:	6033      	str	r3, [r6, #0]
 800e692:	bf14      	ite	ne
 800e694:	230a      	movne	r3, #10
 800e696:	2308      	moveq	r3, #8
 800e698:	2100      	movs	r1, #0
 800e69a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e69e:	6866      	ldr	r6, [r4, #4]
 800e6a0:	60a6      	str	r6, [r4, #8]
 800e6a2:	2e00      	cmp	r6, #0
 800e6a4:	db05      	blt.n	800e6b2 <_printf_i+0x10e>
 800e6a6:	6821      	ldr	r1, [r4, #0]
 800e6a8:	432e      	orrs	r6, r5
 800e6aa:	f021 0104 	bic.w	r1, r1, #4
 800e6ae:	6021      	str	r1, [r4, #0]
 800e6b0:	d04b      	beq.n	800e74a <_printf_i+0x1a6>
 800e6b2:	4616      	mov	r6, r2
 800e6b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800e6b8:	fb03 5711 	mls	r7, r3, r1, r5
 800e6bc:	5dc7      	ldrb	r7, [r0, r7]
 800e6be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e6c2:	462f      	mov	r7, r5
 800e6c4:	42bb      	cmp	r3, r7
 800e6c6:	460d      	mov	r5, r1
 800e6c8:	d9f4      	bls.n	800e6b4 <_printf_i+0x110>
 800e6ca:	2b08      	cmp	r3, #8
 800e6cc:	d10b      	bne.n	800e6e6 <_printf_i+0x142>
 800e6ce:	6823      	ldr	r3, [r4, #0]
 800e6d0:	07df      	lsls	r7, r3, #31
 800e6d2:	d508      	bpl.n	800e6e6 <_printf_i+0x142>
 800e6d4:	6923      	ldr	r3, [r4, #16]
 800e6d6:	6861      	ldr	r1, [r4, #4]
 800e6d8:	4299      	cmp	r1, r3
 800e6da:	bfde      	ittt	le
 800e6dc:	2330      	movle	r3, #48	@ 0x30
 800e6de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e6e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e6e6:	1b92      	subs	r2, r2, r6
 800e6e8:	6122      	str	r2, [r4, #16]
 800e6ea:	f8cd a000 	str.w	sl, [sp]
 800e6ee:	464b      	mov	r3, r9
 800e6f0:	aa03      	add	r2, sp, #12
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	4640      	mov	r0, r8
 800e6f6:	f7ff fee7 	bl	800e4c8 <_printf_common>
 800e6fa:	3001      	adds	r0, #1
 800e6fc:	d14a      	bne.n	800e794 <_printf_i+0x1f0>
 800e6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e702:	b004      	add	sp, #16
 800e704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e708:	6823      	ldr	r3, [r4, #0]
 800e70a:	f043 0320 	orr.w	r3, r3, #32
 800e70e:	6023      	str	r3, [r4, #0]
 800e710:	4832      	ldr	r0, [pc, #200]	@ (800e7dc <_printf_i+0x238>)
 800e712:	2778      	movs	r7, #120	@ 0x78
 800e714:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e718:	6823      	ldr	r3, [r4, #0]
 800e71a:	6831      	ldr	r1, [r6, #0]
 800e71c:	061f      	lsls	r7, r3, #24
 800e71e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e722:	d402      	bmi.n	800e72a <_printf_i+0x186>
 800e724:	065f      	lsls	r7, r3, #25
 800e726:	bf48      	it	mi
 800e728:	b2ad      	uxthmi	r5, r5
 800e72a:	6031      	str	r1, [r6, #0]
 800e72c:	07d9      	lsls	r1, r3, #31
 800e72e:	bf44      	itt	mi
 800e730:	f043 0320 	orrmi.w	r3, r3, #32
 800e734:	6023      	strmi	r3, [r4, #0]
 800e736:	b11d      	cbz	r5, 800e740 <_printf_i+0x19c>
 800e738:	2310      	movs	r3, #16
 800e73a:	e7ad      	b.n	800e698 <_printf_i+0xf4>
 800e73c:	4826      	ldr	r0, [pc, #152]	@ (800e7d8 <_printf_i+0x234>)
 800e73e:	e7e9      	b.n	800e714 <_printf_i+0x170>
 800e740:	6823      	ldr	r3, [r4, #0]
 800e742:	f023 0320 	bic.w	r3, r3, #32
 800e746:	6023      	str	r3, [r4, #0]
 800e748:	e7f6      	b.n	800e738 <_printf_i+0x194>
 800e74a:	4616      	mov	r6, r2
 800e74c:	e7bd      	b.n	800e6ca <_printf_i+0x126>
 800e74e:	6833      	ldr	r3, [r6, #0]
 800e750:	6825      	ldr	r5, [r4, #0]
 800e752:	6961      	ldr	r1, [r4, #20]
 800e754:	1d18      	adds	r0, r3, #4
 800e756:	6030      	str	r0, [r6, #0]
 800e758:	062e      	lsls	r6, r5, #24
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	d501      	bpl.n	800e762 <_printf_i+0x1be>
 800e75e:	6019      	str	r1, [r3, #0]
 800e760:	e002      	b.n	800e768 <_printf_i+0x1c4>
 800e762:	0668      	lsls	r0, r5, #25
 800e764:	d5fb      	bpl.n	800e75e <_printf_i+0x1ba>
 800e766:	8019      	strh	r1, [r3, #0]
 800e768:	2300      	movs	r3, #0
 800e76a:	6123      	str	r3, [r4, #16]
 800e76c:	4616      	mov	r6, r2
 800e76e:	e7bc      	b.n	800e6ea <_printf_i+0x146>
 800e770:	6833      	ldr	r3, [r6, #0]
 800e772:	1d1a      	adds	r2, r3, #4
 800e774:	6032      	str	r2, [r6, #0]
 800e776:	681e      	ldr	r6, [r3, #0]
 800e778:	6862      	ldr	r2, [r4, #4]
 800e77a:	2100      	movs	r1, #0
 800e77c:	4630      	mov	r0, r6
 800e77e:	f7f1 fd3f 	bl	8000200 <memchr>
 800e782:	b108      	cbz	r0, 800e788 <_printf_i+0x1e4>
 800e784:	1b80      	subs	r0, r0, r6
 800e786:	6060      	str	r0, [r4, #4]
 800e788:	6863      	ldr	r3, [r4, #4]
 800e78a:	6123      	str	r3, [r4, #16]
 800e78c:	2300      	movs	r3, #0
 800e78e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e792:	e7aa      	b.n	800e6ea <_printf_i+0x146>
 800e794:	6923      	ldr	r3, [r4, #16]
 800e796:	4632      	mov	r2, r6
 800e798:	4649      	mov	r1, r9
 800e79a:	4640      	mov	r0, r8
 800e79c:	47d0      	blx	sl
 800e79e:	3001      	adds	r0, #1
 800e7a0:	d0ad      	beq.n	800e6fe <_printf_i+0x15a>
 800e7a2:	6823      	ldr	r3, [r4, #0]
 800e7a4:	079b      	lsls	r3, r3, #30
 800e7a6:	d413      	bmi.n	800e7d0 <_printf_i+0x22c>
 800e7a8:	68e0      	ldr	r0, [r4, #12]
 800e7aa:	9b03      	ldr	r3, [sp, #12]
 800e7ac:	4298      	cmp	r0, r3
 800e7ae:	bfb8      	it	lt
 800e7b0:	4618      	movlt	r0, r3
 800e7b2:	e7a6      	b.n	800e702 <_printf_i+0x15e>
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	4632      	mov	r2, r6
 800e7b8:	4649      	mov	r1, r9
 800e7ba:	4640      	mov	r0, r8
 800e7bc:	47d0      	blx	sl
 800e7be:	3001      	adds	r0, #1
 800e7c0:	d09d      	beq.n	800e6fe <_printf_i+0x15a>
 800e7c2:	3501      	adds	r5, #1
 800e7c4:	68e3      	ldr	r3, [r4, #12]
 800e7c6:	9903      	ldr	r1, [sp, #12]
 800e7c8:	1a5b      	subs	r3, r3, r1
 800e7ca:	42ab      	cmp	r3, r5
 800e7cc:	dcf2      	bgt.n	800e7b4 <_printf_i+0x210>
 800e7ce:	e7eb      	b.n	800e7a8 <_printf_i+0x204>
 800e7d0:	2500      	movs	r5, #0
 800e7d2:	f104 0619 	add.w	r6, r4, #25
 800e7d6:	e7f5      	b.n	800e7c4 <_printf_i+0x220>
 800e7d8:	08011816 	.word	0x08011816
 800e7dc:	08011827 	.word	0x08011827

0800e7e0 <__sflush_r>:
 800e7e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	0716      	lsls	r6, r2, #28
 800e7ea:	4605      	mov	r5, r0
 800e7ec:	460c      	mov	r4, r1
 800e7ee:	d454      	bmi.n	800e89a <__sflush_r+0xba>
 800e7f0:	684b      	ldr	r3, [r1, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	dc02      	bgt.n	800e7fc <__sflush_r+0x1c>
 800e7f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	dd48      	ble.n	800e88e <__sflush_r+0xae>
 800e7fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7fe:	2e00      	cmp	r6, #0
 800e800:	d045      	beq.n	800e88e <__sflush_r+0xae>
 800e802:	2300      	movs	r3, #0
 800e804:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e808:	682f      	ldr	r7, [r5, #0]
 800e80a:	6a21      	ldr	r1, [r4, #32]
 800e80c:	602b      	str	r3, [r5, #0]
 800e80e:	d030      	beq.n	800e872 <__sflush_r+0x92>
 800e810:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e812:	89a3      	ldrh	r3, [r4, #12]
 800e814:	0759      	lsls	r1, r3, #29
 800e816:	d505      	bpl.n	800e824 <__sflush_r+0x44>
 800e818:	6863      	ldr	r3, [r4, #4]
 800e81a:	1ad2      	subs	r2, r2, r3
 800e81c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e81e:	b10b      	cbz	r3, 800e824 <__sflush_r+0x44>
 800e820:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e822:	1ad2      	subs	r2, r2, r3
 800e824:	2300      	movs	r3, #0
 800e826:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e828:	6a21      	ldr	r1, [r4, #32]
 800e82a:	4628      	mov	r0, r5
 800e82c:	47b0      	blx	r6
 800e82e:	1c43      	adds	r3, r0, #1
 800e830:	89a3      	ldrh	r3, [r4, #12]
 800e832:	d106      	bne.n	800e842 <__sflush_r+0x62>
 800e834:	6829      	ldr	r1, [r5, #0]
 800e836:	291d      	cmp	r1, #29
 800e838:	d82b      	bhi.n	800e892 <__sflush_r+0xb2>
 800e83a:	4a2a      	ldr	r2, [pc, #168]	@ (800e8e4 <__sflush_r+0x104>)
 800e83c:	40ca      	lsrs	r2, r1
 800e83e:	07d6      	lsls	r6, r2, #31
 800e840:	d527      	bpl.n	800e892 <__sflush_r+0xb2>
 800e842:	2200      	movs	r2, #0
 800e844:	6062      	str	r2, [r4, #4]
 800e846:	04d9      	lsls	r1, r3, #19
 800e848:	6922      	ldr	r2, [r4, #16]
 800e84a:	6022      	str	r2, [r4, #0]
 800e84c:	d504      	bpl.n	800e858 <__sflush_r+0x78>
 800e84e:	1c42      	adds	r2, r0, #1
 800e850:	d101      	bne.n	800e856 <__sflush_r+0x76>
 800e852:	682b      	ldr	r3, [r5, #0]
 800e854:	b903      	cbnz	r3, 800e858 <__sflush_r+0x78>
 800e856:	6560      	str	r0, [r4, #84]	@ 0x54
 800e858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e85a:	602f      	str	r7, [r5, #0]
 800e85c:	b1b9      	cbz	r1, 800e88e <__sflush_r+0xae>
 800e85e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e862:	4299      	cmp	r1, r3
 800e864:	d002      	beq.n	800e86c <__sflush_r+0x8c>
 800e866:	4628      	mov	r0, r5
 800e868:	f7ff fbec 	bl	800e044 <_free_r>
 800e86c:	2300      	movs	r3, #0
 800e86e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e870:	e00d      	b.n	800e88e <__sflush_r+0xae>
 800e872:	2301      	movs	r3, #1
 800e874:	4628      	mov	r0, r5
 800e876:	47b0      	blx	r6
 800e878:	4602      	mov	r2, r0
 800e87a:	1c50      	adds	r0, r2, #1
 800e87c:	d1c9      	bne.n	800e812 <__sflush_r+0x32>
 800e87e:	682b      	ldr	r3, [r5, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d0c6      	beq.n	800e812 <__sflush_r+0x32>
 800e884:	2b1d      	cmp	r3, #29
 800e886:	d001      	beq.n	800e88c <__sflush_r+0xac>
 800e888:	2b16      	cmp	r3, #22
 800e88a:	d11e      	bne.n	800e8ca <__sflush_r+0xea>
 800e88c:	602f      	str	r7, [r5, #0]
 800e88e:	2000      	movs	r0, #0
 800e890:	e022      	b.n	800e8d8 <__sflush_r+0xf8>
 800e892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e896:	b21b      	sxth	r3, r3
 800e898:	e01b      	b.n	800e8d2 <__sflush_r+0xf2>
 800e89a:	690f      	ldr	r7, [r1, #16]
 800e89c:	2f00      	cmp	r7, #0
 800e89e:	d0f6      	beq.n	800e88e <__sflush_r+0xae>
 800e8a0:	0793      	lsls	r3, r2, #30
 800e8a2:	680e      	ldr	r6, [r1, #0]
 800e8a4:	bf08      	it	eq
 800e8a6:	694b      	ldreq	r3, [r1, #20]
 800e8a8:	600f      	str	r7, [r1, #0]
 800e8aa:	bf18      	it	ne
 800e8ac:	2300      	movne	r3, #0
 800e8ae:	eba6 0807 	sub.w	r8, r6, r7
 800e8b2:	608b      	str	r3, [r1, #8]
 800e8b4:	f1b8 0f00 	cmp.w	r8, #0
 800e8b8:	dde9      	ble.n	800e88e <__sflush_r+0xae>
 800e8ba:	6a21      	ldr	r1, [r4, #32]
 800e8bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e8be:	4643      	mov	r3, r8
 800e8c0:	463a      	mov	r2, r7
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	47b0      	blx	r6
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	dc08      	bgt.n	800e8dc <__sflush_r+0xfc>
 800e8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8d2:	81a3      	strh	r3, [r4, #12]
 800e8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8dc:	4407      	add	r7, r0
 800e8de:	eba8 0800 	sub.w	r8, r8, r0
 800e8e2:	e7e7      	b.n	800e8b4 <__sflush_r+0xd4>
 800e8e4:	20400001 	.word	0x20400001

0800e8e8 <_fflush_r>:
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	690b      	ldr	r3, [r1, #16]
 800e8ec:	4605      	mov	r5, r0
 800e8ee:	460c      	mov	r4, r1
 800e8f0:	b913      	cbnz	r3, 800e8f8 <_fflush_r+0x10>
 800e8f2:	2500      	movs	r5, #0
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	bd38      	pop	{r3, r4, r5, pc}
 800e8f8:	b118      	cbz	r0, 800e902 <_fflush_r+0x1a>
 800e8fa:	6a03      	ldr	r3, [r0, #32]
 800e8fc:	b90b      	cbnz	r3, 800e902 <_fflush_r+0x1a>
 800e8fe:	f7ff fa63 	bl	800ddc8 <__sinit>
 800e902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d0f3      	beq.n	800e8f2 <_fflush_r+0xa>
 800e90a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e90c:	07d0      	lsls	r0, r2, #31
 800e90e:	d404      	bmi.n	800e91a <_fflush_r+0x32>
 800e910:	0599      	lsls	r1, r3, #22
 800e912:	d402      	bmi.n	800e91a <_fflush_r+0x32>
 800e914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e916:	f7ff fb66 	bl	800dfe6 <__retarget_lock_acquire_recursive>
 800e91a:	4628      	mov	r0, r5
 800e91c:	4621      	mov	r1, r4
 800e91e:	f7ff ff5f 	bl	800e7e0 <__sflush_r>
 800e922:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e924:	07da      	lsls	r2, r3, #31
 800e926:	4605      	mov	r5, r0
 800e928:	d4e4      	bmi.n	800e8f4 <_fflush_r+0xc>
 800e92a:	89a3      	ldrh	r3, [r4, #12]
 800e92c:	059b      	lsls	r3, r3, #22
 800e92e:	d4e1      	bmi.n	800e8f4 <_fflush_r+0xc>
 800e930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e932:	f7ff fb59 	bl	800dfe8 <__retarget_lock_release_recursive>
 800e936:	e7dd      	b.n	800e8f4 <_fflush_r+0xc>

0800e938 <fiprintf>:
 800e938:	b40e      	push	{r1, r2, r3}
 800e93a:	b503      	push	{r0, r1, lr}
 800e93c:	4601      	mov	r1, r0
 800e93e:	ab03      	add	r3, sp, #12
 800e940:	4805      	ldr	r0, [pc, #20]	@ (800e958 <fiprintf+0x20>)
 800e942:	f853 2b04 	ldr.w	r2, [r3], #4
 800e946:	6800      	ldr	r0, [r0, #0]
 800e948:	9301      	str	r3, [sp, #4]
 800e94a:	f7ff fca5 	bl	800e298 <_vfiprintf_r>
 800e94e:	b002      	add	sp, #8
 800e950:	f85d eb04 	ldr.w	lr, [sp], #4
 800e954:	b003      	add	sp, #12
 800e956:	4770      	bx	lr
 800e958:	20000038 	.word	0x20000038

0800e95c <__swbuf_r>:
 800e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95e:	460e      	mov	r6, r1
 800e960:	4614      	mov	r4, r2
 800e962:	4605      	mov	r5, r0
 800e964:	b118      	cbz	r0, 800e96e <__swbuf_r+0x12>
 800e966:	6a03      	ldr	r3, [r0, #32]
 800e968:	b90b      	cbnz	r3, 800e96e <__swbuf_r+0x12>
 800e96a:	f7ff fa2d 	bl	800ddc8 <__sinit>
 800e96e:	69a3      	ldr	r3, [r4, #24]
 800e970:	60a3      	str	r3, [r4, #8]
 800e972:	89a3      	ldrh	r3, [r4, #12]
 800e974:	071a      	lsls	r2, r3, #28
 800e976:	d501      	bpl.n	800e97c <__swbuf_r+0x20>
 800e978:	6923      	ldr	r3, [r4, #16]
 800e97a:	b943      	cbnz	r3, 800e98e <__swbuf_r+0x32>
 800e97c:	4621      	mov	r1, r4
 800e97e:	4628      	mov	r0, r5
 800e980:	f000 f82a 	bl	800e9d8 <__swsetup_r>
 800e984:	b118      	cbz	r0, 800e98e <__swbuf_r+0x32>
 800e986:	f04f 37ff 	mov.w	r7, #4294967295
 800e98a:	4638      	mov	r0, r7
 800e98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e98e:	6823      	ldr	r3, [r4, #0]
 800e990:	6922      	ldr	r2, [r4, #16]
 800e992:	1a98      	subs	r0, r3, r2
 800e994:	6963      	ldr	r3, [r4, #20]
 800e996:	b2f6      	uxtb	r6, r6
 800e998:	4283      	cmp	r3, r0
 800e99a:	4637      	mov	r7, r6
 800e99c:	dc05      	bgt.n	800e9aa <__swbuf_r+0x4e>
 800e99e:	4621      	mov	r1, r4
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	f7ff ffa1 	bl	800e8e8 <_fflush_r>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d1ed      	bne.n	800e986 <__swbuf_r+0x2a>
 800e9aa:	68a3      	ldr	r3, [r4, #8]
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	60a3      	str	r3, [r4, #8]
 800e9b0:	6823      	ldr	r3, [r4, #0]
 800e9b2:	1c5a      	adds	r2, r3, #1
 800e9b4:	6022      	str	r2, [r4, #0]
 800e9b6:	701e      	strb	r6, [r3, #0]
 800e9b8:	6962      	ldr	r2, [r4, #20]
 800e9ba:	1c43      	adds	r3, r0, #1
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d004      	beq.n	800e9ca <__swbuf_r+0x6e>
 800e9c0:	89a3      	ldrh	r3, [r4, #12]
 800e9c2:	07db      	lsls	r3, r3, #31
 800e9c4:	d5e1      	bpl.n	800e98a <__swbuf_r+0x2e>
 800e9c6:	2e0a      	cmp	r6, #10
 800e9c8:	d1df      	bne.n	800e98a <__swbuf_r+0x2e>
 800e9ca:	4621      	mov	r1, r4
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	f7ff ff8b 	bl	800e8e8 <_fflush_r>
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d0d9      	beq.n	800e98a <__swbuf_r+0x2e>
 800e9d6:	e7d6      	b.n	800e986 <__swbuf_r+0x2a>

0800e9d8 <__swsetup_r>:
 800e9d8:	b538      	push	{r3, r4, r5, lr}
 800e9da:	4b29      	ldr	r3, [pc, #164]	@ (800ea80 <__swsetup_r+0xa8>)
 800e9dc:	4605      	mov	r5, r0
 800e9de:	6818      	ldr	r0, [r3, #0]
 800e9e0:	460c      	mov	r4, r1
 800e9e2:	b118      	cbz	r0, 800e9ec <__swsetup_r+0x14>
 800e9e4:	6a03      	ldr	r3, [r0, #32]
 800e9e6:	b90b      	cbnz	r3, 800e9ec <__swsetup_r+0x14>
 800e9e8:	f7ff f9ee 	bl	800ddc8 <__sinit>
 800e9ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9f0:	0719      	lsls	r1, r3, #28
 800e9f2:	d422      	bmi.n	800ea3a <__swsetup_r+0x62>
 800e9f4:	06da      	lsls	r2, r3, #27
 800e9f6:	d407      	bmi.n	800ea08 <__swsetup_r+0x30>
 800e9f8:	2209      	movs	r2, #9
 800e9fa:	602a      	str	r2, [r5, #0]
 800e9fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea00:	81a3      	strh	r3, [r4, #12]
 800ea02:	f04f 30ff 	mov.w	r0, #4294967295
 800ea06:	e033      	b.n	800ea70 <__swsetup_r+0x98>
 800ea08:	0758      	lsls	r0, r3, #29
 800ea0a:	d512      	bpl.n	800ea32 <__swsetup_r+0x5a>
 800ea0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea0e:	b141      	cbz	r1, 800ea22 <__swsetup_r+0x4a>
 800ea10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea14:	4299      	cmp	r1, r3
 800ea16:	d002      	beq.n	800ea1e <__swsetup_r+0x46>
 800ea18:	4628      	mov	r0, r5
 800ea1a:	f7ff fb13 	bl	800e044 <_free_r>
 800ea1e:	2300      	movs	r3, #0
 800ea20:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ea28:	81a3      	strh	r3, [r4, #12]
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	6063      	str	r3, [r4, #4]
 800ea2e:	6923      	ldr	r3, [r4, #16]
 800ea30:	6023      	str	r3, [r4, #0]
 800ea32:	89a3      	ldrh	r3, [r4, #12]
 800ea34:	f043 0308 	orr.w	r3, r3, #8
 800ea38:	81a3      	strh	r3, [r4, #12]
 800ea3a:	6923      	ldr	r3, [r4, #16]
 800ea3c:	b94b      	cbnz	r3, 800ea52 <__swsetup_r+0x7a>
 800ea3e:	89a3      	ldrh	r3, [r4, #12]
 800ea40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ea44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea48:	d003      	beq.n	800ea52 <__swsetup_r+0x7a>
 800ea4a:	4621      	mov	r1, r4
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	f000 f856 	bl	800eafe <__smakebuf_r>
 800ea52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea56:	f013 0201 	ands.w	r2, r3, #1
 800ea5a:	d00a      	beq.n	800ea72 <__swsetup_r+0x9a>
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	60a2      	str	r2, [r4, #8]
 800ea60:	6962      	ldr	r2, [r4, #20]
 800ea62:	4252      	negs	r2, r2
 800ea64:	61a2      	str	r2, [r4, #24]
 800ea66:	6922      	ldr	r2, [r4, #16]
 800ea68:	b942      	cbnz	r2, 800ea7c <__swsetup_r+0xa4>
 800ea6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ea6e:	d1c5      	bne.n	800e9fc <__swsetup_r+0x24>
 800ea70:	bd38      	pop	{r3, r4, r5, pc}
 800ea72:	0799      	lsls	r1, r3, #30
 800ea74:	bf58      	it	pl
 800ea76:	6962      	ldrpl	r2, [r4, #20]
 800ea78:	60a2      	str	r2, [r4, #8]
 800ea7a:	e7f4      	b.n	800ea66 <__swsetup_r+0x8e>
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	e7f7      	b.n	800ea70 <__swsetup_r+0x98>
 800ea80:	20000038 	.word	0x20000038

0800ea84 <_sbrk_r>:
 800ea84:	b538      	push	{r3, r4, r5, lr}
 800ea86:	4d06      	ldr	r5, [pc, #24]	@ (800eaa0 <_sbrk_r+0x1c>)
 800ea88:	2300      	movs	r3, #0
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	4608      	mov	r0, r1
 800ea8e:	602b      	str	r3, [r5, #0]
 800ea90:	f7f2 f87e 	bl	8000b90 <_sbrk>
 800ea94:	1c43      	adds	r3, r0, #1
 800ea96:	d102      	bne.n	800ea9e <_sbrk_r+0x1a>
 800ea98:	682b      	ldr	r3, [r5, #0]
 800ea9a:	b103      	cbz	r3, 800ea9e <_sbrk_r+0x1a>
 800ea9c:	6023      	str	r3, [r4, #0]
 800ea9e:	bd38      	pop	{r3, r4, r5, pc}
 800eaa0:	200084e8 	.word	0x200084e8

0800eaa4 <abort>:
 800eaa4:	b508      	push	{r3, lr}
 800eaa6:	2006      	movs	r0, #6
 800eaa8:	f000 f88e 	bl	800ebc8 <raise>
 800eaac:	2001      	movs	r0, #1
 800eaae:	f7f1 fff7 	bl	8000aa0 <_exit>

0800eab2 <__swhatbuf_r>:
 800eab2:	b570      	push	{r4, r5, r6, lr}
 800eab4:	460c      	mov	r4, r1
 800eab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaba:	2900      	cmp	r1, #0
 800eabc:	b096      	sub	sp, #88	@ 0x58
 800eabe:	4615      	mov	r5, r2
 800eac0:	461e      	mov	r6, r3
 800eac2:	da0d      	bge.n	800eae0 <__swhatbuf_r+0x2e>
 800eac4:	89a3      	ldrh	r3, [r4, #12]
 800eac6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eaca:	f04f 0100 	mov.w	r1, #0
 800eace:	bf14      	ite	ne
 800ead0:	2340      	movne	r3, #64	@ 0x40
 800ead2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ead6:	2000      	movs	r0, #0
 800ead8:	6031      	str	r1, [r6, #0]
 800eada:	602b      	str	r3, [r5, #0]
 800eadc:	b016      	add	sp, #88	@ 0x58
 800eade:	bd70      	pop	{r4, r5, r6, pc}
 800eae0:	466a      	mov	r2, sp
 800eae2:	f000 f879 	bl	800ebd8 <_fstat_r>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	dbec      	blt.n	800eac4 <__swhatbuf_r+0x12>
 800eaea:	9901      	ldr	r1, [sp, #4]
 800eaec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eaf0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eaf4:	4259      	negs	r1, r3
 800eaf6:	4159      	adcs	r1, r3
 800eaf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eafc:	e7eb      	b.n	800ead6 <__swhatbuf_r+0x24>

0800eafe <__smakebuf_r>:
 800eafe:	898b      	ldrh	r3, [r1, #12]
 800eb00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb02:	079d      	lsls	r5, r3, #30
 800eb04:	4606      	mov	r6, r0
 800eb06:	460c      	mov	r4, r1
 800eb08:	d507      	bpl.n	800eb1a <__smakebuf_r+0x1c>
 800eb0a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eb0e:	6023      	str	r3, [r4, #0]
 800eb10:	6123      	str	r3, [r4, #16]
 800eb12:	2301      	movs	r3, #1
 800eb14:	6163      	str	r3, [r4, #20]
 800eb16:	b003      	add	sp, #12
 800eb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb1a:	ab01      	add	r3, sp, #4
 800eb1c:	466a      	mov	r2, sp
 800eb1e:	f7ff ffc8 	bl	800eab2 <__swhatbuf_r>
 800eb22:	9f00      	ldr	r7, [sp, #0]
 800eb24:	4605      	mov	r5, r0
 800eb26:	4639      	mov	r1, r7
 800eb28:	4630      	mov	r0, r6
 800eb2a:	f7ff faff 	bl	800e12c <_malloc_r>
 800eb2e:	b948      	cbnz	r0, 800eb44 <__smakebuf_r+0x46>
 800eb30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb34:	059a      	lsls	r2, r3, #22
 800eb36:	d4ee      	bmi.n	800eb16 <__smakebuf_r+0x18>
 800eb38:	f023 0303 	bic.w	r3, r3, #3
 800eb3c:	f043 0302 	orr.w	r3, r3, #2
 800eb40:	81a3      	strh	r3, [r4, #12]
 800eb42:	e7e2      	b.n	800eb0a <__smakebuf_r+0xc>
 800eb44:	89a3      	ldrh	r3, [r4, #12]
 800eb46:	6020      	str	r0, [r4, #0]
 800eb48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb4c:	81a3      	strh	r3, [r4, #12]
 800eb4e:	9b01      	ldr	r3, [sp, #4]
 800eb50:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eb54:	b15b      	cbz	r3, 800eb6e <__smakebuf_r+0x70>
 800eb56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	f000 f84e 	bl	800ebfc <_isatty_r>
 800eb60:	b128      	cbz	r0, 800eb6e <__smakebuf_r+0x70>
 800eb62:	89a3      	ldrh	r3, [r4, #12]
 800eb64:	f023 0303 	bic.w	r3, r3, #3
 800eb68:	f043 0301 	orr.w	r3, r3, #1
 800eb6c:	81a3      	strh	r3, [r4, #12]
 800eb6e:	89a3      	ldrh	r3, [r4, #12]
 800eb70:	431d      	orrs	r5, r3
 800eb72:	81a5      	strh	r5, [r4, #12]
 800eb74:	e7cf      	b.n	800eb16 <__smakebuf_r+0x18>

0800eb76 <_raise_r>:
 800eb76:	291f      	cmp	r1, #31
 800eb78:	b538      	push	{r3, r4, r5, lr}
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	460c      	mov	r4, r1
 800eb7e:	d904      	bls.n	800eb8a <_raise_r+0x14>
 800eb80:	2316      	movs	r3, #22
 800eb82:	6003      	str	r3, [r0, #0]
 800eb84:	f04f 30ff 	mov.w	r0, #4294967295
 800eb88:	bd38      	pop	{r3, r4, r5, pc}
 800eb8a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eb8c:	b112      	cbz	r2, 800eb94 <_raise_r+0x1e>
 800eb8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb92:	b94b      	cbnz	r3, 800eba8 <_raise_r+0x32>
 800eb94:	4628      	mov	r0, r5
 800eb96:	f000 f853 	bl	800ec40 <_getpid_r>
 800eb9a:	4622      	mov	r2, r4
 800eb9c:	4601      	mov	r1, r0
 800eb9e:	4628      	mov	r0, r5
 800eba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eba4:	f000 b83a 	b.w	800ec1c <_kill_r>
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d00a      	beq.n	800ebc2 <_raise_r+0x4c>
 800ebac:	1c59      	adds	r1, r3, #1
 800ebae:	d103      	bne.n	800ebb8 <_raise_r+0x42>
 800ebb0:	2316      	movs	r3, #22
 800ebb2:	6003      	str	r3, [r0, #0]
 800ebb4:	2001      	movs	r0, #1
 800ebb6:	e7e7      	b.n	800eb88 <_raise_r+0x12>
 800ebb8:	2100      	movs	r1, #0
 800ebba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	4798      	blx	r3
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	e7e0      	b.n	800eb88 <_raise_r+0x12>
	...

0800ebc8 <raise>:
 800ebc8:	4b02      	ldr	r3, [pc, #8]	@ (800ebd4 <raise+0xc>)
 800ebca:	4601      	mov	r1, r0
 800ebcc:	6818      	ldr	r0, [r3, #0]
 800ebce:	f7ff bfd2 	b.w	800eb76 <_raise_r>
 800ebd2:	bf00      	nop
 800ebd4:	20000038 	.word	0x20000038

0800ebd8 <_fstat_r>:
 800ebd8:	b538      	push	{r3, r4, r5, lr}
 800ebda:	4d07      	ldr	r5, [pc, #28]	@ (800ebf8 <_fstat_r+0x20>)
 800ebdc:	2300      	movs	r3, #0
 800ebde:	4604      	mov	r4, r0
 800ebe0:	4608      	mov	r0, r1
 800ebe2:	4611      	mov	r1, r2
 800ebe4:	602b      	str	r3, [r5, #0]
 800ebe6:	f7f1 ffab 	bl	8000b40 <_fstat>
 800ebea:	1c43      	adds	r3, r0, #1
 800ebec:	d102      	bne.n	800ebf4 <_fstat_r+0x1c>
 800ebee:	682b      	ldr	r3, [r5, #0]
 800ebf0:	b103      	cbz	r3, 800ebf4 <_fstat_r+0x1c>
 800ebf2:	6023      	str	r3, [r4, #0]
 800ebf4:	bd38      	pop	{r3, r4, r5, pc}
 800ebf6:	bf00      	nop
 800ebf8:	200084e8 	.word	0x200084e8

0800ebfc <_isatty_r>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	4d06      	ldr	r5, [pc, #24]	@ (800ec18 <_isatty_r+0x1c>)
 800ec00:	2300      	movs	r3, #0
 800ec02:	4604      	mov	r4, r0
 800ec04:	4608      	mov	r0, r1
 800ec06:	602b      	str	r3, [r5, #0]
 800ec08:	f7f1 ffaa 	bl	8000b60 <_isatty>
 800ec0c:	1c43      	adds	r3, r0, #1
 800ec0e:	d102      	bne.n	800ec16 <_isatty_r+0x1a>
 800ec10:	682b      	ldr	r3, [r5, #0]
 800ec12:	b103      	cbz	r3, 800ec16 <_isatty_r+0x1a>
 800ec14:	6023      	str	r3, [r4, #0]
 800ec16:	bd38      	pop	{r3, r4, r5, pc}
 800ec18:	200084e8 	.word	0x200084e8

0800ec1c <_kill_r>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	4d07      	ldr	r5, [pc, #28]	@ (800ec3c <_kill_r+0x20>)
 800ec20:	2300      	movs	r3, #0
 800ec22:	4604      	mov	r4, r0
 800ec24:	4608      	mov	r0, r1
 800ec26:	4611      	mov	r1, r2
 800ec28:	602b      	str	r3, [r5, #0]
 800ec2a:	f7f1 ff27 	bl	8000a7c <_kill>
 800ec2e:	1c43      	adds	r3, r0, #1
 800ec30:	d102      	bne.n	800ec38 <_kill_r+0x1c>
 800ec32:	682b      	ldr	r3, [r5, #0]
 800ec34:	b103      	cbz	r3, 800ec38 <_kill_r+0x1c>
 800ec36:	6023      	str	r3, [r4, #0]
 800ec38:	bd38      	pop	{r3, r4, r5, pc}
 800ec3a:	bf00      	nop
 800ec3c:	200084e8 	.word	0x200084e8

0800ec40 <_getpid_r>:
 800ec40:	f7f1 bf14 	b.w	8000a6c <_getpid>

0800ec44 <_init>:
 800ec44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec46:	bf00      	nop
 800ec48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec4a:	bc08      	pop	{r3}
 800ec4c:	469e      	mov	lr, r3
 800ec4e:	4770      	bx	lr

0800ec50 <_fini>:
 800ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec52:	bf00      	nop
 800ec54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec56:	bc08      	pop	{r3}
 800ec58:	469e      	mov	lr, r3
 800ec5a:	4770      	bx	lr

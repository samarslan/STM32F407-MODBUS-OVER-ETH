
STM32F407-MODBUS-OVER-ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002be0  0800fc90  0800fc90  00010c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012870  08012870  00014088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012870  08012870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012878  08012878  00014088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012878  08012878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801287c  0801287c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08012880  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014088  2**0
                  CONTENTS
 10 .bss          000084a8  20000088  20000088  00014088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008530  20008530  00014088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c43a  00000000  00000000  000140b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005165  00000000  00000000  000304f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  00035658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001029  00000000  00000000  00036a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c8db  00000000  00000000  00037ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002285c  00000000  00000000  0006438c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db783  00000000  00000000  00086be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016236b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a14  00000000  00000000  001623b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00167dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fc78 	.word	0x0800fc78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800fc78 	.word	0x0800fc78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <send_broadcast_hello>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_broadcast_hello(void)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
    struct udp_pcb *upcb;
    struct pbuf *p;
    ip_addr_t dest_ip;
    const char *msg = "Hello World from STM32F407";
 80005b2:	4b1e      	ldr	r3, [pc, #120]	@ (800062c <send_broadcast_hello+0x80>)
 80005b4:	60fb      	str	r3, [r7, #12]

    /* Create new UDP control block  */
    upcb = udp_new();
 80005b6:	f00c f849 	bl	800c64c <udp_new>
 80005ba:	4603      	mov	r3, r0
 80005bc:	60bb      	str	r3, [r7, #8]
    if (upcb == NULL) return;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d02e      	beq.n	8000622 <send_broadcast_hello+0x76>

    /* Set destination to broadcast */
    IP4_ADDR(&dest_ip, 192, 168, 1, 100);  // Adjust subnet
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <send_broadcast_hello+0x84>)
 80005c6:	603b      	str	r3, [r7, #0]

    /* Bind to any port (not strictly necessary for TX-only) */
    udp_bind(upcb, IP_ADDR_ANY, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	491a      	ldr	r1, [pc, #104]	@ (8000634 <send_broadcast_hello+0x88>)
 80005cc:	68b8      	ldr	r0, [r7, #8]
 80005ce:	f00b ff73 	bl	800c4b8 <udp_bind>

    /* Allocate pbuf */
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(msg), PBUF_RAM);
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f7ff fdfc 	bl	80001d0 <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	b29b      	uxth	r3, r3
 80005dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80005e0:	4619      	mov	r1, r3
 80005e2:	2036      	movs	r0, #54	@ 0x36
 80005e4:	f005 fbcc 	bl	8005d80 <pbuf_alloc>
 80005e8:	6078      	str	r0, [r7, #4]
    if (p != NULL)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d014      	beq.n	800061a <send_broadcast_hello+0x6e>
    {
        memcpy(p->payload, msg, strlen(msg));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685c      	ldr	r4, [r3, #4]
 80005f4:	68f8      	ldr	r0, [r7, #12]
 80005f6:	f7ff fdeb 	bl	80001d0 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	68f9      	ldr	r1, [r7, #12]
 8000600:	4620      	mov	r0, r4
 8000602:	f00e fd0c 	bl	800f01e <memcpy>
        udp_sendto(upcb, p, &dest_ip, 5005);  // send to port 5005
 8000606:	463a      	mov	r2, r7
 8000608:	f241 338d 	movw	r3, #5005	@ 0x138d
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	68b8      	ldr	r0, [r7, #8]
 8000610:	f00b fd9c 	bl	800c14c <udp_sendto>
        pbuf_free(p);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f005 fe97 	bl	8006348 <pbuf_free>
    }

    udp_remove(upcb);
 800061a:	68b8      	ldr	r0, [r7, #8]
 800061c:	f00b ffd4 	bl	800c5c8 <udp_remove>
 8000620:	e000      	b.n	8000624 <send_broadcast_hello+0x78>
    if (upcb == NULL) return;
 8000622:	bf00      	nop
}
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bd90      	pop	{r4, r7, pc}
 800062a:	bf00      	nop
 800062c:	0800fc90 	.word	0x0800fc90
 8000630:	6401a8c0 	.word	0x6401a8c0
 8000634:	08012780 	.word	0x08012780

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 fc22 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f822 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 f8b2 	bl	80007ac <MX_GPIO_Init>
  MX_UART5_Init();
 8000648:	f000 f886 	bl	8000758 <MX_UART5_Init>
  MX_LWIP_Init();
 800064c:	f003 fe22 	bl	8004294 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  netif_set_up(&gnetif);       // bring interface up
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <main+0x48>)
 8000652:	f005 f9f7 	bl	8005a44 <netif_set_up>
  HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800065c:	4809      	ldr	r0, [pc, #36]	@ (8000684 <main+0x4c>)
 800065e:	f002 fa37 	bl	8002ad0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    MX_LWIP_Process(); // important: handles incoming/outgoing packets
 8000662:	f003 ff57 	bl	8004514 <MX_LWIP_Process>

	    send_broadcast_hello();
 8000666:	f7ff ffa1 	bl	80005ac <send_broadcast_hello>
	    HAL_GPIO_TogglePin(LED_PORT, LED_GREEN_PIN);
 800066a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800066e:	4805      	ldr	r0, [pc, #20]	@ (8000684 <main+0x4c>)
 8000670:	f002 fa47 	bl	8002b02 <HAL_GPIO_TogglePin>
	    HAL_Delay(1000);   // every 1 second
 8000674:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000678:	f000 fc76 	bl	8000f68 <HAL_Delay>
	    MX_LWIP_Process(); // important: handles incoming/outgoing packets
 800067c:	bf00      	nop
 800067e:	e7f0      	b.n	8000662 <main+0x2a>
 8000680:	200000f8 	.word	0x200000f8
 8000684:	40020c00 	.word	0x40020c00

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	@ 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	@ 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f00e fc4b 	bl	800ef32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <SystemClock_Config+0xc8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a26      	ldr	r2, [pc, #152]	@ (8000750 <SystemClock_Config+0xc8>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80006bc:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <SystemClock_Config+0xc8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <SystemClock_Config+0xcc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a20      	ldr	r2, [pc, #128]	@ (8000754 <SystemClock_Config+0xcc>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <SystemClock_Config+0xcc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80006fc:	2340      	movs	r3, #64	@ 0x40
 80006fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f002 fa37 	bl	8002b80 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f8c0 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000724:	2380      	movs	r3, #128	@ 0x80
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2101      	movs	r1, #1
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fc9a 	bl	8003070 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000742:	f000 f8ab 	bl	800089c <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	@ 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_UART5_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <MX_UART5_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <MX_UART5_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_UART5_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_UART5_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_UART5_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_UART5_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_UART5_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_UART5_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_UART5_Init+0x4c>)
 8000790:	f002 fe4e 	bl	8003430 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f87f 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000a4 	.word	0x200000a4
 80007a8:	40005000 	.word	0x40005000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b32      	ldr	r3, [pc, #200]	@ (8000890 <MX_GPIO_Init+0xe4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a31      	ldr	r2, [pc, #196]	@ (8000890 <MX_GPIO_Init+0xe4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <MX_GPIO_Init+0xe4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_GPIO_Init+0xe4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000890 <MX_GPIO_Init+0xe4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_GPIO_Init+0xe4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b24      	ldr	r3, [pc, #144]	@ (8000890 <MX_GPIO_Init+0xe4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a23      	ldr	r2, [pc, #140]	@ (8000890 <MX_GPIO_Init+0xe4>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <MX_GPIO_Init+0xe4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_GPIO_Init+0xe4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a1c      	ldr	r2, [pc, #112]	@ (8000890 <MX_GPIO_Init+0xe4>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_GPIO_Init+0xe4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000838:	4816      	ldr	r0, [pc, #88]	@ (8000894 <MX_GPIO_Init+0xe8>)
 800083a:	f002 f949 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800083e:	2301      	movs	r3, #1
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000842:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4811      	ldr	r0, [pc, #68]	@ (8000898 <MX_GPIO_Init+0xec>)
 8000854:	f001 ffa0 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000858:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4808      	ldr	r0, [pc, #32]	@ (8000894 <MX_GPIO_Init+0xe8>)
 8000872:	f001 ff91 	bl	8002798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2006      	movs	r0, #6
 800087c:	f000 fc73 	bl	8001166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000880:	2006      	movs	r0, #6
 8000882:	f000 fc8c 	bl	800119e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	@ 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40020000 	.word	0x40020000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <Error_Handler+0x8>

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a2c      	ldr	r2, [pc, #176]	@ (80009c8 <HAL_UART_MspInit+0xd0>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d152      	bne.n	80009c0 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b2b      	ldr	r3, [pc, #172]	@ (80009cc <HAL_UART_MspInit+0xd4>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a2a      	ldr	r2, [pc, #168]	@ (80009cc <HAL_UART_MspInit+0xd4>)
 8000924:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <HAL_UART_MspInit+0xd4>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b24      	ldr	r3, [pc, #144]	@ (80009cc <HAL_UART_MspInit+0xd4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a23      	ldr	r2, [pc, #140]	@ (80009cc <HAL_UART_MspInit+0xd4>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <HAL_UART_MspInit+0xd4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <HAL_UART_MspInit+0xd4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a1c      	ldr	r2, [pc, #112]	@ (80009cc <HAL_UART_MspInit+0xd4>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <HAL_UART_MspInit+0xd4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800096e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000980:	2308      	movs	r3, #8
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4811      	ldr	r0, [pc, #68]	@ (80009d0 <HAL_UART_MspInit+0xd8>)
 800098c:	f001 ff04 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000990:	2304      	movs	r3, #4
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009a0:	2308      	movs	r3, #8
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <HAL_UART_MspInit+0xdc>)
 80009ac:	f001 fef4 	bl	8002798 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2035      	movs	r0, #53	@ 0x35
 80009b6:	f000 fbd6 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80009ba:	2035      	movs	r0, #53	@ 0x35
 80009bc:	f000 fbef 	bl	800119e <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40005000 	.word	0x40005000
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <NMI_Handler+0x4>

080009e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <MemManage_Handler+0x4>

080009f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <UsageFault_Handler+0x4>

08000a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2e:	f000 fa7b 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f002 f87c 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <UART5_IRQHandler+0x10>)
 8000a4a:	f002 fd41 	bl	80034d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000a4 	.word	0x200000a4

08000a58 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <ETH_IRQHandler+0x10>)
 8000a5e:	f000 ffad 	bl	80019bc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20004c10 	.word	0x20004c10

08000a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return 1;
 8000a70:	2301      	movs	r3, #1
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_kill>:

int _kill(int pid, int sig)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a86:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <_kill+0x20>)
 8000a88:	2216      	movs	r2, #22
 8000a8a:	601a      	str	r2, [r3, #0]
  return -1;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	20008520 	.word	0x20008520

08000aa0 <_exit>:

void _exit (int status)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ffe5 	bl	8000a7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ab2:	bf00      	nop
 8000ab4:	e7fd      	b.n	8000ab2 <_exit+0x12>

08000ab6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	e00a      	b.n	8000ade <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ac8:	f3af 8000 	nop.w
 8000acc:	4601      	mov	r1, r0
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	60ba      	str	r2, [r7, #8]
 8000ad4:	b2ca      	uxtb	r2, r1
 8000ad6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3301      	adds	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	dbf0      	blt.n	8000ac8 <_read+0x12>
  }

  return len;
 8000ae6:	687b      	ldr	r3, [r7, #4]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e009      	b.n	8000b16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	60ba      	str	r2, [r7, #8]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf1      	blt.n	8000b02 <_write+0x12>
  }
  return len;
 8000b1e:	687b      	ldr	r3, [r7, #4]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_close>:

int _close(int file)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b50:	605a      	str	r2, [r3, #4]
  return 0;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_isatty>:

int _isatty(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b085      	sub	sp, #20
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	@ (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d205      	bcs.n	8000bcc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <_sbrk+0x6c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	371c      	adds	r7, #28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	20020000 	.word	0x20020000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	200000ec 	.word	0x200000ec
 8000bf8:	20008530 	.word	0x20008530
 8000bfc:	20008520 	.word	0x20008520

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c28:	f7ff ffea 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	@ (8000c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f00e f9bd 	bl	800efd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fcef 	bl	8000638 <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c68:	08012880 	.word	0x08012880
  ldr r2, =_sbss
 8000c6c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c70:	20008530 	.word	0x20008530

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>

08000c76 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00b      	beq.n	8000c9e <LAN8742_RegisterBusIO+0x28>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <LAN8742_RegisterBusIO+0x28>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <LAN8742_RegisterBusIO+0x28>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e014      	b.n	8000cce <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	691a      	ldr	r2, [r3, #16]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d139      	bne.n	8000d6a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2220      	movs	r2, #32
 8000d08:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e01c      	b.n	8000d4a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	f107 020c 	add.w	r2, r7, #12
 8000d18:	2112      	movs	r1, #18
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	4798      	blx	r3
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da03      	bge.n	8000d2c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000d24:	f06f 0304 	mvn.w	r3, #4
 8000d28:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d2a:	e00b      	b.n	8000d44 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 031f 	and.w	r3, r3, #31
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d105      	bne.n	8000d44 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
         break;
 8000d42:	e005      	b.n	8000d50 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3301      	adds	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2b1f      	cmp	r3, #31
 8000d4e:	d9df      	bls.n	8000d10 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b1f      	cmp	r3, #31
 8000d56:	d902      	bls.n	8000d5e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d58:	f06f 0302 	mvn.w	r3, #2
 8000d5c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000d6a:	693b      	ldr	r3, [r7, #16]
 }
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	6810      	ldr	r0, [r2, #0]
 8000d88:	f107 020c 	add.w	r2, r7, #12
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4798      	blx	r3
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	da02      	bge.n	8000d9c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d96:	f06f 0304 	mvn.w	r3, #4
 8000d9a:	e06e      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	6810      	ldr	r0, [r2, #0]
 8000da4:	f107 020c 	add.w	r2, r7, #12
 8000da8:	2101      	movs	r1, #1
 8000daa:	4798      	blx	r3
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	da02      	bge.n	8000db8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000db2:	f06f 0304 	mvn.w	r3, #4
 8000db6:	e060      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e059      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6810      	ldr	r0, [r2, #0]
 8000dce:	f107 020c 	add.w	r2, r7, #12
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4798      	blx	r3
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	da02      	bge.n	8000de2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ddc:	f06f 0304 	mvn.w	r3, #4
 8000de0:	e04b      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d11b      	bne.n	8000e24 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <LAN8742_GetLinkState+0x90>
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e00:	2302      	movs	r3, #2
 8000e02:	e03a      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e033      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	e02c      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e20:	2305      	movs	r3, #5
 8000e22:	e02a      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6810      	ldr	r0, [r2, #0]
 8000e2c:	f107 020c 	add.w	r2, r7, #12
 8000e30:	211f      	movs	r1, #31
 8000e32:	4798      	blx	r3
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da02      	bge.n	8000e40 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e3a:	f06f 0304 	mvn.w	r3, #4
 8000e3e:	e01c      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	e015      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f003 031c 	and.w	r3, r3, #28
 8000e54:	2b18      	cmp	r3, #24
 8000e56:	d101      	bne.n	8000e5c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	e00e      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 031c 	and.w	r3, r3, #28
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d101      	bne.n	8000e6a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e007      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f003 031c 	and.w	r3, r3, #28
 8000e70:	2b14      	cmp	r3, #20
 8000e72:	d101      	bne.n	8000e78 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e74:	2304      	movs	r3, #4
 8000e76:	e000      	b.n	8000e7a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e78:	2305      	movs	r3, #5
    }
  }
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f94f 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fcf6 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f967 	bl	80011ba <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f92f 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200000f0 	.word	0x200000f0

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200000f0 	.word	0x200000f0

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	@ (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	@ (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	@ 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff feb6 	bl	8000f50 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d008      	beq.n	8001204 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e052      	b.n	80012aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0216 	bic.w	r2, r2, #22
 8001212:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001222:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001228:	2b00      	cmp	r3, #0
 800122a:	d103      	bne.n	8001234 <HAL_DMA_Abort+0x62>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0208 	bic.w	r2, r2, #8
 8001242:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001254:	e013      	b.n	800127e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001256:	f7ff fe7b 	bl	8000f50 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b05      	cmp	r3, #5
 8001262:	d90c      	bls.n	800127e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2220      	movs	r2, #32
 8001268:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2203      	movs	r2, #3
 800126e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e015      	b.n	80012aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e4      	bne.n	8001256 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001290:	223f      	movs	r2, #63	@ 0x3f
 8001292:	409a      	lsls	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d004      	beq.n	80012d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2280      	movs	r2, #128	@ 0x80
 80012ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e00c      	b.n	80012ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2205      	movs	r2, #5
 80012d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e08a      	b.n	8001420 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001310:	2b00      	cmp	r3, #0
 8001312:	d106      	bne.n	8001322 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2220      	movs	r2, #32
 8001318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f003 fabd 	bl	800489c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b40      	ldr	r3, [pc, #256]	@ (8001428 <HAL_ETH_Init+0x130>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	4a3f      	ldr	r2, [pc, #252]	@ (8001428 <HAL_ETH_Init+0x130>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001330:	6453      	str	r3, [r2, #68]	@ 0x44
 8001332:	4b3d      	ldr	r3, [pc, #244]	@ (8001428 <HAL_ETH_Init+0x130>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800133e:	4b3b      	ldr	r3, [pc, #236]	@ (800142c <HAL_ETH_Init+0x134>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4a3a      	ldr	r2, [pc, #232]	@ (800142c <HAL_ETH_Init+0x134>)
 8001344:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001348:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800134a:	4b38      	ldr	r3, [pc, #224]	@ (800142c <HAL_ETH_Init+0x134>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	4936      	ldr	r1, [pc, #216]	@ (800142c <HAL_ETH_Init+0x134>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001358:	4b34      	ldr	r3, [pc, #208]	@ (800142c <HAL_ETH_Init+0x134>)
 800135a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001372:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001374:	f7ff fdec 	bl	8000f50 <HAL_GetTick>
 8001378:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800137a:	e011      	b.n	80013a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800137c:	f7ff fde8 	bl	8000f50 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800138a:	d909      	bls.n	80013a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2204      	movs	r2, #4
 8001390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	22e0      	movs	r2, #224	@ 0xe0
 8001398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e03f      	b.n	8001420 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1e4      	bne.n	800137c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 ff32 	bl	800221c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 ffdd 	bl	8002378 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f001 f833 	bl	800242a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	461a      	mov	r2, r3
 80013ca:	2100      	movs	r1, #0
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 ff9b 	bl	8002308 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80013e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013f6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800140a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2210      	movs	r2, #16
 800141a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	40013800 	.word	0x40013800

08001430 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800143e:	2b10      	cmp	r3, #16
 8001440:	d161      	bne.n	8001506 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2220      	movs	r2, #32
 8001446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2204      	movs	r2, #4
 8001454:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fa2c 	bl	80018b4 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff fd7f 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001484:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001488:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014a0:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fd56 	bl	8001f54 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0208 	orr.w	r2, r2, #8
 80014b6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff fd51 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 0204 	orr.w	r2, r2, #4
 80014dc:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80014f0:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80014f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014f8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2240      	movs	r2, #64	@ 0x40
 80014fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
  }
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800151e:	2b40      	cmp	r3, #64	@ 0x40
 8001520:	d170      	bne.n	8001604 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2220      	movs	r2, #32
 8001526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 800153c:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001540:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001544:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001558:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800155c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	f023 0302 	bic.w	r3, r3, #2
 8001570:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001574:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0204 	bic.w	r2, r2, #4
 8001584:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800158e:	2001      	movs	r0, #1
 8001590:	f7ff fcea 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fcd9 	bl	8001f54 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0208 	bic.w	r2, r2, #8
 80015b0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff fcd4 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	e00e      	b.n	80015ec <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	3212      	adds	r2, #18
 80015d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d9ed      	bls.n	80015ce <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2210      	movs	r2, #16
 80015fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	e000      	b.n	8001606 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
  }
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001626:	f043 0201 	orr.w	r2, r3, #1
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e07c      	b.n	800172e <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800163a:	2b40      	cmp	r3, #64	@ 0x40
 800163c:	d176      	bne.n	800172c <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800163e:	2200      	movs	r2, #0
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 ff60 	bl	8002508 <ETH_Prepare_Tx_Descriptors>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001654:	f043 0202 	orr.w	r2, r3, #2
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e065      	b.n	800172e <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001662:	f3bf 8f4f 	dsb	sy
}
 8001666:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3206      	adds	r2, #6
 8001670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001674:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001684:	2b03      	cmp	r3, #3
 8001686:	d904      	bls.n	8001692 <HAL_ETH_Transmit+0x84>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168c:	1f1a      	subs	r2, r3, #4
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3106      	adds	r1, #6
 800169e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016a6:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80016a8:	f7ff fc52 	bl	8000f50 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016ae:	e037      	b.n	8001720 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d011      	beq.n	80016e6 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016c8:	f043 0208 	orr.w	r2, r3, #8
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e023      	b.n	800172e <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d018      	beq.n	8001720 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016ee:	f7ff fc2f 	bl	8000f50 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d302      	bcc.n	8001704 <HAL_ETH_Transmit+0xf6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10d      	bne.n	8001720 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170a:	f043 0204 	orr.w	r2, r3, #4
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800171a:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e006      	b.n	800172e <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	dbc3      	blt.n	80016b0 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	e000      	b.n	800172e <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
  }
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b088      	sub	sp, #32
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0a4      	b.n	80018ac <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001768:	2b40      	cmp	r3, #64	@ 0x40
 800176a:	d001      	beq.n	8001770 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e09d      	b.n	80018ac <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001774:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	3212      	adds	r2, #18
 800177c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001780:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001786:	f1c3 0304 	rsb	r3, r3, #4
 800178a:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800178c:	e066      	b.n	800185c <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	699a      	ldr	r2, [r3, #24]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <HAL_ETH_ReadData+0x88>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d03c      	beq.n	8001838 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	0c1b      	lsrs	r3, r3, #16
 80017dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017e0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	b29b      	uxth	r3, r3
 8001818:	f003 f9f8 	bl	8004c0c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	441a      	add	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	3301      	adds	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d902      	bls.n	800184a <HAL_ETH_ReadData+0x114>
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	3b04      	subs	r3, #4
 8001848:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	3212      	adds	r2, #18
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001860:	2b00      	cmp	r3, #0
 8001862:	db06      	blt.n	8001872 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d202      	bcs.n	8001872 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d08d      	beq.n	800178e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	441a      	add	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f814 	bl	80018b4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001892:	7cfb      	ldrb	r3, [r7, #19]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80018c0:	2301      	movs	r3, #1
 80018c2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80018c8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	3212      	adds	r2, #18
 80018d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018da:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80018dc:	e044      	b.n	8001968 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d112      	bne.n	800190c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 f95e 	bl	8004bac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	74fb      	strb	r3, [r7, #19]
 80018fa:	e007      	b.n	800190c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	461a      	mov	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	461a      	mov	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800190c:	7cfb      	ldrb	r3, [r7, #19]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d02a      	beq.n	8001968 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	2b00      	cmp	r3, #0
 8001918:	d108      	bne.n	800192c <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	6053      	str	r3, [r2, #4]
 800192a:	e005      	b.n	8001938 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	3301      	adds	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d902      	bls.n	8001956 <ETH_UpdateDescriptor+0xa2>
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	3b04      	subs	r3, #4
 8001954:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	3212      	adds	r2, #18
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	617b      	str	r3, [r7, #20]
      desccount--;
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	3b01      	subs	r3, #1
 8001966:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <ETH_UpdateDescriptor+0xc0>
 800196e:	7cfb      	ldrb	r3, [r7, #19]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1b4      	bne.n	80018de <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	429a      	cmp	r2, r3
 800197c:	d01a      	beq.n	80019b4 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3303      	adds	r3, #3
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001988:	f3bf 8f5f 	dmb	sy
}
 800198c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6919      	ldr	r1, [r3, #16]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	18ca      	adds	r2, r1, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a6:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80019b4:	bf00      	nop
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ca:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80019e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b14 <HAL_ETH_IRQHandler+0x158>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00e      	beq.n	8001a12 <HAL_ETH_IRQHandler+0x56>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b43      	ldr	r3, [pc, #268]	@ (8001b18 <HAL_ETH_IRQHandler+0x15c>)
 8001a0a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f891 	bl	8001b34 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00f      	beq.n	8001a3c <HAL_ETH_IRQHandler+0x80>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001a34:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f872 	bl	8001b20 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d042      	beq.n	8001acc <HAL_ETH_IRQHandler+0x110>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d03d      	beq.n	8001acc <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a56:	f043 0208 	orr.w	r2, r3, #8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01a      	beq.n	8001aa0 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	4b29      	ldr	r3, [pc, #164]	@ (8001b1c <HAL_ETH_IRQHandler+0x160>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001a90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a94:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	22e0      	movs	r2, #224	@ 0xe0
 8001a9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001a9e:	e012      	b.n	8001ac6 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001aae:	4013      	ands	r3, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001ac4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f83e 	bl	8001b48 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00e      	beq.n	8001af4 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001adc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f838 	bl	8001b5c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d006      	beq.n	8001b0c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_ETH_IRQHandler+0x158>)
 8001b00:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b04:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f832 	bl	8001b70 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40013c00 	.word	0x40013c00
 8001b18:	00010040 	.word	0x00010040
 8001b1c:	007e2000 	.word	0x007e2000

08001b20 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 031c 	and.w	r3, r3, #28
 8001ba0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	02db      	lsls	r3, r3, #11
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	019b      	lsls	r3, r3, #6
 8001bb2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f023 0302 	bic.w	r3, r3, #2
 8001bc2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001bd4:	f7ff f9bc 	bl	8000f50 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bda:	e00d      	b.n	8001bf8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001bdc:	f7ff f9b8 	bl	8000f50 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bea:	d301      	bcc.n	8001bf0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e010      	b.n	8001c12 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ec      	bne.n	8001bdc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 031c 	and.w	r3, r3, #28
 8001c36:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	02db      	lsls	r3, r3, #11
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	019b      	lsls	r3, r3, #6
 8001c48:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c74:	f7ff f96c 	bl	8000f50 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c7a:	e00d      	b.n	8001c98 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001c7c:	f7ff f968 	bl	8000f50 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c8a:	d301      	bcc.n	8001c90 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e009      	b.n	8001ca4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ec      	bne.n	8001c7c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0e6      	b.n	8001e8e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf14      	ite	ne
 8001d14:	2301      	movne	r3, #1
 8001d16:	2300      	moveq	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf0c      	ite	eq
 8001d2e:	2301      	moveq	r3, #1
 8001d30:	2300      	movne	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf14      	ite	ne
 8001db2:	2301      	movne	r3, #1
 8001db4:	2300      	moveq	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf14      	ite	ne
 8001dda:	2301      	movne	r3, #1
 8001ddc:	2300      	moveq	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bf14      	ite	ne
 8001e62:	2301      	movne	r3, #1
 8001e64:	2300      	moveq	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00b      	b.n	8001ec6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d105      	bne.n	8001ec4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001eb8:	6839      	ldr	r1, [r7, #0]
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f870 	bl	8001fa0 <ETH_SetMACConfig>

    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 031c 	bic.w	r3, r3, #28
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ee8:	f001 fa6e 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8001eec:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	4a14      	ldr	r2, [pc, #80]	@ (8001f44 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d804      	bhi.n	8001f00 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f043 0308 	orr.w	r3, r3, #8
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e019      	b.n	8001f34 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4a11      	ldr	r2, [pc, #68]	@ (8001f48 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d204      	bcs.n	8001f12 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f043 030c 	orr.w	r3, r3, #12
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e010      	b.n	8001f34 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	@ (8001f4c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d90c      	bls.n	8001f34 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f50 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d804      	bhi.n	8001f2c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	e003      	b.n	8001f34 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f043 0310 	orr.w	r3, r3, #16
 8001f32:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	02160ebf 	.word	0x02160ebf
 8001f48:	03938700 	.word	0x03938700
 8001f4c:	05f5e0ff 	.word	0x05f5e0ff
 8001f50:	08f0d17f 	.word	0x08f0d17f

08001f54 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f76:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7fe ffef 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f94:	6193      	str	r3, [r2, #24]
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4b53      	ldr	r3, [pc, #332]	@ (8002104 <ETH_SetMACConfig+0x164>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	7b9b      	ldrb	r3, [r3, #14]
 8001fbe:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	7c12      	ldrb	r2, [r2, #16]
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	d102      	bne.n	8001fce <ETH_SetMACConfig+0x2e>
 8001fc8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001fcc:	e000      	b.n	8001fd0 <ETH_SetMACConfig+0x30>
 8001fce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001fd0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	7c52      	ldrb	r2, [r2, #17]
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d102      	bne.n	8001fe0 <ETH_SetMACConfig+0x40>
 8001fda:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001fde:	e000      	b.n	8001fe2 <ETH_SetMACConfig+0x42>
 8001fe0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fe2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fe8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	7fdb      	ldrb	r3, [r3, #31]
 8001fee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ff0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ff6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	7f92      	ldrb	r2, [r2, #30]
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d102      	bne.n	8002006 <ETH_SetMACConfig+0x66>
 8002000:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002004:	e000      	b.n	8002008 <ETH_SetMACConfig+0x68>
 8002006:	2200      	movs	r2, #0
                        macconf->Speed |
 8002008:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	7f1b      	ldrb	r3, [r3, #28]
 800200e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002010:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002016:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	791b      	ldrb	r3, [r3, #4]
 800201c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800201e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002026:	2a00      	cmp	r2, #0
 8002028:	d102      	bne.n	8002030 <ETH_SetMACConfig+0x90>
 800202a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800202e:	e000      	b.n	8002032 <ETH_SetMACConfig+0x92>
 8002030:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002032:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	7bdb      	ldrb	r3, [r3, #15]
 8002038:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800203a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002040:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002048:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800204a:	4313      	orrs	r3, r2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002062:	2001      	movs	r0, #1
 8002064:	f7fe ff80 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800207e:	4013      	ands	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002086:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800208e:	2a00      	cmp	r2, #0
 8002090:	d101      	bne.n	8002096 <ETH_SetMACConfig+0xf6>
 8002092:	2280      	movs	r2, #128	@ 0x80
 8002094:	e000      	b.n	8002098 <ETH_SetMACConfig+0xf8>
 8002096:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002098:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800209e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80020a6:	2a01      	cmp	r2, #1
 80020a8:	d101      	bne.n	80020ae <ETH_SetMACConfig+0x10e>
 80020aa:	2208      	movs	r2, #8
 80020ac:	e000      	b.n	80020b0 <ETH_SetMACConfig+0x110>
 80020ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80020b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80020b8:	2a01      	cmp	r2, #1
 80020ba:	d101      	bne.n	80020c0 <ETH_SetMACConfig+0x120>
 80020bc:	2204      	movs	r2, #4
 80020be:	e000      	b.n	80020c2 <ETH_SetMACConfig+0x122>
 80020c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80020ca:	2a01      	cmp	r2, #1
 80020cc:	d101      	bne.n	80020d2 <ETH_SetMACConfig+0x132>
 80020ce:	2202      	movs	r2, #2
 80020d0:	e000      	b.n	80020d4 <ETH_SetMACConfig+0x134>
 80020d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020d4:	4313      	orrs	r3, r2
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7fe ff3b 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	fd20810f 	.word	0xfd20810f

08002108 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4b3d      	ldr	r3, [pc, #244]	@ (8002218 <ETH_SetDMAConfig+0x110>)
 8002122:	4013      	ands	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	7b1b      	ldrb	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <ETH_SetDMAConfig+0x2c>
 800212e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002132:	e000      	b.n	8002136 <ETH_SetDMAConfig+0x2e>
 8002134:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7b5b      	ldrb	r3, [r3, #13]
 800213a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800213c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	7f52      	ldrb	r2, [r2, #29]
 8002142:	2a00      	cmp	r2, #0
 8002144:	d102      	bne.n	800214c <ETH_SetDMAConfig+0x44>
 8002146:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800214a:	e000      	b.n	800214e <ETH_SetDMAConfig+0x46>
 800214c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800214e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	7b9b      	ldrb	r3, [r3, #14]
 8002154:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002156:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800215c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	7f1b      	ldrb	r3, [r3, #28]
 8002162:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002164:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	7f9b      	ldrb	r3, [r3, #30]
 800216a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800216c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002172:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800217a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800217c:	4313      	orrs	r3, r2
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800218c:	461a      	mov	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800219e:	2001      	movs	r0, #1
 80021a0:	f7fe fee2 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ac:	461a      	mov	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	791b      	ldrb	r3, [r3, #4]
 80021b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80021c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80021d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021fc:	2001      	movs	r0, #1
 80021fe:	f7fe feb3 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	f8de3f23 	.word	0xf8de3f23

0800221c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0a6      	sub	sp, #152	@ 0x98
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800222a:	2301      	movs	r3, #1
 800222c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002230:	2300      	movs	r3, #0
 8002232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800224c:	2301      	movs	r3, #1
 800224e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800225e:	2300      	movs	r3, #0
 8002260:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002268:	2300      	movs	r3, #0
 800226a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002284:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002288:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800228a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800228e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002296:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800229a:	4619      	mov	r1, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fe7f 	bl	8001fa0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80022a2:	2301      	movs	r3, #1
 80022a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022a6:	2301      	movs	r3, #1
 80022a8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80022b0:	2301      	movs	r3, #1
 80022b2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80022ce:	2301      	movs	r3, #1
 80022d0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80022d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022d6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022dc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022e2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	4619      	mov	r1, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff05 	bl	8002108 <ETH_SetDMAConfig>
}
 80022fe:	bf00      	nop
 8002300:	3798      	adds	r7, #152	@ 0x98
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3305      	adds	r3, #5
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	3204      	adds	r2, #4
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <ETH_MACAddressConfig+0x68>)
 800232a:	4413      	add	r3, r2
 800232c:	461a      	mov	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3303      	adds	r3, #3
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	061a      	lsls	r2, r3, #24
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3302      	adds	r3, #2
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3301      	adds	r3, #1
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	4313      	orrs	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <ETH_MACAddressConfig+0x6c>)
 800235a:	4413      	add	r3, r2
 800235c:	461a      	mov	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	6013      	str	r3, [r2, #0]
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40028040 	.word	0x40028040
 8002374:	40028044 	.word	0x40028044

08002378 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e03e      	b.n	8002404 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68d9      	ldr	r1, [r3, #12]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	3206      	adds	r2, #6
 80023b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d80c      	bhi.n	80023e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	e004      	b.n	80023f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3301      	adds	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d9bd      	bls.n	8002386 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800241c:	611a      	str	r2, [r3, #16]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	e048      	b.n	80024ca <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6919      	ldr	r1, [r3, #16]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2200      	movs	r2, #0
 8002454:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002474:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	3212      	adds	r2, #18
 8002496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d80c      	bhi.n	80024ba <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6919      	ldr	r1, [r3, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	461a      	mov	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	e004      	b.n	80024c4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3301      	adds	r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d9b3      	bls.n	8002438 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024fa:	60da      	str	r2, [r3, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002508:	b480      	push	{r7}
 800250a:	b091      	sub	sp, #68	@ 0x44
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3318      	adds	r3, #24
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800252e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002532:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800253e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002546:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800254a:	d007      	beq.n	800255c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800254c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002550:	3304      	adds	r3, #4
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800255c:	2302      	movs	r3, #2
 800255e:	e115      	b.n	800278c <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002562:	3301      	adds	r3, #1
 8002564:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002578:	f023 031f 	bic.w	r3, r3, #31
 800257c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800257e:	6852      	ldr	r2, [r2, #4]
 8002580:	431a      	orrs	r2, r3
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	431a      	orrs	r2, r3
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	431a      	orrs	r2, r3
 80025be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80025ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80025d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80025da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80025e6:	e084      	b.n	80026f2 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80025f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e005      	b.n	8002614 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002612:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002616:	3301      	adds	r3, #1
 8002618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800261a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800261c:	2b03      	cmp	r3, #3
 800261e:	d902      	bls.n	8002626 <ETH_Prepare_Tx_Descriptors+0x11e>
 8002620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002622:	3b04      	subs	r3, #4
 8002624:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800262a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800263c:	d007      	beq.n	800264e <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800263e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002642:	3304      	adds	r3, #4
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d029      	beq.n	80026a2 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800265c:	2300      	movs	r3, #0
 800265e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002660:	e019      	b.n	8002696 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8002662:	f3bf 8f5f 	dmb	sy
}
 8002666:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002672:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002676:	3301      	adds	r3, #1
 8002678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800267a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800267c:	2b03      	cmp	r3, #3
 800267e:	d902      	bls.n	8002686 <ETH_Prepare_Tx_Descriptors+0x17e>
 8002680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002682:	3b04      	subs	r3, #4
 8002684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800268a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002692:	3301      	adds	r3, #1
 8002694:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002696:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800269a:	429a      	cmp	r2, r3
 800269c:	d3e1      	bcc.n	8002662 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	e074      	b.n	800278c <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80026aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ac:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80026ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b0:	3301      	adds	r3, #1
 80026b2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80026b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80026cc:	f023 031f 	bic.w	r3, r3, #31
 80026d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026d2:	6852      	ldr	r2, [r2, #4]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80026da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026dc:	3301      	adds	r3, #1
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80026e0:	f3bf 8f5f 	dmb	sy
}
 80026e4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80026f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f47f af76 	bne.w	80025e8 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d006      	beq.n	8002710 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800270a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e005      	b.n	800271c <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800271c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002726:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272a:	6a3a      	ldr	r2, [r7, #32]
 800272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002730:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002732:	f3bf 8f5f 	dmb	sy
}
 8002736:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002742:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800274a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800274c:	3304      	adds	r3, #4
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002758:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800275a:	f3ef 8310 	mrs	r3, PRIMASK
 800275e:	613b      	str	r3, [r7, #16]
  return(result);
 8002760:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	2301      	movs	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f383 8810 	msr	PRIMASK, r3
}
 800276e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002776:	4413      	add	r3, r2
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	629a      	str	r2, [r3, #40]	@ 0x28
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f383 8810 	msr	PRIMASK, r3
}
 8002788:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3744      	adds	r7, #68	@ 0x44
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	e16b      	b.n	8002a8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b4:	2201      	movs	r2, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f040 815a 	bne.w	8002a86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d005      	beq.n	80027ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d130      	bne.n	800284c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 0201 	and.w	r2, r3, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b03      	cmp	r3, #3
 8002856:	d017      	beq.n	8002888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d123      	bne.n	80028dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	08da      	lsrs	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3208      	adds	r2, #8
 800289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	69b9      	ldr	r1, [r7, #24]
 80028d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0203 	and.w	r2, r3, #3
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80b4 	beq.w	8002a86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b60      	ldr	r3, [pc, #384]	@ (8002aa4 <HAL_GPIO_Init+0x30c>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	4a5f      	ldr	r2, [pc, #380]	@ (8002aa4 <HAL_GPIO_Init+0x30c>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800292c:	6453      	str	r3, [r2, #68]	@ 0x44
 800292e:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa4 <HAL_GPIO_Init+0x30c>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800293a:	4a5b      	ldr	r2, [pc, #364]	@ (8002aa8 <HAL_GPIO_Init+0x310>)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_GPIO_Init+0x314>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d02b      	beq.n	80029be <HAL_GPIO_Init+0x226>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a51      	ldr	r2, [pc, #324]	@ (8002ab0 <HAL_GPIO_Init+0x318>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d025      	beq.n	80029ba <HAL_GPIO_Init+0x222>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a50      	ldr	r2, [pc, #320]	@ (8002ab4 <HAL_GPIO_Init+0x31c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01f      	beq.n	80029b6 <HAL_GPIO_Init+0x21e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4f      	ldr	r2, [pc, #316]	@ (8002ab8 <HAL_GPIO_Init+0x320>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d019      	beq.n	80029b2 <HAL_GPIO_Init+0x21a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4e      	ldr	r2, [pc, #312]	@ (8002abc <HAL_GPIO_Init+0x324>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_GPIO_Init+0x216>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4d      	ldr	r2, [pc, #308]	@ (8002ac0 <HAL_GPIO_Init+0x328>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00d      	beq.n	80029aa <HAL_GPIO_Init+0x212>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4c      	ldr	r2, [pc, #304]	@ (8002ac4 <HAL_GPIO_Init+0x32c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d007      	beq.n	80029a6 <HAL_GPIO_Init+0x20e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4b      	ldr	r2, [pc, #300]	@ (8002ac8 <HAL_GPIO_Init+0x330>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_GPIO_Init+0x20a>
 800299e:	2307      	movs	r3, #7
 80029a0:	e00e      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029a2:	2308      	movs	r3, #8
 80029a4:	e00c      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029a6:	2306      	movs	r3, #6
 80029a8:	e00a      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029aa:	2305      	movs	r3, #5
 80029ac:	e008      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029ae:	2304      	movs	r3, #4
 80029b0:	e006      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029b2:	2303      	movs	r3, #3
 80029b4:	e004      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e002      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029be:	2300      	movs	r3, #0
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	f002 0203 	and.w	r2, r2, #3
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	4093      	lsls	r3, r2
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d0:	4935      	ldr	r1, [pc, #212]	@ (8002aa8 <HAL_GPIO_Init+0x310>)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	3302      	adds	r3, #2
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029de:	4b3b      	ldr	r3, [pc, #236]	@ (8002acc <HAL_GPIO_Init+0x334>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a02:	4a32      	ldr	r2, [pc, #200]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a08:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a2c:	4a27      	ldr	r2, [pc, #156]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a32:	4b26      	ldr	r3, [pc, #152]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a56:	4a1d      	ldr	r2, [pc, #116]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a80:	4a12      	ldr	r2, [pc, #72]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b0f      	cmp	r3, #15
 8002a90:	f67f ae90 	bls.w	80027b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3724      	adds	r7, #36	@ 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40021400 	.word	0x40021400
 8002ac4:	40021800 	.word	0x40021800
 8002ac8:	40021c00 	.word	0x40021c00
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aec:	e003      	b.n	8002af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b14:	887a      	ldrh	r2, [r7, #2]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	041a      	lsls	r2, r3, #16
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43d9      	mvns	r1, r3
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	400b      	ands	r3, r1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b42:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b4e:	4a05      	ldr	r2, [pc, #20]	@ (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f806 	bl	8002b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40013c00 	.word	0x40013c00

08002b68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e267      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d075      	beq.n	8002c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b9e:	4b88      	ldr	r3, [pc, #544]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d00c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002baa:	4b85      	ldr	r3, [pc, #532]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d112      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb6:	4b82      	ldr	r3, [pc, #520]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc2:	d10b      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d05b      	beq.n	8002c88 <HAL_RCC_OscConfig+0x108>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d157      	bne.n	8002c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e242      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x74>
 8002be6:	4b76      	ldr	r3, [pc, #472]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a75      	ldr	r2, [pc, #468]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xb0>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x98>
 8002bfe:	4b70      	ldr	r3, [pc, #448]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6f      	ldr	r2, [pc, #444]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6c      	ldr	r2, [pc, #432]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xb0>
 8002c18:	4b69      	ldr	r3, [pc, #420]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a68      	ldr	r2, [pc, #416]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b66      	ldr	r3, [pc, #408]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a65      	ldr	r2, [pc, #404]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe f98a 	bl	8000f50 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7fe f986 	bl	8000f50 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	@ 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e207      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xc0>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe f976 	bl	8000f50 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe f972 	bl	8000f50 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	@ 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1f3      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b51      	ldr	r3, [pc, #324]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0xe8>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d063      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c96:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca2:	4b47      	ldr	r3, [pc, #284]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cae:	4b44      	ldr	r3, [pc, #272]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	4b41      	ldr	r3, [pc, #260]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x152>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1c7      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4937      	ldr	r1, [pc, #220]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e03a      	b.n	8002d5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	4b34      	ldr	r3, [pc, #208]	@ (8002dc4 <HAL_RCC_OscConfig+0x244>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe f92b 	bl	8000f50 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7fe f927 	bl	8000f50 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e1a8      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b28      	ldr	r3, [pc, #160]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4925      	ldr	r1, [pc, #148]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e015      	b.n	8002d5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b24      	ldr	r3, [pc, #144]	@ (8002dc4 <HAL_RCC_OscConfig+0x244>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe f90a 	bl	8000f50 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fe f906 	bl	8000f50 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e187      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d036      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d016      	beq.n	8002da0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b15      	ldr	r3, [pc, #84]	@ (8002dc8 <HAL_RCC_OscConfig+0x248>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fe f8ea 	bl	8000f50 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d80:	f7fe f8e6 	bl	8000f50 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e167      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x200>
 8002d9e:	e01b      	b.n	8002dd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da0:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <HAL_RCC_OscConfig+0x248>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7fe f8d3 	bl	8000f50 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	e00e      	b.n	8002dcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dae:	f7fe f8cf 	bl	8000f50 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d907      	bls.n	8002dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e150      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	42470000 	.word	0x42470000
 8002dc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b88      	ldr	r3, [pc, #544]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ea      	bne.n	8002dae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8097 	beq.w	8002f14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b81      	ldr	r3, [pc, #516]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10f      	bne.n	8002e16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	4a7c      	ldr	r2, [pc, #496]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e06:	4b7a      	ldr	r3, [pc, #488]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b77      	ldr	r3, [pc, #476]	@ (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d118      	bne.n	8002e54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e22:	4b74      	ldr	r3, [pc, #464]	@ (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a73      	ldr	r2, [pc, #460]	@ (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe f88f 	bl	8000f50 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7fe f88b 	bl	8000f50 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e10c      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2ea>
 8002e5c:	4b64      	ldr	r3, [pc, #400]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e60:	4a63      	ldr	r2, [pc, #396]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x324>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x30c>
 8002e72:	4b5f      	ldr	r3, [pc, #380]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e76:	4a5e      	ldr	r2, [pc, #376]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e82:	4a5b      	ldr	r2, [pc, #364]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x324>
 8002e8c:	4b58      	ldr	r3, [pc, #352]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e90:	4a57      	ldr	r2, [pc, #348]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e98:	4b55      	ldr	r3, [pc, #340]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9c:	4a54      	ldr	r2, [pc, #336]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	f023 0304 	bic.w	r3, r3, #4
 8002ea2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d015      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe f850 	bl	8000f50 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb4:	f7fe f84c 	bl	8000f50 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e0cb      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eca:	4b49      	ldr	r3, [pc, #292]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0ee      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x334>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed8:	f7fe f83a 	bl	8000f50 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe f836 	bl	8000f50 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0b5      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ee      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f08:	4b39      	ldr	r3, [pc, #228]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	4a38      	ldr	r2, [pc, #224]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80a1 	beq.w	8003060 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f1e:	4b34      	ldr	r3, [pc, #208]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d05c      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d141      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	4b31      	ldr	r3, [pc, #196]	@ (8002ff8 <HAL_RCC_OscConfig+0x478>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe f80a 	bl	8000f50 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f40:	f7fe f806 	bl	8000f50 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e087      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	4b27      	ldr	r3, [pc, #156]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	491b      	ldr	r1, [pc, #108]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <HAL_RCC_OscConfig+0x478>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fd ffdf 	bl	8000f50 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fd ffdb 	bl	8000f50 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e05c      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa8:	4b11      	ldr	r3, [pc, #68]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x416>
 8002fb4:	e054      	b.n	8003060 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ff8 <HAL_RCC_OscConfig+0x478>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fd ffc8 	bl	8000f50 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fd ffc4 	bl	8000f50 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e045      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x444>
 8002fe2:	e03d      	b.n	8003060 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e038      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40007000 	.word	0x40007000
 8002ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <HAL_RCC_OscConfig+0x4ec>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d028      	beq.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d121      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d11a      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800302c:	4013      	ands	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003034:	4293      	cmp	r3, r2
 8003036:	d111      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	3b01      	subs	r3, #1
 8003046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0cc      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b68      	ldr	r3, [pc, #416]	@ (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d90c      	bls.n	80030ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b65      	ldr	r3, [pc, #404]	@ (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b63      	ldr	r3, [pc, #396]	@ (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0b8      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c4:	4b59      	ldr	r3, [pc, #356]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a58      	ldr	r2, [pc, #352]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030dc:	4b53      	ldr	r3, [pc, #332]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a52      	ldr	r2, [pc, #328]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	4b50      	ldr	r3, [pc, #320]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	494d      	ldr	r1, [pc, #308]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d044      	beq.n	8003190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	4b47      	ldr	r3, [pc, #284]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d119      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e07f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d003      	beq.n	800312e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312a:	2b03      	cmp	r3, #3
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	4b3f      	ldr	r3, [pc, #252]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313e:	4b3b      	ldr	r3, [pc, #236]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e067      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314e:	4b37      	ldr	r3, [pc, #220]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 0203 	bic.w	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4934      	ldr	r1, [pc, #208]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003160:	f7fd fef6 	bl	8000f50 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	e00a      	b.n	800317e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003168:	f7fd fef2 	bl	8000f50 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e04f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	4b2b      	ldr	r3, [pc, #172]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 020c 	and.w	r2, r3, #12
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	429a      	cmp	r2, r3
 800318e:	d1eb      	bne.n	8003168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003190:	4b25      	ldr	r3, [pc, #148]	@ (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d20c      	bcs.n	80031b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b22      	ldr	r3, [pc, #136]	@ (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b20      	ldr	r3, [pc, #128]	@ (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e032      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4916      	ldr	r1, [pc, #88]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e2:	4b12      	ldr	r3, [pc, #72]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	490e      	ldr	r1, [pc, #56]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031f6:	f000 f821 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80031fa:	4602      	mov	r2, r0
 80031fc:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	490a      	ldr	r1, [pc, #40]	@ (8003230 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	5ccb      	ldrb	r3, [r1, r3]
 800320a:	fa22 f303 	lsr.w	r3, r2, r3
 800320e:	4a09      	ldr	r2, [pc, #36]	@ (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003212:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd fe56 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023c00 	.word	0x40023c00
 800322c:	40023800 	.word	0x40023800
 8003230:	0801268c 	.word	0x0801268c
 8003234:	20000000 	.word	0x20000000
 8003238:	20000004 	.word	0x20000004

0800323c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800323c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003240:	b090      	sub	sp, #64	@ 0x40
 8003242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003254:	4b59      	ldr	r3, [pc, #356]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d00d      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x40>
 8003260:	2b08      	cmp	r3, #8
 8003262:	f200 80a1 	bhi.w	80033a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x34>
 800326a:	2b04      	cmp	r3, #4
 800326c:	d003      	beq.n	8003276 <HAL_RCC_GetSysClockFreq+0x3a>
 800326e:	e09b      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b53      	ldr	r3, [pc, #332]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003272:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003274:	e09b      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003276:	4b53      	ldr	r3, [pc, #332]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003278:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800327a:	e098      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327c:	4b4f      	ldr	r3, [pc, #316]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003284:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003286:	4b4d      	ldr	r3, [pc, #308]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d028      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	4b4a      	ldr	r3, [pc, #296]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	2200      	movs	r2, #0
 800329a:	623b      	str	r3, [r7, #32]
 800329c:	627a      	str	r2, [r7, #36]	@ 0x24
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032a4:	2100      	movs	r1, #0
 80032a6:	4b47      	ldr	r3, [pc, #284]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032a8:	fb03 f201 	mul.w	r2, r3, r1
 80032ac:	2300      	movs	r3, #0
 80032ae:	fb00 f303 	mul.w	r3, r0, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	4a43      	ldr	r2, [pc, #268]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032b6:	fba0 1202 	umull	r1, r2, r0, r2
 80032ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032bc:	460a      	mov	r2, r1
 80032be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032c2:	4413      	add	r3, r2
 80032c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c8:	2200      	movs	r2, #0
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	61fa      	str	r2, [r7, #28]
 80032ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032d6:	f7fc ffd3 	bl	8000280 <__aeabi_uldivmod>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4613      	mov	r3, r2
 80032e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032e2:	e053      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e4:	4b35      	ldr	r3, [pc, #212]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	2200      	movs	r2, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	617a      	str	r2, [r7, #20]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032f6:	f04f 0b00 	mov.w	fp, #0
 80032fa:	4652      	mov	r2, sl
 80032fc:	465b      	mov	r3, fp
 80032fe:	f04f 0000 	mov.w	r0, #0
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	0159      	lsls	r1, r3, #5
 8003308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800330c:	0150      	lsls	r0, r2, #5
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	ebb2 080a 	subs.w	r8, r2, sl
 8003316:	eb63 090b 	sbc.w	r9, r3, fp
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003326:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800332a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800332e:	ebb2 0408 	subs.w	r4, r2, r8
 8003332:	eb63 0509 	sbc.w	r5, r3, r9
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	00eb      	lsls	r3, r5, #3
 8003340:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003344:	00e2      	lsls	r2, r4, #3
 8003346:	4614      	mov	r4, r2
 8003348:	461d      	mov	r5, r3
 800334a:	eb14 030a 	adds.w	r3, r4, sl
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	eb45 030b 	adc.w	r3, r5, fp
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003362:	4629      	mov	r1, r5
 8003364:	028b      	lsls	r3, r1, #10
 8003366:	4621      	mov	r1, r4
 8003368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800336c:	4621      	mov	r1, r4
 800336e:	028a      	lsls	r2, r1, #10
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003376:	2200      	movs	r2, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	60fa      	str	r2, [r7, #12]
 800337c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003380:	f7fc ff7e 	bl	8000280 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	3301      	adds	r3, #1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800339c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033a6:	e002      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a8:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80033aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3740      	adds	r7, #64	@ 0x40
 80033b4:	46bd      	mov	sp, r7
 80033b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	00f42400 	.word	0x00f42400
 80033c4:	017d7840 	.word	0x017d7840

080033c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000000 	.word	0x20000000

080033e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e4:	f7ff fff0 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0a9b      	lsrs	r3, r3, #10
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	@ (8003404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	0801269c 	.word	0x0801269c

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800340c:	f7ff ffdc 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b05      	ldr	r3, [pc, #20]	@ (8003428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	0b5b      	lsrs	r3, r3, #13
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4903      	ldr	r1, [pc, #12]	@ (800342c <HAL_RCC_GetPCLK2Freq+0x24>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40023800 	.word	0x40023800
 800342c:	0801269c 	.word	0x0801269c

08003430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e042      	b.n	80034c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fa4e 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2224      	movs	r2, #36	@ 0x24
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fc99 	bl	8003dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b0ba      	sub	sp, #232	@ 0xe8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800350e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10f      	bne.n	8003536 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_UART_IRQHandler+0x66>
 8003522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fb7e 	bl	8003c30 <UART_Receive_IT>
      return;
 8003534:	e273      	b.n	8003a1e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80de 	beq.w	80036fc <HAL_UART_IRQHandler+0x22c>
 8003540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d106      	bne.n	800355a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800354c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003550:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80d1 	beq.w	80036fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800355a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00b      	beq.n	800357e <HAL_UART_IRQHandler+0xae>
 8003566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800356a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003576:	f043 0201 	orr.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_UART_IRQHandler+0xd2>
 800358a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	f043 0202 	orr.w	r2, r3, #2
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_UART_IRQHandler+0xf6>
 80035ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f043 0204 	orr.w	r2, r3, #4
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d011      	beq.n	80035f6 <HAL_UART_IRQHandler+0x126>
 80035d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d105      	bne.n	80035ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0208 	orr.w	r2, r3, #8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 820a 	beq.w	8003a14 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_UART_IRQHandler+0x14e>
 800360c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fb09 	bl	8003c30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003628:	2b40      	cmp	r3, #64	@ 0x40
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <HAL_UART_IRQHandler+0x17a>
 8003642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d04f      	beq.n	80036ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fa14 	bl	8003a78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365a:	2b40      	cmp	r3, #64	@ 0x40
 800365c:	d141      	bne.n	80036e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3314      	adds	r3, #20
 8003664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003674:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800367c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3314      	adds	r3, #20
 8003686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800368a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800368e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003696:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1d9      	bne.n	800365e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d013      	beq.n	80036da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b6:	4a8a      	ldr	r2, [pc, #552]	@ (80038e0 <HAL_UART_IRQHandler+0x410>)
 80036b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fdf7 	bl	80012b2 <HAL_DMA_Abort_IT>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036d4:	4610      	mov	r0, r2
 80036d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	e00e      	b.n	80036f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f9b6 	bl	8003a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	e00a      	b.n	80036f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f9b2 	bl	8003a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	e006      	b.n	80036f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f9ae 	bl	8003a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80036f6:	e18d      	b.n	8003a14 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	bf00      	nop
    return;
 80036fa:	e18b      	b.n	8003a14 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003700:	2b01      	cmp	r3, #1
 8003702:	f040 8167 	bne.w	80039d4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8160 	beq.w	80039d4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8159 	beq.w	80039d4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003742:	2b40      	cmp	r3, #64	@ 0x40
 8003744:	f040 80ce 	bne.w	80038e4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003754:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80a9 	beq.w	80038b0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003766:	429a      	cmp	r2, r3
 8003768:	f080 80a2 	bcs.w	80038b0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003772:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377e:	f000 8088 	beq.w	8003892 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003798:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800379c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1d9      	bne.n	8003782 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3314      	adds	r3, #20
 80037d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3314      	adds	r3, #20
 80037ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80037f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80037fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e1      	bne.n	80037ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3314      	adds	r3, #20
 8003810:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800381a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800381c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3314      	adds	r3, #20
 800382a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800382e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003830:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003832:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003834:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003836:	e841 2300 	strex	r3, r2, [r1]
 800383a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800383c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1e3      	bne.n	800380a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	330c      	adds	r3, #12
 8003856:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003862:	f023 0310 	bic.w	r3, r3, #16
 8003866:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	330c      	adds	r3, #12
 8003870:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003874:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003876:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800387a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e3      	bne.n	8003850 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd fca0 	bl	80011d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2202      	movs	r2, #2
 8003896:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	4619      	mov	r1, r3
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f8d9 	bl	8003a60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80038ae:	e0b3      	b.n	8003a18 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038b8:	429a      	cmp	r2, r3
 80038ba:	f040 80ad 	bne.w	8003a18 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c8:	f040 80a6 	bne.w	8003a18 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f8c1 	bl	8003a60 <HAL_UARTEx_RxEventCallback>
      return;
 80038de:	e09b      	b.n	8003a18 <HAL_UART_IRQHandler+0x548>
 80038e0:	08003b3f 	.word	0x08003b3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 808e 	beq.w	8003a1c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8089 	beq.w	8003a1c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800391a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003920:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800392e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003930:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003934:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800393c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e3      	bne.n	800390a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3314      	adds	r3, #20
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	623b      	str	r3, [r7, #32]
   return(result);
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3314      	adds	r3, #20
 8003962:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003966:	633a      	str	r2, [r7, #48]	@ 0x30
 8003968:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800396c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e3      	bne.n	8003942 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	60fb      	str	r3, [r7, #12]
   return(result);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0310 	bic.w	r3, r3, #16
 800399e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039ac:	61fa      	str	r2, [r7, #28]
 80039ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	69b9      	ldr	r1, [r7, #24]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	617b      	str	r3, [r7, #20]
   return(result);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e3      	bne.n	8003988 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f847 	bl	8003a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039d2:	e023      	b.n	8003a1c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_UART_IRQHandler+0x524>
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f8b7 	bl	8003b60 <UART_Transmit_IT>
    return;
 80039f2:	e014      	b.n	8003a1e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00e      	beq.n	8003a1e <HAL_UART_IRQHandler+0x54e>
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f8f7 	bl	8003c00 <UART_EndTransmit_IT>
    return;
 8003a12:	e004      	b.n	8003a1e <HAL_UART_IRQHandler+0x54e>
    return;
 8003a14:	bf00      	nop
 8003a16:	e002      	b.n	8003a1e <HAL_UART_IRQHandler+0x54e>
      return;
 8003a18:	bf00      	nop
 8003a1a:	e000      	b.n	8003a1e <HAL_UART_IRQHandler+0x54e>
      return;
 8003a1c:	bf00      	nop
  }
}
 8003a1e:	37e8      	adds	r7, #232	@ 0xe8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b095      	sub	sp, #84	@ 0x54
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aa0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e5      	bne.n	8003a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3314      	adds	r3, #20
 8003aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3314      	adds	r3, #20
 8003ad2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ad4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e5      	bne.n	8003ab4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d119      	bne.n	8003b24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	e853 3f00 	ldrex	r3, [r3]
 8003afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f023 0310 	bic.w	r3, r3, #16
 8003b06:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b10:	61ba      	str	r2, [r7, #24]
 8003b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b14:	6979      	ldr	r1, [r7, #20]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e5      	bne.n	8003af0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b32:	bf00      	nop
 8003b34:	3754      	adds	r7, #84	@ 0x54
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f7ff ff7a 	bl	8003a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b21      	cmp	r3, #33	@ 0x21
 8003b72:	d13e      	bne.n	8003bf2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7c:	d114      	bne.n	8003ba8 <UART_Transmit_IT+0x48>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d110      	bne.n	8003ba8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	1c9a      	adds	r2, r3, #2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	621a      	str	r2, [r3, #32]
 8003ba6:	e008      	b.n	8003bba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	1c59      	adds	r1, r3, #1
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6211      	str	r1, [r2, #32]
 8003bb2:	781a      	ldrb	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10f      	bne.n	8003bee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e000      	b.n	8003bf4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
  }
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff feff 	bl	8003a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08c      	sub	sp, #48	@ 0x30
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b22      	cmp	r3, #34	@ 0x22
 8003c4a:	f040 80aa 	bne.w	8003da2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c56:	d115      	bne.n	8003c84 <UART_Receive_IT+0x54>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d111      	bne.n	8003c84 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7c:	1c9a      	adds	r2, r3, #2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c82:	e024      	b.n	8003cce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c92:	d007      	beq.n	8003ca4 <UART_Receive_IT+0x74>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <UART_Receive_IT+0x82>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e008      	b.n	8003cc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d15d      	bne.n	8003d9e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0220 	bic.w	r2, r2, #32
 8003cf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d135      	bne.n	8003d94 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f023 0310 	bic.w	r3, r3, #16
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4e:	623a      	str	r2, [r7, #32]
 8003d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	69f9      	ldr	r1, [r7, #28]
 8003d54:	6a3a      	ldr	r2, [r7, #32]
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e5      	bne.n	8003d2e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d10a      	bne.n	8003d86 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fe67 	bl	8003a60 <HAL_UARTEx_RxEventCallback>
 8003d92:	e002      	b.n	8003d9a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fe4f 	bl	8003a38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e002      	b.n	8003da4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3730      	adds	r7, #48	@ 0x30
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db0:	b0c0      	sub	sp, #256	@ 0x100
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	68d9      	ldr	r1, [r3, #12]
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	ea40 0301 	orr.w	r3, r0, r1
 8003dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e04:	f021 010c 	bic.w	r1, r1, #12
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e12:	430b      	orrs	r3, r1
 8003e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e26:	6999      	ldr	r1, [r3, #24]
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	ea40 0301 	orr.w	r3, r0, r1
 8003e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b8f      	ldr	r3, [pc, #572]	@ (8004078 <UART_SetConfig+0x2cc>)
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d005      	beq.n	8003e4c <UART_SetConfig+0xa0>
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b8d      	ldr	r3, [pc, #564]	@ (800407c <UART_SetConfig+0x2d0>)
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d104      	bne.n	8003e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e4c:	f7ff fadc 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8003e50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e54:	e003      	b.n	8003e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e56:	f7ff fac3 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8003e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e68:	f040 810c 	bne.w	8004084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e70:	2200      	movs	r2, #0
 8003e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e7e:	4622      	mov	r2, r4
 8003e80:	462b      	mov	r3, r5
 8003e82:	1891      	adds	r1, r2, r2
 8003e84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e86:	415b      	adcs	r3, r3
 8003e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e8e:	4621      	mov	r1, r4
 8003e90:	eb12 0801 	adds.w	r8, r2, r1
 8003e94:	4629      	mov	r1, r5
 8003e96:	eb43 0901 	adc.w	r9, r3, r1
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eae:	4690      	mov	r8, r2
 8003eb0:	4699      	mov	r9, r3
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	eb18 0303 	adds.w	r3, r8, r3
 8003eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ebc:	462b      	mov	r3, r5
 8003ebe:	eb49 0303 	adc.w	r3, r9, r3
 8003ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eda:	460b      	mov	r3, r1
 8003edc:	18db      	adds	r3, r3, r3
 8003ede:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	eb42 0303 	adc.w	r3, r2, r3
 8003ee6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ef0:	f7fc f9c6 	bl	8000280 <__aeabi_uldivmod>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4b61      	ldr	r3, [pc, #388]	@ (8004080 <UART_SetConfig+0x2d4>)
 8003efa:	fba3 2302 	umull	r2, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	011c      	lsls	r4, r3, #4
 8003f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f14:	4642      	mov	r2, r8
 8003f16:	464b      	mov	r3, r9
 8003f18:	1891      	adds	r1, r2, r2
 8003f1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f1c:	415b      	adcs	r3, r3
 8003f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f24:	4641      	mov	r1, r8
 8003f26:	eb12 0a01 	adds.w	sl, r2, r1
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f44:	4692      	mov	sl, r2
 8003f46:	469b      	mov	fp, r3
 8003f48:	4643      	mov	r3, r8
 8003f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f52:	464b      	mov	r3, r9
 8003f54:	eb4b 0303 	adc.w	r3, fp, r3
 8003f58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f70:	460b      	mov	r3, r1
 8003f72:	18db      	adds	r3, r3, r3
 8003f74:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f76:	4613      	mov	r3, r2
 8003f78:	eb42 0303 	adc.w	r3, r2, r3
 8003f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f86:	f7fc f97b 	bl	8000280 <__aeabi_uldivmod>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4b3b      	ldr	r3, [pc, #236]	@ (8004080 <UART_SetConfig+0x2d4>)
 8003f92:	fba3 2301 	umull	r2, r3, r3, r1
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	2264      	movs	r2, #100	@ 0x64
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	1acb      	subs	r3, r1, r3
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fa6:	4b36      	ldr	r3, [pc, #216]	@ (8004080 <UART_SetConfig+0x2d4>)
 8003fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fb4:	441c      	add	r4, r3
 8003fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fc8:	4642      	mov	r2, r8
 8003fca:	464b      	mov	r3, r9
 8003fcc:	1891      	adds	r1, r2, r2
 8003fce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fd0:	415b      	adcs	r3, r3
 8003fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fd8:	4641      	mov	r1, r8
 8003fda:	1851      	adds	r1, r2, r1
 8003fdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fde:	4649      	mov	r1, r9
 8003fe0:	414b      	adcs	r3, r1
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ff0:	4659      	mov	r1, fp
 8003ff2:	00cb      	lsls	r3, r1, #3
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ffa:	4651      	mov	r1, sl
 8003ffc:	00ca      	lsls	r2, r1, #3
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	4603      	mov	r3, r0
 8004004:	4642      	mov	r2, r8
 8004006:	189b      	adds	r3, r3, r2
 8004008:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800400c:	464b      	mov	r3, r9
 800400e:	460a      	mov	r2, r1
 8004010:	eb42 0303 	adc.w	r3, r2, r3
 8004014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004024:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800402c:	460b      	mov	r3, r1
 800402e:	18db      	adds	r3, r3, r3
 8004030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004032:	4613      	mov	r3, r2
 8004034:	eb42 0303 	adc.w	r3, r2, r3
 8004038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800403a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800403e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004042:	f7fc f91d 	bl	8000280 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4b0d      	ldr	r3, [pc, #52]	@ (8004080 <UART_SetConfig+0x2d4>)
 800404c:	fba3 1302 	umull	r1, r3, r3, r2
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	2164      	movs	r1, #100	@ 0x64
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	3332      	adds	r3, #50	@ 0x32
 800405e:	4a08      	ldr	r2, [pc, #32]	@ (8004080 <UART_SetConfig+0x2d4>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	f003 0207 	and.w	r2, r3, #7
 800406a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4422      	add	r2, r4
 8004072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004074:	e106      	b.n	8004284 <UART_SetConfig+0x4d8>
 8004076:	bf00      	nop
 8004078:	40011000 	.word	0x40011000
 800407c:	40011400 	.word	0x40011400
 8004080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004088:	2200      	movs	r2, #0
 800408a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800408e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004096:	4642      	mov	r2, r8
 8004098:	464b      	mov	r3, r9
 800409a:	1891      	adds	r1, r2, r2
 800409c:	6239      	str	r1, [r7, #32]
 800409e:	415b      	adcs	r3, r3
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040a6:	4641      	mov	r1, r8
 80040a8:	1854      	adds	r4, r2, r1
 80040aa:	4649      	mov	r1, r9
 80040ac:	eb43 0501 	adc.w	r5, r3, r1
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	00eb      	lsls	r3, r5, #3
 80040ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040be:	00e2      	lsls	r2, r4, #3
 80040c0:	4614      	mov	r4, r2
 80040c2:	461d      	mov	r5, r3
 80040c4:	4643      	mov	r3, r8
 80040c6:	18e3      	adds	r3, r4, r3
 80040c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040cc:	464b      	mov	r3, r9
 80040ce:	eb45 0303 	adc.w	r3, r5, r3
 80040d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040f2:	4629      	mov	r1, r5
 80040f4:	008b      	lsls	r3, r1, #2
 80040f6:	4621      	mov	r1, r4
 80040f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040fc:	4621      	mov	r1, r4
 80040fe:	008a      	lsls	r2, r1, #2
 8004100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004104:	f7fc f8bc 	bl	8000280 <__aeabi_uldivmod>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4b60      	ldr	r3, [pc, #384]	@ (8004290 <UART_SetConfig+0x4e4>)
 800410e:	fba3 2302 	umull	r2, r3, r3, r2
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	011c      	lsls	r4, r3, #4
 8004116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004120:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004128:	4642      	mov	r2, r8
 800412a:	464b      	mov	r3, r9
 800412c:	1891      	adds	r1, r2, r2
 800412e:	61b9      	str	r1, [r7, #24]
 8004130:	415b      	adcs	r3, r3
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004138:	4641      	mov	r1, r8
 800413a:	1851      	adds	r1, r2, r1
 800413c:	6139      	str	r1, [r7, #16]
 800413e:	4649      	mov	r1, r9
 8004140:	414b      	adcs	r3, r1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004150:	4659      	mov	r1, fp
 8004152:	00cb      	lsls	r3, r1, #3
 8004154:	4651      	mov	r1, sl
 8004156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415a:	4651      	mov	r1, sl
 800415c:	00ca      	lsls	r2, r1, #3
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	4603      	mov	r3, r0
 8004164:	4642      	mov	r2, r8
 8004166:	189b      	adds	r3, r3, r2
 8004168:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800416c:	464b      	mov	r3, r9
 800416e:	460a      	mov	r2, r1
 8004170:	eb42 0303 	adc.w	r3, r2, r3
 8004174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004182:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004190:	4649      	mov	r1, r9
 8004192:	008b      	lsls	r3, r1, #2
 8004194:	4641      	mov	r1, r8
 8004196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800419a:	4641      	mov	r1, r8
 800419c:	008a      	lsls	r2, r1, #2
 800419e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041a2:	f7fc f86d 	bl	8000280 <__aeabi_uldivmod>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4611      	mov	r1, r2
 80041ac:	4b38      	ldr	r3, [pc, #224]	@ (8004290 <UART_SetConfig+0x4e4>)
 80041ae:	fba3 2301 	umull	r2, r3, r3, r1
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2264      	movs	r2, #100	@ 0x64
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	1acb      	subs	r3, r1, r3
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	3332      	adds	r3, #50	@ 0x32
 80041c0:	4a33      	ldr	r2, [pc, #204]	@ (8004290 <UART_SetConfig+0x4e4>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041cc:	441c      	add	r4, r3
 80041ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041d2:	2200      	movs	r2, #0
 80041d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80041d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80041d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041dc:	4642      	mov	r2, r8
 80041de:	464b      	mov	r3, r9
 80041e0:	1891      	adds	r1, r2, r2
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	415b      	adcs	r3, r3
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ec:	4641      	mov	r1, r8
 80041ee:	1851      	adds	r1, r2, r1
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	4649      	mov	r1, r9
 80041f4:	414b      	adcs	r3, r1
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004204:	4659      	mov	r1, fp
 8004206:	00cb      	lsls	r3, r1, #3
 8004208:	4651      	mov	r1, sl
 800420a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420e:	4651      	mov	r1, sl
 8004210:	00ca      	lsls	r2, r1, #3
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	4603      	mov	r3, r0
 8004218:	4642      	mov	r2, r8
 800421a:	189b      	adds	r3, r3, r2
 800421c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800421e:	464b      	mov	r3, r9
 8004220:	460a      	mov	r2, r1
 8004222:	eb42 0303 	adc.w	r3, r2, r3
 8004226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	663b      	str	r3, [r7, #96]	@ 0x60
 8004232:	667a      	str	r2, [r7, #100]	@ 0x64
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004240:	4649      	mov	r1, r9
 8004242:	008b      	lsls	r3, r1, #2
 8004244:	4641      	mov	r1, r8
 8004246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800424a:	4641      	mov	r1, r8
 800424c:	008a      	lsls	r2, r1, #2
 800424e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004252:	f7fc f815 	bl	8000280 <__aeabi_uldivmod>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4b0d      	ldr	r3, [pc, #52]	@ (8004290 <UART_SetConfig+0x4e4>)
 800425c:	fba3 1302 	umull	r1, r3, r3, r2
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	2164      	movs	r1, #100	@ 0x64
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	3332      	adds	r3, #50	@ 0x32
 800426e:	4a08      	ldr	r2, [pc, #32]	@ (8004290 <UART_SetConfig+0x4e4>)
 8004270:	fba2 2303 	umull	r2, r3, r2, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	f003 020f 	and.w	r2, r3, #15
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4422      	add	r2, r4
 8004282:	609a      	str	r2, [r3, #8]
}
 8004284:	bf00      	nop
 8004286:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800428a:	46bd      	mov	sp, r7
 800428c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004290:	51eb851f 	.word	0x51eb851f

08004294 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800429a:	4b87      	ldr	r3, [pc, #540]	@ (80044b8 <MX_LWIP_Init+0x224>)
 800429c:	22c0      	movs	r2, #192	@ 0xc0
 800429e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80042a0:	4b85      	ldr	r3, [pc, #532]	@ (80044b8 <MX_LWIP_Init+0x224>)
 80042a2:	22a8      	movs	r2, #168	@ 0xa8
 80042a4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80042a6:	4b84      	ldr	r3, [pc, #528]	@ (80044b8 <MX_LWIP_Init+0x224>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 80042ac:	4b82      	ldr	r3, [pc, #520]	@ (80044b8 <MX_LWIP_Init+0x224>)
 80042ae:	2232      	movs	r2, #50	@ 0x32
 80042b0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80042b2:	4b82      	ldr	r3, [pc, #520]	@ (80044bc <MX_LWIP_Init+0x228>)
 80042b4:	22ff      	movs	r2, #255	@ 0xff
 80042b6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80042b8:	4b80      	ldr	r3, [pc, #512]	@ (80044bc <MX_LWIP_Init+0x228>)
 80042ba:	22ff      	movs	r2, #255	@ 0xff
 80042bc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80042be:	4b7f      	ldr	r3, [pc, #508]	@ (80044bc <MX_LWIP_Init+0x228>)
 80042c0:	22ff      	movs	r2, #255	@ 0xff
 80042c2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80042c4:	4b7d      	ldr	r3, [pc, #500]	@ (80044bc <MX_LWIP_Init+0x228>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80042ca:	4b7d      	ldr	r3, [pc, #500]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 80042cc:	22c0      	movs	r2, #192	@ 0xc0
 80042ce:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80042d0:	4b7b      	ldr	r3, [pc, #492]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 80042d2:	22a8      	movs	r2, #168	@ 0xa8
 80042d4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80042d6:	4b7a      	ldr	r3, [pc, #488]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 80042d8:	2201      	movs	r2, #1
 80042da:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80042dc:	4b78      	ldr	r3, [pc, #480]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 80042de:	2201      	movs	r2, #1
 80042e0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80042e2:	f000 fd02 	bl	8004cea <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80042e6:	4b74      	ldr	r3, [pc, #464]	@ (80044b8 <MX_LWIP_Init+0x224>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	061a      	lsls	r2, r3, #24
 80042ec:	4b72      	ldr	r3, [pc, #456]	@ (80044b8 <MX_LWIP_Init+0x224>)
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	431a      	orrs	r2, r3
 80042f4:	4b70      	ldr	r3, [pc, #448]	@ (80044b8 <MX_LWIP_Init+0x224>)
 80042f6:	789b      	ldrb	r3, [r3, #2]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	4313      	orrs	r3, r2
 80042fc:	4a6e      	ldr	r2, [pc, #440]	@ (80044b8 <MX_LWIP_Init+0x224>)
 80042fe:	78d2      	ldrb	r2, [r2, #3]
 8004300:	4313      	orrs	r3, r2
 8004302:	061a      	lsls	r2, r3, #24
 8004304:	4b6c      	ldr	r3, [pc, #432]	@ (80044b8 <MX_LWIP_Init+0x224>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	0619      	lsls	r1, r3, #24
 800430a:	4b6b      	ldr	r3, [pc, #428]	@ (80044b8 <MX_LWIP_Init+0x224>)
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	4319      	orrs	r1, r3
 8004312:	4b69      	ldr	r3, [pc, #420]	@ (80044b8 <MX_LWIP_Init+0x224>)
 8004314:	789b      	ldrb	r3, [r3, #2]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	430b      	orrs	r3, r1
 800431a:	4967      	ldr	r1, [pc, #412]	@ (80044b8 <MX_LWIP_Init+0x224>)
 800431c:	78c9      	ldrb	r1, [r1, #3]
 800431e:	430b      	orrs	r3, r1
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004326:	431a      	orrs	r2, r3
 8004328:	4b63      	ldr	r3, [pc, #396]	@ (80044b8 <MX_LWIP_Init+0x224>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	0619      	lsls	r1, r3, #24
 800432e:	4b62      	ldr	r3, [pc, #392]	@ (80044b8 <MX_LWIP_Init+0x224>)
 8004330:	785b      	ldrb	r3, [r3, #1]
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	4319      	orrs	r1, r3
 8004336:	4b60      	ldr	r3, [pc, #384]	@ (80044b8 <MX_LWIP_Init+0x224>)
 8004338:	789b      	ldrb	r3, [r3, #2]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	430b      	orrs	r3, r1
 800433e:	495e      	ldr	r1, [pc, #376]	@ (80044b8 <MX_LWIP_Init+0x224>)
 8004340:	78c9      	ldrb	r1, [r1, #3]
 8004342:	430b      	orrs	r3, r1
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800434a:	431a      	orrs	r2, r3
 800434c:	4b5a      	ldr	r3, [pc, #360]	@ (80044b8 <MX_LWIP_Init+0x224>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	0619      	lsls	r1, r3, #24
 8004352:	4b59      	ldr	r3, [pc, #356]	@ (80044b8 <MX_LWIP_Init+0x224>)
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	4319      	orrs	r1, r3
 800435a:	4b57      	ldr	r3, [pc, #348]	@ (80044b8 <MX_LWIP_Init+0x224>)
 800435c:	789b      	ldrb	r3, [r3, #2]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	430b      	orrs	r3, r1
 8004362:	4955      	ldr	r1, [pc, #340]	@ (80044b8 <MX_LWIP_Init+0x224>)
 8004364:	78c9      	ldrb	r1, [r1, #3]
 8004366:	430b      	orrs	r3, r1
 8004368:	0e1b      	lsrs	r3, r3, #24
 800436a:	4313      	orrs	r3, r2
 800436c:	4a55      	ldr	r2, [pc, #340]	@ (80044c4 <MX_LWIP_Init+0x230>)
 800436e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004370:	4b52      	ldr	r3, [pc, #328]	@ (80044bc <MX_LWIP_Init+0x228>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	061a      	lsls	r2, r3, #24
 8004376:	4b51      	ldr	r3, [pc, #324]	@ (80044bc <MX_LWIP_Init+0x228>)
 8004378:	785b      	ldrb	r3, [r3, #1]
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	431a      	orrs	r2, r3
 800437e:	4b4f      	ldr	r3, [pc, #316]	@ (80044bc <MX_LWIP_Init+0x228>)
 8004380:	789b      	ldrb	r3, [r3, #2]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	4313      	orrs	r3, r2
 8004386:	4a4d      	ldr	r2, [pc, #308]	@ (80044bc <MX_LWIP_Init+0x228>)
 8004388:	78d2      	ldrb	r2, [r2, #3]
 800438a:	4313      	orrs	r3, r2
 800438c:	061a      	lsls	r2, r3, #24
 800438e:	4b4b      	ldr	r3, [pc, #300]	@ (80044bc <MX_LWIP_Init+0x228>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	0619      	lsls	r1, r3, #24
 8004394:	4b49      	ldr	r3, [pc, #292]	@ (80044bc <MX_LWIP_Init+0x228>)
 8004396:	785b      	ldrb	r3, [r3, #1]
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	4319      	orrs	r1, r3
 800439c:	4b47      	ldr	r3, [pc, #284]	@ (80044bc <MX_LWIP_Init+0x228>)
 800439e:	789b      	ldrb	r3, [r3, #2]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	430b      	orrs	r3, r1
 80043a4:	4945      	ldr	r1, [pc, #276]	@ (80044bc <MX_LWIP_Init+0x228>)
 80043a6:	78c9      	ldrb	r1, [r1, #3]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80043b0:	431a      	orrs	r2, r3
 80043b2:	4b42      	ldr	r3, [pc, #264]	@ (80044bc <MX_LWIP_Init+0x228>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	0619      	lsls	r1, r3, #24
 80043b8:	4b40      	ldr	r3, [pc, #256]	@ (80044bc <MX_LWIP_Init+0x228>)
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	4319      	orrs	r1, r3
 80043c0:	4b3e      	ldr	r3, [pc, #248]	@ (80044bc <MX_LWIP_Init+0x228>)
 80043c2:	789b      	ldrb	r3, [r3, #2]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	430b      	orrs	r3, r1
 80043c8:	493c      	ldr	r1, [pc, #240]	@ (80044bc <MX_LWIP_Init+0x228>)
 80043ca:	78c9      	ldrb	r1, [r1, #3]
 80043cc:	430b      	orrs	r3, r1
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80043d4:	431a      	orrs	r2, r3
 80043d6:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <MX_LWIP_Init+0x228>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	0619      	lsls	r1, r3, #24
 80043dc:	4b37      	ldr	r3, [pc, #220]	@ (80044bc <MX_LWIP_Init+0x228>)
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	041b      	lsls	r3, r3, #16
 80043e2:	4319      	orrs	r1, r3
 80043e4:	4b35      	ldr	r3, [pc, #212]	@ (80044bc <MX_LWIP_Init+0x228>)
 80043e6:	789b      	ldrb	r3, [r3, #2]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	430b      	orrs	r3, r1
 80043ec:	4933      	ldr	r1, [pc, #204]	@ (80044bc <MX_LWIP_Init+0x228>)
 80043ee:	78c9      	ldrb	r1, [r1, #3]
 80043f0:	430b      	orrs	r3, r1
 80043f2:	0e1b      	lsrs	r3, r3, #24
 80043f4:	4313      	orrs	r3, r2
 80043f6:	4a34      	ldr	r2, [pc, #208]	@ (80044c8 <MX_LWIP_Init+0x234>)
 80043f8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80043fa:	4b31      	ldr	r3, [pc, #196]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	061a      	lsls	r2, r3, #24
 8004400:	4b2f      	ldr	r3, [pc, #188]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	431a      	orrs	r2, r3
 8004408:	4b2d      	ldr	r3, [pc, #180]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 800440a:	789b      	ldrb	r3, [r3, #2]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	4313      	orrs	r3, r2
 8004410:	4a2b      	ldr	r2, [pc, #172]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 8004412:	78d2      	ldrb	r2, [r2, #3]
 8004414:	4313      	orrs	r3, r2
 8004416:	061a      	lsls	r2, r3, #24
 8004418:	4b29      	ldr	r3, [pc, #164]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	0619      	lsls	r1, r3, #24
 800441e:	4b28      	ldr	r3, [pc, #160]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	4319      	orrs	r1, r3
 8004426:	4b26      	ldr	r3, [pc, #152]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 8004428:	789b      	ldrb	r3, [r3, #2]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	430b      	orrs	r3, r1
 800442e:	4924      	ldr	r1, [pc, #144]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 8004430:	78c9      	ldrb	r1, [r1, #3]
 8004432:	430b      	orrs	r3, r1
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800443a:	431a      	orrs	r2, r3
 800443c:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	0619      	lsls	r1, r3, #24
 8004442:	4b1f      	ldr	r3, [pc, #124]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	4319      	orrs	r1, r3
 800444a:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 800444c:	789b      	ldrb	r3, [r3, #2]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	430b      	orrs	r3, r1
 8004452:	491b      	ldr	r1, [pc, #108]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 8004454:	78c9      	ldrb	r1, [r1, #3]
 8004456:	430b      	orrs	r3, r1
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800445e:	431a      	orrs	r2, r3
 8004460:	4b17      	ldr	r3, [pc, #92]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	0619      	lsls	r1, r3, #24
 8004466:	4b16      	ldr	r3, [pc, #88]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	4319      	orrs	r1, r3
 800446e:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 8004470:	789b      	ldrb	r3, [r3, #2]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	430b      	orrs	r3, r1
 8004476:	4912      	ldr	r1, [pc, #72]	@ (80044c0 <MX_LWIP_Init+0x22c>)
 8004478:	78c9      	ldrb	r1, [r1, #3]
 800447a:	430b      	orrs	r3, r1
 800447c:	0e1b      	lsrs	r3, r3, #24
 800447e:	4313      	orrs	r3, r2
 8004480:	4a12      	ldr	r2, [pc, #72]	@ (80044cc <MX_LWIP_Init+0x238>)
 8004482:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004484:	4b12      	ldr	r3, [pc, #72]	@ (80044d0 <MX_LWIP_Init+0x23c>)
 8004486:	9302      	str	r3, [sp, #8]
 8004488:	4b12      	ldr	r3, [pc, #72]	@ (80044d4 <MX_LWIP_Init+0x240>)
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	2300      	movs	r3, #0
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	4b0e      	ldr	r3, [pc, #56]	@ (80044cc <MX_LWIP_Init+0x238>)
 8004492:	4a0d      	ldr	r2, [pc, #52]	@ (80044c8 <MX_LWIP_Init+0x234>)
 8004494:	490b      	ldr	r1, [pc, #44]	@ (80044c4 <MX_LWIP_Init+0x230>)
 8004496:	4810      	ldr	r0, [pc, #64]	@ (80044d8 <MX_LWIP_Init+0x244>)
 8004498:	f001 f912 	bl	80056c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800449c:	480e      	ldr	r0, [pc, #56]	@ (80044d8 <MX_LWIP_Init+0x244>)
 800449e:	f001 fac1 	bl	8005a24 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80044a2:	480d      	ldr	r0, [pc, #52]	@ (80044d8 <MX_LWIP_Init+0x244>)
 80044a4:	f001 face 	bl	8005a44 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80044a8:	490c      	ldr	r1, [pc, #48]	@ (80044dc <MX_LWIP_Init+0x248>)
 80044aa:	480b      	ldr	r0, [pc, #44]	@ (80044d8 <MX_LWIP_Init+0x244>)
 80044ac:	f001 fbcc 	bl	8005c48 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80044b0:	bf00      	nop
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000138 	.word	0x20000138
 80044bc:	2000013c 	.word	0x2000013c
 80044c0:	20000140 	.word	0x20000140
 80044c4:	2000012c 	.word	0x2000012c
 80044c8:	20000130 	.word	0x20000130
 80044cc:	20000134 	.word	0x20000134
 80044d0:	0800eabd 	.word	0x0800eabd
 80044d4:	080047fd 	.word	0x080047fd
 80044d8:	200000f8 	.word	0x200000f8
 80044dc:	08004531 	.word	0x08004531

080044e0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80044e8:	f7fc fd32 	bl	8000f50 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b08      	ldr	r3, [pc, #32]	@ (8004510 <Ethernet_Link_Periodic_Handle+0x30>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b63      	cmp	r3, #99	@ 0x63
 80044f6:	d907      	bls.n	8004508 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80044f8:	f7fc fd2a 	bl	8000f50 <HAL_GetTick>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4a04      	ldr	r2, [pc, #16]	@ (8004510 <Ethernet_Link_Periodic_Handle+0x30>)
 8004500:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fac6 	bl	8004a94 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200000f4 	.word	0x200000f4

08004514 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004518:	4804      	ldr	r0, [pc, #16]	@ (800452c <MX_LWIP_Process+0x18>)
 800451a:	f000 f94f 	bl	80047bc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800451e:	f007 fc11 	bl	800bd44 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004522:	4802      	ldr	r0, [pc, #8]	@ (800452c <MX_LWIP_Process+0x18>)
 8004524:	f7ff ffdc 	bl	80044e0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004528:	bf00      	nop
 800452a:	bd80      	pop	{r7, pc}
 800452c:	200000f8 	.word	0x200000f8

08004530 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004550:	4b44      	ldr	r3, [pc, #272]	@ (8004664 <low_level_init+0x120>)
 8004552:	4a45      	ldr	r2, [pc, #276]	@ (8004668 <low_level_init+0x124>)
 8004554:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004556:	2300      	movs	r3, #0
 8004558:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800455e:	23e1      	movs	r3, #225	@ 0xe1
 8004560:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004562:	2300      	movs	r3, #0
 8004564:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004566:	2300      	movs	r3, #0
 8004568:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800456a:	2300      	movs	r3, #0
 800456c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800456e:	4a3d      	ldr	r2, [pc, #244]	@ (8004664 <low_level_init+0x120>)
 8004570:	f107 0308 	add.w	r3, r7, #8
 8004574:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004576:	4b3b      	ldr	r3, [pc, #236]	@ (8004664 <low_level_init+0x120>)
 8004578:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800457c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800457e:	4b39      	ldr	r3, [pc, #228]	@ (8004664 <low_level_init+0x120>)
 8004580:	4a3a      	ldr	r2, [pc, #232]	@ (800466c <low_level_init+0x128>)
 8004582:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004584:	4b37      	ldr	r3, [pc, #220]	@ (8004664 <low_level_init+0x120>)
 8004586:	4a3a      	ldr	r2, [pc, #232]	@ (8004670 <low_level_init+0x12c>)
 8004588:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800458a:	4b36      	ldr	r3, [pc, #216]	@ (8004664 <low_level_init+0x120>)
 800458c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004590:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004592:	4834      	ldr	r0, [pc, #208]	@ (8004664 <low_level_init+0x120>)
 8004594:	f7fc feb0 	bl	80012f8 <HAL_ETH_Init>
 8004598:	4603      	mov	r3, r0
 800459a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800459c:	2238      	movs	r2, #56	@ 0x38
 800459e:	2100      	movs	r1, #0
 80045a0:	4834      	ldr	r0, [pc, #208]	@ (8004674 <low_level_init+0x130>)
 80045a2:	f00a fcc6 	bl	800ef32 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80045a6:	4b33      	ldr	r3, [pc, #204]	@ (8004674 <low_level_init+0x130>)
 80045a8:	2221      	movs	r2, #33	@ 0x21
 80045aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80045ac:	4b31      	ldr	r3, [pc, #196]	@ (8004674 <low_level_init+0x130>)
 80045ae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80045b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80045b4:	4b2f      	ldr	r3, [pc, #188]	@ (8004674 <low_level_init+0x130>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80045ba:	482f      	ldr	r0, [pc, #188]	@ (8004678 <low_level_init+0x134>)
 80045bc:	f000 ff48 	bl	8005450 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2206      	movs	r2, #6
 80045c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80045c8:	4b26      	ldr	r3, [pc, #152]	@ (8004664 <low_level_init+0x120>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	781a      	ldrb	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80045d4:	4b23      	ldr	r3, [pc, #140]	@ (8004664 <low_level_init+0x120>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	785a      	ldrb	r2, [r3, #1]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80045e0:	4b20      	ldr	r3, [pc, #128]	@ (8004664 <low_level_init+0x120>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	789a      	ldrb	r2, [r3, #2]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80045ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004664 <low_level_init+0x120>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	78da      	ldrb	r2, [r3, #3]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80045f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004664 <low_level_init+0x120>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	791a      	ldrb	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004604:	4b17      	ldr	r3, [pc, #92]	@ (8004664 <low_level_init+0x120>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	795a      	ldrb	r2, [r3, #5]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004616:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800461e:	f043 030a 	orr.w	r3, r3, #10
 8004622:	b2da      	uxtb	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800462a:	4914      	ldr	r1, [pc, #80]	@ (800467c <low_level_init+0x138>)
 800462c:	4814      	ldr	r0, [pc, #80]	@ (8004680 <low_level_init+0x13c>)
 800462e:	f7fc fb22 	bl	8000c76 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004632:	4813      	ldr	r0, [pc, #76]	@ (8004680 <low_level_init+0x13c>)
 8004634:	f7fc fb51 	bl	8000cda <LAN8742_Init>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d006      	beq.n	800464c <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f001 fad2 	bl	8005be8 <netif_set_link_down>
    netif_set_down(netif);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f001 fa69 	bl	8005b1c <netif_set_down>
 800464a:	e008      	b.n	800465e <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa1e 	bl	8004a94 <ethernet_link_check_state>
 8004658:	e001      	b.n	800465e <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800465a:	f7fc f91f 	bl	800089c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20004c10 	.word	0x20004c10
 8004668:	40028000 	.word	0x40028000
 800466c:	20004b70 	.word	0x20004b70
 8004670:	20004ad0 	.word	0x20004ad0
 8004674:	20004cc0 	.word	0x20004cc0
 8004678:	080126a4 	.word	0x080126a4
 800467c:	2000000c 	.word	0x2000000c
 8004680:	20004cf8 	.word	0x20004cf8

08004684 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b092      	sub	sp, #72	@ 0x48
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800469c:	f107 030c 	add.w	r3, r7, #12
 80046a0:	2230      	movs	r2, #48	@ 0x30
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f00a fc44 	bl	800ef32 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80046aa:	f107 030c 	add.w	r3, r7, #12
 80046ae:	2230      	movs	r2, #48	@ 0x30
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f00a fc3d 	bl	800ef32 <memset>

  for(q = p; q != NULL; q = q->next)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80046bc:	e045      	b.n	800474a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80046be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d902      	bls.n	80046ca <low_level_output+0x46>
      return ERR_IF;
 80046c4:	f06f 030b 	mvn.w	r3, #11
 80046c8:	e055      	b.n	8004776 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80046ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	3348      	adds	r3, #72	@ 0x48
 80046da:	443b      	add	r3, r7
 80046dc:	3b3c      	subs	r3, #60	@ 0x3c
 80046de:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80046e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046e2:	895b      	ldrh	r3, [r3, #10]
 80046e4:	4619      	mov	r1, r3
 80046e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046e8:	4613      	mov	r3, r2
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	3348      	adds	r3, #72	@ 0x48
 80046f2:	443b      	add	r3, r7
 80046f4:	3b38      	subs	r3, #56	@ 0x38
 80046f6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80046f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d011      	beq.n	8004722 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80046fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004700:	1e5a      	subs	r2, r3, #1
 8004702:	f107 000c 	add.w	r0, r7, #12
 8004706:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004708:	460b      	mov	r3, r1
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	440b      	add	r3, r1
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	18c1      	adds	r1, r0, r3
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	3348      	adds	r3, #72	@ 0x48
 800471c:	443b      	add	r3, r7
 800471e:	3b34      	subs	r3, #52	@ 0x34
 8004720:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800472a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800472c:	4613      	mov	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	3348      	adds	r3, #72	@ 0x48
 8004736:	443b      	add	r3, r7
 8004738:	3b34      	subs	r3, #52	@ 0x34
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800473e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004740:	3301      	adds	r3, #1
 8004742:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	643b      	str	r3, [r7, #64]	@ 0x40
 800474a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1b6      	bne.n	80046be <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	891b      	ldrh	r3, [r3, #8]
 8004754:	461a      	mov	r2, r3
 8004756:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <low_level_output+0xfc>)
 8004758:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800475a:	4a09      	ldr	r2, [pc, #36]	@ (8004780 <low_level_output+0xfc>)
 800475c:	f107 030c 	add.w	r3, r7, #12
 8004760:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004762:	4a07      	ldr	r2, [pc, #28]	@ (8004780 <low_level_output+0xfc>)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004768:	2214      	movs	r2, #20
 800476a:	4905      	ldr	r1, [pc, #20]	@ (8004780 <low_level_output+0xfc>)
 800476c:	4805      	ldr	r0, [pc, #20]	@ (8004784 <low_level_output+0x100>)
 800476e:	f7fc ff4e 	bl	800160e <HAL_ETH_Transmit>

  return errval;
 8004772:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004776:	4618      	mov	r0, r3
 8004778:	3748      	adds	r7, #72	@ 0x48
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20004cc0 	.word	0x20004cc0
 8004784:	20004c10 	.word	0x20004c10

08004788 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004794:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <low_level_input+0x2c>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800479c:	f107 030c 	add.w	r3, r7, #12
 80047a0:	4619      	mov	r1, r3
 80047a2:	4805      	ldr	r0, [pc, #20]	@ (80047b8 <low_level_input+0x30>)
 80047a4:	f7fc ffc7 	bl	8001736 <HAL_ETH_ReadData>
  }

  return p;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20004acc 	.word	0x20004acc
 80047b8:	20004c10 	.word	0x20004c10

080047bc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff ffdd 	bl	8004788 <low_level_input>
 80047ce:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	4798      	blx	r3
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f001 fdae 	bl	8006348 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1ea      	bne.n	80047c8 <ethernetif_input+0xc>
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <ethernetif_init+0x1c>
 800480a:	4b0e      	ldr	r3, [pc, #56]	@ (8004844 <ethernetif_init+0x48>)
 800480c:	f240 126f 	movw	r2, #367	@ 0x16f
 8004810:	490d      	ldr	r1, [pc, #52]	@ (8004848 <ethernetif_init+0x4c>)
 8004812:	480e      	ldr	r0, [pc, #56]	@ (800484c <ethernetif_init+0x50>)
 8004814:	f00a fb28 	bl	800ee68 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2273      	movs	r2, #115	@ 0x73
 800481c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2274      	movs	r2, #116	@ 0x74
 8004824:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a09      	ldr	r2, [pc, #36]	@ (8004850 <ethernetif_init+0x54>)
 800482c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a08      	ldr	r2, [pc, #32]	@ (8004854 <ethernetif_init+0x58>)
 8004832:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff fe85 	bl	8004544 <low_level_init>

  return ERR_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	0800fcac 	.word	0x0800fcac
 8004848:	0800fcc8 	.word	0x0800fcc8
 800484c:	0800fcd8 	.word	0x0800fcd8
 8004850:	0800cf75 	.word	0x0800cf75
 8004854:	08004685 	.word	0x08004685

08004858 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004864:	68f9      	ldr	r1, [r7, #12]
 8004866:	4807      	ldr	r0, [pc, #28]	@ (8004884 <pbuf_free_custom+0x2c>)
 8004868:	f000 fed4 	bl	8005614 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800486c:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <pbuf_free_custom+0x30>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d102      	bne.n	800487a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004874:	4b04      	ldr	r3, [pc, #16]	@ (8004888 <pbuf_free_custom+0x30>)
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
  }
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	080126a4 	.word	0x080126a4
 8004888:	20004acc 	.word	0x20004acc

0800488c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004890:	f7fc fb5e 	bl	8000f50 <HAL_GetTick>
 8004894:	4603      	mov	r3, r0
}
 8004896:	4618      	mov	r0, r3
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08e      	sub	sp, #56	@ 0x38
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a4a      	ldr	r2, [pc, #296]	@ (80049e4 <HAL_ETH_MspInit+0x148>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	f040 808d 	bne.w	80049da <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80048c0:	2300      	movs	r3, #0
 80048c2:	623b      	str	r3, [r7, #32]
 80048c4:	4b48      	ldr	r3, [pc, #288]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c8:	4a47      	ldr	r2, [pc, #284]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 80048ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80048d0:	4b45      	ldr	r3, [pc, #276]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	4b41      	ldr	r3, [pc, #260]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	4a40      	ldr	r2, [pc, #256]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 80048e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ec:	4b3e      	ldr	r3, [pc, #248]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
 80048fc:	4b3a      	ldr	r3, [pc, #232]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	4a39      	ldr	r2, [pc, #228]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 8004902:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004906:	6313      	str	r3, [r2, #48]	@ 0x30
 8004908:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	4b33      	ldr	r3, [pc, #204]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	4a32      	ldr	r2, [pc, #200]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 800491e:	f043 0304 	orr.w	r3, r3, #4
 8004922:	6313      	str	r3, [r2, #48]	@ 0x30
 8004924:	4b30      	ldr	r3, [pc, #192]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	4b2c      	ldr	r3, [pc, #176]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	4a2b      	ldr	r2, [pc, #172]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004940:	4b29      	ldr	r3, [pc, #164]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	4b25      	ldr	r3, [pc, #148]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	4a24      	ldr	r2, [pc, #144]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 8004956:	f043 0302 	orr.w	r3, r3, #2
 800495a:	6313      	str	r3, [r2, #48]	@ 0x30
 800495c:	4b22      	ldr	r3, [pc, #136]	@ (80049e8 <HAL_ETH_MspInit+0x14c>)
 800495e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004968:	2332      	movs	r3, #50	@ 0x32
 800496a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496c:	2302      	movs	r3, #2
 800496e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004970:	2300      	movs	r3, #0
 8004972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004974:	2303      	movs	r3, #3
 8004976:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004978:	230b      	movs	r3, #11
 800497a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800497c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004980:	4619      	mov	r1, r3
 8004982:	481a      	ldr	r0, [pc, #104]	@ (80049ec <HAL_ETH_MspInit+0x150>)
 8004984:	f7fd ff08 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004988:	2386      	movs	r3, #134	@ 0x86
 800498a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498c:	2302      	movs	r3, #2
 800498e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004994:	2303      	movs	r3, #3
 8004996:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004998:	230b      	movs	r3, #11
 800499a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800499c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049a0:	4619      	mov	r1, r3
 80049a2:	4813      	ldr	r0, [pc, #76]	@ (80049f0 <HAL_ETH_MspInit+0x154>)
 80049a4:	f7fd fef8 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80049a8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80049ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ae:	2302      	movs	r3, #2
 80049b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b6:	2303      	movs	r3, #3
 80049b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80049ba:	230b      	movs	r3, #11
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049c2:	4619      	mov	r1, r3
 80049c4:	480b      	ldr	r0, [pc, #44]	@ (80049f4 <HAL_ETH_MspInit+0x158>)
 80049c6:	f7fd fee7 	bl	8002798 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80049ca:	2200      	movs	r2, #0
 80049cc:	2100      	movs	r1, #0
 80049ce:	203d      	movs	r0, #61	@ 0x3d
 80049d0:	f7fc fbc9 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80049d4:	203d      	movs	r0, #61	@ 0x3d
 80049d6:	f7fc fbe2 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80049da:	bf00      	nop
 80049dc:	3738      	adds	r7, #56	@ 0x38
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40028000 	.word	0x40028000
 80049e8:	40023800 	.word	0x40023800
 80049ec:	40020800 	.word	0x40020800
 80049f0:	40020000 	.word	0x40020000
 80049f4:	40020400 	.word	0x40020400

080049f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80049fc:	4802      	ldr	r0, [pc, #8]	@ (8004a08 <ETH_PHY_IO_Init+0x10>)
 80049fe:	f7fd fa67 	bl	8001ed0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20004c10 	.word	0x20004c10

08004a0c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return 0;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	4807      	ldr	r0, [pc, #28]	@ (8004a4c <ETH_PHY_IO_ReadReg+0x30>)
 8004a30:	f7fd f8a8 	bl	8001b84 <HAL_ETH_ReadPHYRegister>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3e:	e000      	b.n	8004a42 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20004c10 	.word	0x20004c10

08004a50 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	68f9      	ldr	r1, [r7, #12]
 8004a62:	4807      	ldr	r0, [pc, #28]	@ (8004a80 <ETH_PHY_IO_WriteReg+0x30>)
 8004a64:	f7fd f8d9 	bl	8001c1a <HAL_ETH_WritePHYRegister>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a72:	e000      	b.n	8004a76 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20004c10 	.word	0x20004c10

08004a84 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004a88:	f7fc fa62 	bl	8000f50 <HAL_GetTick>
 8004a8c:	4603      	mov	r3, r0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b0a0      	sub	sp, #128	@ 0x80
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	2264      	movs	r2, #100	@ 0x64
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f00a fa44 	bl	800ef32 <memset>
  int32_t PHYLinkState = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004aba:	483a      	ldr	r0, [pc, #232]	@ (8004ba4 <ethernet_link_check_state+0x110>)
 8004abc:	f7fc f95a 	bl	8000d74 <LAN8742_GetLinkState>
 8004ac0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ac8:	089b      	lsrs	r3, r3, #2
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00c      	beq.n	8004aee <ethernet_link_check_state+0x5a>
 8004ad4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	dc09      	bgt.n	8004aee <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8004ada:	4833      	ldr	r0, [pc, #204]	@ (8004ba8 <ethernet_link_check_state+0x114>)
 8004adc:	f7fc fd18 	bl	8001510 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f001 f81b 	bl	8005b1c <netif_set_down>
    netif_set_link_down(netif);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f001 f87e 	bl	8005be8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004aec:	e055      	b.n	8004b9a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d14e      	bne.n	8004b9a <ethernet_link_check_state+0x106>
 8004afc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	dd4b      	ble.n	8004b9a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b04:	3b02      	subs	r3, #2
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d82a      	bhi.n	8004b60 <ethernet_link_check_state+0xcc>
 8004b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <ethernet_link_check_state+0x7c>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004b33 	.word	0x08004b33
 8004b18:	08004b43 	.word	0x08004b43
 8004b1c:	08004b53 	.word	0x08004b53
      duplex = ETH_FULLDUPLEX_MODE;
 8004b20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b24:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004b26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b2a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004b30:	e017      	b.n	8004b62 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004b36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004b40:	e00f      	b.n	8004b62 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004b42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b46:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004b50:	e007      	b.n	8004b62 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004b56:	2300      	movs	r3, #0
 8004b58:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004b5e:	e000      	b.n	8004b62 <ethernet_link_check_state+0xce>
      break;
 8004b60:	bf00      	nop
    if(linkchanged)
 8004b62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d018      	beq.n	8004b9a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004b68:	f107 030c 	add.w	r3, r7, #12
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	480e      	ldr	r0, [pc, #56]	@ (8004ba8 <ethernet_link_check_state+0x114>)
 8004b70:	f7fd f89c 	bl	8001cac <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004b74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8004b78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b7a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004b7c:	f107 030c 	add.w	r3, r7, #12
 8004b80:	4619      	mov	r1, r3
 8004b82:	4809      	ldr	r0, [pc, #36]	@ (8004ba8 <ethernet_link_check_state+0x114>)
 8004b84:	f7fd f989 	bl	8001e9a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004b88:	4807      	ldr	r0, [pc, #28]	@ (8004ba8 <ethernet_link_check_state+0x114>)
 8004b8a:	f7fc fc51 	bl	8001430 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 ff58 	bl	8005a44 <netif_set_up>
      netif_set_link_up(netif);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fff3 	bl	8005b80 <netif_set_link_up>
}
 8004b9a:	bf00      	nop
 8004b9c:	3780      	adds	r7, #128	@ 0x80
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20004cf8 	.word	0x20004cf8
 8004ba8:	20004c10 	.word	0x20004c10

08004bac <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004bb4:	4812      	ldr	r0, [pc, #72]	@ (8004c00 <HAL_ETH_RxAllocateCallback+0x54>)
 8004bb6:	f000 fcbf 	bl	8005538 <memp_malloc_pool>
 8004bba:	60f8      	str	r0, [r7, #12]
  if (p)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d014      	beq.n	8004bec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f103 0220 	add.w	r2, r3, #32
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a0d      	ldr	r2, [pc, #52]	@ (8004c04 <HAL_ETH_RxAllocateCallback+0x58>)
 8004bd0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004bda:	9201      	str	r2, [sp, #4]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2241      	movs	r2, #65	@ 0x41
 8004be2:	2100      	movs	r1, #0
 8004be4:	2000      	movs	r0, #0
 8004be6:	f001 f9f5 	bl	8005fd4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004bea:	e005      	b.n	8004bf8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	080126a4 	.word	0x080126a4
 8004c04:	08004859 	.word	0x08004859
 8004c08:	20004acc 	.word	0x20004acc

08004c0c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b089      	sub	sp, #36	@ 0x24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3b20      	subs	r3, #32
 8004c2a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	2200      	movs	r2, #0
 8004c36:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	887a      	ldrh	r2, [r7, #2]
 8004c3c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	69fa      	ldr	r2, [r7, #28]
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e003      	b.n	8004c56 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	e009      	b.n	8004c78 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	891a      	ldrh	r2, [r3, #8]
 8004c68:	887b      	ldrh	r3, [r7, #2]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f2      	bne.n	8004c64 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	3724      	adds	r7, #36	@ 0x24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	b21a      	sxth	r2, r3
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	b21b      	sxth	r3, r3
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b21b      	sxth	r3, r3
 8004caa:	b29b      	uxth	r3, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	061a      	lsls	r2, r3, #24
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0a1b      	lsrs	r3, r3, #8
 8004cd2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	0e1b      	lsrs	r3, r3, #24
 8004cdc:	4313      	orrs	r3, r2
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004cf4:	f000 f8d4 	bl	8004ea0 <mem_init>
  memp_init();
 8004cf8:	f000 fbda 	bl	80054b0 <memp_init>
  pbuf_init();
  netif_init();
 8004cfc:	f000 fcd8 	bl	80056b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004d00:	f007 f862 	bl	800bdc8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004d04:	f001 fdbe 	bl	8006884 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004d08:	f006 ffd4 	bl	800bcb4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004d1e:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <ptr_to_mem+0x20>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	4413      	add	r3, r2
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20005384 	.word	0x20005384

08004d38 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004d40:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <mem_to_ptr+0x20>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	b29b      	uxth	r3, r3
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20005384 	.word	0x20005384

08004d5c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004d5c:	b590      	push	{r4, r7, lr}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004d64:	4b45      	ldr	r3, [pc, #276]	@ (8004e7c <plug_holes+0x120>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d206      	bcs.n	8004d7c <plug_holes+0x20>
 8004d6e:	4b44      	ldr	r3, [pc, #272]	@ (8004e80 <plug_holes+0x124>)
 8004d70:	f240 12df 	movw	r2, #479	@ 0x1df
 8004d74:	4943      	ldr	r1, [pc, #268]	@ (8004e84 <plug_holes+0x128>)
 8004d76:	4844      	ldr	r0, [pc, #272]	@ (8004e88 <plug_holes+0x12c>)
 8004d78:	f00a f876 	bl	800ee68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004d7c:	4b43      	ldr	r3, [pc, #268]	@ (8004e8c <plug_holes+0x130>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d306      	bcc.n	8004d94 <plug_holes+0x38>
 8004d86:	4b3e      	ldr	r3, [pc, #248]	@ (8004e80 <plug_holes+0x124>)
 8004d88:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004d8c:	4940      	ldr	r1, [pc, #256]	@ (8004e90 <plug_holes+0x134>)
 8004d8e:	483e      	ldr	r0, [pc, #248]	@ (8004e88 <plug_holes+0x12c>)
 8004d90:	f00a f86a 	bl	800ee68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	791b      	ldrb	r3, [r3, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d006      	beq.n	8004daa <plug_holes+0x4e>
 8004d9c:	4b38      	ldr	r3, [pc, #224]	@ (8004e80 <plug_holes+0x124>)
 8004d9e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8004da2:	493c      	ldr	r1, [pc, #240]	@ (8004e94 <plug_holes+0x138>)
 8004da4:	4838      	ldr	r0, [pc, #224]	@ (8004e88 <plug_holes+0x12c>)
 8004da6:	f00a f85f 	bl	800ee68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004db2:	d906      	bls.n	8004dc2 <plug_holes+0x66>
 8004db4:	4b32      	ldr	r3, [pc, #200]	@ (8004e80 <plug_holes+0x124>)
 8004db6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8004dba:	4937      	ldr	r1, [pc, #220]	@ (8004e98 <plug_holes+0x13c>)
 8004dbc:	4832      	ldr	r0, [pc, #200]	@ (8004e88 <plug_holes+0x12c>)
 8004dbe:	f00a f853 	bl	800ee68 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff ffa4 	bl	8004d14 <ptr_to_mem>
 8004dcc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d024      	beq.n	8004e20 <plug_holes+0xc4>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	791b      	ldrb	r3, [r3, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d120      	bne.n	8004e20 <plug_holes+0xc4>
 8004dde:	4b2b      	ldr	r3, [pc, #172]	@ (8004e8c <plug_holes+0x130>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d01b      	beq.n	8004e20 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004de8:	4b2c      	ldr	r3, [pc, #176]	@ (8004e9c <plug_holes+0x140>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d102      	bne.n	8004df8 <plug_holes+0x9c>
      lfree = mem;
 8004df2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e9c <plug_holes+0x140>)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	881a      	ldrh	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004e08:	d00a      	beq.n	8004e20 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff ff80 	bl	8004d14 <ptr_to_mem>
 8004e14:	4604      	mov	r4, r0
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ff8e 	bl	8004d38 <mem_to_ptr>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	885b      	ldrh	r3, [r3, #2]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff ff75 	bl	8004d14 <ptr_to_mem>
 8004e2a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d01f      	beq.n	8004e74 <plug_holes+0x118>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	791b      	ldrb	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d11b      	bne.n	8004e74 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004e3c:	4b17      	ldr	r3, [pc, #92]	@ (8004e9c <plug_holes+0x140>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d102      	bne.n	8004e4c <plug_holes+0xf0>
      lfree = pmem;
 8004e46:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <plug_holes+0x140>)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	881a      	ldrh	r2, [r3, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004e5c:	d00a      	beq.n	8004e74 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff ff56 	bl	8004d14 <ptr_to_mem>
 8004e68:	4604      	mov	r4, r0
 8004e6a:	68b8      	ldr	r0, [r7, #8]
 8004e6c:	f7ff ff64 	bl	8004d38 <mem_to_ptr>
 8004e70:	4603      	mov	r3, r0
 8004e72:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd90      	pop	{r4, r7, pc}
 8004e7c:	20005384 	.word	0x20005384
 8004e80:	0800fd00 	.word	0x0800fd00
 8004e84:	0800fd30 	.word	0x0800fd30
 8004e88:	0800fd48 	.word	0x0800fd48
 8004e8c:	20005388 	.word	0x20005388
 8004e90:	0800fd70 	.word	0x0800fd70
 8004e94:	0800fd8c 	.word	0x0800fd8c
 8004e98:	0800fda8 	.word	0x0800fda8
 8004e9c:	2000538c 	.word	0x2000538c

08004ea0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004ea6:	4b18      	ldr	r3, [pc, #96]	@ (8004f08 <mem_init+0x68>)
 8004ea8:	3303      	adds	r3, #3
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4b16      	ldr	r3, [pc, #88]	@ (8004f0c <mem_init+0x6c>)
 8004eb2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004eb4:	4b15      	ldr	r3, [pc, #84]	@ (8004f0c <mem_init+0x6c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004ec0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004ece:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8004ed2:	f7ff ff1f 	bl	8004d14 <ptr_to_mem>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8004f10 <mem_init+0x70>)
 8004eda:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004edc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <mem_init+0x70>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f10 <mem_init+0x70>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004eec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004eee:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <mem_init+0x70>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004ef6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004ef8:	4b04      	ldr	r3, [pc, #16]	@ (8004f0c <mem_init+0x6c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a05      	ldr	r2, [pc, #20]	@ (8004f14 <mem_init+0x74>)
 8004efe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20004d30 	.word	0x20004d30
 8004f0c:	20005384 	.word	0x20005384
 8004f10:	20005388 	.word	0x20005388
 8004f14:	2000538c 	.word	0x2000538c

08004f18 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ff09 	bl	8004d38 <mem_to_ptr>
 8004f26:	4603      	mov	r3, r0
 8004f28:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fef0 	bl	8004d14 <ptr_to_mem>
 8004f34:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	885b      	ldrh	r3, [r3, #2]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff feea 	bl	8004d14 <ptr_to_mem>
 8004f40:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004f4a:	d818      	bhi.n	8004f7e <mem_link_valid+0x66>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	885b      	ldrh	r3, [r3, #2]
 8004f50:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004f54:	d813      	bhi.n	8004f7e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004f5a:	8afa      	ldrh	r2, [r7, #22]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d004      	beq.n	8004f6a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	8afa      	ldrh	r2, [r7, #22]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d109      	bne.n	8004f7e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004f6a:	4b08      	ldr	r3, [pc, #32]	@ (8004f8c <mem_link_valid+0x74>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d006      	beq.n	8004f82 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	885b      	ldrh	r3, [r3, #2]
 8004f78:	8afa      	ldrh	r2, [r7, #22]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d001      	beq.n	8004f82 <mem_link_valid+0x6a>
    return 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <mem_link_valid+0x6c>
  }
  return 1;
 8004f82:	2301      	movs	r3, #1
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20005388 	.word	0x20005388

08004f90 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d04c      	beq.n	8005038 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004fa8:	4b25      	ldr	r3, [pc, #148]	@ (8005040 <mem_free+0xb0>)
 8004faa:	f240 2273 	movw	r2, #627	@ 0x273
 8004fae:	4925      	ldr	r1, [pc, #148]	@ (8005044 <mem_free+0xb4>)
 8004fb0:	4825      	ldr	r0, [pc, #148]	@ (8005048 <mem_free+0xb8>)
 8004fb2:	f009 ff59 	bl	800ee68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004fb6:	e040      	b.n	800503a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3b08      	subs	r3, #8
 8004fbc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004fbe:	4b23      	ldr	r3, [pc, #140]	@ (800504c <mem_free+0xbc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d306      	bcc.n	8004fd6 <mem_free+0x46>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f103 020c 	add.w	r2, r3, #12
 8004fce:	4b20      	ldr	r3, [pc, #128]	@ (8005050 <mem_free+0xc0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d907      	bls.n	8004fe6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8005040 <mem_free+0xb0>)
 8004fd8:	f240 227f 	movw	r2, #639	@ 0x27f
 8004fdc:	491d      	ldr	r1, [pc, #116]	@ (8005054 <mem_free+0xc4>)
 8004fde:	481a      	ldr	r0, [pc, #104]	@ (8005048 <mem_free+0xb8>)
 8004fe0:	f009 ff42 	bl	800ee68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004fe4:	e029      	b.n	800503a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	791b      	ldrb	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d107      	bne.n	8004ffe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004fee:	4b14      	ldr	r3, [pc, #80]	@ (8005040 <mem_free+0xb0>)
 8004ff0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8004ff4:	4918      	ldr	r1, [pc, #96]	@ (8005058 <mem_free+0xc8>)
 8004ff6:	4814      	ldr	r0, [pc, #80]	@ (8005048 <mem_free+0xb8>)
 8004ff8:	f009 ff36 	bl	800ee68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ffc:	e01d      	b.n	800503a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7ff ff8a 	bl	8004f18 <mem_link_valid>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d107      	bne.n	800501a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800500a:	4b0d      	ldr	r3, [pc, #52]	@ (8005040 <mem_free+0xb0>)
 800500c:	f240 2295 	movw	r2, #661	@ 0x295
 8005010:	4912      	ldr	r1, [pc, #72]	@ (800505c <mem_free+0xcc>)
 8005012:	480d      	ldr	r0, [pc, #52]	@ (8005048 <mem_free+0xb8>)
 8005014:	f009 ff28 	bl	800ee68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005018:	e00f      	b.n	800503a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005020:	4b0f      	ldr	r3, [pc, #60]	@ (8005060 <mem_free+0xd0>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	429a      	cmp	r2, r3
 8005028:	d202      	bcs.n	8005030 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800502a:	4a0d      	ldr	r2, [pc, #52]	@ (8005060 <mem_free+0xd0>)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff fe93 	bl	8004d5c <plug_holes>
 8005036:	e000      	b.n	800503a <mem_free+0xaa>
    return;
 8005038:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	0800fd00 	.word	0x0800fd00
 8005044:	0800fdd4 	.word	0x0800fdd4
 8005048:	0800fd48 	.word	0x0800fd48
 800504c:	20005384 	.word	0x20005384
 8005050:	20005388 	.word	0x20005388
 8005054:	0800fdf8 	.word	0x0800fdf8
 8005058:	0800fe14 	.word	0x0800fe14
 800505c:	0800fe3c 	.word	0x0800fe3c
 8005060:	2000538c 	.word	0x2000538c

08005064 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	3303      	adds	r3, #3
 8005074:	b29b      	uxth	r3, r3
 8005076:	f023 0303 	bic.w	r3, r3, #3
 800507a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800507c:	8bfb      	ldrh	r3, [r7, #30]
 800507e:	2b0b      	cmp	r3, #11
 8005080:	d801      	bhi.n	8005086 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005082:	230c      	movs	r3, #12
 8005084:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005086:	8bfb      	ldrh	r3, [r7, #30]
 8005088:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800508c:	d803      	bhi.n	8005096 <mem_trim+0x32>
 800508e:	8bfa      	ldrh	r2, [r7, #30]
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	429a      	cmp	r2, r3
 8005094:	d201      	bcs.n	800509a <mem_trim+0x36>
    return NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	e0cc      	b.n	8005234 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800509a:	4b68      	ldr	r3, [pc, #416]	@ (800523c <mem_trim+0x1d8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d304      	bcc.n	80050ae <mem_trim+0x4a>
 80050a4:	4b66      	ldr	r3, [pc, #408]	@ (8005240 <mem_trim+0x1dc>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d306      	bcc.n	80050bc <mem_trim+0x58>
 80050ae:	4b65      	ldr	r3, [pc, #404]	@ (8005244 <mem_trim+0x1e0>)
 80050b0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80050b4:	4964      	ldr	r1, [pc, #400]	@ (8005248 <mem_trim+0x1e4>)
 80050b6:	4865      	ldr	r0, [pc, #404]	@ (800524c <mem_trim+0x1e8>)
 80050b8:	f009 fed6 	bl	800ee68 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80050bc:	4b5f      	ldr	r3, [pc, #380]	@ (800523c <mem_trim+0x1d8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d304      	bcc.n	80050d0 <mem_trim+0x6c>
 80050c6:	4b5e      	ldr	r3, [pc, #376]	@ (8005240 <mem_trim+0x1dc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d301      	bcc.n	80050d4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	e0af      	b.n	8005234 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3b08      	subs	r3, #8
 80050d8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80050da:	69b8      	ldr	r0, [r7, #24]
 80050dc:	f7ff fe2c 	bl	8004d38 <mem_to_ptr>
 80050e0:	4603      	mov	r3, r0
 80050e2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	881a      	ldrh	r2, [r3, #0]
 80050e8:	8afb      	ldrh	r3, [r7, #22]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b08      	subs	r3, #8
 80050f0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80050f2:	8bfa      	ldrh	r2, [r7, #30]
 80050f4:	8abb      	ldrh	r3, [r7, #20]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d906      	bls.n	8005108 <mem_trim+0xa4>
 80050fa:	4b52      	ldr	r3, [pc, #328]	@ (8005244 <mem_trim+0x1e0>)
 80050fc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8005100:	4953      	ldr	r1, [pc, #332]	@ (8005250 <mem_trim+0x1ec>)
 8005102:	4852      	ldr	r0, [pc, #328]	@ (800524c <mem_trim+0x1e8>)
 8005104:	f009 feb0 	bl	800ee68 <iprintf>
  if (newsize > size) {
 8005108:	8bfa      	ldrh	r2, [r7, #30]
 800510a:	8abb      	ldrh	r3, [r7, #20]
 800510c:	429a      	cmp	r2, r3
 800510e:	d901      	bls.n	8005114 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	e08f      	b.n	8005234 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005114:	8bfa      	ldrh	r2, [r7, #30]
 8005116:	8abb      	ldrh	r3, [r7, #20]
 8005118:	429a      	cmp	r2, r3
 800511a:	d101      	bne.n	8005120 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	e089      	b.n	8005234 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff fdf5 	bl	8004d14 <ptr_to_mem>
 800512a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	791b      	ldrb	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d13f      	bne.n	80051b4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800513c:	d106      	bne.n	800514c <mem_trim+0xe8>
 800513e:	4b41      	ldr	r3, [pc, #260]	@ (8005244 <mem_trim+0x1e0>)
 8005140:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005144:	4943      	ldr	r1, [pc, #268]	@ (8005254 <mem_trim+0x1f0>)
 8005146:	4841      	ldr	r0, [pc, #260]	@ (800524c <mem_trim+0x1e8>)
 8005148:	f009 fe8e 	bl	800ee68 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005152:	8afa      	ldrh	r2, [r7, #22]
 8005154:	8bfb      	ldrh	r3, [r7, #30]
 8005156:	4413      	add	r3, r2
 8005158:	b29b      	uxth	r3, r3
 800515a:	3308      	adds	r3, #8
 800515c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800515e:	4b3e      	ldr	r3, [pc, #248]	@ (8005258 <mem_trim+0x1f4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	429a      	cmp	r2, r3
 8005166:	d106      	bne.n	8005176 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005168:	89fb      	ldrh	r3, [r7, #14]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fdd2 	bl	8004d14 <ptr_to_mem>
 8005170:	4603      	mov	r3, r0
 8005172:	4a39      	ldr	r2, [pc, #228]	@ (8005258 <mem_trim+0x1f4>)
 8005174:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005176:	89fb      	ldrh	r3, [r7, #14]
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fdcb 	bl	8004d14 <ptr_to_mem>
 800517e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2200      	movs	r2, #0
 8005184:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	89ba      	ldrh	r2, [r7, #12]
 800518a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	8afa      	ldrh	r2, [r7, #22]
 8005190:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	89fa      	ldrh	r2, [r7, #14]
 8005196:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80051a0:	d047      	beq.n	8005232 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fdb4 	bl	8004d14 <ptr_to_mem>
 80051ac:	4602      	mov	r2, r0
 80051ae:	89fb      	ldrh	r3, [r7, #14]
 80051b0:	8053      	strh	r3, [r2, #2]
 80051b2:	e03e      	b.n	8005232 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80051b4:	8bfb      	ldrh	r3, [r7, #30]
 80051b6:	f103 0214 	add.w	r2, r3, #20
 80051ba:	8abb      	ldrh	r3, [r7, #20]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d838      	bhi.n	8005232 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80051c0:	8afa      	ldrh	r2, [r7, #22]
 80051c2:	8bfb      	ldrh	r3, [r7, #30]
 80051c4:	4413      	add	r3, r2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3308      	adds	r3, #8
 80051ca:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80051d4:	d106      	bne.n	80051e4 <mem_trim+0x180>
 80051d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005244 <mem_trim+0x1e0>)
 80051d8:	f240 3216 	movw	r2, #790	@ 0x316
 80051dc:	491d      	ldr	r1, [pc, #116]	@ (8005254 <mem_trim+0x1f0>)
 80051de:	481b      	ldr	r0, [pc, #108]	@ (800524c <mem_trim+0x1e8>)
 80051e0:	f009 fe42 	bl	800ee68 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fd94 	bl	8004d14 <ptr_to_mem>
 80051ec:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80051ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005258 <mem_trim+0x1f4>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d202      	bcs.n	80051fe <mem_trim+0x19a>
      lfree = mem2;
 80051f8:	4a17      	ldr	r2, [pc, #92]	@ (8005258 <mem_trim+0x1f4>)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2200      	movs	r2, #0
 8005202:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	881a      	ldrh	r2, [r3, #0]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	8afa      	ldrh	r2, [r7, #22]
 8005210:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	89fa      	ldrh	r2, [r7, #14]
 8005216:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005220:	d007      	beq.n	8005232 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff fd74 	bl	8004d14 <ptr_to_mem>
 800522c:	4602      	mov	r2, r0
 800522e:	89fb      	ldrh	r3, [r7, #14]
 8005230:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005232:	687b      	ldr	r3, [r7, #4]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20005384 	.word	0x20005384
 8005240:	20005388 	.word	0x20005388
 8005244:	0800fd00 	.word	0x0800fd00
 8005248:	0800fe70 	.word	0x0800fe70
 800524c:	0800fd48 	.word	0x0800fd48
 8005250:	0800fe88 	.word	0x0800fe88
 8005254:	0800fea8 	.word	0x0800fea8
 8005258:	2000538c 	.word	0x2000538c

0800525c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <mem_malloc+0x14>
    return NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	e0d9      	b.n	8005424 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	3303      	adds	r3, #3
 8005274:	b29b      	uxth	r3, r3
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800527c:	8bbb      	ldrh	r3, [r7, #28]
 800527e:	2b0b      	cmp	r3, #11
 8005280:	d801      	bhi.n	8005286 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005282:	230c      	movs	r3, #12
 8005284:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005286:	8bbb      	ldrh	r3, [r7, #28]
 8005288:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800528c:	d803      	bhi.n	8005296 <mem_malloc+0x3a>
 800528e:	8bba      	ldrh	r2, [r7, #28]
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	429a      	cmp	r2, r3
 8005294:	d201      	bcs.n	800529a <mem_malloc+0x3e>
    return NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	e0c4      	b.n	8005424 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800529a:	4b64      	ldr	r3, [pc, #400]	@ (800542c <mem_malloc+0x1d0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff fd4a 	bl	8004d38 <mem_to_ptr>
 80052a4:	4603      	mov	r3, r0
 80052a6:	83fb      	strh	r3, [r7, #30]
 80052a8:	e0b4      	b.n	8005414 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80052aa:	8bfb      	ldrh	r3, [r7, #30]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fd31 	bl	8004d14 <ptr_to_mem>
 80052b2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	791b      	ldrb	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f040 80a4 	bne.w	8005406 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	8bfb      	ldrh	r3, [r7, #30]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f1a3 0208 	sub.w	r2, r3, #8
 80052cc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80052ce:	429a      	cmp	r2, r3
 80052d0:	f0c0 8099 	bcc.w	8005406 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	8bfb      	ldrh	r3, [r7, #30]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	f1a3 0208 	sub.w	r2, r3, #8
 80052e2:	8bbb      	ldrh	r3, [r7, #28]
 80052e4:	3314      	adds	r3, #20
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d333      	bcc.n	8005352 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80052ea:	8bfa      	ldrh	r2, [r7, #30]
 80052ec:	8bbb      	ldrh	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3308      	adds	r3, #8
 80052f4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80052f6:	8a7b      	ldrh	r3, [r7, #18]
 80052f8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80052fc:	d106      	bne.n	800530c <mem_malloc+0xb0>
 80052fe:	4b4c      	ldr	r3, [pc, #304]	@ (8005430 <mem_malloc+0x1d4>)
 8005300:	f240 3287 	movw	r2, #903	@ 0x387
 8005304:	494b      	ldr	r1, [pc, #300]	@ (8005434 <mem_malloc+0x1d8>)
 8005306:	484c      	ldr	r0, [pc, #304]	@ (8005438 <mem_malloc+0x1dc>)
 8005308:	f009 fdae 	bl	800ee68 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800530c:	8a7b      	ldrh	r3, [r7, #18]
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fd00 	bl	8004d14 <ptr_to_mem>
 8005314:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	881a      	ldrh	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8bfa      	ldrh	r2, [r7, #30]
 8005328:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	8a7a      	ldrh	r2, [r7, #18]
 800532e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2201      	movs	r2, #1
 8005334:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800533e:	d00b      	beq.n	8005358 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fce5 	bl	8004d14 <ptr_to_mem>
 800534a:	4602      	mov	r2, r0
 800534c:	8a7b      	ldrh	r3, [r7, #18]
 800534e:	8053      	strh	r3, [r2, #2]
 8005350:	e002      	b.n	8005358 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2201      	movs	r2, #1
 8005356:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005358:	4b34      	ldr	r3, [pc, #208]	@ (800542c <mem_malloc+0x1d0>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	429a      	cmp	r2, r3
 8005360:	d127      	bne.n	80053b2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005362:	4b32      	ldr	r3, [pc, #200]	@ (800542c <mem_malloc+0x1d0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005368:	e005      	b.n	8005376 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fcd0 	bl	8004d14 <ptr_to_mem>
 8005374:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	791b      	ldrb	r3, [r3, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d004      	beq.n	8005388 <mem_malloc+0x12c>
 800537e:	4b2f      	ldr	r3, [pc, #188]	@ (800543c <mem_malloc+0x1e0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	429a      	cmp	r2, r3
 8005386:	d1f0      	bne.n	800536a <mem_malloc+0x10e>
          }
          lfree = cur;
 8005388:	4a28      	ldr	r2, [pc, #160]	@ (800542c <mem_malloc+0x1d0>)
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800538e:	4b27      	ldr	r3, [pc, #156]	@ (800542c <mem_malloc+0x1d0>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b2a      	ldr	r3, [pc, #168]	@ (800543c <mem_malloc+0x1e0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d00b      	beq.n	80053b2 <mem_malloc+0x156>
 800539a:	4b24      	ldr	r3, [pc, #144]	@ (800542c <mem_malloc+0x1d0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	791b      	ldrb	r3, [r3, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d006      	beq.n	80053b2 <mem_malloc+0x156>
 80053a4:	4b22      	ldr	r3, [pc, #136]	@ (8005430 <mem_malloc+0x1d4>)
 80053a6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80053aa:	4925      	ldr	r1, [pc, #148]	@ (8005440 <mem_malloc+0x1e4>)
 80053ac:	4822      	ldr	r0, [pc, #136]	@ (8005438 <mem_malloc+0x1dc>)
 80053ae:	f009 fd5b 	bl	800ee68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80053b2:	8bba      	ldrh	r2, [r7, #28]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	3308      	adds	r3, #8
 80053ba:	4a20      	ldr	r2, [pc, #128]	@ (800543c <mem_malloc+0x1e0>)
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	4293      	cmp	r3, r2
 80053c0:	d906      	bls.n	80053d0 <mem_malloc+0x174>
 80053c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005430 <mem_malloc+0x1d4>)
 80053c4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80053c8:	491e      	ldr	r1, [pc, #120]	@ (8005444 <mem_malloc+0x1e8>)
 80053ca:	481b      	ldr	r0, [pc, #108]	@ (8005438 <mem_malloc+0x1dc>)
 80053cc:	f009 fd4c 	bl	800ee68 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d006      	beq.n	80053e8 <mem_malloc+0x18c>
 80053da:	4b15      	ldr	r3, [pc, #84]	@ (8005430 <mem_malloc+0x1d4>)
 80053dc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80053e0:	4919      	ldr	r1, [pc, #100]	@ (8005448 <mem_malloc+0x1ec>)
 80053e2:	4815      	ldr	r0, [pc, #84]	@ (8005438 <mem_malloc+0x1dc>)
 80053e4:	f009 fd40 	bl	800ee68 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d006      	beq.n	8005400 <mem_malloc+0x1a4>
 80053f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005430 <mem_malloc+0x1d4>)
 80053f4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80053f8:	4914      	ldr	r1, [pc, #80]	@ (800544c <mem_malloc+0x1f0>)
 80053fa:	480f      	ldr	r0, [pc, #60]	@ (8005438 <mem_malloc+0x1dc>)
 80053fc:	f009 fd34 	bl	800ee68 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	3308      	adds	r3, #8
 8005404:	e00e      	b.n	8005424 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005406:	8bfb      	ldrh	r3, [r7, #30]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fc83 	bl	8004d14 <ptr_to_mem>
 800540e:	4603      	mov	r3, r0
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005414:	8bfa      	ldrh	r2, [r7, #30]
 8005416:	8bbb      	ldrh	r3, [r7, #28]
 8005418:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800541c:	429a      	cmp	r2, r3
 800541e:	f4ff af44 	bcc.w	80052aa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	2000538c 	.word	0x2000538c
 8005430:	0800fd00 	.word	0x0800fd00
 8005434:	0800fea8 	.word	0x0800fea8
 8005438:	0800fd48 	.word	0x0800fd48
 800543c:	20005388 	.word	0x20005388
 8005440:	0800febc 	.word	0x0800febc
 8005444:	0800fed8 	.word	0x0800fed8
 8005448:	0800ff08 	.word	0x0800ff08
 800544c:	0800ff38 	.word	0x0800ff38

08005450 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	3303      	adds	r3, #3
 8005466:	f023 0303 	bic.w	r3, r3, #3
 800546a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e011      	b.n	8005496 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4413      	add	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	885b      	ldrh	r3, [r3, #2]
 800549a:	461a      	mov	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4293      	cmp	r3, r2
 80054a0:	dbe7      	blt.n	8005472 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80054b6:	2300      	movs	r3, #0
 80054b8:	80fb      	strh	r3, [r7, #6]
 80054ba:	e009      	b.n	80054d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80054bc:	88fb      	ldrh	r3, [r7, #6]
 80054be:	4a08      	ldr	r2, [pc, #32]	@ (80054e0 <memp_init+0x30>)
 80054c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff ffc3 	bl	8005450 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	3301      	adds	r3, #1
 80054ce:	80fb      	strh	r3, [r7, #6]
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d9f2      	bls.n	80054bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	0801271c 	.word	0x0801271c

080054e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d012      	beq.n	8005520 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	6812      	ldr	r2, [r2, #0]
 8005502:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d006      	beq.n	800551c <do_memp_malloc_pool+0x38>
 800550e:	4b07      	ldr	r3, [pc, #28]	@ (800552c <do_memp_malloc_pool+0x48>)
 8005510:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005514:	4906      	ldr	r1, [pc, #24]	@ (8005530 <do_memp_malloc_pool+0x4c>)
 8005516:	4807      	ldr	r0, [pc, #28]	@ (8005534 <do_memp_malloc_pool+0x50>)
 8005518:	f009 fca6 	bl	800ee68 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	e000      	b.n	8005522 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	0800ff5c 	.word	0x0800ff5c
 8005530:	0800ff8c 	.word	0x0800ff8c
 8005534:	0800ffb0 	.word	0x0800ffb0

08005538 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <memp_malloc_pool+0x1c>
 8005546:	4b0a      	ldr	r3, [pc, #40]	@ (8005570 <memp_malloc_pool+0x38>)
 8005548:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800554c:	4909      	ldr	r1, [pc, #36]	@ (8005574 <memp_malloc_pool+0x3c>)
 800554e:	480a      	ldr	r0, [pc, #40]	@ (8005578 <memp_malloc_pool+0x40>)
 8005550:	f009 fc8a 	bl	800ee68 <iprintf>
  if (desc == NULL) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <memp_malloc_pool+0x26>
    return NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	e003      	b.n	8005566 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff ffc0 	bl	80054e4 <do_memp_malloc_pool>
 8005564:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	0800ff5c 	.word	0x0800ff5c
 8005574:	0800ffd8 	.word	0x0800ffd8
 8005578:	0800ffb0 	.word	0x0800ffb0

0800557c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d908      	bls.n	800559e <memp_malloc+0x22>
 800558c:	4b0a      	ldr	r3, [pc, #40]	@ (80055b8 <memp_malloc+0x3c>)
 800558e:	f240 1257 	movw	r2, #343	@ 0x157
 8005592:	490a      	ldr	r1, [pc, #40]	@ (80055bc <memp_malloc+0x40>)
 8005594:	480a      	ldr	r0, [pc, #40]	@ (80055c0 <memp_malloc+0x44>)
 8005596:	f009 fc67 	bl	800ee68 <iprintf>
 800559a:	2300      	movs	r3, #0
 800559c:	e008      	b.n	80055b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	4a08      	ldr	r2, [pc, #32]	@ (80055c4 <memp_malloc+0x48>)
 80055a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff ff9c 	bl	80054e4 <do_memp_malloc_pool>
 80055ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80055ae:	68fb      	ldr	r3, [r7, #12]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	0800ff5c 	.word	0x0800ff5c
 80055bc:	0800ffec 	.word	0x0800ffec
 80055c0:	0800ffb0 	.word	0x0800ffb0
 80055c4:	0801271c 	.word	0x0801271c

080055c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d006      	beq.n	80055ea <do_memp_free_pool+0x22>
 80055dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <do_memp_free_pool+0x40>)
 80055de:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80055e2:	490a      	ldr	r1, [pc, #40]	@ (800560c <do_memp_free_pool+0x44>)
 80055e4:	480a      	ldr	r0, [pc, #40]	@ (8005610 <do_memp_free_pool+0x48>)
 80055e6:	f009 fc3f 	bl	800ee68 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	0800ff5c 	.word	0x0800ff5c
 800560c:	0801000c 	.word	0x0801000c
 8005610:	0800ffb0 	.word	0x0800ffb0

08005614 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d106      	bne.n	8005632 <memp_free_pool+0x1e>
 8005624:	4b0a      	ldr	r3, [pc, #40]	@ (8005650 <memp_free_pool+0x3c>)
 8005626:	f240 1295 	movw	r2, #405	@ 0x195
 800562a:	490a      	ldr	r1, [pc, #40]	@ (8005654 <memp_free_pool+0x40>)
 800562c:	480a      	ldr	r0, [pc, #40]	@ (8005658 <memp_free_pool+0x44>)
 800562e:	f009 fc1b 	bl	800ee68 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <memp_free_pool+0x34>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff ffc1 	bl	80055c8 <do_memp_free_pool>
 8005646:	e000      	b.n	800564a <memp_free_pool+0x36>
    return;
 8005648:	bf00      	nop
}
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	0800ff5c 	.word	0x0800ff5c
 8005654:	0800ffd8 	.word	0x0800ffd8
 8005658:	0800ffb0 	.word	0x0800ffb0

0800565c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	6039      	str	r1, [r7, #0]
 8005666:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	2b08      	cmp	r3, #8
 800566c:	d907      	bls.n	800567e <memp_free+0x22>
 800566e:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <memp_free+0x44>)
 8005670:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8005674:	490b      	ldr	r1, [pc, #44]	@ (80056a4 <memp_free+0x48>)
 8005676:	480c      	ldr	r0, [pc, #48]	@ (80056a8 <memp_free+0x4c>)
 8005678:	f009 fbf6 	bl	800ee68 <iprintf>
 800567c:	e00c      	b.n	8005698 <memp_free+0x3c>

  if (mem == NULL) {
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	4a09      	ldr	r2, [pc, #36]	@ (80056ac <memp_free+0x50>)
 8005688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ff9a 	bl	80055c8 <do_memp_free_pool>
 8005694:	e000      	b.n	8005698 <memp_free+0x3c>
    return;
 8005696:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	0800ff5c 	.word	0x0800ff5c
 80056a4:	0801002c 	.word	0x0801002c
 80056a8:	0800ffb0 	.word	0x0800ffb0
 80056ac:	0801271c 	.word	0x0801271c

080056b0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d108      	bne.n	80056e6 <netif_add+0x26>
 80056d4:	4b57      	ldr	r3, [pc, #348]	@ (8005834 <netif_add+0x174>)
 80056d6:	f240 1227 	movw	r2, #295	@ 0x127
 80056da:	4957      	ldr	r1, [pc, #348]	@ (8005838 <netif_add+0x178>)
 80056dc:	4857      	ldr	r0, [pc, #348]	@ (800583c <netif_add+0x17c>)
 80056de:	f009 fbc3 	bl	800ee68 <iprintf>
 80056e2:	2300      	movs	r3, #0
 80056e4:	e0a2      	b.n	800582c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d108      	bne.n	80056fe <netif_add+0x3e>
 80056ec:	4b51      	ldr	r3, [pc, #324]	@ (8005834 <netif_add+0x174>)
 80056ee:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80056f2:	4953      	ldr	r1, [pc, #332]	@ (8005840 <netif_add+0x180>)
 80056f4:	4851      	ldr	r0, [pc, #324]	@ (800583c <netif_add+0x17c>)
 80056f6:	f009 fbb7 	bl	800ee68 <iprintf>
 80056fa:	2300      	movs	r3, #0
 80056fc:	e096      	b.n	800582c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005704:	4b4f      	ldr	r3, [pc, #316]	@ (8005844 <netif_add+0x184>)
 8005706:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800570e:	4b4d      	ldr	r3, [pc, #308]	@ (8005844 <netif_add+0x184>)
 8005710:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005718:	4b4a      	ldr	r3, [pc, #296]	@ (8005844 <netif_add+0x184>)
 800571a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4a45      	ldr	r2, [pc, #276]	@ (8005848 <netif_add+0x188>)
 8005732:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a3a      	ldr	r2, [r7, #32]
 800574c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800574e:	4b3f      	ldr	r3, [pc, #252]	@ (800584c <netif_add+0x18c>)
 8005750:	781a      	ldrb	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800575c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f913 	bl	8005990 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	4798      	blx	r3
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <netif_add+0xba>
    return NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	e058      	b.n	800582c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005780:	2bff      	cmp	r3, #255	@ 0xff
 8005782:	d103      	bne.n	800578c <netif_add+0xcc>
        netif->num = 0;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005790:	4b2f      	ldr	r3, [pc, #188]	@ (8005850 <netif_add+0x190>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e02b      	b.n	80057f0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	429a      	cmp	r2, r3
 800579e:	d106      	bne.n	80057ae <netif_add+0xee>
 80057a0:	4b24      	ldr	r3, [pc, #144]	@ (8005834 <netif_add+0x174>)
 80057a2:	f240 128b 	movw	r2, #395	@ 0x18b
 80057a6:	492b      	ldr	r1, [pc, #172]	@ (8005854 <netif_add+0x194>)
 80057a8:	4824      	ldr	r0, [pc, #144]	@ (800583c <netif_add+0x17c>)
 80057aa:	f009 fb5d 	bl	800ee68 <iprintf>
        num_netifs++;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	3301      	adds	r3, #1
 80057b2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2bff      	cmp	r3, #255	@ 0xff
 80057b8:	dd06      	ble.n	80057c8 <netif_add+0x108>
 80057ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005834 <netif_add+0x174>)
 80057bc:	f240 128d 	movw	r2, #397	@ 0x18d
 80057c0:	4925      	ldr	r1, [pc, #148]	@ (8005858 <netif_add+0x198>)
 80057c2:	481e      	ldr	r0, [pc, #120]	@ (800583c <netif_add+0x17c>)
 80057c4:	f009 fb50 	bl	800ee68 <iprintf>
        if (netif2->num == netif->num) {
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d108      	bne.n	80057ea <netif_add+0x12a>
          netif->num++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057de:	3301      	adds	r3, #1
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80057e8:	e005      	b.n	80057f6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1d0      	bne.n	8005798 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1be      	bne.n	800577a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005802:	2bfe      	cmp	r3, #254	@ 0xfe
 8005804:	d103      	bne.n	800580e <netif_add+0x14e>
    netif_num = 0;
 8005806:	4b11      	ldr	r3, [pc, #68]	@ (800584c <netif_add+0x18c>)
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e006      	b.n	800581c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005814:	3301      	adds	r3, #1
 8005816:	b2da      	uxtb	r2, r3
 8005818:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <netif_add+0x18c>)
 800581a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800581c:	4b0c      	ldr	r3, [pc, #48]	@ (8005850 <netif_add+0x190>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005824:	4a0a      	ldr	r2, [pc, #40]	@ (8005850 <netif_add+0x190>)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800582a:	68fb      	ldr	r3, [r7, #12]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	08010048 	.word	0x08010048
 8005838:	080100dc 	.word	0x080100dc
 800583c:	08010098 	.word	0x08010098
 8005840:	080100f8 	.word	0x080100f8
 8005844:	08012780 	.word	0x08012780
 8005848:	08005c6b 	.word	0x08005c6b
 800584c:	20008284 	.word	0x20008284
 8005850:	2000827c 	.word	0x2000827c
 8005854:	0801011c 	.word	0x0801011c
 8005858:	08010130 	.word	0x08010130

0800585c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f002 fb55 	bl	8007f18 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f006 ff03 	bl	800c67c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <netif_do_set_ipaddr+0x20>
 8005892:	4b1d      	ldr	r3, [pc, #116]	@ (8005908 <netif_do_set_ipaddr+0x88>)
 8005894:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8005898:	491c      	ldr	r1, [pc, #112]	@ (800590c <netif_do_set_ipaddr+0x8c>)
 800589a:	481d      	ldr	r0, [pc, #116]	@ (8005910 <netif_do_set_ipaddr+0x90>)
 800589c:	f009 fae4 	bl	800ee68 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <netif_do_set_ipaddr+0x34>
 80058a6:	4b18      	ldr	r3, [pc, #96]	@ (8005908 <netif_do_set_ipaddr+0x88>)
 80058a8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80058ac:	4917      	ldr	r1, [pc, #92]	@ (800590c <netif_do_set_ipaddr+0x8c>)
 80058ae:	4818      	ldr	r0, [pc, #96]	@ (8005910 <netif_do_set_ipaddr+0x90>)
 80058b0:	f009 fada 	bl	800ee68 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3304      	adds	r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d01c      	beq.n	80058fc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3304      	adds	r3, #4
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80058d2:	f107 0314 	add.w	r3, r7, #20
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff ffbf 	bl	800585c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <netif_do_set_ipaddr+0x6a>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	e000      	b.n	80058ec <netif_do_set_ipaddr+0x6c>
 80058ea:	2300      	movs	r3, #0
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80058f0:	2101      	movs	r1, #1
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f8d2 	bl	8005a9c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	08010048 	.word	0x08010048
 800590c:	08010160 	.word	0x08010160
 8005910:	08010098 	.word	0x08010098

08005914 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3308      	adds	r3, #8
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d00a      	beq.n	8005944 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <netif_do_set_netmask+0x26>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	e000      	b.n	800593c <netif_do_set_netmask+0x28>
 800593a:	2300      	movs	r3, #0
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	330c      	adds	r3, #12
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d00a      	beq.n	8005982 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <netif_do_set_gw+0x26>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	e000      	b.n	800597a <netif_do_set_gw+0x28>
 8005978:	2300      	movs	r3, #0
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80059ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005a20 <netif_set_addr+0x90>)
 80059ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80059b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a20 <netif_set_addr+0x90>)
 80059b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80059c0:	4b17      	ldr	r3, [pc, #92]	@ (8005a20 <netif_set_addr+0x90>)
 80059c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <netif_set_addr+0x42>
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <netif_set_addr+0x46>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <netif_set_addr+0x48>
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d006      	beq.n	80059ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80059e0:	f107 0310 	add.w	r3, r7, #16
 80059e4:	461a      	mov	r2, r3
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff ff49 	bl	8005880 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f7ff ff8e 	bl	8005914 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff ffa8 	bl	8005952 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d106      	bne.n	8005a16 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005a08:	f107 0310 	add.w	r3, r7, #16
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff ff35 	bl	8005880 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005a16:	bf00      	nop
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	08012780 	.word	0x08012780

08005a24 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005a2c:	4a04      	ldr	r2, [pc, #16]	@ (8005a40 <netif_set_default+0x1c>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20008280 	.word	0x20008280

08005a44 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d107      	bne.n	8005a62 <netif_set_up+0x1e>
 8005a52:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <netif_set_up+0x4c>)
 8005a54:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8005a58:	490e      	ldr	r1, [pc, #56]	@ (8005a94 <netif_set_up+0x50>)
 8005a5a:	480f      	ldr	r0, [pc, #60]	@ (8005a98 <netif_set_up+0x54>)
 8005a5c:	f009 fa04 	bl	800ee68 <iprintf>
 8005a60:	e013      	b.n	8005a8a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10c      	bne.n	8005a8a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005a82:	2103      	movs	r1, #3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f809 	bl	8005a9c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	08010048 	.word	0x08010048
 8005a94:	080101d0 	.word	0x080101d0
 8005a98:	08010098 	.word	0x08010098

08005a9c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <netif_issue_reports+0x20>
 8005aae:	4b18      	ldr	r3, [pc, #96]	@ (8005b10 <netif_issue_reports+0x74>)
 8005ab0:	f240 326d 	movw	r2, #877	@ 0x36d
 8005ab4:	4917      	ldr	r1, [pc, #92]	@ (8005b14 <netif_issue_reports+0x78>)
 8005ab6:	4818      	ldr	r0, [pc, #96]	@ (8005b18 <netif_issue_reports+0x7c>)
 8005ab8:	f009 f9d6 	bl	800ee68 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01e      	beq.n	8005b08 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ad0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d017      	beq.n	8005b08 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d013      	beq.n	8005b0a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00e      	beq.n	8005b0a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d007      	beq.n	8005b0a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f007 fd25 	bl	800d550 <etharp_request>
 8005b06:	e000      	b.n	8005b0a <netif_issue_reports+0x6e>
    return;
 8005b08:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	08010048 	.word	0x08010048
 8005b14:	080101ec 	.word	0x080101ec
 8005b18:	08010098 	.word	0x08010098

08005b1c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d107      	bne.n	8005b3a <netif_set_down+0x1e>
 8005b2a:	4b12      	ldr	r3, [pc, #72]	@ (8005b74 <netif_set_down+0x58>)
 8005b2c:	f240 329b 	movw	r2, #923	@ 0x39b
 8005b30:	4911      	ldr	r1, [pc, #68]	@ (8005b78 <netif_set_down+0x5c>)
 8005b32:	4812      	ldr	r0, [pc, #72]	@ (8005b7c <netif_set_down+0x60>)
 8005b34:	f009 f998 	bl	800ee68 <iprintf>
 8005b38:	e019      	b.n	8005b6e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d012      	beq.n	8005b6e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b4e:	f023 0301 	bic.w	r3, r3, #1
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f007 f8af 	bl	800cccc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	08010048 	.word	0x08010048
 8005b78:	08010210 	.word	0x08010210
 8005b7c:	08010098 	.word	0x08010098

08005b80 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d107      	bne.n	8005b9e <netif_set_link_up+0x1e>
 8005b8e:	4b13      	ldr	r3, [pc, #76]	@ (8005bdc <netif_set_link_up+0x5c>)
 8005b90:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8005b94:	4912      	ldr	r1, [pc, #72]	@ (8005be0 <netif_set_link_up+0x60>)
 8005b96:	4813      	ldr	r0, [pc, #76]	@ (8005be4 <netif_set_link_up+0x64>)
 8005b98:	f009 f966 	bl	800ee68 <iprintf>
 8005b9c:	e01b      	b.n	8005bd6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d114      	bne.n	8005bd6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bb2:	f043 0304 	orr.w	r3, r3, #4
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005bbe:	2103      	movs	r1, #3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff ff6b 	bl	8005a9c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <netif_set_link_up+0x56>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	08010048 	.word	0x08010048
 8005be0:	08010230 	.word	0x08010230
 8005be4:	08010098 	.word	0x08010098

08005be8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d107      	bne.n	8005c06 <netif_set_link_down+0x1e>
 8005bf6:	4b11      	ldr	r3, [pc, #68]	@ (8005c3c <netif_set_link_down+0x54>)
 8005bf8:	f240 4206 	movw	r2, #1030	@ 0x406
 8005bfc:	4910      	ldr	r1, [pc, #64]	@ (8005c40 <netif_set_link_down+0x58>)
 8005bfe:	4811      	ldr	r0, [pc, #68]	@ (8005c44 <netif_set_link_down+0x5c>)
 8005c00:	f009 f932 	bl	800ee68 <iprintf>
 8005c04:	e017      	b.n	8005c36 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d010      	beq.n	8005c36 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c1a:	f023 0304 	bic.w	r3, r3, #4
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <netif_set_link_down+0x4e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	08010048 	.word	0x08010048
 8005c40:	08010254 	.word	0x08010254
 8005c44:	08010098 	.word	0x08010098

08005c48 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	61da      	str	r2, [r3, #28]
  }
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005c76:	f06f 030b 	mvn.w	r3, #11
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d013      	beq.n	8005cc0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005c98:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd0 <netif_get_by_index+0x48>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	e00c      	b.n	8005cba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	79fa      	ldrb	r2, [r7, #7]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d101      	bne.n	8005cb4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	e006      	b.n	8005cc2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1ef      	bne.n	8005ca0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	2000827c 	.word	0x2000827c

08005cd4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005cda:	4b0c      	ldr	r3, [pc, #48]	@ (8005d0c <pbuf_free_ooseq+0x38>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d10 <pbuf_free_ooseq+0x3c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	e00a      	b.n	8005cfe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f002 f94f 	bl	8007f94 <tcp_free_ooseq>
      return;
 8005cf6:	e005      	b.n	8005d04 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	607b      	str	r3, [r7, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f1      	bne.n	8005ce8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20008285 	.word	0x20008285
 8005d10:	20008294 	.word	0x20008294

08005d14 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005d18:	4b03      	ldr	r3, [pc, #12]	@ (8005d28 <pbuf_pool_is_empty+0x14>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005d1e:	bf00      	nop
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	20008285 	.word	0x20008285

08005d2c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	4611      	mov	r1, r2
 8005d38:	461a      	mov	r2, r3
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	80fb      	strh	r3, [r7, #6]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	88fa      	ldrh	r2, [r7, #6]
 8005d52:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	88ba      	ldrh	r2, [r7, #4]
 8005d58:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005d5a:	8b3b      	ldrh	r3, [r7, #24]
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	7f3a      	ldrb	r2, [r7, #28]
 8005d66:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	73da      	strb	r2, [r3, #15]
}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08c      	sub	sp, #48	@ 0x30
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	4603      	mov	r3, r0
 8005d88:	71fb      	strb	r3, [r7, #7]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	80bb      	strh	r3, [r7, #4]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005d96:	887b      	ldrh	r3, [r7, #2]
 8005d98:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005d9c:	d07f      	beq.n	8005e9e <pbuf_alloc+0x11e>
 8005d9e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005da2:	f300 80c8 	bgt.w	8005f36 <pbuf_alloc+0x1b6>
 8005da6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005daa:	d010      	beq.n	8005dce <pbuf_alloc+0x4e>
 8005dac:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005db0:	f300 80c1 	bgt.w	8005f36 <pbuf_alloc+0x1b6>
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d002      	beq.n	8005dbe <pbuf_alloc+0x3e>
 8005db8:	2b41      	cmp	r3, #65	@ 0x41
 8005dba:	f040 80bc 	bne.w	8005f36 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	88bb      	ldrh	r3, [r7, #4]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	f000 f8d1 	bl	8005f6c <pbuf_alloc_reference>
 8005dca:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005dcc:	e0bd      	b.n	8005f4a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005dd6:	88bb      	ldrh	r3, [r7, #4]
 8005dd8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005dda:	2008      	movs	r0, #8
 8005ddc:	f7ff fbce 	bl	800557c <memp_malloc>
 8005de0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005de8:	f7ff ff94 	bl	8005d14 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005df2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005df4:	f000 faa8 	bl	8006348 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e0a7      	b.n	8005f4c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005dfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005dfe:	3303      	adds	r3, #3
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f023 0303 	bic.w	r3, r3, #3
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	8b7a      	ldrh	r2, [r7, #26]
 8005e10:	4293      	cmp	r3, r2
 8005e12:	bf28      	it	cs
 8005e14:	4613      	movcs	r3, r2
 8005e16:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005e18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e1a:	3310      	adds	r3, #16
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	3303      	adds	r3, #3
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	4618      	mov	r0, r3
 8005e28:	89f9      	ldrh	r1, [r7, #14]
 8005e2a:	8b7a      	ldrh	r2, [r7, #26]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	887b      	ldrh	r3, [r7, #2]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	460b      	mov	r3, r1
 8005e36:	4601      	mov	r1, r0
 8005e38:	6938      	ldr	r0, [r7, #16]
 8005e3a:	f7ff ff77 	bl	8005d2c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d006      	beq.n	8005e58 <pbuf_alloc+0xd8>
 8005e4a:	4b42      	ldr	r3, [pc, #264]	@ (8005f54 <pbuf_alloc+0x1d4>)
 8005e4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e50:	4941      	ldr	r1, [pc, #260]	@ (8005f58 <pbuf_alloc+0x1d8>)
 8005e52:	4842      	ldr	r0, [pc, #264]	@ (8005f5c <pbuf_alloc+0x1dc>)
 8005e54:	f009 f808 	bl	800ee68 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005e58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e5a:	3303      	adds	r3, #3
 8005e5c:	f023 0303 	bic.w	r3, r3, #3
 8005e60:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8005e64:	d106      	bne.n	8005e74 <pbuf_alloc+0xf4>
 8005e66:	4b3b      	ldr	r3, [pc, #236]	@ (8005f54 <pbuf_alloc+0x1d4>)
 8005e68:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005e6c:	493c      	ldr	r1, [pc, #240]	@ (8005f60 <pbuf_alloc+0x1e0>)
 8005e6e:	483b      	ldr	r0, [pc, #236]	@ (8005f5c <pbuf_alloc+0x1dc>)
 8005e70:	f008 fffa 	bl	800ee68 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e7e:	e002      	b.n	8005e86 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005e8a:	8b7a      	ldrh	r2, [r7, #26]
 8005e8c:	89fb      	ldrh	r3, [r7, #14]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8005e96:	8b7b      	ldrh	r3, [r7, #26]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d19e      	bne.n	8005dda <pbuf_alloc+0x5a>
      break;
 8005e9c:	e055      	b.n	8005f4a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005e9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ea0:	3303      	adds	r3, #3
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f023 0303 	bic.w	r3, r3, #3
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	88bb      	ldrh	r3, [r7, #4]
 8005eac:	3303      	adds	r3, #3
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f023 0303 	bic.w	r3, r3, #3
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005eba:	8b3b      	ldrh	r3, [r7, #24]
 8005ebc:	3310      	adds	r3, #16
 8005ebe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ec0:	8b3a      	ldrh	r2, [r7, #24]
 8005ec2:	88bb      	ldrh	r3, [r7, #4]
 8005ec4:	3303      	adds	r3, #3
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d306      	bcc.n	8005edc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005ece:	8afa      	ldrh	r2, [r7, #22]
 8005ed0:	88bb      	ldrh	r3, [r7, #4]
 8005ed2:	3303      	adds	r3, #3
 8005ed4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d201      	bcs.n	8005ee0 <pbuf_alloc+0x160>
        return NULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e035      	b.n	8005f4c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005ee0:	8afb      	ldrh	r3, [r7, #22]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff f9ba 	bl	800525c <mem_malloc>
 8005ee8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <pbuf_alloc+0x174>
        return NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e02b      	b.n	8005f4c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005ef4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ef6:	3310      	adds	r3, #16
 8005ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005efa:	4413      	add	r3, r2
 8005efc:	3303      	adds	r3, #3
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	4618      	mov	r0, r3
 8005f04:	88b9      	ldrh	r1, [r7, #4]
 8005f06:	88ba      	ldrh	r2, [r7, #4]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	887b      	ldrh	r3, [r7, #2]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	460b      	mov	r3, r1
 8005f12:	4601      	mov	r1, r0
 8005f14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f16:	f7ff ff09 	bl	8005d2c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d010      	beq.n	8005f48 <pbuf_alloc+0x1c8>
 8005f26:	4b0b      	ldr	r3, [pc, #44]	@ (8005f54 <pbuf_alloc+0x1d4>)
 8005f28:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8005f2c:	490d      	ldr	r1, [pc, #52]	@ (8005f64 <pbuf_alloc+0x1e4>)
 8005f2e:	480b      	ldr	r0, [pc, #44]	@ (8005f5c <pbuf_alloc+0x1dc>)
 8005f30:	f008 ff9a 	bl	800ee68 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005f34:	e008      	b.n	8005f48 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005f36:	4b07      	ldr	r3, [pc, #28]	@ (8005f54 <pbuf_alloc+0x1d4>)
 8005f38:	f240 1227 	movw	r2, #295	@ 0x127
 8005f3c:	490a      	ldr	r1, [pc, #40]	@ (8005f68 <pbuf_alloc+0x1e8>)
 8005f3e:	4807      	ldr	r0, [pc, #28]	@ (8005f5c <pbuf_alloc+0x1dc>)
 8005f40:	f008 ff92 	bl	800ee68 <iprintf>
      return NULL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	e001      	b.n	8005f4c <pbuf_alloc+0x1cc>
      break;
 8005f48:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3728      	adds	r7, #40	@ 0x28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	08010278 	.word	0x08010278
 8005f58:	080102a8 	.word	0x080102a8
 8005f5c:	080102d8 	.word	0x080102d8
 8005f60:	08010300 	.word	0x08010300
 8005f64:	08010334 	.word	0x08010334
 8005f68:	08010360 	.word	0x08010360

08005f6c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	807b      	strh	r3, [r7, #2]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005f7c:	883b      	ldrh	r3, [r7, #0]
 8005f7e:	2b41      	cmp	r3, #65	@ 0x41
 8005f80:	d009      	beq.n	8005f96 <pbuf_alloc_reference+0x2a>
 8005f82:	883b      	ldrh	r3, [r7, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d006      	beq.n	8005f96 <pbuf_alloc_reference+0x2a>
 8005f88:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc8 <pbuf_alloc_reference+0x5c>)
 8005f8a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8005f8e:	490f      	ldr	r1, [pc, #60]	@ (8005fcc <pbuf_alloc_reference+0x60>)
 8005f90:	480f      	ldr	r0, [pc, #60]	@ (8005fd0 <pbuf_alloc_reference+0x64>)
 8005f92:	f008 ff69 	bl	800ee68 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005f96:	2007      	movs	r0, #7
 8005f98:	f7ff faf0 	bl	800557c <memp_malloc>
 8005f9c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e00b      	b.n	8005fc0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005fa8:	8879      	ldrh	r1, [r7, #2]
 8005faa:	887a      	ldrh	r2, [r7, #2]
 8005fac:	2300      	movs	r3, #0
 8005fae:	9301      	str	r3, [sp, #4]
 8005fb0:	883b      	ldrh	r3, [r7, #0]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff feb7 	bl	8005d2c <pbuf_init_alloced_pbuf>
  return p;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	08010278 	.word	0x08010278
 8005fcc:	0801037c 	.word	0x0801037c
 8005fd0:	080102d8 	.word	0x080102d8

08005fd4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	607b      	str	r3, [r7, #4]
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	81bb      	strh	r3, [r7, #12]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005fec:	8a7b      	ldrh	r3, [r7, #18]
 8005fee:	3303      	adds	r3, #3
 8005ff0:	f023 0203 	bic.w	r2, r3, #3
 8005ff4:	89bb      	ldrh	r3, [r7, #12]
 8005ff6:	441a      	add	r2, r3
 8005ff8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d901      	bls.n	8006002 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e018      	b.n	8006034 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006008:	8a7b      	ldrh	r3, [r7, #18]
 800600a:	3303      	adds	r3, #3
 800600c:	f023 0303 	bic.w	r3, r3, #3
 8006010:	6a3a      	ldr	r2, [r7, #32]
 8006012:	4413      	add	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	e001      	b.n	800601c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	89b9      	ldrh	r1, [r7, #12]
 8006020:	89ba      	ldrh	r2, [r7, #12]
 8006022:	2302      	movs	r3, #2
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	897b      	ldrh	r3, [r7, #10]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	460b      	mov	r3, r1
 800602c:	6979      	ldr	r1, [r7, #20]
 800602e:	f7ff fe7d 	bl	8005d2c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006032:	687b      	ldr	r3, [r7, #4]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <pbuf_realloc+0x20>
 800604e:	4b3a      	ldr	r3, [pc, #232]	@ (8006138 <pbuf_realloc+0xfc>)
 8006050:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006054:	4939      	ldr	r1, [pc, #228]	@ (800613c <pbuf_realloc+0x100>)
 8006056:	483a      	ldr	r0, [pc, #232]	@ (8006140 <pbuf_realloc+0x104>)
 8006058:	f008 ff06 	bl	800ee68 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	891b      	ldrh	r3, [r3, #8]
 8006060:	887a      	ldrh	r2, [r7, #2]
 8006062:	429a      	cmp	r2, r3
 8006064:	d263      	bcs.n	800612e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	891a      	ldrh	r2, [r3, #8]
 800606a:	887b      	ldrh	r3, [r7, #2]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006070:	887b      	ldrh	r3, [r7, #2]
 8006072:	817b      	strh	r3, [r7, #10]
  q = p;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006078:	e018      	b.n	80060ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	895b      	ldrh	r3, [r3, #10]
 800607e:	897a      	ldrh	r2, [r7, #10]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	891a      	ldrh	r2, [r3, #8]
 8006088:	893b      	ldrh	r3, [r7, #8]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <pbuf_realloc+0x70>
 800609e:	4b26      	ldr	r3, [pc, #152]	@ (8006138 <pbuf_realloc+0xfc>)
 80060a0:	f240 12af 	movw	r2, #431	@ 0x1af
 80060a4:	4927      	ldr	r1, [pc, #156]	@ (8006144 <pbuf_realloc+0x108>)
 80060a6:	4826      	ldr	r0, [pc, #152]	@ (8006140 <pbuf_realloc+0x104>)
 80060a8:	f008 fede 	bl	800ee68 <iprintf>
  while (rem_len > q->len) {
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	895b      	ldrh	r3, [r3, #10]
 80060b0:	897a      	ldrh	r2, [r7, #10]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d8e1      	bhi.n	800607a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	7b1b      	ldrb	r3, [r3, #12]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d121      	bne.n	8006106 <pbuf_realloc+0xca>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	895b      	ldrh	r3, [r3, #10]
 80060c6:	897a      	ldrh	r2, [r7, #10]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d01c      	beq.n	8006106 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	7b5b      	ldrb	r3, [r3, #13]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d116      	bne.n	8006106 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	897b      	ldrh	r3, [r7, #10]
 80060e4:	4413      	add	r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4619      	mov	r1, r3
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f7fe ffba 	bl	8005064 <mem_trim>
 80060f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <pbuf_realloc+0xca>
 80060f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006138 <pbuf_realloc+0xfc>)
 80060fa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80060fe:	4912      	ldr	r1, [pc, #72]	@ (8006148 <pbuf_realloc+0x10c>)
 8006100:	480f      	ldr	r0, [pc, #60]	@ (8006140 <pbuf_realloc+0x104>)
 8006102:	f008 feb1 	bl	800ee68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	897a      	ldrh	r2, [r7, #10]
 800610a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	895a      	ldrh	r2, [r3, #10]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d004      	beq.n	8006126 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 f911 	bl	8006348 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e000      	b.n	8006130 <pbuf_realloc+0xf4>
    return;
 800612e:	bf00      	nop

}
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	08010278 	.word	0x08010278
 800613c:	08010390 	.word	0x08010390
 8006140:	080102d8 	.word	0x080102d8
 8006144:	080103a8 	.word	0x080103a8
 8006148:	080103c0 	.word	0x080103c0

0800614c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <pbuf_add_header_impl+0x22>
 8006160:	4b2b      	ldr	r3, [pc, #172]	@ (8006210 <pbuf_add_header_impl+0xc4>)
 8006162:	f240 12df 	movw	r2, #479	@ 0x1df
 8006166:	492b      	ldr	r1, [pc, #172]	@ (8006214 <pbuf_add_header_impl+0xc8>)
 8006168:	482b      	ldr	r0, [pc, #172]	@ (8006218 <pbuf_add_header_impl+0xcc>)
 800616a:	f008 fe7d 	bl	800ee68 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <pbuf_add_header_impl+0x30>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800617a:	d301      	bcc.n	8006180 <pbuf_add_header_impl+0x34>
    return 1;
 800617c:	2301      	movs	r3, #1
 800617e:	e043      	b.n	8006208 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <pbuf_add_header_impl+0x3e>
    return 0;
 8006186:	2300      	movs	r3, #0
 8006188:	e03e      	b.n	8006208 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	891a      	ldrh	r2, [r3, #8]
 8006192:	8a7b      	ldrh	r3, [r7, #18]
 8006194:	4413      	add	r3, r2
 8006196:	b29b      	uxth	r3, r3
 8006198:	8a7a      	ldrh	r2, [r7, #18]
 800619a:	429a      	cmp	r2, r3
 800619c:	d901      	bls.n	80061a2 <pbuf_add_header_impl+0x56>
    return 1;
 800619e:	2301      	movs	r3, #1
 80061a0:	e032      	b.n	8006208 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	7b1b      	ldrb	r3, [r3, #12]
 80061a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80061a8:	8a3b      	ldrh	r3, [r7, #16]
 80061aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00c      	beq.n	80061cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	425b      	negs	r3, r3
 80061ba:	4413      	add	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3310      	adds	r3, #16
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d20d      	bcs.n	80061e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e01d      	b.n	8006208 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d006      	beq.n	80061e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	425b      	negs	r3, r3
 80061da:	4413      	add	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e001      	b.n	80061e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e011      	b.n	8006208 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	895a      	ldrh	r2, [r3, #10]
 80061ee:	8a7b      	ldrh	r3, [r7, #18]
 80061f0:	4413      	add	r3, r2
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	891a      	ldrh	r2, [r3, #8]
 80061fc:	8a7b      	ldrh	r3, [r7, #18]
 80061fe:	4413      	add	r3, r2
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	811a      	strh	r2, [r3, #8]


  return 0;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	08010278 	.word	0x08010278
 8006214:	080103dc 	.word	0x080103dc
 8006218:	080102d8 	.word	0x080102d8

0800621c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006226:	2200      	movs	r2, #0
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff ff8e 	bl	800614c <pbuf_add_header_impl>
 8006230:	4603      	mov	r3, r0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d106      	bne.n	800625a <pbuf_remove_header+0x1e>
 800624c:	4b20      	ldr	r3, [pc, #128]	@ (80062d0 <pbuf_remove_header+0x94>)
 800624e:	f240 224b 	movw	r2, #587	@ 0x24b
 8006252:	4920      	ldr	r1, [pc, #128]	@ (80062d4 <pbuf_remove_header+0x98>)
 8006254:	4820      	ldr	r0, [pc, #128]	@ (80062d8 <pbuf_remove_header+0x9c>)
 8006256:	f008 fe07 	bl	800ee68 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <pbuf_remove_header+0x2c>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006266:	d301      	bcc.n	800626c <pbuf_remove_header+0x30>
    return 1;
 8006268:	2301      	movs	r3, #1
 800626a:	e02c      	b.n	80062c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <pbuf_remove_header+0x3a>
    return 0;
 8006272:	2300      	movs	r3, #0
 8006274:	e027      	b.n	80062c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	895b      	ldrh	r3, [r3, #10]
 800627e:	89fa      	ldrh	r2, [r7, #14]
 8006280:	429a      	cmp	r2, r3
 8006282:	d908      	bls.n	8006296 <pbuf_remove_header+0x5a>
 8006284:	4b12      	ldr	r3, [pc, #72]	@ (80062d0 <pbuf_remove_header+0x94>)
 8006286:	f240 2255 	movw	r2, #597	@ 0x255
 800628a:	4914      	ldr	r1, [pc, #80]	@ (80062dc <pbuf_remove_header+0xa0>)
 800628c:	4812      	ldr	r0, [pc, #72]	@ (80062d8 <pbuf_remove_header+0x9c>)
 800628e:	f008 fdeb 	bl	800ee68 <iprintf>
 8006292:	2301      	movs	r3, #1
 8006294:	e017      	b.n	80062c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	441a      	add	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	895a      	ldrh	r2, [r3, #10]
 80062ac:	89fb      	ldrh	r3, [r7, #14]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	891a      	ldrh	r2, [r3, #8]
 80062ba:	89fb      	ldrh	r3, [r7, #14]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	b29a      	uxth	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	08010278 	.word	0x08010278
 80062d4:	080103dc 	.word	0x080103dc
 80062d8:	080102d8 	.word	0x080102d8
 80062dc:	080103e8 	.word	0x080103e8

080062e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	807b      	strh	r3, [r7, #2]
 80062ec:	4613      	mov	r3, r2
 80062ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80062f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	da08      	bge.n	800630a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80062f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062fc:	425b      	negs	r3, r3
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff9b 	bl	800623c <pbuf_remove_header>
 8006306:	4603      	mov	r3, r0
 8006308:	e007      	b.n	800631a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800630a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800630e:	787a      	ldrb	r2, [r7, #1]
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff ff1a 	bl	800614c <pbuf_add_header_impl>
 8006318:	4603      	mov	r3, r0
  }
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	460b      	mov	r3, r1
 800632c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800632e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006332:	2201      	movs	r2, #1
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff ffd2 	bl	80062e0 <pbuf_header_impl>
 800633c:	4603      	mov	r3, r0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d106      	bne.n	800636a <pbuf_free+0x22>
 800635c:	4b38      	ldr	r3, [pc, #224]	@ (8006440 <pbuf_free+0xf8>)
 800635e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8006362:	4938      	ldr	r1, [pc, #224]	@ (8006444 <pbuf_free+0xfc>)
 8006364:	4838      	ldr	r0, [pc, #224]	@ (8006448 <pbuf_free+0x100>)
 8006366:	f008 fd7f 	bl	800ee68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800636a:	2300      	movs	r3, #0
 800636c:	e063      	b.n	8006436 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006372:	e05c      	b.n	800642e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	7b9b      	ldrb	r3, [r3, #14]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <pbuf_free+0x42>
 800637c:	4b30      	ldr	r3, [pc, #192]	@ (8006440 <pbuf_free+0xf8>)
 800637e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8006382:	4932      	ldr	r1, [pc, #200]	@ (800644c <pbuf_free+0x104>)
 8006384:	4830      	ldr	r0, [pc, #192]	@ (8006448 <pbuf_free+0x100>)
 8006386:	f008 fd6f 	bl	800ee68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7b9b      	ldrb	r3, [r3, #14]
 800638e:	3b01      	subs	r3, #1
 8006390:	b2da      	uxtb	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	739a      	strb	r2, [r3, #14]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	7b9b      	ldrb	r3, [r3, #14]
 800639a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800639c:	7dbb      	ldrb	r3, [r7, #22]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d143      	bne.n	800642a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	7b1b      	ldrb	r3, [r3, #12]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	7b5b      	ldrb	r3, [r3, #13]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d011      	beq.n	80063e2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <pbuf_free+0x90>
 80063ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006440 <pbuf_free+0xf8>)
 80063cc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80063d0:	491f      	ldr	r1, [pc, #124]	@ (8006450 <pbuf_free+0x108>)
 80063d2:	481d      	ldr	r0, [pc, #116]	@ (8006448 <pbuf_free+0x100>)
 80063d4:	f008 fd48 	bl	800ee68 <iprintf>
        pc->custom_free_function(p);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
 80063e0:	e01d      	b.n	800641e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d104      	bne.n	80063f2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	2008      	movs	r0, #8
 80063ec:	f7ff f936 	bl	800565c <memp_free>
 80063f0:	e015      	b.n	800641e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d104      	bne.n	8006402 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	2007      	movs	r0, #7
 80063fc:	f7ff f92e 	bl	800565c <memp_free>
 8006400:	e00d      	b.n	800641e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <pbuf_free+0xc8>
          mem_free(p);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7fe fdc1 	bl	8004f90 <mem_free>
 800640e:	e006      	b.n	800641e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006410:	4b0b      	ldr	r3, [pc, #44]	@ (8006440 <pbuf_free+0xf8>)
 8006412:	f240 320f 	movw	r2, #783	@ 0x30f
 8006416:	490f      	ldr	r1, [pc, #60]	@ (8006454 <pbuf_free+0x10c>)
 8006418:	480b      	ldr	r0, [pc, #44]	@ (8006448 <pbuf_free+0x100>)
 800641a:	f008 fd25 	bl	800ee68 <iprintf>
        }
      }
      count++;
 800641e:	7dfb      	ldrb	r3, [r7, #23]
 8006420:	3301      	adds	r3, #1
 8006422:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	607b      	str	r3, [r7, #4]
 8006428:	e001      	b.n	800642e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d19f      	bne.n	8006374 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006434:	7dfb      	ldrb	r3, [r7, #23]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	08010278 	.word	0x08010278
 8006444:	080103dc 	.word	0x080103dc
 8006448:	080102d8 	.word	0x080102d8
 800644c:	08010408 	.word	0x08010408
 8006450:	08010420 	.word	0x08010420
 8006454:	08010444 	.word	0x08010444

08006458 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006464:	e005      	b.n	8006472 <pbuf_clen+0x1a>
    ++len;
 8006466:	89fb      	ldrh	r3, [r7, #14]
 8006468:	3301      	adds	r3, #1
 800646a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1f6      	bne.n	8006466 <pbuf_clen+0xe>
  }
  return len;
 8006478:	89fb      	ldrh	r3, [r7, #14]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d010      	beq.n	80064b8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	7b9b      	ldrb	r3, [r3, #14]
 800649a:	3301      	adds	r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	7b9b      	ldrb	r3, [r3, #14]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <pbuf_ref+0x30>
 80064aa:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <pbuf_ref+0x38>)
 80064ac:	f240 3242 	movw	r2, #834	@ 0x342
 80064b0:	4904      	ldr	r1, [pc, #16]	@ (80064c4 <pbuf_ref+0x3c>)
 80064b2:	4805      	ldr	r0, [pc, #20]	@ (80064c8 <pbuf_ref+0x40>)
 80064b4:	f008 fcd8 	bl	800ee68 <iprintf>
  }
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	08010278 	.word	0x08010278
 80064c4:	08010458 	.word	0x08010458
 80064c8:	080102d8 	.word	0x080102d8

080064cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <pbuf_cat+0x16>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d107      	bne.n	80064f2 <pbuf_cat+0x26>
 80064e2:	4b20      	ldr	r3, [pc, #128]	@ (8006564 <pbuf_cat+0x98>)
 80064e4:	f240 3259 	movw	r2, #857	@ 0x359
 80064e8:	491f      	ldr	r1, [pc, #124]	@ (8006568 <pbuf_cat+0x9c>)
 80064ea:	4820      	ldr	r0, [pc, #128]	@ (800656c <pbuf_cat+0xa0>)
 80064ec:	f008 fcbc 	bl	800ee68 <iprintf>
 80064f0:	e034      	b.n	800655c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e00a      	b.n	800650e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	891a      	ldrh	r2, [r3, #8]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	891b      	ldrh	r3, [r3, #8]
 8006500:	4413      	add	r3, r2
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f0      	bne.n	80064f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	891a      	ldrh	r2, [r3, #8]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	895b      	ldrh	r3, [r3, #10]
 800651e:	429a      	cmp	r2, r3
 8006520:	d006      	beq.n	8006530 <pbuf_cat+0x64>
 8006522:	4b10      	ldr	r3, [pc, #64]	@ (8006564 <pbuf_cat+0x98>)
 8006524:	f240 3262 	movw	r2, #866	@ 0x362
 8006528:	4911      	ldr	r1, [pc, #68]	@ (8006570 <pbuf_cat+0xa4>)
 800652a:	4810      	ldr	r0, [pc, #64]	@ (800656c <pbuf_cat+0xa0>)
 800652c:	f008 fc9c 	bl	800ee68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d006      	beq.n	8006546 <pbuf_cat+0x7a>
 8006538:	4b0a      	ldr	r3, [pc, #40]	@ (8006564 <pbuf_cat+0x98>)
 800653a:	f240 3263 	movw	r2, #867	@ 0x363
 800653e:	490d      	ldr	r1, [pc, #52]	@ (8006574 <pbuf_cat+0xa8>)
 8006540:	480a      	ldr	r0, [pc, #40]	@ (800656c <pbuf_cat+0xa0>)
 8006542:	f008 fc91 	bl	800ee68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	891a      	ldrh	r2, [r3, #8]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	891b      	ldrh	r3, [r3, #8]
 800654e:	4413      	add	r3, r2
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	08010278 	.word	0x08010278
 8006568:	0801046c 	.word	0x0801046c
 800656c:	080102d8 	.word	0x080102d8
 8006570:	080104a4 	.word	0x080104a4
 8006574:	080104d4 	.word	0x080104d4

08006578 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff ffa1 	bl	80064cc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800658a:	6838      	ldr	r0, [r7, #0]
 800658c:	f7ff ff7c 	bl	8006488 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d008      	beq.n	80065c2 <pbuf_copy+0x2a>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <pbuf_copy+0x2a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	891a      	ldrh	r2, [r3, #8]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	891b      	ldrh	r3, [r3, #8]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d209      	bcs.n	80065d6 <pbuf_copy+0x3e>
 80065c2:	4b57      	ldr	r3, [pc, #348]	@ (8006720 <pbuf_copy+0x188>)
 80065c4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80065c8:	4956      	ldr	r1, [pc, #344]	@ (8006724 <pbuf_copy+0x18c>)
 80065ca:	4857      	ldr	r0, [pc, #348]	@ (8006728 <pbuf_copy+0x190>)
 80065cc:	f008 fc4c 	bl	800ee68 <iprintf>
 80065d0:	f06f 030f 	mvn.w	r3, #15
 80065d4:	e09f      	b.n	8006716 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	895b      	ldrh	r3, [r3, #10]
 80065da:	461a      	mov	r2, r3
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	1ad2      	subs	r2, r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	895b      	ldrh	r3, [r3, #10]
 80065e4:	4619      	mov	r1, r3
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1acb      	subs	r3, r1, r3
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d306      	bcc.n	80065fc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	895b      	ldrh	r3, [r3, #10]
 80065f2:	461a      	mov	r2, r3
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	e005      	b.n	8006608 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	895b      	ldrh	r3, [r3, #10]
 8006600:	461a      	mov	r2, r3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	18d0      	adds	r0, r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	4413      	add	r3, r2
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4619      	mov	r1, r3
 800661c:	f008 fcff 	bl	800f01e <memcpy>
    offset_to += len;
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	895b      	ldrh	r3, [r3, #10]
 8006634:	461a      	mov	r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	4293      	cmp	r3, r2
 800663a:	d906      	bls.n	800664a <pbuf_copy+0xb2>
 800663c:	4b38      	ldr	r3, [pc, #224]	@ (8006720 <pbuf_copy+0x188>)
 800663e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8006642:	493a      	ldr	r1, [pc, #232]	@ (800672c <pbuf_copy+0x194>)
 8006644:	4838      	ldr	r0, [pc, #224]	@ (8006728 <pbuf_copy+0x190>)
 8006646:	f008 fc0f 	bl	800ee68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	895b      	ldrh	r3, [r3, #10]
 800664e:	461a      	mov	r2, r3
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	4293      	cmp	r3, r2
 8006654:	d906      	bls.n	8006664 <pbuf_copy+0xcc>
 8006656:	4b32      	ldr	r3, [pc, #200]	@ (8006720 <pbuf_copy+0x188>)
 8006658:	f240 32da 	movw	r2, #986	@ 0x3da
 800665c:	4934      	ldr	r1, [pc, #208]	@ (8006730 <pbuf_copy+0x198>)
 800665e:	4832      	ldr	r0, [pc, #200]	@ (8006728 <pbuf_copy+0x190>)
 8006660:	f008 fc02 	bl	800ee68 <iprintf>
    if (offset_from >= p_from->len) {
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	895b      	ldrh	r3, [r3, #10]
 8006668:	461a      	mov	r2, r3
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	4293      	cmp	r3, r2
 800666e:	d304      	bcc.n	800667a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	895b      	ldrh	r3, [r3, #10]
 800667e:	461a      	mov	r2, r3
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	4293      	cmp	r3, r2
 8006684:	d114      	bne.n	80066b0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <pbuf_copy+0x118>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <pbuf_copy+0x118>
 800669c:	4b20      	ldr	r3, [pc, #128]	@ (8006720 <pbuf_copy+0x188>)
 800669e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80066a2:	4924      	ldr	r1, [pc, #144]	@ (8006734 <pbuf_copy+0x19c>)
 80066a4:	4820      	ldr	r0, [pc, #128]	@ (8006728 <pbuf_copy+0x190>)
 80066a6:	f008 fbdf 	bl	800ee68 <iprintf>
 80066aa:	f06f 030f 	mvn.w	r3, #15
 80066ae:	e032      	b.n	8006716 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d013      	beq.n	80066de <pbuf_copy+0x146>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	895a      	ldrh	r2, [r3, #10]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	891b      	ldrh	r3, [r3, #8]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d10d      	bne.n	80066de <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d009      	beq.n	80066de <pbuf_copy+0x146>
 80066ca:	4b15      	ldr	r3, [pc, #84]	@ (8006720 <pbuf_copy+0x188>)
 80066cc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80066d0:	4919      	ldr	r1, [pc, #100]	@ (8006738 <pbuf_copy+0x1a0>)
 80066d2:	4815      	ldr	r0, [pc, #84]	@ (8006728 <pbuf_copy+0x190>)
 80066d4:	f008 fbc8 	bl	800ee68 <iprintf>
 80066d8:	f06f 0305 	mvn.w	r3, #5
 80066dc:	e01b      	b.n	8006716 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d013      	beq.n	800670c <pbuf_copy+0x174>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	895a      	ldrh	r2, [r3, #10]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	891b      	ldrh	r3, [r3, #8]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d10d      	bne.n	800670c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <pbuf_copy+0x174>
 80066f8:	4b09      	ldr	r3, [pc, #36]	@ (8006720 <pbuf_copy+0x188>)
 80066fa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80066fe:	490e      	ldr	r1, [pc, #56]	@ (8006738 <pbuf_copy+0x1a0>)
 8006700:	4809      	ldr	r0, [pc, #36]	@ (8006728 <pbuf_copy+0x190>)
 8006702:	f008 fbb1 	bl	800ee68 <iprintf>
 8006706:	f06f 0305 	mvn.w	r3, #5
 800670a:	e004      	b.n	8006716 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f47f af61 	bne.w	80065d6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	08010278 	.word	0x08010278
 8006724:	08010520 	.word	0x08010520
 8006728:	080102d8 	.word	0x080102d8
 800672c:	08010550 	.word	0x08010550
 8006730:	08010568 	.word	0x08010568
 8006734:	08010584 	.word	0x08010584
 8006738:	08010594 	.word	0x08010594

0800673c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	460b      	mov	r3, r1
 800674c:	80fb      	strh	r3, [r7, #6]
 800674e:	4613      	mov	r3, r2
 8006750:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d108      	bne.n	8006772 <pbuf_copy_partial+0x36>
 8006760:	4b2b      	ldr	r3, [pc, #172]	@ (8006810 <pbuf_copy_partial+0xd4>)
 8006762:	f240 420a 	movw	r2, #1034	@ 0x40a
 8006766:	492b      	ldr	r1, [pc, #172]	@ (8006814 <pbuf_copy_partial+0xd8>)
 8006768:	482b      	ldr	r0, [pc, #172]	@ (8006818 <pbuf_copy_partial+0xdc>)
 800676a:	f008 fb7d 	bl	800ee68 <iprintf>
 800676e:	2300      	movs	r3, #0
 8006770:	e04a      	b.n	8006808 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d108      	bne.n	800678a <pbuf_copy_partial+0x4e>
 8006778:	4b25      	ldr	r3, [pc, #148]	@ (8006810 <pbuf_copy_partial+0xd4>)
 800677a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800677e:	4927      	ldr	r1, [pc, #156]	@ (800681c <pbuf_copy_partial+0xe0>)
 8006780:	4825      	ldr	r0, [pc, #148]	@ (8006818 <pbuf_copy_partial+0xdc>)
 8006782:	f008 fb71 	bl	800ee68 <iprintf>
 8006786:	2300      	movs	r3, #0
 8006788:	e03e      	b.n	8006808 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	e034      	b.n	80067fa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006790:	88bb      	ldrh	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <pbuf_copy_partial+0x70>
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	895b      	ldrh	r3, [r3, #10]
 800679a:	88ba      	ldrh	r2, [r7, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	d305      	bcc.n	80067ac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	895b      	ldrh	r3, [r3, #10]
 80067a4:	88ba      	ldrh	r2, [r7, #4]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	80bb      	strh	r3, [r7, #4]
 80067aa:	e023      	b.n	80067f4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	895a      	ldrh	r2, [r3, #10]
 80067b0:	88bb      	ldrh	r3, [r7, #4]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80067b6:	8b3a      	ldrh	r2, [r7, #24]
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d901      	bls.n	80067c2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80067be:	88fb      	ldrh	r3, [r7, #6]
 80067c0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80067c2:	8b7b      	ldrh	r3, [r7, #26]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	18d0      	adds	r0, r2, r3
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	88bb      	ldrh	r3, [r7, #4]
 80067ce:	4413      	add	r3, r2
 80067d0:	8b3a      	ldrh	r2, [r7, #24]
 80067d2:	4619      	mov	r1, r3
 80067d4:	f008 fc23 	bl	800f01e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80067d8:	8afa      	ldrh	r2, [r7, #22]
 80067da:	8b3b      	ldrh	r3, [r7, #24]
 80067dc:	4413      	add	r3, r2
 80067de:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80067e0:	8b7a      	ldrh	r2, [r7, #26]
 80067e2:	8b3b      	ldrh	r3, [r7, #24]
 80067e4:	4413      	add	r3, r2
 80067e6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80067e8:	88fa      	ldrh	r2, [r7, #6]
 80067ea:	8b3b      	ldrh	r3, [r7, #24]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <pbuf_copy_partial+0xca>
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1c4      	bne.n	8006790 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006806:	8afb      	ldrh	r3, [r7, #22]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3720      	adds	r7, #32
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	08010278 	.word	0x08010278
 8006814:	080105c0 	.word	0x080105c0
 8006818:	080102d8 	.word	0x080102d8
 800681c:	080105e0 	.word	0x080105e0

08006820 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	603a      	str	r2, [r7, #0]
 800682a:	71fb      	strb	r3, [r7, #7]
 800682c:	460b      	mov	r3, r1
 800682e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	8919      	ldrh	r1, [r3, #8]
 8006834:	88ba      	ldrh	r2, [r7, #4]
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff faa1 	bl	8005d80 <pbuf_alloc>
 800683e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <pbuf_clone+0x2a>
    return NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	e011      	b.n	800686e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff fea3 	bl	8006598 <pbuf_copy>
 8006852:	4603      	mov	r3, r0
 8006854:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006856:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d006      	beq.n	800686c <pbuf_clone+0x4c>
 800685e:	4b06      	ldr	r3, [pc, #24]	@ (8006878 <pbuf_clone+0x58>)
 8006860:	f240 5224 	movw	r2, #1316	@ 0x524
 8006864:	4905      	ldr	r1, [pc, #20]	@ (800687c <pbuf_clone+0x5c>)
 8006866:	4806      	ldr	r0, [pc, #24]	@ (8006880 <pbuf_clone+0x60>)
 8006868:	f008 fafe 	bl	800ee68 <iprintf>
  return q;
 800686c:	68fb      	ldr	r3, [r7, #12]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	08010278 	.word	0x08010278
 800687c:	080106ec 	.word	0x080106ec
 8006880:	080102d8 	.word	0x080102d8

08006884 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006888:	f008 f9ee 	bl	800ec68 <rand>
 800688c:	4603      	mov	r3, r0
 800688e:	b29b      	uxth	r3, r3
 8006890:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006894:	b29b      	uxth	r3, r3
 8006896:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800689a:	b29a      	uxth	r2, r3
 800689c:	4b01      	ldr	r3, [pc, #4]	@ (80068a4 <tcp_init+0x20>)
 800689e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80068a0:	bf00      	nop
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000020 	.word	0x20000020

080068a8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	7d1b      	ldrb	r3, [r3, #20]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d105      	bne.n	80068c4 <tcp_free+0x1c>
 80068b8:	4b06      	ldr	r3, [pc, #24]	@ (80068d4 <tcp_free+0x2c>)
 80068ba:	22d4      	movs	r2, #212	@ 0xd4
 80068bc:	4906      	ldr	r1, [pc, #24]	@ (80068d8 <tcp_free+0x30>)
 80068be:	4807      	ldr	r0, [pc, #28]	@ (80068dc <tcp_free+0x34>)
 80068c0:	f008 fad2 	bl	800ee68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	2001      	movs	r0, #1
 80068c8:	f7fe fec8 	bl	800565c <memp_free>
}
 80068cc:	bf00      	nop
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	08010778 	.word	0x08010778
 80068d8:	080107a8 	.word	0x080107a8
 80068dc:	080107bc 	.word	0x080107bc

080068e0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	7d1b      	ldrb	r3, [r3, #20]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d105      	bne.n	80068fc <tcp_free_listen+0x1c>
 80068f0:	4b06      	ldr	r3, [pc, #24]	@ (800690c <tcp_free_listen+0x2c>)
 80068f2:	22df      	movs	r2, #223	@ 0xdf
 80068f4:	4906      	ldr	r1, [pc, #24]	@ (8006910 <tcp_free_listen+0x30>)
 80068f6:	4807      	ldr	r0, [pc, #28]	@ (8006914 <tcp_free_listen+0x34>)
 80068f8:	f008 fab6 	bl	800ee68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	2002      	movs	r0, #2
 8006900:	f7fe feac 	bl	800565c <memp_free>
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	08010778 	.word	0x08010778
 8006910:	080107e4 	.word	0x080107e4
 8006914:	080107bc 	.word	0x080107bc

08006918 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800691c:	f000 fea4 	bl	8007668 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006920:	4b07      	ldr	r3, [pc, #28]	@ (8006940 <tcp_tmr+0x28>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	b2da      	uxtb	r2, r3
 8006928:	4b05      	ldr	r3, [pc, #20]	@ (8006940 <tcp_tmr+0x28>)
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	4b04      	ldr	r3, [pc, #16]	@ (8006940 <tcp_tmr+0x28>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006938:	f000 fb54 	bl	8006fe4 <tcp_slowtmr>
  }
}
 800693c:	bf00      	nop
 800693e:	bd80      	pop	{r7, pc}
 8006940:	2000829d 	.word	0x2000829d

08006944 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d105      	bne.n	8006960 <tcp_remove_listener+0x1c>
 8006954:	4b0d      	ldr	r3, [pc, #52]	@ (800698c <tcp_remove_listener+0x48>)
 8006956:	22ff      	movs	r2, #255	@ 0xff
 8006958:	490d      	ldr	r1, [pc, #52]	@ (8006990 <tcp_remove_listener+0x4c>)
 800695a:	480e      	ldr	r0, [pc, #56]	@ (8006994 <tcp_remove_listener+0x50>)
 800695c:	f008 fa84 	bl	800ee68 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	e00a      	b.n	800697c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d102      	bne.n	8006976 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1f1      	bne.n	8006966 <tcp_remove_listener+0x22>
    }
  }
}
 8006982:	bf00      	nop
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	08010778 	.word	0x08010778
 8006990:	08010800 	.word	0x08010800
 8006994:	080107bc 	.word	0x080107bc

08006998 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <tcp_listen_closed+0x1c>
 80069a6:	4b14      	ldr	r3, [pc, #80]	@ (80069f8 <tcp_listen_closed+0x60>)
 80069a8:	f240 1211 	movw	r2, #273	@ 0x111
 80069ac:	4913      	ldr	r1, [pc, #76]	@ (80069fc <tcp_listen_closed+0x64>)
 80069ae:	4814      	ldr	r0, [pc, #80]	@ (8006a00 <tcp_listen_closed+0x68>)
 80069b0:	f008 fa5a 	bl	800ee68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	7d1b      	ldrb	r3, [r3, #20]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d006      	beq.n	80069ca <tcp_listen_closed+0x32>
 80069bc:	4b0e      	ldr	r3, [pc, #56]	@ (80069f8 <tcp_listen_closed+0x60>)
 80069be:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80069c2:	4910      	ldr	r1, [pc, #64]	@ (8006a04 <tcp_listen_closed+0x6c>)
 80069c4:	480e      	ldr	r0, [pc, #56]	@ (8006a00 <tcp_listen_closed+0x68>)
 80069c6:	f008 fa4f 	bl	800ee68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80069ca:	2301      	movs	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	e00b      	b.n	80069e8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80069d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006a08 <tcp_listen_closed+0x70>)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff ffb1 	bl	8006944 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3301      	adds	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d9f0      	bls.n	80069d0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80069ee:	bf00      	nop
 80069f0:	bf00      	nop
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	08010778 	.word	0x08010778
 80069fc:	08010828 	.word	0x08010828
 8006a00:	080107bc 	.word	0x080107bc
 8006a04:	08010834 	.word	0x08010834
 8006a08:	08012758 	.word	0x08012758

08006a0c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006a0c:	b5b0      	push	{r4, r5, r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af04      	add	r7, sp, #16
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d106      	bne.n	8006a2c <tcp_close_shutdown+0x20>
 8006a1e:	4b63      	ldr	r3, [pc, #396]	@ (8006bac <tcp_close_shutdown+0x1a0>)
 8006a20:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006a24:	4962      	ldr	r1, [pc, #392]	@ (8006bb0 <tcp_close_shutdown+0x1a4>)
 8006a26:	4863      	ldr	r0, [pc, #396]	@ (8006bb4 <tcp_close_shutdown+0x1a8>)
 8006a28:	f008 fa1e 	bl	800ee68 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d066      	beq.n	8006b00 <tcp_close_shutdown+0xf4>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	7d1b      	ldrb	r3, [r3, #20]
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d003      	beq.n	8006a42 <tcp_close_shutdown+0x36>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	7d1b      	ldrb	r3, [r3, #20]
 8006a3e:	2b07      	cmp	r3, #7
 8006a40:	d15e      	bne.n	8006b00 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <tcp_close_shutdown+0x48>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a4e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006a52:	d055      	beq.n	8006b00 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	8b5b      	ldrh	r3, [r3, #26]
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d106      	bne.n	8006a6e <tcp_close_shutdown+0x62>
 8006a60:	4b52      	ldr	r3, [pc, #328]	@ (8006bac <tcp_close_shutdown+0x1a0>)
 8006a62:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8006a66:	4954      	ldr	r1, [pc, #336]	@ (8006bb8 <tcp_close_shutdown+0x1ac>)
 8006a68:	4852      	ldr	r0, [pc, #328]	@ (8006bb4 <tcp_close_shutdown+0x1a8>)
 8006a6a:	f008 f9fd 	bl	800ee68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006a76:	687d      	ldr	r5, [r7, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	8ad2      	ldrh	r2, [r2, #22]
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	8b09      	ldrh	r1, [r1, #24]
 8006a84:	9102      	str	r1, [sp, #8]
 8006a86:	9201      	str	r2, [sp, #4]
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	462b      	mov	r3, r5
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	4601      	mov	r1, r0
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f004 fe8d 	bl	800b7b0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f001 f8c8 	bl	8007c2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006a9c:	4b47      	ldr	r3, [pc, #284]	@ (8006bbc <tcp_close_shutdown+0x1b0>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d105      	bne.n	8006ab2 <tcp_close_shutdown+0xa6>
 8006aa6:	4b45      	ldr	r3, [pc, #276]	@ (8006bbc <tcp_close_shutdown+0x1b0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	4a43      	ldr	r2, [pc, #268]	@ (8006bbc <tcp_close_shutdown+0x1b0>)
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	e013      	b.n	8006ada <tcp_close_shutdown+0xce>
 8006ab2:	4b42      	ldr	r3, [pc, #264]	@ (8006bbc <tcp_close_shutdown+0x1b0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e00c      	b.n	8006ad4 <tcp_close_shutdown+0xc8>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d104      	bne.n	8006ace <tcp_close_shutdown+0xc2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	60da      	str	r2, [r3, #12]
 8006acc:	e005      	b.n	8006ada <tcp_close_shutdown+0xce>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1ef      	bne.n	8006aba <tcp_close_shutdown+0xae>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	60da      	str	r2, [r3, #12]
 8006ae0:	4b37      	ldr	r3, [pc, #220]	@ (8006bc0 <tcp_close_shutdown+0x1b4>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006ae6:	4b37      	ldr	r3, [pc, #220]	@ (8006bc4 <tcp_close_shutdown+0x1b8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d102      	bne.n	8006af6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006af0:	f003 fd5c 	bl	800a5ac <tcp_trigger_input_pcb_close>
 8006af4:	e002      	b.n	8006afc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff fed6 	bl	80068a8 <tcp_free>
      }
      return ERR_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	e050      	b.n	8006ba2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7d1b      	ldrb	r3, [r3, #20]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d03b      	beq.n	8006b80 <tcp_close_shutdown+0x174>
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	dc44      	bgt.n	8006b96 <tcp_close_shutdown+0x18a>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <tcp_close_shutdown+0x10a>
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d02a      	beq.n	8006b6a <tcp_close_shutdown+0x15e>
 8006b14:	e03f      	b.n	8006b96 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	8adb      	ldrh	r3, [r3, #22]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d021      	beq.n	8006b62 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8006bc8 <tcp_close_shutdown+0x1bc>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d105      	bne.n	8006b34 <tcp_close_shutdown+0x128>
 8006b28:	4b27      	ldr	r3, [pc, #156]	@ (8006bc8 <tcp_close_shutdown+0x1bc>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	4a26      	ldr	r2, [pc, #152]	@ (8006bc8 <tcp_close_shutdown+0x1bc>)
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	e013      	b.n	8006b5c <tcp_close_shutdown+0x150>
 8006b34:	4b24      	ldr	r3, [pc, #144]	@ (8006bc8 <tcp_close_shutdown+0x1bc>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60bb      	str	r3, [r7, #8]
 8006b3a:	e00c      	b.n	8006b56 <tcp_close_shutdown+0x14a>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d104      	bne.n	8006b50 <tcp_close_shutdown+0x144>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	60da      	str	r2, [r3, #12]
 8006b4e:	e005      	b.n	8006b5c <tcp_close_shutdown+0x150>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1ef      	bne.n	8006b3c <tcp_close_shutdown+0x130>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff fea0 	bl	80068a8 <tcp_free>
      break;
 8006b68:	e01a      	b.n	8006ba0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff ff14 	bl	8006998 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	4816      	ldr	r0, [pc, #88]	@ (8006bcc <tcp_close_shutdown+0x1c0>)
 8006b74:	f001 f8aa 	bl	8007ccc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff feb1 	bl	80068e0 <tcp_free_listen>
      break;
 8006b7e:	e00f      	b.n	8006ba0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	480e      	ldr	r0, [pc, #56]	@ (8006bbc <tcp_close_shutdown+0x1b0>)
 8006b84:	f001 f8a2 	bl	8007ccc <tcp_pcb_remove>
 8006b88:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc0 <tcp_close_shutdown+0x1b4>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fe8a 	bl	80068a8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006b94:	e004      	b.n	8006ba0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f81a 	bl	8006bd0 <tcp_close_shutdown_fin>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	e000      	b.n	8006ba2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8006baa:	bf00      	nop
 8006bac:	08010778 	.word	0x08010778
 8006bb0:	0801084c 	.word	0x0801084c
 8006bb4:	080107bc 	.word	0x080107bc
 8006bb8:	0801086c 	.word	0x0801086c
 8006bbc:	20008294 	.word	0x20008294
 8006bc0:	2000829c 	.word	0x2000829c
 8006bc4:	200082d4 	.word	0x200082d4
 8006bc8:	2000828c 	.word	0x2000828c
 8006bcc:	20008290 	.word	0x20008290

08006bd0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <tcp_close_shutdown_fin+0x1c>
 8006bde:	4b2e      	ldr	r3, [pc, #184]	@ (8006c98 <tcp_close_shutdown_fin+0xc8>)
 8006be0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8006be4:	492d      	ldr	r1, [pc, #180]	@ (8006c9c <tcp_close_shutdown_fin+0xcc>)
 8006be6:	482e      	ldr	r0, [pc, #184]	@ (8006ca0 <tcp_close_shutdown_fin+0xd0>)
 8006be8:	f008 f93e 	bl	800ee68 <iprintf>

  switch (pcb->state) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7d1b      	ldrb	r3, [r3, #20]
 8006bf0:	2b07      	cmp	r3, #7
 8006bf2:	d020      	beq.n	8006c36 <tcp_close_shutdown_fin+0x66>
 8006bf4:	2b07      	cmp	r3, #7
 8006bf6:	dc2b      	bgt.n	8006c50 <tcp_close_shutdown_fin+0x80>
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d002      	beq.n	8006c02 <tcp_close_shutdown_fin+0x32>
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d00d      	beq.n	8006c1c <tcp_close_shutdown_fin+0x4c>
 8006c00:	e026      	b.n	8006c50 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f003 fee2 	bl	800a9cc <tcp_send_fin>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d11f      	bne.n	8006c54 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2205      	movs	r2, #5
 8006c18:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c1a:	e01b      	b.n	8006c54 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f003 fed5 	bl	800a9cc <tcp_send_fin>
 8006c22:	4603      	mov	r3, r0
 8006c24:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d114      	bne.n	8006c58 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2205      	movs	r2, #5
 8006c32:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c34:	e010      	b.n	8006c58 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f003 fec8 	bl	800a9cc <tcp_send_fin>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d109      	bne.n	8006c5c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2209      	movs	r2, #9
 8006c4c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c4e:	e005      	b.n	8006c5c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e01c      	b.n	8006c8e <tcp_close_shutdown_fin+0xbe>
      break;
 8006c54:	bf00      	nop
 8006c56:	e002      	b.n	8006c5e <tcp_close_shutdown_fin+0x8e>
      break;
 8006c58:	bf00      	nop
 8006c5a:	e000      	b.n	8006c5e <tcp_close_shutdown_fin+0x8e>
      break;
 8006c5c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f003 ffee 	bl	800ac48 <tcp_output>
 8006c6c:	e00d      	b.n	8006c8a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c76:	d108      	bne.n	8006c8a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	8b5b      	ldrh	r3, [r3, #26]
 8006c7c:	f043 0308 	orr.w	r3, r3, #8
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	e001      	b.n	8006c8e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	08010778 	.word	0x08010778
 8006c9c:	08010828 	.word	0x08010828
 8006ca0:	080107bc 	.word	0x080107bc

08006ca4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <tcp_close+0x22>
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf0 <tcp_close+0x4c>)
 8006cb4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006cb8:	490e      	ldr	r1, [pc, #56]	@ (8006cf4 <tcp_close+0x50>)
 8006cba:	480f      	ldr	r0, [pc, #60]	@ (8006cf8 <tcp_close+0x54>)
 8006cbc:	f008 f8d4 	bl	800ee68 <iprintf>
 8006cc0:	f06f 030f 	mvn.w	r3, #15
 8006cc4:	e00f      	b.n	8006ce6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	7d1b      	ldrb	r3, [r3, #20]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d006      	beq.n	8006cdc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8b5b      	ldrh	r3, [r3, #26]
 8006cd2:	f043 0310 	orr.w	r3, r3, #16
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006cdc:	2101      	movs	r1, #1
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff fe94 	bl	8006a0c <tcp_close_shutdown>
 8006ce4:	4603      	mov	r3, r0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	08010778 	.word	0x08010778
 8006cf4:	08010888 	.word	0x08010888
 8006cf8:	080107bc 	.word	0x080107bc

08006cfc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08e      	sub	sp, #56	@ 0x38
 8006d00:	af04      	add	r7, sp, #16
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d107      	bne.n	8006d1c <tcp_abandon+0x20>
 8006d0c:	4b52      	ldr	r3, [pc, #328]	@ (8006e58 <tcp_abandon+0x15c>)
 8006d0e:	f240 223d 	movw	r2, #573	@ 0x23d
 8006d12:	4952      	ldr	r1, [pc, #328]	@ (8006e5c <tcp_abandon+0x160>)
 8006d14:	4852      	ldr	r0, [pc, #328]	@ (8006e60 <tcp_abandon+0x164>)
 8006d16:	f008 f8a7 	bl	800ee68 <iprintf>
 8006d1a:	e099      	b.n	8006e50 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7d1b      	ldrb	r3, [r3, #20]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d106      	bne.n	8006d32 <tcp_abandon+0x36>
 8006d24:	4b4c      	ldr	r3, [pc, #304]	@ (8006e58 <tcp_abandon+0x15c>)
 8006d26:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8006d2a:	494e      	ldr	r1, [pc, #312]	@ (8006e64 <tcp_abandon+0x168>)
 8006d2c:	484c      	ldr	r0, [pc, #304]	@ (8006e60 <tcp_abandon+0x164>)
 8006d2e:	f008 f89b 	bl	800ee68 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	7d1b      	ldrb	r3, [r3, #20]
 8006d36:	2b0a      	cmp	r3, #10
 8006d38:	d107      	bne.n	8006d4a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	484a      	ldr	r0, [pc, #296]	@ (8006e68 <tcp_abandon+0x16c>)
 8006d3e:	f000 ffc5 	bl	8007ccc <tcp_pcb_remove>
    tcp_free(pcb);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff fdb0 	bl	80068a8 <tcp_free>
 8006d48:	e082      	b.n	8006e50 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d56:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d64:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	7d1b      	ldrb	r3, [r3, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d126      	bne.n	8006dc2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	8adb      	ldrh	r3, [r3, #22]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d02e      	beq.n	8006dda <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8006e6c <tcp_abandon+0x170>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d105      	bne.n	8006d92 <tcp_abandon+0x96>
 8006d86:	4b39      	ldr	r3, [pc, #228]	@ (8006e6c <tcp_abandon+0x170>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	4a37      	ldr	r2, [pc, #220]	@ (8006e6c <tcp_abandon+0x170>)
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	e013      	b.n	8006dba <tcp_abandon+0xbe>
 8006d92:	4b36      	ldr	r3, [pc, #216]	@ (8006e6c <tcp_abandon+0x170>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	e00c      	b.n	8006db4 <tcp_abandon+0xb8>
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d104      	bne.n	8006dae <tcp_abandon+0xb2>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	60da      	str	r2, [r3, #12]
 8006dac:	e005      	b.n	8006dba <tcp_abandon+0xbe>
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	61fb      	str	r3, [r7, #28]
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1ef      	bne.n	8006d9a <tcp_abandon+0x9e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	60da      	str	r2, [r3, #12]
 8006dc0:	e00b      	b.n	8006dda <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	8adb      	ldrh	r3, [r3, #22]
 8006dca:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4828      	ldr	r0, [pc, #160]	@ (8006e70 <tcp_abandon+0x174>)
 8006dd0:	f000 ff7c 	bl	8007ccc <tcp_pcb_remove>
 8006dd4:	4b27      	ldr	r3, [pc, #156]	@ (8006e74 <tcp_abandon+0x178>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d004      	beq.n	8006dec <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fd1e 	bl	8007828 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fd15 	bl	8007828 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d004      	beq.n	8006e10 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fd0c 	bl	8007828 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00e      	beq.n	8006e34 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	8b12      	ldrh	r2, [r2, #24]
 8006e20:	9202      	str	r2, [sp, #8]
 8006e22:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006e24:	9201      	str	r2, [sp, #4]
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	69b9      	ldr	r1, [r7, #24]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f004 fcbe 	bl	800b7b0 <tcp_rst>
    }
    last_state = pcb->state;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	7d1b      	ldrb	r3, [r3, #20]
 8006e38:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff fd34 	bl	80068a8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <tcp_abandon+0x154>
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f06f 010c 	mvn.w	r1, #12
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	4798      	blx	r3
  }
}
 8006e50:	3728      	adds	r7, #40	@ 0x28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	08010778 	.word	0x08010778
 8006e5c:	080108bc 	.word	0x080108bc
 8006e60:	080107bc 	.word	0x080107bc
 8006e64:	080108d8 	.word	0x080108d8
 8006e68:	20008298 	.word	0x20008298
 8006e6c:	2000828c 	.word	0x2000828c
 8006e70:	20008294 	.word	0x20008294
 8006e74:	2000829c 	.word	0x2000829c

08006e78 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006e80:	2101      	movs	r1, #1
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff ff3a 	bl	8006cfc <tcp_abandon>
}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <tcp_update_rcv_ann_wnd+0x1c>
 8006e9e:	4b25      	ldr	r3, [pc, #148]	@ (8006f34 <tcp_update_rcv_ann_wnd+0xa4>)
 8006ea0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8006ea4:	4924      	ldr	r1, [pc, #144]	@ (8006f38 <tcp_update_rcv_ann_wnd+0xa8>)
 8006ea6:	4825      	ldr	r0, [pc, #148]	@ (8006f3c <tcp_update_rcv_ann_wnd+0xac>)
 8006ea8:	f007 ffde 	bl	800ee68 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006eb4:	4413      	add	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8006ec0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8006ec4:	bf28      	it	cs
 8006ec6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8006eca:	b292      	uxth	r2, r2
 8006ecc:	4413      	add	r3, r2
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	db08      	blt.n	8006ee8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	e020      	b.n	8006f2a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	dd03      	ble.n	8006efe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006efc:	e014      	b.n	8006f28 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f10:	d306      	bcc.n	8006f20 <tcp_update_rcv_ann_wnd+0x90>
 8006f12:	4b08      	ldr	r3, [pc, #32]	@ (8006f34 <tcp_update_rcv_ann_wnd+0xa4>)
 8006f14:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8006f18:	4909      	ldr	r1, [pc, #36]	@ (8006f40 <tcp_update_rcv_ann_wnd+0xb0>)
 8006f1a:	4808      	ldr	r0, [pc, #32]	@ (8006f3c <tcp_update_rcv_ann_wnd+0xac>)
 8006f1c:	f007 ffa4 	bl	800ee68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8006f28:	2300      	movs	r3, #0
  }
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	08010778 	.word	0x08010778
 8006f38:	080109d4 	.word	0x080109d4
 8006f3c:	080107bc 	.word	0x080107bc
 8006f40:	080109f8 	.word	0x080109f8

08006f44 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d107      	bne.n	8006f66 <tcp_recved+0x22>
 8006f56:	4b1f      	ldr	r3, [pc, #124]	@ (8006fd4 <tcp_recved+0x90>)
 8006f58:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8006f5c:	491e      	ldr	r1, [pc, #120]	@ (8006fd8 <tcp_recved+0x94>)
 8006f5e:	481f      	ldr	r0, [pc, #124]	@ (8006fdc <tcp_recved+0x98>)
 8006f60:	f007 ff82 	bl	800ee68 <iprintf>
 8006f64:	e032      	b.n	8006fcc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	7d1b      	ldrb	r3, [r3, #20]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d106      	bne.n	8006f7c <tcp_recved+0x38>
 8006f6e:	4b19      	ldr	r3, [pc, #100]	@ (8006fd4 <tcp_recved+0x90>)
 8006f70:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8006f74:	491a      	ldr	r1, [pc, #104]	@ (8006fe0 <tcp_recved+0x9c>)
 8006f76:	4819      	ldr	r0, [pc, #100]	@ (8006fdc <tcp_recved+0x98>)
 8006f78:	f007 ff76 	bl	800ee68 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006f80:	887b      	ldrh	r3, [r7, #2]
 8006f82:	4413      	add	r3, r2
 8006f84:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006f86:	89fb      	ldrh	r3, [r7, #14]
 8006f88:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006f8c:	d804      	bhi.n	8006f98 <tcp_recved+0x54>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f92:	89fa      	ldrh	r2, [r7, #14]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d204      	bcs.n	8006fa2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006fa0:	e002      	b.n	8006fa8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	89fa      	ldrh	r2, [r7, #14]
 8006fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff ff71 	bl	8006e90 <tcp_update_rcv_ann_wnd>
 8006fae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8006fb6:	d309      	bcc.n	8006fcc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8b5b      	ldrh	r3, [r3, #26]
 8006fbc:	f043 0302 	orr.w	r3, r3, #2
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f003 fe3e 	bl	800ac48 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	08010778 	.word	0x08010778
 8006fd8:	08010a14 	.word	0x08010a14
 8006fdc:	080107bc 	.word	0x080107bc
 8006fe0:	08010a2c 	.word	0x08010a2c

08006fe4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006fe4:	b5b0      	push	{r4, r5, r7, lr}
 8006fe6:	b090      	sub	sp, #64	@ 0x40
 8006fe8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8006ff0:	4b95      	ldr	r3, [pc, #596]	@ (8007248 <tcp_slowtmr+0x264>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	4a94      	ldr	r2, [pc, #592]	@ (8007248 <tcp_slowtmr+0x264>)
 8006ff8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006ffa:	4b94      	ldr	r3, [pc, #592]	@ (800724c <tcp_slowtmr+0x268>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	3301      	adds	r3, #1
 8007000:	b2da      	uxtb	r2, r3
 8007002:	4b92      	ldr	r3, [pc, #584]	@ (800724c <tcp_slowtmr+0x268>)
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	e000      	b.n	800700a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8007008:	bf00      	nop
  prev = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800700e:	4b90      	ldr	r3, [pc, #576]	@ (8007250 <tcp_slowtmr+0x26c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007014:	e29f      	b.n	8007556 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	7d1b      	ldrb	r3, [r3, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <tcp_slowtmr+0x48>
 800701e:	4b8d      	ldr	r3, [pc, #564]	@ (8007254 <tcp_slowtmr+0x270>)
 8007020:	f240 42be 	movw	r2, #1214	@ 0x4be
 8007024:	498c      	ldr	r1, [pc, #560]	@ (8007258 <tcp_slowtmr+0x274>)
 8007026:	488d      	ldr	r0, [pc, #564]	@ (800725c <tcp_slowtmr+0x278>)
 8007028:	f007 ff1e 	bl	800ee68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800702c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702e:	7d1b      	ldrb	r3, [r3, #20]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d106      	bne.n	8007042 <tcp_slowtmr+0x5e>
 8007034:	4b87      	ldr	r3, [pc, #540]	@ (8007254 <tcp_slowtmr+0x270>)
 8007036:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800703a:	4989      	ldr	r1, [pc, #548]	@ (8007260 <tcp_slowtmr+0x27c>)
 800703c:	4887      	ldr	r0, [pc, #540]	@ (800725c <tcp_slowtmr+0x278>)
 800703e:	f007 ff13 	bl	800ee68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007044:	7d1b      	ldrb	r3, [r3, #20]
 8007046:	2b0a      	cmp	r3, #10
 8007048:	d106      	bne.n	8007058 <tcp_slowtmr+0x74>
 800704a:	4b82      	ldr	r3, [pc, #520]	@ (8007254 <tcp_slowtmr+0x270>)
 800704c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007050:	4984      	ldr	r1, [pc, #528]	@ (8007264 <tcp_slowtmr+0x280>)
 8007052:	4882      	ldr	r0, [pc, #520]	@ (800725c <tcp_slowtmr+0x278>)
 8007054:	f007 ff08 	bl	800ee68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705a:	7f9a      	ldrb	r2, [r3, #30]
 800705c:	4b7b      	ldr	r3, [pc, #492]	@ (800724c <tcp_slowtmr+0x268>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d105      	bne.n	8007070 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007066:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800706e:	e272      	b.n	8007556 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8007070:	4b76      	ldr	r3, [pc, #472]	@ (800724c <tcp_slowtmr+0x268>)
 8007072:	781a      	ldrb	r2, [r3, #0]
 8007074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007076:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007086:	7d1b      	ldrb	r3, [r3, #20]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d10a      	bne.n	80070a2 <tcp_slowtmr+0xbe>
 800708c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007092:	2b05      	cmp	r3, #5
 8007094:	d905      	bls.n	80070a2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007096:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800709a:	3301      	adds	r3, #1
 800709c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80070a0:	e11e      	b.n	80072e0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80070a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070a8:	2b0b      	cmp	r3, #11
 80070aa:	d905      	bls.n	80070b8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80070ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070b0:	3301      	adds	r3, #1
 80070b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80070b6:	e113      	b.n	80072e0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80070b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d075      	beq.n	80071ae <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80070c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d006      	beq.n	80070d8 <tcp_slowtmr+0xf4>
 80070ca:	4b62      	ldr	r3, [pc, #392]	@ (8007254 <tcp_slowtmr+0x270>)
 80070cc:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80070d0:	4965      	ldr	r1, [pc, #404]	@ (8007268 <tcp_slowtmr+0x284>)
 80070d2:	4862      	ldr	r0, [pc, #392]	@ (800725c <tcp_slowtmr+0x278>)
 80070d4:	f007 fec8 	bl	800ee68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80070d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <tcp_slowtmr+0x10a>
 80070e0:	4b5c      	ldr	r3, [pc, #368]	@ (8007254 <tcp_slowtmr+0x270>)
 80070e2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80070e6:	4961      	ldr	r1, [pc, #388]	@ (800726c <tcp_slowtmr+0x288>)
 80070e8:	485c      	ldr	r0, [pc, #368]	@ (800725c <tcp_slowtmr+0x278>)
 80070ea:	f007 febd 	bl	800ee68 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80070ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80070f4:	2b0b      	cmp	r3, #11
 80070f6:	d905      	bls.n	8007104 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80070f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070fc:	3301      	adds	r3, #1
 80070fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007102:	e0ed      	b.n	80072e0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007106:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800710a:	3b01      	subs	r3, #1
 800710c:	4a58      	ldr	r2, [pc, #352]	@ (8007270 <tcp_slowtmr+0x28c>)
 800710e:	5cd3      	ldrb	r3, [r2, r3]
 8007110:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007114:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007118:	7c7a      	ldrb	r2, [r7, #17]
 800711a:	429a      	cmp	r2, r3
 800711c:	d907      	bls.n	800712e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800711e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007120:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007124:	3301      	adds	r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800712e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007130:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007134:	7c7a      	ldrb	r2, [r7, #17]
 8007136:	429a      	cmp	r2, r3
 8007138:	f200 80d2 	bhi.w	80072e0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800713c:	2301      	movs	r3, #1
 800713e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8007140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007142:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007146:	2b00      	cmp	r3, #0
 8007148:	d108      	bne.n	800715c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800714a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800714c:	f004 fc24 	bl	800b998 <tcp_zero_window_probe>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d014      	beq.n	8007180 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8007156:	2300      	movs	r3, #0
 8007158:	623b      	str	r3, [r7, #32]
 800715a:	e011      	b.n	8007180 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800715c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007162:	4619      	mov	r1, r3
 8007164:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007166:	f003 fae9 	bl	800a73c <tcp_split_unsent_seg>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d107      	bne.n	8007180 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007170:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007172:	f003 fd69 	bl	800ac48 <tcp_output>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 80ac 	beq.w	80072e0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007192:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007196:	2b06      	cmp	r3, #6
 8007198:	f200 80a2 	bhi.w	80072e0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80071a2:	3301      	adds	r3, #1
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80071ac:	e098      	b.n	80072e0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80071ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	db0f      	blt.n	80071d8 <tcp_slowtmr+0x1f4>
 80071b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80071be:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d008      	beq.n	80071d8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80071c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3301      	adds	r3, #1
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	b21a      	sxth	r2, r3
 80071d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80071d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071da:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80071de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80071e4:	429a      	cmp	r2, r3
 80071e6:	db7b      	blt.n	80072e0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80071e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071ea:	f004 f821 	bl	800b230 <tcp_rexmit_rto_prepare>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d007      	beq.n	8007204 <tcp_slowtmr+0x220>
 80071f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d171      	bne.n	80072e0 <tcp_slowtmr+0x2fc>
 80071fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007200:	2b00      	cmp	r3, #0
 8007202:	d06d      	beq.n	80072e0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8007204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007206:	7d1b      	ldrb	r3, [r3, #20]
 8007208:	2b02      	cmp	r3, #2
 800720a:	d03a      	beq.n	8007282 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800720c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007212:	2b0c      	cmp	r3, #12
 8007214:	bf28      	it	cs
 8007216:	230c      	movcs	r3, #12
 8007218:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800721a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8007220:	10db      	asrs	r3, r3, #3
 8007222:	b21b      	sxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007228:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800722c:	4413      	add	r3, r2
 800722e:	7efa      	ldrb	r2, [r7, #27]
 8007230:	4910      	ldr	r1, [pc, #64]	@ (8007274 <tcp_slowtmr+0x290>)
 8007232:	5c8a      	ldrb	r2, [r1, r2]
 8007234:	4093      	lsls	r3, r2
 8007236:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800723e:	4293      	cmp	r3, r2
 8007240:	dc1a      	bgt.n	8007278 <tcp_slowtmr+0x294>
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	b21a      	sxth	r2, r3
 8007246:	e019      	b.n	800727c <tcp_slowtmr+0x298>
 8007248:	20008288 	.word	0x20008288
 800724c:	2000829e 	.word	0x2000829e
 8007250:	20008294 	.word	0x20008294
 8007254:	08010778 	.word	0x08010778
 8007258:	08010abc 	.word	0x08010abc
 800725c:	080107bc 	.word	0x080107bc
 8007260:	08010ae8 	.word	0x08010ae8
 8007264:	08010b14 	.word	0x08010b14
 8007268:	08010b44 	.word	0x08010b44
 800726c:	08010b78 	.word	0x08010b78
 8007270:	08012750 	.word	0x08012750
 8007274:	08012740 	.word	0x08012740
 8007278:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8007282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007284:	2200      	movs	r2, #0
 8007286:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800728e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007290:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007294:	4293      	cmp	r3, r2
 8007296:	bf28      	it	cs
 8007298:	4613      	movcs	r3, r2
 800729a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800729c:	8a7b      	ldrh	r3, [r7, #18]
 800729e:	085b      	lsrs	r3, r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80072a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80072ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d206      	bcs.n	80072c8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80072ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80072c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ca:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80072d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80072da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072dc:	f004 f818 	bl	800b310 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	7d1b      	ldrb	r3, [r3, #20]
 80072e4:	2b06      	cmp	r3, #6
 80072e6:	d111      	bne.n	800730c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80072e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ea:	8b5b      	ldrh	r3, [r3, #26]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072f4:	4b9d      	ldr	r3, [pc, #628]	@ (800756c <tcp_slowtmr+0x588>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b28      	cmp	r3, #40	@ 0x28
 8007300:	d904      	bls.n	800730c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8007302:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007306:	3301      	adds	r3, #1
 8007308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800730c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730e:	7a5b      	ldrb	r3, [r3, #9]
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d04c      	beq.n	80073b2 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8007318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800731c:	2b04      	cmp	r3, #4
 800731e:	d003      	beq.n	8007328 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8007320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007322:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007324:	2b07      	cmp	r3, #7
 8007326:	d144      	bne.n	80073b2 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007328:	4b90      	ldr	r3, [pc, #576]	@ (800756c <tcp_slowtmr+0x588>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007338:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800733c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8007340:	498b      	ldr	r1, [pc, #556]	@ (8007570 <tcp_slowtmr+0x58c>)
 8007342:	fba1 1303 	umull	r1, r3, r1, r3
 8007346:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007348:	429a      	cmp	r2, r3
 800734a:	d90a      	bls.n	8007362 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800734c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007350:	3301      	adds	r3, #1
 8007352:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007356:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800735a:	3301      	adds	r3, #1
 800735c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007360:	e027      	b.n	80073b2 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007362:	4b82      	ldr	r3, [pc, #520]	@ (800756c <tcp_slowtmr+0x588>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800736c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007374:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007378:	4618      	mov	r0, r3
 800737a:	4b7e      	ldr	r3, [pc, #504]	@ (8007574 <tcp_slowtmr+0x590>)
 800737c:	fb00 f303 	mul.w	r3, r0, r3
 8007380:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007382:	497b      	ldr	r1, [pc, #492]	@ (8007570 <tcp_slowtmr+0x58c>)
 8007384:	fba1 1303 	umull	r1, r3, r1, r3
 8007388:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800738a:	429a      	cmp	r2, r3
 800738c:	d911      	bls.n	80073b2 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800738e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007390:	f004 fac2 	bl	800b918 <tcp_keepalive>
 8007394:	4603      	mov	r3, r0
 8007396:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800739a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d107      	bne.n	80073b2 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80073a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80073a8:	3301      	adds	r3, #1
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ae:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80073b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d011      	beq.n	80073de <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80073ba:	4b6c      	ldr	r3, [pc, #432]	@ (800756c <tcp_slowtmr+0x588>)
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80073ca:	4619      	mov	r1, r3
 80073cc:	460b      	mov	r3, r1
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	440b      	add	r3, r1
 80073d2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d302      	bcc.n	80073de <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80073d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073da:	f000 fddb 	bl	8007f94 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80073de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e0:	7d1b      	ldrb	r3, [r3, #20]
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d10b      	bne.n	80073fe <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073e6:	4b61      	ldr	r3, [pc, #388]	@ (800756c <tcp_slowtmr+0x588>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b28      	cmp	r3, #40	@ 0x28
 80073f2:	d904      	bls.n	80073fe <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80073f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073f8:	3301      	adds	r3, #1
 80073fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80073fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007400:	7d1b      	ldrb	r3, [r3, #20]
 8007402:	2b09      	cmp	r3, #9
 8007404:	d10b      	bne.n	800741e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007406:	4b59      	ldr	r3, [pc, #356]	@ (800756c <tcp_slowtmr+0x588>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2bf0      	cmp	r3, #240	@ 0xf0
 8007412:	d904      	bls.n	800741e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8007414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007418:	3301      	adds	r3, #1
 800741a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800741e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007422:	2b00      	cmp	r3, #0
 8007424:	d060      	beq.n	80074e8 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8007426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800742e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007430:	f000 fbfc 	bl	8007c2c <tcp_pcb_purge>
      if (prev != NULL) {
 8007434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007436:	2b00      	cmp	r3, #0
 8007438:	d010      	beq.n	800745c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800743a:	4b4f      	ldr	r3, [pc, #316]	@ (8007578 <tcp_slowtmr+0x594>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007440:	429a      	cmp	r2, r3
 8007442:	d106      	bne.n	8007452 <tcp_slowtmr+0x46e>
 8007444:	4b4d      	ldr	r3, [pc, #308]	@ (800757c <tcp_slowtmr+0x598>)
 8007446:	f240 526d 	movw	r2, #1389	@ 0x56d
 800744a:	494d      	ldr	r1, [pc, #308]	@ (8007580 <tcp_slowtmr+0x59c>)
 800744c:	484d      	ldr	r0, [pc, #308]	@ (8007584 <tcp_slowtmr+0x5a0>)
 800744e:	f007 fd0b 	bl	800ee68 <iprintf>
        prev->next = pcb->next;
 8007452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007458:	60da      	str	r2, [r3, #12]
 800745a:	e00f      	b.n	800747c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800745c:	4b46      	ldr	r3, [pc, #280]	@ (8007578 <tcp_slowtmr+0x594>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007462:	429a      	cmp	r2, r3
 8007464:	d006      	beq.n	8007474 <tcp_slowtmr+0x490>
 8007466:	4b45      	ldr	r3, [pc, #276]	@ (800757c <tcp_slowtmr+0x598>)
 8007468:	f240 5271 	movw	r2, #1393	@ 0x571
 800746c:	4946      	ldr	r1, [pc, #280]	@ (8007588 <tcp_slowtmr+0x5a4>)
 800746e:	4845      	ldr	r0, [pc, #276]	@ (8007584 <tcp_slowtmr+0x5a0>)
 8007470:	f007 fcfa 	bl	800ee68 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	4a3f      	ldr	r2, [pc, #252]	@ (8007578 <tcp_slowtmr+0x594>)
 800747a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800747c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007480:	2b00      	cmp	r3, #0
 8007482:	d013      	beq.n	80074ac <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007486:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800748c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800748e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007490:	3304      	adds	r3, #4
 8007492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007494:	8ad2      	ldrh	r2, [r2, #22]
 8007496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007498:	8b09      	ldrh	r1, [r1, #24]
 800749a:	9102      	str	r1, [sp, #8]
 800749c:	9201      	str	r2, [sp, #4]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	462b      	mov	r3, r5
 80074a2:	4622      	mov	r2, r4
 80074a4:	4601      	mov	r1, r0
 80074a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074a8:	f004 f982 	bl	800b7b0 <tcp_rst>
      err_arg = pcb->callback_arg;
 80074ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80074b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b4:	7d1b      	ldrb	r3, [r3, #20]
 80074b6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80074b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80074bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80074c2:	6838      	ldr	r0, [r7, #0]
 80074c4:	f7ff f9f0 	bl	80068a8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80074c8:	4b30      	ldr	r3, [pc, #192]	@ (800758c <tcp_slowtmr+0x5a8>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d004      	beq.n	80074de <tcp_slowtmr+0x4fa>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f06f 010c 	mvn.w	r1, #12
 80074da:	68b8      	ldr	r0, [r7, #8]
 80074dc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80074de:	4b2b      	ldr	r3, [pc, #172]	@ (800758c <tcp_slowtmr+0x5a8>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d037      	beq.n	8007556 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80074e6:	e590      	b.n	800700a <tcp_slowtmr+0x26>
      prev = pcb;
 80074e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80074ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80074f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f4:	7f1b      	ldrb	r3, [r3, #28]
 80074f6:	3301      	adds	r3, #1
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80074fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007500:	7f1a      	ldrb	r2, [r3, #28]
 8007502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007504:	7f5b      	ldrb	r3, [r3, #29]
 8007506:	429a      	cmp	r2, r3
 8007508:	d325      	bcc.n	8007556 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800750a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750c:	2200      	movs	r2, #0
 800750e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8007510:	4b1e      	ldr	r3, [pc, #120]	@ (800758c <tcp_slowtmr+0x5a8>)
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <tcp_slowtmr+0x554>
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007528:	6912      	ldr	r2, [r2, #16]
 800752a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	4603      	mov	r3, r0
 8007532:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007536:	e002      	b.n	800753e <tcp_slowtmr+0x55a>
 8007538:	2300      	movs	r3, #0
 800753a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800753e:	4b13      	ldr	r3, [pc, #76]	@ (800758c <tcp_slowtmr+0x5a8>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	f47f ad60 	bne.w	8007008 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007548:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800754c:	2b00      	cmp	r3, #0
 800754e:	d102      	bne.n	8007556 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8007550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007552:	f003 fb79 	bl	800ac48 <tcp_output>
  while (pcb != NULL) {
 8007556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007558:	2b00      	cmp	r3, #0
 800755a:	f47f ad5c 	bne.w	8007016 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8007562:	4b0b      	ldr	r3, [pc, #44]	@ (8007590 <tcp_slowtmr+0x5ac>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007568:	e067      	b.n	800763a <tcp_slowtmr+0x656>
 800756a:	bf00      	nop
 800756c:	20008288 	.word	0x20008288
 8007570:	10624dd3 	.word	0x10624dd3
 8007574:	000124f8 	.word	0x000124f8
 8007578:	20008294 	.word	0x20008294
 800757c:	08010778 	.word	0x08010778
 8007580:	08010bb0 	.word	0x08010bb0
 8007584:	080107bc 	.word	0x080107bc
 8007588:	08010bdc 	.word	0x08010bdc
 800758c:	2000829c 	.word	0x2000829c
 8007590:	20008298 	.word	0x20008298
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007596:	7d1b      	ldrb	r3, [r3, #20]
 8007598:	2b0a      	cmp	r3, #10
 800759a:	d006      	beq.n	80075aa <tcp_slowtmr+0x5c6>
 800759c:	4b2b      	ldr	r3, [pc, #172]	@ (800764c <tcp_slowtmr+0x668>)
 800759e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80075a2:	492b      	ldr	r1, [pc, #172]	@ (8007650 <tcp_slowtmr+0x66c>)
 80075a4:	482b      	ldr	r0, [pc, #172]	@ (8007654 <tcp_slowtmr+0x670>)
 80075a6:	f007 fc5f 	bl	800ee68 <iprintf>
    pcb_remove = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80075b0:	4b29      	ldr	r3, [pc, #164]	@ (8007658 <tcp_slowtmr+0x674>)
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2bf0      	cmp	r3, #240	@ 0xf0
 80075bc:	d904      	bls.n	80075c8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80075be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075c2:	3301      	adds	r3, #1
 80075c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80075c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d02f      	beq.n	8007630 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80075d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075d2:	f000 fb2b 	bl	8007c2c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80075d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d010      	beq.n	80075fe <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80075dc:	4b1f      	ldr	r3, [pc, #124]	@ (800765c <tcp_slowtmr+0x678>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d106      	bne.n	80075f4 <tcp_slowtmr+0x610>
 80075e6:	4b19      	ldr	r3, [pc, #100]	@ (800764c <tcp_slowtmr+0x668>)
 80075e8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80075ec:	491c      	ldr	r1, [pc, #112]	@ (8007660 <tcp_slowtmr+0x67c>)
 80075ee:	4819      	ldr	r0, [pc, #100]	@ (8007654 <tcp_slowtmr+0x670>)
 80075f0:	f007 fc3a 	bl	800ee68 <iprintf>
        prev->next = pcb->next;
 80075f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fa:	60da      	str	r2, [r3, #12]
 80075fc:	e00f      	b.n	800761e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80075fe:	4b17      	ldr	r3, [pc, #92]	@ (800765c <tcp_slowtmr+0x678>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007604:	429a      	cmp	r2, r3
 8007606:	d006      	beq.n	8007616 <tcp_slowtmr+0x632>
 8007608:	4b10      	ldr	r3, [pc, #64]	@ (800764c <tcp_slowtmr+0x668>)
 800760a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800760e:	4915      	ldr	r1, [pc, #84]	@ (8007664 <tcp_slowtmr+0x680>)
 8007610:	4810      	ldr	r0, [pc, #64]	@ (8007654 <tcp_slowtmr+0x670>)
 8007612:	f007 fc29 	bl	800ee68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	4a10      	ldr	r2, [pc, #64]	@ (800765c <tcp_slowtmr+0x678>)
 800761c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800761e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007620:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007628:	69f8      	ldr	r0, [r7, #28]
 800762a:	f7ff f93d 	bl	80068a8 <tcp_free>
 800762e:	e004      	b.n	800763a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8007630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007632:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1a9      	bne.n	8007594 <tcp_slowtmr+0x5b0>
    }
  }
}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	3730      	adds	r7, #48	@ 0x30
 8007646:	46bd      	mov	sp, r7
 8007648:	bdb0      	pop	{r4, r5, r7, pc}
 800764a:	bf00      	nop
 800764c:	08010778 	.word	0x08010778
 8007650:	08010c08 	.word	0x08010c08
 8007654:	080107bc 	.word	0x080107bc
 8007658:	20008288 	.word	0x20008288
 800765c:	20008298 	.word	0x20008298
 8007660:	08010c38 	.word	0x08010c38
 8007664:	08010c60 	.word	0x08010c60

08007668 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800766e:	4b2d      	ldr	r3, [pc, #180]	@ (8007724 <tcp_fasttmr+0xbc>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	3301      	adds	r3, #1
 8007674:	b2da      	uxtb	r2, r3
 8007676:	4b2b      	ldr	r3, [pc, #172]	@ (8007724 <tcp_fasttmr+0xbc>)
 8007678:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800767a:	4b2b      	ldr	r3, [pc, #172]	@ (8007728 <tcp_fasttmr+0xc0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007680:	e048      	b.n	8007714 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	7f9a      	ldrb	r2, [r3, #30]
 8007686:	4b27      	ldr	r3, [pc, #156]	@ (8007724 <tcp_fasttmr+0xbc>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d03f      	beq.n	800770e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800768e:	4b25      	ldr	r3, [pc, #148]	@ (8007724 <tcp_fasttmr+0xbc>)
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	8b5b      	ldrh	r3, [r3, #26]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d010      	beq.n	80076c4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	8b5b      	ldrh	r3, [r3, #26]
 80076a6:	f043 0302 	orr.w	r3, r3, #2
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f003 fac9 	bl	800ac48 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	8b5b      	ldrh	r3, [r3, #26]
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	b29a      	uxth	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8b5b      	ldrh	r3, [r3, #26]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d009      	beq.n	80076e4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	8b5b      	ldrh	r3, [r3, #26]
 80076d4:	f023 0308 	bic.w	r3, r3, #8
 80076d8:	b29a      	uxth	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7ff fa76 	bl	8006bd0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80076f2:	4b0e      	ldr	r3, [pc, #56]	@ (800772c <tcp_fasttmr+0xc4>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f819 	bl	8007730 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80076fe:	4b0b      	ldr	r3, [pc, #44]	@ (800772c <tcp_fasttmr+0xc4>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d000      	beq.n	8007708 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007706:	e7b8      	b.n	800767a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	607b      	str	r3, [r7, #4]
 800770c:	e002      	b.n	8007714 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1b3      	bne.n	8007682 <tcp_fasttmr+0x1a>
    }
  }
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	2000829e 	.word	0x2000829e
 8007728:	20008294 	.word	0x20008294
 800772c:	2000829c 	.word	0x2000829c

08007730 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007730:	b590      	push	{r4, r7, lr}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d109      	bne.n	8007752 <tcp_process_refused_data+0x22>
 800773e:	4b37      	ldr	r3, [pc, #220]	@ (800781c <tcp_process_refused_data+0xec>)
 8007740:	f240 6209 	movw	r2, #1545	@ 0x609
 8007744:	4936      	ldr	r1, [pc, #216]	@ (8007820 <tcp_process_refused_data+0xf0>)
 8007746:	4837      	ldr	r0, [pc, #220]	@ (8007824 <tcp_process_refused_data+0xf4>)
 8007748:	f007 fb8e 	bl	800ee68 <iprintf>
 800774c:	f06f 030f 	mvn.w	r3, #15
 8007750:	e060      	b.n	8007814 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007756:	7b5b      	ldrb	r3, [r3, #13]
 8007758:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800775e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <tcp_process_refused_data+0x58>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6918      	ldr	r0, [r3, #16]
 800777a:	2300      	movs	r3, #0
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	47a0      	blx	r4
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]
 8007786:	e007      	b.n	8007798 <tcp_process_refused_data+0x68>
 8007788:	2300      	movs	r3, #0
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	2000      	movs	r0, #0
 8007790:	f000 f8a4 	bl	80078dc <tcp_recv_null>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d12a      	bne.n	80077f6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d033      	beq.n	8007812 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077ae:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80077b2:	d005      	beq.n	80077c0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b8:	3301      	adds	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00b      	beq.n	80077e2 <tcp_process_refused_data+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6918      	ldr	r0, [r3, #16]
 80077d4:	2300      	movs	r3, #0
 80077d6:	2200      	movs	r2, #0
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	47a0      	blx	r4
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]
 80077e0:	e001      	b.n	80077e6 <tcp_process_refused_data+0xb6>
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80077e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ea:	f113 0f0d 	cmn.w	r3, #13
 80077ee:	d110      	bne.n	8007812 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80077f0:	f06f 030c 	mvn.w	r3, #12
 80077f4:	e00e      	b.n	8007814 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80077f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077fa:	f113 0f0d 	cmn.w	r3, #13
 80077fe:	d102      	bne.n	8007806 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007800:	f06f 030c 	mvn.w	r3, #12
 8007804:	e006      	b.n	8007814 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800780c:	f06f 0304 	mvn.w	r3, #4
 8007810:	e000      	b.n	8007814 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	bd90      	pop	{r4, r7, pc}
 800781c:	08010778 	.word	0x08010778
 8007820:	08010c88 	.word	0x08010c88
 8007824:	080107bc 	.word	0x080107bc

08007828 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007830:	e007      	b.n	8007842 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f80a 	bl	8007852 <tcp_seg_free>
    seg = next;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1f4      	bne.n	8007832 <tcp_segs_free+0xa>
  }
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00c      	beq.n	800787a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe fd6b 	bl	8006348 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	2003      	movs	r0, #3
 8007876:	f7fd fef1 	bl	800565c <memp_free>
  }
}
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <tcp_seg_copy+0x1c>
 8007892:	4b0f      	ldr	r3, [pc, #60]	@ (80078d0 <tcp_seg_copy+0x4c>)
 8007894:	f240 6282 	movw	r2, #1666	@ 0x682
 8007898:	490e      	ldr	r1, [pc, #56]	@ (80078d4 <tcp_seg_copy+0x50>)
 800789a:	480f      	ldr	r0, [pc, #60]	@ (80078d8 <tcp_seg_copy+0x54>)
 800789c:	f007 fae4 	bl	800ee68 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80078a0:	2003      	movs	r0, #3
 80078a2:	f7fd fe6b 	bl	800557c <memp_malloc>
 80078a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <tcp_seg_copy+0x2e>
    return NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	e00a      	b.n	80078c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80078b2:	2210      	movs	r2, #16
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f007 fbb1 	bl	800f01e <memcpy>
  pbuf_ref(cseg->p);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fde1 	bl	8006488 <pbuf_ref>
  return cseg;
 80078c6:	68fb      	ldr	r3, [r7, #12]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	08010778 	.word	0x08010778
 80078d4:	08010ccc 	.word	0x08010ccc
 80078d8:	080107bc 	.word	0x080107bc

080078dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d109      	bne.n	8007904 <tcp_recv_null+0x28>
 80078f0:	4b12      	ldr	r3, [pc, #72]	@ (800793c <tcp_recv_null+0x60>)
 80078f2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80078f6:	4912      	ldr	r1, [pc, #72]	@ (8007940 <tcp_recv_null+0x64>)
 80078f8:	4812      	ldr	r0, [pc, #72]	@ (8007944 <tcp_recv_null+0x68>)
 80078fa:	f007 fab5 	bl	800ee68 <iprintf>
 80078fe:	f06f 030f 	mvn.w	r3, #15
 8007902:	e016      	b.n	8007932 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d009      	beq.n	800791e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	891b      	ldrh	r3, [r3, #8]
 800790e:	4619      	mov	r1, r3
 8007910:	68b8      	ldr	r0, [r7, #8]
 8007912:	f7ff fb17 	bl	8006f44 <tcp_recved>
    pbuf_free(p);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fe fd16 	bl	8006348 <pbuf_free>
 800791c:	e008      	b.n	8007930 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800791e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d104      	bne.n	8007930 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007926:	68b8      	ldr	r0, [r7, #8]
 8007928:	f7ff f9bc 	bl	8006ca4 <tcp_close>
 800792c:	4603      	mov	r3, r0
 800792e:	e000      	b.n	8007932 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	08010778 	.word	0x08010778
 8007940:	08010ce8 	.word	0x08010ce8
 8007944:	080107bc 	.word	0x080107bc

08007948 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007956:	2b00      	cmp	r3, #0
 8007958:	db01      	blt.n	800795e <tcp_kill_prio+0x16>
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	e000      	b.n	8007960 <tcp_kill_prio+0x18>
 800795e:	237f      	movs	r3, #127	@ 0x7f
 8007960:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d034      	beq.n	80079d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	3b01      	subs	r3, #1
 800796c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007972:	2300      	movs	r3, #0
 8007974:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007976:	4b19      	ldr	r3, [pc, #100]	@ (80079dc <tcp_kill_prio+0x94>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	e01f      	b.n	80079be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	7d5b      	ldrb	r3, [r3, #21]
 8007982:	7afa      	ldrb	r2, [r7, #11]
 8007984:	429a      	cmp	r2, r3
 8007986:	d80c      	bhi.n	80079a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800798c:	7afa      	ldrb	r2, [r7, #11]
 800798e:	429a      	cmp	r2, r3
 8007990:	d112      	bne.n	80079b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007992:	4b13      	ldr	r3, [pc, #76]	@ (80079e0 <tcp_kill_prio+0x98>)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d80a      	bhi.n	80079b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80079a2:	4b0f      	ldr	r3, [pc, #60]	@ (80079e0 <tcp_kill_prio+0x98>)
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	7d5b      	ldrb	r3, [r3, #21]
 80079b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1dc      	bne.n	800797e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d004      	beq.n	80079d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80079ca:	6938      	ldr	r0, [r7, #16]
 80079cc:	f7ff fa54 	bl	8006e78 <tcp_abort>
 80079d0:	e000      	b.n	80079d4 <tcp_kill_prio+0x8c>
    return;
 80079d2:	bf00      	nop
  }
}
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20008294 	.word	0x20008294
 80079e0:	20008288 	.word	0x20008288

080079e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d009      	beq.n	8007a08 <tcp_kill_state+0x24>
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	2b09      	cmp	r3, #9
 80079f8:	d006      	beq.n	8007a08 <tcp_kill_state+0x24>
 80079fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007a64 <tcp_kill_state+0x80>)
 80079fc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8007a00:	4919      	ldr	r1, [pc, #100]	@ (8007a68 <tcp_kill_state+0x84>)
 8007a02:	481a      	ldr	r0, [pc, #104]	@ (8007a6c <tcp_kill_state+0x88>)
 8007a04:	f007 fa30 	bl	800ee68 <iprintf>

  inactivity = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a10:	4b17      	ldr	r3, [pc, #92]	@ (8007a70 <tcp_kill_state+0x8c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	617b      	str	r3, [r7, #20]
 8007a16:	e017      	b.n	8007a48 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	7d1b      	ldrb	r3, [r3, #20]
 8007a1c:	79fa      	ldrb	r2, [r7, #7]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d10f      	bne.n	8007a42 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a22:	4b14      	ldr	r3, [pc, #80]	@ (8007a74 <tcp_kill_state+0x90>)
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d807      	bhi.n	8007a42 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007a32:	4b10      	ldr	r3, [pc, #64]	@ (8007a74 <tcp_kill_state+0x90>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e4      	bne.n	8007a18 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007a54:	2100      	movs	r1, #0
 8007a56:	6938      	ldr	r0, [r7, #16]
 8007a58:	f7ff f950 	bl	8006cfc <tcp_abandon>
  }
}
 8007a5c:	bf00      	nop
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	08010778 	.word	0x08010778
 8007a68:	08010d04 	.word	0x08010d04
 8007a6c:	080107bc 	.word	0x080107bc
 8007a70:	20008294 	.word	0x20008294
 8007a74:	20008288 	.word	0x20008288

08007a78 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a86:	4b12      	ldr	r3, [pc, #72]	@ (8007ad0 <tcp_kill_timewait+0x58>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	e012      	b.n	8007ab4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a8e:	4b11      	ldr	r3, [pc, #68]	@ (8007ad4 <tcp_kill_timewait+0x5c>)
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d807      	bhi.n	8007aae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad4 <tcp_kill_timewait+0x5c>)
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e9      	bne.n	8007a8e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007ac0:	68b8      	ldr	r0, [r7, #8]
 8007ac2:	f7ff f9d9 	bl	8006e78 <tcp_abort>
  }
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20008298 	.word	0x20008298
 8007ad4:	20008288 	.word	0x20008288

08007ad8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007ade:	4b10      	ldr	r3, [pc, #64]	@ (8007b20 <tcp_handle_closepend+0x48>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007ae4:	e014      	b.n	8007b10 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	8b5b      	ldrh	r3, [r3, #26]
 8007af0:	f003 0308 	and.w	r3, r3, #8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8b5b      	ldrh	r3, [r3, #26]
 8007afc:	f023 0308 	bic.w	r3, r3, #8
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff f862 	bl	8006bd0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e7      	bne.n	8007ae6 <tcp_handle_closepend+0xe>
  }
}
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20008294 	.word	0x20008294

08007b24 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b2e:	2001      	movs	r0, #1
 8007b30:	f7fd fd24 	bl	800557c <memp_malloc>
 8007b34:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d126      	bne.n	8007b8a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007b3c:	f7ff ffcc 	bl	8007ad8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007b40:	f7ff ff9a 	bl	8007a78 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b44:	2001      	movs	r0, #1
 8007b46:	f7fd fd19 	bl	800557c <memp_malloc>
 8007b4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d11b      	bne.n	8007b8a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007b52:	2009      	movs	r0, #9
 8007b54:	f7ff ff46 	bl	80079e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b58:	2001      	movs	r0, #1
 8007b5a:	f7fd fd0f 	bl	800557c <memp_malloc>
 8007b5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d111      	bne.n	8007b8a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007b66:	2008      	movs	r0, #8
 8007b68:	f7ff ff3c 	bl	80079e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	f7fd fd05 	bl	800557c <memp_malloc>
 8007b72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d107      	bne.n	8007b8a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff fee3 	bl	8007948 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b82:	2001      	movs	r0, #1
 8007b84:	f7fd fcfa 	bl	800557c <memp_malloc>
 8007b88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d03f      	beq.n	8007c10 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007b90:	229c      	movs	r2, #156	@ 0x9c
 8007b92:	2100      	movs	r1, #0
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f007 f9cc 	bl	800ef32 <memset>
    pcb->prio = prio;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	79fa      	ldrb	r2, [r7, #7]
 8007b9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007ba6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	22ff      	movs	r2, #255	@ 0xff
 8007bbe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8007bc6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2206      	movs	r2, #6
 8007bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2206      	movs	r2, #6
 8007bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007bdc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8007be6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c1c <tcp_alloc+0xf8>)
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007bee:	4b0c      	ldr	r3, [pc, #48]	@ (8007c20 <tcp_alloc+0xfc>)
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007bfc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4a08      	ldr	r2, [pc, #32]	@ (8007c24 <tcp_alloc+0x100>)
 8007c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4a07      	ldr	r2, [pc, #28]	@ (8007c28 <tcp_alloc+0x104>)
 8007c0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007c10:	68fb      	ldr	r3, [r7, #12]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20008288 	.word	0x20008288
 8007c20:	2000829e 	.word	0x2000829e
 8007c24:	080078dd 	.word	0x080078dd
 8007c28:	006ddd00 	.word	0x006ddd00

08007c2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d107      	bne.n	8007c4a <tcp_pcb_purge+0x1e>
 8007c3a:	4b21      	ldr	r3, [pc, #132]	@ (8007cc0 <tcp_pcb_purge+0x94>)
 8007c3c:	f640 0251 	movw	r2, #2129	@ 0x851
 8007c40:	4920      	ldr	r1, [pc, #128]	@ (8007cc4 <tcp_pcb_purge+0x98>)
 8007c42:	4821      	ldr	r0, [pc, #132]	@ (8007cc8 <tcp_pcb_purge+0x9c>)
 8007c44:	f007 f910 	bl	800ee68 <iprintf>
 8007c48:	e037      	b.n	8007cba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7d1b      	ldrb	r3, [r3, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d033      	beq.n	8007cba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007c56:	2b0a      	cmp	r3, #10
 8007c58:	d02f      	beq.n	8007cba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d02b      	beq.n	8007cba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d007      	beq.n	8007c7a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fb6a 	bl	8006348 <pbuf_free>
      pcb->refused_data = NULL;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f986 	bl	8007f94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007c8e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff fdc7 	bl	8007828 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff fdc2 	bl	8007828 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	08010778 	.word	0x08010778
 8007cc4:	08010dc4 	.word	0x08010dc4
 8007cc8:	080107bc 	.word	0x080107bc

08007ccc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d106      	bne.n	8007cea <tcp_pcb_remove+0x1e>
 8007cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8007dd8 <tcp_pcb_remove+0x10c>)
 8007cde:	f640 0283 	movw	r2, #2179	@ 0x883
 8007ce2:	493e      	ldr	r1, [pc, #248]	@ (8007ddc <tcp_pcb_remove+0x110>)
 8007ce4:	483e      	ldr	r0, [pc, #248]	@ (8007de0 <tcp_pcb_remove+0x114>)
 8007ce6:	f007 f8bf 	bl	800ee68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d106      	bne.n	8007cfe <tcp_pcb_remove+0x32>
 8007cf0:	4b39      	ldr	r3, [pc, #228]	@ (8007dd8 <tcp_pcb_remove+0x10c>)
 8007cf2:	f640 0284 	movw	r2, #2180	@ 0x884
 8007cf6:	493b      	ldr	r1, [pc, #236]	@ (8007de4 <tcp_pcb_remove+0x118>)
 8007cf8:	4839      	ldr	r0, [pc, #228]	@ (8007de0 <tcp_pcb_remove+0x114>)
 8007cfa:	f007 f8b5 	bl	800ee68 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d105      	bne.n	8007d14 <tcp_pcb_remove+0x48>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68da      	ldr	r2, [r3, #12]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	e013      	b.n	8007d3c <tcp_pcb_remove+0x70>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e00c      	b.n	8007d36 <tcp_pcb_remove+0x6a>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d104      	bne.n	8007d30 <tcp_pcb_remove+0x64>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	60da      	str	r2, [r3, #12]
 8007d2e:	e005      	b.n	8007d3c <tcp_pcb_remove+0x70>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1ef      	bne.n	8007d1c <tcp_pcb_remove+0x50>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007d42:	6838      	ldr	r0, [r7, #0]
 8007d44:	f7ff ff72 	bl	8007c2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	7d1b      	ldrb	r3, [r3, #20]
 8007d4c:	2b0a      	cmp	r3, #10
 8007d4e:	d013      	beq.n	8007d78 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d00f      	beq.n	8007d78 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	8b5b      	ldrh	r3, [r3, #26]
 8007d5c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d009      	beq.n	8007d78 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	8b5b      	ldrh	r3, [r3, #26]
 8007d68:	f043 0302 	orr.w	r3, r3, #2
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007d72:	6838      	ldr	r0, [r7, #0]
 8007d74:	f002 ff68 	bl	800ac48 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	7d1b      	ldrb	r3, [r3, #20]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d020      	beq.n	8007dc2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d006      	beq.n	8007d96 <tcp_pcb_remove+0xca>
 8007d88:	4b13      	ldr	r3, [pc, #76]	@ (8007dd8 <tcp_pcb_remove+0x10c>)
 8007d8a:	f640 0293 	movw	r2, #2195	@ 0x893
 8007d8e:	4916      	ldr	r1, [pc, #88]	@ (8007de8 <tcp_pcb_remove+0x11c>)
 8007d90:	4813      	ldr	r0, [pc, #76]	@ (8007de0 <tcp_pcb_remove+0x114>)
 8007d92:	f007 f869 	bl	800ee68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d006      	beq.n	8007dac <tcp_pcb_remove+0xe0>
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd8 <tcp_pcb_remove+0x10c>)
 8007da0:	f640 0294 	movw	r2, #2196	@ 0x894
 8007da4:	4911      	ldr	r1, [pc, #68]	@ (8007dec <tcp_pcb_remove+0x120>)
 8007da6:	480e      	ldr	r0, [pc, #56]	@ (8007de0 <tcp_pcb_remove+0x114>)
 8007da8:	f007 f85e 	bl	800ee68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d006      	beq.n	8007dc2 <tcp_pcb_remove+0xf6>
 8007db4:	4b08      	ldr	r3, [pc, #32]	@ (8007dd8 <tcp_pcb_remove+0x10c>)
 8007db6:	f640 0296 	movw	r2, #2198	@ 0x896
 8007dba:	490d      	ldr	r1, [pc, #52]	@ (8007df0 <tcp_pcb_remove+0x124>)
 8007dbc:	4808      	ldr	r0, [pc, #32]	@ (8007de0 <tcp_pcb_remove+0x114>)
 8007dbe:	f007 f853 	bl	800ee68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007dce:	bf00      	nop
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	08010778 	.word	0x08010778
 8007ddc:	08010de0 	.word	0x08010de0
 8007de0:	080107bc 	.word	0x080107bc
 8007de4:	08010dfc 	.word	0x08010dfc
 8007de8:	08010e1c 	.word	0x08010e1c
 8007dec:	08010e34 	.word	0x08010e34
 8007df0:	08010e50 	.word	0x08010e50

08007df4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <tcp_next_iss+0x1c>
 8007e02:	4b0a      	ldr	r3, [pc, #40]	@ (8007e2c <tcp_next_iss+0x38>)
 8007e04:	f640 02af 	movw	r2, #2223	@ 0x8af
 8007e08:	4909      	ldr	r1, [pc, #36]	@ (8007e30 <tcp_next_iss+0x3c>)
 8007e0a:	480a      	ldr	r0, [pc, #40]	@ (8007e34 <tcp_next_iss+0x40>)
 8007e0c:	f007 f82c 	bl	800ee68 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007e10:	4b09      	ldr	r3, [pc, #36]	@ (8007e38 <tcp_next_iss+0x44>)
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	4b09      	ldr	r3, [pc, #36]	@ (8007e3c <tcp_next_iss+0x48>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4413      	add	r3, r2
 8007e1a:	4a07      	ldr	r2, [pc, #28]	@ (8007e38 <tcp_next_iss+0x44>)
 8007e1c:	6013      	str	r3, [r2, #0]
  return iss;
 8007e1e:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <tcp_next_iss+0x44>)
 8007e20:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	08010778 	.word	0x08010778
 8007e30:	08010e68 	.word	0x08010e68
 8007e34:	080107bc 	.word	0x080107bc
 8007e38:	20000024 	.word	0x20000024
 8007e3c:	20008288 	.word	0x20008288

08007e40 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d106      	bne.n	8007e62 <tcp_eff_send_mss_netif+0x22>
 8007e54:	4b14      	ldr	r3, [pc, #80]	@ (8007ea8 <tcp_eff_send_mss_netif+0x68>)
 8007e56:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8007e5a:	4914      	ldr	r1, [pc, #80]	@ (8007eac <tcp_eff_send_mss_netif+0x6c>)
 8007e5c:	4814      	ldr	r0, [pc, #80]	@ (8007eb0 <tcp_eff_send_mss_netif+0x70>)
 8007e5e:	f007 f803 	bl	800ee68 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007e68:	89fb      	ldrh	r3, [r7, #14]
 8007e6a:	e019      	b.n	8007ea0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e70:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007e72:	8afb      	ldrh	r3, [r7, #22]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d012      	beq.n	8007e9e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007e78:	2328      	movs	r3, #40	@ 0x28
 8007e7a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007e7c:	8afa      	ldrh	r2, [r7, #22]
 8007e7e:	8abb      	ldrh	r3, [r7, #20]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d904      	bls.n	8007e8e <tcp_eff_send_mss_netif+0x4e>
 8007e84:	8afa      	ldrh	r2, [r7, #22]
 8007e86:	8abb      	ldrh	r3, [r7, #20]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	e000      	b.n	8007e90 <tcp_eff_send_mss_netif+0x50>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007e92:	8a7a      	ldrh	r2, [r7, #18]
 8007e94:	89fb      	ldrh	r3, [r7, #14]
 8007e96:	4293      	cmp	r3, r2
 8007e98:	bf28      	it	cs
 8007e9a:	4613      	movcs	r3, r2
 8007e9c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	08010778 	.word	0x08010778
 8007eac:	08010e84 	.word	0x08010e84
 8007eb0:	080107bc 	.word	0x080107bc

08007eb4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d119      	bne.n	8007efc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007ec8:	4b10      	ldr	r3, [pc, #64]	@ (8007f0c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007eca:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8007ece:	4910      	ldr	r1, [pc, #64]	@ (8007f10 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007ed0:	4810      	ldr	r0, [pc, #64]	@ (8007f14 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007ed2:	f006 ffc9 	bl	800ee68 <iprintf>

  while (pcb != NULL) {
 8007ed6:	e011      	b.n	8007efc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d108      	bne.n	8007ef6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f7fe ffc4 	bl	8006e78 <tcp_abort>
      pcb = next;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e002      	b.n	8007efc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1ea      	bne.n	8007ed8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	08010778 	.word	0x08010778
 8007f10:	08010eac 	.word	0x08010eac
 8007f14:	080107bc 	.word	0x080107bc

08007f18 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d02a      	beq.n	8007f7e <tcp_netif_ip_addr_changed+0x66>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d026      	beq.n	8007f7e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007f30:	4b15      	ldr	r3, [pc, #84]	@ (8007f88 <tcp_netif_ip_addr_changed+0x70>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff ffbc 	bl	8007eb4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007f3c:	4b13      	ldr	r3, [pc, #76]	@ (8007f8c <tcp_netif_ip_addr_changed+0x74>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff ffb6 	bl	8007eb4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d017      	beq.n	8007f7e <tcp_netif_ip_addr_changed+0x66>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d013      	beq.n	8007f7e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007f56:	4b0e      	ldr	r3, [pc, #56]	@ (8007f90 <tcp_netif_ip_addr_changed+0x78>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	e00c      	b.n	8007f78 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d103      	bne.n	8007f72 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1ef      	bne.n	8007f5e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20008294 	.word	0x20008294
 8007f8c:	2000828c 	.word	0x2000828c
 8007f90:	20008290 	.word	0x20008290

08007f94 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d007      	beq.n	8007fb4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7ff fc3d 	bl	8007828 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007fbc:	b590      	push	{r4, r7, lr}
 8007fbe:	b08d      	sub	sp, #52	@ 0x34
 8007fc0:	af04      	add	r7, sp, #16
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d105      	bne.n	8007fd8 <tcp_input+0x1c>
 8007fcc:	4b9b      	ldr	r3, [pc, #620]	@ (800823c <tcp_input+0x280>)
 8007fce:	2283      	movs	r2, #131	@ 0x83
 8007fd0:	499b      	ldr	r1, [pc, #620]	@ (8008240 <tcp_input+0x284>)
 8007fd2:	489c      	ldr	r0, [pc, #624]	@ (8008244 <tcp_input+0x288>)
 8007fd4:	f006 ff48 	bl	800ee68 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	4a9a      	ldr	r2, [pc, #616]	@ (8008248 <tcp_input+0x28c>)
 8007fde:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	895b      	ldrh	r3, [r3, #10]
 8007fe4:	2b13      	cmp	r3, #19
 8007fe6:	f240 83d1 	bls.w	800878c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007fea:	4b98      	ldr	r3, [pc, #608]	@ (800824c <tcp_input+0x290>)
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	4a97      	ldr	r2, [pc, #604]	@ (800824c <tcp_input+0x290>)
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f005 fee1 	bl	800ddbc <ip4_addr_isbroadcast_u32>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f040 83c7 	bne.w	8008790 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008002:	4b92      	ldr	r3, [pc, #584]	@ (800824c <tcp_input+0x290>)
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800800a:	2be0      	cmp	r3, #224	@ 0xe0
 800800c:	f000 83c0 	beq.w	8008790 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008010:	4b8d      	ldr	r3, [pc, #564]	@ (8008248 <tcp_input+0x28c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	899b      	ldrh	r3, [r3, #12]
 8008016:	b29b      	uxth	r3, r3
 8008018:	4618      	mov	r0, r3
 800801a:	f7fc fe37 	bl	8004c8c <lwip_htons>
 800801e:	4603      	mov	r3, r0
 8008020:	0b1b      	lsrs	r3, r3, #12
 8008022:	b29b      	uxth	r3, r3
 8008024:	b2db      	uxtb	r3, r3
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800802a:	7cbb      	ldrb	r3, [r7, #18]
 800802c:	2b13      	cmp	r3, #19
 800802e:	f240 83b1 	bls.w	8008794 <tcp_input+0x7d8>
 8008032:	7cbb      	ldrb	r3, [r7, #18]
 8008034:	b29a      	uxth	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	891b      	ldrh	r3, [r3, #8]
 800803a:	429a      	cmp	r2, r3
 800803c:	f200 83aa 	bhi.w	8008794 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008040:	7cbb      	ldrb	r3, [r7, #18]
 8008042:	b29b      	uxth	r3, r3
 8008044:	3b14      	subs	r3, #20
 8008046:	b29a      	uxth	r2, r3
 8008048:	4b81      	ldr	r3, [pc, #516]	@ (8008250 <tcp_input+0x294>)
 800804a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800804c:	4b81      	ldr	r3, [pc, #516]	@ (8008254 <tcp_input+0x298>)
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	895a      	ldrh	r2, [r3, #10]
 8008056:	7cbb      	ldrb	r3, [r7, #18]
 8008058:	b29b      	uxth	r3, r3
 800805a:	429a      	cmp	r2, r3
 800805c:	d309      	bcc.n	8008072 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800805e:	4b7c      	ldr	r3, [pc, #496]	@ (8008250 <tcp_input+0x294>)
 8008060:	881a      	ldrh	r2, [r3, #0]
 8008062:	4b7d      	ldr	r3, [pc, #500]	@ (8008258 <tcp_input+0x29c>)
 8008064:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008066:	7cbb      	ldrb	r3, [r7, #18]
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fe f8e6 	bl	800623c <pbuf_remove_header>
 8008070:	e04e      	b.n	8008110 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d105      	bne.n	8008086 <tcp_input+0xca>
 800807a:	4b70      	ldr	r3, [pc, #448]	@ (800823c <tcp_input+0x280>)
 800807c:	22c2      	movs	r2, #194	@ 0xc2
 800807e:	4977      	ldr	r1, [pc, #476]	@ (800825c <tcp_input+0x2a0>)
 8008080:	4870      	ldr	r0, [pc, #448]	@ (8008244 <tcp_input+0x288>)
 8008082:	f006 fef1 	bl	800ee68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008086:	2114      	movs	r1, #20
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7fe f8d7 	bl	800623c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	895a      	ldrh	r2, [r3, #10]
 8008092:	4b71      	ldr	r3, [pc, #452]	@ (8008258 <tcp_input+0x29c>)
 8008094:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008096:	4b6e      	ldr	r3, [pc, #440]	@ (8008250 <tcp_input+0x294>)
 8008098:	881a      	ldrh	r2, [r3, #0]
 800809a:	4b6f      	ldr	r3, [pc, #444]	@ (8008258 <tcp_input+0x29c>)
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80080a2:	4b6d      	ldr	r3, [pc, #436]	@ (8008258 <tcp_input+0x29c>)
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7fe f8c7 	bl	800623c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	895b      	ldrh	r3, [r3, #10]
 80080b4:	8a3a      	ldrh	r2, [r7, #16]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	f200 836e 	bhi.w	8008798 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	4a64      	ldr	r2, [pc, #400]	@ (8008254 <tcp_input+0x298>)
 80080c4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	8a3a      	ldrh	r2, [r7, #16]
 80080cc:	4611      	mov	r1, r2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe f8b4 	bl	800623c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	891a      	ldrh	r2, [r3, #8]
 80080d8:	8a3b      	ldrh	r3, [r7, #16]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	b29a      	uxth	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	895b      	ldrh	r3, [r3, #10]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <tcp_input+0x13a>
 80080ea:	4b54      	ldr	r3, [pc, #336]	@ (800823c <tcp_input+0x280>)
 80080ec:	22df      	movs	r2, #223	@ 0xdf
 80080ee:	495c      	ldr	r1, [pc, #368]	@ (8008260 <tcp_input+0x2a4>)
 80080f0:	4854      	ldr	r0, [pc, #336]	@ (8008244 <tcp_input+0x288>)
 80080f2:	f006 feb9 	bl	800ee68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	891a      	ldrh	r2, [r3, #8]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	891b      	ldrh	r3, [r3, #8]
 8008100:	429a      	cmp	r2, r3
 8008102:	d005      	beq.n	8008110 <tcp_input+0x154>
 8008104:	4b4d      	ldr	r3, [pc, #308]	@ (800823c <tcp_input+0x280>)
 8008106:	22e0      	movs	r2, #224	@ 0xe0
 8008108:	4956      	ldr	r1, [pc, #344]	@ (8008264 <tcp_input+0x2a8>)
 800810a:	484e      	ldr	r0, [pc, #312]	@ (8008244 <tcp_input+0x288>)
 800810c:	f006 feac 	bl	800ee68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008110:	4b4d      	ldr	r3, [pc, #308]	@ (8008248 <tcp_input+0x28c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	4a4b      	ldr	r2, [pc, #300]	@ (8008248 <tcp_input+0x28c>)
 800811a:	6814      	ldr	r4, [r2, #0]
 800811c:	4618      	mov	r0, r3
 800811e:	f7fc fdb5 	bl	8004c8c <lwip_htons>
 8008122:	4603      	mov	r3, r0
 8008124:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008126:	4b48      	ldr	r3, [pc, #288]	@ (8008248 <tcp_input+0x28c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	885b      	ldrh	r3, [r3, #2]
 800812c:	b29b      	uxth	r3, r3
 800812e:	4a46      	ldr	r2, [pc, #280]	@ (8008248 <tcp_input+0x28c>)
 8008130:	6814      	ldr	r4, [r2, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	f7fc fdaa 	bl	8004c8c <lwip_htons>
 8008138:	4603      	mov	r3, r0
 800813a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800813c:	4b42      	ldr	r3, [pc, #264]	@ (8008248 <tcp_input+0x28c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	4a41      	ldr	r2, [pc, #260]	@ (8008248 <tcp_input+0x28c>)
 8008144:	6814      	ldr	r4, [r2, #0]
 8008146:	4618      	mov	r0, r3
 8008148:	f7fc fdb6 	bl	8004cb8 <lwip_htonl>
 800814c:	4603      	mov	r3, r0
 800814e:	6063      	str	r3, [r4, #4]
 8008150:	6863      	ldr	r3, [r4, #4]
 8008152:	4a45      	ldr	r2, [pc, #276]	@ (8008268 <tcp_input+0x2ac>)
 8008154:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008156:	4b3c      	ldr	r3, [pc, #240]	@ (8008248 <tcp_input+0x28c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	4a3a      	ldr	r2, [pc, #232]	@ (8008248 <tcp_input+0x28c>)
 800815e:	6814      	ldr	r4, [r2, #0]
 8008160:	4618      	mov	r0, r3
 8008162:	f7fc fda9 	bl	8004cb8 <lwip_htonl>
 8008166:	4603      	mov	r3, r0
 8008168:	60a3      	str	r3, [r4, #8]
 800816a:	68a3      	ldr	r3, [r4, #8]
 800816c:	4a3f      	ldr	r2, [pc, #252]	@ (800826c <tcp_input+0x2b0>)
 800816e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008170:	4b35      	ldr	r3, [pc, #212]	@ (8008248 <tcp_input+0x28c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	89db      	ldrh	r3, [r3, #14]
 8008176:	b29b      	uxth	r3, r3
 8008178:	4a33      	ldr	r2, [pc, #204]	@ (8008248 <tcp_input+0x28c>)
 800817a:	6814      	ldr	r4, [r2, #0]
 800817c:	4618      	mov	r0, r3
 800817e:	f7fc fd85 	bl	8004c8c <lwip_htons>
 8008182:	4603      	mov	r3, r0
 8008184:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008186:	4b30      	ldr	r3, [pc, #192]	@ (8008248 <tcp_input+0x28c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	899b      	ldrh	r3, [r3, #12]
 800818c:	b29b      	uxth	r3, r3
 800818e:	4618      	mov	r0, r3
 8008190:	f7fc fd7c 	bl	8004c8c <lwip_htons>
 8008194:	4603      	mov	r3, r0
 8008196:	b2db      	uxtb	r3, r3
 8008198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800819c:	b2da      	uxtb	r2, r3
 800819e:	4b34      	ldr	r3, [pc, #208]	@ (8008270 <tcp_input+0x2b4>)
 80081a0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	891a      	ldrh	r2, [r3, #8]
 80081a6:	4b33      	ldr	r3, [pc, #204]	@ (8008274 <tcp_input+0x2b8>)
 80081a8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80081aa:	4b31      	ldr	r3, [pc, #196]	@ (8008270 <tcp_input+0x2b4>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00c      	beq.n	80081d0 <tcp_input+0x214>
    tcplen++;
 80081b6:	4b2f      	ldr	r3, [pc, #188]	@ (8008274 <tcp_input+0x2b8>)
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	3301      	adds	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	4b2d      	ldr	r3, [pc, #180]	@ (8008274 <tcp_input+0x2b8>)
 80081c0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	891a      	ldrh	r2, [r3, #8]
 80081c6:	4b2b      	ldr	r3, [pc, #172]	@ (8008274 <tcp_input+0x2b8>)
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	f200 82e6 	bhi.w	800879c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081d4:	4b28      	ldr	r3, [pc, #160]	@ (8008278 <tcp_input+0x2bc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	61fb      	str	r3, [r7, #28]
 80081da:	e09d      	b.n	8008318 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	7d1b      	ldrb	r3, [r3, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d105      	bne.n	80081f0 <tcp_input+0x234>
 80081e4:	4b15      	ldr	r3, [pc, #84]	@ (800823c <tcp_input+0x280>)
 80081e6:	22fb      	movs	r2, #251	@ 0xfb
 80081e8:	4924      	ldr	r1, [pc, #144]	@ (800827c <tcp_input+0x2c0>)
 80081ea:	4816      	ldr	r0, [pc, #88]	@ (8008244 <tcp_input+0x288>)
 80081ec:	f006 fe3c 	bl	800ee68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	7d1b      	ldrb	r3, [r3, #20]
 80081f4:	2b0a      	cmp	r3, #10
 80081f6:	d105      	bne.n	8008204 <tcp_input+0x248>
 80081f8:	4b10      	ldr	r3, [pc, #64]	@ (800823c <tcp_input+0x280>)
 80081fa:	22fc      	movs	r2, #252	@ 0xfc
 80081fc:	4920      	ldr	r1, [pc, #128]	@ (8008280 <tcp_input+0x2c4>)
 80081fe:	4811      	ldr	r0, [pc, #68]	@ (8008244 <tcp_input+0x288>)
 8008200:	f006 fe32 	bl	800ee68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	7d1b      	ldrb	r3, [r3, #20]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d105      	bne.n	8008218 <tcp_input+0x25c>
 800820c:	4b0b      	ldr	r3, [pc, #44]	@ (800823c <tcp_input+0x280>)
 800820e:	22fd      	movs	r2, #253	@ 0xfd
 8008210:	491c      	ldr	r1, [pc, #112]	@ (8008284 <tcp_input+0x2c8>)
 8008212:	480c      	ldr	r0, [pc, #48]	@ (8008244 <tcp_input+0x288>)
 8008214:	f006 fe28 	bl	800ee68 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	7a1b      	ldrb	r3, [r3, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d033      	beq.n	8008288 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	7a1a      	ldrb	r2, [r3, #8]
 8008224:	4b09      	ldr	r3, [pc, #36]	@ (800824c <tcp_input+0x290>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800822c:	3301      	adds	r3, #1
 800822e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008230:	429a      	cmp	r2, r3
 8008232:	d029      	beq.n	8008288 <tcp_input+0x2cc>
      prev = pcb;
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	61bb      	str	r3, [r7, #24]
      continue;
 8008238:	e06b      	b.n	8008312 <tcp_input+0x356>
 800823a:	bf00      	nop
 800823c:	08010ee0 	.word	0x08010ee0
 8008240:	08010f14 	.word	0x08010f14
 8008244:	08010f2c 	.word	0x08010f2c
 8008248:	200082b0 	.word	0x200082b0
 800824c:	20004d18 	.word	0x20004d18
 8008250:	200082b4 	.word	0x200082b4
 8008254:	200082b8 	.word	0x200082b8
 8008258:	200082b6 	.word	0x200082b6
 800825c:	08010f54 	.word	0x08010f54
 8008260:	08010f64 	.word	0x08010f64
 8008264:	08010f70 	.word	0x08010f70
 8008268:	200082c0 	.word	0x200082c0
 800826c:	200082c4 	.word	0x200082c4
 8008270:	200082cc 	.word	0x200082cc
 8008274:	200082ca 	.word	0x200082ca
 8008278:	20008294 	.word	0x20008294
 800827c:	08010f90 	.word	0x08010f90
 8008280:	08010fb8 	.word	0x08010fb8
 8008284:	08010fe4 	.word	0x08010fe4
    }

    if (pcb->remote_port == tcphdr->src &&
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	8b1a      	ldrh	r2, [r3, #24]
 800828c:	4b72      	ldr	r3, [pc, #456]	@ (8008458 <tcp_input+0x49c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	429a      	cmp	r2, r3
 8008296:	d13a      	bne.n	800830e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	8ada      	ldrh	r2, [r3, #22]
 800829c:	4b6e      	ldr	r3, [pc, #440]	@ (8008458 <tcp_input+0x49c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	885b      	ldrh	r3, [r3, #2]
 80082a2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d132      	bne.n	800830e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	4b6b      	ldr	r3, [pc, #428]	@ (800845c <tcp_input+0x4a0>)
 80082ae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d12c      	bne.n	800830e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	4b68      	ldr	r3, [pc, #416]	@ (800845c <tcp_input+0x4a0>)
 80082ba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80082bc:	429a      	cmp	r2, r3
 80082be:	d126      	bne.n	800830e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d106      	bne.n	80082d8 <tcp_input+0x31c>
 80082ca:	4b65      	ldr	r3, [pc, #404]	@ (8008460 <tcp_input+0x4a4>)
 80082cc:	f240 120d 	movw	r2, #269	@ 0x10d
 80082d0:	4964      	ldr	r1, [pc, #400]	@ (8008464 <tcp_input+0x4a8>)
 80082d2:	4865      	ldr	r0, [pc, #404]	@ (8008468 <tcp_input+0x4ac>)
 80082d4:	f006 fdc8 	bl	800ee68 <iprintf>
      if (prev != NULL) {
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <tcp_input+0x338>
        prev->next = pcb->next;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80082e6:	4b61      	ldr	r3, [pc, #388]	@ (800846c <tcp_input+0x4b0>)
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80082ee:	4a5f      	ldr	r2, [pc, #380]	@ (800846c <tcp_input+0x4b0>)
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d111      	bne.n	8008322 <tcp_input+0x366>
 80082fe:	4b58      	ldr	r3, [pc, #352]	@ (8008460 <tcp_input+0x4a4>)
 8008300:	f240 1215 	movw	r2, #277	@ 0x115
 8008304:	495a      	ldr	r1, [pc, #360]	@ (8008470 <tcp_input+0x4b4>)
 8008306:	4858      	ldr	r0, [pc, #352]	@ (8008468 <tcp_input+0x4ac>)
 8008308:	f006 fdae 	bl	800ee68 <iprintf>
      break;
 800830c:	e009      	b.n	8008322 <tcp_input+0x366>
    }
    prev = pcb;
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	61fb      	str	r3, [r7, #28]
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2b00      	cmp	r3, #0
 800831c:	f47f af5e 	bne.w	80081dc <tcp_input+0x220>
 8008320:	e000      	b.n	8008324 <tcp_input+0x368>
      break;
 8008322:	bf00      	nop
  }

  if (pcb == NULL) {
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	2b00      	cmp	r3, #0
 8008328:	f040 80aa 	bne.w	8008480 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800832c:	4b51      	ldr	r3, [pc, #324]	@ (8008474 <tcp_input+0x4b8>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	61fb      	str	r3, [r7, #28]
 8008332:	e03f      	b.n	80083b4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	7d1b      	ldrb	r3, [r3, #20]
 8008338:	2b0a      	cmp	r3, #10
 800833a:	d006      	beq.n	800834a <tcp_input+0x38e>
 800833c:	4b48      	ldr	r3, [pc, #288]	@ (8008460 <tcp_input+0x4a4>)
 800833e:	f240 121f 	movw	r2, #287	@ 0x11f
 8008342:	494d      	ldr	r1, [pc, #308]	@ (8008478 <tcp_input+0x4bc>)
 8008344:	4848      	ldr	r0, [pc, #288]	@ (8008468 <tcp_input+0x4ac>)
 8008346:	f006 fd8f 	bl	800ee68 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	7a1b      	ldrb	r3, [r3, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d009      	beq.n	8008366 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	7a1a      	ldrb	r2, [r3, #8]
 8008356:	4b41      	ldr	r3, [pc, #260]	@ (800845c <tcp_input+0x4a0>)
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800835e:	3301      	adds	r3, #1
 8008360:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008362:	429a      	cmp	r2, r3
 8008364:	d122      	bne.n	80083ac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	8b1a      	ldrh	r2, [r3, #24]
 800836a:	4b3b      	ldr	r3, [pc, #236]	@ (8008458 <tcp_input+0x49c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29b      	uxth	r3, r3
 8008372:	429a      	cmp	r2, r3
 8008374:	d11b      	bne.n	80083ae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	8ada      	ldrh	r2, [r3, #22]
 800837a:	4b37      	ldr	r3, [pc, #220]	@ (8008458 <tcp_input+0x49c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	885b      	ldrh	r3, [r3, #2]
 8008380:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008382:	429a      	cmp	r2, r3
 8008384:	d113      	bne.n	80083ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	4b34      	ldr	r3, [pc, #208]	@ (800845c <tcp_input+0x4a0>)
 800838c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800838e:	429a      	cmp	r2, r3
 8008390:	d10d      	bne.n	80083ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4b31      	ldr	r3, [pc, #196]	@ (800845c <tcp_input+0x4a0>)
 8008398:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800839a:	429a      	cmp	r2, r3
 800839c:	d107      	bne.n	80083ae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800839e:	69f8      	ldr	r0, [r7, #28]
 80083a0:	f000 fb56 	bl	8008a50 <tcp_timewait_input>
        }
        pbuf_free(p);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7fd ffcf 	bl	8006348 <pbuf_free>
        return;
 80083aa:	e1fd      	b.n	80087a8 <tcp_input+0x7ec>
        continue;
 80083ac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	61fb      	str	r3, [r7, #28]
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1bc      	bne.n	8008334 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80083ba:	2300      	movs	r3, #0
 80083bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80083be:	4b2f      	ldr	r3, [pc, #188]	@ (800847c <tcp_input+0x4c0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	e02a      	b.n	800841c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	7a1b      	ldrb	r3, [r3, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00c      	beq.n	80083e8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	7a1a      	ldrb	r2, [r3, #8]
 80083d2:	4b22      	ldr	r3, [pc, #136]	@ (800845c <tcp_input+0x4a0>)
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083da:	3301      	adds	r3, #1
 80083dc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80083de:	429a      	cmp	r2, r3
 80083e0:	d002      	beq.n	80083e8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	61bb      	str	r3, [r7, #24]
        continue;
 80083e6:	e016      	b.n	8008416 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	8ada      	ldrh	r2, [r3, #22]
 80083ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008458 <tcp_input+0x49c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	885b      	ldrh	r3, [r3, #2]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d10c      	bne.n	8008412 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	4b17      	ldr	r3, [pc, #92]	@ (800845c <tcp_input+0x4a0>)
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	429a      	cmp	r2, r3
 8008402:	d00f      	beq.n	8008424 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00d      	beq.n	8008426 <tcp_input+0x46a>
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d009      	beq.n	8008426 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	617b      	str	r3, [r7, #20]
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1d1      	bne.n	80083c6 <tcp_input+0x40a>
 8008422:	e000      	b.n	8008426 <tcp_input+0x46a>
            break;
 8008424:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d029      	beq.n	8008480 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00a      	beq.n	8008448 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800843a:	4b10      	ldr	r3, [pc, #64]	@ (800847c <tcp_input+0x4c0>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008442:	4a0e      	ldr	r2, [pc, #56]	@ (800847c <tcp_input+0x4c0>)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008448:	6978      	ldr	r0, [r7, #20]
 800844a:	f000 fa03 	bl	8008854 <tcp_listen_input>
      }
      pbuf_free(p);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fd ff7a 	bl	8006348 <pbuf_free>
      return;
 8008454:	e1a8      	b.n	80087a8 <tcp_input+0x7ec>
 8008456:	bf00      	nop
 8008458:	200082b0 	.word	0x200082b0
 800845c:	20004d18 	.word	0x20004d18
 8008460:	08010ee0 	.word	0x08010ee0
 8008464:	0801100c 	.word	0x0801100c
 8008468:	08010f2c 	.word	0x08010f2c
 800846c:	20008294 	.word	0x20008294
 8008470:	08011038 	.word	0x08011038
 8008474:	20008298 	.word	0x20008298
 8008478:	08011064 	.word	0x08011064
 800847c:	20008290 	.word	0x20008290
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 8158 	beq.w	8008738 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008488:	4b95      	ldr	r3, [pc, #596]	@ (80086e0 <tcp_input+0x724>)
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	891a      	ldrh	r2, [r3, #8]
 8008492:	4b93      	ldr	r3, [pc, #588]	@ (80086e0 <tcp_input+0x724>)
 8008494:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008496:	4a92      	ldr	r2, [pc, #584]	@ (80086e0 <tcp_input+0x724>)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800849c:	4b91      	ldr	r3, [pc, #580]	@ (80086e4 <tcp_input+0x728>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a8f      	ldr	r2, [pc, #572]	@ (80086e0 <tcp_input+0x724>)
 80084a2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80084a4:	4b90      	ldr	r3, [pc, #576]	@ (80086e8 <tcp_input+0x72c>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80084aa:	4b90      	ldr	r3, [pc, #576]	@ (80086ec <tcp_input+0x730>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80084b0:	4b8f      	ldr	r3, [pc, #572]	@ (80086f0 <tcp_input+0x734>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80084b6:	4b8f      	ldr	r3, [pc, #572]	@ (80086f4 <tcp_input+0x738>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	f003 0308 	and.w	r3, r3, #8
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d006      	beq.n	80084d0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	7b5b      	ldrb	r3, [r3, #13]
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d017      	beq.n	8008508 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80084d8:	69f8      	ldr	r0, [r7, #28]
 80084da:	f7ff f929 	bl	8007730 <tcp_process_refused_data>
 80084de:	4603      	mov	r3, r0
 80084e0:	f113 0f0d 	cmn.w	r3, #13
 80084e4:	d007      	beq.n	80084f6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00c      	beq.n	8008508 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80084ee:	4b82      	ldr	r3, [pc, #520]	@ (80086f8 <tcp_input+0x73c>)
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d008      	beq.n	8008508 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f040 80e3 	bne.w	80086c6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008500:	69f8      	ldr	r0, [r7, #28]
 8008502:	f003 f9a7 	bl	800b854 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008506:	e0de      	b.n	80086c6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008508:	4a7c      	ldr	r2, [pc, #496]	@ (80086fc <tcp_input+0x740>)
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800850e:	69f8      	ldr	r0, [r7, #28]
 8008510:	f000 fb18 	bl	8008b44 <tcp_process>
 8008514:	4603      	mov	r3, r0
 8008516:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008518:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800851c:	f113 0f0d 	cmn.w	r3, #13
 8008520:	f000 80d3 	beq.w	80086ca <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008524:	4b71      	ldr	r3, [pc, #452]	@ (80086ec <tcp_input+0x730>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	f003 0308 	and.w	r3, r3, #8
 800852c:	2b00      	cmp	r3, #0
 800852e:	d015      	beq.n	800855c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008536:	2b00      	cmp	r3, #0
 8008538:	d008      	beq.n	800854c <tcp_input+0x590>
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	6912      	ldr	r2, [r2, #16]
 8008544:	f06f 010d 	mvn.w	r1, #13
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800854c:	69f9      	ldr	r1, [r7, #28]
 800854e:	486c      	ldr	r0, [pc, #432]	@ (8008700 <tcp_input+0x744>)
 8008550:	f7ff fbbc 	bl	8007ccc <tcp_pcb_remove>
        tcp_free(pcb);
 8008554:	69f8      	ldr	r0, [r7, #28]
 8008556:	f7fe f9a7 	bl	80068a8 <tcp_free>
 800855a:	e0da      	b.n	8008712 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008560:	4b63      	ldr	r3, [pc, #396]	@ (80086f0 <tcp_input+0x734>)
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01d      	beq.n	80085a4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008568:	4b61      	ldr	r3, [pc, #388]	@ (80086f0 <tcp_input+0x734>)
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00a      	beq.n	800858e <tcp_input+0x5d2>
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	6910      	ldr	r0, [r2, #16]
 8008582:	89fa      	ldrh	r2, [r7, #14]
 8008584:	69f9      	ldr	r1, [r7, #28]
 8008586:	4798      	blx	r3
 8008588:	4603      	mov	r3, r0
 800858a:	74fb      	strb	r3, [r7, #19]
 800858c:	e001      	b.n	8008592 <tcp_input+0x5d6>
 800858e:	2300      	movs	r3, #0
 8008590:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008592:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008596:	f113 0f0d 	cmn.w	r3, #13
 800859a:	f000 8098 	beq.w	80086ce <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800859e:	4b54      	ldr	r3, [pc, #336]	@ (80086f0 <tcp_input+0x734>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80085a4:	69f8      	ldr	r0, [r7, #28]
 80085a6:	f000 f915 	bl	80087d4 <tcp_input_delayed_close>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 8090 	bne.w	80086d2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80085b2:	4b4d      	ldr	r3, [pc, #308]	@ (80086e8 <tcp_input+0x72c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d041      	beq.n	800863e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d006      	beq.n	80085d0 <tcp_input+0x614>
 80085c2:	4b50      	ldr	r3, [pc, #320]	@ (8008704 <tcp_input+0x748>)
 80085c4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80085c8:	494f      	ldr	r1, [pc, #316]	@ (8008708 <tcp_input+0x74c>)
 80085ca:	4850      	ldr	r0, [pc, #320]	@ (800870c <tcp_input+0x750>)
 80085cc:	f006 fc4c 	bl	800ee68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	8b5b      	ldrh	r3, [r3, #26]
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d008      	beq.n	80085ee <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80085dc:	4b42      	ldr	r3, [pc, #264]	@ (80086e8 <tcp_input+0x72c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fd feb1 	bl	8006348 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80085e6:	69f8      	ldr	r0, [r7, #28]
 80085e8:	f7fe fc46 	bl	8006e78 <tcp_abort>
            goto aborted;
 80085ec:	e091      	b.n	8008712 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00c      	beq.n	8008612 <tcp_input+0x656>
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	6918      	ldr	r0, [r3, #16]
 8008602:	4b39      	ldr	r3, [pc, #228]	@ (80086e8 <tcp_input+0x72c>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	2300      	movs	r3, #0
 8008608:	69f9      	ldr	r1, [r7, #28]
 800860a:	47a0      	blx	r4
 800860c:	4603      	mov	r3, r0
 800860e:	74fb      	strb	r3, [r7, #19]
 8008610:	e008      	b.n	8008624 <tcp_input+0x668>
 8008612:	4b35      	ldr	r3, [pc, #212]	@ (80086e8 <tcp_input+0x72c>)
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	2300      	movs	r3, #0
 8008618:	69f9      	ldr	r1, [r7, #28]
 800861a:	2000      	movs	r0, #0
 800861c:	f7ff f95e 	bl	80078dc <tcp_recv_null>
 8008620:	4603      	mov	r3, r0
 8008622:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008624:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008628:	f113 0f0d 	cmn.w	r3, #13
 800862c:	d053      	beq.n	80086d6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800862e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008636:	4b2c      	ldr	r3, [pc, #176]	@ (80086e8 <tcp_input+0x72c>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800863e:	4b2b      	ldr	r3, [pc, #172]	@ (80086ec <tcp_input+0x730>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b00      	cmp	r3, #0
 8008648:	d030      	beq.n	80086ac <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800864e:	2b00      	cmp	r3, #0
 8008650:	d009      	beq.n	8008666 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008656:	7b5a      	ldrb	r2, [r3, #13]
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800865c:	f042 0220 	orr.w	r2, r2, #32
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	735a      	strb	r2, [r3, #13]
 8008664:	e022      	b.n	80086ac <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800866a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800866e:	d005      	beq.n	800867c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008674:	3301      	adds	r3, #1
 8008676:	b29a      	uxth	r2, r3
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00b      	beq.n	800869e <tcp_input+0x6e2>
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	6918      	ldr	r0, [r3, #16]
 8008690:	2300      	movs	r3, #0
 8008692:	2200      	movs	r2, #0
 8008694:	69f9      	ldr	r1, [r7, #28]
 8008696:	47a0      	blx	r4
 8008698:	4603      	mov	r3, r0
 800869a:	74fb      	strb	r3, [r7, #19]
 800869c:	e001      	b.n	80086a2 <tcp_input+0x6e6>
 800869e:	2300      	movs	r3, #0
 80086a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80086a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086a6:	f113 0f0d 	cmn.w	r3, #13
 80086aa:	d016      	beq.n	80086da <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80086ac:	4b13      	ldr	r3, [pc, #76]	@ (80086fc <tcp_input+0x740>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80086b2:	69f8      	ldr	r0, [r7, #28]
 80086b4:	f000 f88e 	bl	80087d4 <tcp_input_delayed_close>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d128      	bne.n	8008710 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80086be:	69f8      	ldr	r0, [r7, #28]
 80086c0:	f002 fac2 	bl	800ac48 <tcp_output>
 80086c4:	e025      	b.n	8008712 <tcp_input+0x756>
        goto aborted;
 80086c6:	bf00      	nop
 80086c8:	e023      	b.n	8008712 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80086ca:	bf00      	nop
 80086cc:	e021      	b.n	8008712 <tcp_input+0x756>
              goto aborted;
 80086ce:	bf00      	nop
 80086d0:	e01f      	b.n	8008712 <tcp_input+0x756>
          goto aborted;
 80086d2:	bf00      	nop
 80086d4:	e01d      	b.n	8008712 <tcp_input+0x756>
            goto aborted;
 80086d6:	bf00      	nop
 80086d8:	e01b      	b.n	8008712 <tcp_input+0x756>
              goto aborted;
 80086da:	bf00      	nop
 80086dc:	e019      	b.n	8008712 <tcp_input+0x756>
 80086de:	bf00      	nop
 80086e0:	200082a0 	.word	0x200082a0
 80086e4:	200082b0 	.word	0x200082b0
 80086e8:	200082d0 	.word	0x200082d0
 80086ec:	200082cd 	.word	0x200082cd
 80086f0:	200082c8 	.word	0x200082c8
 80086f4:	200082cc 	.word	0x200082cc
 80086f8:	200082ca 	.word	0x200082ca
 80086fc:	200082d4 	.word	0x200082d4
 8008700:	20008294 	.word	0x20008294
 8008704:	08010ee0 	.word	0x08010ee0
 8008708:	08011094 	.word	0x08011094
 800870c:	08010f2c 	.word	0x08010f2c
          goto aborted;
 8008710:	bf00      	nop
    tcp_input_pcb = NULL;
 8008712:	4b27      	ldr	r3, [pc, #156]	@ (80087b0 <tcp_input+0x7f4>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008718:	4b26      	ldr	r3, [pc, #152]	@ (80087b4 <tcp_input+0x7f8>)
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800871e:	4b26      	ldr	r3, [pc, #152]	@ (80087b8 <tcp_input+0x7fc>)
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d03f      	beq.n	80087a6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008726:	4b24      	ldr	r3, [pc, #144]	@ (80087b8 <tcp_input+0x7fc>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	4618      	mov	r0, r3
 800872c:	f7fd fe0c 	bl	8006348 <pbuf_free>
      inseg.p = NULL;
 8008730:	4b21      	ldr	r3, [pc, #132]	@ (80087b8 <tcp_input+0x7fc>)
 8008732:	2200      	movs	r2, #0
 8008734:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008736:	e036      	b.n	80087a6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008738:	4b20      	ldr	r3, [pc, #128]	@ (80087bc <tcp_input+0x800>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	899b      	ldrh	r3, [r3, #12]
 800873e:	b29b      	uxth	r3, r3
 8008740:	4618      	mov	r0, r3
 8008742:	f7fc faa3 	bl	8004c8c <lwip_htons>
 8008746:	4603      	mov	r3, r0
 8008748:	b2db      	uxtb	r3, r3
 800874a:	f003 0304 	and.w	r3, r3, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	d118      	bne.n	8008784 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008752:	4b1b      	ldr	r3, [pc, #108]	@ (80087c0 <tcp_input+0x804>)
 8008754:	6819      	ldr	r1, [r3, #0]
 8008756:	4b1b      	ldr	r3, [pc, #108]	@ (80087c4 <tcp_input+0x808>)
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	4b1a      	ldr	r3, [pc, #104]	@ (80087c8 <tcp_input+0x80c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008762:	4b16      	ldr	r3, [pc, #88]	@ (80087bc <tcp_input+0x800>)
 8008764:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008766:	885b      	ldrh	r3, [r3, #2]
 8008768:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800876a:	4a14      	ldr	r2, [pc, #80]	@ (80087bc <tcp_input+0x800>)
 800876c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800876e:	8812      	ldrh	r2, [r2, #0]
 8008770:	b292      	uxth	r2, r2
 8008772:	9202      	str	r2, [sp, #8]
 8008774:	9301      	str	r3, [sp, #4]
 8008776:	4b15      	ldr	r3, [pc, #84]	@ (80087cc <tcp_input+0x810>)
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	4b15      	ldr	r3, [pc, #84]	@ (80087d0 <tcp_input+0x814>)
 800877c:	4602      	mov	r2, r0
 800877e:	2000      	movs	r0, #0
 8008780:	f003 f816 	bl	800b7b0 <tcp_rst>
    pbuf_free(p);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7fd fddf 	bl	8006348 <pbuf_free>
  return;
 800878a:	e00c      	b.n	80087a6 <tcp_input+0x7ea>
    goto dropped;
 800878c:	bf00      	nop
 800878e:	e006      	b.n	800879e <tcp_input+0x7e2>
    goto dropped;
 8008790:	bf00      	nop
 8008792:	e004      	b.n	800879e <tcp_input+0x7e2>
    goto dropped;
 8008794:	bf00      	nop
 8008796:	e002      	b.n	800879e <tcp_input+0x7e2>
      goto dropped;
 8008798:	bf00      	nop
 800879a:	e000      	b.n	800879e <tcp_input+0x7e2>
      goto dropped;
 800879c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7fd fdd2 	bl	8006348 <pbuf_free>
 80087a4:	e000      	b.n	80087a8 <tcp_input+0x7ec>
  return;
 80087a6:	bf00      	nop
}
 80087a8:	3724      	adds	r7, #36	@ 0x24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd90      	pop	{r4, r7, pc}
 80087ae:	bf00      	nop
 80087b0:	200082d4 	.word	0x200082d4
 80087b4:	200082d0 	.word	0x200082d0
 80087b8:	200082a0 	.word	0x200082a0
 80087bc:	200082b0 	.word	0x200082b0
 80087c0:	200082c4 	.word	0x200082c4
 80087c4:	200082ca 	.word	0x200082ca
 80087c8:	200082c0 	.word	0x200082c0
 80087cc:	20004d28 	.word	0x20004d28
 80087d0:	20004d2c 	.word	0x20004d2c

080087d4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d106      	bne.n	80087f0 <tcp_input_delayed_close+0x1c>
 80087e2:	4b17      	ldr	r3, [pc, #92]	@ (8008840 <tcp_input_delayed_close+0x6c>)
 80087e4:	f240 225a 	movw	r2, #602	@ 0x25a
 80087e8:	4916      	ldr	r1, [pc, #88]	@ (8008844 <tcp_input_delayed_close+0x70>)
 80087ea:	4817      	ldr	r0, [pc, #92]	@ (8008848 <tcp_input_delayed_close+0x74>)
 80087ec:	f006 fb3c 	bl	800ee68 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80087f0:	4b16      	ldr	r3, [pc, #88]	@ (800884c <tcp_input_delayed_close+0x78>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	f003 0310 	and.w	r3, r3, #16
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d01c      	beq.n	8008836 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	8b5b      	ldrh	r3, [r3, #26]
 8008800:	f003 0310 	and.w	r3, r3, #16
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10d      	bne.n	8008824 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800880e:	2b00      	cmp	r3, #0
 8008810:	d008      	beq.n	8008824 <tcp_input_delayed_close+0x50>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	6912      	ldr	r2, [r2, #16]
 800881c:	f06f 010e 	mvn.w	r1, #14
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008824:	6879      	ldr	r1, [r7, #4]
 8008826:	480a      	ldr	r0, [pc, #40]	@ (8008850 <tcp_input_delayed_close+0x7c>)
 8008828:	f7ff fa50 	bl	8007ccc <tcp_pcb_remove>
    tcp_free(pcb);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7fe f83b 	bl	80068a8 <tcp_free>
    return 1;
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	08010ee0 	.word	0x08010ee0
 8008844:	080110b0 	.word	0x080110b0
 8008848:	08010f2c 	.word	0x08010f2c
 800884c:	200082cd 	.word	0x200082cd
 8008850:	20008294 	.word	0x20008294

08008854 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008854:	b590      	push	{r4, r7, lr}
 8008856:	b08b      	sub	sp, #44	@ 0x2c
 8008858:	af04      	add	r7, sp, #16
 800885a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800885c:	4b6f      	ldr	r3, [pc, #444]	@ (8008a1c <tcp_listen_input+0x1c8>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	f040 80d2 	bne.w	8008a0e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d106      	bne.n	800887e <tcp_listen_input+0x2a>
 8008870:	4b6b      	ldr	r3, [pc, #428]	@ (8008a20 <tcp_listen_input+0x1cc>)
 8008872:	f240 2281 	movw	r2, #641	@ 0x281
 8008876:	496b      	ldr	r1, [pc, #428]	@ (8008a24 <tcp_listen_input+0x1d0>)
 8008878:	486b      	ldr	r0, [pc, #428]	@ (8008a28 <tcp_listen_input+0x1d4>)
 800887a:	f006 faf5 	bl	800ee68 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800887e:	4b67      	ldr	r3, [pc, #412]	@ (8008a1c <tcp_listen_input+0x1c8>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	f003 0310 	and.w	r3, r3, #16
 8008886:	2b00      	cmp	r3, #0
 8008888:	d019      	beq.n	80088be <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800888a:	4b68      	ldr	r3, [pc, #416]	@ (8008a2c <tcp_listen_input+0x1d8>)
 800888c:	6819      	ldr	r1, [r3, #0]
 800888e:	4b68      	ldr	r3, [pc, #416]	@ (8008a30 <tcp_listen_input+0x1dc>)
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	4b67      	ldr	r3, [pc, #412]	@ (8008a34 <tcp_listen_input+0x1e0>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800889a:	4b67      	ldr	r3, [pc, #412]	@ (8008a38 <tcp_listen_input+0x1e4>)
 800889c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800889e:	885b      	ldrh	r3, [r3, #2]
 80088a0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088a2:	4a65      	ldr	r2, [pc, #404]	@ (8008a38 <tcp_listen_input+0x1e4>)
 80088a4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088a6:	8812      	ldrh	r2, [r2, #0]
 80088a8:	b292      	uxth	r2, r2
 80088aa:	9202      	str	r2, [sp, #8]
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	4b63      	ldr	r3, [pc, #396]	@ (8008a3c <tcp_listen_input+0x1e8>)
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	4b63      	ldr	r3, [pc, #396]	@ (8008a40 <tcp_listen_input+0x1ec>)
 80088b4:	4602      	mov	r2, r0
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f002 ff7a 	bl	800b7b0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80088bc:	e0a9      	b.n	8008a12 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80088be:	4b57      	ldr	r3, [pc, #348]	@ (8008a1c <tcp_listen_input+0x1c8>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 80a3 	beq.w	8008a12 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	7d5b      	ldrb	r3, [r3, #21]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7ff f927 	bl	8007b24 <tcp_alloc>
 80088d6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d111      	bne.n	8008902 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <tcp_listen_input+0xa8>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6910      	ldr	r0, [r2, #16]
 80088ee:	f04f 32ff 	mov.w	r2, #4294967295
 80088f2:	2100      	movs	r1, #0
 80088f4:	4798      	blx	r3
 80088f6:	4603      	mov	r3, r0
 80088f8:	73bb      	strb	r3, [r7, #14]
      return;
 80088fa:	e08b      	b.n	8008a14 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80088fc:	23f0      	movs	r3, #240	@ 0xf0
 80088fe:	73bb      	strb	r3, [r7, #14]
      return;
 8008900:	e088      	b.n	8008a14 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008902:	4b50      	ldr	r3, [pc, #320]	@ (8008a44 <tcp_listen_input+0x1f0>)
 8008904:	695a      	ldr	r2, [r3, #20]
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800890a:	4b4e      	ldr	r3, [pc, #312]	@ (8008a44 <tcp_listen_input+0x1f0>)
 800890c:	691a      	ldr	r2, [r3, #16]
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	8ada      	ldrh	r2, [r3, #22]
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800891a:	4b47      	ldr	r3, [pc, #284]	@ (8008a38 <tcp_listen_input+0x1e4>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	b29a      	uxth	r2, r3
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2203      	movs	r2, #3
 800892a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800892c:	4b41      	ldr	r3, [pc, #260]	@ (8008a34 <tcp_listen_input+0x1e0>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800893e:	6978      	ldr	r0, [r7, #20]
 8008940:	f7ff fa58 	bl	8007df4 <tcp_next_iss>
 8008944:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800895e:	4b35      	ldr	r3, [pc, #212]	@ (8008a34 <tcp_listen_input+0x1e0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	1e5a      	subs	r2, r3, #1
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7a5b      	ldrb	r3, [r3, #9]
 800897a:	f003 030c 	and.w	r3, r3, #12
 800897e:	b2da      	uxtb	r2, r3
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	7a1a      	ldrb	r2, [r3, #8]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800898c:	4b2e      	ldr	r3, [pc, #184]	@ (8008a48 <tcp_listen_input+0x1f4>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	60da      	str	r2, [r3, #12]
 8008994:	4a2c      	ldr	r2, [pc, #176]	@ (8008a48 <tcp_listen_input+0x1f4>)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	f003 f8cb 	bl	800bb34 <tcp_timer_needed>
 800899e:	4b2b      	ldr	r3, [pc, #172]	@ (8008a4c <tcp_listen_input+0x1f8>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80089a4:	6978      	ldr	r0, [r7, #20]
 80089a6:	f001 fd8b 	bl	800a4c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80089aa:	4b23      	ldr	r3, [pc, #140]	@ (8008a38 <tcp_listen_input+0x1e4>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	89db      	ldrh	r3, [r3, #14]
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4618      	mov	r0, r3
 80089ce:	f004 ff5f 	bl	800d890 <ip4_route>
 80089d2:	4601      	mov	r1, r0
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	3304      	adds	r3, #4
 80089d8:	461a      	mov	r2, r3
 80089da:	4620      	mov	r0, r4
 80089dc:	f7ff fa30 	bl	8007e40 <tcp_eff_send_mss_netif>
 80089e0:	4603      	mov	r3, r0
 80089e2:	461a      	mov	r2, r3
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80089e8:	2112      	movs	r1, #18
 80089ea:	6978      	ldr	r0, [r7, #20]
 80089ec:	f002 f83e 	bl	800aa6c <tcp_enqueue_flags>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80089f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80089fc:	2100      	movs	r1, #0
 80089fe:	6978      	ldr	r0, [r7, #20]
 8008a00:	f7fe f97c 	bl	8006cfc <tcp_abandon>
      return;
 8008a04:	e006      	b.n	8008a14 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008a06:	6978      	ldr	r0, [r7, #20]
 8008a08:	f002 f91e 	bl	800ac48 <tcp_output>
  return;
 8008a0c:	e001      	b.n	8008a12 <tcp_listen_input+0x1be>
    return;
 8008a0e:	bf00      	nop
 8008a10:	e000      	b.n	8008a14 <tcp_listen_input+0x1c0>
  return;
 8008a12:	bf00      	nop
}
 8008a14:	371c      	adds	r7, #28
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd90      	pop	{r4, r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	200082cc 	.word	0x200082cc
 8008a20:	08010ee0 	.word	0x08010ee0
 8008a24:	080110d8 	.word	0x080110d8
 8008a28:	08010f2c 	.word	0x08010f2c
 8008a2c:	200082c4 	.word	0x200082c4
 8008a30:	200082ca 	.word	0x200082ca
 8008a34:	200082c0 	.word	0x200082c0
 8008a38:	200082b0 	.word	0x200082b0
 8008a3c:	20004d28 	.word	0x20004d28
 8008a40:	20004d2c 	.word	0x20004d2c
 8008a44:	20004d18 	.word	0x20004d18
 8008a48:	20008294 	.word	0x20008294
 8008a4c:	2000829c 	.word	0x2000829c

08008a50 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af04      	add	r7, sp, #16
 8008a56:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008a58:	4b2f      	ldr	r3, [pc, #188]	@ (8008b18 <tcp_timewait_input+0xc8>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	f003 0304 	and.w	r3, r3, #4
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d153      	bne.n	8008b0c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d106      	bne.n	8008a78 <tcp_timewait_input+0x28>
 8008a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8008b1c <tcp_timewait_input+0xcc>)
 8008a6c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008a70:	492b      	ldr	r1, [pc, #172]	@ (8008b20 <tcp_timewait_input+0xd0>)
 8008a72:	482c      	ldr	r0, [pc, #176]	@ (8008b24 <tcp_timewait_input+0xd4>)
 8008a74:	f006 f9f8 	bl	800ee68 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008a78:	4b27      	ldr	r3, [pc, #156]	@ (8008b18 <tcp_timewait_input+0xc8>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	f003 0302 	and.w	r3, r3, #2
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d02a      	beq.n	8008ada <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008a84:	4b28      	ldr	r3, [pc, #160]	@ (8008b28 <tcp_timewait_input+0xd8>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	db2d      	blt.n	8008aee <tcp_timewait_input+0x9e>
 8008a92:	4b25      	ldr	r3, [pc, #148]	@ (8008b28 <tcp_timewait_input+0xd8>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9a:	6879      	ldr	r1, [r7, #4]
 8008a9c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008a9e:	440b      	add	r3, r1
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dc23      	bgt.n	8008aee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008aa6:	4b21      	ldr	r3, [pc, #132]	@ (8008b2c <tcp_timewait_input+0xdc>)
 8008aa8:	6819      	ldr	r1, [r3, #0]
 8008aaa:	4b21      	ldr	r3, [pc, #132]	@ (8008b30 <tcp_timewait_input+0xe0>)
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b28 <tcp_timewait_input+0xd8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8008b34 <tcp_timewait_input+0xe4>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008aba:	885b      	ldrh	r3, [r3, #2]
 8008abc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008abe:	4a1d      	ldr	r2, [pc, #116]	@ (8008b34 <tcp_timewait_input+0xe4>)
 8008ac0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ac2:	8812      	ldrh	r2, [r2, #0]
 8008ac4:	b292      	uxth	r2, r2
 8008ac6:	9202      	str	r2, [sp, #8]
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	4b1b      	ldr	r3, [pc, #108]	@ (8008b38 <tcp_timewait_input+0xe8>)
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	4b1b      	ldr	r3, [pc, #108]	@ (8008b3c <tcp_timewait_input+0xec>)
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f002 fe6c 	bl	800b7b0 <tcp_rst>
      return;
 8008ad8:	e01b      	b.n	8008b12 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008ada:	4b0f      	ldr	r3, [pc, #60]	@ (8008b18 <tcp_timewait_input+0xc8>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008ae6:	4b16      	ldr	r3, [pc, #88]	@ (8008b40 <tcp_timewait_input+0xf0>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008aee:	4b10      	ldr	r3, [pc, #64]	@ (8008b30 <tcp_timewait_input+0xe0>)
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00c      	beq.n	8008b10 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	8b5b      	ldrh	r3, [r3, #26]
 8008afa:	f043 0302 	orr.w	r3, r3, #2
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f002 f89f 	bl	800ac48 <tcp_output>
  }
  return;
 8008b0a:	e001      	b.n	8008b10 <tcp_timewait_input+0xc0>
    return;
 8008b0c:	bf00      	nop
 8008b0e:	e000      	b.n	8008b12 <tcp_timewait_input+0xc2>
  return;
 8008b10:	bf00      	nop
}
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	200082cc 	.word	0x200082cc
 8008b1c:	08010ee0 	.word	0x08010ee0
 8008b20:	080110f8 	.word	0x080110f8
 8008b24:	08010f2c 	.word	0x08010f2c
 8008b28:	200082c0 	.word	0x200082c0
 8008b2c:	200082c4 	.word	0x200082c4
 8008b30:	200082ca 	.word	0x200082ca
 8008b34:	200082b0 	.word	0x200082b0
 8008b38:	20004d28 	.word	0x20004d28
 8008b3c:	20004d2c 	.word	0x20004d2c
 8008b40:	20008288 	.word	0x20008288

08008b44 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008b44:	b590      	push	{r4, r7, lr}
 8008b46:	b08d      	sub	sp, #52	@ 0x34
 8008b48:	af04      	add	r7, sp, #16
 8008b4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d106      	bne.n	8008b68 <tcp_process+0x24>
 8008b5a:	4b9d      	ldr	r3, [pc, #628]	@ (8008dd0 <tcp_process+0x28c>)
 8008b5c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8008b60:	499c      	ldr	r1, [pc, #624]	@ (8008dd4 <tcp_process+0x290>)
 8008b62:	489d      	ldr	r0, [pc, #628]	@ (8008dd8 <tcp_process+0x294>)
 8008b64:	f006 f980 	bl	800ee68 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008b68:	4b9c      	ldr	r3, [pc, #624]	@ (8008ddc <tcp_process+0x298>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	f003 0304 	and.w	r3, r3, #4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d04e      	beq.n	8008c12 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7d1b      	ldrb	r3, [r3, #20]
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d108      	bne.n	8008b8e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b80:	4b97      	ldr	r3, [pc, #604]	@ (8008de0 <tcp_process+0x29c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d123      	bne.n	8008bd0 <tcp_process+0x8c>
        acceptable = 1;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	76fb      	strb	r3, [r7, #27]
 8008b8c:	e020      	b.n	8008bd0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b92:	4b94      	ldr	r3, [pc, #592]	@ (8008de4 <tcp_process+0x2a0>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d102      	bne.n	8008ba0 <tcp_process+0x5c>
        acceptable = 1;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	76fb      	strb	r3, [r7, #27]
 8008b9e:	e017      	b.n	8008bd0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008ba0:	4b90      	ldr	r3, [pc, #576]	@ (8008de4 <tcp_process+0x2a0>)
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	db10      	blt.n	8008bd0 <tcp_process+0x8c>
 8008bae:	4b8d      	ldr	r3, [pc, #564]	@ (8008de4 <tcp_process+0x2a0>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008bba:	440b      	add	r3, r1
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dc06      	bgt.n	8008bd0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	8b5b      	ldrh	r3, [r3, #26]
 8008bc6:	f043 0302 	orr.w	r3, r3, #2
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008bd0:	7efb      	ldrb	r3, [r7, #27]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01b      	beq.n	8008c0e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	7d1b      	ldrb	r3, [r3, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <tcp_process+0xa8>
 8008bde:	4b7c      	ldr	r3, [pc, #496]	@ (8008dd0 <tcp_process+0x28c>)
 8008be0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8008be4:	4980      	ldr	r1, [pc, #512]	@ (8008de8 <tcp_process+0x2a4>)
 8008be6:	487c      	ldr	r0, [pc, #496]	@ (8008dd8 <tcp_process+0x294>)
 8008be8:	f006 f93e 	bl	800ee68 <iprintf>
      recv_flags |= TF_RESET;
 8008bec:	4b7f      	ldr	r3, [pc, #508]	@ (8008dec <tcp_process+0x2a8>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	f043 0308 	orr.w	r3, r3, #8
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	4b7d      	ldr	r3, [pc, #500]	@ (8008dec <tcp_process+0x2a8>)
 8008bf8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	8b5b      	ldrh	r3, [r3, #26]
 8008bfe:	f023 0301 	bic.w	r3, r3, #1
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008c08:	f06f 030d 	mvn.w	r3, #13
 8008c0c:	e37a      	b.n	8009304 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e378      	b.n	8009304 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008c12:	4b72      	ldr	r3, [pc, #456]	@ (8008ddc <tcp_process+0x298>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d010      	beq.n	8008c40 <tcp_process+0xfc>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7d1b      	ldrb	r3, [r3, #20]
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d00c      	beq.n	8008c40 <tcp_process+0xfc>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	7d1b      	ldrb	r3, [r3, #20]
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d008      	beq.n	8008c40 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	8b5b      	ldrh	r3, [r3, #26]
 8008c32:	f043 0302 	orr.w	r3, r3, #2
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	e361      	b.n	8009304 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	8b5b      	ldrh	r3, [r3, #26]
 8008c44:	f003 0310 	and.w	r3, r3, #16
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008c4c:	4b68      	ldr	r3, [pc, #416]	@ (8008df0 <tcp_process+0x2ac>)
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 fc2b 	bl	800a4c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7d1b      	ldrb	r3, [r3, #20]
 8008c6e:	3b02      	subs	r3, #2
 8008c70:	2b07      	cmp	r3, #7
 8008c72:	f200 8337 	bhi.w	80092e4 <tcp_process+0x7a0>
 8008c76:	a201      	add	r2, pc, #4	@ (adr r2, 8008c7c <tcp_process+0x138>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008c9d 	.word	0x08008c9d
 8008c80:	08008ecd 	.word	0x08008ecd
 8008c84:	08009045 	.word	0x08009045
 8008c88:	0800906f 	.word	0x0800906f
 8008c8c:	08009193 	.word	0x08009193
 8008c90:	08009045 	.word	0x08009045
 8008c94:	0800921f 	.word	0x0800921f
 8008c98:	080092af 	.word	0x080092af
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8008ddc <tcp_process+0x298>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 80e4 	beq.w	8008e72 <tcp_process+0x32e>
 8008caa:	4b4c      	ldr	r3, [pc, #304]	@ (8008ddc <tcp_process+0x298>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 80dd 	beq.w	8008e72 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	4b48      	ldr	r3, [pc, #288]	@ (8008de0 <tcp_process+0x29c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	f040 80d5 	bne.w	8008e72 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008cc8:	4b46      	ldr	r3, [pc, #280]	@ (8008de4 <tcp_process+0x2a0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8008cda:	4b41      	ldr	r3, [pc, #260]	@ (8008de0 <tcp_process+0x29c>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008ce2:	4b44      	ldr	r3, [pc, #272]	@ (8008df4 <tcp_process+0x2b0>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	89db      	ldrh	r3, [r3, #14]
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008cfc:	4b39      	ldr	r3, [pc, #228]	@ (8008de4 <tcp_process+0x2a0>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	1e5a      	subs	r2, r3, #1
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2204      	movs	r2, #4
 8008d0a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4618      	mov	r0, r3
 8008d16:	f004 fdbb 	bl	800d890 <ip4_route>
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	461a      	mov	r2, r3
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7ff f88c 	bl	8007e40 <tcp_eff_send_mss_netif>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008d34:	009a      	lsls	r2, r3, #2
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008d40:	428b      	cmp	r3, r1
 8008d42:	bf38      	it	cc
 8008d44:	460b      	movcc	r3, r1
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d204      	bcs.n	8008d54 <tcp_process+0x210>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	e00d      	b.n	8008d70 <tcp_process+0x22c>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d904      	bls.n	8008d6c <tcp_process+0x228>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	e001      	b.n	8008d70 <tcp_process+0x22c>
 8008d6c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d106      	bne.n	8008d8e <tcp_process+0x24a>
 8008d80:	4b13      	ldr	r3, [pc, #76]	@ (8008dd0 <tcp_process+0x28c>)
 8008d82:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8008d86:	491c      	ldr	r1, [pc, #112]	@ (8008df8 <tcp_process+0x2b4>)
 8008d88:	4813      	ldr	r0, [pc, #76]	@ (8008dd8 <tcp_process+0x294>)
 8008d8a:	f006 f86d 	bl	800ee68 <iprintf>
        --pcb->snd_queuelen;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008da2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d12a      	bne.n	8008e00 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <tcp_process+0x280>
 8008db6:	4b06      	ldr	r3, [pc, #24]	@ (8008dd0 <tcp_process+0x28c>)
 8008db8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8008dbc:	490f      	ldr	r1, [pc, #60]	@ (8008dfc <tcp_process+0x2b8>)
 8008dbe:	4806      	ldr	r0, [pc, #24]	@ (8008dd8 <tcp_process+0x294>)
 8008dc0:	f006 f852 	bl	800ee68 <iprintf>
          pcb->unsent = rseg->next;
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008dcc:	e01c      	b.n	8008e08 <tcp_process+0x2c4>
 8008dce:	bf00      	nop
 8008dd0:	08010ee0 	.word	0x08010ee0
 8008dd4:	08011118 	.word	0x08011118
 8008dd8:	08010f2c 	.word	0x08010f2c
 8008ddc:	200082cc 	.word	0x200082cc
 8008de0:	200082c4 	.word	0x200082c4
 8008de4:	200082c0 	.word	0x200082c0
 8008de8:	08011134 	.word	0x08011134
 8008dec:	200082cd 	.word	0x200082cd
 8008df0:	20008288 	.word	0x20008288
 8008df4:	200082b0 	.word	0x200082b0
 8008df8:	08011154 	.word	0x08011154
 8008dfc:	0801116c 	.word	0x0801116c
        } else {
          pcb->unacked = rseg->next;
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8008e08:	69f8      	ldr	r0, [r7, #28]
 8008e0a:	f7fe fd22 	bl	8007852 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d104      	bne.n	8008e20 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e1c:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008e1e:	e006      	b.n	8008e2e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00a      	beq.n	8008e4e <tcp_process+0x30a>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	6910      	ldr	r0, [r2, #16]
 8008e42:	2200      	movs	r2, #0
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	4798      	blx	r3
 8008e48:	4603      	mov	r3, r0
 8008e4a:	76bb      	strb	r3, [r7, #26]
 8008e4c:	e001      	b.n	8008e52 <tcp_process+0x30e>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008e52:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e56:	f113 0f0d 	cmn.w	r3, #13
 8008e5a:	d102      	bne.n	8008e62 <tcp_process+0x31e>
          return ERR_ABRT;
 8008e5c:	f06f 030c 	mvn.w	r3, #12
 8008e60:	e250      	b.n	8009304 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	8b5b      	ldrh	r3, [r3, #26]
 8008e66:	f043 0302 	orr.w	r3, r3, #2
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008e70:	e23a      	b.n	80092e8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008e72:	4b98      	ldr	r3, [pc, #608]	@ (80090d4 <tcp_process+0x590>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	f003 0310 	and.w	r3, r3, #16
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 8234 	beq.w	80092e8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e80:	4b95      	ldr	r3, [pc, #596]	@ (80090d8 <tcp_process+0x594>)
 8008e82:	6819      	ldr	r1, [r3, #0]
 8008e84:	4b95      	ldr	r3, [pc, #596]	@ (80090dc <tcp_process+0x598>)
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4b95      	ldr	r3, [pc, #596]	@ (80090e0 <tcp_process+0x59c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e90:	4b94      	ldr	r3, [pc, #592]	@ (80090e4 <tcp_process+0x5a0>)
 8008e92:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e94:	885b      	ldrh	r3, [r3, #2]
 8008e96:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e98:	4a92      	ldr	r2, [pc, #584]	@ (80090e4 <tcp_process+0x5a0>)
 8008e9a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e9c:	8812      	ldrh	r2, [r2, #0]
 8008e9e:	b292      	uxth	r2, r2
 8008ea0:	9202      	str	r2, [sp, #8]
 8008ea2:	9301      	str	r3, [sp, #4]
 8008ea4:	4b90      	ldr	r3, [pc, #576]	@ (80090e8 <tcp_process+0x5a4>)
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	4b90      	ldr	r3, [pc, #576]	@ (80090ec <tcp_process+0x5a8>)
 8008eaa:	4602      	mov	r2, r0
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f002 fc7f 	bl	800b7b0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008eb8:	2b05      	cmp	r3, #5
 8008eba:	f200 8215 	bhi.w	80092e8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f002 fa4b 	bl	800b360 <tcp_rexmit_rto>
      break;
 8008eca:	e20d      	b.n	80092e8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008ecc:	4b81      	ldr	r3, [pc, #516]	@ (80090d4 <tcp_process+0x590>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	f003 0310 	and.w	r3, r3, #16
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 80a1 	beq.w	800901c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008eda:	4b7f      	ldr	r3, [pc, #508]	@ (80090d8 <tcp_process+0x594>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	db7e      	blt.n	8008fe8 <tcp_process+0x4a4>
 8008eea:	4b7b      	ldr	r3, [pc, #492]	@ (80090d8 <tcp_process+0x594>)
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	dc77      	bgt.n	8008fe8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2204      	movs	r2, #4
 8008efc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d102      	bne.n	8008f0c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008f06:	23fa      	movs	r3, #250	@ 0xfa
 8008f08:	76bb      	strb	r3, [r7, #26]
 8008f0a:	e01d      	b.n	8008f48 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <tcp_process+0x3e0>
 8008f16:	4b76      	ldr	r3, [pc, #472]	@ (80090f0 <tcp_process+0x5ac>)
 8008f18:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8008f1c:	4975      	ldr	r1, [pc, #468]	@ (80090f4 <tcp_process+0x5b0>)
 8008f1e:	4876      	ldr	r0, [pc, #472]	@ (80090f8 <tcp_process+0x5b4>)
 8008f20:	f005 ffa2 	bl	800ee68 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <tcp_process+0x400>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	6910      	ldr	r0, [r2, #16]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	4798      	blx	r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	76bb      	strb	r3, [r7, #26]
 8008f42:	e001      	b.n	8008f48 <tcp_process+0x404>
 8008f44:	23f0      	movs	r3, #240	@ 0xf0
 8008f46:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008f48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00a      	beq.n	8008f66 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008f50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008f54:	f113 0f0d 	cmn.w	r3, #13
 8008f58:	d002      	beq.n	8008f60 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7fd ff8c 	bl	8006e78 <tcp_abort>
            }
            return ERR_ABRT;
 8008f60:	f06f 030c 	mvn.w	r3, #12
 8008f64:	e1ce      	b.n	8009304 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fae0 	bl	800952c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008f6c:	4b63      	ldr	r3, [pc, #396]	@ (80090fc <tcp_process+0x5b8>)
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d005      	beq.n	8008f80 <tcp_process+0x43c>
            recv_acked--;
 8008f74:	4b61      	ldr	r3, [pc, #388]	@ (80090fc <tcp_process+0x5b8>)
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	4b5f      	ldr	r3, [pc, #380]	@ (80090fc <tcp_process+0x5b8>)
 8008f7e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008f84:	009a      	lsls	r2, r3, #2
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008f90:	428b      	cmp	r3, r1
 8008f92:	bf38      	it	cc
 8008f94:	460b      	movcc	r3, r1
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d204      	bcs.n	8008fa4 <tcp_process+0x460>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	e00d      	b.n	8008fc0 <tcp_process+0x47c>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d904      	bls.n	8008fbc <tcp_process+0x478>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008fb6:	005b      	lsls	r3, r3, #1
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	e001      	b.n	8008fc0 <tcp_process+0x47c>
 8008fbc:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8009100 <tcp_process+0x5bc>)
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d037      	beq.n	8009042 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	8b5b      	ldrh	r3, [r3, #26]
 8008fd6:	f043 0302 	orr.w	r3, r3, #2
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2207      	movs	r2, #7
 8008fe4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008fe6:	e02c      	b.n	8009042 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80090d8 <tcp_process+0x594>)
 8008fea:	6819      	ldr	r1, [r3, #0]
 8008fec:	4b3b      	ldr	r3, [pc, #236]	@ (80090dc <tcp_process+0x598>)
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80090e0 <tcp_process+0x59c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80090e4 <tcp_process+0x5a0>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ffc:	885b      	ldrh	r3, [r3, #2]
 8008ffe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009000:	4a38      	ldr	r2, [pc, #224]	@ (80090e4 <tcp_process+0x5a0>)
 8009002:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009004:	8812      	ldrh	r2, [r2, #0]
 8009006:	b292      	uxth	r2, r2
 8009008:	9202      	str	r2, [sp, #8]
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	4b36      	ldr	r3, [pc, #216]	@ (80090e8 <tcp_process+0x5a4>)
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	4b36      	ldr	r3, [pc, #216]	@ (80090ec <tcp_process+0x5a8>)
 8009012:	4602      	mov	r2, r0
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f002 fbcb 	bl	800b7b0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800901a:	e167      	b.n	80092ec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800901c:	4b2d      	ldr	r3, [pc, #180]	@ (80090d4 <tcp_process+0x590>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8161 	beq.w	80092ec <tcp_process+0x7a8>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902e:	1e5a      	subs	r2, r3, #1
 8009030:	4b2b      	ldr	r3, [pc, #172]	@ (80090e0 <tcp_process+0x59c>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	f040 8159 	bne.w	80092ec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f002 f9b2 	bl	800b3a4 <tcp_rexmit>
      break;
 8009040:	e154      	b.n	80092ec <tcp_process+0x7a8>
 8009042:	e153      	b.n	80092ec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fa71 	bl	800952c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800904a:	4b2d      	ldr	r3, [pc, #180]	@ (8009100 <tcp_process+0x5bc>)
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	f003 0320 	and.w	r3, r3, #32
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 814c 	beq.w	80092f0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	8b5b      	ldrh	r3, [r3, #26]
 800905c:	f043 0302 	orr.w	r3, r3, #2
 8009060:	b29a      	uxth	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2207      	movs	r2, #7
 800906a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800906c:	e140      	b.n	80092f0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa5c 	bl	800952c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009074:	4b22      	ldr	r3, [pc, #136]	@ (8009100 <tcp_process+0x5bc>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	f003 0320 	and.w	r3, r3, #32
 800907c:	2b00      	cmp	r3, #0
 800907e:	d071      	beq.n	8009164 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009080:	4b14      	ldr	r3, [pc, #80]	@ (80090d4 <tcp_process+0x590>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	f003 0310 	and.w	r3, r3, #16
 8009088:	2b00      	cmp	r3, #0
 800908a:	d060      	beq.n	800914e <tcp_process+0x60a>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009090:	4b11      	ldr	r3, [pc, #68]	@ (80090d8 <tcp_process+0x594>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d15a      	bne.n	800914e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800909c:	2b00      	cmp	r3, #0
 800909e:	d156      	bne.n	800914e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	8b5b      	ldrh	r3, [r3, #26]
 80090a4:	f043 0302 	orr.w	r3, r3, #2
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fe fdbc 	bl	8007c2c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80090b4:	4b13      	ldr	r3, [pc, #76]	@ (8009104 <tcp_process+0x5c0>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d105      	bne.n	80090ca <tcp_process+0x586>
 80090be:	4b11      	ldr	r3, [pc, #68]	@ (8009104 <tcp_process+0x5c0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	4a0f      	ldr	r2, [pc, #60]	@ (8009104 <tcp_process+0x5c0>)
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	e02e      	b.n	8009128 <tcp_process+0x5e4>
 80090ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009104 <tcp_process+0x5c0>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	e027      	b.n	8009122 <tcp_process+0x5de>
 80090d2:	bf00      	nop
 80090d4:	200082cc 	.word	0x200082cc
 80090d8:	200082c4 	.word	0x200082c4
 80090dc:	200082ca 	.word	0x200082ca
 80090e0:	200082c0 	.word	0x200082c0
 80090e4:	200082b0 	.word	0x200082b0
 80090e8:	20004d28 	.word	0x20004d28
 80090ec:	20004d2c 	.word	0x20004d2c
 80090f0:	08010ee0 	.word	0x08010ee0
 80090f4:	08011180 	.word	0x08011180
 80090f8:	08010f2c 	.word	0x08010f2c
 80090fc:	200082c8 	.word	0x200082c8
 8009100:	200082cd 	.word	0x200082cd
 8009104:	20008294 	.word	0x20008294
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	429a      	cmp	r2, r3
 8009110:	d104      	bne.n	800911c <tcp_process+0x5d8>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	60da      	str	r2, [r3, #12]
 800911a:	e005      	b.n	8009128 <tcp_process+0x5e4>
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1ef      	bne.n	8009108 <tcp_process+0x5c4>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	60da      	str	r2, [r3, #12]
 800912e:	4b77      	ldr	r3, [pc, #476]	@ (800930c <tcp_process+0x7c8>)
 8009130:	2201      	movs	r2, #1
 8009132:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	220a      	movs	r2, #10
 8009138:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800913a:	4b75      	ldr	r3, [pc, #468]	@ (8009310 <tcp_process+0x7cc>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60da      	str	r2, [r3, #12]
 8009142:	4a73      	ldr	r2, [pc, #460]	@ (8009310 <tcp_process+0x7cc>)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	f002 fcf4 	bl	800bb34 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800914c:	e0d2      	b.n	80092f4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	8b5b      	ldrh	r3, [r3, #26]
 8009152:	f043 0302 	orr.w	r3, r3, #2
 8009156:	b29a      	uxth	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2208      	movs	r2, #8
 8009160:	751a      	strb	r2, [r3, #20]
      break;
 8009162:	e0c7      	b.n	80092f4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009164:	4b6b      	ldr	r3, [pc, #428]	@ (8009314 <tcp_process+0x7d0>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	f003 0310 	and.w	r3, r3, #16
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 80c1 	beq.w	80092f4 <tcp_process+0x7b0>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009176:	4b68      	ldr	r3, [pc, #416]	@ (8009318 <tcp_process+0x7d4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	f040 80ba 	bne.w	80092f4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009184:	2b00      	cmp	r3, #0
 8009186:	f040 80b5 	bne.w	80092f4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2206      	movs	r2, #6
 800918e:	751a      	strb	r2, [r3, #20]
      break;
 8009190:	e0b0      	b.n	80092f4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f9ca 	bl	800952c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009198:	4b60      	ldr	r3, [pc, #384]	@ (800931c <tcp_process+0x7d8>)
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	f003 0320 	and.w	r3, r3, #32
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 80a9 	beq.w	80092f8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	8b5b      	ldrh	r3, [r3, #26]
 80091aa:	f043 0302 	orr.w	r3, r3, #2
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7fe fd39 	bl	8007c2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80091ba:	4b59      	ldr	r3, [pc, #356]	@ (8009320 <tcp_process+0x7dc>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d105      	bne.n	80091d0 <tcp_process+0x68c>
 80091c4:	4b56      	ldr	r3, [pc, #344]	@ (8009320 <tcp_process+0x7dc>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	4a55      	ldr	r2, [pc, #340]	@ (8009320 <tcp_process+0x7dc>)
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e013      	b.n	80091f8 <tcp_process+0x6b4>
 80091d0:	4b53      	ldr	r3, [pc, #332]	@ (8009320 <tcp_process+0x7dc>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	613b      	str	r3, [r7, #16]
 80091d6:	e00c      	b.n	80091f2 <tcp_process+0x6ae>
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d104      	bne.n	80091ec <tcp_process+0x6a8>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68da      	ldr	r2, [r3, #12]
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	60da      	str	r2, [r3, #12]
 80091ea:	e005      	b.n	80091f8 <tcp_process+0x6b4>
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	613b      	str	r3, [r7, #16]
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1ef      	bne.n	80091d8 <tcp_process+0x694>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	60da      	str	r2, [r3, #12]
 80091fe:	4b43      	ldr	r3, [pc, #268]	@ (800930c <tcp_process+0x7c8>)
 8009200:	2201      	movs	r2, #1
 8009202:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	220a      	movs	r2, #10
 8009208:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800920a:	4b41      	ldr	r3, [pc, #260]	@ (8009310 <tcp_process+0x7cc>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	60da      	str	r2, [r3, #12]
 8009212:	4a3f      	ldr	r2, [pc, #252]	@ (8009310 <tcp_process+0x7cc>)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	f002 fc8c 	bl	800bb34 <tcp_timer_needed>
      }
      break;
 800921c:	e06c      	b.n	80092f8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f984 	bl	800952c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009224:	4b3b      	ldr	r3, [pc, #236]	@ (8009314 <tcp_process+0x7d0>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	f003 0310 	and.w	r3, r3, #16
 800922c:	2b00      	cmp	r3, #0
 800922e:	d065      	beq.n	80092fc <tcp_process+0x7b8>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009234:	4b38      	ldr	r3, [pc, #224]	@ (8009318 <tcp_process+0x7d4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	429a      	cmp	r2, r3
 800923a:	d15f      	bne.n	80092fc <tcp_process+0x7b8>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009240:	2b00      	cmp	r3, #0
 8009242:	d15b      	bne.n	80092fc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7fe fcf1 	bl	8007c2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800924a:	4b35      	ldr	r3, [pc, #212]	@ (8009320 <tcp_process+0x7dc>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	429a      	cmp	r2, r3
 8009252:	d105      	bne.n	8009260 <tcp_process+0x71c>
 8009254:	4b32      	ldr	r3, [pc, #200]	@ (8009320 <tcp_process+0x7dc>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	4a31      	ldr	r2, [pc, #196]	@ (8009320 <tcp_process+0x7dc>)
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	e013      	b.n	8009288 <tcp_process+0x744>
 8009260:	4b2f      	ldr	r3, [pc, #188]	@ (8009320 <tcp_process+0x7dc>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	e00c      	b.n	8009282 <tcp_process+0x73e>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	429a      	cmp	r2, r3
 8009270:	d104      	bne.n	800927c <tcp_process+0x738>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	60da      	str	r2, [r3, #12]
 800927a:	e005      	b.n	8009288 <tcp_process+0x744>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1ef      	bne.n	8009268 <tcp_process+0x724>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	60da      	str	r2, [r3, #12]
 800928e:	4b1f      	ldr	r3, [pc, #124]	@ (800930c <tcp_process+0x7c8>)
 8009290:	2201      	movs	r2, #1
 8009292:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	220a      	movs	r2, #10
 8009298:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800929a:	4b1d      	ldr	r3, [pc, #116]	@ (8009310 <tcp_process+0x7cc>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	60da      	str	r2, [r3, #12]
 80092a2:	4a1b      	ldr	r2, [pc, #108]	@ (8009310 <tcp_process+0x7cc>)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	f002 fc44 	bl	800bb34 <tcp_timer_needed>
      }
      break;
 80092ac:	e026      	b.n	80092fc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f93c 	bl	800952c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80092b4:	4b17      	ldr	r3, [pc, #92]	@ (8009314 <tcp_process+0x7d0>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	f003 0310 	and.w	r3, r3, #16
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01f      	beq.n	8009300 <tcp_process+0x7bc>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092c4:	4b14      	ldr	r3, [pc, #80]	@ (8009318 <tcp_process+0x7d4>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d119      	bne.n	8009300 <tcp_process+0x7bc>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d115      	bne.n	8009300 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80092d4:	4b11      	ldr	r3, [pc, #68]	@ (800931c <tcp_process+0x7d8>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	f043 0310 	orr.w	r3, r3, #16
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	4b0f      	ldr	r3, [pc, #60]	@ (800931c <tcp_process+0x7d8>)
 80092e0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80092e2:	e00d      	b.n	8009300 <tcp_process+0x7bc>
    default:
      break;
 80092e4:	bf00      	nop
 80092e6:	e00c      	b.n	8009302 <tcp_process+0x7be>
      break;
 80092e8:	bf00      	nop
 80092ea:	e00a      	b.n	8009302 <tcp_process+0x7be>
      break;
 80092ec:	bf00      	nop
 80092ee:	e008      	b.n	8009302 <tcp_process+0x7be>
      break;
 80092f0:	bf00      	nop
 80092f2:	e006      	b.n	8009302 <tcp_process+0x7be>
      break;
 80092f4:	bf00      	nop
 80092f6:	e004      	b.n	8009302 <tcp_process+0x7be>
      break;
 80092f8:	bf00      	nop
 80092fa:	e002      	b.n	8009302 <tcp_process+0x7be>
      break;
 80092fc:	bf00      	nop
 80092fe:	e000      	b.n	8009302 <tcp_process+0x7be>
      break;
 8009300:	bf00      	nop
  }
  return ERR_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3724      	adds	r7, #36	@ 0x24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd90      	pop	{r4, r7, pc}
 800930c:	2000829c 	.word	0x2000829c
 8009310:	20008298 	.word	0x20008298
 8009314:	200082cc 	.word	0x200082cc
 8009318:	200082c4 	.word	0x200082c4
 800931c:	200082cd 	.word	0x200082cd
 8009320:	20008294 	.word	0x20008294

08009324 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009324:	b590      	push	{r4, r7, lr}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d106      	bne.n	8009342 <tcp_oos_insert_segment+0x1e>
 8009334:	4b3b      	ldr	r3, [pc, #236]	@ (8009424 <tcp_oos_insert_segment+0x100>)
 8009336:	f240 421f 	movw	r2, #1055	@ 0x41f
 800933a:	493b      	ldr	r1, [pc, #236]	@ (8009428 <tcp_oos_insert_segment+0x104>)
 800933c:	483b      	ldr	r0, [pc, #236]	@ (800942c <tcp_oos_insert_segment+0x108>)
 800933e:	f005 fd93 	bl	800ee68 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	899b      	ldrh	r3, [r3, #12]
 8009348:	b29b      	uxth	r3, r3
 800934a:	4618      	mov	r0, r3
 800934c:	f7fb fc9e 	bl	8004c8c <lwip_htons>
 8009350:	4603      	mov	r3, r0
 8009352:	b2db      	uxtb	r3, r3
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	2b00      	cmp	r3, #0
 800935a:	d028      	beq.n	80093ae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800935c:	6838      	ldr	r0, [r7, #0]
 800935e:	f7fe fa63 	bl	8007828 <tcp_segs_free>
    next = NULL;
 8009362:	2300      	movs	r3, #0
 8009364:	603b      	str	r3, [r7, #0]
 8009366:	e056      	b.n	8009416 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	899b      	ldrh	r3, [r3, #12]
 800936e:	b29b      	uxth	r3, r3
 8009370:	4618      	mov	r0, r3
 8009372:	f7fb fc8b 	bl	8004c8c <lwip_htons>
 8009376:	4603      	mov	r3, r0
 8009378:	b2db      	uxtb	r3, r3
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00d      	beq.n	800939e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	899b      	ldrh	r3, [r3, #12]
 8009388:	b29c      	uxth	r4, r3
 800938a:	2001      	movs	r0, #1
 800938c:	f7fb fc7e 	bl	8004c8c <lwip_htons>
 8009390:	4603      	mov	r3, r0
 8009392:	461a      	mov	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	4322      	orrs	r2, r4
 800939a:	b292      	uxth	r2, r2
 800939c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f7fe fa52 	bl	8007852 <tcp_seg_free>
    while (next &&
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00e      	beq.n	80093d2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	891b      	ldrh	r3, [r3, #8]
 80093b8:	461a      	mov	r2, r3
 80093ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009430 <tcp_oos_insert_segment+0x10c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	441a      	add	r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	8909      	ldrh	r1, [r1, #8]
 80093ca:	440b      	add	r3, r1
 80093cc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	daca      	bge.n	8009368 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01e      	beq.n	8009416 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	891b      	ldrh	r3, [r3, #8]
 80093dc:	461a      	mov	r2, r3
 80093de:	4b14      	ldr	r3, [pc, #80]	@ (8009430 <tcp_oos_insert_segment+0x10c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	441a      	add	r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	1ad3      	subs	r3, r2, r3
    if (next &&
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dd12      	ble.n	8009416 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009430 <tcp_oos_insert_segment+0x10c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	b29a      	uxth	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	891b      	ldrh	r3, [r3, #8]
 800940e:	4619      	mov	r1, r3
 8009410:	4610      	mov	r0, r2
 8009412:	f7fc fe13 	bl	800603c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	601a      	str	r2, [r3, #0]
}
 800941c:	bf00      	nop
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	bd90      	pop	{r4, r7, pc}
 8009424:	08010ee0 	.word	0x08010ee0
 8009428:	080111a0 	.word	0x080111a0
 800942c:	08010f2c 	.word	0x08010f2c
 8009430:	200082c0 	.word	0x200082c0

08009434 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009434:	b5b0      	push	{r4, r5, r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009442:	e03e      	b.n	80094c2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	4618      	mov	r0, r3
 8009454:	f7fd f800 	bl	8006458 <pbuf_clen>
 8009458:	4603      	mov	r3, r0
 800945a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009462:	8a7a      	ldrh	r2, [r7, #18]
 8009464:	429a      	cmp	r2, r3
 8009466:	d906      	bls.n	8009476 <tcp_free_acked_segments+0x42>
 8009468:	4b2a      	ldr	r3, [pc, #168]	@ (8009514 <tcp_free_acked_segments+0xe0>)
 800946a:	f240 4257 	movw	r2, #1111	@ 0x457
 800946e:	492a      	ldr	r1, [pc, #168]	@ (8009518 <tcp_free_acked_segments+0xe4>)
 8009470:	482a      	ldr	r0, [pc, #168]	@ (800951c <tcp_free_acked_segments+0xe8>)
 8009472:	f005 fcf9 	bl	800ee68 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800947c:	8a7b      	ldrh	r3, [r7, #18]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	b29a      	uxth	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	891a      	ldrh	r2, [r3, #8]
 800948c:	4b24      	ldr	r3, [pc, #144]	@ (8009520 <tcp_free_acked_segments+0xec>)
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	4413      	add	r3, r2
 8009492:	b29a      	uxth	r2, r3
 8009494:	4b22      	ldr	r3, [pc, #136]	@ (8009520 <tcp_free_acked_segments+0xec>)
 8009496:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009498:	6978      	ldr	r0, [r7, #20]
 800949a:	f7fe f9da 	bl	8007852 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00c      	beq.n	80094c2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d109      	bne.n	80094c2 <tcp_free_acked_segments+0x8e>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d106      	bne.n	80094c2 <tcp_free_acked_segments+0x8e>
 80094b4:	4b17      	ldr	r3, [pc, #92]	@ (8009514 <tcp_free_acked_segments+0xe0>)
 80094b6:	f240 4261 	movw	r2, #1121	@ 0x461
 80094ba:	491a      	ldr	r1, [pc, #104]	@ (8009524 <tcp_free_acked_segments+0xf0>)
 80094bc:	4817      	ldr	r0, [pc, #92]	@ (800951c <tcp_free_acked_segments+0xe8>)
 80094be:	f005 fcd3 	bl	800ee68 <iprintf>
  while (seg_list != NULL &&
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d020      	beq.n	800950a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fb fbf2 	bl	8004cb8 <lwip_htonl>
 80094d4:	4604      	mov	r4, r0
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	891b      	ldrh	r3, [r3, #8]
 80094da:	461d      	mov	r5, r3
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	899b      	ldrh	r3, [r3, #12]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fb fbd1 	bl	8004c8c <lwip_htons>
 80094ea:	4603      	mov	r3, r0
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	f003 0303 	and.w	r3, r3, #3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <tcp_free_acked_segments+0xc6>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e000      	b.n	80094fc <tcp_free_acked_segments+0xc8>
 80094fa:	2300      	movs	r3, #0
 80094fc:	442b      	add	r3, r5
 80094fe:	18e2      	adds	r2, r4, r3
 8009500:	4b09      	ldr	r3, [pc, #36]	@ (8009528 <tcp_free_acked_segments+0xf4>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009506:	2b00      	cmp	r3, #0
 8009508:	dd9c      	ble.n	8009444 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800950a:	68bb      	ldr	r3, [r7, #8]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bdb0      	pop	{r4, r5, r7, pc}
 8009514:	08010ee0 	.word	0x08010ee0
 8009518:	080111c8 	.word	0x080111c8
 800951c:	08010f2c 	.word	0x08010f2c
 8009520:	200082c8 	.word	0x200082c8
 8009524:	080111f0 	.word	0x080111f0
 8009528:	200082c4 	.word	0x200082c4

0800952c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800952c:	b5b0      	push	{r4, r5, r7, lr}
 800952e:	b094      	sub	sp, #80	@ 0x50
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009534:	2300      	movs	r3, #0
 8009536:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d106      	bne.n	800954c <tcp_receive+0x20>
 800953e:	4b91      	ldr	r3, [pc, #580]	@ (8009784 <tcp_receive+0x258>)
 8009540:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009544:	4990      	ldr	r1, [pc, #576]	@ (8009788 <tcp_receive+0x25c>)
 8009546:	4891      	ldr	r0, [pc, #580]	@ (800978c <tcp_receive+0x260>)
 8009548:	f005 fc8e 	bl	800ee68 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	7d1b      	ldrb	r3, [r3, #20]
 8009550:	2b03      	cmp	r3, #3
 8009552:	d806      	bhi.n	8009562 <tcp_receive+0x36>
 8009554:	4b8b      	ldr	r3, [pc, #556]	@ (8009784 <tcp_receive+0x258>)
 8009556:	f240 427c 	movw	r2, #1148	@ 0x47c
 800955a:	498d      	ldr	r1, [pc, #564]	@ (8009790 <tcp_receive+0x264>)
 800955c:	488b      	ldr	r0, [pc, #556]	@ (800978c <tcp_receive+0x260>)
 800955e:	f005 fc83 	bl	800ee68 <iprintf>

  if (flags & TCP_ACK) {
 8009562:	4b8c      	ldr	r3, [pc, #560]	@ (8009794 <tcp_receive+0x268>)
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	f003 0310 	and.w	r3, r3, #16
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 8264 	beq.w	8009a38 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009576:	461a      	mov	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800957c:	4413      	add	r3, r2
 800957e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009584:	4b84      	ldr	r3, [pc, #528]	@ (8009798 <tcp_receive+0x26c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	db1b      	blt.n	80095c6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009592:	4b81      	ldr	r3, [pc, #516]	@ (8009798 <tcp_receive+0x26c>)
 8009594:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009596:	429a      	cmp	r2, r3
 8009598:	d106      	bne.n	80095a8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800959e:	4b7f      	ldr	r3, [pc, #508]	@ (800979c <tcp_receive+0x270>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	db0e      	blt.n	80095c6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80095ac:	4b7b      	ldr	r3, [pc, #492]	@ (800979c <tcp_receive+0x270>)
 80095ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d125      	bne.n	8009600 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80095b4:	4b7a      	ldr	r3, [pc, #488]	@ (80097a0 <tcp_receive+0x274>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	89db      	ldrh	r3, [r3, #14]
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d91c      	bls.n	8009600 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80095c6:	4b76      	ldr	r3, [pc, #472]	@ (80097a0 <tcp_receive+0x274>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	89db      	ldrh	r3, [r3, #14]
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d205      	bcs.n	80095f0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80095f0:	4b69      	ldr	r3, [pc, #420]	@ (8009798 <tcp_receive+0x26c>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80095f8:	4b68      	ldr	r3, [pc, #416]	@ (800979c <tcp_receive+0x270>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009600:	4b66      	ldr	r3, [pc, #408]	@ (800979c <tcp_receive+0x270>)
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	dc58      	bgt.n	80096c0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800960e:	4b65      	ldr	r3, [pc, #404]	@ (80097a4 <tcp_receive+0x278>)
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d14b      	bne.n	80096ae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009620:	4413      	add	r3, r2
 8009622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009624:	429a      	cmp	r2, r3
 8009626:	d142      	bne.n	80096ae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800962e:	2b00      	cmp	r3, #0
 8009630:	db3d      	blt.n	80096ae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009636:	4b59      	ldr	r3, [pc, #356]	@ (800979c <tcp_receive+0x270>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d137      	bne.n	80096ae <tcp_receive+0x182>
              found_dupack = 1;
 800963e:	2301      	movs	r3, #1
 8009640:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009648:	2bff      	cmp	r3, #255	@ 0xff
 800964a:	d007      	beq.n	800965c <tcp_receive+0x130>
                ++pcb->dupacks;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009652:	3301      	adds	r3, #1
 8009654:	b2da      	uxtb	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009662:	2b03      	cmp	r3, #3
 8009664:	d91b      	bls.n	800969e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009670:	4413      	add	r3, r2
 8009672:	b29a      	uxth	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800967a:	429a      	cmp	r2, r3
 800967c:	d30a      	bcc.n	8009694 <tcp_receive+0x168>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009688:	4413      	add	r3, r2
 800968a:	b29a      	uxth	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009692:	e004      	b.n	800969e <tcp_receive+0x172>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800969a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d902      	bls.n	80096ae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f001 fee7 	bl	800b47c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80096ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f040 8161 	bne.w	8009978 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80096be:	e15b      	b.n	8009978 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80096c0:	4b36      	ldr	r3, [pc, #216]	@ (800979c <tcp_receive+0x270>)
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	3b01      	subs	r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f2c0 814e 	blt.w	800996e <tcp_receive+0x442>
 80096d2:	4b32      	ldr	r3, [pc, #200]	@ (800979c <tcp_receive+0x270>)
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f300 8146 	bgt.w	800996e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	8b5b      	ldrh	r3, [r3, #26]
 80096e6:	f003 0304 	and.w	r3, r3, #4
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d010      	beq.n	8009710 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	8b5b      	ldrh	r3, [r3, #26]
 80096f2:	f023 0304 	bic.w	r3, r3, #4
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800971e:	10db      	asrs	r3, r3, #3
 8009720:	b21b      	sxth	r3, r3
 8009722:	b29a      	uxth	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800972a:	b29b      	uxth	r3, r3
 800972c:	4413      	add	r3, r2
 800972e:	b29b      	uxth	r3, r3
 8009730:	b21a      	sxth	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009738:	4b18      	ldr	r3, [pc, #96]	@ (800979c <tcp_receive+0x270>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	b29a      	uxth	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009742:	b29b      	uxth	r3, r3
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8009750:	4b12      	ldr	r3, [pc, #72]	@ (800979c <tcp_receive+0x270>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7d1b      	ldrb	r3, [r3, #20]
 800975c:	2b03      	cmp	r3, #3
 800975e:	f240 8097 	bls.w	8009890 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800976e:	429a      	cmp	r2, r3
 8009770:	d245      	bcs.n	80097fe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	8b5b      	ldrh	r3, [r3, #26]
 8009776:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800977a:	2b00      	cmp	r3, #0
 800977c:	d014      	beq.n	80097a8 <tcp_receive+0x27c>
 800977e:	2301      	movs	r3, #1
 8009780:	e013      	b.n	80097aa <tcp_receive+0x27e>
 8009782:	bf00      	nop
 8009784:	08010ee0 	.word	0x08010ee0
 8009788:	08011210 	.word	0x08011210
 800978c:	08010f2c 	.word	0x08010f2c
 8009790:	0801122c 	.word	0x0801122c
 8009794:	200082cc 	.word	0x200082cc
 8009798:	200082c0 	.word	0x200082c0
 800979c:	200082c4 	.word	0x200082c4
 80097a0:	200082b0 	.word	0x200082b0
 80097a4:	200082ca 	.word	0x200082ca
 80097a8:	2302      	movs	r3, #2
 80097aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80097ae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80097b8:	fb12 f303 	smulbb	r3, r2, r3
 80097bc:	b29b      	uxth	r3, r3
 80097be:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80097c0:	4293      	cmp	r3, r2
 80097c2:	bf28      	it	cs
 80097c4:	4613      	movcs	r3, r2
 80097c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80097ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80097d0:	4413      	add	r3, r2
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80097da:	429a      	cmp	r2, r3
 80097dc:	d309      	bcc.n	80097f2 <tcp_receive+0x2c6>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80097e4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80097e6:	4413      	add	r3, r2
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80097f0:	e04e      	b.n	8009890 <tcp_receive+0x364>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80097f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80097fc:	e048      	b.n	8009890 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009804:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009806:	4413      	add	r3, r2
 8009808:	b29a      	uxth	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009810:	429a      	cmp	r2, r3
 8009812:	d309      	bcc.n	8009828 <tcp_receive+0x2fc>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800981a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800981c:	4413      	add	r3, r2
 800981e:	b29a      	uxth	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009826:	e004      	b.n	8009832 <tcp_receive+0x306>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800982e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800983e:	429a      	cmp	r2, r3
 8009840:	d326      	bcc.n	8009890 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	b29a      	uxth	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009862:	4413      	add	r3, r2
 8009864:	b29a      	uxth	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800986c:	429a      	cmp	r2, r3
 800986e:	d30a      	bcc.n	8009886 <tcp_receive+0x35a>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800987a:	4413      	add	r3, r2
 800987c:	b29a      	uxth	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009884:	e004      	b.n	8009890 <tcp_receive+0x364>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800988c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009898:	4a98      	ldr	r2, [pc, #608]	@ (8009afc <tcp_receive+0x5d0>)
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff fdca 	bl	8009434 <tcp_free_acked_segments>
 80098a0:	4602      	mov	r2, r0
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ae:	4a94      	ldr	r2, [pc, #592]	@ (8009b00 <tcp_receive+0x5d4>)
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff fdbf 	bl	8009434 <tcp_free_acked_segments>
 80098b6:	4602      	mov	r2, r0
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d104      	bne.n	80098ce <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80098ca:	861a      	strh	r2, [r3, #48]	@ 0x30
 80098cc:	e002      	b.n	80098d4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d103      	bne.n	80098ea <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80098f0:	4b84      	ldr	r3, [pc, #528]	@ (8009b04 <tcp_receive+0x5d8>)
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	4413      	add	r3, r2
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	8b5b      	ldrh	r3, [r3, #26]
 8009902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009906:	2b00      	cmp	r3, #0
 8009908:	d035      	beq.n	8009976 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800990e:	2b00      	cmp	r3, #0
 8009910:	d118      	bne.n	8009944 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00c      	beq.n	8009934 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	4618      	mov	r0, r3
 8009928:	f7fb f9c6 	bl	8004cb8 <lwip_htonl>
 800992c:	4603      	mov	r3, r0
 800992e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009930:	2b00      	cmp	r3, #0
 8009932:	dc20      	bgt.n	8009976 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	8b5b      	ldrh	r3, [r3, #26]
 8009938:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800993c:	b29a      	uxth	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009942:	e018      	b.n	8009976 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	4618      	mov	r0, r3
 8009952:	f7fb f9b1 	bl	8004cb8 <lwip_htonl>
 8009956:	4603      	mov	r3, r0
 8009958:	1ae3      	subs	r3, r4, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	dc0b      	bgt.n	8009976 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	8b5b      	ldrh	r3, [r3, #26]
 8009962:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009966:	b29a      	uxth	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800996c:	e003      	b.n	8009976 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f001 ff70 	bl	800b854 <tcp_send_empty_ack>
 8009974:	e000      	b.n	8009978 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009976:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800997c:	2b00      	cmp	r3, #0
 800997e:	d05b      	beq.n	8009a38 <tcp_receive+0x50c>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009984:	4b60      	ldr	r3, [pc, #384]	@ (8009b08 <tcp_receive+0x5dc>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	da54      	bge.n	8009a38 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800998e:	4b5f      	ldr	r3, [pc, #380]	@ (8009b0c <tcp_receive+0x5e0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009998:	b29b      	uxth	r3, r3
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	b29b      	uxth	r3, r3
 800999e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80099a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80099ac:	10db      	asrs	r3, r3, #3
 80099ae:	b21b      	sxth	r3, r3
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80099c6:	4413      	add	r3, r2
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	b21a      	sxth	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80099d0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	da05      	bge.n	80099e4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80099d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80099dc:	425b      	negs	r3, r3
 80099de:	b29b      	uxth	r3, r3
 80099e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80099e4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80099ee:	109b      	asrs	r3, r3, #2
 80099f0:	b21b      	sxth	r3, r3
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009a08:	4413      	add	r3, r2
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	b21a      	sxth	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009a18:	10db      	asrs	r3, r3, #3
 8009a1a:	b21b      	sxth	r3, r3
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	4413      	add	r3, r2
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	b21a      	sxth	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009a38:	4b35      	ldr	r3, [pc, #212]	@ (8009b10 <tcp_receive+0x5e4>)
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 84df 	beq.w	800a400 <tcp_receive+0xed4>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	7d1b      	ldrb	r3, [r3, #20]
 8009a46:	2b06      	cmp	r3, #6
 8009a48:	f200 84da 	bhi.w	800a400 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a50:	4b30      	ldr	r3, [pc, #192]	@ (8009b14 <tcp_receive+0x5e8>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	3b01      	subs	r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f2c0 808f 	blt.w	8009b7c <tcp_receive+0x650>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a62:	4b2b      	ldr	r3, [pc, #172]	@ (8009b10 <tcp_receive+0x5e4>)
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	4619      	mov	r1, r3
 8009a68:	4b2a      	ldr	r3, [pc, #168]	@ (8009b14 <tcp_receive+0x5e8>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	440b      	add	r3, r1
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	3301      	adds	r3, #1
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f300 8082 	bgt.w	8009b7c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009a78:	4b27      	ldr	r3, [pc, #156]	@ (8009b18 <tcp_receive+0x5ec>)
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a82:	4b24      	ldr	r3, [pc, #144]	@ (8009b14 <tcp_receive+0x5e8>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009a8a:	4b23      	ldr	r3, [pc, #140]	@ (8009b18 <tcp_receive+0x5ec>)
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d106      	bne.n	8009aa0 <tcp_receive+0x574>
 8009a92:	4b22      	ldr	r3, [pc, #136]	@ (8009b1c <tcp_receive+0x5f0>)
 8009a94:	f240 5294 	movw	r2, #1428	@ 0x594
 8009a98:	4921      	ldr	r1, [pc, #132]	@ (8009b20 <tcp_receive+0x5f4>)
 8009a9a:	4822      	ldr	r0, [pc, #136]	@ (8009b24 <tcp_receive+0x5f8>)
 8009a9c:	f005 f9e4 	bl	800ee68 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d906      	bls.n	8009ab8 <tcp_receive+0x58c>
 8009aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8009b1c <tcp_receive+0x5f0>)
 8009aac:	f240 5295 	movw	r2, #1429	@ 0x595
 8009ab0:	491d      	ldr	r1, [pc, #116]	@ (8009b28 <tcp_receive+0x5fc>)
 8009ab2:	481c      	ldr	r0, [pc, #112]	@ (8009b24 <tcp_receive+0x5f8>)
 8009ab4:	f005 f9d8 	bl	800ee68 <iprintf>
      off = (u16_t)off32;
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009abe:	4b16      	ldr	r3, [pc, #88]	@ (8009b18 <tcp_receive+0x5ec>)
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	891b      	ldrh	r3, [r3, #8]
 8009ac4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d906      	bls.n	8009ada <tcp_receive+0x5ae>
 8009acc:	4b13      	ldr	r3, [pc, #76]	@ (8009b1c <tcp_receive+0x5f0>)
 8009ace:	f240 5297 	movw	r2, #1431	@ 0x597
 8009ad2:	4916      	ldr	r1, [pc, #88]	@ (8009b2c <tcp_receive+0x600>)
 8009ad4:	4813      	ldr	r0, [pc, #76]	@ (8009b24 <tcp_receive+0x5f8>)
 8009ad6:	f005 f9c7 	bl	800ee68 <iprintf>
      inseg.len -= off;
 8009ada:	4b0f      	ldr	r3, [pc, #60]	@ (8009b18 <tcp_receive+0x5ec>)
 8009adc:	891a      	ldrh	r2, [r3, #8]
 8009ade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8009b18 <tcp_receive+0x5ec>)
 8009ae8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009aea:	4b0b      	ldr	r3, [pc, #44]	@ (8009b18 <tcp_receive+0x5ec>)
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	891a      	ldrh	r2, [r3, #8]
 8009af0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8009af8:	e02a      	b.n	8009b50 <tcp_receive+0x624>
 8009afa:	bf00      	nop
 8009afc:	08011248 	.word	0x08011248
 8009b00:	08011250 	.word	0x08011250
 8009b04:	200082c8 	.word	0x200082c8
 8009b08:	200082c4 	.word	0x200082c4
 8009b0c:	20008288 	.word	0x20008288
 8009b10:	200082ca 	.word	0x200082ca
 8009b14:	200082c0 	.word	0x200082c0
 8009b18:	200082a0 	.word	0x200082a0
 8009b1c:	08010ee0 	.word	0x08010ee0
 8009b20:	08011258 	.word	0x08011258
 8009b24:	08010f2c 	.word	0x08010f2c
 8009b28:	08011268 	.word	0x08011268
 8009b2c:	08011278 	.word	0x08011278
        off -= p->len;
 8009b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b32:	895b      	ldrh	r3, [r3, #10]
 8009b34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b40:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009b42:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b46:	2200      	movs	r2, #0
 8009b48:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8009b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b52:	895b      	ldrh	r3, [r3, #10]
 8009b54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d8e9      	bhi.n	8009b30 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009b5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009b60:	4619      	mov	r1, r3
 8009b62:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009b64:	f7fc fb6a 	bl	800623c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6c:	4a90      	ldr	r2, [pc, #576]	@ (8009db0 <tcp_receive+0x884>)
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	4b90      	ldr	r3, [pc, #576]	@ (8009db4 <tcp_receive+0x888>)
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	4a8e      	ldr	r2, [pc, #568]	@ (8009db0 <tcp_receive+0x884>)
 8009b76:	6812      	ldr	r2, [r2, #0]
 8009b78:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009b7a:	e00d      	b.n	8009b98 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8009db0 <tcp_receive+0x884>)
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	da06      	bge.n	8009b98 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	8b5b      	ldrh	r3, [r3, #26]
 8009b8e:	f043 0302 	orr.w	r3, r3, #2
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b98:	4b85      	ldr	r3, [pc, #532]	@ (8009db0 <tcp_receive+0x884>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f2c0 8427 	blt.w	800a3f6 <tcp_receive+0xeca>
 8009ba8:	4b81      	ldr	r3, [pc, #516]	@ (8009db0 <tcp_receive+0x884>)
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb0:	6879      	ldr	r1, [r7, #4]
 8009bb2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009bb4:	440b      	add	r3, r1
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	3301      	adds	r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f300 841b 	bgt.w	800a3f6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bc4:	4b7a      	ldr	r3, [pc, #488]	@ (8009db0 <tcp_receive+0x884>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	f040 8298 	bne.w	800a0fe <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009bce:	4b79      	ldr	r3, [pc, #484]	@ (8009db4 <tcp_receive+0x888>)
 8009bd0:	891c      	ldrh	r4, [r3, #8]
 8009bd2:	4b78      	ldr	r3, [pc, #480]	@ (8009db4 <tcp_receive+0x888>)
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	899b      	ldrh	r3, [r3, #12]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fb f856 	bl	8004c8c <lwip_htons>
 8009be0:	4603      	mov	r3, r0
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	f003 0303 	and.w	r3, r3, #3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <tcp_receive+0x6c4>
 8009bec:	2301      	movs	r3, #1
 8009bee:	e000      	b.n	8009bf2 <tcp_receive+0x6c6>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4423      	add	r3, r4
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	4b70      	ldr	r3, [pc, #448]	@ (8009db8 <tcp_receive+0x88c>)
 8009bf8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009bfe:	4b6e      	ldr	r3, [pc, #440]	@ (8009db8 <tcp_receive+0x88c>)
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d274      	bcs.n	8009cf0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009c06:	4b6b      	ldr	r3, [pc, #428]	@ (8009db4 <tcp_receive+0x888>)
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	899b      	ldrh	r3, [r3, #12]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fb f83c 	bl	8004c8c <lwip_htons>
 8009c14:	4603      	mov	r3, r0
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d01e      	beq.n	8009c5e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009c20:	4b64      	ldr	r3, [pc, #400]	@ (8009db4 <tcp_receive+0x888>)
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	899b      	ldrh	r3, [r3, #12]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	b21b      	sxth	r3, r3
 8009c2a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009c2e:	b21c      	sxth	r4, r3
 8009c30:	4b60      	ldr	r3, [pc, #384]	@ (8009db4 <tcp_receive+0x888>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	899b      	ldrh	r3, [r3, #12]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fb f827 	bl	8004c8c <lwip_htons>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fb f81f 	bl	8004c8c <lwip_htons>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	b21b      	sxth	r3, r3
 8009c52:	4323      	orrs	r3, r4
 8009c54:	b21a      	sxth	r2, r3
 8009c56:	4b57      	ldr	r3, [pc, #348]	@ (8009db4 <tcp_receive+0x888>)
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	b292      	uxth	r2, r2
 8009c5c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009c62:	4b54      	ldr	r3, [pc, #336]	@ (8009db4 <tcp_receive+0x888>)
 8009c64:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009c66:	4b53      	ldr	r3, [pc, #332]	@ (8009db4 <tcp_receive+0x888>)
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	899b      	ldrh	r3, [r3, #12]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fb f80c 	bl	8004c8c <lwip_htons>
 8009c74:	4603      	mov	r3, r0
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	f003 0302 	and.w	r3, r3, #2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d005      	beq.n	8009c8c <tcp_receive+0x760>
            inseg.len -= 1;
 8009c80:	4b4c      	ldr	r3, [pc, #304]	@ (8009db4 <tcp_receive+0x888>)
 8009c82:	891b      	ldrh	r3, [r3, #8]
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	4b4a      	ldr	r3, [pc, #296]	@ (8009db4 <tcp_receive+0x888>)
 8009c8a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009c8c:	4b49      	ldr	r3, [pc, #292]	@ (8009db4 <tcp_receive+0x888>)
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	4a48      	ldr	r2, [pc, #288]	@ (8009db4 <tcp_receive+0x888>)
 8009c92:	8912      	ldrh	r2, [r2, #8]
 8009c94:	4611      	mov	r1, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fc f9d0 	bl	800603c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009c9c:	4b45      	ldr	r3, [pc, #276]	@ (8009db4 <tcp_receive+0x888>)
 8009c9e:	891c      	ldrh	r4, [r3, #8]
 8009ca0:	4b44      	ldr	r3, [pc, #272]	@ (8009db4 <tcp_receive+0x888>)
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	899b      	ldrh	r3, [r3, #12]
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fa ffef 	bl	8004c8c <lwip_htons>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	f003 0303 	and.w	r3, r3, #3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <tcp_receive+0x792>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e000      	b.n	8009cc0 <tcp_receive+0x794>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4423      	add	r3, r4
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8009db8 <tcp_receive+0x88c>)
 8009cc6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8009db8 <tcp_receive+0x88c>)
 8009cca:	881b      	ldrh	r3, [r3, #0]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4b38      	ldr	r3, [pc, #224]	@ (8009db0 <tcp_receive+0x884>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	441a      	add	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd8:	6879      	ldr	r1, [r7, #4]
 8009cda:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009cdc:	440b      	add	r3, r1
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d006      	beq.n	8009cf0 <tcp_receive+0x7c4>
 8009ce2:	4b36      	ldr	r3, [pc, #216]	@ (8009dbc <tcp_receive+0x890>)
 8009ce4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8009ce8:	4935      	ldr	r1, [pc, #212]	@ (8009dc0 <tcp_receive+0x894>)
 8009cea:	4836      	ldr	r0, [pc, #216]	@ (8009dc4 <tcp_receive+0x898>)
 8009cec:	f005 f8bc 	bl	800ee68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 80e6 	beq.w	8009ec6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8009db4 <tcp_receive+0x888>)
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	899b      	ldrh	r3, [r3, #12]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fa ffc2 	bl	8004c8c <lwip_htons>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d010      	beq.n	8009d36 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009d14:	e00a      	b.n	8009d2c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d1a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f7fd fd93 	bl	8007852 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1f0      	bne.n	8009d16 <tcp_receive+0x7ea>
 8009d34:	e0c7      	b.n	8009ec6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009d3c:	e051      	b.n	8009de2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	899b      	ldrh	r3, [r3, #12]
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fa ffa0 	bl	8004c8c <lwip_htons>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d03c      	beq.n	8009dd2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009d58:	4b16      	ldr	r3, [pc, #88]	@ (8009db4 <tcp_receive+0x888>)
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	899b      	ldrh	r3, [r3, #12]
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fa ff93 	bl	8004c8c <lwip_htons>
 8009d66:	4603      	mov	r3, r0
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d12f      	bne.n	8009dd2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009d72:	4b10      	ldr	r3, [pc, #64]	@ (8009db4 <tcp_receive+0x888>)
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	899b      	ldrh	r3, [r3, #12]
 8009d78:	b29c      	uxth	r4, r3
 8009d7a:	2001      	movs	r0, #1
 8009d7c:	f7fa ff86 	bl	8004c8c <lwip_htons>
 8009d80:	4603      	mov	r3, r0
 8009d82:	461a      	mov	r2, r3
 8009d84:	4b0b      	ldr	r3, [pc, #44]	@ (8009db4 <tcp_receive+0x888>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	4322      	orrs	r2, r4
 8009d8a:	b292      	uxth	r2, r2
 8009d8c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009d8e:	4b09      	ldr	r3, [pc, #36]	@ (8009db4 <tcp_receive+0x888>)
 8009d90:	891c      	ldrh	r4, [r3, #8]
 8009d92:	4b08      	ldr	r3, [pc, #32]	@ (8009db4 <tcp_receive+0x888>)
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	899b      	ldrh	r3, [r3, #12]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fa ff76 	bl	8004c8c <lwip_htons>
 8009da0:	4603      	mov	r3, r0
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 0303 	and.w	r3, r3, #3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00d      	beq.n	8009dc8 <tcp_receive+0x89c>
 8009dac:	2301      	movs	r3, #1
 8009dae:	e00c      	b.n	8009dca <tcp_receive+0x89e>
 8009db0:	200082c0 	.word	0x200082c0
 8009db4:	200082a0 	.word	0x200082a0
 8009db8:	200082ca 	.word	0x200082ca
 8009dbc:	08010ee0 	.word	0x08010ee0
 8009dc0:	08011288 	.word	0x08011288
 8009dc4:	08010f2c 	.word	0x08010f2c
 8009dc8:	2300      	movs	r3, #0
 8009dca:	4423      	add	r3, r4
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	4b98      	ldr	r3, [pc, #608]	@ (800a030 <tcp_receive+0xb04>)
 8009dd0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dd4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8009ddc:	6938      	ldr	r0, [r7, #16]
 8009dde:	f7fd fd38 	bl	8007852 <tcp_seg_free>
            while (next &&
 8009de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00e      	beq.n	8009e06 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009de8:	4b91      	ldr	r3, [pc, #580]	@ (800a030 <tcp_receive+0xb04>)
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	461a      	mov	r2, r3
 8009dee:	4b91      	ldr	r3, [pc, #580]	@ (800a034 <tcp_receive+0xb08>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	441a      	add	r2, r3
 8009df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009dfc:	8909      	ldrh	r1, [r1, #8]
 8009dfe:	440b      	add	r3, r1
 8009e00:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	da9b      	bge.n	8009d3e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d059      	beq.n	8009ec0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009e0c:	4b88      	ldr	r3, [pc, #544]	@ (800a030 <tcp_receive+0xb04>)
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	461a      	mov	r2, r3
 8009e12:	4b88      	ldr	r3, [pc, #544]	@ (800a034 <tcp_receive+0xb08>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	441a      	add	r2, r3
 8009e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	dd4d      	ble.n	8009ec0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	4b81      	ldr	r3, [pc, #516]	@ (800a034 <tcp_receive+0xb08>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	4b80      	ldr	r3, [pc, #512]	@ (800a038 <tcp_receive+0xb0c>)
 8009e38:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e3a:	4b7f      	ldr	r3, [pc, #508]	@ (800a038 <tcp_receive+0xb0c>)
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	899b      	ldrh	r3, [r3, #12]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fa ff22 	bl	8004c8c <lwip_htons>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f003 0302 	and.w	r3, r3, #2
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d005      	beq.n	8009e60 <tcp_receive+0x934>
                inseg.len -= 1;
 8009e54:	4b78      	ldr	r3, [pc, #480]	@ (800a038 <tcp_receive+0xb0c>)
 8009e56:	891b      	ldrh	r3, [r3, #8]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	4b76      	ldr	r3, [pc, #472]	@ (800a038 <tcp_receive+0xb0c>)
 8009e5e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009e60:	4b75      	ldr	r3, [pc, #468]	@ (800a038 <tcp_receive+0xb0c>)
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	4a74      	ldr	r2, [pc, #464]	@ (800a038 <tcp_receive+0xb0c>)
 8009e66:	8912      	ldrh	r2, [r2, #8]
 8009e68:	4611      	mov	r1, r2
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fc f8e6 	bl	800603c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009e70:	4b71      	ldr	r3, [pc, #452]	@ (800a038 <tcp_receive+0xb0c>)
 8009e72:	891c      	ldrh	r4, [r3, #8]
 8009e74:	4b70      	ldr	r3, [pc, #448]	@ (800a038 <tcp_receive+0xb0c>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	899b      	ldrh	r3, [r3, #12]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fa ff05 	bl	8004c8c <lwip_htons>
 8009e82:	4603      	mov	r3, r0
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	f003 0303 	and.w	r3, r3, #3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <tcp_receive+0x966>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e000      	b.n	8009e94 <tcp_receive+0x968>
 8009e92:	2300      	movs	r3, #0
 8009e94:	4423      	add	r3, r4
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	4b65      	ldr	r3, [pc, #404]	@ (800a030 <tcp_receive+0xb04>)
 8009e9a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009e9c:	4b64      	ldr	r3, [pc, #400]	@ (800a030 <tcp_receive+0xb04>)
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4b64      	ldr	r3, [pc, #400]	@ (800a034 <tcp_receive+0xb08>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	441a      	add	r2, r3
 8009ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d006      	beq.n	8009ec0 <tcp_receive+0x994>
 8009eb2:	4b62      	ldr	r3, [pc, #392]	@ (800a03c <tcp_receive+0xb10>)
 8009eb4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8009eb8:	4961      	ldr	r1, [pc, #388]	@ (800a040 <tcp_receive+0xb14>)
 8009eba:	4862      	ldr	r0, [pc, #392]	@ (800a044 <tcp_receive+0xb18>)
 8009ebc:	f004 ffd4 	bl	800ee68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009ec4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009ec6:	4b5a      	ldr	r3, [pc, #360]	@ (800a030 <tcp_receive+0xb04>)
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	4b59      	ldr	r3, [pc, #356]	@ (800a034 <tcp_receive+0xb08>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	441a      	add	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009eda:	4b55      	ldr	r3, [pc, #340]	@ (800a030 <tcp_receive+0xb04>)
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d206      	bcs.n	8009ef0 <tcp_receive+0x9c4>
 8009ee2:	4b56      	ldr	r3, [pc, #344]	@ (800a03c <tcp_receive+0xb10>)
 8009ee4:	f240 6207 	movw	r2, #1543	@ 0x607
 8009ee8:	4957      	ldr	r1, [pc, #348]	@ (800a048 <tcp_receive+0xb1c>)
 8009eea:	4856      	ldr	r0, [pc, #344]	@ (800a044 <tcp_receive+0xb18>)
 8009eec:	f004 ffbc 	bl	800ee68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009ef4:	4b4e      	ldr	r3, [pc, #312]	@ (800a030 <tcp_receive+0xb04>)
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7fc ffc5 	bl	8006e90 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009f06:	4b4c      	ldr	r3, [pc, #304]	@ (800a038 <tcp_receive+0xb0c>)
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	891b      	ldrh	r3, [r3, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d006      	beq.n	8009f1e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009f10:	4b49      	ldr	r3, [pc, #292]	@ (800a038 <tcp_receive+0xb0c>)
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	4a4d      	ldr	r2, [pc, #308]	@ (800a04c <tcp_receive+0xb20>)
 8009f16:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009f18:	4b47      	ldr	r3, [pc, #284]	@ (800a038 <tcp_receive+0xb0c>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f1e:	4b46      	ldr	r3, [pc, #280]	@ (800a038 <tcp_receive+0xb0c>)
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	899b      	ldrh	r3, [r3, #12]
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fa feb0 	bl	8004c8c <lwip_htons>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f000 80b8 	beq.w	800a0aa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009f3a:	4b45      	ldr	r3, [pc, #276]	@ (800a050 <tcp_receive+0xb24>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	f043 0320 	orr.w	r3, r3, #32
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	4b42      	ldr	r3, [pc, #264]	@ (800a050 <tcp_receive+0xb24>)
 8009f46:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009f48:	e0af      	b.n	800a0aa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f4e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	4a36      	ldr	r2, [pc, #216]	@ (800a034 <tcp_receive+0xb08>)
 8009f5a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	891b      	ldrh	r3, [r3, #8]
 8009f60:	461c      	mov	r4, r3
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	899b      	ldrh	r3, [r3, #12]
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fa fe8e 	bl	8004c8c <lwip_htons>
 8009f70:	4603      	mov	r3, r0
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <tcp_receive+0xa54>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e000      	b.n	8009f82 <tcp_receive+0xa56>
 8009f80:	2300      	movs	r3, #0
 8009f82:	191a      	adds	r2, r3, r4
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f88:	441a      	add	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f92:	461c      	mov	r4, r3
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	891b      	ldrh	r3, [r3, #8]
 8009f98:	461d      	mov	r5, r3
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	899b      	ldrh	r3, [r3, #12]
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fa fe72 	bl	8004c8c <lwip_htons>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 0303 	and.w	r3, r3, #3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <tcp_receive+0xa8c>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e000      	b.n	8009fba <tcp_receive+0xa8e>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	442b      	add	r3, r5
 8009fbc:	429c      	cmp	r4, r3
 8009fbe:	d206      	bcs.n	8009fce <tcp_receive+0xaa2>
 8009fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800a03c <tcp_receive+0xb10>)
 8009fc2:	f240 622b 	movw	r2, #1579	@ 0x62b
 8009fc6:	4923      	ldr	r1, [pc, #140]	@ (800a054 <tcp_receive+0xb28>)
 8009fc8:	481e      	ldr	r0, [pc, #120]	@ (800a044 <tcp_receive+0xb18>)
 8009fca:	f004 ff4d 	bl	800ee68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	891b      	ldrh	r3, [r3, #8]
 8009fd2:	461c      	mov	r4, r3
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	899b      	ldrh	r3, [r3, #12]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fa fe55 	bl	8004c8c <lwip_htons>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	f003 0303 	and.w	r3, r3, #3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <tcp_receive+0xac6>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e000      	b.n	8009ff4 <tcp_receive+0xac8>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	1919      	adds	r1, r3, r4
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009ffa:	b28b      	uxth	r3, r1
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7fc ff43 	bl	8006e90 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	891b      	ldrh	r3, [r3, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d028      	beq.n	800a066 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a014:	4b0d      	ldr	r3, [pc, #52]	@ (800a04c <tcp_receive+0xb20>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01d      	beq.n	800a058 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a01c:	4b0b      	ldr	r3, [pc, #44]	@ (800a04c <tcp_receive+0xb20>)
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	4619      	mov	r1, r3
 800a026:	4610      	mov	r0, r2
 800a028:	f7fc fa50 	bl	80064cc <pbuf_cat>
 800a02c:	e018      	b.n	800a060 <tcp_receive+0xb34>
 800a02e:	bf00      	nop
 800a030:	200082ca 	.word	0x200082ca
 800a034:	200082c0 	.word	0x200082c0
 800a038:	200082a0 	.word	0x200082a0
 800a03c:	08010ee0 	.word	0x08010ee0
 800a040:	080112c0 	.word	0x080112c0
 800a044:	08010f2c 	.word	0x08010f2c
 800a048:	080112fc 	.word	0x080112fc
 800a04c:	200082d0 	.word	0x200082d0
 800a050:	200082cd 	.word	0x200082cd
 800a054:	0801131c 	.word	0x0801131c
            } else {
              recv_data = cseg->p;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	4a70      	ldr	r2, [pc, #448]	@ (800a220 <tcp_receive+0xcf4>)
 800a05e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2200      	movs	r2, #0
 800a064:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	899b      	ldrh	r3, [r3, #12]
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fa fe0c 	bl	8004c8c <lwip_htons>
 800a074:	4603      	mov	r3, r0
 800a076:	b2db      	uxtb	r3, r3
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00d      	beq.n	800a09c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a080:	4b68      	ldr	r3, [pc, #416]	@ (800a224 <tcp_receive+0xcf8>)
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	f043 0320 	orr.w	r3, r3, #32
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	4b66      	ldr	r3, [pc, #408]	@ (800a224 <tcp_receive+0xcf8>)
 800a08c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	7d1b      	ldrb	r3, [r3, #20]
 800a092:	2b04      	cmp	r3, #4
 800a094:	d102      	bne.n	800a09c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2207      	movs	r2, #7
 800a09a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a0a4:	68b8      	ldr	r0, [r7, #8]
 800a0a6:	f7fd fbd4 	bl	8007852 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d008      	beq.n	800a0c4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	f43f af43 	beq.w	8009f4a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	8b5b      	ldrh	r3, [r3, #26]
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00e      	beq.n	800a0ee <tcp_receive+0xbc2>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	8b5b      	ldrh	r3, [r3, #26]
 800a0d4:	f023 0301 	bic.w	r3, r3, #1
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	835a      	strh	r2, [r3, #26]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	8b5b      	ldrh	r3, [r3, #26]
 800a0e2:	f043 0302 	orr.w	r3, r3, #2
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a0ec:	e187      	b.n	800a3fe <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	8b5b      	ldrh	r3, [r3, #26]
 800a0f2:	f043 0301 	orr.w	r3, r3, #1
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a0fc:	e17f      	b.n	800a3fe <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a102:	2b00      	cmp	r3, #0
 800a104:	d106      	bne.n	800a114 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a106:	4848      	ldr	r0, [pc, #288]	@ (800a228 <tcp_receive+0xcfc>)
 800a108:	f7fd fbbc 	bl	8007884 <tcp_seg_copy>
 800a10c:	4602      	mov	r2, r0
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	675a      	str	r2, [r3, #116]	@ 0x74
 800a112:	e16c      	b.n	800a3ee <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a114:	2300      	movs	r3, #0
 800a116:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a11c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a11e:	e156      	b.n	800a3ce <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	4b41      	ldr	r3, [pc, #260]	@ (800a22c <tcp_receive+0xd00>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d11d      	bne.n	800a16a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a12e:	4b3e      	ldr	r3, [pc, #248]	@ (800a228 <tcp_receive+0xcfc>)
 800a130:	891a      	ldrh	r2, [r3, #8]
 800a132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a134:	891b      	ldrh	r3, [r3, #8]
 800a136:	429a      	cmp	r2, r3
 800a138:	f240 814e 	bls.w	800a3d8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a13c:	483a      	ldr	r0, [pc, #232]	@ (800a228 <tcp_receive+0xcfc>)
 800a13e:	f7fd fba1 	bl	8007884 <tcp_seg_copy>
 800a142:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 8148 	beq.w	800a3dc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800a14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d003      	beq.n	800a15a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	e002      	b.n	800a160 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a160:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a162:	6978      	ldr	r0, [r7, #20]
 800a164:	f7ff f8de 	bl	8009324 <tcp_oos_insert_segment>
                }
                break;
 800a168:	e138      	b.n	800a3dc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a16a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d117      	bne.n	800a1a0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a170:	4b2e      	ldr	r3, [pc, #184]	@ (800a22c <tcp_receive+0xd00>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	da57      	bge.n	800a230 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a180:	4829      	ldr	r0, [pc, #164]	@ (800a228 <tcp_receive+0xcfc>)
 800a182:	f7fd fb7f 	bl	8007884 <tcp_seg_copy>
 800a186:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f000 8128 	beq.w	800a3e0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	69ba      	ldr	r2, [r7, #24]
 800a194:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a196:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a198:	69b8      	ldr	r0, [r7, #24]
 800a19a:	f7ff f8c3 	bl	8009324 <tcp_oos_insert_segment>
                  }
                  break;
 800a19e:	e11f      	b.n	800a3e0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a1a0:	4b22      	ldr	r3, [pc, #136]	@ (800a22c <tcp_receive+0xd00>)
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	db3e      	blt.n	800a230 <tcp_receive+0xd04>
 800a1b2:	4b1e      	ldr	r3, [pc, #120]	@ (800a22c <tcp_receive+0xd00>)
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	3301      	adds	r3, #1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	dc35      	bgt.n	800a230 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a1c4:	4818      	ldr	r0, [pc, #96]	@ (800a228 <tcp_receive+0xcfc>)
 800a1c6:	f7fd fb5d 	bl	8007884 <tcp_seg_copy>
 800a1ca:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 8108 	beq.w	800a3e4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1dc:	8912      	ldrh	r2, [r2, #8]
 800a1de:	441a      	add	r2, r3
 800a1e0:	4b12      	ldr	r3, [pc, #72]	@ (800a22c <tcp_receive+0xd00>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	dd12      	ble.n	800a210 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a1ea:	4b10      	ldr	r3, [pc, #64]	@ (800a22c <tcp_receive+0xd00>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1fe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a206:	891b      	ldrh	r3, [r3, #8]
 800a208:	4619      	mov	r1, r3
 800a20a:	4610      	mov	r0, r2
 800a20c:	f7fb ff16 	bl	800603c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a212:	69fa      	ldr	r2, [r7, #28]
 800a214:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a216:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a218:	69f8      	ldr	r0, [r7, #28]
 800a21a:	f7ff f883 	bl	8009324 <tcp_oos_insert_segment>
                  }
                  break;
 800a21e:	e0e1      	b.n	800a3e4 <tcp_receive+0xeb8>
 800a220:	200082d0 	.word	0x200082d0
 800a224:	200082cd 	.word	0x200082cd
 800a228:	200082a0 	.word	0x200082a0
 800a22c:	200082c0 	.word	0x200082c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a232:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f040 80c5 	bne.w	800a3c8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a23e:	4b7f      	ldr	r3, [pc, #508]	@ (800a43c <tcp_receive+0xf10>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f340 80bc 	ble.w	800a3c8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	899b      	ldrh	r3, [r3, #12]
 800a256:	b29b      	uxth	r3, r3
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fa fd17 	bl	8004c8c <lwip_htons>
 800a25e:	4603      	mov	r3, r0
 800a260:	b2db      	uxtb	r3, r3
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	2b00      	cmp	r3, #0
 800a268:	f040 80be 	bne.w	800a3e8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a26c:	4874      	ldr	r0, [pc, #464]	@ (800a440 <tcp_receive+0xf14>)
 800a26e:	f7fd fb09 	bl	8007884 <tcp_seg_copy>
 800a272:	4602      	mov	r2, r0
 800a274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a276:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f000 80b5 	beq.w	800a3ec <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a28a:	8912      	ldrh	r2, [r2, #8]
 800a28c:	441a      	add	r2, r3
 800a28e:	4b6b      	ldr	r3, [pc, #428]	@ (800a43c <tcp_receive+0xf10>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	2b00      	cmp	r3, #0
 800a296:	dd12      	ble.n	800a2be <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a298:	4b68      	ldr	r3, [pc, #416]	@ (800a43c <tcp_receive+0xf10>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b4:	891b      	ldrh	r3, [r3, #8]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	f7fb febf 	bl	800603c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a2be:	4b61      	ldr	r3, [pc, #388]	@ (800a444 <tcp_receive+0xf18>)
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	4b5d      	ldr	r3, [pc, #372]	@ (800a43c <tcp_receive+0xf10>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	441a      	add	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a2d2:	440b      	add	r3, r1
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f340 8088 	ble.w	800a3ec <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	899b      	ldrh	r3, [r3, #12]
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fa fcd0 	bl	8004c8c <lwip_htons>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d021      	beq.n	800a33c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	899b      	ldrh	r3, [r3, #12]
 800a300:	b29b      	uxth	r3, r3
 800a302:	b21b      	sxth	r3, r3
 800a304:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a308:	b21c      	sxth	r4, r3
 800a30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	899b      	ldrh	r3, [r3, #12]
 800a312:	b29b      	uxth	r3, r3
 800a314:	4618      	mov	r0, r3
 800a316:	f7fa fcb9 	bl	8004c8c <lwip_htons>
 800a31a:	4603      	mov	r3, r0
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a322:	b29b      	uxth	r3, r3
 800a324:	4618      	mov	r0, r3
 800a326:	f7fa fcb1 	bl	8004c8c <lwip_htons>
 800a32a:	4603      	mov	r3, r0
 800a32c:	b21b      	sxth	r3, r3
 800a32e:	4323      	orrs	r3, r4
 800a330:	b21a      	sxth	r2, r3
 800a332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	b292      	uxth	r2, r2
 800a33a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a340:	b29a      	uxth	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a346:	4413      	add	r3, r2
 800a348:	b299      	uxth	r1, r3
 800a34a:	4b3c      	ldr	r3, [pc, #240]	@ (800a43c <tcp_receive+0xf10>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	b29a      	uxth	r2, r3
 800a350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	1a8a      	subs	r2, r1, r2
 800a356:	b292      	uxth	r2, r2
 800a358:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	891b      	ldrh	r3, [r3, #8]
 800a366:	4619      	mov	r1, r3
 800a368:	4610      	mov	r0, r2
 800a36a:	f7fb fe67 	bl	800603c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	891c      	ldrh	r4, [r3, #8]
 800a374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	899b      	ldrh	r3, [r3, #12]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fa fc84 	bl	8004c8c <lwip_htons>
 800a384:	4603      	mov	r3, r0
 800a386:	b2db      	uxtb	r3, r3
 800a388:	f003 0303 	and.w	r3, r3, #3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <tcp_receive+0xe68>
 800a390:	2301      	movs	r3, #1
 800a392:	e000      	b.n	800a396 <tcp_receive+0xe6a>
 800a394:	2300      	movs	r3, #0
 800a396:	4423      	add	r3, r4
 800a398:	b29a      	uxth	r2, r3
 800a39a:	4b2a      	ldr	r3, [pc, #168]	@ (800a444 <tcp_receive+0xf18>)
 800a39c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a39e:	4b29      	ldr	r3, [pc, #164]	@ (800a444 <tcp_receive+0xf18>)
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4b25      	ldr	r3, [pc, #148]	@ (800a43c <tcp_receive+0xf10>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	441a      	add	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ae:	6879      	ldr	r1, [r7, #4]
 800a3b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a3b2:	440b      	add	r3, r1
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d019      	beq.n	800a3ec <tcp_receive+0xec0>
 800a3b8:	4b23      	ldr	r3, [pc, #140]	@ (800a448 <tcp_receive+0xf1c>)
 800a3ba:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800a3be:	4923      	ldr	r1, [pc, #140]	@ (800a44c <tcp_receive+0xf20>)
 800a3c0:	4823      	ldr	r0, [pc, #140]	@ (800a450 <tcp_receive+0xf24>)
 800a3c2:	f004 fd51 	bl	800ee68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a3c6:	e011      	b.n	800a3ec <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f47f aea5 	bne.w	800a120 <tcp_receive+0xbf4>
 800a3d6:	e00a      	b.n	800a3ee <tcp_receive+0xec2>
                break;
 800a3d8:	bf00      	nop
 800a3da:	e008      	b.n	800a3ee <tcp_receive+0xec2>
                break;
 800a3dc:	bf00      	nop
 800a3de:	e006      	b.n	800a3ee <tcp_receive+0xec2>
                  break;
 800a3e0:	bf00      	nop
 800a3e2:	e004      	b.n	800a3ee <tcp_receive+0xec2>
                  break;
 800a3e4:	bf00      	nop
 800a3e6:	e002      	b.n	800a3ee <tcp_receive+0xec2>
                  break;
 800a3e8:	bf00      	nop
 800a3ea:	e000      	b.n	800a3ee <tcp_receive+0xec2>
                break;
 800a3ec:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f001 fa30 	bl	800b854 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a3f4:	e003      	b.n	800a3fe <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f001 fa2c 	bl	800b854 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3fc:	e01a      	b.n	800a434 <tcp_receive+0xf08>
 800a3fe:	e019      	b.n	800a434 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a400:	4b0e      	ldr	r3, [pc, #56]	@ (800a43c <tcp_receive+0xf10>)
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	db0a      	blt.n	800a424 <tcp_receive+0xef8>
 800a40e:	4b0b      	ldr	r3, [pc, #44]	@ (800a43c <tcp_receive+0xf10>)
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a41a:	440b      	add	r3, r1
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	3301      	adds	r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	dd07      	ble.n	800a434 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	8b5b      	ldrh	r3, [r3, #26]
 800a428:	f043 0302 	orr.w	r3, r3, #2
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a432:	e7ff      	b.n	800a434 <tcp_receive+0xf08>
 800a434:	bf00      	nop
 800a436:	3750      	adds	r7, #80	@ 0x50
 800a438:	46bd      	mov	sp, r7
 800a43a:	bdb0      	pop	{r4, r5, r7, pc}
 800a43c:	200082c0 	.word	0x200082c0
 800a440:	200082a0 	.word	0x200082a0
 800a444:	200082ca 	.word	0x200082ca
 800a448:	08010ee0 	.word	0x08010ee0
 800a44c:	08011288 	.word	0x08011288
 800a450:	08010f2c 	.word	0x08010f2c

0800a454 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a45a:	4b15      	ldr	r3, [pc, #84]	@ (800a4b0 <tcp_get_next_optbyte+0x5c>)
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	1c5a      	adds	r2, r3, #1
 800a460:	b291      	uxth	r1, r2
 800a462:	4a13      	ldr	r2, [pc, #76]	@ (800a4b0 <tcp_get_next_optbyte+0x5c>)
 800a464:	8011      	strh	r1, [r2, #0]
 800a466:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a468:	4b12      	ldr	r3, [pc, #72]	@ (800a4b4 <tcp_get_next_optbyte+0x60>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d004      	beq.n	800a47a <tcp_get_next_optbyte+0x26>
 800a470:	4b11      	ldr	r3, [pc, #68]	@ (800a4b8 <tcp_get_next_optbyte+0x64>)
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	88fa      	ldrh	r2, [r7, #6]
 800a476:	429a      	cmp	r2, r3
 800a478:	d208      	bcs.n	800a48c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a47a:	4b10      	ldr	r3, [pc, #64]	@ (800a4bc <tcp_get_next_optbyte+0x68>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3314      	adds	r3, #20
 800a480:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a482:	88fb      	ldrh	r3, [r7, #6]
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	4413      	add	r3, r2
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	e00b      	b.n	800a4a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a48c:	88fb      	ldrh	r3, [r7, #6]
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	4b09      	ldr	r3, [pc, #36]	@ (800a4b8 <tcp_get_next_optbyte+0x64>)
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a49a:	4b06      	ldr	r3, [pc, #24]	@ (800a4b4 <tcp_get_next_optbyte+0x60>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	797b      	ldrb	r3, [r7, #5]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr
 800a4b0:	200082bc 	.word	0x200082bc
 800a4b4:	200082b8 	.word	0x200082b8
 800a4b8:	200082b6 	.word	0x200082b6
 800a4bc:	200082b0 	.word	0x200082b0

0800a4c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d106      	bne.n	800a4dc <tcp_parseopt+0x1c>
 800a4ce:	4b32      	ldr	r3, [pc, #200]	@ (800a598 <tcp_parseopt+0xd8>)
 800a4d0:	f240 727d 	movw	r2, #1917	@ 0x77d
 800a4d4:	4931      	ldr	r1, [pc, #196]	@ (800a59c <tcp_parseopt+0xdc>)
 800a4d6:	4832      	ldr	r0, [pc, #200]	@ (800a5a0 <tcp_parseopt+0xe0>)
 800a4d8:	f004 fcc6 	bl	800ee68 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a4dc:	4b31      	ldr	r3, [pc, #196]	@ (800a5a4 <tcp_parseopt+0xe4>)
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d056      	beq.n	800a592 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a4e4:	4b30      	ldr	r3, [pc, #192]	@ (800a5a8 <tcp_parseopt+0xe8>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	801a      	strh	r2, [r3, #0]
 800a4ea:	e046      	b.n	800a57a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800a4ec:	f7ff ffb2 	bl	800a454 <tcp_get_next_optbyte>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d006      	beq.n	800a508 <tcp_parseopt+0x48>
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	dc2a      	bgt.n	800a554 <tcp_parseopt+0x94>
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d042      	beq.n	800a588 <tcp_parseopt+0xc8>
 800a502:	2b01      	cmp	r3, #1
 800a504:	d038      	beq.n	800a578 <tcp_parseopt+0xb8>
 800a506:	e025      	b.n	800a554 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a508:	f7ff ffa4 	bl	800a454 <tcp_get_next_optbyte>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b04      	cmp	r3, #4
 800a510:	d13c      	bne.n	800a58c <tcp_parseopt+0xcc>
 800a512:	4b25      	ldr	r3, [pc, #148]	@ (800a5a8 <tcp_parseopt+0xe8>)
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	3301      	adds	r3, #1
 800a518:	4a22      	ldr	r2, [pc, #136]	@ (800a5a4 <tcp_parseopt+0xe4>)
 800a51a:	8812      	ldrh	r2, [r2, #0]
 800a51c:	4293      	cmp	r3, r2
 800a51e:	da35      	bge.n	800a58c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a520:	f7ff ff98 	bl	800a454 <tcp_get_next_optbyte>
 800a524:	4603      	mov	r3, r0
 800a526:	021b      	lsls	r3, r3, #8
 800a528:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a52a:	f7ff ff93 	bl	800a454 <tcp_get_next_optbyte>
 800a52e:	4603      	mov	r3, r0
 800a530:	461a      	mov	r2, r3
 800a532:	89bb      	ldrh	r3, [r7, #12]
 800a534:	4313      	orrs	r3, r2
 800a536:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a538:	89bb      	ldrh	r3, [r7, #12]
 800a53a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800a53e:	d804      	bhi.n	800a54a <tcp_parseopt+0x8a>
 800a540:	89bb      	ldrh	r3, [r7, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <tcp_parseopt+0x8a>
 800a546:	89ba      	ldrh	r2, [r7, #12]
 800a548:	e001      	b.n	800a54e <tcp_parseopt+0x8e>
 800a54a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800a552:	e012      	b.n	800a57a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a554:	f7ff ff7e 	bl	800a454 <tcp_get_next_optbyte>
 800a558:	4603      	mov	r3, r0
 800a55a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d916      	bls.n	800a590 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a562:	7afb      	ldrb	r3, [r7, #11]
 800a564:	b29a      	uxth	r2, r3
 800a566:	4b10      	ldr	r3, [pc, #64]	@ (800a5a8 <tcp_parseopt+0xe8>)
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	4413      	add	r3, r2
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	3b02      	subs	r3, #2
 800a570:	b29a      	uxth	r2, r3
 800a572:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a8 <tcp_parseopt+0xe8>)
 800a574:	801a      	strh	r2, [r3, #0]
 800a576:	e000      	b.n	800a57a <tcp_parseopt+0xba>
          break;
 800a578:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a57a:	4b0b      	ldr	r3, [pc, #44]	@ (800a5a8 <tcp_parseopt+0xe8>)
 800a57c:	881a      	ldrh	r2, [r3, #0]
 800a57e:	4b09      	ldr	r3, [pc, #36]	@ (800a5a4 <tcp_parseopt+0xe4>)
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	429a      	cmp	r2, r3
 800a584:	d3b2      	bcc.n	800a4ec <tcp_parseopt+0x2c>
 800a586:	e004      	b.n	800a592 <tcp_parseopt+0xd2>
          return;
 800a588:	bf00      	nop
 800a58a:	e002      	b.n	800a592 <tcp_parseopt+0xd2>
            return;
 800a58c:	bf00      	nop
 800a58e:	e000      	b.n	800a592 <tcp_parseopt+0xd2>
            return;
 800a590:	bf00      	nop
      }
    }
  }
}
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	08010ee0 	.word	0x08010ee0
 800a59c:	08011344 	.word	0x08011344
 800a5a0:	08010f2c 	.word	0x08010f2c
 800a5a4:	200082b4 	.word	0x200082b4
 800a5a8:	200082bc 	.word	0x200082bc

0800a5ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a5b0:	4b05      	ldr	r3, [pc, #20]	@ (800a5c8 <tcp_trigger_input_pcb_close+0x1c>)
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	f043 0310 	orr.w	r3, r3, #16
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	4b03      	ldr	r3, [pc, #12]	@ (800a5c8 <tcp_trigger_input_pcb_close+0x1c>)
 800a5bc:	701a      	strb	r2, [r3, #0]
}
 800a5be:	bf00      	nop
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	200082cd 	.word	0x200082cd

0800a5cc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00a      	beq.n	800a5f4 <tcp_route+0x28>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	7a1b      	ldrb	r3, [r3, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d006      	beq.n	800a5f4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	7a1b      	ldrb	r3, [r3, #8]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fb fb4c 	bl	8005c88 <netif_get_by_index>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	e003      	b.n	800a5fc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f003 f94b 	bl	800d890 <ip4_route>
 800a5fa:	4603      	mov	r3, r0
  }
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a604:	b590      	push	{r4, r7, lr}
 800a606:	b087      	sub	sp, #28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	603b      	str	r3, [r7, #0]
 800a610:	4613      	mov	r3, r2
 800a612:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d105      	bne.n	800a626 <tcp_create_segment+0x22>
 800a61a:	4b43      	ldr	r3, [pc, #268]	@ (800a728 <tcp_create_segment+0x124>)
 800a61c:	22a3      	movs	r2, #163	@ 0xa3
 800a61e:	4943      	ldr	r1, [pc, #268]	@ (800a72c <tcp_create_segment+0x128>)
 800a620:	4843      	ldr	r0, [pc, #268]	@ (800a730 <tcp_create_segment+0x12c>)
 800a622:	f004 fc21 	bl	800ee68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d105      	bne.n	800a638 <tcp_create_segment+0x34>
 800a62c:	4b3e      	ldr	r3, [pc, #248]	@ (800a728 <tcp_create_segment+0x124>)
 800a62e:	22a4      	movs	r2, #164	@ 0xa4
 800a630:	4940      	ldr	r1, [pc, #256]	@ (800a734 <tcp_create_segment+0x130>)
 800a632:	483f      	ldr	r0, [pc, #252]	@ (800a730 <tcp_create_segment+0x12c>)
 800a634:	f004 fc18 	bl	800ee68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a638:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	f003 0304 	and.w	r3, r3, #4
 800a644:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a646:	2003      	movs	r0, #3
 800a648:	f7fa ff98 	bl	800557c <memp_malloc>
 800a64c:	6138      	str	r0, [r7, #16]
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d104      	bne.n	800a65e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a654:	68b8      	ldr	r0, [r7, #8]
 800a656:	f7fb fe77 	bl	8006348 <pbuf_free>
    return NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e060      	b.n	800a720 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a664:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	2200      	movs	r2, #0
 800a66a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	891a      	ldrh	r2, [r3, #8]
 800a676:	7dfb      	ldrb	r3, [r7, #23]
 800a678:	b29b      	uxth	r3, r3
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d205      	bcs.n	800a68a <tcp_create_segment+0x86>
 800a67e:	4b2a      	ldr	r3, [pc, #168]	@ (800a728 <tcp_create_segment+0x124>)
 800a680:	22b0      	movs	r2, #176	@ 0xb0
 800a682:	492d      	ldr	r1, [pc, #180]	@ (800a738 <tcp_create_segment+0x134>)
 800a684:	482a      	ldr	r0, [pc, #168]	@ (800a730 <tcp_create_segment+0x12c>)
 800a686:	f004 fbef 	bl	800ee68 <iprintf>
  seg->len = p->tot_len - optlen;
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	891a      	ldrh	r2, [r3, #8]
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
 800a690:	b29b      	uxth	r3, r3
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	b29a      	uxth	r2, r3
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a69a:	2114      	movs	r1, #20
 800a69c:	68b8      	ldr	r0, [r7, #8]
 800a69e:	f7fb fdbd 	bl	800621c <pbuf_add_header>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d004      	beq.n	800a6b2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a6a8:	6938      	ldr	r0, [r7, #16]
 800a6aa:	f7fd f8d2 	bl	8007852 <tcp_seg_free>
    return NULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e036      	b.n	800a720 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	8ada      	ldrh	r2, [r3, #22]
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	68dc      	ldr	r4, [r3, #12]
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	f7fa fae1 	bl	8004c8c <lwip_htons>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	8b1a      	ldrh	r2, [r3, #24]
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	68dc      	ldr	r4, [r3, #12]
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f7fa fad8 	bl	8004c8c <lwip_htons>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	68dc      	ldr	r4, [r3, #12]
 800a6e4:	6838      	ldr	r0, [r7, #0]
 800a6e6:	f7fa fae7 	bl	8004cb8 <lwip_htonl>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
 800a6f0:	089b      	lsrs	r3, r3, #2
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	3305      	adds	r3, #5
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	031b      	lsls	r3, r3, #12
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	79fb      	ldrb	r3, [r7, #7]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	4313      	orrs	r3, r2
 800a702:	b29a      	uxth	r2, r3
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	68dc      	ldr	r4, [r3, #12]
 800a708:	4610      	mov	r0, r2
 800a70a:	f7fa fabf 	bl	8004c8c <lwip_htons>
 800a70e:	4603      	mov	r3, r0
 800a710:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	749a      	strb	r2, [r3, #18]
 800a71a:	2200      	movs	r2, #0
 800a71c:	74da      	strb	r2, [r3, #19]
  return seg;
 800a71e:	693b      	ldr	r3, [r7, #16]
}
 800a720:	4618      	mov	r0, r3
 800a722:	371c      	adds	r7, #28
 800a724:	46bd      	mov	sp, r7
 800a726:	bd90      	pop	{r4, r7, pc}
 800a728:	08011360 	.word	0x08011360
 800a72c:	08011394 	.word	0x08011394
 800a730:	080113b4 	.word	0x080113b4
 800a734:	080113dc 	.word	0x080113dc
 800a738:	08011400 	.word	0x08011400

0800a73c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a73c:	b590      	push	{r4, r7, lr}
 800a73e:	b08b      	sub	sp, #44	@ 0x2c
 800a740:	af02      	add	r7, sp, #8
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a748:	2300      	movs	r3, #0
 800a74a:	61fb      	str	r3, [r7, #28]
 800a74c:	2300      	movs	r3, #0
 800a74e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a750:	2300      	movs	r3, #0
 800a752:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d106      	bne.n	800a768 <tcp_split_unsent_seg+0x2c>
 800a75a:	4b95      	ldr	r3, [pc, #596]	@ (800a9b0 <tcp_split_unsent_seg+0x274>)
 800a75c:	f240 324b 	movw	r2, #843	@ 0x34b
 800a760:	4994      	ldr	r1, [pc, #592]	@ (800a9b4 <tcp_split_unsent_seg+0x278>)
 800a762:	4895      	ldr	r0, [pc, #596]	@ (800a9b8 <tcp_split_unsent_seg+0x27c>)
 800a764:	f004 fb80 	bl	800ee68 <iprintf>

  useg = pcb->unsent;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a76c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d102      	bne.n	800a77a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a774:	f04f 33ff 	mov.w	r3, #4294967295
 800a778:	e116      	b.n	800a9a8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a77a:	887b      	ldrh	r3, [r7, #2]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d109      	bne.n	800a794 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a780:	4b8b      	ldr	r3, [pc, #556]	@ (800a9b0 <tcp_split_unsent_seg+0x274>)
 800a782:	f240 3253 	movw	r2, #851	@ 0x353
 800a786:	498d      	ldr	r1, [pc, #564]	@ (800a9bc <tcp_split_unsent_seg+0x280>)
 800a788:	488b      	ldr	r0, [pc, #556]	@ (800a9b8 <tcp_split_unsent_seg+0x27c>)
 800a78a:	f004 fb6d 	bl	800ee68 <iprintf>
    return ERR_VAL;
 800a78e:	f06f 0305 	mvn.w	r3, #5
 800a792:	e109      	b.n	800a9a8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	891b      	ldrh	r3, [r3, #8]
 800a798:	887a      	ldrh	r2, [r7, #2]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d301      	bcc.n	800a7a2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	e102      	b.n	800a9a8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a7a6:	887a      	ldrh	r2, [r7, #2]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d906      	bls.n	800a7ba <tcp_split_unsent_seg+0x7e>
 800a7ac:	4b80      	ldr	r3, [pc, #512]	@ (800a9b0 <tcp_split_unsent_seg+0x274>)
 800a7ae:	f240 325b 	movw	r2, #859	@ 0x35b
 800a7b2:	4983      	ldr	r1, [pc, #524]	@ (800a9c0 <tcp_split_unsent_seg+0x284>)
 800a7b4:	4880      	ldr	r0, [pc, #512]	@ (800a9b8 <tcp_split_unsent_seg+0x27c>)
 800a7b6:	f004 fb57 	bl	800ee68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	891b      	ldrh	r3, [r3, #8]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d106      	bne.n	800a7d0 <tcp_split_unsent_seg+0x94>
 800a7c2:	4b7b      	ldr	r3, [pc, #492]	@ (800a9b0 <tcp_split_unsent_seg+0x274>)
 800a7c4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800a7c8:	497e      	ldr	r1, [pc, #504]	@ (800a9c4 <tcp_split_unsent_seg+0x288>)
 800a7ca:	487b      	ldr	r0, [pc, #492]	@ (800a9b8 <tcp_split_unsent_seg+0x27c>)
 800a7cc:	f004 fb4c 	bl	800ee68 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	7a9b      	ldrb	r3, [r3, #10]
 800a7d4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	f003 0304 	and.w	r3, r3, #4
 800a7e0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	891a      	ldrh	r2, [r3, #8]
 800a7e6:	887b      	ldrh	r3, [r7, #2]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a7ec:	7bbb      	ldrb	r3, [r7, #14]
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	89bb      	ldrh	r3, [r7, #12]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	2036      	movs	r0, #54	@ 0x36
 800a7fe:	f7fb fabf 	bl	8005d80 <pbuf_alloc>
 800a802:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 80b7 	beq.w	800a97a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	891a      	ldrh	r2, [r3, #8]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	891b      	ldrh	r3, [r3, #8]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	b29a      	uxth	r2, r3
 800a81a:	887b      	ldrh	r3, [r7, #2]
 800a81c:	4413      	add	r3, r2
 800a81e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	6858      	ldr	r0, [r3, #4]
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	685a      	ldr	r2, [r3, #4]
 800a828:	7bbb      	ldrb	r3, [r7, #14]
 800a82a:	18d1      	adds	r1, r2, r3
 800a82c:	897b      	ldrh	r3, [r7, #10]
 800a82e:	89ba      	ldrh	r2, [r7, #12]
 800a830:	f7fb ff84 	bl	800673c <pbuf_copy_partial>
 800a834:	4603      	mov	r3, r0
 800a836:	461a      	mov	r2, r3
 800a838:	89bb      	ldrh	r3, [r7, #12]
 800a83a:	4293      	cmp	r3, r2
 800a83c:	f040 809f 	bne.w	800a97e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	899b      	ldrh	r3, [r3, #12]
 800a846:	b29b      	uxth	r3, r3
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fa fa1f 	bl	8004c8c <lwip_htons>
 800a84e:	4603      	mov	r3, r0
 800a850:	b2db      	uxtb	r3, r3
 800a852:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a856:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a858:	2300      	movs	r3, #0
 800a85a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a85c:	7efb      	ldrb	r3, [r7, #27]
 800a85e:	f003 0308 	and.w	r3, r3, #8
 800a862:	2b00      	cmp	r3, #0
 800a864:	d007      	beq.n	800a876 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a866:	7efb      	ldrb	r3, [r7, #27]
 800a868:	f023 0308 	bic.w	r3, r3, #8
 800a86c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a86e:	7ebb      	ldrb	r3, [r7, #26]
 800a870:	f043 0308 	orr.w	r3, r3, #8
 800a874:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a876:	7efb      	ldrb	r3, [r7, #27]
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d007      	beq.n	800a890 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a880:	7efb      	ldrb	r3, [r7, #27]
 800a882:	f023 0301 	bic.w	r3, r3, #1
 800a886:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a888:	7ebb      	ldrb	r3, [r7, #26]
 800a88a:	f043 0301 	orr.w	r3, r3, #1
 800a88e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	4618      	mov	r0, r3
 800a898:	f7fa fa0e 	bl	8004cb8 <lwip_htonl>
 800a89c:	4602      	mov	r2, r0
 800a89e:	887b      	ldrh	r3, [r7, #2]
 800a8a0:	18d1      	adds	r1, r2, r3
 800a8a2:	7eba      	ldrb	r2, [r7, #26]
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	6939      	ldr	r1, [r7, #16]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f7ff fea9 	bl	800a604 <tcp_create_segment>
 800a8b2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d063      	beq.n	800a982 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fb fdca 	bl	8006458 <pbuf_clen>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a8ce:	1a9b      	subs	r3, r3, r2
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	6858      	ldr	r0, [r3, #4]
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	891a      	ldrh	r2, [r3, #8]
 800a8e2:	89bb      	ldrh	r3, [r7, #12]
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	f7fb fba7 	bl	800603c <pbuf_realloc>
  useg->len -= remainder;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	891a      	ldrh	r2, [r3, #8]
 800a8f2:	89bb      	ldrh	r3, [r7, #12]
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	899b      	ldrh	r3, [r3, #12]
 800a902:	b29c      	uxth	r4, r3
 800a904:	7efb      	ldrb	r3, [r7, #27]
 800a906:	b29b      	uxth	r3, r3
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fa f9bf 	bl	8004c8c <lwip_htons>
 800a90e:	4603      	mov	r3, r0
 800a910:	461a      	mov	r2, r3
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	4322      	orrs	r2, r4
 800a918:	b292      	uxth	r2, r2
 800a91a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	4618      	mov	r0, r3
 800a922:	f7fb fd99 	bl	8006458 <pbuf_clen>
 800a926:	4603      	mov	r3, r0
 800a928:	461a      	mov	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a930:	4413      	add	r3, r2
 800a932:	b29a      	uxth	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fb fd8a 	bl	8006458 <pbuf_clen>
 800a944:	4603      	mov	r3, r0
 800a946:	461a      	mov	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a94e:	4413      	add	r3, r2
 800a950:	b29a      	uxth	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	69fa      	ldr	r2, [r7, #28]
 800a964:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d103      	bne.n	800a976 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	e016      	b.n	800a9a8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a97a:	bf00      	nop
 800a97c:	e002      	b.n	800a984 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a97e:	bf00      	nop
 800a980:	e000      	b.n	800a984 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a982:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d006      	beq.n	800a998 <tcp_split_unsent_seg+0x25c>
 800a98a:	4b09      	ldr	r3, [pc, #36]	@ (800a9b0 <tcp_split_unsent_seg+0x274>)
 800a98c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800a990:	490d      	ldr	r1, [pc, #52]	@ (800a9c8 <tcp_split_unsent_seg+0x28c>)
 800a992:	4809      	ldr	r0, [pc, #36]	@ (800a9b8 <tcp_split_unsent_seg+0x27c>)
 800a994:	f004 fa68 	bl	800ee68 <iprintf>
  if (p != NULL) {
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a99e:	6938      	ldr	r0, [r7, #16]
 800a9a0:	f7fb fcd2 	bl	8006348 <pbuf_free>
  }

  return ERR_MEM;
 800a9a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3724      	adds	r7, #36	@ 0x24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd90      	pop	{r4, r7, pc}
 800a9b0:	08011360 	.word	0x08011360
 800a9b4:	080116f4 	.word	0x080116f4
 800a9b8:	080113b4 	.word	0x080113b4
 800a9bc:	08011718 	.word	0x08011718
 800a9c0:	0801173c 	.word	0x0801173c
 800a9c4:	0801174c 	.word	0x0801174c
 800a9c8:	0801175c 	.word	0x0801175c

0800a9cc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a9cc:	b590      	push	{r4, r7, lr}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d106      	bne.n	800a9e8 <tcp_send_fin+0x1c>
 800a9da:	4b21      	ldr	r3, [pc, #132]	@ (800aa60 <tcp_send_fin+0x94>)
 800a9dc:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800a9e0:	4920      	ldr	r1, [pc, #128]	@ (800aa64 <tcp_send_fin+0x98>)
 800a9e2:	4821      	ldr	r0, [pc, #132]	@ (800aa68 <tcp_send_fin+0x9c>)
 800a9e4:	f004 fa40 	bl	800ee68 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d02e      	beq.n	800aa4e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9f4:	60fb      	str	r3, [r7, #12]
 800a9f6:	e002      	b.n	800a9fe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1f8      	bne.n	800a9f8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	899b      	ldrh	r3, [r3, #12]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fa f93c 	bl	8004c8c <lwip_htons>
 800aa14:	4603      	mov	r3, r0
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d116      	bne.n	800aa4e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	899b      	ldrh	r3, [r3, #12]
 800aa26:	b29c      	uxth	r4, r3
 800aa28:	2001      	movs	r0, #1
 800aa2a:	f7fa f92f 	bl	8004c8c <lwip_htons>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	461a      	mov	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	4322      	orrs	r2, r4
 800aa38:	b292      	uxth	r2, r2
 800aa3a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	8b5b      	ldrh	r3, [r3, #26]
 800aa40:	f043 0320 	orr.w	r3, r3, #32
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	e004      	b.n	800aa58 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800aa4e:	2101      	movs	r1, #1
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f80b 	bl	800aa6c <tcp_enqueue_flags>
 800aa56:	4603      	mov	r3, r0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd90      	pop	{r4, r7, pc}
 800aa60:	08011360 	.word	0x08011360
 800aa64:	08011768 	.word	0x08011768
 800aa68:	080113b4 	.word	0x080113b4

0800aa6c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b08a      	sub	sp, #40	@ 0x28
 800aa70:	af02      	add	r7, sp, #8
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	f003 0303 	and.w	r3, r3, #3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d106      	bne.n	800aa98 <tcp_enqueue_flags+0x2c>
 800aa8a:	4b67      	ldr	r3, [pc, #412]	@ (800ac28 <tcp_enqueue_flags+0x1bc>)
 800aa8c:	f240 4211 	movw	r2, #1041	@ 0x411
 800aa90:	4966      	ldr	r1, [pc, #408]	@ (800ac2c <tcp_enqueue_flags+0x1c0>)
 800aa92:	4867      	ldr	r0, [pc, #412]	@ (800ac30 <tcp_enqueue_flags+0x1c4>)
 800aa94:	f004 f9e8 	bl	800ee68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d106      	bne.n	800aaac <tcp_enqueue_flags+0x40>
 800aa9e:	4b62      	ldr	r3, [pc, #392]	@ (800ac28 <tcp_enqueue_flags+0x1bc>)
 800aaa0:	f240 4213 	movw	r2, #1043	@ 0x413
 800aaa4:	4963      	ldr	r1, [pc, #396]	@ (800ac34 <tcp_enqueue_flags+0x1c8>)
 800aaa6:	4862      	ldr	r0, [pc, #392]	@ (800ac30 <tcp_enqueue_flags+0x1c4>)
 800aaa8:	f004 f9de 	bl	800ee68 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	f003 0302 	and.w	r3, r3, #2
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d001      	beq.n	800aaba <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800aab6:	2301      	movs	r3, #1
 800aab8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aaba:	7ffb      	ldrb	r3, [r7, #31]
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800aace:	4619      	mov	r1, r3
 800aad0:	2036      	movs	r0, #54	@ 0x36
 800aad2:	f7fb f955 	bl	8005d80 <pbuf_alloc>
 800aad6:	6138      	str	r0, [r7, #16]
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d109      	bne.n	800aaf2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	8b5b      	ldrh	r3, [r3, #26]
 800aae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aaec:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf0:	e095      	b.n	800ac1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	895a      	ldrh	r2, [r3, #10]
 800aaf6:	7dfb      	ldrb	r3, [r7, #23]
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d206      	bcs.n	800ab0c <tcp_enqueue_flags+0xa0>
 800aafe:	4b4a      	ldr	r3, [pc, #296]	@ (800ac28 <tcp_enqueue_flags+0x1bc>)
 800ab00:	f240 4239 	movw	r2, #1081	@ 0x439
 800ab04:	494c      	ldr	r1, [pc, #304]	@ (800ac38 <tcp_enqueue_flags+0x1cc>)
 800ab06:	484a      	ldr	r0, [pc, #296]	@ (800ac30 <tcp_enqueue_flags+0x1c4>)
 800ab08:	f004 f9ae 	bl	800ee68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ab10:	78fa      	ldrb	r2, [r7, #3]
 800ab12:	7ffb      	ldrb	r3, [r7, #31]
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	460b      	mov	r3, r1
 800ab18:	6939      	ldr	r1, [r7, #16]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff fd72 	bl	800a604 <tcp_create_segment>
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d109      	bne.n	800ab3c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	8b5b      	ldrh	r3, [r3, #26]
 800ab2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ab36:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3a:	e070      	b.n	800ac1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f003 0303 	and.w	r3, r3, #3
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d006      	beq.n	800ab56 <tcp_enqueue_flags+0xea>
 800ab48:	4b37      	ldr	r3, [pc, #220]	@ (800ac28 <tcp_enqueue_flags+0x1bc>)
 800ab4a:	f240 4242 	movw	r2, #1090	@ 0x442
 800ab4e:	493b      	ldr	r1, [pc, #236]	@ (800ac3c <tcp_enqueue_flags+0x1d0>)
 800ab50:	4837      	ldr	r0, [pc, #220]	@ (800ac30 <tcp_enqueue_flags+0x1c4>)
 800ab52:	f004 f989 	bl	800ee68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	891b      	ldrh	r3, [r3, #8]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d006      	beq.n	800ab6c <tcp_enqueue_flags+0x100>
 800ab5e:	4b32      	ldr	r3, [pc, #200]	@ (800ac28 <tcp_enqueue_flags+0x1bc>)
 800ab60:	f240 4243 	movw	r2, #1091	@ 0x443
 800ab64:	4936      	ldr	r1, [pc, #216]	@ (800ac40 <tcp_enqueue_flags+0x1d4>)
 800ab66:	4832      	ldr	r0, [pc, #200]	@ (800ac30 <tcp_enqueue_flags+0x1c4>)
 800ab68:	f004 f97e 	bl	800ee68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d103      	bne.n	800ab7c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ab7a:	e00d      	b.n	800ab98 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab80:	61bb      	str	r3, [r7, #24]
 800ab82:	e002      	b.n	800ab8a <tcp_enqueue_flags+0x11e>
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	61bb      	str	r3, [r7, #24]
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1f8      	bne.n	800ab84 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	f003 0302 	and.w	r3, r3, #2
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d104      	bne.n	800abb4 <tcp_enqueue_flags+0x148>
 800abaa:	78fb      	ldrb	r3, [r7, #3]
 800abac:	f003 0301 	and.w	r3, r3, #1
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d004      	beq.n	800abbe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	f003 0301 	and.w	r3, r3, #1
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d006      	beq.n	800abd6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	8b5b      	ldrh	r3, [r3, #26]
 800abcc:	f043 0320 	orr.w	r3, r3, #32
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fb fc3c 	bl	8006458 <pbuf_clen>
 800abe0:	4603      	mov	r3, r0
 800abe2:	461a      	mov	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800abea:	4413      	add	r3, r2
 800abec:	b29a      	uxth	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00e      	beq.n	800ac1c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10a      	bne.n	800ac1c <tcp_enqueue_flags+0x1b0>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d106      	bne.n	800ac1c <tcp_enqueue_flags+0x1b0>
 800ac0e:	4b06      	ldr	r3, [pc, #24]	@ (800ac28 <tcp_enqueue_flags+0x1bc>)
 800ac10:	f240 4265 	movw	r2, #1125	@ 0x465
 800ac14:	490b      	ldr	r1, [pc, #44]	@ (800ac44 <tcp_enqueue_flags+0x1d8>)
 800ac16:	4806      	ldr	r0, [pc, #24]	@ (800ac30 <tcp_enqueue_flags+0x1c4>)
 800ac18:	f004 f926 	bl	800ee68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3720      	adds	r7, #32
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	08011360 	.word	0x08011360
 800ac2c:	08011784 	.word	0x08011784
 800ac30:	080113b4 	.word	0x080113b4
 800ac34:	080117dc 	.word	0x080117dc
 800ac38:	080117fc 	.word	0x080117fc
 800ac3c:	08011838 	.word	0x08011838
 800ac40:	08011850 	.word	0x08011850
 800ac44:	0801187c 	.word	0x0801187c

0800ac48 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ac48:	b5b0      	push	{r4, r5, r7, lr}
 800ac4a:	b08a      	sub	sp, #40	@ 0x28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d106      	bne.n	800ac64 <tcp_output+0x1c>
 800ac56:	4b8a      	ldr	r3, [pc, #552]	@ (800ae80 <tcp_output+0x238>)
 800ac58:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ac5c:	4989      	ldr	r1, [pc, #548]	@ (800ae84 <tcp_output+0x23c>)
 800ac5e:	488a      	ldr	r0, [pc, #552]	@ (800ae88 <tcp_output+0x240>)
 800ac60:	f004 f902 	bl	800ee68 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	7d1b      	ldrb	r3, [r3, #20]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d106      	bne.n	800ac7a <tcp_output+0x32>
 800ac6c:	4b84      	ldr	r3, [pc, #528]	@ (800ae80 <tcp_output+0x238>)
 800ac6e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800ac72:	4986      	ldr	r1, [pc, #536]	@ (800ae8c <tcp_output+0x244>)
 800ac74:	4884      	ldr	r0, [pc, #528]	@ (800ae88 <tcp_output+0x240>)
 800ac76:	f004 f8f7 	bl	800ee68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ac7a:	4b85      	ldr	r3, [pc, #532]	@ (800ae90 <tcp_output+0x248>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d101      	bne.n	800ac88 <tcp_output+0x40>
    return ERR_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	e1ce      	b.n	800b026 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ac94:	4293      	cmp	r3, r2
 800ac96:	bf28      	it	cs
 800ac98:	4613      	movcs	r3, r2
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aca2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10b      	bne.n	800acc2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	8b5b      	ldrh	r3, [r3, #26]
 800acae:	f003 0302 	and.w	r3, r3, #2
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f000 81aa 	beq.w	800b00c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fdcb 	bl	800b854 <tcp_send_empty_ack>
 800acbe:	4603      	mov	r3, r0
 800acc0:	e1b1      	b.n	800b026 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800acc2:	6879      	ldr	r1, [r7, #4]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	3304      	adds	r3, #4
 800acc8:	461a      	mov	r2, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7ff fc7e 	bl	800a5cc <tcp_route>
 800acd0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d102      	bne.n	800acde <tcp_output+0x96>
    return ERR_RTE;
 800acd8:	f06f 0303 	mvn.w	r3, #3
 800acdc:	e1a3      	b.n	800b026 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d003      	beq.n	800acec <tcp_output+0xa4>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d111      	bne.n	800ad10 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d002      	beq.n	800acf8 <tcp_output+0xb0>
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	3304      	adds	r3, #4
 800acf6:	e000      	b.n	800acfa <tcp_output+0xb2>
 800acf8:	2300      	movs	r3, #0
 800acfa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d102      	bne.n	800ad08 <tcp_output+0xc0>
      return ERR_RTE;
 800ad02:	f06f 0303 	mvn.w	r3, #3
 800ad06:	e18e      	b.n	800b026 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ad10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7f9 ffce 	bl	8004cb8 <lwip_htonl>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad26:	8912      	ldrh	r2, [r2, #8]
 800ad28:	4413      	add	r3, r2
 800ad2a:	69ba      	ldr	r2, [r7, #24]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d227      	bcs.n	800ad80 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ad36:	461a      	mov	r2, r3
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d114      	bne.n	800ad68 <tcp_output+0x120>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d110      	bne.n	800ad68 <tcp_output+0x120>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10b      	bne.n	800ad68 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	8b5b      	ldrh	r3, [r3, #26]
 800ad6c:	f003 0302 	and.w	r3, r3, #2
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 814d 	beq.w	800b010 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fd6c 	bl	800b854 <tcp_send_empty_ack>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	e152      	b.n	800b026 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad8c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ad8e:	6a3b      	ldr	r3, [r7, #32]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 811c 	beq.w	800afce <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ad96:	e002      	b.n	800ad9e <tcp_output+0x156>
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	623b      	str	r3, [r7, #32]
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1f8      	bne.n	800ad98 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ada6:	e112      	b.n	800afce <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ada8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	899b      	ldrh	r3, [r3, #12]
 800adae:	b29b      	uxth	r3, r3
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7f9 ff6b 	bl	8004c8c <lwip_htons>
 800adb6:	4603      	mov	r3, r0
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	f003 0304 	and.w	r3, r3, #4
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d006      	beq.n	800add0 <tcp_output+0x188>
 800adc2:	4b2f      	ldr	r3, [pc, #188]	@ (800ae80 <tcp_output+0x238>)
 800adc4:	f240 5236 	movw	r2, #1334	@ 0x536
 800adc8:	4932      	ldr	r1, [pc, #200]	@ (800ae94 <tcp_output+0x24c>)
 800adca:	482f      	ldr	r0, [pc, #188]	@ (800ae88 <tcp_output+0x240>)
 800adcc:	f004 f84c 	bl	800ee68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800add4:	2b00      	cmp	r3, #0
 800add6:	d01f      	beq.n	800ae18 <tcp_output+0x1d0>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	8b5b      	ldrh	r3, [r3, #26]
 800addc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d119      	bne.n	800ae18 <tcp_output+0x1d0>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00b      	beq.n	800ae04 <tcp_output+0x1bc>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d110      	bne.n	800ae18 <tcp_output+0x1d0>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adfa:	891a      	ldrh	r2, [r3, #8]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d209      	bcs.n	800ae18 <tcp_output+0x1d0>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d004      	beq.n	800ae18 <tcp_output+0x1d0>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae14:	2b08      	cmp	r3, #8
 800ae16:	d901      	bls.n	800ae1c <tcp_output+0x1d4>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e000      	b.n	800ae1e <tcp_output+0x1d6>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d106      	bne.n	800ae30 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	8b5b      	ldrh	r3, [r3, #26]
 800ae26:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 80e4 	beq.w	800aff8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	7d1b      	ldrb	r3, [r3, #20]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d00d      	beq.n	800ae54 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	899b      	ldrh	r3, [r3, #12]
 800ae3e:	b29c      	uxth	r4, r3
 800ae40:	2010      	movs	r0, #16
 800ae42:	f7f9 ff23 	bl	8004c8c <lwip_htons>
 800ae46:	4603      	mov	r3, r0
 800ae48:	461a      	mov	r2, r3
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	4322      	orrs	r2, r4
 800ae50:	b292      	uxth	r2, r2
 800ae52:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	6879      	ldr	r1, [r7, #4]
 800ae58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae5a:	f000 f909 	bl	800b070 <tcp_output_segment>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ae62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d016      	beq.n	800ae98 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	8b5b      	ldrh	r3, [r3, #26]
 800ae6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	835a      	strh	r2, [r3, #26]
      return err;
 800ae78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae7c:	e0d3      	b.n	800b026 <tcp_output+0x3de>
 800ae7e:	bf00      	nop
 800ae80:	08011360 	.word	0x08011360
 800ae84:	080118a4 	.word	0x080118a4
 800ae88:	080113b4 	.word	0x080113b4
 800ae8c:	080118bc 	.word	0x080118bc
 800ae90:	200082d4 	.word	0x200082d4
 800ae94:	080118e4 	.word	0x080118e4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	7d1b      	ldrb	r3, [r3, #20]
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d006      	beq.n	800aeb6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	8b5b      	ldrh	r3, [r3, #26]
 800aeac:	f023 0303 	bic.w	r3, r3, #3
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7f9 fefb 	bl	8004cb8 <lwip_htonl>
 800aec2:	4604      	mov	r4, r0
 800aec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec6:	891b      	ldrh	r3, [r3, #8]
 800aec8:	461d      	mov	r5, r3
 800aeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	899b      	ldrh	r3, [r3, #12]
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7f9 feda 	bl	8004c8c <lwip_htons>
 800aed8:	4603      	mov	r3, r0
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	f003 0303 	and.w	r3, r3, #3
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <tcp_output+0x2a0>
 800aee4:	2301      	movs	r3, #1
 800aee6:	e000      	b.n	800aeea <tcp_output+0x2a2>
 800aee8:	2300      	movs	r3, #0
 800aeea:	442b      	add	r3, r5
 800aeec:	4423      	add	r3, r4
 800aeee:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	da02      	bge.n	800af02 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800af02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af04:	891b      	ldrh	r3, [r3, #8]
 800af06:	461c      	mov	r4, r3
 800af08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	899b      	ldrh	r3, [r3, #12]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	4618      	mov	r0, r3
 800af12:	f7f9 febb 	bl	8004c8c <lwip_htons>
 800af16:	4603      	mov	r3, r0
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	f003 0303 	and.w	r3, r3, #3
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <tcp_output+0x2de>
 800af22:	2301      	movs	r3, #1
 800af24:	e000      	b.n	800af28 <tcp_output+0x2e0>
 800af26:	2300      	movs	r3, #0
 800af28:	4423      	add	r3, r4
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d049      	beq.n	800afc2 <tcp_output+0x37a>
      seg->next = NULL;
 800af2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af30:	2200      	movs	r2, #0
 800af32:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d105      	bne.n	800af48 <tcp_output+0x300>
        pcb->unacked = seg;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af40:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af44:	623b      	str	r3, [r7, #32]
 800af46:	e03f      	b.n	800afc8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800af48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	4618      	mov	r0, r3
 800af50:	f7f9 feb2 	bl	8004cb8 <lwip_htonl>
 800af54:	4604      	mov	r4, r0
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7f9 feab 	bl	8004cb8 <lwip_htonl>
 800af62:	4603      	mov	r3, r0
 800af64:	1ae3      	subs	r3, r4, r3
 800af66:	2b00      	cmp	r3, #0
 800af68:	da24      	bge.n	800afb4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3370      	adds	r3, #112	@ 0x70
 800af6e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800af70:	e002      	b.n	800af78 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d011      	beq.n	800afa4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7f9 fe95 	bl	8004cb8 <lwip_htonl>
 800af8e:	4604      	mov	r4, r0
 800af90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	4618      	mov	r0, r3
 800af98:	f7f9 fe8e 	bl	8004cb8 <lwip_htonl>
 800af9c:	4603      	mov	r3, r0
 800af9e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	dbe6      	blt.n	800af72 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afaa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	e009      	b.n	800afc8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800afb4:	6a3b      	ldr	r3, [r7, #32]
 800afb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afb8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	623b      	str	r3, [r7, #32]
 800afc0:	e002      	b.n	800afc8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800afc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afc4:	f7fc fc45 	bl	8007852 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afcc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800afce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d012      	beq.n	800affa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800afd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	4618      	mov	r0, r3
 800afdc:	f7f9 fe6c 	bl	8004cb8 <lwip_htonl>
 800afe0:	4602      	mov	r2, r0
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afea:	8912      	ldrh	r2, [r2, #8]
 800afec:	4413      	add	r3, r2
  while (seg != NULL &&
 800afee:	69ba      	ldr	r2, [r7, #24]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	f4bf aed9 	bcs.w	800ada8 <tcp_output+0x160>
 800aff6:	e000      	b.n	800affa <tcp_output+0x3b2>
      break;
 800aff8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800affe:	2b00      	cmp	r3, #0
 800b000:	d108      	bne.n	800b014 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800b00a:	e004      	b.n	800b016 <tcp_output+0x3ce>
    goto output_done;
 800b00c:	bf00      	nop
 800b00e:	e002      	b.n	800b016 <tcp_output+0x3ce>
    goto output_done;
 800b010:	bf00      	nop
 800b012:	e000      	b.n	800b016 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b014:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	8b5b      	ldrh	r3, [r3, #26]
 800b01a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b01e:	b29a      	uxth	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3728      	adds	r7, #40	@ 0x28
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bdb0      	pop	{r4, r5, r7, pc}
 800b02e:	bf00      	nop

0800b030 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d106      	bne.n	800b04c <tcp_output_segment_busy+0x1c>
 800b03e:	4b09      	ldr	r3, [pc, #36]	@ (800b064 <tcp_output_segment_busy+0x34>)
 800b040:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b044:	4908      	ldr	r1, [pc, #32]	@ (800b068 <tcp_output_segment_busy+0x38>)
 800b046:	4809      	ldr	r0, [pc, #36]	@ (800b06c <tcp_output_segment_busy+0x3c>)
 800b048:	f003 ff0e 	bl	800ee68 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	7b9b      	ldrb	r3, [r3, #14]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d001      	beq.n	800b05a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b056:	2301      	movs	r3, #1
 800b058:	e000      	b.n	800b05c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	08011360 	.word	0x08011360
 800b068:	080118fc 	.word	0x080118fc
 800b06c:	080113b4 	.word	0x080113b4

0800b070 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b070:	b5b0      	push	{r4, r5, r7, lr}
 800b072:	b08c      	sub	sp, #48	@ 0x30
 800b074:	af04      	add	r7, sp, #16
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d106      	bne.n	800b090 <tcp_output_segment+0x20>
 800b082:	4b64      	ldr	r3, [pc, #400]	@ (800b214 <tcp_output_segment+0x1a4>)
 800b084:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800b088:	4963      	ldr	r1, [pc, #396]	@ (800b218 <tcp_output_segment+0x1a8>)
 800b08a:	4864      	ldr	r0, [pc, #400]	@ (800b21c <tcp_output_segment+0x1ac>)
 800b08c:	f003 feec 	bl	800ee68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d106      	bne.n	800b0a4 <tcp_output_segment+0x34>
 800b096:	4b5f      	ldr	r3, [pc, #380]	@ (800b214 <tcp_output_segment+0x1a4>)
 800b098:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800b09c:	4960      	ldr	r1, [pc, #384]	@ (800b220 <tcp_output_segment+0x1b0>)
 800b09e:	485f      	ldr	r0, [pc, #380]	@ (800b21c <tcp_output_segment+0x1ac>)
 800b0a0:	f003 fee2 	bl	800ee68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <tcp_output_segment+0x48>
 800b0aa:	4b5a      	ldr	r3, [pc, #360]	@ (800b214 <tcp_output_segment+0x1a4>)
 800b0ac:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800b0b0:	495c      	ldr	r1, [pc, #368]	@ (800b224 <tcp_output_segment+0x1b4>)
 800b0b2:	485a      	ldr	r0, [pc, #360]	@ (800b21c <tcp_output_segment+0x1ac>)
 800b0b4:	f003 fed8 	bl	800ee68 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f7ff ffb9 	bl	800b030 <tcp_output_segment_busy>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e0a1      	b.n	800b20c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	68dc      	ldr	r4, [r3, #12]
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	f7f9 fdf1 	bl	8004cb8 <lwip_htonl>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	68dc      	ldr	r4, [r3, #12]
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	f7f9 fdd2 	bl	8004c8c <lwip_htons>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b0f4:	441a      	add	r2, r3
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	3314      	adds	r3, #20
 800b100:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	7a9b      	ldrb	r3, [r3, #10]
 800b106:	f003 0301 	and.w	r3, r3, #1
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d015      	beq.n	800b13a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	3304      	adds	r3, #4
 800b112:	461a      	mov	r2, r3
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800b11a:	f7fc fe91 	bl	8007e40 <tcp_eff_send_mss_netif>
 800b11e:	4603      	mov	r3, r0
 800b120:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b122:	8b7b      	ldrh	r3, [r7, #26]
 800b124:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800b128:	4618      	mov	r0, r3
 800b12a:	f7f9 fdc5 	bl	8004cb8 <lwip_htonl>
 800b12e:	4602      	mov	r2, r0
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	3304      	adds	r3, #4
 800b138:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b140:	2b00      	cmp	r3, #0
 800b142:	da02      	bge.n	800b14a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2200      	movs	r2, #0
 800b148:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10c      	bne.n	800b16c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b152:	4b35      	ldr	r3, [pc, #212]	@ (800b228 <tcp_output_segment+0x1b8>)
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	4618      	mov	r0, r3
 800b162:	f7f9 fda9 	bl	8004cb8 <lwip_htonl>
 800b166:	4602      	mov	r2, r0
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	68da      	ldr	r2, [r3, #12]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	8959      	ldrh	r1, [r3, #10]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	8b3a      	ldrh	r2, [r7, #24]
 800b186:	1a8a      	subs	r2, r1, r2
 800b188:	b292      	uxth	r2, r2
 800b18a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	8919      	ldrh	r1, [r3, #8]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	8b3a      	ldrh	r2, [r7, #24]
 800b198:	1a8a      	subs	r2, r1, r2
 800b19a:	b292      	uxth	r2, r2
 800b19c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	68d2      	ldr	r2, [r2, #12]
 800b1a6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	741a      	strb	r2, [r3, #16]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	68da      	ldr	r2, [r3, #12]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	7a9b      	ldrb	r3, [r3, #10]
 800b1bc:	f003 0301 	and.w	r3, r3, #1
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d001      	beq.n	800b1c8 <tcp_output_segment+0x158>
 800b1c4:	2318      	movs	r3, #24
 800b1c6:	e000      	b.n	800b1ca <tcp_output_segment+0x15a>
 800b1c8:	2314      	movs	r3, #20
 800b1ca:	4413      	add	r3, r2
 800b1cc:	69fa      	ldr	r2, [r7, #28]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d006      	beq.n	800b1e0 <tcp_output_segment+0x170>
 800b1d2:	4b10      	ldr	r3, [pc, #64]	@ (800b214 <tcp_output_segment+0x1a4>)
 800b1d4:	f240 621c 	movw	r2, #1564	@ 0x61c
 800b1d8:	4914      	ldr	r1, [pc, #80]	@ (800b22c <tcp_output_segment+0x1bc>)
 800b1da:	4810      	ldr	r0, [pc, #64]	@ (800b21c <tcp_output_segment+0x1ac>)
 800b1dc:	f003 fe44 	bl	800ee68 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6858      	ldr	r0, [r3, #4]
 800b1e4:	68b9      	ldr	r1, [r7, #8]
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	1d1c      	adds	r4, r3, #4
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	7add      	ldrb	r5, [r3, #11]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	7a9b      	ldrb	r3, [r3, #10]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	9202      	str	r2, [sp, #8]
 800b1f6:	2206      	movs	r2, #6
 800b1f8:	9201      	str	r2, [sp, #4]
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	462b      	mov	r3, r5
 800b1fe:	4622      	mov	r2, r4
 800b200:	f002 fd04 	bl	800dc0c <ip4_output_if>
 800b204:	4603      	mov	r3, r0
 800b206:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b208:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3720      	adds	r7, #32
 800b210:	46bd      	mov	sp, r7
 800b212:	bdb0      	pop	{r4, r5, r7, pc}
 800b214:	08011360 	.word	0x08011360
 800b218:	08011924 	.word	0x08011924
 800b21c:	080113b4 	.word	0x080113b4
 800b220:	08011944 	.word	0x08011944
 800b224:	08011964 	.word	0x08011964
 800b228:	20008288 	.word	0x20008288
 800b22c:	08011988 	.word	0x08011988

0800b230 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b230:	b5b0      	push	{r4, r5, r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d106      	bne.n	800b24c <tcp_rexmit_rto_prepare+0x1c>
 800b23e:	4b31      	ldr	r3, [pc, #196]	@ (800b304 <tcp_rexmit_rto_prepare+0xd4>)
 800b240:	f240 6263 	movw	r2, #1635	@ 0x663
 800b244:	4930      	ldr	r1, [pc, #192]	@ (800b308 <tcp_rexmit_rto_prepare+0xd8>)
 800b246:	4831      	ldr	r0, [pc, #196]	@ (800b30c <tcp_rexmit_rto_prepare+0xdc>)
 800b248:	f003 fe0e 	bl	800ee68 <iprintf>

  if (pcb->unacked == NULL) {
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b250:	2b00      	cmp	r3, #0
 800b252:	d102      	bne.n	800b25a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b254:	f06f 0305 	mvn.w	r3, #5
 800b258:	e050      	b.n	800b2fc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b25e:	60fb      	str	r3, [r7, #12]
 800b260:	e00b      	b.n	800b27a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f7ff fee4 	bl	800b030 <tcp_output_segment_busy>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d002      	beq.n	800b274 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b26e:	f06f 0305 	mvn.w	r3, #5
 800b272:	e043      	b.n	800b2fc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	60fb      	str	r3, [r7, #12]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1ef      	bne.n	800b262 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f7ff fed4 	bl	800b030 <tcp_output_segment_busy>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d002      	beq.n	800b294 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b28e:	f06f 0305 	mvn.w	r3, #5
 800b292:	e033      	b.n	800b2fc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	8b5b      	ldrh	r3, [r3, #26]
 800b2ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7f9 fcfa 	bl	8004cb8 <lwip_htonl>
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	891b      	ldrh	r3, [r3, #8]
 800b2ca:	461d      	mov	r5, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	899b      	ldrh	r3, [r3, #12]
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7f9 fcd9 	bl	8004c8c <lwip_htons>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	f003 0303 	and.w	r3, r3, #3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <tcp_rexmit_rto_prepare+0xba>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e000      	b.n	800b2ec <tcp_rexmit_rto_prepare+0xbc>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	442b      	add	r3, r5
 800b2ee:	18e2      	adds	r2, r4, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bdb0      	pop	{r4, r5, r7, pc}
 800b304:	08011360 	.word	0x08011360
 800b308:	0801199c 	.word	0x0801199c
 800b30c:	080113b4 	.word	0x080113b4

0800b310 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d106      	bne.n	800b32c <tcp_rexmit_rto_commit+0x1c>
 800b31e:	4b0d      	ldr	r3, [pc, #52]	@ (800b354 <tcp_rexmit_rto_commit+0x44>)
 800b320:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b324:	490c      	ldr	r1, [pc, #48]	@ (800b358 <tcp_rexmit_rto_commit+0x48>)
 800b326:	480d      	ldr	r0, [pc, #52]	@ (800b35c <tcp_rexmit_rto_commit+0x4c>)
 800b328:	f003 fd9e 	bl	800ee68 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b332:	2bff      	cmp	r3, #255	@ 0xff
 800b334:	d007      	beq.n	800b346 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b33c:	3301      	adds	r3, #1
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff fc7e 	bl	800ac48 <tcp_output>
}
 800b34c:	bf00      	nop
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	08011360 	.word	0x08011360
 800b358:	080119c0 	.word	0x080119c0
 800b35c:	080113b4 	.word	0x080113b4

0800b360 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d106      	bne.n	800b37c <tcp_rexmit_rto+0x1c>
 800b36e:	4b0a      	ldr	r3, [pc, #40]	@ (800b398 <tcp_rexmit_rto+0x38>)
 800b370:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800b374:	4909      	ldr	r1, [pc, #36]	@ (800b39c <tcp_rexmit_rto+0x3c>)
 800b376:	480a      	ldr	r0, [pc, #40]	@ (800b3a0 <tcp_rexmit_rto+0x40>)
 800b378:	f003 fd76 	bl	800ee68 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7ff ff57 	bl	800b230 <tcp_rexmit_rto_prepare>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d102      	bne.n	800b38e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f7ff ffc1 	bl	800b310 <tcp_rexmit_rto_commit>
  }
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	08011360 	.word	0x08011360
 800b39c:	080119e4 	.word	0x080119e4
 800b3a0:	080113b4 	.word	0x080113b4

0800b3a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b3a4:	b590      	push	{r4, r7, lr}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <tcp_rexmit+0x1c>
 800b3b2:	4b2f      	ldr	r3, [pc, #188]	@ (800b470 <tcp_rexmit+0xcc>)
 800b3b4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800b3b8:	492e      	ldr	r1, [pc, #184]	@ (800b474 <tcp_rexmit+0xd0>)
 800b3ba:	482f      	ldr	r0, [pc, #188]	@ (800b478 <tcp_rexmit+0xd4>)
 800b3bc:	f003 fd54 	bl	800ee68 <iprintf>

  if (pcb->unacked == NULL) {
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d102      	bne.n	800b3ce <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b3c8:	f06f 0305 	mvn.w	r3, #5
 800b3cc:	e04c      	b.n	800b468 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3d2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b3d4:	68b8      	ldr	r0, [r7, #8]
 800b3d6:	f7ff fe2b 	bl	800b030 <tcp_output_segment_busy>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b3e0:	f06f 0305 	mvn.w	r3, #5
 800b3e4:	e040      	b.n	800b468 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	336c      	adds	r3, #108	@ 0x6c
 800b3f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b3f4:	e002      	b.n	800b3fc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d011      	beq.n	800b428 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7f9 fc53 	bl	8004cb8 <lwip_htonl>
 800b412:	4604      	mov	r4, r0
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7f9 fc4c 	bl	8004cb8 <lwip_htonl>
 800b420:	4603      	mov	r3, r0
 800b422:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b424:	2b00      	cmp	r3, #0
 800b426:	dbe6      	blt.n	800b3f6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d103      	bne.n	800b446 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b44c:	2bff      	cmp	r3, #255	@ 0xff
 800b44e:	d007      	beq.n	800b460 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b456:	3301      	adds	r3, #1
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd90      	pop	{r4, r7, pc}
 800b470:	08011360 	.word	0x08011360
 800b474:	08011a00 	.word	0x08011a00
 800b478:	080113b4 	.word	0x080113b4

0800b47c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d106      	bne.n	800b498 <tcp_rexmit_fast+0x1c>
 800b48a:	4b2a      	ldr	r3, [pc, #168]	@ (800b534 <tcp_rexmit_fast+0xb8>)
 800b48c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800b490:	4929      	ldr	r1, [pc, #164]	@ (800b538 <tcp_rexmit_fast+0xbc>)
 800b492:	482a      	ldr	r0, [pc, #168]	@ (800b53c <tcp_rexmit_fast+0xc0>)
 800b494:	f003 fce8 	bl	800ee68 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d044      	beq.n	800b52a <tcp_rexmit_fast+0xae>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	8b5b      	ldrh	r3, [r3, #26]
 800b4a4:	f003 0304 	and.w	r3, r3, #4
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d13e      	bne.n	800b52a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7ff ff79 	bl	800b3a4 <tcp_rexmit>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d138      	bne.n	800b52a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	bf28      	it	cs
 800b4c8:	4613      	movcs	r3, r2
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	0fda      	lsrs	r2, r3, #31
 800b4ce:	4413      	add	r3, r2
 800b4d0:	105b      	asrs	r3, r3, #1
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b4e6:	005b      	lsls	r3, r3, #1
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d206      	bcs.n	800b4fa <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b504:	4619      	mov	r1, r3
 800b506:	0049      	lsls	r1, r1, #1
 800b508:	440b      	add	r3, r1
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	4413      	add	r3, r2
 800b50e:	b29a      	uxth	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	8b5b      	ldrh	r3, [r3, #26]
 800b51a:	f043 0304 	orr.w	r3, r3, #4
 800b51e:	b29a      	uxth	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800b52a:	bf00      	nop
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	08011360 	.word	0x08011360
 800b538:	08011a18 	.word	0x08011a18
 800b53c:	080113b4 	.word	0x080113b4

0800b540 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	607b      	str	r3, [r7, #4]
 800b54a:	460b      	mov	r3, r1
 800b54c:	817b      	strh	r3, [r7, #10]
 800b54e:	4613      	mov	r3, r2
 800b550:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b552:	897a      	ldrh	r2, [r7, #10]
 800b554:	893b      	ldrh	r3, [r7, #8]
 800b556:	4413      	add	r3, r2
 800b558:	b29b      	uxth	r3, r3
 800b55a:	3314      	adds	r3, #20
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b562:	4619      	mov	r1, r3
 800b564:	2022      	movs	r0, #34	@ 0x22
 800b566:	f7fa fc0b 	bl	8005d80 <pbuf_alloc>
 800b56a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d04d      	beq.n	800b60e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b572:	897b      	ldrh	r3, [r7, #10]
 800b574:	3313      	adds	r3, #19
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	8952      	ldrh	r2, [r2, #10]
 800b57a:	4293      	cmp	r3, r2
 800b57c:	db06      	blt.n	800b58c <tcp_output_alloc_header_common+0x4c>
 800b57e:	4b26      	ldr	r3, [pc, #152]	@ (800b618 <tcp_output_alloc_header_common+0xd8>)
 800b580:	f240 7223 	movw	r2, #1827	@ 0x723
 800b584:	4925      	ldr	r1, [pc, #148]	@ (800b61c <tcp_output_alloc_header_common+0xdc>)
 800b586:	4826      	ldr	r0, [pc, #152]	@ (800b620 <tcp_output_alloc_header_common+0xe0>)
 800b588:	f003 fc6e 	bl	800ee68 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b592:	8c3b      	ldrh	r3, [r7, #32]
 800b594:	4618      	mov	r0, r3
 800b596:	f7f9 fb79 	bl	8004c8c <lwip_htons>
 800b59a:	4603      	mov	r3, r0
 800b59c:	461a      	mov	r2, r3
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b5a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7f9 fb71 	bl	8004c8c <lwip_htons>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7f9 fb7d 	bl	8004cb8 <lwip_htonl>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b5c4:	897b      	ldrh	r3, [r7, #10]
 800b5c6:	089b      	lsrs	r3, r3, #2
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	3305      	adds	r3, #5
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	031b      	lsls	r3, r3, #12
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7f9 fb55 	bl	8004c8c <lwip_htons>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b5ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7f9 fb4d 	bl	8004c8c <lwip_htons>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	741a      	strb	r2, [r3, #16]
 800b600:	2200      	movs	r2, #0
 800b602:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	2200      	movs	r2, #0
 800b608:	749a      	strb	r2, [r3, #18]
 800b60a:	2200      	movs	r2, #0
 800b60c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b60e:	697b      	ldr	r3, [r7, #20]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3718      	adds	r7, #24
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	08011360 	.word	0x08011360
 800b61c:	08011a38 	.word	0x08011a38
 800b620:	080113b4 	.word	0x080113b4

0800b624 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b624:	b5b0      	push	{r4, r5, r7, lr}
 800b626:	b08a      	sub	sp, #40	@ 0x28
 800b628:	af04      	add	r7, sp, #16
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	607b      	str	r3, [r7, #4]
 800b62e:	460b      	mov	r3, r1
 800b630:	817b      	strh	r3, [r7, #10]
 800b632:	4613      	mov	r3, r2
 800b634:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d106      	bne.n	800b64a <tcp_output_alloc_header+0x26>
 800b63c:	4b15      	ldr	r3, [pc, #84]	@ (800b694 <tcp_output_alloc_header+0x70>)
 800b63e:	f240 7242 	movw	r2, #1858	@ 0x742
 800b642:	4915      	ldr	r1, [pc, #84]	@ (800b698 <tcp_output_alloc_header+0x74>)
 800b644:	4815      	ldr	r0, [pc, #84]	@ (800b69c <tcp_output_alloc_header+0x78>)
 800b646:	f003 fc0f 	bl	800ee68 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	8adb      	ldrh	r3, [r3, #22]
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	8b12      	ldrh	r2, [r2, #24]
 800b656:	68f9      	ldr	r1, [r7, #12]
 800b658:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800b65a:	893d      	ldrh	r5, [r7, #8]
 800b65c:	897c      	ldrh	r4, [r7, #10]
 800b65e:	9103      	str	r1, [sp, #12]
 800b660:	2110      	movs	r1, #16
 800b662:	9102      	str	r1, [sp, #8]
 800b664:	9201      	str	r2, [sp, #4]
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	462a      	mov	r2, r5
 800b66c:	4621      	mov	r1, r4
 800b66e:	f7ff ff67 	bl	800b540 <tcp_output_alloc_header_common>
 800b672:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d006      	beq.n	800b688 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b682:	441a      	add	r2, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800b688:	697b      	ldr	r3, [r7, #20]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3718      	adds	r7, #24
 800b68e:	46bd      	mov	sp, r7
 800b690:	bdb0      	pop	{r4, r5, r7, pc}
 800b692:	bf00      	nop
 800b694:	08011360 	.word	0x08011360
 800b698:	08011a68 	.word	0x08011a68
 800b69c:	080113b4 	.word	0x080113b4

0800b6a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	71fb      	strb	r3, [r7, #7]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d106      	bne.n	800b6ce <tcp_output_fill_options+0x2e>
 800b6c0:	4b12      	ldr	r3, [pc, #72]	@ (800b70c <tcp_output_fill_options+0x6c>)
 800b6c2:	f240 7256 	movw	r2, #1878	@ 0x756
 800b6c6:	4912      	ldr	r1, [pc, #72]	@ (800b710 <tcp_output_fill_options+0x70>)
 800b6c8:	4812      	ldr	r0, [pc, #72]	@ (800b714 <tcp_output_fill_options+0x74>)
 800b6ca:	f003 fbcd 	bl	800ee68 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	3314      	adds	r3, #20
 800b6d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b6da:	8bfb      	ldrh	r3, [r7, #30]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	461a      	mov	r2, r3
 800b6e0:	79fb      	ldrb	r3, [r7, #7]
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	f003 0304 	and.w	r3, r3, #4
 800b6e8:	4413      	add	r3, r2
 800b6ea:	3314      	adds	r3, #20
 800b6ec:	69ba      	ldr	r2, [r7, #24]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	697a      	ldr	r2, [r7, #20]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d006      	beq.n	800b704 <tcp_output_fill_options+0x64>
 800b6f6:	4b05      	ldr	r3, [pc, #20]	@ (800b70c <tcp_output_fill_options+0x6c>)
 800b6f8:	f240 7275 	movw	r2, #1909	@ 0x775
 800b6fc:	4906      	ldr	r1, [pc, #24]	@ (800b718 <tcp_output_fill_options+0x78>)
 800b6fe:	4805      	ldr	r0, [pc, #20]	@ (800b714 <tcp_output_fill_options+0x74>)
 800b700:	f003 fbb2 	bl	800ee68 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b704:	bf00      	nop
 800b706:	3720      	adds	r7, #32
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	08011360 	.word	0x08011360
 800b710:	08011a90 	.word	0x08011a90
 800b714:	080113b4 	.word	0x080113b4
 800b718:	08011988 	.word	0x08011988

0800b71c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08a      	sub	sp, #40	@ 0x28
 800b720:	af04      	add	r7, sp, #16
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <tcp_output_control_segment+0x22>
 800b730:	4b1c      	ldr	r3, [pc, #112]	@ (800b7a4 <tcp_output_control_segment+0x88>)
 800b732:	f240 7287 	movw	r2, #1927	@ 0x787
 800b736:	491c      	ldr	r1, [pc, #112]	@ (800b7a8 <tcp_output_control_segment+0x8c>)
 800b738:	481c      	ldr	r0, [pc, #112]	@ (800b7ac <tcp_output_control_segment+0x90>)
 800b73a:	f003 fb95 	bl	800ee68 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	6879      	ldr	r1, [r7, #4]
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7fe ff42 	bl	800a5cc <tcp_route>
 800b748:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d102      	bne.n	800b756 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b750:	23fc      	movs	r3, #252	@ 0xfc
 800b752:	75fb      	strb	r3, [r7, #23]
 800b754:	e01c      	b.n	800b790 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d006      	beq.n	800b76a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	7adb      	ldrb	r3, [r3, #11]
 800b760:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	7a9b      	ldrb	r3, [r3, #10]
 800b766:	757b      	strb	r3, [r7, #21]
 800b768:	e003      	b.n	800b772 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b76a:	23ff      	movs	r3, #255	@ 0xff
 800b76c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b76e:	2300      	movs	r3, #0
 800b770:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b772:	7dba      	ldrb	r2, [r7, #22]
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	9302      	str	r3, [sp, #8]
 800b778:	2306      	movs	r3, #6
 800b77a:	9301      	str	r3, [sp, #4]
 800b77c:	7d7b      	ldrb	r3, [r7, #21]
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	4613      	mov	r3, r2
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	6879      	ldr	r1, [r7, #4]
 800b786:	68b8      	ldr	r0, [r7, #8]
 800b788:	f002 fa40 	bl	800dc0c <ip4_output_if>
 800b78c:	4603      	mov	r3, r0
 800b78e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b790:	68b8      	ldr	r0, [r7, #8]
 800b792:	f7fa fdd9 	bl	8006348 <pbuf_free>
  return err;
 800b796:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3718      	adds	r7, #24
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	08011360 	.word	0x08011360
 800b7a8:	08011ab8 	.word	0x08011ab8
 800b7ac:	080113b4 	.word	0x080113b4

0800b7b0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b7b0:	b590      	push	{r4, r7, lr}
 800b7b2:	b08b      	sub	sp, #44	@ 0x2c
 800b7b4:	af04      	add	r7, sp, #16
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d106      	bne.n	800b7d2 <tcp_rst+0x22>
 800b7c4:	4b1f      	ldr	r3, [pc, #124]	@ (800b844 <tcp_rst+0x94>)
 800b7c6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800b7ca:	491f      	ldr	r1, [pc, #124]	@ (800b848 <tcp_rst+0x98>)
 800b7cc:	481f      	ldr	r0, [pc, #124]	@ (800b84c <tcp_rst+0x9c>)
 800b7ce:	f003 fb4b 	bl	800ee68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d106      	bne.n	800b7e6 <tcp_rst+0x36>
 800b7d8:	4b1a      	ldr	r3, [pc, #104]	@ (800b844 <tcp_rst+0x94>)
 800b7da:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800b7de:	491c      	ldr	r1, [pc, #112]	@ (800b850 <tcp_rst+0xa0>)
 800b7e0:	481a      	ldr	r0, [pc, #104]	@ (800b84c <tcp_rst+0x9c>)
 800b7e2:	f003 fb41 	bl	800ee68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b7ea:	f246 0308 	movw	r3, #24584	@ 0x6008
 800b7ee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b7f0:	7dfb      	ldrb	r3, [r7, #23]
 800b7f2:	b29c      	uxth	r4, r3
 800b7f4:	68b8      	ldr	r0, [r7, #8]
 800b7f6:	f7f9 fa5f 	bl	8004cb8 <lwip_htonl>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	8abb      	ldrh	r3, [r7, #20]
 800b7fe:	9303      	str	r3, [sp, #12]
 800b800:	2314      	movs	r3, #20
 800b802:	9302      	str	r3, [sp, #8]
 800b804:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	4613      	mov	r3, r2
 800b80e:	2200      	movs	r2, #0
 800b810:	4621      	mov	r1, r4
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff fe94 	bl	800b540 <tcp_output_alloc_header_common>
 800b818:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00c      	beq.n	800b83a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b820:	7dfb      	ldrb	r3, [r7, #23]
 800b822:	2200      	movs	r2, #0
 800b824:	6939      	ldr	r1, [r7, #16]
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7ff ff3a 	bl	800b6a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	6939      	ldr	r1, [r7, #16]
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f7ff ff72 	bl	800b71c <tcp_output_control_segment>
 800b838:	e000      	b.n	800b83c <tcp_rst+0x8c>
    return;
 800b83a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b83c:	371c      	adds	r7, #28
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd90      	pop	{r4, r7, pc}
 800b842:	bf00      	nop
 800b844:	08011360 	.word	0x08011360
 800b848:	08011ae4 	.word	0x08011ae4
 800b84c:	080113b4 	.word	0x080113b4
 800b850:	08011b00 	.word	0x08011b00

0800b854 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b854:	b590      	push	{r4, r7, lr}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b85c:	2300      	movs	r3, #0
 800b85e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b860:	2300      	movs	r3, #0
 800b862:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d106      	bne.n	800b878 <tcp_send_empty_ack+0x24>
 800b86a:	4b28      	ldr	r3, [pc, #160]	@ (800b90c <tcp_send_empty_ack+0xb8>)
 800b86c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800b870:	4927      	ldr	r1, [pc, #156]	@ (800b910 <tcp_send_empty_ack+0xbc>)
 800b872:	4828      	ldr	r0, [pc, #160]	@ (800b914 <tcp_send_empty_ack+0xc0>)
 800b874:	f003 faf8 	bl	800ee68 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b878:	7dfb      	ldrb	r3, [r7, #23]
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	f003 0304 	and.w	r3, r3, #4
 800b882:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b884:	7d7b      	ldrb	r3, [r7, #21]
 800b886:	b29c      	uxth	r4, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7f9 fa13 	bl	8004cb8 <lwip_htonl>
 800b892:	4603      	mov	r3, r0
 800b894:	2200      	movs	r2, #0
 800b896:	4621      	mov	r1, r4
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f7ff fec3 	bl	800b624 <tcp_output_alloc_header>
 800b89e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d109      	bne.n	800b8ba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	8b5b      	ldrh	r3, [r3, #26]
 800b8aa:	f043 0303 	orr.w	r3, r3, #3
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b8b4:	f06f 0301 	mvn.w	r3, #1
 800b8b8:	e023      	b.n	800b902 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b8ba:	7dbb      	ldrb	r3, [r7, #22]
 800b8bc:	7dfa      	ldrb	r2, [r7, #23]
 800b8be:	6939      	ldr	r1, [r7, #16]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7ff feed 	bl	800b6a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	6939      	ldr	r1, [r7, #16]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff ff24 	bl	800b71c <tcp_output_control_segment>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b8d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d007      	beq.n	800b8f0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	8b5b      	ldrh	r3, [r3, #26]
 800b8e4:	f043 0303 	orr.w	r3, r3, #3
 800b8e8:	b29a      	uxth	r2, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	835a      	strh	r2, [r3, #26]
 800b8ee:	e006      	b.n	800b8fe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	8b5b      	ldrh	r3, [r3, #26]
 800b8f4:	f023 0303 	bic.w	r3, r3, #3
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b902:	4618      	mov	r0, r3
 800b904:	371c      	adds	r7, #28
 800b906:	46bd      	mov	sp, r7
 800b908:	bd90      	pop	{r4, r7, pc}
 800b90a:	bf00      	nop
 800b90c:	08011360 	.word	0x08011360
 800b910:	08011b1c 	.word	0x08011b1c
 800b914:	080113b4 	.word	0x080113b4

0800b918 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b918:	b590      	push	{r4, r7, lr}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b920:	2300      	movs	r3, #0
 800b922:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d106      	bne.n	800b938 <tcp_keepalive+0x20>
 800b92a:	4b18      	ldr	r3, [pc, #96]	@ (800b98c <tcp_keepalive+0x74>)
 800b92c:	f640 0224 	movw	r2, #2084	@ 0x824
 800b930:	4917      	ldr	r1, [pc, #92]	@ (800b990 <tcp_keepalive+0x78>)
 800b932:	4818      	ldr	r0, [pc, #96]	@ (800b994 <tcp_keepalive+0x7c>)
 800b934:	f003 fa98 	bl	800ee68 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	b29c      	uxth	r4, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b940:	3b01      	subs	r3, #1
 800b942:	4618      	mov	r0, r3
 800b944:	f7f9 f9b8 	bl	8004cb8 <lwip_htonl>
 800b948:	4603      	mov	r3, r0
 800b94a:	2200      	movs	r2, #0
 800b94c:	4621      	mov	r1, r4
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f7ff fe68 	bl	800b624 <tcp_output_alloc_header>
 800b954:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d102      	bne.n	800b962 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b95c:	f04f 33ff 	mov.w	r3, #4294967295
 800b960:	e010      	b.n	800b984 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b962:	7dfb      	ldrb	r3, [r7, #23]
 800b964:	2200      	movs	r2, #0
 800b966:	6939      	ldr	r1, [r7, #16]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7ff fe99 	bl	800b6a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3304      	adds	r3, #4
 800b974:	6939      	ldr	r1, [r7, #16]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7ff fed0 	bl	800b71c <tcp_output_control_segment>
 800b97c:	4603      	mov	r3, r0
 800b97e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b980:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b984:	4618      	mov	r0, r3
 800b986:	371c      	adds	r7, #28
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd90      	pop	{r4, r7, pc}
 800b98c:	08011360 	.word	0x08011360
 800b990:	08011b3c 	.word	0x08011b3c
 800b994:	080113b4 	.word	0x080113b4

0800b998 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b998:	b590      	push	{r4, r7, lr}
 800b99a:	b08b      	sub	sp, #44	@ 0x2c
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d106      	bne.n	800b9ba <tcp_zero_window_probe+0x22>
 800b9ac:	4b4c      	ldr	r3, [pc, #304]	@ (800bae0 <tcp_zero_window_probe+0x148>)
 800b9ae:	f640 024f 	movw	r2, #2127	@ 0x84f
 800b9b2:	494c      	ldr	r1, [pc, #304]	@ (800bae4 <tcp_zero_window_probe+0x14c>)
 800b9b4:	484c      	ldr	r0, [pc, #304]	@ (800bae8 <tcp_zero_window_probe+0x150>)
 800b9b6:	f003 fa57 	bl	800ee68 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9be:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d101      	bne.n	800b9ca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	e086      	b.n	800bad8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b9d0:	2bff      	cmp	r3, #255	@ 0xff
 800b9d2:	d007      	beq.n	800b9e4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b9da:	3301      	adds	r3, #1
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	899b      	ldrh	r3, [r3, #12]
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7f9 f94d 	bl	8004c8c <lwip_htons>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	f003 0301 	and.w	r3, r3, #1
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d005      	beq.n	800ba0a <tcp_zero_window_probe+0x72>
 800b9fe:	6a3b      	ldr	r3, [r7, #32]
 800ba00:	891b      	ldrh	r3, [r3, #8]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d101      	bne.n	800ba0a <tcp_zero_window_probe+0x72>
 800ba06:	2301      	movs	r3, #1
 800ba08:	e000      	b.n	800ba0c <tcp_zero_window_probe+0x74>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ba0e:	7ffb      	ldrb	r3, [r7, #31]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	bf0c      	ite	eq
 800ba14:	2301      	moveq	r3, #1
 800ba16:	2300      	movne	r3, #0
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ba1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba20:	b299      	uxth	r1, r3
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	8bba      	ldrh	r2, [r7, #28]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7ff fdfa 	bl	800b624 <tcp_output_alloc_header>
 800ba30:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d102      	bne.n	800ba3e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ba38:	f04f 33ff 	mov.w	r3, #4294967295
 800ba3c:	e04c      	b.n	800bad8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ba44:	7ffb      	ldrb	r3, [r7, #31]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d011      	beq.n	800ba6e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	899b      	ldrh	r3, [r3, #12]
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	b21b      	sxth	r3, r3
 800ba52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ba56:	b21c      	sxth	r4, r3
 800ba58:	2011      	movs	r0, #17
 800ba5a:	f7f9 f917 	bl	8004c8c <lwip_htons>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	b21b      	sxth	r3, r3
 800ba62:	4323      	orrs	r3, r4
 800ba64:	b21b      	sxth	r3, r3
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	819a      	strh	r2, [r3, #12]
 800ba6c:	e010      	b.n	800ba90 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	3314      	adds	r3, #20
 800ba74:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	6858      	ldr	r0, [r3, #4]
 800ba7a:	6a3b      	ldr	r3, [r7, #32]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	891a      	ldrh	r2, [r3, #8]
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	891b      	ldrh	r3, [r3, #8]
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	2201      	movs	r2, #1
 800ba8a:	6939      	ldr	r1, [r7, #16]
 800ba8c:	f7fa fe56 	bl	800673c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7f9 f90e 	bl	8004cb8 <lwip_htonl>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	3301      	adds	r3, #1
 800baa0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	da02      	bge.n	800bab4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bab8:	2200      	movs	r2, #0
 800baba:	69b9      	ldr	r1, [r7, #24]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7ff fdef 	bl	800b6a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	3304      	adds	r3, #4
 800bac8:	69b9      	ldr	r1, [r7, #24]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7ff fe26 	bl	800b71c <tcp_output_control_segment>
 800bad0:	4603      	mov	r3, r0
 800bad2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bad4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	372c      	adds	r7, #44	@ 0x2c
 800badc:	46bd      	mov	sp, r7
 800bade:	bd90      	pop	{r4, r7, pc}
 800bae0:	08011360 	.word	0x08011360
 800bae4:	08011b58 	.word	0x08011b58
 800bae8:	080113b4 	.word	0x080113b4

0800baec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800baf4:	f7fa ff10 	bl	8006918 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800baf8:	4b0a      	ldr	r3, [pc, #40]	@ (800bb24 <tcpip_tcp_timer+0x38>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d103      	bne.n	800bb08 <tcpip_tcp_timer+0x1c>
 800bb00:	4b09      	ldr	r3, [pc, #36]	@ (800bb28 <tcpip_tcp_timer+0x3c>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d005      	beq.n	800bb14 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bb08:	2200      	movs	r2, #0
 800bb0a:	4908      	ldr	r1, [pc, #32]	@ (800bb2c <tcpip_tcp_timer+0x40>)
 800bb0c:	20fa      	movs	r0, #250	@ 0xfa
 800bb0e:	f000 f8f3 	bl	800bcf8 <sys_timeout>
 800bb12:	e003      	b.n	800bb1c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bb14:	4b06      	ldr	r3, [pc, #24]	@ (800bb30 <tcpip_tcp_timer+0x44>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	601a      	str	r2, [r3, #0]
  }
}
 800bb1a:	bf00      	nop
 800bb1c:	bf00      	nop
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	20008294 	.word	0x20008294
 800bb28:	20008298 	.word	0x20008298
 800bb2c:	0800baed 	.word	0x0800baed
 800bb30:	200082e0 	.word	0x200082e0

0800bb34 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bb38:	4b0a      	ldr	r3, [pc, #40]	@ (800bb64 <tcp_timer_needed+0x30>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10f      	bne.n	800bb60 <tcp_timer_needed+0x2c>
 800bb40:	4b09      	ldr	r3, [pc, #36]	@ (800bb68 <tcp_timer_needed+0x34>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d103      	bne.n	800bb50 <tcp_timer_needed+0x1c>
 800bb48:	4b08      	ldr	r3, [pc, #32]	@ (800bb6c <tcp_timer_needed+0x38>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d007      	beq.n	800bb60 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bb50:	4b04      	ldr	r3, [pc, #16]	@ (800bb64 <tcp_timer_needed+0x30>)
 800bb52:	2201      	movs	r2, #1
 800bb54:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bb56:	2200      	movs	r2, #0
 800bb58:	4905      	ldr	r1, [pc, #20]	@ (800bb70 <tcp_timer_needed+0x3c>)
 800bb5a:	20fa      	movs	r0, #250	@ 0xfa
 800bb5c:	f000 f8cc 	bl	800bcf8 <sys_timeout>
  }
}
 800bb60:	bf00      	nop
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	200082e0 	.word	0x200082e0
 800bb68:	20008294 	.word	0x20008294
 800bb6c:	20008298 	.word	0x20008298
 800bb70:	0800baed 	.word	0x0800baed

0800bb74 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bb80:	2006      	movs	r0, #6
 800bb82:	f7f9 fcfb 	bl	800557c <memp_malloc>
 800bb86:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d109      	bne.n	800bba2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d151      	bne.n	800bc38 <sys_timeout_abs+0xc4>
 800bb94:	4b2a      	ldr	r3, [pc, #168]	@ (800bc40 <sys_timeout_abs+0xcc>)
 800bb96:	22be      	movs	r2, #190	@ 0xbe
 800bb98:	492a      	ldr	r1, [pc, #168]	@ (800bc44 <sys_timeout_abs+0xd0>)
 800bb9a:	482b      	ldr	r0, [pc, #172]	@ (800bc48 <sys_timeout_abs+0xd4>)
 800bb9c:	f003 f964 	bl	800ee68 <iprintf>
    return;
 800bba0:	e04a      	b.n	800bc38 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bbba:	4b24      	ldr	r3, [pc, #144]	@ (800bc4c <sys_timeout_abs+0xd8>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d103      	bne.n	800bbca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bbc2:	4a22      	ldr	r2, [pc, #136]	@ (800bc4c <sys_timeout_abs+0xd8>)
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	6013      	str	r3, [r2, #0]
    return;
 800bbc8:	e037      	b.n	800bc3a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	685a      	ldr	r2, [r3, #4]
 800bbce:	4b1f      	ldr	r3, [pc, #124]	@ (800bc4c <sys_timeout_abs+0xd8>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	0fdb      	lsrs	r3, r3, #31
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d007      	beq.n	800bbf2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bbe2:	4b1a      	ldr	r3, [pc, #104]	@ (800bc4c <sys_timeout_abs+0xd8>)
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bbea:	4a18      	ldr	r2, [pc, #96]	@ (800bc4c <sys_timeout_abs+0xd8>)
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	6013      	str	r3, [r2, #0]
 800bbf0:	e023      	b.n	800bc3a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bbf2:	4b16      	ldr	r3, [pc, #88]	@ (800bc4c <sys_timeout_abs+0xd8>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	617b      	str	r3, [r7, #20]
 800bbf8:	e01a      	b.n	800bc30 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00b      	beq.n	800bc1a <sys_timeout_abs+0xa6>
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	685a      	ldr	r2, [r3, #4]
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	0fdb      	lsrs	r3, r3, #31
 800bc10:	f003 0301 	and.w	r3, r3, #1
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d007      	beq.n	800bc2a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	601a      	str	r2, [r3, #0]
        break;
 800bc28:	e007      	b.n	800bc3a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	617b      	str	r3, [r7, #20]
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1e1      	bne.n	800bbfa <sys_timeout_abs+0x86>
 800bc36:	e000      	b.n	800bc3a <sys_timeout_abs+0xc6>
    return;
 800bc38:	bf00      	nop
      }
    }
  }
}
 800bc3a:	3718      	adds	r7, #24
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	08011b7c 	.word	0x08011b7c
 800bc44:	08011bb0 	.word	0x08011bb0
 800bc48:	08011bf0 	.word	0x08011bf0
 800bc4c:	200082d8 	.word	0x200082d8

0800bc50 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	4798      	blx	r3

  now = sys_now();
 800bc62:	f7f8 fe13 	bl	800488c <sys_now>
 800bc66:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bcac <lwip_cyclic_timer+0x5c>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4413      	add	r3, r2
 800bc72:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	0fdb      	lsrs	r3, r3, #31
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d009      	beq.n	800bc9a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	4907      	ldr	r1, [pc, #28]	@ (800bcb0 <lwip_cyclic_timer+0x60>)
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff ff6e 	bl	800bb74 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bc98:	e004      	b.n	800bca4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	4904      	ldr	r1, [pc, #16]	@ (800bcb0 <lwip_cyclic_timer+0x60>)
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f7ff ff68 	bl	800bb74 <sys_timeout_abs>
}
 800bca4:	bf00      	nop
 800bca6:	3718      	adds	r7, #24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	200082dc 	.word	0x200082dc
 800bcb0:	0800bc51 	.word	0x0800bc51

0800bcb4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bcba:	2301      	movs	r3, #1
 800bcbc:	607b      	str	r3, [r7, #4]
 800bcbe:	e00e      	b.n	800bcde <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bcc0:	4a0b      	ldr	r2, [pc, #44]	@ (800bcf0 <sys_timeouts_init+0x3c>)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	4a08      	ldr	r2, [pc, #32]	@ (800bcf0 <sys_timeouts_init+0x3c>)
 800bcce:	4413      	add	r3, r2
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	4908      	ldr	r1, [pc, #32]	@ (800bcf4 <sys_timeouts_init+0x40>)
 800bcd4:	f000 f810 	bl	800bcf8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	607b      	str	r3, [r7, #4]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d9ed      	bls.n	800bcc0 <sys_timeouts_init+0xc>
  }
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	08012768 	.word	0x08012768
 800bcf4:	0800bc51 	.word	0x0800bc51

0800bcf8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd0a:	d306      	bcc.n	800bd1a <sys_timeout+0x22>
 800bd0c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd38 <sys_timeout+0x40>)
 800bd0e:	f240 1229 	movw	r2, #297	@ 0x129
 800bd12:	490a      	ldr	r1, [pc, #40]	@ (800bd3c <sys_timeout+0x44>)
 800bd14:	480a      	ldr	r0, [pc, #40]	@ (800bd40 <sys_timeout+0x48>)
 800bd16:	f003 f8a7 	bl	800ee68 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bd1a:	f7f8 fdb7 	bl	800488c <sys_now>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4413      	add	r3, r2
 800bd24:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	68b9      	ldr	r1, [r7, #8]
 800bd2a:	6978      	ldr	r0, [r7, #20]
 800bd2c:	f7ff ff22 	bl	800bb74 <sys_timeout_abs>
#endif
}
 800bd30:	bf00      	nop
 800bd32:	3718      	adds	r7, #24
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	08011b7c 	.word	0x08011b7c
 800bd3c:	08011c18 	.word	0x08011c18
 800bd40:	08011bf0 	.word	0x08011bf0

0800bd44 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bd4a:	f7f8 fd9f 	bl	800488c <sys_now>
 800bd4e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bd50:	4b1a      	ldr	r3, [pc, #104]	@ (800bdbc <sys_check_timeouts+0x78>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d001      	beq.n	800bd5e <sys_check_timeouts+0x1a>
 800bd5a:	f7f9 ffbb 	bl	8005cd4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bd5e:	4b18      	ldr	r3, [pc, #96]	@ (800bdc0 <sys_check_timeouts+0x7c>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d022      	beq.n	800bdb0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	0fdb      	lsrs	r3, r3, #31
 800bd74:	f003 0301 	and.w	r3, r3, #1
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d11a      	bne.n	800bdb4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a0f      	ldr	r2, [pc, #60]	@ (800bdc0 <sys_check_timeouts+0x7c>)
 800bd84:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	4a0b      	ldr	r2, [pc, #44]	@ (800bdc4 <sys_check_timeouts+0x80>)
 800bd98:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bd9a:	68b9      	ldr	r1, [r7, #8]
 800bd9c:	2006      	movs	r0, #6
 800bd9e:	f7f9 fc5d 	bl	800565c <memp_free>
    if (handler != NULL) {
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d0d3      	beq.n	800bd50 <sys_check_timeouts+0xc>
      handler(arg);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6838      	ldr	r0, [r7, #0]
 800bdac:	4798      	blx	r3
  do {
 800bdae:	e7cf      	b.n	800bd50 <sys_check_timeouts+0xc>
      return;
 800bdb0:	bf00      	nop
 800bdb2:	e000      	b.n	800bdb6 <sys_check_timeouts+0x72>
      return;
 800bdb4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	20008285 	.word	0x20008285
 800bdc0:	200082d8 	.word	0x200082d8
 800bdc4:	200082dc 	.word	0x200082dc

0800bdc8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bdcc:	f002 ff4c 	bl	800ec68 <rand>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	4b01      	ldr	r3, [pc, #4]	@ (800bde8 <udp_init+0x20>)
 800bde2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bde4:	bf00      	nop
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	20000028 	.word	0x20000028

0800bdec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bdf6:	4b17      	ldr	r3, [pc, #92]	@ (800be54 <udp_new_port+0x68>)
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	1c5a      	adds	r2, r3, #1
 800bdfc:	b291      	uxth	r1, r2
 800bdfe:	4a15      	ldr	r2, [pc, #84]	@ (800be54 <udp_new_port+0x68>)
 800be00:	8011      	strh	r1, [r2, #0]
 800be02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be06:	4293      	cmp	r3, r2
 800be08:	d103      	bne.n	800be12 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800be0a:	4b12      	ldr	r3, [pc, #72]	@ (800be54 <udp_new_port+0x68>)
 800be0c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800be10:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be12:	4b11      	ldr	r3, [pc, #68]	@ (800be58 <udp_new_port+0x6c>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	603b      	str	r3, [r7, #0]
 800be18:	e011      	b.n	800be3e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	8a5a      	ldrh	r2, [r3, #18]
 800be1e:	4b0d      	ldr	r3, [pc, #52]	@ (800be54 <udp_new_port+0x68>)
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	429a      	cmp	r2, r3
 800be24:	d108      	bne.n	800be38 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800be26:	88fb      	ldrh	r3, [r7, #6]
 800be28:	3301      	adds	r3, #1
 800be2a:	80fb      	strh	r3, [r7, #6]
 800be2c:	88fb      	ldrh	r3, [r7, #6]
 800be2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be32:	d3e0      	bcc.n	800bdf6 <udp_new_port+0xa>
        return 0;
 800be34:	2300      	movs	r3, #0
 800be36:	e007      	b.n	800be48 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	603b      	str	r3, [r7, #0]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1ea      	bne.n	800be1a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800be44:	4b03      	ldr	r3, [pc, #12]	@ (800be54 <udp_new_port+0x68>)
 800be46:	881b      	ldrh	r3, [r3, #0]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	20000028 	.word	0x20000028
 800be58:	200082e4 	.word	0x200082e4

0800be5c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	4613      	mov	r3, r2
 800be68:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d105      	bne.n	800be7c <udp_input_local_match+0x20>
 800be70:	4b27      	ldr	r3, [pc, #156]	@ (800bf10 <udp_input_local_match+0xb4>)
 800be72:	2287      	movs	r2, #135	@ 0x87
 800be74:	4927      	ldr	r1, [pc, #156]	@ (800bf14 <udp_input_local_match+0xb8>)
 800be76:	4828      	ldr	r0, [pc, #160]	@ (800bf18 <udp_input_local_match+0xbc>)
 800be78:	f002 fff6 	bl	800ee68 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d105      	bne.n	800be8e <udp_input_local_match+0x32>
 800be82:	4b23      	ldr	r3, [pc, #140]	@ (800bf10 <udp_input_local_match+0xb4>)
 800be84:	2288      	movs	r2, #136	@ 0x88
 800be86:	4925      	ldr	r1, [pc, #148]	@ (800bf1c <udp_input_local_match+0xc0>)
 800be88:	4823      	ldr	r0, [pc, #140]	@ (800bf18 <udp_input_local_match+0xbc>)
 800be8a:	f002 ffed 	bl	800ee68 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	7a1b      	ldrb	r3, [r3, #8]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00b      	beq.n	800beae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	7a1a      	ldrb	r2, [r3, #8]
 800be9a:	4b21      	ldr	r3, [pc, #132]	@ (800bf20 <udp_input_local_match+0xc4>)
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bea2:	3301      	adds	r3, #1
 800bea4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d001      	beq.n	800beae <udp_input_local_match+0x52>
    return 0;
 800beaa:	2300      	movs	r3, #0
 800beac:	e02b      	b.n	800bf06 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800beae:	79fb      	ldrb	r3, [r7, #7]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d018      	beq.n	800bee6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d013      	beq.n	800bee2 <udp_input_local_match+0x86>
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00f      	beq.n	800bee2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bec2:	4b17      	ldr	r3, [pc, #92]	@ (800bf20 <udp_input_local_match+0xc4>)
 800bec4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beca:	d00a      	beq.n	800bee2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	4b13      	ldr	r3, [pc, #76]	@ (800bf20 <udp_input_local_match+0xc4>)
 800bed2:	695b      	ldr	r3, [r3, #20]
 800bed4:	405a      	eors	r2, r3
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	3308      	adds	r3, #8
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d110      	bne.n	800bf04 <udp_input_local_match+0xa8>
          return 1;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e00f      	b.n	800bf06 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d009      	beq.n	800bf00 <udp_input_local_match+0xa4>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d005      	beq.n	800bf00 <udp_input_local_match+0xa4>
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	4b09      	ldr	r3, [pc, #36]	@ (800bf20 <udp_input_local_match+0xc4>)
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	429a      	cmp	r2, r3
 800befe:	d101      	bne.n	800bf04 <udp_input_local_match+0xa8>
        return 1;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e000      	b.n	800bf06 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	08011c64 	.word	0x08011c64
 800bf14:	08011c94 	.word	0x08011c94
 800bf18:	08011cb8 	.word	0x08011cb8
 800bf1c:	08011ce0 	.word	0x08011ce0
 800bf20:	20004d18 	.word	0x20004d18

0800bf24 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bf24:	b590      	push	{r4, r7, lr}
 800bf26:	b08d      	sub	sp, #52	@ 0x34
 800bf28:	af02      	add	r7, sp, #8
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d105      	bne.n	800bf44 <udp_input+0x20>
 800bf38:	4b7c      	ldr	r3, [pc, #496]	@ (800c12c <udp_input+0x208>)
 800bf3a:	22cf      	movs	r2, #207	@ 0xcf
 800bf3c:	497c      	ldr	r1, [pc, #496]	@ (800c130 <udp_input+0x20c>)
 800bf3e:	487d      	ldr	r0, [pc, #500]	@ (800c134 <udp_input+0x210>)
 800bf40:	f002 ff92 	bl	800ee68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d105      	bne.n	800bf56 <udp_input+0x32>
 800bf4a:	4b78      	ldr	r3, [pc, #480]	@ (800c12c <udp_input+0x208>)
 800bf4c:	22d0      	movs	r2, #208	@ 0xd0
 800bf4e:	497a      	ldr	r1, [pc, #488]	@ (800c138 <udp_input+0x214>)
 800bf50:	4878      	ldr	r0, [pc, #480]	@ (800c134 <udp_input+0x210>)
 800bf52:	f002 ff89 	bl	800ee68 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	895b      	ldrh	r3, [r3, #10]
 800bf5a:	2b07      	cmp	r3, #7
 800bf5c:	d803      	bhi.n	800bf66 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f7fa f9f2 	bl	8006348 <pbuf_free>
    goto end;
 800bf64:	e0de      	b.n	800c124 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bf6c:	4b73      	ldr	r3, [pc, #460]	@ (800c13c <udp_input+0x218>)
 800bf6e:	695b      	ldr	r3, [r3, #20]
 800bf70:	4a72      	ldr	r2, [pc, #456]	@ (800c13c <udp_input+0x218>)
 800bf72:	6812      	ldr	r2, [r2, #0]
 800bf74:	4611      	mov	r1, r2
 800bf76:	4618      	mov	r0, r3
 800bf78:	f001 ff20 	bl	800ddbc <ip4_addr_isbroadcast_u32>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	881b      	ldrh	r3, [r3, #0]
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7f8 fe80 	bl	8004c8c <lwip_htons>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	885b      	ldrh	r3, [r3, #2]
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7f8 fe78 	bl	8004c8c <lwip_htons>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfac:	4b64      	ldr	r3, [pc, #400]	@ (800c140 <udp_input+0x21c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfb2:	e054      	b.n	800c05e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb6:	8a5b      	ldrh	r3, [r3, #18]
 800bfb8:	89fa      	ldrh	r2, [r7, #14]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d14a      	bne.n	800c054 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bfbe:	7cfb      	ldrb	r3, [r7, #19]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bfc6:	f7ff ff49 	bl	800be5c <udp_input_local_match>
 800bfca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d041      	beq.n	800c054 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd2:	7c1b      	ldrb	r3, [r3, #16]
 800bfd4:	f003 0304 	and.w	r3, r3, #4
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d11d      	bne.n	800c018 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d102      	bne.n	800bfe8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe4:	61fb      	str	r3, [r7, #28]
 800bfe6:	e017      	b.n	800c018 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bfe8:	7cfb      	ldrb	r3, [r7, #19]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d014      	beq.n	800c018 <udp_input+0xf4>
 800bfee:	4b53      	ldr	r3, [pc, #332]	@ (800c13c <udp_input+0x218>)
 800bff0:	695b      	ldr	r3, [r3, #20]
 800bff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff6:	d10f      	bne.n	800c018 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	3304      	adds	r3, #4
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	429a      	cmp	r2, r3
 800c004:	d008      	beq.n	800c018 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	3304      	adds	r3, #4
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	429a      	cmp	r2, r3
 800c012:	d101      	bne.n	800c018 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c016:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01a:	8a9b      	ldrh	r3, [r3, #20]
 800c01c:	8a3a      	ldrh	r2, [r7, #16]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d118      	bne.n	800c054 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c024:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c026:	2b00      	cmp	r3, #0
 800c028:	d005      	beq.n	800c036 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	4b43      	ldr	r3, [pc, #268]	@ (800c13c <udp_input+0x218>)
 800c030:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c032:	429a      	cmp	r2, r3
 800c034:	d10e      	bne.n	800c054 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c036:	6a3b      	ldr	r3, [r7, #32]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d014      	beq.n	800c066 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03e:	68da      	ldr	r2, [r3, #12]
 800c040:	6a3b      	ldr	r3, [r7, #32]
 800c042:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c044:	4b3e      	ldr	r3, [pc, #248]	@ (800c140 <udp_input+0x21c>)
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c04c:	4a3c      	ldr	r2, [pc, #240]	@ (800c140 <udp_input+0x21c>)
 800c04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c050:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c052:	e008      	b.n	800c066 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c056:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1a7      	bne.n	800bfb4 <udp_input+0x90>
 800c064:	e000      	b.n	800c068 <udp_input+0x144>
        break;
 800c066:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <udp_input+0x15a>
    for_us = 1;
 800c078:	2301      	movs	r3, #1
 800c07a:	76fb      	strb	r3, [r7, #27]
 800c07c:	e00a      	b.n	800c094 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	3304      	adds	r3, #4
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	4b2d      	ldr	r3, [pc, #180]	@ (800c13c <udp_input+0x218>)
 800c086:	695b      	ldr	r3, [r3, #20]
 800c088:	429a      	cmp	r2, r3
 800c08a:	bf0c      	ite	eq
 800c08c:	2301      	moveq	r3, #1
 800c08e:	2300      	movne	r3, #0
 800c090:	b2db      	uxtb	r3, r3
 800c092:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c094:	7efb      	ldrb	r3, [r7, #27]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d041      	beq.n	800c11e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c09a:	2108      	movs	r1, #8
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7fa f8cd 	bl	800623c <pbuf_remove_header>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00a      	beq.n	800c0be <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c0a8:	4b20      	ldr	r3, [pc, #128]	@ (800c12c <udp_input+0x208>)
 800c0aa:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c0ae:	4925      	ldr	r1, [pc, #148]	@ (800c144 <udp_input+0x220>)
 800c0b0:	4820      	ldr	r0, [pc, #128]	@ (800c134 <udp_input+0x210>)
 800c0b2:	f002 fed9 	bl	800ee68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7fa f946 	bl	8006348 <pbuf_free>
      goto end;
 800c0bc:	e032      	b.n	800c124 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d012      	beq.n	800c0ea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c6:	699b      	ldr	r3, [r3, #24]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00a      	beq.n	800c0e2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ce:	699c      	ldr	r4, [r3, #24]
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d2:	69d8      	ldr	r0, [r3, #28]
 800c0d4:	8a3b      	ldrh	r3, [r7, #16]
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	4b1b      	ldr	r3, [pc, #108]	@ (800c148 <udp_input+0x224>)
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c0e0:	e021      	b.n	800c126 <udp_input+0x202>
        pbuf_free(p);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7fa f930 	bl	8006348 <pbuf_free>
        goto end;
 800c0e8:	e01c      	b.n	800c124 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c0ea:	7cfb      	ldrb	r3, [r7, #19]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d112      	bne.n	800c116 <udp_input+0x1f2>
 800c0f0:	4b12      	ldr	r3, [pc, #72]	@ (800c13c <udp_input+0x218>)
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c0f8:	2be0      	cmp	r3, #224	@ 0xe0
 800c0fa:	d00c      	beq.n	800c116 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c0fc:	4b0f      	ldr	r3, [pc, #60]	@ (800c13c <udp_input+0x218>)
 800c0fe:	899b      	ldrh	r3, [r3, #12]
 800c100:	3308      	adds	r3, #8
 800c102:	b29b      	uxth	r3, r3
 800c104:	b21b      	sxth	r3, r3
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7fa f90a 	bl	8006322 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c10e:	2103      	movs	r1, #3
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f001 fb33 	bl	800d77c <icmp_dest_unreach>
      pbuf_free(p);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7fa f916 	bl	8006348 <pbuf_free>
  return;
 800c11c:	e003      	b.n	800c126 <udp_input+0x202>
    pbuf_free(p);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7fa f912 	bl	8006348 <pbuf_free>
  return;
 800c124:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c126:	372c      	adds	r7, #44	@ 0x2c
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd90      	pop	{r4, r7, pc}
 800c12c:	08011c64 	.word	0x08011c64
 800c130:	08011d08 	.word	0x08011d08
 800c134:	08011cb8 	.word	0x08011cb8
 800c138:	08011d20 	.word	0x08011d20
 800c13c:	20004d18 	.word	0x20004d18
 800c140:	200082e4 	.word	0x200082e4
 800c144:	08011d3c 	.word	0x08011d3c
 800c148:	20004d28 	.word	0x20004d28

0800c14c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b088      	sub	sp, #32
 800c150:	af02      	add	r7, sp, #8
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
 800c158:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d109      	bne.n	800c174 <udp_sendto+0x28>
 800c160:	4b23      	ldr	r3, [pc, #140]	@ (800c1f0 <udp_sendto+0xa4>)
 800c162:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c166:	4923      	ldr	r1, [pc, #140]	@ (800c1f4 <udp_sendto+0xa8>)
 800c168:	4823      	ldr	r0, [pc, #140]	@ (800c1f8 <udp_sendto+0xac>)
 800c16a:	f002 fe7d 	bl	800ee68 <iprintf>
 800c16e:	f06f 030f 	mvn.w	r3, #15
 800c172:	e038      	b.n	800c1e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d109      	bne.n	800c18e <udp_sendto+0x42>
 800c17a:	4b1d      	ldr	r3, [pc, #116]	@ (800c1f0 <udp_sendto+0xa4>)
 800c17c:	f240 2219 	movw	r2, #537	@ 0x219
 800c180:	491e      	ldr	r1, [pc, #120]	@ (800c1fc <udp_sendto+0xb0>)
 800c182:	481d      	ldr	r0, [pc, #116]	@ (800c1f8 <udp_sendto+0xac>)
 800c184:	f002 fe70 	bl	800ee68 <iprintf>
 800c188:	f06f 030f 	mvn.w	r3, #15
 800c18c:	e02b      	b.n	800c1e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d109      	bne.n	800c1a8 <udp_sendto+0x5c>
 800c194:	4b16      	ldr	r3, [pc, #88]	@ (800c1f0 <udp_sendto+0xa4>)
 800c196:	f240 221a 	movw	r2, #538	@ 0x21a
 800c19a:	4919      	ldr	r1, [pc, #100]	@ (800c200 <udp_sendto+0xb4>)
 800c19c:	4816      	ldr	r0, [pc, #88]	@ (800c1f8 <udp_sendto+0xac>)
 800c19e:	f002 fe63 	bl	800ee68 <iprintf>
 800c1a2:	f06f 030f 	mvn.w	r3, #15
 800c1a6:	e01e      	b.n	800c1e6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	7a1b      	ldrb	r3, [r3, #8]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d006      	beq.n	800c1be <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	7a1b      	ldrb	r3, [r3, #8]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7f9 fd67 	bl	8005c88 <netif_get_by_index>
 800c1ba:	6178      	str	r0, [r7, #20]
 800c1bc:	e003      	b.n	800c1c6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f001 fb66 	bl	800d890 <ip4_route>
 800c1c4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d102      	bne.n	800c1d2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c1cc:	f06f 0303 	mvn.w	r3, #3
 800c1d0:	e009      	b.n	800c1e6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c1d2:	887a      	ldrh	r2, [r7, #2]
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	9300      	str	r3, [sp, #0]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	68b9      	ldr	r1, [r7, #8]
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f000 f810 	bl	800c204 <udp_sendto_if>
 800c1e4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	08011c64 	.word	0x08011c64
 800c1f4:	08011d88 	.word	0x08011d88
 800c1f8:	08011cb8 	.word	0x08011cb8
 800c1fc:	08011da0 	.word	0x08011da0
 800c200:	08011dbc 	.word	0x08011dbc

0800c204 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b088      	sub	sp, #32
 800c208:	af02      	add	r7, sp, #8
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
 800c210:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d109      	bne.n	800c22c <udp_sendto_if+0x28>
 800c218:	4b2e      	ldr	r3, [pc, #184]	@ (800c2d4 <udp_sendto_if+0xd0>)
 800c21a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c21e:	492e      	ldr	r1, [pc, #184]	@ (800c2d8 <udp_sendto_if+0xd4>)
 800c220:	482e      	ldr	r0, [pc, #184]	@ (800c2dc <udp_sendto_if+0xd8>)
 800c222:	f002 fe21 	bl	800ee68 <iprintf>
 800c226:	f06f 030f 	mvn.w	r3, #15
 800c22a:	e04f      	b.n	800c2cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d109      	bne.n	800c246 <udp_sendto_if+0x42>
 800c232:	4b28      	ldr	r3, [pc, #160]	@ (800c2d4 <udp_sendto_if+0xd0>)
 800c234:	f240 2281 	movw	r2, #641	@ 0x281
 800c238:	4929      	ldr	r1, [pc, #164]	@ (800c2e0 <udp_sendto_if+0xdc>)
 800c23a:	4828      	ldr	r0, [pc, #160]	@ (800c2dc <udp_sendto_if+0xd8>)
 800c23c:	f002 fe14 	bl	800ee68 <iprintf>
 800c240:	f06f 030f 	mvn.w	r3, #15
 800c244:	e042      	b.n	800c2cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d109      	bne.n	800c260 <udp_sendto_if+0x5c>
 800c24c:	4b21      	ldr	r3, [pc, #132]	@ (800c2d4 <udp_sendto_if+0xd0>)
 800c24e:	f240 2282 	movw	r2, #642	@ 0x282
 800c252:	4924      	ldr	r1, [pc, #144]	@ (800c2e4 <udp_sendto_if+0xe0>)
 800c254:	4821      	ldr	r0, [pc, #132]	@ (800c2dc <udp_sendto_if+0xd8>)
 800c256:	f002 fe07 	bl	800ee68 <iprintf>
 800c25a:	f06f 030f 	mvn.w	r3, #15
 800c25e:	e035      	b.n	800c2cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c260:	6a3b      	ldr	r3, [r7, #32]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d109      	bne.n	800c27a <udp_sendto_if+0x76>
 800c266:	4b1b      	ldr	r3, [pc, #108]	@ (800c2d4 <udp_sendto_if+0xd0>)
 800c268:	f240 2283 	movw	r2, #643	@ 0x283
 800c26c:	491e      	ldr	r1, [pc, #120]	@ (800c2e8 <udp_sendto_if+0xe4>)
 800c26e:	481b      	ldr	r0, [pc, #108]	@ (800c2dc <udp_sendto_if+0xd8>)
 800c270:	f002 fdfa 	bl	800ee68 <iprintf>
 800c274:	f06f 030f 	mvn.w	r3, #15
 800c278:	e028      	b.n	800c2cc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d009      	beq.n	800c294 <udp_sendto_if+0x90>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d005      	beq.n	800c294 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c290:	2be0      	cmp	r3, #224	@ 0xe0
 800c292:	d103      	bne.n	800c29c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c294:	6a3b      	ldr	r3, [r7, #32]
 800c296:	3304      	adds	r3, #4
 800c298:	617b      	str	r3, [r7, #20]
 800c29a:	e00b      	b.n	800c2b4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	6a3b      	ldr	r3, [r7, #32]
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d002      	beq.n	800c2b0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c2aa:	f06f 0303 	mvn.w	r3, #3
 800c2ae:	e00d      	b.n	800c2cc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c2b4:	887a      	ldrh	r2, [r7, #2]
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	9301      	str	r3, [sp, #4]
 800c2ba:	6a3b      	ldr	r3, [r7, #32]
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	68b9      	ldr	r1, [r7, #8]
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f000 f811 	bl	800c2ec <udp_sendto_if_src>
 800c2ca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3718      	adds	r7, #24
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	08011c64 	.word	0x08011c64
 800c2d8:	08011dd8 	.word	0x08011dd8
 800c2dc:	08011cb8 	.word	0x08011cb8
 800c2e0:	08011df4 	.word	0x08011df4
 800c2e4:	08011e10 	.word	0x08011e10
 800c2e8:	08011e30 	.word	0x08011e30

0800c2ec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08c      	sub	sp, #48	@ 0x30
 800c2f0:	af04      	add	r7, sp, #16
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
 800c2f8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d109      	bne.n	800c314 <udp_sendto_if_src+0x28>
 800c300:	4b65      	ldr	r3, [pc, #404]	@ (800c498 <udp_sendto_if_src+0x1ac>)
 800c302:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c306:	4965      	ldr	r1, [pc, #404]	@ (800c49c <udp_sendto_if_src+0x1b0>)
 800c308:	4865      	ldr	r0, [pc, #404]	@ (800c4a0 <udp_sendto_if_src+0x1b4>)
 800c30a:	f002 fdad 	bl	800ee68 <iprintf>
 800c30e:	f06f 030f 	mvn.w	r3, #15
 800c312:	e0bc      	b.n	800c48e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d109      	bne.n	800c32e <udp_sendto_if_src+0x42>
 800c31a:	4b5f      	ldr	r3, [pc, #380]	@ (800c498 <udp_sendto_if_src+0x1ac>)
 800c31c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800c320:	4960      	ldr	r1, [pc, #384]	@ (800c4a4 <udp_sendto_if_src+0x1b8>)
 800c322:	485f      	ldr	r0, [pc, #380]	@ (800c4a0 <udp_sendto_if_src+0x1b4>)
 800c324:	f002 fda0 	bl	800ee68 <iprintf>
 800c328:	f06f 030f 	mvn.w	r3, #15
 800c32c:	e0af      	b.n	800c48e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d109      	bne.n	800c348 <udp_sendto_if_src+0x5c>
 800c334:	4b58      	ldr	r3, [pc, #352]	@ (800c498 <udp_sendto_if_src+0x1ac>)
 800c336:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800c33a:	495b      	ldr	r1, [pc, #364]	@ (800c4a8 <udp_sendto_if_src+0x1bc>)
 800c33c:	4858      	ldr	r0, [pc, #352]	@ (800c4a0 <udp_sendto_if_src+0x1b4>)
 800c33e:	f002 fd93 	bl	800ee68 <iprintf>
 800c342:	f06f 030f 	mvn.w	r3, #15
 800c346:	e0a2      	b.n	800c48e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d109      	bne.n	800c362 <udp_sendto_if_src+0x76>
 800c34e:	4b52      	ldr	r3, [pc, #328]	@ (800c498 <udp_sendto_if_src+0x1ac>)
 800c350:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800c354:	4955      	ldr	r1, [pc, #340]	@ (800c4ac <udp_sendto_if_src+0x1c0>)
 800c356:	4852      	ldr	r0, [pc, #328]	@ (800c4a0 <udp_sendto_if_src+0x1b4>)
 800c358:	f002 fd86 	bl	800ee68 <iprintf>
 800c35c:	f06f 030f 	mvn.w	r3, #15
 800c360:	e095      	b.n	800c48e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c364:	2b00      	cmp	r3, #0
 800c366:	d109      	bne.n	800c37c <udp_sendto_if_src+0x90>
 800c368:	4b4b      	ldr	r3, [pc, #300]	@ (800c498 <udp_sendto_if_src+0x1ac>)
 800c36a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800c36e:	4950      	ldr	r1, [pc, #320]	@ (800c4b0 <udp_sendto_if_src+0x1c4>)
 800c370:	484b      	ldr	r0, [pc, #300]	@ (800c4a0 <udp_sendto_if_src+0x1b4>)
 800c372:	f002 fd79 	bl	800ee68 <iprintf>
 800c376:	f06f 030f 	mvn.w	r3, #15
 800c37a:	e088      	b.n	800c48e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	8a5b      	ldrh	r3, [r3, #18]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10f      	bne.n	800c3a4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c384:	68f9      	ldr	r1, [r7, #12]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	8a5b      	ldrh	r3, [r3, #18]
 800c38a:	461a      	mov	r2, r3
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f000 f893 	bl	800c4b8 <udp_bind>
 800c392:	4603      	mov	r3, r0
 800c394:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c396:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c39e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c3a2:	e074      	b.n	800c48e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	891b      	ldrh	r3, [r3, #8]
 800c3a8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d902      	bls.n	800c3b6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b4:	e06b      	b.n	800c48e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c3b6:	2108      	movs	r1, #8
 800c3b8:	68b8      	ldr	r0, [r7, #8]
 800c3ba:	f7f9 ff2f 	bl	800621c <pbuf_add_header>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d015      	beq.n	800c3f0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c3c4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c3c8:	2108      	movs	r1, #8
 800c3ca:	2022      	movs	r0, #34	@ 0x22
 800c3cc:	f7f9 fcd8 	bl	8005d80 <pbuf_alloc>
 800c3d0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d102      	bne.n	800c3de <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3dc:	e057      	b.n	800c48e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	891b      	ldrh	r3, [r3, #8]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d006      	beq.n	800c3f4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	69f8      	ldr	r0, [r7, #28]
 800c3ea:	f7fa f8c5 	bl	8006578 <pbuf_chain>
 800c3ee:	e001      	b.n	800c3f4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	895b      	ldrh	r3, [r3, #10]
 800c3f8:	2b07      	cmp	r3, #7
 800c3fa:	d806      	bhi.n	800c40a <udp_sendto_if_src+0x11e>
 800c3fc:	4b26      	ldr	r3, [pc, #152]	@ (800c498 <udp_sendto_if_src+0x1ac>)
 800c3fe:	f240 320d 	movw	r2, #781	@ 0x30d
 800c402:	492c      	ldr	r1, [pc, #176]	@ (800c4b4 <udp_sendto_if_src+0x1c8>)
 800c404:	4826      	ldr	r0, [pc, #152]	@ (800c4a0 <udp_sendto_if_src+0x1b4>)
 800c406:	f002 fd2f 	bl	800ee68 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	8a5b      	ldrh	r3, [r3, #18]
 800c414:	4618      	mov	r0, r3
 800c416:	f7f8 fc39 	bl	8004c8c <lwip_htons>
 800c41a:	4603      	mov	r3, r0
 800c41c:	461a      	mov	r2, r3
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c422:	887b      	ldrh	r3, [r7, #2]
 800c424:	4618      	mov	r0, r3
 800c426:	f7f8 fc31 	bl	8004c8c <lwip_htons>
 800c42a:	4603      	mov	r3, r0
 800c42c:	461a      	mov	r2, r3
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	2200      	movs	r2, #0
 800c436:	719a      	strb	r2, [r3, #6]
 800c438:	2200      	movs	r2, #0
 800c43a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	891b      	ldrh	r3, [r3, #8]
 800c440:	4618      	mov	r0, r3
 800c442:	f7f8 fc23 	bl	8004c8c <lwip_htons>
 800c446:	4603      	mov	r3, r0
 800c448:	461a      	mov	r2, r3
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c44e:	2311      	movs	r3, #17
 800c450:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	7adb      	ldrb	r3, [r3, #11]
 800c456:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	7a9b      	ldrb	r3, [r3, #10]
 800c45c:	7cb9      	ldrb	r1, [r7, #18]
 800c45e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c460:	9202      	str	r2, [sp, #8]
 800c462:	7cfa      	ldrb	r2, [r7, #19]
 800c464:	9201      	str	r2, [sp, #4]
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	460b      	mov	r3, r1
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c46e:	69f8      	ldr	r0, [r7, #28]
 800c470:	f001 fbf6 	bl	800dc60 <ip4_output_if_src>
 800c474:	4603      	mov	r3, r0
 800c476:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c478:	69fa      	ldr	r2, [r7, #28]
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d004      	beq.n	800c48a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c480:	69f8      	ldr	r0, [r7, #28]
 800c482:	f7f9 ff61 	bl	8006348 <pbuf_free>
    q = NULL;
 800c486:	2300      	movs	r3, #0
 800c488:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c48a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3720      	adds	r7, #32
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	08011c64 	.word	0x08011c64
 800c49c:	08011e50 	.word	0x08011e50
 800c4a0:	08011cb8 	.word	0x08011cb8
 800c4a4:	08011e70 	.word	0x08011e70
 800c4a8:	08011e90 	.word	0x08011e90
 800c4ac:	08011eb4 	.word	0x08011eb4
 800c4b0:	08011ed8 	.word	0x08011ed8
 800c4b4:	08011efc 	.word	0x08011efc

0800c4b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d101      	bne.n	800c4d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c4cc:	4b39      	ldr	r3, [pc, #228]	@ (800c5b4 <udp_bind+0xfc>)
 800c4ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d109      	bne.n	800c4ea <udp_bind+0x32>
 800c4d6:	4b38      	ldr	r3, [pc, #224]	@ (800c5b8 <udp_bind+0x100>)
 800c4d8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800c4dc:	4937      	ldr	r1, [pc, #220]	@ (800c5bc <udp_bind+0x104>)
 800c4de:	4838      	ldr	r0, [pc, #224]	@ (800c5c0 <udp_bind+0x108>)
 800c4e0:	f002 fcc2 	bl	800ee68 <iprintf>
 800c4e4:	f06f 030f 	mvn.w	r3, #15
 800c4e8:	e060      	b.n	800c5ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c4ee:	4b35      	ldr	r3, [pc, #212]	@ (800c5c4 <udp_bind+0x10c>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	617b      	str	r3, [r7, #20]
 800c4f4:	e009      	b.n	800c50a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d102      	bne.n	800c504 <udp_bind+0x4c>
      rebind = 1;
 800c4fe:	2301      	movs	r3, #1
 800c500:	74fb      	strb	r3, [r7, #19]
      break;
 800c502:	e005      	b.n	800c510 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	617b      	str	r3, [r7, #20]
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1f2      	bne.n	800c4f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c510:	88fb      	ldrh	r3, [r7, #6]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d109      	bne.n	800c52a <udp_bind+0x72>
    port = udp_new_port();
 800c516:	f7ff fc69 	bl	800bdec <udp_new_port>
 800c51a:	4603      	mov	r3, r0
 800c51c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c51e:	88fb      	ldrh	r3, [r7, #6]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d12c      	bne.n	800c57e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c524:	f06f 0307 	mvn.w	r3, #7
 800c528:	e040      	b.n	800c5ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c52a:	4b26      	ldr	r3, [pc, #152]	@ (800c5c4 <udp_bind+0x10c>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	617b      	str	r3, [r7, #20]
 800c530:	e022      	b.n	800c578 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	429a      	cmp	r2, r3
 800c538:	d01b      	beq.n	800c572 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	8a5b      	ldrh	r3, [r3, #18]
 800c53e:	88fa      	ldrh	r2, [r7, #6]
 800c540:	429a      	cmp	r2, r3
 800c542:	d116      	bne.n	800c572 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d00d      	beq.n	800c56c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00a      	beq.n	800c56c <udp_bind+0xb4>
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d006      	beq.n	800c56c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c55e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d102      	bne.n	800c572 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c56c:	f06f 0307 	mvn.w	r3, #7
 800c570:	e01c      	b.n	800c5ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	617b      	str	r3, [r7, #20]
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d1d9      	bne.n	800c532 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d002      	beq.n	800c58a <udp_bind+0xd2>
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	e000      	b.n	800c58c <udp_bind+0xd4>
 800c58a:	2300      	movs	r3, #0
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	88fa      	ldrh	r2, [r7, #6]
 800c594:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c596:	7cfb      	ldrb	r3, [r7, #19]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d106      	bne.n	800c5aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c59c:	4b09      	ldr	r3, [pc, #36]	@ (800c5c4 <udp_bind+0x10c>)
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c5a4:	4a07      	ldr	r2, [pc, #28]	@ (800c5c4 <udp_bind+0x10c>)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3718      	adds	r7, #24
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	08012780 	.word	0x08012780
 800c5b8:	08011c64 	.word	0x08011c64
 800c5bc:	08011f2c 	.word	0x08011f2c
 800c5c0:	08011cb8 	.word	0x08011cb8
 800c5c4:	200082e4 	.word	0x200082e4

0800c5c8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d107      	bne.n	800c5e6 <udp_remove+0x1e>
 800c5d6:	4b19      	ldr	r3, [pc, #100]	@ (800c63c <udp_remove+0x74>)
 800c5d8:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800c5dc:	4918      	ldr	r1, [pc, #96]	@ (800c640 <udp_remove+0x78>)
 800c5de:	4819      	ldr	r0, [pc, #100]	@ (800c644 <udp_remove+0x7c>)
 800c5e0:	f002 fc42 	bl	800ee68 <iprintf>
 800c5e4:	e026      	b.n	800c634 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c5e6:	4b18      	ldr	r3, [pc, #96]	@ (800c648 <udp_remove+0x80>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d105      	bne.n	800c5fc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c5f0:	4b15      	ldr	r3, [pc, #84]	@ (800c648 <udp_remove+0x80>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	4a14      	ldr	r2, [pc, #80]	@ (800c648 <udp_remove+0x80>)
 800c5f8:	6013      	str	r3, [r2, #0]
 800c5fa:	e017      	b.n	800c62c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c5fc:	4b12      	ldr	r3, [pc, #72]	@ (800c648 <udp_remove+0x80>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	60fb      	str	r3, [r7, #12]
 800c602:	e010      	b.n	800c626 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d009      	beq.n	800c620 <udp_remove+0x58>
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	429a      	cmp	r2, r3
 800c614:	d104      	bne.n	800c620 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68da      	ldr	r2, [r3, #12]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	60da      	str	r2, [r3, #12]
        break;
 800c61e:	e005      	b.n	800c62c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	60fb      	str	r3, [r7, #12]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1eb      	bne.n	800c604 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c62c:	6879      	ldr	r1, [r7, #4]
 800c62e:	2000      	movs	r0, #0
 800c630:	f7f9 f814 	bl	800565c <memp_free>
}
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	08011c64 	.word	0x08011c64
 800c640:	08011fb0 	.word	0x08011fb0
 800c644:	08011cb8 	.word	0x08011cb8
 800c648:	200082e4 	.word	0x200082e4

0800c64c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c652:	2000      	movs	r0, #0
 800c654:	f7f8 ff92 	bl	800557c <memp_malloc>
 800c658:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d007      	beq.n	800c670 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c660:	2220      	movs	r2, #32
 800c662:	2100      	movs	r1, #0
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f002 fc64 	bl	800ef32 <memset>
    pcb->ttl = UDP_TTL;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	22ff      	movs	r2, #255	@ 0xff
 800c66e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c670:	687b      	ldr	r3, [r7, #4]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
	...

0800c67c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d01e      	beq.n	800c6ca <udp_netif_ip_addr_changed+0x4e>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d01a      	beq.n	800c6ca <udp_netif_ip_addr_changed+0x4e>
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d017      	beq.n	800c6ca <udp_netif_ip_addr_changed+0x4e>
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d013      	beq.n	800c6ca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d8 <udp_netif_ip_addr_changed+0x5c>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	e00c      	b.n	800c6c4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d103      	bne.n	800c6be <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1ef      	bne.n	800c6aa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c6ca:	bf00      	nop
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	200082e4 	.word	0x200082e4

0800c6dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c6e4:	4915      	ldr	r1, [pc, #84]	@ (800c73c <etharp_free_entry+0x60>)
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	005b      	lsls	r3, r3, #1
 800c6ec:	4413      	add	r3, r2
 800c6ee:	00db      	lsls	r3, r3, #3
 800c6f0:	440b      	add	r3, r1
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d013      	beq.n	800c720 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c6f8:	4910      	ldr	r1, [pc, #64]	@ (800c73c <etharp_free_entry+0x60>)
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	4413      	add	r3, r2
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	440b      	add	r3, r1
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7f9 fe1d 	bl	8006348 <pbuf_free>
    arp_table[i].q = NULL;
 800c70e:	490b      	ldr	r1, [pc, #44]	@ (800c73c <etharp_free_entry+0x60>)
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	4613      	mov	r3, r2
 800c714:	005b      	lsls	r3, r3, #1
 800c716:	4413      	add	r3, r2
 800c718:	00db      	lsls	r3, r3, #3
 800c71a:	440b      	add	r3, r1
 800c71c:	2200      	movs	r2, #0
 800c71e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c720:	4906      	ldr	r1, [pc, #24]	@ (800c73c <etharp_free_entry+0x60>)
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	4613      	mov	r3, r2
 800c726:	005b      	lsls	r3, r3, #1
 800c728:	4413      	add	r3, r2
 800c72a:	00db      	lsls	r3, r3, #3
 800c72c:	440b      	add	r3, r1
 800c72e:	3314      	adds	r3, #20
 800c730:	2200      	movs	r2, #0
 800c732:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	200082e8 	.word	0x200082e8

0800c740 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c746:	2300      	movs	r3, #0
 800c748:	607b      	str	r3, [r7, #4]
 800c74a:	e096      	b.n	800c87a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c74c:	494f      	ldr	r1, [pc, #316]	@ (800c88c <etharp_tmr+0x14c>)
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	4613      	mov	r3, r2
 800c752:	005b      	lsls	r3, r3, #1
 800c754:	4413      	add	r3, r2
 800c756:	00db      	lsls	r3, r3, #3
 800c758:	440b      	add	r3, r1
 800c75a:	3314      	adds	r3, #20
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c760:	78fb      	ldrb	r3, [r7, #3]
 800c762:	2b00      	cmp	r3, #0
 800c764:	f000 8086 	beq.w	800c874 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c768:	4948      	ldr	r1, [pc, #288]	@ (800c88c <etharp_tmr+0x14c>)
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	4613      	mov	r3, r2
 800c76e:	005b      	lsls	r3, r3, #1
 800c770:	4413      	add	r3, r2
 800c772:	00db      	lsls	r3, r3, #3
 800c774:	440b      	add	r3, r1
 800c776:	3312      	adds	r3, #18
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	3301      	adds	r3, #1
 800c77c:	b298      	uxth	r0, r3
 800c77e:	4943      	ldr	r1, [pc, #268]	@ (800c88c <etharp_tmr+0x14c>)
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	4613      	mov	r3, r2
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	4413      	add	r3, r2
 800c788:	00db      	lsls	r3, r3, #3
 800c78a:	440b      	add	r3, r1
 800c78c:	3312      	adds	r3, #18
 800c78e:	4602      	mov	r2, r0
 800c790:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c792:	493e      	ldr	r1, [pc, #248]	@ (800c88c <etharp_tmr+0x14c>)
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	4613      	mov	r3, r2
 800c798:	005b      	lsls	r3, r3, #1
 800c79a:	4413      	add	r3, r2
 800c79c:	00db      	lsls	r3, r3, #3
 800c79e:	440b      	add	r3, r1
 800c7a0:	3312      	adds	r3, #18
 800c7a2:	881b      	ldrh	r3, [r3, #0]
 800c7a4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c7a8:	d215      	bcs.n	800c7d6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c7aa:	4938      	ldr	r1, [pc, #224]	@ (800c88c <etharp_tmr+0x14c>)
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	4413      	add	r3, r2
 800c7b4:	00db      	lsls	r3, r3, #3
 800c7b6:	440b      	add	r3, r1
 800c7b8:	3314      	adds	r3, #20
 800c7ba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d10e      	bne.n	800c7de <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c7c0:	4932      	ldr	r1, [pc, #200]	@ (800c88c <etharp_tmr+0x14c>)
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	005b      	lsls	r3, r3, #1
 800c7c8:	4413      	add	r3, r2
 800c7ca:	00db      	lsls	r3, r3, #3
 800c7cc:	440b      	add	r3, r1
 800c7ce:	3312      	adds	r3, #18
 800c7d0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c7d2:	2b04      	cmp	r3, #4
 800c7d4:	d903      	bls.n	800c7de <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f7ff ff80 	bl	800c6dc <etharp_free_entry>
 800c7dc:	e04a      	b.n	800c874 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c7de:	492b      	ldr	r1, [pc, #172]	@ (800c88c <etharp_tmr+0x14c>)
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	005b      	lsls	r3, r3, #1
 800c7e6:	4413      	add	r3, r2
 800c7e8:	00db      	lsls	r3, r3, #3
 800c7ea:	440b      	add	r3, r1
 800c7ec:	3314      	adds	r3, #20
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	2b03      	cmp	r3, #3
 800c7f2:	d10a      	bne.n	800c80a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c7f4:	4925      	ldr	r1, [pc, #148]	@ (800c88c <etharp_tmr+0x14c>)
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	4413      	add	r3, r2
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	440b      	add	r3, r1
 800c802:	3314      	adds	r3, #20
 800c804:	2204      	movs	r2, #4
 800c806:	701a      	strb	r2, [r3, #0]
 800c808:	e034      	b.n	800c874 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c80a:	4920      	ldr	r1, [pc, #128]	@ (800c88c <etharp_tmr+0x14c>)
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	4613      	mov	r3, r2
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	4413      	add	r3, r2
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	440b      	add	r3, r1
 800c818:	3314      	adds	r3, #20
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	2b04      	cmp	r3, #4
 800c81e:	d10a      	bne.n	800c836 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c820:	491a      	ldr	r1, [pc, #104]	@ (800c88c <etharp_tmr+0x14c>)
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	4613      	mov	r3, r2
 800c826:	005b      	lsls	r3, r3, #1
 800c828:	4413      	add	r3, r2
 800c82a:	00db      	lsls	r3, r3, #3
 800c82c:	440b      	add	r3, r1
 800c82e:	3314      	adds	r3, #20
 800c830:	2202      	movs	r2, #2
 800c832:	701a      	strb	r2, [r3, #0]
 800c834:	e01e      	b.n	800c874 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c836:	4915      	ldr	r1, [pc, #84]	@ (800c88c <etharp_tmr+0x14c>)
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	4613      	mov	r3, r2
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	4413      	add	r3, r2
 800c840:	00db      	lsls	r3, r3, #3
 800c842:	440b      	add	r3, r1
 800c844:	3314      	adds	r3, #20
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d113      	bne.n	800c874 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c84c:	490f      	ldr	r1, [pc, #60]	@ (800c88c <etharp_tmr+0x14c>)
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	4613      	mov	r3, r2
 800c852:	005b      	lsls	r3, r3, #1
 800c854:	4413      	add	r3, r2
 800c856:	00db      	lsls	r3, r3, #3
 800c858:	440b      	add	r3, r1
 800c85a:	3308      	adds	r3, #8
 800c85c:	6818      	ldr	r0, [r3, #0]
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	4613      	mov	r3, r2
 800c862:	005b      	lsls	r3, r3, #1
 800c864:	4413      	add	r3, r2
 800c866:	00db      	lsls	r3, r3, #3
 800c868:	4a08      	ldr	r2, [pc, #32]	@ (800c88c <etharp_tmr+0x14c>)
 800c86a:	4413      	add	r3, r2
 800c86c:	3304      	adds	r3, #4
 800c86e:	4619      	mov	r1, r3
 800c870:	f000 fe6e 	bl	800d550 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	3301      	adds	r3, #1
 800c878:	607b      	str	r3, [r7, #4]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b09      	cmp	r3, #9
 800c87e:	f77f af65 	ble.w	800c74c <etharp_tmr+0xc>
      }
    }
  }
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	200082e8 	.word	0x200082e8

0800c890 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b08a      	sub	sp, #40	@ 0x28
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	460b      	mov	r3, r1
 800c89a:	607a      	str	r2, [r7, #4]
 800c89c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c89e:	230a      	movs	r3, #10
 800c8a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c8a2:	230a      	movs	r3, #10
 800c8a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c8a6:	230a      	movs	r3, #10
 800c8a8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c8ae:	230a      	movs	r3, #10
 800c8b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	83bb      	strh	r3, [r7, #28]
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	837b      	strh	r3, [r7, #26]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8be:	2300      	movs	r3, #0
 800c8c0:	843b      	strh	r3, [r7, #32]
 800c8c2:	e0ae      	b.n	800ca22 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c8c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8c8:	49a6      	ldr	r1, [pc, #664]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	005b      	lsls	r3, r3, #1
 800c8ce:	4413      	add	r3, r2
 800c8d0:	00db      	lsls	r3, r3, #3
 800c8d2:	440b      	add	r3, r1
 800c8d4:	3314      	adds	r3, #20
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c8da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c8de:	2b0a      	cmp	r3, #10
 800c8e0:	d105      	bne.n	800c8ee <etharp_find_entry+0x5e>
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d102      	bne.n	800c8ee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c8e8:	8c3b      	ldrh	r3, [r7, #32]
 800c8ea:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c8ec:	e095      	b.n	800ca1a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f000 8092 	beq.w	800ca1a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c8f6:	7dfb      	ldrb	r3, [r7, #23]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d009      	beq.n	800c910 <etharp_find_entry+0x80>
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d806      	bhi.n	800c910 <etharp_find_entry+0x80>
 800c902:	4b99      	ldr	r3, [pc, #612]	@ (800cb68 <etharp_find_entry+0x2d8>)
 800c904:	f240 1223 	movw	r2, #291	@ 0x123
 800c908:	4998      	ldr	r1, [pc, #608]	@ (800cb6c <etharp_find_entry+0x2dc>)
 800c90a:	4899      	ldr	r0, [pc, #612]	@ (800cb70 <etharp_find_entry+0x2e0>)
 800c90c:	f002 faac 	bl	800ee68 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d020      	beq.n	800c958 <etharp_find_entry+0xc8>
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6819      	ldr	r1, [r3, #0]
 800c91a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c91e:	4891      	ldr	r0, [pc, #580]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800c920:	4613      	mov	r3, r2
 800c922:	005b      	lsls	r3, r3, #1
 800c924:	4413      	add	r3, r2
 800c926:	00db      	lsls	r3, r3, #3
 800c928:	4403      	add	r3, r0
 800c92a:	3304      	adds	r3, #4
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4299      	cmp	r1, r3
 800c930:	d112      	bne.n	800c958 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00c      	beq.n	800c952 <etharp_find_entry+0xc2>
 800c938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c93c:	4989      	ldr	r1, [pc, #548]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800c93e:	4613      	mov	r3, r2
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	4413      	add	r3, r2
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	440b      	add	r3, r1
 800c948:	3308      	adds	r3, #8
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d102      	bne.n	800c958 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c952:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c956:	e100      	b.n	800cb5a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c958:	7dfb      	ldrb	r3, [r7, #23]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d140      	bne.n	800c9e0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c95e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c962:	4980      	ldr	r1, [pc, #512]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800c964:	4613      	mov	r3, r2
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	4413      	add	r3, r2
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	440b      	add	r3, r1
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d01a      	beq.n	800c9aa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c974:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c978:	497a      	ldr	r1, [pc, #488]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800c97a:	4613      	mov	r3, r2
 800c97c:	005b      	lsls	r3, r3, #1
 800c97e:	4413      	add	r3, r2
 800c980:	00db      	lsls	r3, r3, #3
 800c982:	440b      	add	r3, r1
 800c984:	3312      	adds	r3, #18
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	8bba      	ldrh	r2, [r7, #28]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d845      	bhi.n	800ca1a <etharp_find_entry+0x18a>
            old_queue = i;
 800c98e:	8c3b      	ldrh	r3, [r7, #32]
 800c990:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c992:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c996:	4973      	ldr	r1, [pc, #460]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800c998:	4613      	mov	r3, r2
 800c99a:	005b      	lsls	r3, r3, #1
 800c99c:	4413      	add	r3, r2
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	440b      	add	r3, r1
 800c9a2:	3312      	adds	r3, #18
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	83bb      	strh	r3, [r7, #28]
 800c9a8:	e037      	b.n	800ca1a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c9aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9ae:	496d      	ldr	r1, [pc, #436]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800c9b0:	4613      	mov	r3, r2
 800c9b2:	005b      	lsls	r3, r3, #1
 800c9b4:	4413      	add	r3, r2
 800c9b6:	00db      	lsls	r3, r3, #3
 800c9b8:	440b      	add	r3, r1
 800c9ba:	3312      	adds	r3, #18
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	8b7a      	ldrh	r2, [r7, #26]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d82a      	bhi.n	800ca1a <etharp_find_entry+0x18a>
            old_pending = i;
 800c9c4:	8c3b      	ldrh	r3, [r7, #32]
 800c9c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800c9c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9cc:	4965      	ldr	r1, [pc, #404]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	005b      	lsls	r3, r3, #1
 800c9d2:	4413      	add	r3, r2
 800c9d4:	00db      	lsls	r3, r3, #3
 800c9d6:	440b      	add	r3, r1
 800c9d8:	3312      	adds	r3, #18
 800c9da:	881b      	ldrh	r3, [r3, #0]
 800c9dc:	837b      	strh	r3, [r7, #26]
 800c9de:	e01c      	b.n	800ca1a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c9e0:	7dfb      	ldrb	r3, [r7, #23]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d919      	bls.n	800ca1a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c9e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9ea:	495e      	ldr	r1, [pc, #376]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	440b      	add	r3, r1
 800c9f6:	3312      	adds	r3, #18
 800c9f8:	881b      	ldrh	r3, [r3, #0]
 800c9fa:	8b3a      	ldrh	r2, [r7, #24]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d80c      	bhi.n	800ca1a <etharp_find_entry+0x18a>
            old_stable = i;
 800ca00:	8c3b      	ldrh	r3, [r7, #32]
 800ca02:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800ca04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca08:	4956      	ldr	r1, [pc, #344]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	005b      	lsls	r3, r3, #1
 800ca0e:	4413      	add	r3, r2
 800ca10:	00db      	lsls	r3, r3, #3
 800ca12:	440b      	add	r3, r1
 800ca14:	3312      	adds	r3, #18
 800ca16:	881b      	ldrh	r3, [r3, #0]
 800ca18:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ca1a:	8c3b      	ldrh	r3, [r7, #32]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	843b      	strh	r3, [r7, #32]
 800ca22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca26:	2b09      	cmp	r3, #9
 800ca28:	f77f af4c 	ble.w	800c8c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ca2c:	7afb      	ldrb	r3, [r7, #11]
 800ca2e:	f003 0302 	and.w	r3, r3, #2
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d108      	bne.n	800ca48 <etharp_find_entry+0x1b8>
 800ca36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ca3a:	2b0a      	cmp	r3, #10
 800ca3c:	d107      	bne.n	800ca4e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ca3e:	7afb      	ldrb	r3, [r7, #11]
 800ca40:	f003 0301 	and.w	r3, r3, #1
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d102      	bne.n	800ca4e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ca48:	f04f 33ff 	mov.w	r3, #4294967295
 800ca4c:	e085      	b.n	800cb5a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ca4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ca52:	2b09      	cmp	r3, #9
 800ca54:	dc02      	bgt.n	800ca5c <etharp_find_entry+0x1cc>
    i = empty;
 800ca56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca58:	843b      	strh	r3, [r7, #32]
 800ca5a:	e039      	b.n	800cad0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ca5c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800ca60:	2b09      	cmp	r3, #9
 800ca62:	dc14      	bgt.n	800ca8e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ca64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca66:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ca68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca6c:	493d      	ldr	r1, [pc, #244]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800ca6e:	4613      	mov	r3, r2
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	4413      	add	r3, r2
 800ca74:	00db      	lsls	r3, r3, #3
 800ca76:	440b      	add	r3, r1
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d018      	beq.n	800cab0 <etharp_find_entry+0x220>
 800ca7e:	4b3a      	ldr	r3, [pc, #232]	@ (800cb68 <etharp_find_entry+0x2d8>)
 800ca80:	f240 126d 	movw	r2, #365	@ 0x16d
 800ca84:	493b      	ldr	r1, [pc, #236]	@ (800cb74 <etharp_find_entry+0x2e4>)
 800ca86:	483a      	ldr	r0, [pc, #232]	@ (800cb70 <etharp_find_entry+0x2e0>)
 800ca88:	f002 f9ee 	bl	800ee68 <iprintf>
 800ca8c:	e010      	b.n	800cab0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ca8e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800ca92:	2b09      	cmp	r3, #9
 800ca94:	dc02      	bgt.n	800ca9c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ca96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca98:	843b      	strh	r3, [r7, #32]
 800ca9a:	e009      	b.n	800cab0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ca9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800caa0:	2b09      	cmp	r3, #9
 800caa2:	dc02      	bgt.n	800caaa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800caa4:	8bfb      	ldrh	r3, [r7, #30]
 800caa6:	843b      	strh	r3, [r7, #32]
 800caa8:	e002      	b.n	800cab0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800caaa:	f04f 33ff 	mov.w	r3, #4294967295
 800caae:	e054      	b.n	800cb5a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cab0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cab4:	2b09      	cmp	r3, #9
 800cab6:	dd06      	ble.n	800cac6 <etharp_find_entry+0x236>
 800cab8:	4b2b      	ldr	r3, [pc, #172]	@ (800cb68 <etharp_find_entry+0x2d8>)
 800caba:	f240 127f 	movw	r2, #383	@ 0x17f
 800cabe:	492e      	ldr	r1, [pc, #184]	@ (800cb78 <etharp_find_entry+0x2e8>)
 800cac0:	482b      	ldr	r0, [pc, #172]	@ (800cb70 <etharp_find_entry+0x2e0>)
 800cac2:	f002 f9d1 	bl	800ee68 <iprintf>
    etharp_free_entry(i);
 800cac6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800caca:	4618      	mov	r0, r3
 800cacc:	f7ff fe06 	bl	800c6dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cad0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cad4:	2b09      	cmp	r3, #9
 800cad6:	dd06      	ble.n	800cae6 <etharp_find_entry+0x256>
 800cad8:	4b23      	ldr	r3, [pc, #140]	@ (800cb68 <etharp_find_entry+0x2d8>)
 800cada:	f240 1283 	movw	r2, #387	@ 0x183
 800cade:	4926      	ldr	r1, [pc, #152]	@ (800cb78 <etharp_find_entry+0x2e8>)
 800cae0:	4823      	ldr	r0, [pc, #140]	@ (800cb70 <etharp_find_entry+0x2e0>)
 800cae2:	f002 f9c1 	bl	800ee68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cae6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800caea:	491e      	ldr	r1, [pc, #120]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800caec:	4613      	mov	r3, r2
 800caee:	005b      	lsls	r3, r3, #1
 800caf0:	4413      	add	r3, r2
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	440b      	add	r3, r1
 800caf6:	3314      	adds	r3, #20
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d006      	beq.n	800cb0c <etharp_find_entry+0x27c>
 800cafe:	4b1a      	ldr	r3, [pc, #104]	@ (800cb68 <etharp_find_entry+0x2d8>)
 800cb00:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800cb04:	491d      	ldr	r1, [pc, #116]	@ (800cb7c <etharp_find_entry+0x2ec>)
 800cb06:	481a      	ldr	r0, [pc, #104]	@ (800cb70 <etharp_find_entry+0x2e0>)
 800cb08:	f002 f9ae 	bl	800ee68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00b      	beq.n	800cb2a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cb12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6819      	ldr	r1, [r3, #0]
 800cb1a:	4812      	ldr	r0, [pc, #72]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	005b      	lsls	r3, r3, #1
 800cb20:	4413      	add	r3, r2
 800cb22:	00db      	lsls	r3, r3, #3
 800cb24:	4403      	add	r3, r0
 800cb26:	3304      	adds	r3, #4
 800cb28:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cb2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb2e:	490d      	ldr	r1, [pc, #52]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800cb30:	4613      	mov	r3, r2
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	4413      	add	r3, r2
 800cb36:	00db      	lsls	r3, r3, #3
 800cb38:	440b      	add	r3, r1
 800cb3a:	3312      	adds	r3, #18
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cb40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb44:	4907      	ldr	r1, [pc, #28]	@ (800cb64 <etharp_find_entry+0x2d4>)
 800cb46:	4613      	mov	r3, r2
 800cb48:	005b      	lsls	r3, r3, #1
 800cb4a:	4413      	add	r3, r2
 800cb4c:	00db      	lsls	r3, r3, #3
 800cb4e:	440b      	add	r3, r1
 800cb50:	3308      	adds	r3, #8
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cb56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3728      	adds	r7, #40	@ 0x28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	200082e8 	.word	0x200082e8
 800cb68:	08011fc8 	.word	0x08011fc8
 800cb6c:	08012000 	.word	0x08012000
 800cb70:	08012040 	.word	0x08012040
 800cb74:	08012068 	.word	0x08012068
 800cb78:	08012080 	.word	0x08012080
 800cb7c:	08012094 	.word	0x08012094

0800cb80 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b088      	sub	sp, #32
 800cb84:	af02      	add	r7, sp, #8
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
 800cb8c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cb94:	2b06      	cmp	r3, #6
 800cb96:	d006      	beq.n	800cba6 <etharp_update_arp_entry+0x26>
 800cb98:	4b48      	ldr	r3, [pc, #288]	@ (800ccbc <etharp_update_arp_entry+0x13c>)
 800cb9a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800cb9e:	4948      	ldr	r1, [pc, #288]	@ (800ccc0 <etharp_update_arp_entry+0x140>)
 800cba0:	4848      	ldr	r0, [pc, #288]	@ (800ccc4 <etharp_update_arp_entry+0x144>)
 800cba2:	f002 f961 	bl	800ee68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d012      	beq.n	800cbd2 <etharp_update_arp_entry+0x52>
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00e      	beq.n	800cbd2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68f9      	ldr	r1, [r7, #12]
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f001 f8fe 	bl	800ddbc <ip4_addr_isbroadcast_u32>
 800cbc0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d105      	bne.n	800cbd2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cbce:	2be0      	cmp	r3, #224	@ 0xe0
 800cbd0:	d102      	bne.n	800cbd8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cbd2:	f06f 030f 	mvn.w	r3, #15
 800cbd6:	e06c      	b.n	800ccb2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cbd8:	78fb      	ldrb	r3, [r7, #3]
 800cbda:	68fa      	ldr	r2, [r7, #12]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	68b8      	ldr	r0, [r7, #8]
 800cbe0:	f7ff fe56 	bl	800c890 <etharp_find_entry>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cbe8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	da02      	bge.n	800cbf6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cbf0:	8afb      	ldrh	r3, [r7, #22]
 800cbf2:	b25b      	sxtb	r3, r3
 800cbf4:	e05d      	b.n	800ccb2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cbf6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cbfa:	4933      	ldr	r1, [pc, #204]	@ (800ccc8 <etharp_update_arp_entry+0x148>)
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	4413      	add	r3, r2
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	440b      	add	r3, r1
 800cc06:	3314      	adds	r3, #20
 800cc08:	2202      	movs	r2, #2
 800cc0a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cc0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc10:	492d      	ldr	r1, [pc, #180]	@ (800ccc8 <etharp_update_arp_entry+0x148>)
 800cc12:	4613      	mov	r3, r2
 800cc14:	005b      	lsls	r3, r3, #1
 800cc16:	4413      	add	r3, r2
 800cc18:	00db      	lsls	r3, r3, #3
 800cc1a:	440b      	add	r3, r1
 800cc1c:	3308      	adds	r3, #8
 800cc1e:	68fa      	ldr	r2, [r7, #12]
 800cc20:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cc22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc26:	4613      	mov	r3, r2
 800cc28:	005b      	lsls	r3, r3, #1
 800cc2a:	4413      	add	r3, r2
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	3308      	adds	r3, #8
 800cc30:	4a25      	ldr	r2, [pc, #148]	@ (800ccc8 <etharp_update_arp_entry+0x148>)
 800cc32:	4413      	add	r3, r2
 800cc34:	3304      	adds	r3, #4
 800cc36:	2206      	movs	r2, #6
 800cc38:	6879      	ldr	r1, [r7, #4]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f002 f9ef 	bl	800f01e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cc40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc44:	4920      	ldr	r1, [pc, #128]	@ (800ccc8 <etharp_update_arp_entry+0x148>)
 800cc46:	4613      	mov	r3, r2
 800cc48:	005b      	lsls	r3, r3, #1
 800cc4a:	4413      	add	r3, r2
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	440b      	add	r3, r1
 800cc50:	3312      	adds	r3, #18
 800cc52:	2200      	movs	r2, #0
 800cc54:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cc56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc5a:	491b      	ldr	r1, [pc, #108]	@ (800ccc8 <etharp_update_arp_entry+0x148>)
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	4413      	add	r3, r2
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	440b      	add	r3, r1
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d021      	beq.n	800ccb0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cc6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc70:	4915      	ldr	r1, [pc, #84]	@ (800ccc8 <etharp_update_arp_entry+0x148>)
 800cc72:	4613      	mov	r3, r2
 800cc74:	005b      	lsls	r3, r3, #1
 800cc76:	4413      	add	r3, r2
 800cc78:	00db      	lsls	r3, r3, #3
 800cc7a:	440b      	add	r3, r1
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cc80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc84:	4910      	ldr	r1, [pc, #64]	@ (800ccc8 <etharp_update_arp_entry+0x148>)
 800cc86:	4613      	mov	r3, r2
 800cc88:	005b      	lsls	r3, r3, #1
 800cc8a:	4413      	add	r3, r2
 800cc8c:	00db      	lsls	r3, r3, #3
 800cc8e:	440b      	add	r3, r1
 800cc90:	2200      	movs	r2, #0
 800cc92:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800cc9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6939      	ldr	r1, [r7, #16]
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f001 ff97 	bl	800ebd8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ccaa:	6938      	ldr	r0, [r7, #16]
 800ccac:	f7f9 fb4c 	bl	8006348 <pbuf_free>
  }
  return ERR_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3718      	adds	r7, #24
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	08011fc8 	.word	0x08011fc8
 800ccc0:	080120c0 	.word	0x080120c0
 800ccc4:	08012040 	.word	0x08012040
 800ccc8:	200082e8 	.word	0x200082e8

0800cccc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	e01e      	b.n	800cd18 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ccda:	4913      	ldr	r1, [pc, #76]	@ (800cd28 <etharp_cleanup_netif+0x5c>)
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	4613      	mov	r3, r2
 800cce0:	005b      	lsls	r3, r3, #1
 800cce2:	4413      	add	r3, r2
 800cce4:	00db      	lsls	r3, r3, #3
 800cce6:	440b      	add	r3, r1
 800cce8:	3314      	adds	r3, #20
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ccee:	7afb      	ldrb	r3, [r7, #11]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00e      	beq.n	800cd12 <etharp_cleanup_netif+0x46>
 800ccf4:	490c      	ldr	r1, [pc, #48]	@ (800cd28 <etharp_cleanup_netif+0x5c>)
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	005b      	lsls	r3, r3, #1
 800ccfc:	4413      	add	r3, r2
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	440b      	add	r3, r1
 800cd02:	3308      	adds	r3, #8
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d102      	bne.n	800cd12 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f7ff fce5 	bl	800c6dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	3301      	adds	r3, #1
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2b09      	cmp	r3, #9
 800cd1c:	dddd      	ble.n	800ccda <etharp_cleanup_netif+0xe>
    }
  }
}
 800cd1e:	bf00      	nop
 800cd20:	bf00      	nop
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	200082e8 	.word	0x200082e8

0800cd2c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cd2c:	b5b0      	push	{r4, r5, r7, lr}
 800cd2e:	b08a      	sub	sp, #40	@ 0x28
 800cd30:	af04      	add	r7, sp, #16
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d107      	bne.n	800cd4c <etharp_input+0x20>
 800cd3c:	4b3d      	ldr	r3, [pc, #244]	@ (800ce34 <etharp_input+0x108>)
 800cd3e:	f240 228a 	movw	r2, #650	@ 0x28a
 800cd42:	493d      	ldr	r1, [pc, #244]	@ (800ce38 <etharp_input+0x10c>)
 800cd44:	483d      	ldr	r0, [pc, #244]	@ (800ce3c <etharp_input+0x110>)
 800cd46:	f002 f88f 	bl	800ee68 <iprintf>
 800cd4a:	e06f      	b.n	800ce2c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	881b      	ldrh	r3, [r3, #0]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd5c:	d10c      	bne.n	800cd78 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cd62:	2b06      	cmp	r3, #6
 800cd64:	d108      	bne.n	800cd78 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cd6a:	2b04      	cmp	r3, #4
 800cd6c:	d104      	bne.n	800cd78 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	885b      	ldrh	r3, [r3, #2]
 800cd72:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cd74:	2b08      	cmp	r3, #8
 800cd76:	d003      	beq.n	800cd80 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7f9 fae5 	bl	8006348 <pbuf_free>
    return;
 800cd7e:	e055      	b.n	800ce2c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	330e      	adds	r3, #14
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	3318      	adds	r3, #24
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	3304      	adds	r3, #4
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d102      	bne.n	800cda0 <etharp_input+0x74>
    for_us = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	75fb      	strb	r3, [r7, #23]
 800cd9e:	e009      	b.n	800cdb4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	3304      	adds	r3, #4
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	bf0c      	ite	eq
 800cdac:	2301      	moveq	r3, #1
 800cdae:	2300      	movne	r3, #0
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	f103 0208 	add.w	r2, r3, #8
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <etharp_input+0x98>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e000      	b.n	800cdc6 <etharp_input+0x9a>
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	f107 010c 	add.w	r1, r7, #12
 800cdca:	6838      	ldr	r0, [r7, #0]
 800cdcc:	f7ff fed8 	bl	800cb80 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	88db      	ldrh	r3, [r3, #6]
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdda:	d003      	beq.n	800cde4 <etharp_input+0xb8>
 800cddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cde0:	d01e      	beq.n	800ce20 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cde2:	e020      	b.n	800ce26 <etharp_input+0xfa>
      if (for_us) {
 800cde4:	7dfb      	ldrb	r3, [r7, #23]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d01c      	beq.n	800ce24 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ce00:	693a      	ldr	r2, [r7, #16]
 800ce02:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ce04:	2102      	movs	r1, #2
 800ce06:	9103      	str	r1, [sp, #12]
 800ce08:	f107 010c 	add.w	r1, r7, #12
 800ce0c:	9102      	str	r1, [sp, #8]
 800ce0e:	9201      	str	r2, [sp, #4]
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	462b      	mov	r3, r5
 800ce14:	4622      	mov	r2, r4
 800ce16:	4601      	mov	r1, r0
 800ce18:	6838      	ldr	r0, [r7, #0]
 800ce1a:	f000 faeb 	bl	800d3f4 <etharp_raw>
      break;
 800ce1e:	e001      	b.n	800ce24 <etharp_input+0xf8>
      break;
 800ce20:	bf00      	nop
 800ce22:	e000      	b.n	800ce26 <etharp_input+0xfa>
      break;
 800ce24:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7f9 fa8e 	bl	8006348 <pbuf_free>
}
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bdb0      	pop	{r4, r5, r7, pc}
 800ce32:	bf00      	nop
 800ce34:	08011fc8 	.word	0x08011fc8
 800ce38:	08012118 	.word	0x08012118
 800ce3c:	08012040 	.word	0x08012040

0800ce40 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af02      	add	r7, sp, #8
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ce4e:	79fa      	ldrb	r2, [r7, #7]
 800ce50:	4944      	ldr	r1, [pc, #272]	@ (800cf64 <etharp_output_to_arp_index+0x124>)
 800ce52:	4613      	mov	r3, r2
 800ce54:	005b      	lsls	r3, r3, #1
 800ce56:	4413      	add	r3, r2
 800ce58:	00db      	lsls	r3, r3, #3
 800ce5a:	440b      	add	r3, r1
 800ce5c:	3314      	adds	r3, #20
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d806      	bhi.n	800ce72 <etharp_output_to_arp_index+0x32>
 800ce64:	4b40      	ldr	r3, [pc, #256]	@ (800cf68 <etharp_output_to_arp_index+0x128>)
 800ce66:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ce6a:	4940      	ldr	r1, [pc, #256]	@ (800cf6c <etharp_output_to_arp_index+0x12c>)
 800ce6c:	4840      	ldr	r0, [pc, #256]	@ (800cf70 <etharp_output_to_arp_index+0x130>)
 800ce6e:	f001 fffb 	bl	800ee68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ce72:	79fa      	ldrb	r2, [r7, #7]
 800ce74:	493b      	ldr	r1, [pc, #236]	@ (800cf64 <etharp_output_to_arp_index+0x124>)
 800ce76:	4613      	mov	r3, r2
 800ce78:	005b      	lsls	r3, r3, #1
 800ce7a:	4413      	add	r3, r2
 800ce7c:	00db      	lsls	r3, r3, #3
 800ce7e:	440b      	add	r3, r1
 800ce80:	3314      	adds	r3, #20
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d153      	bne.n	800cf30 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ce88:	79fa      	ldrb	r2, [r7, #7]
 800ce8a:	4936      	ldr	r1, [pc, #216]	@ (800cf64 <etharp_output_to_arp_index+0x124>)
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	005b      	lsls	r3, r3, #1
 800ce90:	4413      	add	r3, r2
 800ce92:	00db      	lsls	r3, r3, #3
 800ce94:	440b      	add	r3, r1
 800ce96:	3312      	adds	r3, #18
 800ce98:	881b      	ldrh	r3, [r3, #0]
 800ce9a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800ce9e:	d919      	bls.n	800ced4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cea0:	79fa      	ldrb	r2, [r7, #7]
 800cea2:	4613      	mov	r3, r2
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	4413      	add	r3, r2
 800cea8:	00db      	lsls	r3, r3, #3
 800ceaa:	4a2e      	ldr	r2, [pc, #184]	@ (800cf64 <etharp_output_to_arp_index+0x124>)
 800ceac:	4413      	add	r3, r2
 800ceae:	3304      	adds	r3, #4
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f000 fb4c 	bl	800d550 <etharp_request>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d138      	bne.n	800cf30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cebe:	79fa      	ldrb	r2, [r7, #7]
 800cec0:	4928      	ldr	r1, [pc, #160]	@ (800cf64 <etharp_output_to_arp_index+0x124>)
 800cec2:	4613      	mov	r3, r2
 800cec4:	005b      	lsls	r3, r3, #1
 800cec6:	4413      	add	r3, r2
 800cec8:	00db      	lsls	r3, r3, #3
 800ceca:	440b      	add	r3, r1
 800cecc:	3314      	adds	r3, #20
 800cece:	2203      	movs	r2, #3
 800ced0:	701a      	strb	r2, [r3, #0]
 800ced2:	e02d      	b.n	800cf30 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ced4:	79fa      	ldrb	r2, [r7, #7]
 800ced6:	4923      	ldr	r1, [pc, #140]	@ (800cf64 <etharp_output_to_arp_index+0x124>)
 800ced8:	4613      	mov	r3, r2
 800ceda:	005b      	lsls	r3, r3, #1
 800cedc:	4413      	add	r3, r2
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	440b      	add	r3, r1
 800cee2:	3312      	adds	r3, #18
 800cee4:	881b      	ldrh	r3, [r3, #0]
 800cee6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800ceea:	d321      	bcc.n	800cf30 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ceec:	79fa      	ldrb	r2, [r7, #7]
 800ceee:	4613      	mov	r3, r2
 800cef0:	005b      	lsls	r3, r3, #1
 800cef2:	4413      	add	r3, r2
 800cef4:	00db      	lsls	r3, r3, #3
 800cef6:	4a1b      	ldr	r2, [pc, #108]	@ (800cf64 <etharp_output_to_arp_index+0x124>)
 800cef8:	4413      	add	r3, r2
 800cefa:	1d19      	adds	r1, r3, #4
 800cefc:	79fa      	ldrb	r2, [r7, #7]
 800cefe:	4613      	mov	r3, r2
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	4413      	add	r3, r2
 800cf04:	00db      	lsls	r3, r3, #3
 800cf06:	3308      	adds	r3, #8
 800cf08:	4a16      	ldr	r2, [pc, #88]	@ (800cf64 <etharp_output_to_arp_index+0x124>)
 800cf0a:	4413      	add	r3, r2
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	461a      	mov	r2, r3
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f000 fafb 	bl	800d50c <etharp_request_dst>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d109      	bne.n	800cf30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cf1c:	79fa      	ldrb	r2, [r7, #7]
 800cf1e:	4911      	ldr	r1, [pc, #68]	@ (800cf64 <etharp_output_to_arp_index+0x124>)
 800cf20:	4613      	mov	r3, r2
 800cf22:	005b      	lsls	r3, r3, #1
 800cf24:	4413      	add	r3, r2
 800cf26:	00db      	lsls	r3, r3, #3
 800cf28:	440b      	add	r3, r1
 800cf2a:	3314      	adds	r3, #20
 800cf2c:	2203      	movs	r2, #3
 800cf2e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800cf36:	79fa      	ldrb	r2, [r7, #7]
 800cf38:	4613      	mov	r3, r2
 800cf3a:	005b      	lsls	r3, r3, #1
 800cf3c:	4413      	add	r3, r2
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	3308      	adds	r3, #8
 800cf42:	4a08      	ldr	r2, [pc, #32]	@ (800cf64 <etharp_output_to_arp_index+0x124>)
 800cf44:	4413      	add	r3, r2
 800cf46:	3304      	adds	r3, #4
 800cf48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf4c:	9200      	str	r2, [sp, #0]
 800cf4e:	460a      	mov	r2, r1
 800cf50:	68b9      	ldr	r1, [r7, #8]
 800cf52:	68f8      	ldr	r0, [r7, #12]
 800cf54:	f001 fe40 	bl	800ebd8 <ethernet_output>
 800cf58:	4603      	mov	r3, r0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	200082e8 	.word	0x200082e8
 800cf68:	08011fc8 	.word	0x08011fc8
 800cf6c:	08012138 	.word	0x08012138
 800cf70:	08012040 	.word	0x08012040

0800cf74 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b08a      	sub	sp, #40	@ 0x28
 800cf78:	af02      	add	r7, sp, #8
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d106      	bne.n	800cf98 <etharp_output+0x24>
 800cf8a:	4b73      	ldr	r3, [pc, #460]	@ (800d158 <etharp_output+0x1e4>)
 800cf8c:	f240 321e 	movw	r2, #798	@ 0x31e
 800cf90:	4972      	ldr	r1, [pc, #456]	@ (800d15c <etharp_output+0x1e8>)
 800cf92:	4873      	ldr	r0, [pc, #460]	@ (800d160 <etharp_output+0x1ec>)
 800cf94:	f001 ff68 	bl	800ee68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d106      	bne.n	800cfac <etharp_output+0x38>
 800cf9e:	4b6e      	ldr	r3, [pc, #440]	@ (800d158 <etharp_output+0x1e4>)
 800cfa0:	f240 321f 	movw	r2, #799	@ 0x31f
 800cfa4:	496f      	ldr	r1, [pc, #444]	@ (800d164 <etharp_output+0x1f0>)
 800cfa6:	486e      	ldr	r0, [pc, #440]	@ (800d160 <etharp_output+0x1ec>)
 800cfa8:	f001 ff5e 	bl	800ee68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d106      	bne.n	800cfc0 <etharp_output+0x4c>
 800cfb2:	4b69      	ldr	r3, [pc, #420]	@ (800d158 <etharp_output+0x1e4>)
 800cfb4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800cfb8:	496b      	ldr	r1, [pc, #428]	@ (800d168 <etharp_output+0x1f4>)
 800cfba:	4869      	ldr	r0, [pc, #420]	@ (800d160 <etharp_output+0x1ec>)
 800cfbc:	f001 ff54 	bl	800ee68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68f9      	ldr	r1, [r7, #12]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 fef8 	bl	800ddbc <ip4_addr_isbroadcast_u32>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d002      	beq.n	800cfd8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cfd2:	4b66      	ldr	r3, [pc, #408]	@ (800d16c <etharp_output+0x1f8>)
 800cfd4:	61fb      	str	r3, [r7, #28]
 800cfd6:	e0af      	b.n	800d138 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cfe0:	2be0      	cmp	r3, #224	@ 0xe0
 800cfe2:	d118      	bne.n	800d016 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cfec:	235e      	movs	r3, #94	@ 0x5e
 800cfee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	3301      	adds	r3, #1
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	3302      	adds	r3, #2
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	3303      	adds	r3, #3
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d00e:	f107 0310 	add.w	r3, r7, #16
 800d012:	61fb      	str	r3, [r7, #28]
 800d014:	e090      	b.n	800d138 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	3304      	adds	r3, #4
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	405a      	eors	r2, r3
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	3308      	adds	r3, #8
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4013      	ands	r3, r2
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d012      	beq.n	800d054 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d034:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d038:	4293      	cmp	r3, r2
 800d03a:	d00b      	beq.n	800d054 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	330c      	adds	r3, #12
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d003      	beq.n	800d04e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	330c      	adds	r3, #12
 800d04a:	61bb      	str	r3, [r7, #24]
 800d04c:	e002      	b.n	800d054 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d04e:	f06f 0303 	mvn.w	r3, #3
 800d052:	e07d      	b.n	800d150 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d054:	4b46      	ldr	r3, [pc, #280]	@ (800d170 <etharp_output+0x1fc>)
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	4619      	mov	r1, r3
 800d05a:	4a46      	ldr	r2, [pc, #280]	@ (800d174 <etharp_output+0x200>)
 800d05c:	460b      	mov	r3, r1
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	440b      	add	r3, r1
 800d062:	00db      	lsls	r3, r3, #3
 800d064:	4413      	add	r3, r2
 800d066:	3314      	adds	r3, #20
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d925      	bls.n	800d0ba <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d06e:	4b40      	ldr	r3, [pc, #256]	@ (800d170 <etharp_output+0x1fc>)
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	4619      	mov	r1, r3
 800d074:	4a3f      	ldr	r2, [pc, #252]	@ (800d174 <etharp_output+0x200>)
 800d076:	460b      	mov	r3, r1
 800d078:	005b      	lsls	r3, r3, #1
 800d07a:	440b      	add	r3, r1
 800d07c:	00db      	lsls	r3, r3, #3
 800d07e:	4413      	add	r3, r2
 800d080:	3308      	adds	r3, #8
 800d082:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	429a      	cmp	r2, r3
 800d088:	d117      	bne.n	800d0ba <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	4b38      	ldr	r3, [pc, #224]	@ (800d170 <etharp_output+0x1fc>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	4618      	mov	r0, r3
 800d094:	4937      	ldr	r1, [pc, #220]	@ (800d174 <etharp_output+0x200>)
 800d096:	4603      	mov	r3, r0
 800d098:	005b      	lsls	r3, r3, #1
 800d09a:	4403      	add	r3, r0
 800d09c:	00db      	lsls	r3, r3, #3
 800d09e:	440b      	add	r3, r1
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d108      	bne.n	800d0ba <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d0a8:	4b31      	ldr	r3, [pc, #196]	@ (800d170 <etharp_output+0x1fc>)
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	68b9      	ldr	r1, [r7, #8]
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f7ff fec5 	bl	800ce40 <etharp_output_to_arp_index>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	e04a      	b.n	800d150 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	75fb      	strb	r3, [r7, #23]
 800d0be:	e031      	b.n	800d124 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d0c0:	7dfa      	ldrb	r2, [r7, #23]
 800d0c2:	492c      	ldr	r1, [pc, #176]	@ (800d174 <etharp_output+0x200>)
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	005b      	lsls	r3, r3, #1
 800d0c8:	4413      	add	r3, r2
 800d0ca:	00db      	lsls	r3, r3, #3
 800d0cc:	440b      	add	r3, r1
 800d0ce:	3314      	adds	r3, #20
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d923      	bls.n	800d11e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d0d6:	7dfa      	ldrb	r2, [r7, #23]
 800d0d8:	4926      	ldr	r1, [pc, #152]	@ (800d174 <etharp_output+0x200>)
 800d0da:	4613      	mov	r3, r2
 800d0dc:	005b      	lsls	r3, r3, #1
 800d0de:	4413      	add	r3, r2
 800d0e0:	00db      	lsls	r3, r3, #3
 800d0e2:	440b      	add	r3, r1
 800d0e4:	3308      	adds	r3, #8
 800d0e6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d117      	bne.n	800d11e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	6819      	ldr	r1, [r3, #0]
 800d0f2:	7dfa      	ldrb	r2, [r7, #23]
 800d0f4:	481f      	ldr	r0, [pc, #124]	@ (800d174 <etharp_output+0x200>)
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	005b      	lsls	r3, r3, #1
 800d0fa:	4413      	add	r3, r2
 800d0fc:	00db      	lsls	r3, r3, #3
 800d0fe:	4403      	add	r3, r0
 800d100:	3304      	adds	r3, #4
 800d102:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d104:	4299      	cmp	r1, r3
 800d106:	d10a      	bne.n	800d11e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d108:	4a19      	ldr	r2, [pc, #100]	@ (800d170 <etharp_output+0x1fc>)
 800d10a:	7dfb      	ldrb	r3, [r7, #23]
 800d10c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d10e:	7dfb      	ldrb	r3, [r7, #23]
 800d110:	461a      	mov	r2, r3
 800d112:	68b9      	ldr	r1, [r7, #8]
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f7ff fe93 	bl	800ce40 <etharp_output_to_arp_index>
 800d11a:	4603      	mov	r3, r0
 800d11c:	e018      	b.n	800d150 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d11e:	7dfb      	ldrb	r3, [r7, #23]
 800d120:	3301      	adds	r3, #1
 800d122:	75fb      	strb	r3, [r7, #23]
 800d124:	7dfb      	ldrb	r3, [r7, #23]
 800d126:	2b09      	cmp	r3, #9
 800d128:	d9ca      	bls.n	800d0c0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	69b9      	ldr	r1, [r7, #24]
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f000 f822 	bl	800d178 <etharp_query>
 800d134:	4603      	mov	r3, r0
 800d136:	e00b      	b.n	800d150 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d13e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d142:	9300      	str	r3, [sp, #0]
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	68b9      	ldr	r1, [r7, #8]
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f001 fd45 	bl	800ebd8 <ethernet_output>
 800d14e:	4603      	mov	r3, r0
}
 800d150:	4618      	mov	r0, r3
 800d152:	3720      	adds	r7, #32
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	08011fc8 	.word	0x08011fc8
 800d15c:	08012118 	.word	0x08012118
 800d160:	08012040 	.word	0x08012040
 800d164:	08012168 	.word	0x08012168
 800d168:	08012108 	.word	0x08012108
 800d16c:	08012784 	.word	0x08012784
 800d170:	200083d8 	.word	0x200083d8
 800d174:	200082e8 	.word	0x200082e8

0800d178 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b08c      	sub	sp, #48	@ 0x30
 800d17c:	af02      	add	r7, sp, #8
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	3326      	adds	r3, #38	@ 0x26
 800d188:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d18a:	23ff      	movs	r3, #255	@ 0xff
 800d18c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d190:	2300      	movs	r3, #0
 800d192:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68f9      	ldr	r1, [r7, #12]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 fe0e 	bl	800ddbc <ip4_addr_isbroadcast_u32>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10c      	bne.n	800d1c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d1ae:	2be0      	cmp	r3, #224	@ 0xe0
 800d1b0:	d006      	beq.n	800d1c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d003      	beq.n	800d1c0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d102      	bne.n	800d1c6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d1c0:	f06f 030f 	mvn.w	r3, #15
 800d1c4:	e101      	b.n	800d3ca <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	2101      	movs	r1, #1
 800d1ca:	68b8      	ldr	r0, [r7, #8]
 800d1cc:	f7ff fb60 	bl	800c890 <etharp_find_entry>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d1d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	da02      	bge.n	800d1e2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d1dc:	8a7b      	ldrh	r3, [r7, #18]
 800d1de:	b25b      	sxtb	r3, r3
 800d1e0:	e0f3      	b.n	800d3ca <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d1e2:	8a7b      	ldrh	r3, [r7, #18]
 800d1e4:	2b7e      	cmp	r3, #126	@ 0x7e
 800d1e6:	d906      	bls.n	800d1f6 <etharp_query+0x7e>
 800d1e8:	4b7a      	ldr	r3, [pc, #488]	@ (800d3d4 <etharp_query+0x25c>)
 800d1ea:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d1ee:	497a      	ldr	r1, [pc, #488]	@ (800d3d8 <etharp_query+0x260>)
 800d1f0:	487a      	ldr	r0, [pc, #488]	@ (800d3dc <etharp_query+0x264>)
 800d1f2:	f001 fe39 	bl	800ee68 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d1f6:	8a7b      	ldrh	r3, [r7, #18]
 800d1f8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d1fa:	7c7a      	ldrb	r2, [r7, #17]
 800d1fc:	4978      	ldr	r1, [pc, #480]	@ (800d3e0 <etharp_query+0x268>)
 800d1fe:	4613      	mov	r3, r2
 800d200:	005b      	lsls	r3, r3, #1
 800d202:	4413      	add	r3, r2
 800d204:	00db      	lsls	r3, r3, #3
 800d206:	440b      	add	r3, r1
 800d208:	3314      	adds	r3, #20
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d115      	bne.n	800d23c <etharp_query+0xc4>
    is_new_entry = 1;
 800d210:	2301      	movs	r3, #1
 800d212:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d214:	7c7a      	ldrb	r2, [r7, #17]
 800d216:	4972      	ldr	r1, [pc, #456]	@ (800d3e0 <etharp_query+0x268>)
 800d218:	4613      	mov	r3, r2
 800d21a:	005b      	lsls	r3, r3, #1
 800d21c:	4413      	add	r3, r2
 800d21e:	00db      	lsls	r3, r3, #3
 800d220:	440b      	add	r3, r1
 800d222:	3314      	adds	r3, #20
 800d224:	2201      	movs	r2, #1
 800d226:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d228:	7c7a      	ldrb	r2, [r7, #17]
 800d22a:	496d      	ldr	r1, [pc, #436]	@ (800d3e0 <etharp_query+0x268>)
 800d22c:	4613      	mov	r3, r2
 800d22e:	005b      	lsls	r3, r3, #1
 800d230:	4413      	add	r3, r2
 800d232:	00db      	lsls	r3, r3, #3
 800d234:	440b      	add	r3, r1
 800d236:	3308      	adds	r3, #8
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d23c:	7c7a      	ldrb	r2, [r7, #17]
 800d23e:	4968      	ldr	r1, [pc, #416]	@ (800d3e0 <etharp_query+0x268>)
 800d240:	4613      	mov	r3, r2
 800d242:	005b      	lsls	r3, r3, #1
 800d244:	4413      	add	r3, r2
 800d246:	00db      	lsls	r3, r3, #3
 800d248:	440b      	add	r3, r1
 800d24a:	3314      	adds	r3, #20
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d011      	beq.n	800d276 <etharp_query+0xfe>
 800d252:	7c7a      	ldrb	r2, [r7, #17]
 800d254:	4962      	ldr	r1, [pc, #392]	@ (800d3e0 <etharp_query+0x268>)
 800d256:	4613      	mov	r3, r2
 800d258:	005b      	lsls	r3, r3, #1
 800d25a:	4413      	add	r3, r2
 800d25c:	00db      	lsls	r3, r3, #3
 800d25e:	440b      	add	r3, r1
 800d260:	3314      	adds	r3, #20
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	2b01      	cmp	r3, #1
 800d266:	d806      	bhi.n	800d276 <etharp_query+0xfe>
 800d268:	4b5a      	ldr	r3, [pc, #360]	@ (800d3d4 <etharp_query+0x25c>)
 800d26a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d26e:	495d      	ldr	r1, [pc, #372]	@ (800d3e4 <etharp_query+0x26c>)
 800d270:	485a      	ldr	r0, [pc, #360]	@ (800d3dc <etharp_query+0x264>)
 800d272:	f001 fdf9 	bl	800ee68 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d276:	6a3b      	ldr	r3, [r7, #32]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d102      	bne.n	800d282 <etharp_query+0x10a>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10c      	bne.n	800d29c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d282:	68b9      	ldr	r1, [r7, #8]
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	f000 f963 	bl	800d550 <etharp_request>
 800d28a:	4603      	mov	r3, r0
 800d28c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d102      	bne.n	800d29c <etharp_query+0x124>
      return result;
 800d296:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d29a:	e096      	b.n	800d3ca <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d106      	bne.n	800d2b0 <etharp_query+0x138>
 800d2a2:	4b4c      	ldr	r3, [pc, #304]	@ (800d3d4 <etharp_query+0x25c>)
 800d2a4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d2a8:	494f      	ldr	r1, [pc, #316]	@ (800d3e8 <etharp_query+0x270>)
 800d2aa:	484c      	ldr	r0, [pc, #304]	@ (800d3dc <etharp_query+0x264>)
 800d2ac:	f001 fddc 	bl	800ee68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d2b0:	7c7a      	ldrb	r2, [r7, #17]
 800d2b2:	494b      	ldr	r1, [pc, #300]	@ (800d3e0 <etharp_query+0x268>)
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	005b      	lsls	r3, r3, #1
 800d2b8:	4413      	add	r3, r2
 800d2ba:	00db      	lsls	r3, r3, #3
 800d2bc:	440b      	add	r3, r1
 800d2be:	3314      	adds	r3, #20
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d917      	bls.n	800d2f6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d2c6:	4a49      	ldr	r2, [pc, #292]	@ (800d3ec <etharp_query+0x274>)
 800d2c8:	7c7b      	ldrb	r3, [r7, #17]
 800d2ca:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d2cc:	7c7a      	ldrb	r2, [r7, #17]
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	4413      	add	r3, r2
 800d2d4:	00db      	lsls	r3, r3, #3
 800d2d6:	3308      	adds	r3, #8
 800d2d8:	4a41      	ldr	r2, [pc, #260]	@ (800d3e0 <etharp_query+0x268>)
 800d2da:	4413      	add	r3, r2
 800d2dc:	3304      	adds	r3, #4
 800d2de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d2e2:	9200      	str	r2, [sp, #0]
 800d2e4:	697a      	ldr	r2, [r7, #20]
 800d2e6:	6879      	ldr	r1, [r7, #4]
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f001 fc75 	bl	800ebd8 <ethernet_output>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d2f4:	e067      	b.n	800d3c6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d2f6:	7c7a      	ldrb	r2, [r7, #17]
 800d2f8:	4939      	ldr	r1, [pc, #228]	@ (800d3e0 <etharp_query+0x268>)
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	005b      	lsls	r3, r3, #1
 800d2fe:	4413      	add	r3, r2
 800d300:	00db      	lsls	r3, r3, #3
 800d302:	440b      	add	r3, r1
 800d304:	3314      	adds	r3, #20
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d15c      	bne.n	800d3c6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d30c:	2300      	movs	r3, #0
 800d30e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d314:	e01c      	b.n	800d350 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	895a      	ldrh	r2, [r3, #10]
 800d31a:	69fb      	ldr	r3, [r7, #28]
 800d31c:	891b      	ldrh	r3, [r3, #8]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d10a      	bne.n	800d338 <etharp_query+0x1c0>
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d006      	beq.n	800d338 <etharp_query+0x1c0>
 800d32a:	4b2a      	ldr	r3, [pc, #168]	@ (800d3d4 <etharp_query+0x25c>)
 800d32c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d330:	492f      	ldr	r1, [pc, #188]	@ (800d3f0 <etharp_query+0x278>)
 800d332:	482a      	ldr	r0, [pc, #168]	@ (800d3dc <etharp_query+0x264>)
 800d334:	f001 fd98 	bl	800ee68 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	7b1b      	ldrb	r3, [r3, #12]
 800d33c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <etharp_query+0x1d2>
        copy_needed = 1;
 800d344:	2301      	movs	r3, #1
 800d346:	61bb      	str	r3, [r7, #24]
        break;
 800d348:	e005      	b.n	800d356 <etharp_query+0x1de>
      }
      p = p->next;
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d1df      	bne.n	800d316 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d007      	beq.n	800d36c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d362:	200e      	movs	r0, #14
 800d364:	f7f9 fa5c 	bl	8006820 <pbuf_clone>
 800d368:	61f8      	str	r0, [r7, #28]
 800d36a:	e004      	b.n	800d376 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d370:	69f8      	ldr	r0, [r7, #28]
 800d372:	f7f9 f889 	bl	8006488 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d021      	beq.n	800d3c0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d37c:	7c7a      	ldrb	r2, [r7, #17]
 800d37e:	4918      	ldr	r1, [pc, #96]	@ (800d3e0 <etharp_query+0x268>)
 800d380:	4613      	mov	r3, r2
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	4413      	add	r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	440b      	add	r3, r1
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00a      	beq.n	800d3a6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d390:	7c7a      	ldrb	r2, [r7, #17]
 800d392:	4913      	ldr	r1, [pc, #76]	@ (800d3e0 <etharp_query+0x268>)
 800d394:	4613      	mov	r3, r2
 800d396:	005b      	lsls	r3, r3, #1
 800d398:	4413      	add	r3, r2
 800d39a:	00db      	lsls	r3, r3, #3
 800d39c:	440b      	add	r3, r1
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7f8 ffd1 	bl	8006348 <pbuf_free>
      }
      arp_table[i].q = p;
 800d3a6:	7c7a      	ldrb	r2, [r7, #17]
 800d3a8:	490d      	ldr	r1, [pc, #52]	@ (800d3e0 <etharp_query+0x268>)
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	005b      	lsls	r3, r3, #1
 800d3ae:	4413      	add	r3, r2
 800d3b0:	00db      	lsls	r3, r3, #3
 800d3b2:	440b      	add	r3, r1
 800d3b4:	69fa      	ldr	r2, [r7, #28]
 800d3b6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d3be:	e002      	b.n	800d3c6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d3c0:	23ff      	movs	r3, #255	@ 0xff
 800d3c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d3c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3728      	adds	r7, #40	@ 0x28
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	08011fc8 	.word	0x08011fc8
 800d3d8:	08012174 	.word	0x08012174
 800d3dc:	08012040 	.word	0x08012040
 800d3e0:	200082e8 	.word	0x200082e8
 800d3e4:	08012184 	.word	0x08012184
 800d3e8:	08012168 	.word	0x08012168
 800d3ec:	200083d8 	.word	0x200083d8
 800d3f0:	080121ac 	.word	0x080121ac

0800d3f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b08a      	sub	sp, #40	@ 0x28
 800d3f8:	af02      	add	r7, sp, #8
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
 800d400:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d106      	bne.n	800d41a <etharp_raw+0x26>
 800d40c:	4b3a      	ldr	r3, [pc, #232]	@ (800d4f8 <etharp_raw+0x104>)
 800d40e:	f240 4257 	movw	r2, #1111	@ 0x457
 800d412:	493a      	ldr	r1, [pc, #232]	@ (800d4fc <etharp_raw+0x108>)
 800d414:	483a      	ldr	r0, [pc, #232]	@ (800d500 <etharp_raw+0x10c>)
 800d416:	f001 fd27 	bl	800ee68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d41a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d41e:	211c      	movs	r1, #28
 800d420:	200e      	movs	r0, #14
 800d422:	f7f8 fcad 	bl	8005d80 <pbuf_alloc>
 800d426:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d102      	bne.n	800d434 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d42e:	f04f 33ff 	mov.w	r3, #4294967295
 800d432:	e05d      	b.n	800d4f0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d434:	69bb      	ldr	r3, [r7, #24]
 800d436:	895b      	ldrh	r3, [r3, #10]
 800d438:	2b1b      	cmp	r3, #27
 800d43a:	d806      	bhi.n	800d44a <etharp_raw+0x56>
 800d43c:	4b2e      	ldr	r3, [pc, #184]	@ (800d4f8 <etharp_raw+0x104>)
 800d43e:	f240 4262 	movw	r2, #1122	@ 0x462
 800d442:	4930      	ldr	r1, [pc, #192]	@ (800d504 <etharp_raw+0x110>)
 800d444:	482e      	ldr	r0, [pc, #184]	@ (800d500 <etharp_raw+0x10c>)
 800d446:	f001 fd0f 	bl	800ee68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d450:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d452:	4618      	mov	r0, r3
 800d454:	f7f7 fc1a 	bl	8004c8c <lwip_htons>
 800d458:	4603      	mov	r3, r0
 800d45a:	461a      	mov	r2, r3
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d466:	2b06      	cmp	r3, #6
 800d468:	d006      	beq.n	800d478 <etharp_raw+0x84>
 800d46a:	4b23      	ldr	r3, [pc, #140]	@ (800d4f8 <etharp_raw+0x104>)
 800d46c:	f240 4269 	movw	r2, #1129	@ 0x469
 800d470:	4925      	ldr	r1, [pc, #148]	@ (800d508 <etharp_raw+0x114>)
 800d472:	4823      	ldr	r0, [pc, #140]	@ (800d500 <etharp_raw+0x10c>)
 800d474:	f001 fcf8 	bl	800ee68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	3308      	adds	r3, #8
 800d47c:	2206      	movs	r2, #6
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	4618      	mov	r0, r3
 800d482:	f001 fdcc 	bl	800f01e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	3312      	adds	r3, #18
 800d48a:	2206      	movs	r2, #6
 800d48c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d48e:	4618      	mov	r0, r3
 800d490:	f001 fdc5 	bl	800f01e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	330e      	adds	r3, #14
 800d498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d49a:	6812      	ldr	r2, [r2, #0]
 800d49c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	3318      	adds	r3, #24
 800d4a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4a4:	6812      	ldr	r2, [r2, #0]
 800d4a6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	701a      	strb	r2, [r3, #0]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f042 0201 	orr.w	r2, r2, #1
 800d4b4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f042 0208 	orr.w	r2, r2, #8
 800d4be:	709a      	strb	r2, [r3, #2]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	2206      	movs	r2, #6
 800d4c8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	2204      	movs	r2, #4
 800d4ce:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d4d0:	f640 0306 	movw	r3, #2054	@ 0x806
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	69b9      	ldr	r1, [r7, #24]
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f001 fb7b 	bl	800ebd8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d4e2:	69b8      	ldr	r0, [r7, #24]
 800d4e4:	f7f8 ff30 	bl	8006348 <pbuf_free>
  p = NULL;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d4ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3720      	adds	r7, #32
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	08011fc8 	.word	0x08011fc8
 800d4fc:	08012118 	.word	0x08012118
 800d500:	08012040 	.word	0x08012040
 800d504:	080121c8 	.word	0x080121c8
 800d508:	080121fc 	.word	0x080121fc

0800d50c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b088      	sub	sp, #32
 800d510:	af04      	add	r7, sp, #16
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d528:	2201      	movs	r2, #1
 800d52a:	9203      	str	r2, [sp, #12]
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	9202      	str	r2, [sp, #8]
 800d530:	4a06      	ldr	r2, [pc, #24]	@ (800d54c <etharp_request_dst+0x40>)
 800d532:	9201      	str	r2, [sp, #4]
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	4603      	mov	r3, r0
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	f7ff ff5a 	bl	800d3f4 <etharp_raw>
 800d540:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	0801278c 	.word	0x0801278c

0800d550 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d55a:	4a05      	ldr	r2, [pc, #20]	@ (800d570 <etharp_request+0x20>)
 800d55c:	6839      	ldr	r1, [r7, #0]
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff ffd4 	bl	800d50c <etharp_request_dst>
 800d564:	4603      	mov	r3, r0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	08012784 	.word	0x08012784

0800d574 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b08e      	sub	sp, #56	@ 0x38
 800d578:	af04      	add	r7, sp, #16
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d57e:	4b79      	ldr	r3, [pc, #484]	@ (800d764 <icmp_input+0x1f0>)
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	f003 030f 	and.w	r3, r3, #15
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	b2db      	uxtb	r3, r3
 800d592:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800d594:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d596:	2b13      	cmp	r3, #19
 800d598:	f240 80cd 	bls.w	800d736 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	895b      	ldrh	r3, [r3, #10]
 800d5a0:	2b03      	cmp	r3, #3
 800d5a2:	f240 80ca 	bls.w	800d73a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d5b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 80b7 	beq.w	800d728 <icmp_input+0x1b4>
 800d5ba:	2b08      	cmp	r3, #8
 800d5bc:	f040 80b7 	bne.w	800d72e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d5c0:	4b69      	ldr	r3, [pc, #420]	@ (800d768 <icmp_input+0x1f4>)
 800d5c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d5c4:	4b67      	ldr	r3, [pc, #412]	@ (800d764 <icmp_input+0x1f0>)
 800d5c6:	695b      	ldr	r3, [r3, #20]
 800d5c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d5cc:	2be0      	cmp	r3, #224	@ 0xe0
 800d5ce:	f000 80bb 	beq.w	800d748 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d5d2:	4b64      	ldr	r3, [pc, #400]	@ (800d764 <icmp_input+0x1f0>)
 800d5d4:	695b      	ldr	r3, [r3, #20]
 800d5d6:	4a63      	ldr	r2, [pc, #396]	@ (800d764 <icmp_input+0x1f0>)
 800d5d8:	6812      	ldr	r2, [r2, #0]
 800d5da:	4611      	mov	r1, r2
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 fbed 	bl	800ddbc <ip4_addr_isbroadcast_u32>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f040 80b1 	bne.w	800d74c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	891b      	ldrh	r3, [r3, #8]
 800d5ee:	2b07      	cmp	r3, #7
 800d5f0:	f240 80a5 	bls.w	800d73e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d5f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d5f6:	330e      	adds	r3, #14
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f7f8 fe0e 	bl	800621c <pbuf_add_header>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d04b      	beq.n	800d69e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	891a      	ldrh	r2, [r3, #8]
 800d60a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d60c:	4413      	add	r3, r2
 800d60e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	891b      	ldrh	r3, [r3, #8]
 800d614:	8b7a      	ldrh	r2, [r7, #26]
 800d616:	429a      	cmp	r2, r3
 800d618:	f0c0 809a 	bcc.w	800d750 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d61c:	8b7b      	ldrh	r3, [r7, #26]
 800d61e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d622:	4619      	mov	r1, r3
 800d624:	200e      	movs	r0, #14
 800d626:	f7f8 fbab 	bl	8005d80 <pbuf_alloc>
 800d62a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f000 8090 	beq.w	800d754 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	895b      	ldrh	r3, [r3, #10]
 800d638:	461a      	mov	r2, r3
 800d63a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d63c:	3308      	adds	r3, #8
 800d63e:	429a      	cmp	r2, r3
 800d640:	d203      	bcs.n	800d64a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d642:	6978      	ldr	r0, [r7, #20]
 800d644:	f7f8 fe80 	bl	8006348 <pbuf_free>
          goto icmperr;
 800d648:	e085      	b.n	800d756 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d652:	4618      	mov	r0, r3
 800d654:	f001 fce3 	bl	800f01e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d658:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d65a:	4619      	mov	r1, r3
 800d65c:	6978      	ldr	r0, [r7, #20]
 800d65e:	f7f8 fded 	bl	800623c <pbuf_remove_header>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d009      	beq.n	800d67c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d668:	4b40      	ldr	r3, [pc, #256]	@ (800d76c <icmp_input+0x1f8>)
 800d66a:	22b6      	movs	r2, #182	@ 0xb6
 800d66c:	4940      	ldr	r1, [pc, #256]	@ (800d770 <icmp_input+0x1fc>)
 800d66e:	4841      	ldr	r0, [pc, #260]	@ (800d774 <icmp_input+0x200>)
 800d670:	f001 fbfa 	bl	800ee68 <iprintf>
          pbuf_free(r);
 800d674:	6978      	ldr	r0, [r7, #20]
 800d676:	f7f8 fe67 	bl	8006348 <pbuf_free>
          goto icmperr;
 800d67a:	e06c      	b.n	800d756 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d67c:	6879      	ldr	r1, [r7, #4]
 800d67e:	6978      	ldr	r0, [r7, #20]
 800d680:	f7f8 ff8a 	bl	8006598 <pbuf_copy>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d003      	beq.n	800d692 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d68a:	6978      	ldr	r0, [r7, #20]
 800d68c:	f7f8 fe5c 	bl	8006348 <pbuf_free>
          goto icmperr;
 800d690:	e061      	b.n	800d756 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7f8 fe58 	bl	8006348 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	607b      	str	r3, [r7, #4]
 800d69c:	e00f      	b.n	800d6be <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d69e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d6a0:	330e      	adds	r3, #14
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f7f8 fdc9 	bl	800623c <pbuf_remove_header>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d006      	beq.n	800d6be <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d6b0:	4b2e      	ldr	r3, [pc, #184]	@ (800d76c <icmp_input+0x1f8>)
 800d6b2:	22c7      	movs	r2, #199	@ 0xc7
 800d6b4:	4930      	ldr	r1, [pc, #192]	@ (800d778 <icmp_input+0x204>)
 800d6b6:	482f      	ldr	r0, [pc, #188]	@ (800d774 <icmp_input+0x200>)
 800d6b8:	f001 fbd6 	bl	800ee68 <iprintf>
          goto icmperr;
 800d6bc:	e04b      	b.n	800d756 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d6c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7f8 fda7 	bl	800621c <pbuf_add_header>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d12b      	bne.n	800d72c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d6e2:	4b20      	ldr	r3, [pc, #128]	@ (800d764 <icmp_input+0x1f0>)
 800d6e4:	691a      	ldr	r2, [r3, #16]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	709a      	strb	r2, [r3, #2]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	22ff      	movs	r2, #255	@ 0xff
 800d6fe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2200      	movs	r2, #0
 800d704:	729a      	strb	r2, [r3, #10]
 800d706:	2200      	movs	r2, #0
 800d708:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	9302      	str	r3, [sp, #8]
 800d70e:	2301      	movs	r3, #1
 800d710:	9301      	str	r3, [sp, #4]
 800d712:	2300      	movs	r3, #0
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	23ff      	movs	r3, #255	@ 0xff
 800d718:	2200      	movs	r2, #0
 800d71a:	69f9      	ldr	r1, [r7, #28]
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 fa75 	bl	800dc0c <ip4_output_if>
 800d722:	4603      	mov	r3, r0
 800d724:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d726:	e001      	b.n	800d72c <icmp_input+0x1b8>
      break;
 800d728:	bf00      	nop
 800d72a:	e000      	b.n	800d72e <icmp_input+0x1ba>
      break;
 800d72c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f7f8 fe0a 	bl	8006348 <pbuf_free>
  return;
 800d734:	e013      	b.n	800d75e <icmp_input+0x1ea>
    goto lenerr;
 800d736:	bf00      	nop
 800d738:	e002      	b.n	800d740 <icmp_input+0x1cc>
    goto lenerr;
 800d73a:	bf00      	nop
 800d73c:	e000      	b.n	800d740 <icmp_input+0x1cc>
        goto lenerr;
 800d73e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7f8 fe01 	bl	8006348 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d746:	e00a      	b.n	800d75e <icmp_input+0x1ea>
        goto icmperr;
 800d748:	bf00      	nop
 800d74a:	e004      	b.n	800d756 <icmp_input+0x1e2>
        goto icmperr;
 800d74c:	bf00      	nop
 800d74e:	e002      	b.n	800d756 <icmp_input+0x1e2>
          goto icmperr;
 800d750:	bf00      	nop
 800d752:	e000      	b.n	800d756 <icmp_input+0x1e2>
          goto icmperr;
 800d754:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7f8 fdf6 	bl	8006348 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d75c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d75e:	3728      	adds	r7, #40	@ 0x28
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	20004d18 	.word	0x20004d18
 800d768:	20004d2c 	.word	0x20004d2c
 800d76c:	08012240 	.word	0x08012240
 800d770:	08012278 	.word	0x08012278
 800d774:	080122b0 	.word	0x080122b0
 800d778:	080122d8 	.word	0x080122d8

0800d77c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	460b      	mov	r3, r1
 800d786:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d788:	78fb      	ldrb	r3, [r7, #3]
 800d78a:	461a      	mov	r2, r3
 800d78c:	2103      	movs	r1, #3
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f814 	bl	800d7bc <icmp_send_response>
}
 800d794:	bf00      	nop
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d7a8:	78fb      	ldrb	r3, [r7, #3]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	210b      	movs	r1, #11
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 f804 	bl	800d7bc <icmp_send_response>
}
 800d7b4:	bf00      	nop
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b08c      	sub	sp, #48	@ 0x30
 800d7c0:	af04      	add	r7, sp, #16
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	70fb      	strb	r3, [r7, #3]
 800d7c8:	4613      	mov	r3, r2
 800d7ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d7cc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d7d0:	2124      	movs	r1, #36	@ 0x24
 800d7d2:	2022      	movs	r0, #34	@ 0x22
 800d7d4:	f7f8 fad4 	bl	8005d80 <pbuf_alloc>
 800d7d8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d04c      	beq.n	800d87a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	895b      	ldrh	r3, [r3, #10]
 800d7e4:	2b23      	cmp	r3, #35	@ 0x23
 800d7e6:	d806      	bhi.n	800d7f6 <icmp_send_response+0x3a>
 800d7e8:	4b26      	ldr	r3, [pc, #152]	@ (800d884 <icmp_send_response+0xc8>)
 800d7ea:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800d7ee:	4926      	ldr	r1, [pc, #152]	@ (800d888 <icmp_send_response+0xcc>)
 800d7f0:	4826      	ldr	r0, [pc, #152]	@ (800d88c <icmp_send_response+0xd0>)
 800d7f2:	f001 fb39 	bl	800ee68 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	78fa      	ldrb	r2, [r7, #3]
 800d806:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	78ba      	ldrb	r2, [r7, #2]
 800d80c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	2200      	movs	r2, #0
 800d812:	711a      	strb	r2, [r3, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	2200      	movs	r2, #0
 800d81c:	719a      	strb	r2, [r3, #6]
 800d81e:	2200      	movs	r2, #0
 800d820:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	f103 0008 	add.w	r0, r3, #8
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	221c      	movs	r2, #28
 800d830:	4619      	mov	r1, r3
 800d832:	f001 fbf4 	bl	800f01e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d83c:	f107 030c 	add.w	r3, r7, #12
 800d840:	4618      	mov	r0, r3
 800d842:	f000 f825 	bl	800d890 <ip4_route>
 800d846:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d011      	beq.n	800d872 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	2200      	movs	r2, #0
 800d852:	709a      	strb	r2, [r3, #2]
 800d854:	2200      	movs	r2, #0
 800d856:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d858:	f107 020c 	add.w	r2, r7, #12
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	9302      	str	r3, [sp, #8]
 800d860:	2301      	movs	r3, #1
 800d862:	9301      	str	r3, [sp, #4]
 800d864:	2300      	movs	r3, #0
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	23ff      	movs	r3, #255	@ 0xff
 800d86a:	2100      	movs	r1, #0
 800d86c:	69f8      	ldr	r0, [r7, #28]
 800d86e:	f000 f9cd 	bl	800dc0c <ip4_output_if>
  }
  pbuf_free(q);
 800d872:	69f8      	ldr	r0, [r7, #28]
 800d874:	f7f8 fd68 	bl	8006348 <pbuf_free>
 800d878:	e000      	b.n	800d87c <icmp_send_response+0xc0>
    return;
 800d87a:	bf00      	nop
}
 800d87c:	3720      	adds	r7, #32
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	08012240 	.word	0x08012240
 800d888:	0801230c 	.word	0x0801230c
 800d88c:	080122b0 	.word	0x080122b0

0800d890 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d898:	4b33      	ldr	r3, [pc, #204]	@ (800d968 <ip4_route+0xd8>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	60fb      	str	r3, [r7, #12]
 800d89e:	e036      	b.n	800d90e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8a6:	f003 0301 	and.w	r3, r3, #1
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d02b      	beq.n	800d908 <ip4_route+0x78>
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8b6:	089b      	lsrs	r3, r3, #2
 800d8b8:	f003 0301 	and.w	r3, r3, #1
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d022      	beq.n	800d908 <ip4_route+0x78>
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d01d      	beq.n	800d908 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	3304      	adds	r3, #4
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	405a      	eors	r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	3308      	adds	r3, #8
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4013      	ands	r3, r2
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d101      	bne.n	800d8e8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	e038      	b.n	800d95a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8ee:	f003 0302 	and.w	r3, r3, #2
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d108      	bne.n	800d908 <ip4_route+0x78>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	330c      	adds	r3, #12
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	429a      	cmp	r2, r3
 800d902:	d101      	bne.n	800d908 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	e028      	b.n	800d95a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	60fb      	str	r3, [r7, #12]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1c5      	bne.n	800d8a0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d914:	4b15      	ldr	r3, [pc, #84]	@ (800d96c <ip4_route+0xdc>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d01a      	beq.n	800d952 <ip4_route+0xc2>
 800d91c:	4b13      	ldr	r3, [pc, #76]	@ (800d96c <ip4_route+0xdc>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d924:	f003 0301 	and.w	r3, r3, #1
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d012      	beq.n	800d952 <ip4_route+0xc2>
 800d92c:	4b0f      	ldr	r3, [pc, #60]	@ (800d96c <ip4_route+0xdc>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d934:	f003 0304 	and.w	r3, r3, #4
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00a      	beq.n	800d952 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d93c:	4b0b      	ldr	r3, [pc, #44]	@ (800d96c <ip4_route+0xdc>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	3304      	adds	r3, #4
 800d942:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d944:	2b00      	cmp	r3, #0
 800d946:	d004      	beq.n	800d952 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d950:	d101      	bne.n	800d956 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d952:	2300      	movs	r3, #0
 800d954:	e001      	b.n	800d95a <ip4_route+0xca>
  }

  return netif_default;
 800d956:	4b05      	ldr	r3, [pc, #20]	@ (800d96c <ip4_route+0xdc>)
 800d958:	681b      	ldr	r3, [r3, #0]
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	2000827c 	.word	0x2000827c
 800d96c:	20008280 	.word	0x20008280

0800d970 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d97e:	f003 0301 	and.w	r3, r3, #1
 800d982:	b2db      	uxtb	r3, r3
 800d984:	2b00      	cmp	r3, #0
 800d986:	d016      	beq.n	800d9b6 <ip4_input_accept+0x46>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	3304      	adds	r3, #4
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d011      	beq.n	800d9b6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d992:	4b0b      	ldr	r3, [pc, #44]	@ (800d9c0 <ip4_input_accept+0x50>)
 800d994:	695a      	ldr	r2, [r3, #20]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	3304      	adds	r3, #4
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d008      	beq.n	800d9b2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d9a0:	4b07      	ldr	r3, [pc, #28]	@ (800d9c0 <ip4_input_accept+0x50>)
 800d9a2:	695b      	ldr	r3, [r3, #20]
 800d9a4:	6879      	ldr	r1, [r7, #4]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f000 fa08 	bl	800ddbc <ip4_addr_isbroadcast_u32>
 800d9ac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d001      	beq.n	800d9b6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	e000      	b.n	800d9b8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d9b6:	2300      	movs	r3, #0
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3708      	adds	r7, #8
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	20004d18 	.word	0x20004d18

0800d9c4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	091b      	lsrs	r3, r3, #4
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	2b04      	cmp	r3, #4
 800d9de:	d004      	beq.n	800d9ea <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7f8 fcb1 	bl	8006348 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	e107      	b.n	800dbfa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	f003 030f 	and.w	r3, r3, #15
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	885b      	ldrh	r3, [r3, #2]
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	4618      	mov	r0, r3
 800da02:	f7f7 f943 	bl	8004c8c <lwip_htons>
 800da06:	4603      	mov	r3, r0
 800da08:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	891b      	ldrh	r3, [r3, #8]
 800da0e:	89ba      	ldrh	r2, [r7, #12]
 800da10:	429a      	cmp	r2, r3
 800da12:	d204      	bcs.n	800da1e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800da14:	89bb      	ldrh	r3, [r7, #12]
 800da16:	4619      	mov	r1, r3
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7f8 fb0f 	bl	800603c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	895b      	ldrh	r3, [r3, #10]
 800da22:	89fa      	ldrh	r2, [r7, #14]
 800da24:	429a      	cmp	r2, r3
 800da26:	d807      	bhi.n	800da38 <ip4_input+0x74>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	891b      	ldrh	r3, [r3, #8]
 800da2c:	89ba      	ldrh	r2, [r7, #12]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d802      	bhi.n	800da38 <ip4_input+0x74>
 800da32:	89fb      	ldrh	r3, [r7, #14]
 800da34:	2b13      	cmp	r3, #19
 800da36:	d804      	bhi.n	800da42 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7f8 fc85 	bl	8006348 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800da3e:	2300      	movs	r3, #0
 800da40:	e0db      	b.n	800dbfa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	4a6f      	ldr	r2, [pc, #444]	@ (800dc04 <ip4_input+0x240>)
 800da48:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	4a6d      	ldr	r2, [pc, #436]	@ (800dc04 <ip4_input+0x240>)
 800da50:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da52:	4b6c      	ldr	r3, [pc, #432]	@ (800dc04 <ip4_input+0x240>)
 800da54:	695b      	ldr	r3, [r3, #20]
 800da56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800da5a:	2be0      	cmp	r3, #224	@ 0xe0
 800da5c:	d112      	bne.n	800da84 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800da64:	f003 0301 	and.w	r3, r3, #1
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d007      	beq.n	800da7e <ip4_input+0xba>
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	3304      	adds	r3, #4
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d002      	beq.n	800da7e <ip4_input+0xba>
      netif = inp;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	613b      	str	r3, [r7, #16]
 800da7c:	e02a      	b.n	800dad4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800da7e:	2300      	movs	r3, #0
 800da80:	613b      	str	r3, [r7, #16]
 800da82:	e027      	b.n	800dad4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800da84:	6838      	ldr	r0, [r7, #0]
 800da86:	f7ff ff73 	bl	800d970 <ip4_input_accept>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d002      	beq.n	800da96 <ip4_input+0xd2>
      netif = inp;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	613b      	str	r3, [r7, #16]
 800da94:	e01e      	b.n	800dad4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800da96:	2300      	movs	r3, #0
 800da98:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800da9a:	4b5a      	ldr	r3, [pc, #360]	@ (800dc04 <ip4_input+0x240>)
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	2b7f      	cmp	r3, #127	@ 0x7f
 800daa2:	d017      	beq.n	800dad4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800daa4:	4b58      	ldr	r3, [pc, #352]	@ (800dc08 <ip4_input+0x244>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	613b      	str	r3, [r7, #16]
 800daaa:	e00e      	b.n	800daca <ip4_input+0x106>
          if (netif == inp) {
 800daac:	693a      	ldr	r2, [r7, #16]
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d006      	beq.n	800dac2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800dab4:	6938      	ldr	r0, [r7, #16]
 800dab6:	f7ff ff5b 	bl	800d970 <ip4_input_accept>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d108      	bne.n	800dad2 <ip4_input+0x10e>
 800dac0:	e000      	b.n	800dac4 <ip4_input+0x100>
            continue;
 800dac2:	bf00      	nop
        NETIF_FOREACH(netif) {
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	613b      	str	r3, [r7, #16]
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1ed      	bne.n	800daac <ip4_input+0xe8>
 800dad0:	e000      	b.n	800dad4 <ip4_input+0x110>
            break;
 800dad2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dad4:	4b4b      	ldr	r3, [pc, #300]	@ (800dc04 <ip4_input+0x240>)
 800dad6:	691b      	ldr	r3, [r3, #16]
 800dad8:	6839      	ldr	r1, [r7, #0]
 800dada:	4618      	mov	r0, r3
 800dadc:	f000 f96e 	bl	800ddbc <ip4_addr_isbroadcast_u32>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d105      	bne.n	800daf2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dae6:	4b47      	ldr	r3, [pc, #284]	@ (800dc04 <ip4_input+0x240>)
 800dae8:	691b      	ldr	r3, [r3, #16]
 800daea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800daee:	2be0      	cmp	r3, #224	@ 0xe0
 800daf0:	d104      	bne.n	800dafc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7f8 fc28 	bl	8006348 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800daf8:	2300      	movs	r3, #0
 800dafa:	e07e      	b.n	800dbfa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d104      	bne.n	800db0c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7f8 fc20 	bl	8006348 <pbuf_free>
    return ERR_OK;
 800db08:	2300      	movs	r3, #0
 800db0a:	e076      	b.n	800dbfa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	88db      	ldrh	r3, [r3, #6]
 800db10:	b29b      	uxth	r3, r3
 800db12:	461a      	mov	r2, r3
 800db14:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800db18:	4013      	ands	r3, r2
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00b      	beq.n	800db36 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fc92 	bl	800e448 <ip4_reass>
 800db24:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <ip4_input+0x16c>
      return ERR_OK;
 800db2c:	2300      	movs	r3, #0
 800db2e:	e064      	b.n	800dbfa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800db36:	4a33      	ldr	r2, [pc, #204]	@ (800dc04 <ip4_input+0x240>)
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800db3c:	4a31      	ldr	r2, [pc, #196]	@ (800dc04 <ip4_input+0x240>)
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800db42:	4a30      	ldr	r2, [pc, #192]	@ (800dc04 <ip4_input+0x240>)
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	f003 030f 	and.w	r3, r3, #15
 800db50:	b2db      	uxtb	r3, r3
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	b2db      	uxtb	r3, r3
 800db56:	461a      	mov	r2, r3
 800db58:	4b2a      	ldr	r3, [pc, #168]	@ (800dc04 <ip4_input+0x240>)
 800db5a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800db5c:	89fb      	ldrh	r3, [r7, #14]
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7f8 fb6b 	bl	800623c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	7a5b      	ldrb	r3, [r3, #9]
 800db6a:	2b11      	cmp	r3, #17
 800db6c:	d006      	beq.n	800db7c <ip4_input+0x1b8>
 800db6e:	2b11      	cmp	r3, #17
 800db70:	dc13      	bgt.n	800db9a <ip4_input+0x1d6>
 800db72:	2b01      	cmp	r3, #1
 800db74:	d00c      	beq.n	800db90 <ip4_input+0x1cc>
 800db76:	2b06      	cmp	r3, #6
 800db78:	d005      	beq.n	800db86 <ip4_input+0x1c2>
 800db7a:	e00e      	b.n	800db9a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800db7c:	6839      	ldr	r1, [r7, #0]
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7fe f9d0 	bl	800bf24 <udp_input>
        break;
 800db84:	e026      	b.n	800dbd4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f7fa fa17 	bl	8007fbc <tcp_input>
        break;
 800db8e:	e021      	b.n	800dbd4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800db90:	6839      	ldr	r1, [r7, #0]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7ff fcee 	bl	800d574 <icmp_input>
        break;
 800db98:	e01c      	b.n	800dbd4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800db9a:	4b1a      	ldr	r3, [pc, #104]	@ (800dc04 <ip4_input+0x240>)
 800db9c:	695b      	ldr	r3, [r3, #20]
 800db9e:	6939      	ldr	r1, [r7, #16]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f000 f90b 	bl	800ddbc <ip4_addr_isbroadcast_u32>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d10f      	bne.n	800dbcc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dbac:	4b15      	ldr	r3, [pc, #84]	@ (800dc04 <ip4_input+0x240>)
 800dbae:	695b      	ldr	r3, [r3, #20]
 800dbb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dbb4:	2be0      	cmp	r3, #224	@ 0xe0
 800dbb6:	d009      	beq.n	800dbcc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dbb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7f8 fbaf 	bl	8006322 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800dbc4:	2102      	movs	r1, #2
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7ff fdd8 	bl	800d77c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7f8 fbbb 	bl	8006348 <pbuf_free>
        break;
 800dbd2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dbd4:	4b0b      	ldr	r3, [pc, #44]	@ (800dc04 <ip4_input+0x240>)
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dbda:	4b0a      	ldr	r3, [pc, #40]	@ (800dc04 <ip4_input+0x240>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dbe0:	4b08      	ldr	r3, [pc, #32]	@ (800dc04 <ip4_input+0x240>)
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800dbe6:	4b07      	ldr	r3, [pc, #28]	@ (800dc04 <ip4_input+0x240>)
 800dbe8:	2200      	movs	r2, #0
 800dbea:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800dbec:	4b05      	ldr	r3, [pc, #20]	@ (800dc04 <ip4_input+0x240>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800dbf2:	4b04      	ldr	r3, [pc, #16]	@ (800dc04 <ip4_input+0x240>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3718      	adds	r7, #24
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	20004d18 	.word	0x20004d18
 800dc08:	2000827c 	.word	0x2000827c

0800dc0c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b08a      	sub	sp, #40	@ 0x28
 800dc10:	af04      	add	r7, sp, #16
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
 800dc18:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d009      	beq.n	800dc38 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <ip4_output_if+0x26>
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d102      	bne.n	800dc38 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc34:	3304      	adds	r3, #4
 800dc36:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dc38:	78fa      	ldrb	r2, [r7, #3]
 800dc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc3c:	9302      	str	r3, [sp, #8]
 800dc3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dc42:	9301      	str	r3, [sp, #4]
 800dc44:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	6979      	ldr	r1, [r7, #20]
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f000 f805 	bl	800dc60 <ip4_output_if_src>
 800dc56:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3718      	adds	r7, #24
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b088      	sub	sp, #32
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	607a      	str	r2, [r7, #4]
 800dc6c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	7b9b      	ldrb	r3, [r3, #14]
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d006      	beq.n	800dc84 <ip4_output_if_src+0x24>
 800dc76:	4b4b      	ldr	r3, [pc, #300]	@ (800dda4 <ip4_output_if_src+0x144>)
 800dc78:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800dc7c:	494a      	ldr	r1, [pc, #296]	@ (800dda8 <ip4_output_if_src+0x148>)
 800dc7e:	484b      	ldr	r0, [pc, #300]	@ (800ddac <ip4_output_if_src+0x14c>)
 800dc80:	f001 f8f2 	bl	800ee68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d060      	beq.n	800dd4c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dc8a:	2314      	movs	r3, #20
 800dc8c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dc8e:	2114      	movs	r1, #20
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f7f8 fac3 	bl	800621c <pbuf_add_header>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d002      	beq.n	800dca2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dc9c:	f06f 0301 	mvn.w	r3, #1
 800dca0:	e07c      	b.n	800dd9c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	895b      	ldrh	r3, [r3, #10]
 800dcac:	2b13      	cmp	r3, #19
 800dcae:	d806      	bhi.n	800dcbe <ip4_output_if_src+0x5e>
 800dcb0:	4b3c      	ldr	r3, [pc, #240]	@ (800dda4 <ip4_output_if_src+0x144>)
 800dcb2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800dcb6:	493e      	ldr	r1, [pc, #248]	@ (800ddb0 <ip4_output_if_src+0x150>)
 800dcb8:	483c      	ldr	r0, [pc, #240]	@ (800ddac <ip4_output_if_src+0x14c>)
 800dcba:	f001 f8d5 	bl	800ee68 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	78fa      	ldrb	r2, [r7, #3]
 800dcc2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800dcca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dcd4:	8b7b      	ldrh	r3, [r7, #26]
 800dcd6:	089b      	lsrs	r3, r3, #2
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800dcec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	891b      	ldrh	r3, [r3, #8]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7f6 ffca 	bl	8004c8c <lwip_htons>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	2200      	movs	r2, #0
 800dd04:	719a      	strb	r2, [r3, #6]
 800dd06:	2200      	movs	r2, #0
 800dd08:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dd0a:	4b2a      	ldr	r3, [pc, #168]	@ (800ddb4 <ip4_output_if_src+0x154>)
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7f6 ffbc 	bl	8004c8c <lwip_htons>
 800dd14:	4603      	mov	r3, r0
 800dd16:	461a      	mov	r2, r3
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dd1c:	4b25      	ldr	r3, [pc, #148]	@ (800ddb4 <ip4_output_if_src+0x154>)
 800dd1e:	881b      	ldrh	r3, [r3, #0]
 800dd20:	3301      	adds	r3, #1
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	4b23      	ldr	r3, [pc, #140]	@ (800ddb4 <ip4_output_if_src+0x154>)
 800dd26:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d104      	bne.n	800dd38 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dd2e:	4b22      	ldr	r3, [pc, #136]	@ (800ddb8 <ip4_output_if_src+0x158>)
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	69fb      	ldr	r3, [r7, #28]
 800dd34:	60da      	str	r2, [r3, #12]
 800dd36:	e003      	b.n	800dd40 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	2200      	movs	r2, #0
 800dd44:	729a      	strb	r2, [r3, #10]
 800dd46:	2200      	movs	r2, #0
 800dd48:	72da      	strb	r2, [r3, #11]
 800dd4a:	e00f      	b.n	800dd6c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	895b      	ldrh	r3, [r3, #10]
 800dd50:	2b13      	cmp	r3, #19
 800dd52:	d802      	bhi.n	800dd5a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dd54:	f06f 0301 	mvn.w	r3, #1
 800dd58:	e020      	b.n	800dd9c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	691b      	ldr	r3, [r3, #16]
 800dd64:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dd66:	f107 0314 	add.w	r3, r7, #20
 800dd6a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d00c      	beq.n	800dd8e <ip4_output_if_src+0x12e>
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	891a      	ldrh	r2, [r3, #8]
 800dd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d906      	bls.n	800dd8e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f000 fd53 	bl	800e830 <ip4_frag>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	e006      	b.n	800dd9c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd90:	695b      	ldr	r3, [r3, #20]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	68f9      	ldr	r1, [r7, #12]
 800dd96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd98:	4798      	blx	r3
 800dd9a:	4603      	mov	r3, r0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3720      	adds	r7, #32
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	08012338 	.word	0x08012338
 800dda8:	0801236c 	.word	0x0801236c
 800ddac:	08012378 	.word	0x08012378
 800ddb0:	080123a0 	.word	0x080123a0
 800ddb4:	200083da 	.word	0x200083da
 800ddb8:	08012780 	.word	0x08012780

0800ddbc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd0:	d002      	beq.n	800ddd8 <ip4_addr_isbroadcast_u32+0x1c>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d101      	bne.n	800dddc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	e02a      	b.n	800de32 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dde2:	f003 0302 	and.w	r3, r3, #2
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ddea:	2300      	movs	r3, #0
 800ddec:	e021      	b.n	800de32 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	687a      	ldr	r2, [r7, #4]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d101      	bne.n	800ddfe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	e019      	b.n	800de32 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	3304      	adds	r3, #4
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	405a      	eors	r2, r3
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	3308      	adds	r3, #8
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4013      	ands	r3, r2
 800de10:	2b00      	cmp	r3, #0
 800de12:	d10d      	bne.n	800de30 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	3308      	adds	r3, #8
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	43da      	mvns	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	3308      	adds	r3, #8
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800de28:	429a      	cmp	r2, r3
 800de2a:	d101      	bne.n	800de30 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800de2c:	2301      	movs	r3, #1
 800de2e:	e000      	b.n	800de32 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800de30:	2300      	movs	r3, #0
  }
}
 800de32:	4618      	mov	r0, r3
 800de34:	3714      	adds	r7, #20
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr
	...

0800de40 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800de46:	2300      	movs	r3, #0
 800de48:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800de4a:	4b12      	ldr	r3, [pc, #72]	@ (800de94 <ip_reass_tmr+0x54>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800de50:	e018      	b.n	800de84 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	7fdb      	ldrb	r3, [r3, #31]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00b      	beq.n	800de72 <ip_reass_tmr+0x32>
      r->timer--;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	7fdb      	ldrb	r3, [r3, #31]
 800de5e:	3b01      	subs	r3, #1
 800de60:	b2da      	uxtb	r2, r3
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	60fb      	str	r3, [r7, #12]
 800de70:	e008      	b.n	800de84 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800de7c:	68b9      	ldr	r1, [r7, #8]
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 f80a 	bl	800de98 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1e3      	bne.n	800de52 <ip_reass_tmr+0x12>
    }
  }
}
 800de8a:	bf00      	nop
 800de8c:	bf00      	nop
 800de8e:	3710      	adds	r7, #16
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	200083dc 	.word	0x200083dc

0800de98 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b088      	sub	sp, #32
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800dea2:	2300      	movs	r3, #0
 800dea4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dea6:	683a      	ldr	r2, [r7, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d105      	bne.n	800deba <ip_reass_free_complete_datagram+0x22>
 800deae:	4b45      	ldr	r3, [pc, #276]	@ (800dfc4 <ip_reass_free_complete_datagram+0x12c>)
 800deb0:	22ab      	movs	r2, #171	@ 0xab
 800deb2:	4945      	ldr	r1, [pc, #276]	@ (800dfc8 <ip_reass_free_complete_datagram+0x130>)
 800deb4:	4845      	ldr	r0, [pc, #276]	@ (800dfcc <ip_reass_free_complete_datagram+0x134>)
 800deb6:	f000 ffd7 	bl	800ee68 <iprintf>
  if (prev != NULL) {
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00a      	beq.n	800ded6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d005      	beq.n	800ded6 <ip_reass_free_complete_datagram+0x3e>
 800deca:	4b3e      	ldr	r3, [pc, #248]	@ (800dfc4 <ip_reass_free_complete_datagram+0x12c>)
 800decc:	22ad      	movs	r2, #173	@ 0xad
 800dece:	4940      	ldr	r1, [pc, #256]	@ (800dfd0 <ip_reass_free_complete_datagram+0x138>)
 800ded0:	483e      	ldr	r0, [pc, #248]	@ (800dfcc <ip_reass_free_complete_datagram+0x134>)
 800ded2:	f000 ffc9 	bl	800ee68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	889b      	ldrh	r3, [r3, #4]
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d12a      	bne.n	800df3e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	6858      	ldr	r0, [r3, #4]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	3308      	adds	r3, #8
 800defe:	2214      	movs	r2, #20
 800df00:	4619      	mov	r1, r3
 800df02:	f001 f88c 	bl	800f01e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800df06:	2101      	movs	r1, #1
 800df08:	69b8      	ldr	r0, [r7, #24]
 800df0a:	f7ff fc47 	bl	800d79c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800df0e:	69b8      	ldr	r0, [r7, #24]
 800df10:	f7f8 faa2 	bl	8006458 <pbuf_clen>
 800df14:	4603      	mov	r3, r0
 800df16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800df18:	8bfa      	ldrh	r2, [r7, #30]
 800df1a:	8a7b      	ldrh	r3, [r7, #18]
 800df1c:	4413      	add	r3, r2
 800df1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df22:	db05      	blt.n	800df30 <ip_reass_free_complete_datagram+0x98>
 800df24:	4b27      	ldr	r3, [pc, #156]	@ (800dfc4 <ip_reass_free_complete_datagram+0x12c>)
 800df26:	22bc      	movs	r2, #188	@ 0xbc
 800df28:	492a      	ldr	r1, [pc, #168]	@ (800dfd4 <ip_reass_free_complete_datagram+0x13c>)
 800df2a:	4828      	ldr	r0, [pc, #160]	@ (800dfcc <ip_reass_free_complete_datagram+0x134>)
 800df2c:	f000 ff9c 	bl	800ee68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800df30:	8bfa      	ldrh	r2, [r7, #30]
 800df32:	8a7b      	ldrh	r3, [r7, #18]
 800df34:	4413      	add	r3, r2
 800df36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800df38:	69b8      	ldr	r0, [r7, #24]
 800df3a:	f7f8 fa05 	bl	8006348 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800df44:	e01f      	b.n	800df86 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f7f8 fa7e 	bl	8006458 <pbuf_clen>
 800df5c:	4603      	mov	r3, r0
 800df5e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800df60:	8bfa      	ldrh	r2, [r7, #30]
 800df62:	8a7b      	ldrh	r3, [r7, #18]
 800df64:	4413      	add	r3, r2
 800df66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df6a:	db05      	blt.n	800df78 <ip_reass_free_complete_datagram+0xe0>
 800df6c:	4b15      	ldr	r3, [pc, #84]	@ (800dfc4 <ip_reass_free_complete_datagram+0x12c>)
 800df6e:	22cc      	movs	r2, #204	@ 0xcc
 800df70:	4918      	ldr	r1, [pc, #96]	@ (800dfd4 <ip_reass_free_complete_datagram+0x13c>)
 800df72:	4816      	ldr	r0, [pc, #88]	@ (800dfcc <ip_reass_free_complete_datagram+0x134>)
 800df74:	f000 ff78 	bl	800ee68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800df78:	8bfa      	ldrh	r2, [r7, #30]
 800df7a:	8a7b      	ldrh	r3, [r7, #18]
 800df7c:	4413      	add	r3, r2
 800df7e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f7f8 f9e1 	bl	8006348 <pbuf_free>
  while (p != NULL) {
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1dc      	bne.n	800df46 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800df8c:	6839      	ldr	r1, [r7, #0]
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 f8c2 	bl	800e118 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800df94:	4b10      	ldr	r3, [pc, #64]	@ (800dfd8 <ip_reass_free_complete_datagram+0x140>)
 800df96:	881b      	ldrh	r3, [r3, #0]
 800df98:	8bfa      	ldrh	r2, [r7, #30]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d905      	bls.n	800dfaa <ip_reass_free_complete_datagram+0x112>
 800df9e:	4b09      	ldr	r3, [pc, #36]	@ (800dfc4 <ip_reass_free_complete_datagram+0x12c>)
 800dfa0:	22d2      	movs	r2, #210	@ 0xd2
 800dfa2:	490e      	ldr	r1, [pc, #56]	@ (800dfdc <ip_reass_free_complete_datagram+0x144>)
 800dfa4:	4809      	ldr	r0, [pc, #36]	@ (800dfcc <ip_reass_free_complete_datagram+0x134>)
 800dfa6:	f000 ff5f 	bl	800ee68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dfaa:	4b0b      	ldr	r3, [pc, #44]	@ (800dfd8 <ip_reass_free_complete_datagram+0x140>)
 800dfac:	881a      	ldrh	r2, [r3, #0]
 800dfae:	8bfb      	ldrh	r3, [r7, #30]
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	4b08      	ldr	r3, [pc, #32]	@ (800dfd8 <ip_reass_free_complete_datagram+0x140>)
 800dfb6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dfb8:	8bfb      	ldrh	r3, [r7, #30]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3720      	adds	r7, #32
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	080123d0 	.word	0x080123d0
 800dfc8:	0801240c 	.word	0x0801240c
 800dfcc:	08012418 	.word	0x08012418
 800dfd0:	08012440 	.word	0x08012440
 800dfd4:	08012454 	.word	0x08012454
 800dfd8:	200083e0 	.word	0x200083e0
 800dfdc:	08012474 	.word	0x08012474

0800dfe0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b08a      	sub	sp, #40	@ 0x28
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dfea:	2300      	movs	r3, #0
 800dfec:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800dfee:	2300      	movs	r3, #0
 800dff0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dff2:	2300      	movs	r3, #0
 800dff4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dff6:	2300      	movs	r3, #0
 800dff8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dffe:	4b28      	ldr	r3, [pc, #160]	@ (800e0a0 <ip_reass_remove_oldest_datagram+0xc0>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e004:	e030      	b.n	800e068 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e008:	695a      	ldr	r2, [r3, #20]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	68db      	ldr	r3, [r3, #12]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d10c      	bne.n	800e02c <ip_reass_remove_oldest_datagram+0x4c>
 800e012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e014:	699a      	ldr	r2, [r3, #24]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d106      	bne.n	800e02c <ip_reass_remove_oldest_datagram+0x4c>
 800e01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e020:	899a      	ldrh	r2, [r3, #12]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	889b      	ldrh	r3, [r3, #4]
 800e026:	b29b      	uxth	r3, r3
 800e028:	429a      	cmp	r2, r3
 800e02a:	d014      	beq.n	800e056 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	3301      	adds	r3, #1
 800e030:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e032:	6a3b      	ldr	r3, [r7, #32]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d104      	bne.n	800e042 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e03a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	61bb      	str	r3, [r7, #24]
 800e040:	e009      	b.n	800e056 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e044:	7fda      	ldrb	r2, [r3, #31]
 800e046:	6a3b      	ldr	r3, [r7, #32]
 800e048:	7fdb      	ldrb	r3, [r3, #31]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d803      	bhi.n	800e056 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e050:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d001      	beq.n	800e062 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e060:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d1cb      	bne.n	800e006 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e06e:	6a3b      	ldr	r3, [r7, #32]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d008      	beq.n	800e086 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e074:	69b9      	ldr	r1, [r7, #24]
 800e076:	6a38      	ldr	r0, [r7, #32]
 800e078:	f7ff ff0e 	bl	800de98 <ip_reass_free_complete_datagram>
 800e07c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e07e:	697a      	ldr	r2, [r7, #20]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	4413      	add	r3, r2
 800e084:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e086:	697a      	ldr	r2, [r7, #20]
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	da02      	bge.n	800e094 <ip_reass_remove_oldest_datagram+0xb4>
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	2b01      	cmp	r3, #1
 800e092:	dcac      	bgt.n	800dfee <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e094:	697b      	ldr	r3, [r7, #20]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3728      	adds	r7, #40	@ 0x28
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	200083dc 	.word	0x200083dc

0800e0a4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e0ae:	2004      	movs	r0, #4
 800e0b0:	f7f7 fa64 	bl	800557c <memp_malloc>
 800e0b4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d110      	bne.n	800e0de <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e0bc:	6839      	ldr	r1, [r7, #0]
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f7ff ff8e 	bl	800dfe0 <ip_reass_remove_oldest_datagram>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	dc03      	bgt.n	800e0d4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e0cc:	2004      	movs	r0, #4
 800e0ce:	f7f7 fa55 	bl	800557c <memp_malloc>
 800e0d2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d101      	bne.n	800e0de <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	e016      	b.n	800e10c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e0de:	2220      	movs	r2, #32
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f000 ff25 	bl	800ef32 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	220f      	movs	r2, #15
 800e0ec:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e0ee:	4b09      	ldr	r3, [pc, #36]	@ (800e114 <ip_reass_enqueue_new_datagram+0x70>)
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e0f6:	4a07      	ldr	r2, [pc, #28]	@ (800e114 <ip_reass_enqueue_new_datagram+0x70>)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	3308      	adds	r3, #8
 800e100:	2214      	movs	r2, #20
 800e102:	6879      	ldr	r1, [r7, #4]
 800e104:	4618      	mov	r0, r3
 800e106:	f000 ff8a 	bl	800f01e <memcpy>
  return ipr;
 800e10a:	68fb      	ldr	r3, [r7, #12]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3710      	adds	r7, #16
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	200083dc 	.word	0x200083dc

0800e118 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e122:	4b10      	ldr	r3, [pc, #64]	@ (800e164 <ip_reass_dequeue_datagram+0x4c>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d104      	bne.n	800e136 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a0c      	ldr	r2, [pc, #48]	@ (800e164 <ip_reass_dequeue_datagram+0x4c>)
 800e132:	6013      	str	r3, [r2, #0]
 800e134:	e00d      	b.n	800e152 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d106      	bne.n	800e14a <ip_reass_dequeue_datagram+0x32>
 800e13c:	4b0a      	ldr	r3, [pc, #40]	@ (800e168 <ip_reass_dequeue_datagram+0x50>)
 800e13e:	f240 1245 	movw	r2, #325	@ 0x145
 800e142:	490a      	ldr	r1, [pc, #40]	@ (800e16c <ip_reass_dequeue_datagram+0x54>)
 800e144:	480a      	ldr	r0, [pc, #40]	@ (800e170 <ip_reass_dequeue_datagram+0x58>)
 800e146:	f000 fe8f 	bl	800ee68 <iprintf>
    prev->next = ipr->next;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e152:	6879      	ldr	r1, [r7, #4]
 800e154:	2004      	movs	r0, #4
 800e156:	f7f7 fa81 	bl	800565c <memp_free>
}
 800e15a:	bf00      	nop
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	200083dc 	.word	0x200083dc
 800e168:	080123d0 	.word	0x080123d0
 800e16c:	08012498 	.word	0x08012498
 800e170:	08012418 	.word	0x08012418

0800e174 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b08c      	sub	sp, #48	@ 0x30
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e180:	2300      	movs	r3, #0
 800e182:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e184:	2301      	movs	r3, #1
 800e186:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	885b      	ldrh	r3, [r3, #2]
 800e192:	b29b      	uxth	r3, r3
 800e194:	4618      	mov	r0, r3
 800e196:	f7f6 fd79 	bl	8004c8c <lwip_htons>
 800e19a:	4603      	mov	r3, r0
 800e19c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	f003 030f 	and.w	r3, r3, #15
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e1ac:	7e7b      	ldrb	r3, [r7, #25]
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	8b7a      	ldrh	r2, [r7, #26]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d202      	bcs.n	800e1bc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ba:	e135      	b.n	800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e1bc:	7e7b      	ldrb	r3, [r7, #25]
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	8b7a      	ldrh	r2, [r7, #26]
 800e1c2:	1ad3      	subs	r3, r2, r3
 800e1c4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	88db      	ldrh	r3, [r3, #6]
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7f6 fd5d 	bl	8004c8c <lwip_htons>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	00db      	lsls	r3, r3, #3
 800e1dc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	701a      	strb	r2, [r3, #0]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	705a      	strb	r2, [r3, #1]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	709a      	strb	r2, [r3, #2]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f8:	8afa      	ldrh	r2, [r7, #22]
 800e1fa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e1fc:	8afa      	ldrh	r2, [r7, #22]
 800e1fe:	8b7b      	ldrh	r3, [r7, #26]
 800e200:	4413      	add	r3, r2
 800e202:	b29a      	uxth	r2, r3
 800e204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e206:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e20a:	88db      	ldrh	r3, [r3, #6]
 800e20c:	b29b      	uxth	r3, r3
 800e20e:	8afa      	ldrh	r2, [r7, #22]
 800e210:	429a      	cmp	r2, r3
 800e212:	d902      	bls.n	800e21a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e214:	f04f 33ff 	mov.w	r3, #4294967295
 800e218:	e106      	b.n	800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e220:	e068      	b.n	800e2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e22a:	889b      	ldrh	r3, [r3, #4]
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	889b      	ldrh	r3, [r3, #4]
 800e232:	b29b      	uxth	r3, r3
 800e234:	429a      	cmp	r2, r3
 800e236:	d235      	bcs.n	800e2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e23a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e23c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e240:	2b00      	cmp	r3, #0
 800e242:	d020      	beq.n	800e286 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e246:	889b      	ldrh	r3, [r3, #4]
 800e248:	b29a      	uxth	r2, r3
 800e24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24c:	88db      	ldrh	r3, [r3, #6]
 800e24e:	b29b      	uxth	r3, r3
 800e250:	429a      	cmp	r2, r3
 800e252:	d307      	bcc.n	800e264 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e256:	88db      	ldrh	r3, [r3, #6]
 800e258:	b29a      	uxth	r2, r3
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	889b      	ldrh	r3, [r3, #4]
 800e25e:	b29b      	uxth	r3, r3
 800e260:	429a      	cmp	r2, r3
 800e262:	d902      	bls.n	800e26a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e264:	f04f 33ff 	mov.w	r3, #4294967295
 800e268:	e0de      	b.n	800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e272:	88db      	ldrh	r3, [r3, #6]
 800e274:	b29a      	uxth	r2, r3
 800e276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e278:	889b      	ldrh	r3, [r3, #4]
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d03d      	beq.n	800e2fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e280:	2300      	movs	r3, #0
 800e282:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e284:	e03a      	b.n	800e2fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e288:	88db      	ldrh	r3, [r3, #6]
 800e28a:	b29a      	uxth	r2, r3
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	889b      	ldrh	r3, [r3, #4]
 800e290:	b29b      	uxth	r3, r3
 800e292:	429a      	cmp	r2, r3
 800e294:	d902      	bls.n	800e29c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e296:	f04f 33ff 	mov.w	r3, #4294967295
 800e29a:	e0c5      	b.n	800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	68ba      	ldr	r2, [r7, #8]
 800e2a0:	605a      	str	r2, [r3, #4]
      break;
 800e2a2:	e02b      	b.n	800e2fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a6:	889b      	ldrh	r3, [r3, #4]
 800e2a8:	b29a      	uxth	r2, r3
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	889b      	ldrh	r3, [r3, #4]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d102      	bne.n	800e2ba <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b8:	e0b6      	b.n	800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2bc:	889b      	ldrh	r3, [r3, #4]
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	88db      	ldrh	r3, [r3, #6]
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d202      	bcs.n	800e2d0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ce:	e0ab      	b.n	800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d009      	beq.n	800e2ea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d8:	88db      	ldrh	r3, [r3, #6]
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	889b      	ldrh	r3, [r3, #4]
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d001      	beq.n	800e2ea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d193      	bne.n	800e222 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e2fa:	e000      	b.n	800e2fe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e2fc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e300:	2b00      	cmp	r3, #0
 800e302:	d12d      	bne.n	800e360 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e306:	2b00      	cmp	r3, #0
 800e308:	d01c      	beq.n	800e344 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e30c:	88db      	ldrh	r3, [r3, #6]
 800e30e:	b29a      	uxth	r2, r3
 800e310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e312:	889b      	ldrh	r3, [r3, #4]
 800e314:	b29b      	uxth	r3, r3
 800e316:	429a      	cmp	r2, r3
 800e318:	d906      	bls.n	800e328 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e31a:	4b45      	ldr	r3, [pc, #276]	@ (800e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e31c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e320:	4944      	ldr	r1, [pc, #272]	@ (800e434 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e322:	4845      	ldr	r0, [pc, #276]	@ (800e438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e324:	f000 fda0 	bl	800ee68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32a:	68ba      	ldr	r2, [r7, #8]
 800e32c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e330:	88db      	ldrh	r3, [r3, #6]
 800e332:	b29a      	uxth	r2, r3
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	889b      	ldrh	r3, [r3, #4]
 800e338:	b29b      	uxth	r3, r3
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d010      	beq.n	800e360 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	623b      	str	r3, [r7, #32]
 800e342:	e00d      	b.n	800e360 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d006      	beq.n	800e35a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e34c:	4b38      	ldr	r3, [pc, #224]	@ (800e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e34e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e352:	493a      	ldr	r1, [pc, #232]	@ (800e43c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e354:	4838      	ldr	r0, [pc, #224]	@ (800e438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e356:	f000 fd87 	bl	800ee68 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	68ba      	ldr	r2, [r7, #8]
 800e35e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d105      	bne.n	800e372 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	7f9b      	ldrb	r3, [r3, #30]
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d059      	beq.n	800e426 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d04f      	beq.n	800e418 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d006      	beq.n	800e38e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	889b      	ldrh	r3, [r3, #4]
 800e388:	b29b      	uxth	r3, r3
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d002      	beq.n	800e394 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	623b      	str	r3, [r7, #32]
 800e392:	e041      	b.n	800e418 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e396:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e39e:	e012      	b.n	800e3c6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a8:	88db      	ldrh	r3, [r3, #6]
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ae:	889b      	ldrh	r3, [r3, #4]
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d002      	beq.n	800e3bc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	623b      	str	r3, [r7, #32]
            break;
 800e3ba:	e007      	b.n	800e3cc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3be:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d1e9      	bne.n	800e3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e3cc:	6a3b      	ldr	r3, [r7, #32]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d022      	beq.n	800e418 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d106      	bne.n	800e3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e3da:	4b15      	ldr	r3, [pc, #84]	@ (800e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e3dc:	f240 12df 	movw	r2, #479	@ 0x1df
 800e3e0:	4917      	ldr	r1, [pc, #92]	@ (800e440 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e3e2:	4815      	ldr	r0, [pc, #84]	@ (800e438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e3e4:	f000 fd40 	bl	800ee68 <iprintf>
          LWIP_ASSERT("sanity check",
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d106      	bne.n	800e402 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e3f4:	4b0e      	ldr	r3, [pc, #56]	@ (800e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e3f6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e3fa:	4911      	ldr	r1, [pc, #68]	@ (800e440 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e3fc:	480e      	ldr	r0, [pc, #56]	@ (800e438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e3fe:	f000 fd33 	bl	800ee68 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d006      	beq.n	800e418 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e40a:	4b09      	ldr	r3, [pc, #36]	@ (800e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e40c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e410:	490c      	ldr	r1, [pc, #48]	@ (800e444 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e412:	4809      	ldr	r0, [pc, #36]	@ (800e438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e414:	f000 fd28 	bl	800ee68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e418:	6a3b      	ldr	r3, [r7, #32]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	bf14      	ite	ne
 800e41e:	2301      	movne	r3, #1
 800e420:	2300      	moveq	r3, #0
 800e422:	b2db      	uxtb	r3, r3
 800e424:	e000      	b.n	800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e426:	2300      	movs	r3, #0
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3730      	adds	r7, #48	@ 0x30
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	080123d0 	.word	0x080123d0
 800e434:	080124b4 	.word	0x080124b4
 800e438:	08012418 	.word	0x08012418
 800e43c:	080124d4 	.word	0x080124d4
 800e440:	0801250c 	.word	0x0801250c
 800e444:	0801251c 	.word	0x0801251c

0800e448 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b08e      	sub	sp, #56	@ 0x38
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	f003 030f 	and.w	r3, r3, #15
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	b2db      	uxtb	r3, r3
 800e464:	2b14      	cmp	r3, #20
 800e466:	f040 8171 	bne.w	800e74c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e46c:	88db      	ldrh	r3, [r3, #6]
 800e46e:	b29b      	uxth	r3, r3
 800e470:	4618      	mov	r0, r3
 800e472:	f7f6 fc0b 	bl	8004c8c <lwip_htons>
 800e476:	4603      	mov	r3, r0
 800e478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	00db      	lsls	r3, r3, #3
 800e480:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e484:	885b      	ldrh	r3, [r3, #2]
 800e486:	b29b      	uxth	r3, r3
 800e488:	4618      	mov	r0, r3
 800e48a:	f7f6 fbff 	bl	8004c8c <lwip_htons>
 800e48e:	4603      	mov	r3, r0
 800e490:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	f003 030f 	and.w	r3, r3, #15
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e4a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	f0c0 8150 	bcc.w	800e750 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e4b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f7f7 ffcb 	bl	8006458 <pbuf_clen>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e4c6:	4b8c      	ldr	r3, [pc, #560]	@ (800e6f8 <ip4_reass+0x2b0>)
 800e4c8:	881b      	ldrh	r3, [r3, #0]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	8c3b      	ldrh	r3, [r7, #32]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	2b0a      	cmp	r3, #10
 800e4d2:	dd10      	ble.n	800e4f6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e4d4:	8c3b      	ldrh	r3, [r7, #32]
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4da:	f7ff fd81 	bl	800dfe0 <ip_reass_remove_oldest_datagram>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f000 8137 	beq.w	800e754 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e4e6:	4b84      	ldr	r3, [pc, #528]	@ (800e6f8 <ip4_reass+0x2b0>)
 800e4e8:	881b      	ldrh	r3, [r3, #0]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	8c3b      	ldrh	r3, [r7, #32]
 800e4ee:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e4f0:	2b0a      	cmp	r3, #10
 800e4f2:	f300 812f 	bgt.w	800e754 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e4f6:	4b81      	ldr	r3, [pc, #516]	@ (800e6fc <ip4_reass+0x2b4>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800e4fc:	e015      	b.n	800e52a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e500:	695a      	ldr	r2, [r3, #20]
 800e502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	429a      	cmp	r2, r3
 800e508:	d10c      	bne.n	800e524 <ip4_reass+0xdc>
 800e50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e50c:	699a      	ldr	r2, [r3, #24]
 800e50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e510:	691b      	ldr	r3, [r3, #16]
 800e512:	429a      	cmp	r2, r3
 800e514:	d106      	bne.n	800e524 <ip4_reass+0xdc>
 800e516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e518:	899a      	ldrh	r2, [r3, #12]
 800e51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e51c:	889b      	ldrh	r3, [r3, #4]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	429a      	cmp	r2, r3
 800e522:	d006      	beq.n	800e532 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	633b      	str	r3, [r7, #48]	@ 0x30
 800e52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1e6      	bne.n	800e4fe <ip4_reass+0xb6>
 800e530:	e000      	b.n	800e534 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e532:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e536:	2b00      	cmp	r3, #0
 800e538:	d109      	bne.n	800e54e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e53a:	8c3b      	ldrh	r3, [r7, #32]
 800e53c:	4619      	mov	r1, r3
 800e53e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e540:	f7ff fdb0 	bl	800e0a4 <ip_reass_enqueue_new_datagram>
 800e544:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d11c      	bne.n	800e586 <ip4_reass+0x13e>
      goto nullreturn;
 800e54c:	e105      	b.n	800e75a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e550:	88db      	ldrh	r3, [r3, #6]
 800e552:	b29b      	uxth	r3, r3
 800e554:	4618      	mov	r0, r3
 800e556:	f7f6 fb99 	bl	8004c8c <lwip_htons>
 800e55a:	4603      	mov	r3, r0
 800e55c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e560:	2b00      	cmp	r3, #0
 800e562:	d110      	bne.n	800e586 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e566:	89db      	ldrh	r3, [r3, #14]
 800e568:	4618      	mov	r0, r3
 800e56a:	f7f6 fb8f 	bl	8004c8c <lwip_htons>
 800e56e:	4603      	mov	r3, r0
 800e570:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e574:	2b00      	cmp	r3, #0
 800e576:	d006      	beq.n	800e586 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e57a:	3308      	adds	r3, #8
 800e57c:	2214      	movs	r2, #20
 800e57e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e580:	4618      	mov	r0, r3
 800e582:	f000 fd4c 	bl	800f01e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e588:	88db      	ldrh	r3, [r3, #6]
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	f003 0320 	and.w	r3, r3, #32
 800e590:	2b00      	cmp	r3, #0
 800e592:	bf0c      	ite	eq
 800e594:	2301      	moveq	r3, #1
 800e596:	2300      	movne	r3, #0
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00e      	beq.n	800e5c0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e5a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e5a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5a6:	4413      	add	r3, r2
 800e5a8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e5aa:	8b7a      	ldrh	r2, [r7, #26]
 800e5ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	f0c0 80a0 	bcc.w	800e6f4 <ip4_reass+0x2ac>
 800e5b4:	8b7b      	ldrh	r3, [r7, #26]
 800e5b6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	f200 809a 	bhi.w	800e6f4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e5c0:	69fa      	ldr	r2, [r7, #28]
 800e5c2:	6879      	ldr	r1, [r7, #4]
 800e5c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5c6:	f7ff fdd5 	bl	800e174 <ip_reass_chain_frag_into_datagram_and_validate>
 800e5ca:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d2:	f000 809b 	beq.w	800e70c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e5d6:	4b48      	ldr	r3, [pc, #288]	@ (800e6f8 <ip4_reass+0x2b0>)
 800e5d8:	881a      	ldrh	r2, [r3, #0]
 800e5da:	8c3b      	ldrh	r3, [r7, #32]
 800e5dc:	4413      	add	r3, r2
 800e5de:	b29a      	uxth	r2, r3
 800e5e0:	4b45      	ldr	r3, [pc, #276]	@ (800e6f8 <ip4_reass+0x2b0>)
 800e5e2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d00d      	beq.n	800e606 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e5ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e5ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5ee:	4413      	add	r3, r2
 800e5f0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f4:	8a7a      	ldrh	r2, [r7, #18]
 800e5f6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5fa:	7f9b      	ldrb	r3, [r3, #30]
 800e5fc:	f043 0301 	orr.w	r3, r3, #1
 800e600:	b2da      	uxtb	r2, r3
 800e602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e604:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d171      	bne.n	800e6f0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60e:	8b9b      	ldrh	r3, [r3, #28]
 800e610:	3314      	adds	r3, #20
 800e612:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e628:	3308      	adds	r3, #8
 800e62a:	2214      	movs	r2, #20
 800e62c:	4619      	mov	r1, r3
 800e62e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e630:	f000 fcf5 	bl	800f01e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e634:	8a3b      	ldrh	r3, [r7, #16]
 800e636:	4618      	mov	r0, r3
 800e638:	f7f6 fb28 	bl	8004c8c <lwip_htons>
 800e63c:	4603      	mov	r3, r0
 800e63e:	461a      	mov	r2, r3
 800e640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e642:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e646:	2200      	movs	r2, #0
 800e648:	719a      	strb	r2, [r3, #6]
 800e64a:	2200      	movs	r2, #0
 800e64c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e650:	2200      	movs	r2, #0
 800e652:	729a      	strb	r2, [r3, #10]
 800e654:	2200      	movs	r2, #0
 800e656:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e65e:	e00d      	b.n	800e67c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e666:	2114      	movs	r1, #20
 800e668:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e66a:	f7f7 fde7 	bl	800623c <pbuf_remove_header>
      pbuf_cat(p, r);
 800e66e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7f7 ff2b 	bl	80064cc <pbuf_cat>
      r = iprh->next_pbuf;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800e67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1ee      	bne.n	800e660 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e682:	4b1e      	ldr	r3, [pc, #120]	@ (800e6fc <ip4_reass+0x2b4>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e688:	429a      	cmp	r2, r3
 800e68a:	d102      	bne.n	800e692 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e68c:	2300      	movs	r3, #0
 800e68e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e690:	e010      	b.n	800e6b4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e692:	4b1a      	ldr	r3, [pc, #104]	@ (800e6fc <ip4_reass+0x2b4>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e698:	e007      	b.n	800e6aa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d006      	beq.n	800e6b2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d1f4      	bne.n	800e69a <ip4_reass+0x252>
 800e6b0:	e000      	b.n	800e6b4 <ip4_reass+0x26c>
          break;
 800e6b2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e6b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6b8:	f7ff fd2e 	bl	800e118 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7f7 fecb 	bl	8006458 <pbuf_clen>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e6f8 <ip4_reass+0x2b0>)
 800e6c8:	881b      	ldrh	r3, [r3, #0]
 800e6ca:	8c3a      	ldrh	r2, [r7, #32]
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d906      	bls.n	800e6de <ip4_reass+0x296>
 800e6d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e700 <ip4_reass+0x2b8>)
 800e6d2:	f240 229b 	movw	r2, #667	@ 0x29b
 800e6d6:	490b      	ldr	r1, [pc, #44]	@ (800e704 <ip4_reass+0x2bc>)
 800e6d8:	480b      	ldr	r0, [pc, #44]	@ (800e708 <ip4_reass+0x2c0>)
 800e6da:	f000 fbc5 	bl	800ee68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e6de:	4b06      	ldr	r3, [pc, #24]	@ (800e6f8 <ip4_reass+0x2b0>)
 800e6e0:	881a      	ldrh	r2, [r3, #0]
 800e6e2:	8c3b      	ldrh	r3, [r7, #32]
 800e6e4:	1ad3      	subs	r3, r2, r3
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	4b03      	ldr	r3, [pc, #12]	@ (800e6f8 <ip4_reass+0x2b0>)
 800e6ea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	e038      	b.n	800e762 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	e036      	b.n	800e762 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e6f4:	bf00      	nop
 800e6f6:	e00a      	b.n	800e70e <ip4_reass+0x2c6>
 800e6f8:	200083e0 	.word	0x200083e0
 800e6fc:	200083dc 	.word	0x200083dc
 800e700:	080123d0 	.word	0x080123d0
 800e704:	08012540 	.word	0x08012540
 800e708:	08012418 	.word	0x08012418
    goto nullreturn_ipr;
 800e70c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e710:	2b00      	cmp	r3, #0
 800e712:	d106      	bne.n	800e722 <ip4_reass+0x2da>
 800e714:	4b15      	ldr	r3, [pc, #84]	@ (800e76c <ip4_reass+0x324>)
 800e716:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800e71a:	4915      	ldr	r1, [pc, #84]	@ (800e770 <ip4_reass+0x328>)
 800e71c:	4815      	ldr	r0, [pc, #84]	@ (800e774 <ip4_reass+0x32c>)
 800e71e:	f000 fba3 	bl	800ee68 <iprintf>
  if (ipr->p == NULL) {
 800e722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d116      	bne.n	800e758 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e72a:	4b13      	ldr	r3, [pc, #76]	@ (800e778 <ip4_reass+0x330>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e730:	429a      	cmp	r2, r3
 800e732:	d006      	beq.n	800e742 <ip4_reass+0x2fa>
 800e734:	4b0d      	ldr	r3, [pc, #52]	@ (800e76c <ip4_reass+0x324>)
 800e736:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800e73a:	4910      	ldr	r1, [pc, #64]	@ (800e77c <ip4_reass+0x334>)
 800e73c:	480d      	ldr	r0, [pc, #52]	@ (800e774 <ip4_reass+0x32c>)
 800e73e:	f000 fb93 	bl	800ee68 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e742:	2100      	movs	r1, #0
 800e744:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e746:	f7ff fce7 	bl	800e118 <ip_reass_dequeue_datagram>
 800e74a:	e006      	b.n	800e75a <ip4_reass+0x312>
    goto nullreturn;
 800e74c:	bf00      	nop
 800e74e:	e004      	b.n	800e75a <ip4_reass+0x312>
    goto nullreturn;
 800e750:	bf00      	nop
 800e752:	e002      	b.n	800e75a <ip4_reass+0x312>
      goto nullreturn;
 800e754:	bf00      	nop
 800e756:	e000      	b.n	800e75a <ip4_reass+0x312>
  }

nullreturn:
 800e758:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7f7 fdf4 	bl	8006348 <pbuf_free>
  return NULL;
 800e760:	2300      	movs	r3, #0
}
 800e762:	4618      	mov	r0, r3
 800e764:	3738      	adds	r7, #56	@ 0x38
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	080123d0 	.word	0x080123d0
 800e770:	0801255c 	.word	0x0801255c
 800e774:	08012418 	.word	0x08012418
 800e778:	200083dc 	.word	0x200083dc
 800e77c:	08012568 	.word	0x08012568

0800e780 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e784:	2005      	movs	r0, #5
 800e786:	f7f6 fef9 	bl	800557c <memp_malloc>
 800e78a:	4603      	mov	r3, r0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d106      	bne.n	800e7ac <ip_frag_free_pbuf_custom_ref+0x1c>
 800e79e:	4b07      	ldr	r3, [pc, #28]	@ (800e7bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e7a0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800e7a4:	4906      	ldr	r1, [pc, #24]	@ (800e7c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e7a6:	4807      	ldr	r0, [pc, #28]	@ (800e7c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e7a8:	f000 fb5e 	bl	800ee68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e7ac:	6879      	ldr	r1, [r7, #4]
 800e7ae:	2005      	movs	r0, #5
 800e7b0:	f7f6 ff54 	bl	800565c <memp_free>
}
 800e7b4:	bf00      	nop
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	080123d0 	.word	0x080123d0
 800e7c0:	08012588 	.word	0x08012588
 800e7c4:	08012418 	.word	0x08012418

0800e7c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d106      	bne.n	800e7e8 <ipfrag_free_pbuf_custom+0x20>
 800e7da:	4b11      	ldr	r3, [pc, #68]	@ (800e820 <ipfrag_free_pbuf_custom+0x58>)
 800e7dc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800e7e0:	4910      	ldr	r1, [pc, #64]	@ (800e824 <ipfrag_free_pbuf_custom+0x5c>)
 800e7e2:	4811      	ldr	r0, [pc, #68]	@ (800e828 <ipfrag_free_pbuf_custom+0x60>)
 800e7e4:	f000 fb40 	bl	800ee68 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d006      	beq.n	800e7fe <ipfrag_free_pbuf_custom+0x36>
 800e7f0:	4b0b      	ldr	r3, [pc, #44]	@ (800e820 <ipfrag_free_pbuf_custom+0x58>)
 800e7f2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800e7f6:	490d      	ldr	r1, [pc, #52]	@ (800e82c <ipfrag_free_pbuf_custom+0x64>)
 800e7f8:	480b      	ldr	r0, [pc, #44]	@ (800e828 <ipfrag_free_pbuf_custom+0x60>)
 800e7fa:	f000 fb35 	bl	800ee68 <iprintf>
  if (pcr->original != NULL) {
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d004      	beq.n	800e810 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	695b      	ldr	r3, [r3, #20]
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7f7 fd9c 	bl	8006348 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e810:	68f8      	ldr	r0, [r7, #12]
 800e812:	f7ff ffbd 	bl	800e790 <ip_frag_free_pbuf_custom_ref>
}
 800e816:	bf00      	nop
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	080123d0 	.word	0x080123d0
 800e824:	08012594 	.word	0x08012594
 800e828:	08012418 	.word	0x08012418
 800e82c:	080125a0 	.word	0x080125a0

0800e830 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b094      	sub	sp, #80	@ 0x50
 800e834:	af02      	add	r7, sp, #8
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e83c:	2300      	movs	r3, #0
 800e83e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e846:	3b14      	subs	r3, #20
 800e848:	2b00      	cmp	r3, #0
 800e84a:	da00      	bge.n	800e84e <ip4_frag+0x1e>
 800e84c:	3307      	adds	r3, #7
 800e84e:	10db      	asrs	r3, r3, #3
 800e850:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e852:	2314      	movs	r3, #20
 800e854:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800e85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e85e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	f003 030f 	and.w	r3, r3, #15
 800e868:	b2db      	uxtb	r3, r3
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	2b14      	cmp	r3, #20
 800e870:	d002      	beq.n	800e878 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e872:	f06f 0305 	mvn.w	r3, #5
 800e876:	e110      	b.n	800ea9a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	895b      	ldrh	r3, [r3, #10]
 800e87c:	2b13      	cmp	r3, #19
 800e87e:	d809      	bhi.n	800e894 <ip4_frag+0x64>
 800e880:	4b88      	ldr	r3, [pc, #544]	@ (800eaa4 <ip4_frag+0x274>)
 800e882:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800e886:	4988      	ldr	r1, [pc, #544]	@ (800eaa8 <ip4_frag+0x278>)
 800e888:	4888      	ldr	r0, [pc, #544]	@ (800eaac <ip4_frag+0x27c>)
 800e88a:	f000 faed 	bl	800ee68 <iprintf>
 800e88e:	f06f 0305 	mvn.w	r3, #5
 800e892:	e102      	b.n	800ea9a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e896:	88db      	ldrh	r3, [r3, #6]
 800e898:	b29b      	uxth	r3, r3
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7f6 f9f6 	bl	8004c8c <lwip_htons>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800e8a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e8a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e8ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e8b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	891b      	ldrh	r3, [r3, #8]
 800e8ba:	3b14      	subs	r3, #20
 800e8bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800e8c0:	e0e1      	b.n	800ea86 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e8c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e8c4:	00db      	lsls	r3, r3, #3
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	bf28      	it	cs
 800e8d0:	4613      	movcs	r3, r2
 800e8d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e8d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e8d8:	2114      	movs	r1, #20
 800e8da:	200e      	movs	r0, #14
 800e8dc:	f7f7 fa50 	bl	8005d80 <pbuf_alloc>
 800e8e0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f000 80d5 	beq.w	800ea94 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ec:	895b      	ldrh	r3, [r3, #10]
 800e8ee:	2b13      	cmp	r3, #19
 800e8f0:	d806      	bhi.n	800e900 <ip4_frag+0xd0>
 800e8f2:	4b6c      	ldr	r3, [pc, #432]	@ (800eaa4 <ip4_frag+0x274>)
 800e8f4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800e8f8:	496d      	ldr	r1, [pc, #436]	@ (800eab0 <ip4_frag+0x280>)
 800e8fa:	486c      	ldr	r0, [pc, #432]	@ (800eaac <ip4_frag+0x27c>)
 800e8fc:	f000 fab4 	bl	800ee68 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	2214      	movs	r2, #20
 800e906:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e908:	4618      	mov	r0, r3
 800e90a:	f000 fb88 	bl	800f01e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800e914:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e916:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800e91a:	e064      	b.n	800e9e6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	895a      	ldrh	r2, [r3, #10]
 800e920:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e922:	1ad3      	subs	r3, r2, r3
 800e924:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	895b      	ldrh	r3, [r3, #10]
 800e92a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d906      	bls.n	800e93e <ip4_frag+0x10e>
 800e930:	4b5c      	ldr	r3, [pc, #368]	@ (800eaa4 <ip4_frag+0x274>)
 800e932:	f240 322d 	movw	r2, #813	@ 0x32d
 800e936:	495f      	ldr	r1, [pc, #380]	@ (800eab4 <ip4_frag+0x284>)
 800e938:	485c      	ldr	r0, [pc, #368]	@ (800eaac <ip4_frag+0x27c>)
 800e93a:	f000 fa95 	bl	800ee68 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e93e:	8bfa      	ldrh	r2, [r7, #30]
 800e940:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e944:	4293      	cmp	r3, r2
 800e946:	bf28      	it	cs
 800e948:	4613      	movcs	r3, r2
 800e94a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e94e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e952:	2b00      	cmp	r3, #0
 800e954:	d105      	bne.n	800e962 <ip4_frag+0x132>
        poff = 0;
 800e956:	2300      	movs	r3, #0
 800e958:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	60fb      	str	r3, [r7, #12]
        continue;
 800e960:	e041      	b.n	800e9e6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e962:	f7ff ff0d 	bl	800e780 <ip_frag_alloc_pbuf_custom_ref>
 800e966:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d103      	bne.n	800e976 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e96e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e970:	f7f7 fcea 	bl	8006348 <pbuf_free>
        goto memerr;
 800e974:	e08f      	b.n	800ea96 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e976:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e97c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e97e:	4413      	add	r3, r2
 800e980:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800e984:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e988:	9201      	str	r2, [sp, #4]
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	4603      	mov	r3, r0
 800e98e:	2241      	movs	r2, #65	@ 0x41
 800e990:	2000      	movs	r0, #0
 800e992:	f7f7 fb1f 	bl	8005fd4 <pbuf_alloced_custom>
 800e996:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d106      	bne.n	800e9ac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e99e:	69b8      	ldr	r0, [r7, #24]
 800e9a0:	f7ff fef6 	bl	800e790 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e9a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e9a6:	f7f7 fccf 	bl	8006348 <pbuf_free>
        goto memerr;
 800e9aa:	e074      	b.n	800ea96 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7f7 fd6b 	bl	8006488 <pbuf_ref>
      pcr->original = p;
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	68fa      	ldr	r2, [r7, #12]
 800e9b6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	4a3f      	ldr	r2, [pc, #252]	@ (800eab8 <ip4_frag+0x288>)
 800e9bc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e9be:	6979      	ldr	r1, [r7, #20]
 800e9c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e9c2:	f7f7 fd83 	bl	80064cc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e9c6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800e9ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e9ce:	1ad3      	subs	r3, r2, r3
 800e9d0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800e9d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d004      	beq.n	800e9e6 <ip4_frag+0x1b6>
        poff = 0;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e9e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d196      	bne.n	800e91c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e9ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e9f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e9f4:	4413      	add	r3, r2
 800e9f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e9fc:	f1a3 0213 	sub.w	r2, r3, #19
 800ea00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ea04:	429a      	cmp	r2, r3
 800ea06:	bfcc      	ite	gt
 800ea08:	2301      	movgt	r3, #1
 800ea0a:	2300      	movle	r3, #0
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ea10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ea14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea18:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800ea1a:	6a3b      	ldr	r3, [r7, #32]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d002      	beq.n	800ea26 <ip4_frag+0x1f6>
 800ea20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d003      	beq.n	800ea2e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ea26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ea28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ea2c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ea2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7f6 f92b 	bl	8004c8c <lwip_htons>
 800ea36:	4603      	mov	r3, r0
 800ea38:	461a      	mov	r2, r3
 800ea3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea3c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ea3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ea40:	3314      	adds	r3, #20
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7f6 f921 	bl	8004c8c <lwip_htons>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea50:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ea52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea54:	2200      	movs	r2, #0
 800ea56:	729a      	strb	r2, [r3, #10]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ea64:	68b8      	ldr	r0, [r7, #8]
 800ea66:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ea68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea6a:	f7f7 fc6d 	bl	8006348 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ea6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ea72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ea74:	1ad3      	subs	r3, r2, r3
 800ea76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800ea7a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ea7e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ea80:	4413      	add	r3, r2
 800ea82:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800ea86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f47f af19 	bne.w	800e8c2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ea90:	2300      	movs	r3, #0
 800ea92:	e002      	b.n	800ea9a <ip4_frag+0x26a>
      goto memerr;
 800ea94:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ea96:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3748      	adds	r7, #72	@ 0x48
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	080123d0 	.word	0x080123d0
 800eaa8:	080125ac 	.word	0x080125ac
 800eaac:	08012418 	.word	0x08012418
 800eab0:	080125c8 	.word	0x080125c8
 800eab4:	080125e8 	.word	0x080125e8
 800eab8:	0800e7c9 	.word	0x0800e7c9

0800eabc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800eac6:	230e      	movs	r3, #14
 800eac8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	895b      	ldrh	r3, [r3, #10]
 800eace:	2b0e      	cmp	r3, #14
 800ead0:	d96e      	bls.n	800ebb0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	7bdb      	ldrb	r3, [r3, #15]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d106      	bne.n	800eae8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eae0:	3301      	adds	r3, #1
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	7b1a      	ldrb	r2, [r3, #12]
 800eaf2:	7b5b      	ldrb	r3, [r3, #13]
 800eaf4:	021b      	lsls	r3, r3, #8
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	f003 0301 	and.w	r3, r3, #1
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d023      	beq.n	800eb4e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d10f      	bne.n	800eb2e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	785b      	ldrb	r3, [r3, #1]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d11b      	bne.n	800eb4e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800eb1a:	2b5e      	cmp	r3, #94	@ 0x5e
 800eb1c:	d117      	bne.n	800eb4e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	7b5b      	ldrb	r3, [r3, #13]
 800eb22:	f043 0310 	orr.w	r3, r3, #16
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	735a      	strb	r2, [r3, #13]
 800eb2c:	e00f      	b.n	800eb4e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	2206      	movs	r2, #6
 800eb32:	4928      	ldr	r1, [pc, #160]	@ (800ebd4 <ethernet_input+0x118>)
 800eb34:	4618      	mov	r0, r3
 800eb36:	f000 f9ec 	bl	800ef12 <memcmp>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d106      	bne.n	800eb4e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	7b5b      	ldrb	r3, [r3, #13]
 800eb44:	f043 0308 	orr.w	r3, r3, #8
 800eb48:	b2da      	uxtb	r2, r3
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800eb4e:	89fb      	ldrh	r3, [r7, #14]
 800eb50:	2b08      	cmp	r3, #8
 800eb52:	d003      	beq.n	800eb5c <ethernet_input+0xa0>
 800eb54:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800eb58:	d014      	beq.n	800eb84 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800eb5a:	e032      	b.n	800ebc2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eb62:	f003 0308 	and.w	r3, r3, #8
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d024      	beq.n	800ebb4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eb6a:	8afb      	ldrh	r3, [r7, #22]
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f7f7 fb64 	bl	800623c <pbuf_remove_header>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d11e      	bne.n	800ebb8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800eb7a:	6839      	ldr	r1, [r7, #0]
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7fe ff21 	bl	800d9c4 <ip4_input>
      break;
 800eb82:	e013      	b.n	800ebac <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eb8a:	f003 0308 	and.w	r3, r3, #8
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d014      	beq.n	800ebbc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eb92:	8afb      	ldrh	r3, [r7, #22]
 800eb94:	4619      	mov	r1, r3
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7f7 fb50 	bl	800623c <pbuf_remove_header>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d10e      	bne.n	800ebc0 <ethernet_input+0x104>
        etharp_input(p, netif);
 800eba2:	6839      	ldr	r1, [r7, #0]
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7fe f8c1 	bl	800cd2c <etharp_input>
      break;
 800ebaa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ebac:	2300      	movs	r3, #0
 800ebae:	e00c      	b.n	800ebca <ethernet_input+0x10e>
    goto free_and_return;
 800ebb0:	bf00      	nop
 800ebb2:	e006      	b.n	800ebc2 <ethernet_input+0x106>
        goto free_and_return;
 800ebb4:	bf00      	nop
 800ebb6:	e004      	b.n	800ebc2 <ethernet_input+0x106>
        goto free_and_return;
 800ebb8:	bf00      	nop
 800ebba:	e002      	b.n	800ebc2 <ethernet_input+0x106>
        goto free_and_return;
 800ebbc:	bf00      	nop
 800ebbe:	e000      	b.n	800ebc2 <ethernet_input+0x106>
        goto free_and_return;
 800ebc0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7f7 fbc0 	bl	8006348 <pbuf_free>
  return ERR_OK;
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3718      	adds	r7, #24
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	08012784 	.word	0x08012784

0800ebd8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b086      	sub	sp, #24
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
 800ebe4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ebe6:	8c3b      	ldrh	r3, [r7, #32]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7f6 f84f 	bl	8004c8c <lwip_htons>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ebf2:	210e      	movs	r1, #14
 800ebf4:	68b8      	ldr	r0, [r7, #8]
 800ebf6:	f7f7 fb11 	bl	800621c <pbuf_add_header>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d125      	bne.n	800ec4c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	8afa      	ldrh	r2, [r7, #22]
 800ec0a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	2206      	movs	r2, #6
 800ec10:	6839      	ldr	r1, [r7, #0]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f000 fa03 	bl	800f01e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	3306      	adds	r3, #6
 800ec1c:	2206      	movs	r2, #6
 800ec1e:	6879      	ldr	r1, [r7, #4]
 800ec20:	4618      	mov	r0, r3
 800ec22:	f000 f9fc 	bl	800f01e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ec2c:	2b06      	cmp	r3, #6
 800ec2e:	d006      	beq.n	800ec3e <ethernet_output+0x66>
 800ec30:	4b0a      	ldr	r3, [pc, #40]	@ (800ec5c <ethernet_output+0x84>)
 800ec32:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800ec36:	490a      	ldr	r1, [pc, #40]	@ (800ec60 <ethernet_output+0x88>)
 800ec38:	480a      	ldr	r0, [pc, #40]	@ (800ec64 <ethernet_output+0x8c>)
 800ec3a:	f000 f915 	bl	800ee68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	699b      	ldr	r3, [r3, #24]
 800ec42:	68b9      	ldr	r1, [r7, #8]
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	4798      	blx	r3
 800ec48:	4603      	mov	r3, r0
 800ec4a:	e002      	b.n	800ec52 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ec4c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ec4e:	f06f 0301 	mvn.w	r3, #1
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3718      	adds	r7, #24
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	080125f8 	.word	0x080125f8
 800ec60:	08012630 	.word	0x08012630
 800ec64:	08012664 	.word	0x08012664

0800ec68 <rand>:
 800ec68:	4b16      	ldr	r3, [pc, #88]	@ (800ecc4 <rand+0x5c>)
 800ec6a:	b510      	push	{r4, lr}
 800ec6c:	681c      	ldr	r4, [r3, #0]
 800ec6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ec70:	b9b3      	cbnz	r3, 800eca0 <rand+0x38>
 800ec72:	2018      	movs	r0, #24
 800ec74:	f000 fa4a 	bl	800f10c <malloc>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	6320      	str	r0, [r4, #48]	@ 0x30
 800ec7c:	b920      	cbnz	r0, 800ec88 <rand+0x20>
 800ec7e:	4b12      	ldr	r3, [pc, #72]	@ (800ecc8 <rand+0x60>)
 800ec80:	4812      	ldr	r0, [pc, #72]	@ (800eccc <rand+0x64>)
 800ec82:	2152      	movs	r1, #82	@ 0x52
 800ec84:	f000 f9da 	bl	800f03c <__assert_func>
 800ec88:	4911      	ldr	r1, [pc, #68]	@ (800ecd0 <rand+0x68>)
 800ec8a:	4b12      	ldr	r3, [pc, #72]	@ (800ecd4 <rand+0x6c>)
 800ec8c:	e9c0 1300 	strd	r1, r3, [r0]
 800ec90:	4b11      	ldr	r3, [pc, #68]	@ (800ecd8 <rand+0x70>)
 800ec92:	6083      	str	r3, [r0, #8]
 800ec94:	230b      	movs	r3, #11
 800ec96:	8183      	strh	r3, [r0, #12]
 800ec98:	2100      	movs	r1, #0
 800ec9a:	2001      	movs	r0, #1
 800ec9c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800eca0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800eca2:	480e      	ldr	r0, [pc, #56]	@ (800ecdc <rand+0x74>)
 800eca4:	690b      	ldr	r3, [r1, #16]
 800eca6:	694c      	ldr	r4, [r1, #20]
 800eca8:	4a0d      	ldr	r2, [pc, #52]	@ (800ece0 <rand+0x78>)
 800ecaa:	4358      	muls	r0, r3
 800ecac:	fb02 0004 	mla	r0, r2, r4, r0
 800ecb0:	fba3 3202 	umull	r3, r2, r3, r2
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	eb40 0002 	adc.w	r0, r0, r2
 800ecba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ecbe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ecc2:	bd10      	pop	{r4, pc}
 800ecc4:	20000038 	.word	0x20000038
 800ecc8:	08012792 	.word	0x08012792
 800eccc:	080127a9 	.word	0x080127a9
 800ecd0:	abcd330e 	.word	0xabcd330e
 800ecd4:	e66d1234 	.word	0xe66d1234
 800ecd8:	0005deec 	.word	0x0005deec
 800ecdc:	5851f42d 	.word	0x5851f42d
 800ece0:	4c957f2d 	.word	0x4c957f2d

0800ece4 <std>:
 800ece4:	2300      	movs	r3, #0
 800ece6:	b510      	push	{r4, lr}
 800ece8:	4604      	mov	r4, r0
 800ecea:	e9c0 3300 	strd	r3, r3, [r0]
 800ecee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecf2:	6083      	str	r3, [r0, #8]
 800ecf4:	8181      	strh	r1, [r0, #12]
 800ecf6:	6643      	str	r3, [r0, #100]	@ 0x64
 800ecf8:	81c2      	strh	r2, [r0, #14]
 800ecfa:	6183      	str	r3, [r0, #24]
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	2208      	movs	r2, #8
 800ed00:	305c      	adds	r0, #92	@ 0x5c
 800ed02:	f000 f916 	bl	800ef32 <memset>
 800ed06:	4b0d      	ldr	r3, [pc, #52]	@ (800ed3c <std+0x58>)
 800ed08:	6263      	str	r3, [r4, #36]	@ 0x24
 800ed0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed40 <std+0x5c>)
 800ed0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ed0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed44 <std+0x60>)
 800ed10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ed12:	4b0d      	ldr	r3, [pc, #52]	@ (800ed48 <std+0x64>)
 800ed14:	6323      	str	r3, [r4, #48]	@ 0x30
 800ed16:	4b0d      	ldr	r3, [pc, #52]	@ (800ed4c <std+0x68>)
 800ed18:	6224      	str	r4, [r4, #32]
 800ed1a:	429c      	cmp	r4, r3
 800ed1c:	d006      	beq.n	800ed2c <std+0x48>
 800ed1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ed22:	4294      	cmp	r4, r2
 800ed24:	d002      	beq.n	800ed2c <std+0x48>
 800ed26:	33d0      	adds	r3, #208	@ 0xd0
 800ed28:	429c      	cmp	r4, r3
 800ed2a:	d105      	bne.n	800ed38 <std+0x54>
 800ed2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed34:	f000 b970 	b.w	800f018 <__retarget_lock_init_recursive>
 800ed38:	bd10      	pop	{r4, pc}
 800ed3a:	bf00      	nop
 800ed3c:	0800ee8d 	.word	0x0800ee8d
 800ed40:	0800eeaf 	.word	0x0800eeaf
 800ed44:	0800eee7 	.word	0x0800eee7
 800ed48:	0800ef0b 	.word	0x0800ef0b
 800ed4c:	200083e4 	.word	0x200083e4

0800ed50 <stdio_exit_handler>:
 800ed50:	4a02      	ldr	r2, [pc, #8]	@ (800ed5c <stdio_exit_handler+0xc>)
 800ed52:	4903      	ldr	r1, [pc, #12]	@ (800ed60 <stdio_exit_handler+0x10>)
 800ed54:	4803      	ldr	r0, [pc, #12]	@ (800ed64 <stdio_exit_handler+0x14>)
 800ed56:	f000 b869 	b.w	800ee2c <_fwalk_sglue>
 800ed5a:	bf00      	nop
 800ed5c:	2000002c 	.word	0x2000002c
 800ed60:	0800f91d 	.word	0x0800f91d
 800ed64:	2000003c 	.word	0x2000003c

0800ed68 <cleanup_stdio>:
 800ed68:	6841      	ldr	r1, [r0, #4]
 800ed6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ed9c <cleanup_stdio+0x34>)
 800ed6c:	4299      	cmp	r1, r3
 800ed6e:	b510      	push	{r4, lr}
 800ed70:	4604      	mov	r4, r0
 800ed72:	d001      	beq.n	800ed78 <cleanup_stdio+0x10>
 800ed74:	f000 fdd2 	bl	800f91c <_fflush_r>
 800ed78:	68a1      	ldr	r1, [r4, #8]
 800ed7a:	4b09      	ldr	r3, [pc, #36]	@ (800eda0 <cleanup_stdio+0x38>)
 800ed7c:	4299      	cmp	r1, r3
 800ed7e:	d002      	beq.n	800ed86 <cleanup_stdio+0x1e>
 800ed80:	4620      	mov	r0, r4
 800ed82:	f000 fdcb 	bl	800f91c <_fflush_r>
 800ed86:	68e1      	ldr	r1, [r4, #12]
 800ed88:	4b06      	ldr	r3, [pc, #24]	@ (800eda4 <cleanup_stdio+0x3c>)
 800ed8a:	4299      	cmp	r1, r3
 800ed8c:	d004      	beq.n	800ed98 <cleanup_stdio+0x30>
 800ed8e:	4620      	mov	r0, r4
 800ed90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed94:	f000 bdc2 	b.w	800f91c <_fflush_r>
 800ed98:	bd10      	pop	{r4, pc}
 800ed9a:	bf00      	nop
 800ed9c:	200083e4 	.word	0x200083e4
 800eda0:	2000844c 	.word	0x2000844c
 800eda4:	200084b4 	.word	0x200084b4

0800eda8 <global_stdio_init.part.0>:
 800eda8:	b510      	push	{r4, lr}
 800edaa:	4b0b      	ldr	r3, [pc, #44]	@ (800edd8 <global_stdio_init.part.0+0x30>)
 800edac:	4c0b      	ldr	r4, [pc, #44]	@ (800eddc <global_stdio_init.part.0+0x34>)
 800edae:	4a0c      	ldr	r2, [pc, #48]	@ (800ede0 <global_stdio_init.part.0+0x38>)
 800edb0:	601a      	str	r2, [r3, #0]
 800edb2:	4620      	mov	r0, r4
 800edb4:	2200      	movs	r2, #0
 800edb6:	2104      	movs	r1, #4
 800edb8:	f7ff ff94 	bl	800ece4 <std>
 800edbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800edc0:	2201      	movs	r2, #1
 800edc2:	2109      	movs	r1, #9
 800edc4:	f7ff ff8e 	bl	800ece4 <std>
 800edc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800edcc:	2202      	movs	r2, #2
 800edce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd2:	2112      	movs	r1, #18
 800edd4:	f7ff bf86 	b.w	800ece4 <std>
 800edd8:	2000851c 	.word	0x2000851c
 800eddc:	200083e4 	.word	0x200083e4
 800ede0:	0800ed51 	.word	0x0800ed51

0800ede4 <__sfp_lock_acquire>:
 800ede4:	4801      	ldr	r0, [pc, #4]	@ (800edec <__sfp_lock_acquire+0x8>)
 800ede6:	f000 b918 	b.w	800f01a <__retarget_lock_acquire_recursive>
 800edea:	bf00      	nop
 800edec:	20008525 	.word	0x20008525

0800edf0 <__sfp_lock_release>:
 800edf0:	4801      	ldr	r0, [pc, #4]	@ (800edf8 <__sfp_lock_release+0x8>)
 800edf2:	f000 b913 	b.w	800f01c <__retarget_lock_release_recursive>
 800edf6:	bf00      	nop
 800edf8:	20008525 	.word	0x20008525

0800edfc <__sinit>:
 800edfc:	b510      	push	{r4, lr}
 800edfe:	4604      	mov	r4, r0
 800ee00:	f7ff fff0 	bl	800ede4 <__sfp_lock_acquire>
 800ee04:	6a23      	ldr	r3, [r4, #32]
 800ee06:	b11b      	cbz	r3, 800ee10 <__sinit+0x14>
 800ee08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee0c:	f7ff bff0 	b.w	800edf0 <__sfp_lock_release>
 800ee10:	4b04      	ldr	r3, [pc, #16]	@ (800ee24 <__sinit+0x28>)
 800ee12:	6223      	str	r3, [r4, #32]
 800ee14:	4b04      	ldr	r3, [pc, #16]	@ (800ee28 <__sinit+0x2c>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d1f5      	bne.n	800ee08 <__sinit+0xc>
 800ee1c:	f7ff ffc4 	bl	800eda8 <global_stdio_init.part.0>
 800ee20:	e7f2      	b.n	800ee08 <__sinit+0xc>
 800ee22:	bf00      	nop
 800ee24:	0800ed69 	.word	0x0800ed69
 800ee28:	2000851c 	.word	0x2000851c

0800ee2c <_fwalk_sglue>:
 800ee2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee30:	4607      	mov	r7, r0
 800ee32:	4688      	mov	r8, r1
 800ee34:	4614      	mov	r4, r2
 800ee36:	2600      	movs	r6, #0
 800ee38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee3c:	f1b9 0901 	subs.w	r9, r9, #1
 800ee40:	d505      	bpl.n	800ee4e <_fwalk_sglue+0x22>
 800ee42:	6824      	ldr	r4, [r4, #0]
 800ee44:	2c00      	cmp	r4, #0
 800ee46:	d1f7      	bne.n	800ee38 <_fwalk_sglue+0xc>
 800ee48:	4630      	mov	r0, r6
 800ee4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee4e:	89ab      	ldrh	r3, [r5, #12]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d907      	bls.n	800ee64 <_fwalk_sglue+0x38>
 800ee54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	d003      	beq.n	800ee64 <_fwalk_sglue+0x38>
 800ee5c:	4629      	mov	r1, r5
 800ee5e:	4638      	mov	r0, r7
 800ee60:	47c0      	blx	r8
 800ee62:	4306      	orrs	r6, r0
 800ee64:	3568      	adds	r5, #104	@ 0x68
 800ee66:	e7e9      	b.n	800ee3c <_fwalk_sglue+0x10>

0800ee68 <iprintf>:
 800ee68:	b40f      	push	{r0, r1, r2, r3}
 800ee6a:	b507      	push	{r0, r1, r2, lr}
 800ee6c:	4906      	ldr	r1, [pc, #24]	@ (800ee88 <iprintf+0x20>)
 800ee6e:	ab04      	add	r3, sp, #16
 800ee70:	6808      	ldr	r0, [r1, #0]
 800ee72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee76:	6881      	ldr	r1, [r0, #8]
 800ee78:	9301      	str	r3, [sp, #4]
 800ee7a:	f000 fa27 	bl	800f2cc <_vfiprintf_r>
 800ee7e:	b003      	add	sp, #12
 800ee80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee84:	b004      	add	sp, #16
 800ee86:	4770      	bx	lr
 800ee88:	20000038 	.word	0x20000038

0800ee8c <__sread>:
 800ee8c:	b510      	push	{r4, lr}
 800ee8e:	460c      	mov	r4, r1
 800ee90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee94:	f000 f878 	bl	800ef88 <_read_r>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	bfab      	itete	ge
 800ee9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ee9e:	89a3      	ldrhlt	r3, [r4, #12]
 800eea0:	181b      	addge	r3, r3, r0
 800eea2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eea6:	bfac      	ite	ge
 800eea8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eeaa:	81a3      	strhlt	r3, [r4, #12]
 800eeac:	bd10      	pop	{r4, pc}

0800eeae <__swrite>:
 800eeae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb2:	461f      	mov	r7, r3
 800eeb4:	898b      	ldrh	r3, [r1, #12]
 800eeb6:	05db      	lsls	r3, r3, #23
 800eeb8:	4605      	mov	r5, r0
 800eeba:	460c      	mov	r4, r1
 800eebc:	4616      	mov	r6, r2
 800eebe:	d505      	bpl.n	800eecc <__swrite+0x1e>
 800eec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec4:	2302      	movs	r3, #2
 800eec6:	2200      	movs	r2, #0
 800eec8:	f000 f84c 	bl	800ef64 <_lseek_r>
 800eecc:	89a3      	ldrh	r3, [r4, #12]
 800eece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eed6:	81a3      	strh	r3, [r4, #12]
 800eed8:	4632      	mov	r2, r6
 800eeda:	463b      	mov	r3, r7
 800eedc:	4628      	mov	r0, r5
 800eede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eee2:	f000 b863 	b.w	800efac <_write_r>

0800eee6 <__sseek>:
 800eee6:	b510      	push	{r4, lr}
 800eee8:	460c      	mov	r4, r1
 800eeea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeee:	f000 f839 	bl	800ef64 <_lseek_r>
 800eef2:	1c43      	adds	r3, r0, #1
 800eef4:	89a3      	ldrh	r3, [r4, #12]
 800eef6:	bf15      	itete	ne
 800eef8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eefa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eefe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ef02:	81a3      	strheq	r3, [r4, #12]
 800ef04:	bf18      	it	ne
 800ef06:	81a3      	strhne	r3, [r4, #12]
 800ef08:	bd10      	pop	{r4, pc}

0800ef0a <__sclose>:
 800ef0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef0e:	f000 b819 	b.w	800ef44 <_close_r>

0800ef12 <memcmp>:
 800ef12:	b510      	push	{r4, lr}
 800ef14:	3901      	subs	r1, #1
 800ef16:	4402      	add	r2, r0
 800ef18:	4290      	cmp	r0, r2
 800ef1a:	d101      	bne.n	800ef20 <memcmp+0xe>
 800ef1c:	2000      	movs	r0, #0
 800ef1e:	e005      	b.n	800ef2c <memcmp+0x1a>
 800ef20:	7803      	ldrb	r3, [r0, #0]
 800ef22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ef26:	42a3      	cmp	r3, r4
 800ef28:	d001      	beq.n	800ef2e <memcmp+0x1c>
 800ef2a:	1b18      	subs	r0, r3, r4
 800ef2c:	bd10      	pop	{r4, pc}
 800ef2e:	3001      	adds	r0, #1
 800ef30:	e7f2      	b.n	800ef18 <memcmp+0x6>

0800ef32 <memset>:
 800ef32:	4402      	add	r2, r0
 800ef34:	4603      	mov	r3, r0
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d100      	bne.n	800ef3c <memset+0xa>
 800ef3a:	4770      	bx	lr
 800ef3c:	f803 1b01 	strb.w	r1, [r3], #1
 800ef40:	e7f9      	b.n	800ef36 <memset+0x4>
	...

0800ef44 <_close_r>:
 800ef44:	b538      	push	{r3, r4, r5, lr}
 800ef46:	4d06      	ldr	r5, [pc, #24]	@ (800ef60 <_close_r+0x1c>)
 800ef48:	2300      	movs	r3, #0
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	4608      	mov	r0, r1
 800ef4e:	602b      	str	r3, [r5, #0]
 800ef50:	f7f1 fdea 	bl	8000b28 <_close>
 800ef54:	1c43      	adds	r3, r0, #1
 800ef56:	d102      	bne.n	800ef5e <_close_r+0x1a>
 800ef58:	682b      	ldr	r3, [r5, #0]
 800ef5a:	b103      	cbz	r3, 800ef5e <_close_r+0x1a>
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	bd38      	pop	{r3, r4, r5, pc}
 800ef60:	20008520 	.word	0x20008520

0800ef64 <_lseek_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4d07      	ldr	r5, [pc, #28]	@ (800ef84 <_lseek_r+0x20>)
 800ef68:	4604      	mov	r4, r0
 800ef6a:	4608      	mov	r0, r1
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	2200      	movs	r2, #0
 800ef70:	602a      	str	r2, [r5, #0]
 800ef72:	461a      	mov	r2, r3
 800ef74:	f7f1 fdff 	bl	8000b76 <_lseek>
 800ef78:	1c43      	adds	r3, r0, #1
 800ef7a:	d102      	bne.n	800ef82 <_lseek_r+0x1e>
 800ef7c:	682b      	ldr	r3, [r5, #0]
 800ef7e:	b103      	cbz	r3, 800ef82 <_lseek_r+0x1e>
 800ef80:	6023      	str	r3, [r4, #0]
 800ef82:	bd38      	pop	{r3, r4, r5, pc}
 800ef84:	20008520 	.word	0x20008520

0800ef88 <_read_r>:
 800ef88:	b538      	push	{r3, r4, r5, lr}
 800ef8a:	4d07      	ldr	r5, [pc, #28]	@ (800efa8 <_read_r+0x20>)
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	4608      	mov	r0, r1
 800ef90:	4611      	mov	r1, r2
 800ef92:	2200      	movs	r2, #0
 800ef94:	602a      	str	r2, [r5, #0]
 800ef96:	461a      	mov	r2, r3
 800ef98:	f7f1 fd8d 	bl	8000ab6 <_read>
 800ef9c:	1c43      	adds	r3, r0, #1
 800ef9e:	d102      	bne.n	800efa6 <_read_r+0x1e>
 800efa0:	682b      	ldr	r3, [r5, #0]
 800efa2:	b103      	cbz	r3, 800efa6 <_read_r+0x1e>
 800efa4:	6023      	str	r3, [r4, #0]
 800efa6:	bd38      	pop	{r3, r4, r5, pc}
 800efa8:	20008520 	.word	0x20008520

0800efac <_write_r>:
 800efac:	b538      	push	{r3, r4, r5, lr}
 800efae:	4d07      	ldr	r5, [pc, #28]	@ (800efcc <_write_r+0x20>)
 800efb0:	4604      	mov	r4, r0
 800efb2:	4608      	mov	r0, r1
 800efb4:	4611      	mov	r1, r2
 800efb6:	2200      	movs	r2, #0
 800efb8:	602a      	str	r2, [r5, #0]
 800efba:	461a      	mov	r2, r3
 800efbc:	f7f1 fd98 	bl	8000af0 <_write>
 800efc0:	1c43      	adds	r3, r0, #1
 800efc2:	d102      	bne.n	800efca <_write_r+0x1e>
 800efc4:	682b      	ldr	r3, [r5, #0]
 800efc6:	b103      	cbz	r3, 800efca <_write_r+0x1e>
 800efc8:	6023      	str	r3, [r4, #0]
 800efca:	bd38      	pop	{r3, r4, r5, pc}
 800efcc:	20008520 	.word	0x20008520

0800efd0 <__libc_init_array>:
 800efd0:	b570      	push	{r4, r5, r6, lr}
 800efd2:	4d0d      	ldr	r5, [pc, #52]	@ (800f008 <__libc_init_array+0x38>)
 800efd4:	4c0d      	ldr	r4, [pc, #52]	@ (800f00c <__libc_init_array+0x3c>)
 800efd6:	1b64      	subs	r4, r4, r5
 800efd8:	10a4      	asrs	r4, r4, #2
 800efda:	2600      	movs	r6, #0
 800efdc:	42a6      	cmp	r6, r4
 800efde:	d109      	bne.n	800eff4 <__libc_init_array+0x24>
 800efe0:	4d0b      	ldr	r5, [pc, #44]	@ (800f010 <__libc_init_array+0x40>)
 800efe2:	4c0c      	ldr	r4, [pc, #48]	@ (800f014 <__libc_init_array+0x44>)
 800efe4:	f000 fe48 	bl	800fc78 <_init>
 800efe8:	1b64      	subs	r4, r4, r5
 800efea:	10a4      	asrs	r4, r4, #2
 800efec:	2600      	movs	r6, #0
 800efee:	42a6      	cmp	r6, r4
 800eff0:	d105      	bne.n	800effe <__libc_init_array+0x2e>
 800eff2:	bd70      	pop	{r4, r5, r6, pc}
 800eff4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eff8:	4798      	blx	r3
 800effa:	3601      	adds	r6, #1
 800effc:	e7ee      	b.n	800efdc <__libc_init_array+0xc>
 800effe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f002:	4798      	blx	r3
 800f004:	3601      	adds	r6, #1
 800f006:	e7f2      	b.n	800efee <__libc_init_array+0x1e>
 800f008:	08012878 	.word	0x08012878
 800f00c:	08012878 	.word	0x08012878
 800f010:	08012878 	.word	0x08012878
 800f014:	0801287c 	.word	0x0801287c

0800f018 <__retarget_lock_init_recursive>:
 800f018:	4770      	bx	lr

0800f01a <__retarget_lock_acquire_recursive>:
 800f01a:	4770      	bx	lr

0800f01c <__retarget_lock_release_recursive>:
 800f01c:	4770      	bx	lr

0800f01e <memcpy>:
 800f01e:	440a      	add	r2, r1
 800f020:	4291      	cmp	r1, r2
 800f022:	f100 33ff 	add.w	r3, r0, #4294967295
 800f026:	d100      	bne.n	800f02a <memcpy+0xc>
 800f028:	4770      	bx	lr
 800f02a:	b510      	push	{r4, lr}
 800f02c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f030:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f034:	4291      	cmp	r1, r2
 800f036:	d1f9      	bne.n	800f02c <memcpy+0xe>
 800f038:	bd10      	pop	{r4, pc}
	...

0800f03c <__assert_func>:
 800f03c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f03e:	4614      	mov	r4, r2
 800f040:	461a      	mov	r2, r3
 800f042:	4b09      	ldr	r3, [pc, #36]	@ (800f068 <__assert_func+0x2c>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4605      	mov	r5, r0
 800f048:	68d8      	ldr	r0, [r3, #12]
 800f04a:	b14c      	cbz	r4, 800f060 <__assert_func+0x24>
 800f04c:	4b07      	ldr	r3, [pc, #28]	@ (800f06c <__assert_func+0x30>)
 800f04e:	9100      	str	r1, [sp, #0]
 800f050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f054:	4906      	ldr	r1, [pc, #24]	@ (800f070 <__assert_func+0x34>)
 800f056:	462b      	mov	r3, r5
 800f058:	f000 fc88 	bl	800f96c <fiprintf>
 800f05c:	f000 fd3c 	bl	800fad8 <abort>
 800f060:	4b04      	ldr	r3, [pc, #16]	@ (800f074 <__assert_func+0x38>)
 800f062:	461c      	mov	r4, r3
 800f064:	e7f3      	b.n	800f04e <__assert_func+0x12>
 800f066:	bf00      	nop
 800f068:	20000038 	.word	0x20000038
 800f06c:	08012801 	.word	0x08012801
 800f070:	0801280e 	.word	0x0801280e
 800f074:	0801283c 	.word	0x0801283c

0800f078 <_free_r>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	4605      	mov	r5, r0
 800f07c:	2900      	cmp	r1, #0
 800f07e:	d041      	beq.n	800f104 <_free_r+0x8c>
 800f080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f084:	1f0c      	subs	r4, r1, #4
 800f086:	2b00      	cmp	r3, #0
 800f088:	bfb8      	it	lt
 800f08a:	18e4      	addlt	r4, r4, r3
 800f08c:	f000 f8e8 	bl	800f260 <__malloc_lock>
 800f090:	4a1d      	ldr	r2, [pc, #116]	@ (800f108 <_free_r+0x90>)
 800f092:	6813      	ldr	r3, [r2, #0]
 800f094:	b933      	cbnz	r3, 800f0a4 <_free_r+0x2c>
 800f096:	6063      	str	r3, [r4, #4]
 800f098:	6014      	str	r4, [r2, #0]
 800f09a:	4628      	mov	r0, r5
 800f09c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0a0:	f000 b8e4 	b.w	800f26c <__malloc_unlock>
 800f0a4:	42a3      	cmp	r3, r4
 800f0a6:	d908      	bls.n	800f0ba <_free_r+0x42>
 800f0a8:	6820      	ldr	r0, [r4, #0]
 800f0aa:	1821      	adds	r1, r4, r0
 800f0ac:	428b      	cmp	r3, r1
 800f0ae:	bf01      	itttt	eq
 800f0b0:	6819      	ldreq	r1, [r3, #0]
 800f0b2:	685b      	ldreq	r3, [r3, #4]
 800f0b4:	1809      	addeq	r1, r1, r0
 800f0b6:	6021      	streq	r1, [r4, #0]
 800f0b8:	e7ed      	b.n	800f096 <_free_r+0x1e>
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	b10b      	cbz	r3, 800f0c4 <_free_r+0x4c>
 800f0c0:	42a3      	cmp	r3, r4
 800f0c2:	d9fa      	bls.n	800f0ba <_free_r+0x42>
 800f0c4:	6811      	ldr	r1, [r2, #0]
 800f0c6:	1850      	adds	r0, r2, r1
 800f0c8:	42a0      	cmp	r0, r4
 800f0ca:	d10b      	bne.n	800f0e4 <_free_r+0x6c>
 800f0cc:	6820      	ldr	r0, [r4, #0]
 800f0ce:	4401      	add	r1, r0
 800f0d0:	1850      	adds	r0, r2, r1
 800f0d2:	4283      	cmp	r3, r0
 800f0d4:	6011      	str	r1, [r2, #0]
 800f0d6:	d1e0      	bne.n	800f09a <_free_r+0x22>
 800f0d8:	6818      	ldr	r0, [r3, #0]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	6053      	str	r3, [r2, #4]
 800f0de:	4408      	add	r0, r1
 800f0e0:	6010      	str	r0, [r2, #0]
 800f0e2:	e7da      	b.n	800f09a <_free_r+0x22>
 800f0e4:	d902      	bls.n	800f0ec <_free_r+0x74>
 800f0e6:	230c      	movs	r3, #12
 800f0e8:	602b      	str	r3, [r5, #0]
 800f0ea:	e7d6      	b.n	800f09a <_free_r+0x22>
 800f0ec:	6820      	ldr	r0, [r4, #0]
 800f0ee:	1821      	adds	r1, r4, r0
 800f0f0:	428b      	cmp	r3, r1
 800f0f2:	bf04      	itt	eq
 800f0f4:	6819      	ldreq	r1, [r3, #0]
 800f0f6:	685b      	ldreq	r3, [r3, #4]
 800f0f8:	6063      	str	r3, [r4, #4]
 800f0fa:	bf04      	itt	eq
 800f0fc:	1809      	addeq	r1, r1, r0
 800f0fe:	6021      	streq	r1, [r4, #0]
 800f100:	6054      	str	r4, [r2, #4]
 800f102:	e7ca      	b.n	800f09a <_free_r+0x22>
 800f104:	bd38      	pop	{r3, r4, r5, pc}
 800f106:	bf00      	nop
 800f108:	2000852c 	.word	0x2000852c

0800f10c <malloc>:
 800f10c:	4b02      	ldr	r3, [pc, #8]	@ (800f118 <malloc+0xc>)
 800f10e:	4601      	mov	r1, r0
 800f110:	6818      	ldr	r0, [r3, #0]
 800f112:	f000 b825 	b.w	800f160 <_malloc_r>
 800f116:	bf00      	nop
 800f118:	20000038 	.word	0x20000038

0800f11c <sbrk_aligned>:
 800f11c:	b570      	push	{r4, r5, r6, lr}
 800f11e:	4e0f      	ldr	r6, [pc, #60]	@ (800f15c <sbrk_aligned+0x40>)
 800f120:	460c      	mov	r4, r1
 800f122:	6831      	ldr	r1, [r6, #0]
 800f124:	4605      	mov	r5, r0
 800f126:	b911      	cbnz	r1, 800f12e <sbrk_aligned+0x12>
 800f128:	f000 fcc6 	bl	800fab8 <_sbrk_r>
 800f12c:	6030      	str	r0, [r6, #0]
 800f12e:	4621      	mov	r1, r4
 800f130:	4628      	mov	r0, r5
 800f132:	f000 fcc1 	bl	800fab8 <_sbrk_r>
 800f136:	1c43      	adds	r3, r0, #1
 800f138:	d103      	bne.n	800f142 <sbrk_aligned+0x26>
 800f13a:	f04f 34ff 	mov.w	r4, #4294967295
 800f13e:	4620      	mov	r0, r4
 800f140:	bd70      	pop	{r4, r5, r6, pc}
 800f142:	1cc4      	adds	r4, r0, #3
 800f144:	f024 0403 	bic.w	r4, r4, #3
 800f148:	42a0      	cmp	r0, r4
 800f14a:	d0f8      	beq.n	800f13e <sbrk_aligned+0x22>
 800f14c:	1a21      	subs	r1, r4, r0
 800f14e:	4628      	mov	r0, r5
 800f150:	f000 fcb2 	bl	800fab8 <_sbrk_r>
 800f154:	3001      	adds	r0, #1
 800f156:	d1f2      	bne.n	800f13e <sbrk_aligned+0x22>
 800f158:	e7ef      	b.n	800f13a <sbrk_aligned+0x1e>
 800f15a:	bf00      	nop
 800f15c:	20008528 	.word	0x20008528

0800f160 <_malloc_r>:
 800f160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f164:	1ccd      	adds	r5, r1, #3
 800f166:	f025 0503 	bic.w	r5, r5, #3
 800f16a:	3508      	adds	r5, #8
 800f16c:	2d0c      	cmp	r5, #12
 800f16e:	bf38      	it	cc
 800f170:	250c      	movcc	r5, #12
 800f172:	2d00      	cmp	r5, #0
 800f174:	4606      	mov	r6, r0
 800f176:	db01      	blt.n	800f17c <_malloc_r+0x1c>
 800f178:	42a9      	cmp	r1, r5
 800f17a:	d904      	bls.n	800f186 <_malloc_r+0x26>
 800f17c:	230c      	movs	r3, #12
 800f17e:	6033      	str	r3, [r6, #0]
 800f180:	2000      	movs	r0, #0
 800f182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f25c <_malloc_r+0xfc>
 800f18a:	f000 f869 	bl	800f260 <__malloc_lock>
 800f18e:	f8d8 3000 	ldr.w	r3, [r8]
 800f192:	461c      	mov	r4, r3
 800f194:	bb44      	cbnz	r4, 800f1e8 <_malloc_r+0x88>
 800f196:	4629      	mov	r1, r5
 800f198:	4630      	mov	r0, r6
 800f19a:	f7ff ffbf 	bl	800f11c <sbrk_aligned>
 800f19e:	1c43      	adds	r3, r0, #1
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	d158      	bne.n	800f256 <_malloc_r+0xf6>
 800f1a4:	f8d8 4000 	ldr.w	r4, [r8]
 800f1a8:	4627      	mov	r7, r4
 800f1aa:	2f00      	cmp	r7, #0
 800f1ac:	d143      	bne.n	800f236 <_malloc_r+0xd6>
 800f1ae:	2c00      	cmp	r4, #0
 800f1b0:	d04b      	beq.n	800f24a <_malloc_r+0xea>
 800f1b2:	6823      	ldr	r3, [r4, #0]
 800f1b4:	4639      	mov	r1, r7
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	eb04 0903 	add.w	r9, r4, r3
 800f1bc:	f000 fc7c 	bl	800fab8 <_sbrk_r>
 800f1c0:	4581      	cmp	r9, r0
 800f1c2:	d142      	bne.n	800f24a <_malloc_r+0xea>
 800f1c4:	6821      	ldr	r1, [r4, #0]
 800f1c6:	1a6d      	subs	r5, r5, r1
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	4630      	mov	r0, r6
 800f1cc:	f7ff ffa6 	bl	800f11c <sbrk_aligned>
 800f1d0:	3001      	adds	r0, #1
 800f1d2:	d03a      	beq.n	800f24a <_malloc_r+0xea>
 800f1d4:	6823      	ldr	r3, [r4, #0]
 800f1d6:	442b      	add	r3, r5
 800f1d8:	6023      	str	r3, [r4, #0]
 800f1da:	f8d8 3000 	ldr.w	r3, [r8]
 800f1de:	685a      	ldr	r2, [r3, #4]
 800f1e0:	bb62      	cbnz	r2, 800f23c <_malloc_r+0xdc>
 800f1e2:	f8c8 7000 	str.w	r7, [r8]
 800f1e6:	e00f      	b.n	800f208 <_malloc_r+0xa8>
 800f1e8:	6822      	ldr	r2, [r4, #0]
 800f1ea:	1b52      	subs	r2, r2, r5
 800f1ec:	d420      	bmi.n	800f230 <_malloc_r+0xd0>
 800f1ee:	2a0b      	cmp	r2, #11
 800f1f0:	d917      	bls.n	800f222 <_malloc_r+0xc2>
 800f1f2:	1961      	adds	r1, r4, r5
 800f1f4:	42a3      	cmp	r3, r4
 800f1f6:	6025      	str	r5, [r4, #0]
 800f1f8:	bf18      	it	ne
 800f1fa:	6059      	strne	r1, [r3, #4]
 800f1fc:	6863      	ldr	r3, [r4, #4]
 800f1fe:	bf08      	it	eq
 800f200:	f8c8 1000 	streq.w	r1, [r8]
 800f204:	5162      	str	r2, [r4, r5]
 800f206:	604b      	str	r3, [r1, #4]
 800f208:	4630      	mov	r0, r6
 800f20a:	f000 f82f 	bl	800f26c <__malloc_unlock>
 800f20e:	f104 000b 	add.w	r0, r4, #11
 800f212:	1d23      	adds	r3, r4, #4
 800f214:	f020 0007 	bic.w	r0, r0, #7
 800f218:	1ac2      	subs	r2, r0, r3
 800f21a:	bf1c      	itt	ne
 800f21c:	1a1b      	subne	r3, r3, r0
 800f21e:	50a3      	strne	r3, [r4, r2]
 800f220:	e7af      	b.n	800f182 <_malloc_r+0x22>
 800f222:	6862      	ldr	r2, [r4, #4]
 800f224:	42a3      	cmp	r3, r4
 800f226:	bf0c      	ite	eq
 800f228:	f8c8 2000 	streq.w	r2, [r8]
 800f22c:	605a      	strne	r2, [r3, #4]
 800f22e:	e7eb      	b.n	800f208 <_malloc_r+0xa8>
 800f230:	4623      	mov	r3, r4
 800f232:	6864      	ldr	r4, [r4, #4]
 800f234:	e7ae      	b.n	800f194 <_malloc_r+0x34>
 800f236:	463c      	mov	r4, r7
 800f238:	687f      	ldr	r7, [r7, #4]
 800f23a:	e7b6      	b.n	800f1aa <_malloc_r+0x4a>
 800f23c:	461a      	mov	r2, r3
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	42a3      	cmp	r3, r4
 800f242:	d1fb      	bne.n	800f23c <_malloc_r+0xdc>
 800f244:	2300      	movs	r3, #0
 800f246:	6053      	str	r3, [r2, #4]
 800f248:	e7de      	b.n	800f208 <_malloc_r+0xa8>
 800f24a:	230c      	movs	r3, #12
 800f24c:	6033      	str	r3, [r6, #0]
 800f24e:	4630      	mov	r0, r6
 800f250:	f000 f80c 	bl	800f26c <__malloc_unlock>
 800f254:	e794      	b.n	800f180 <_malloc_r+0x20>
 800f256:	6005      	str	r5, [r0, #0]
 800f258:	e7d6      	b.n	800f208 <_malloc_r+0xa8>
 800f25a:	bf00      	nop
 800f25c:	2000852c 	.word	0x2000852c

0800f260 <__malloc_lock>:
 800f260:	4801      	ldr	r0, [pc, #4]	@ (800f268 <__malloc_lock+0x8>)
 800f262:	f7ff beda 	b.w	800f01a <__retarget_lock_acquire_recursive>
 800f266:	bf00      	nop
 800f268:	20008524 	.word	0x20008524

0800f26c <__malloc_unlock>:
 800f26c:	4801      	ldr	r0, [pc, #4]	@ (800f274 <__malloc_unlock+0x8>)
 800f26e:	f7ff bed5 	b.w	800f01c <__retarget_lock_release_recursive>
 800f272:	bf00      	nop
 800f274:	20008524 	.word	0x20008524

0800f278 <__sfputc_r>:
 800f278:	6893      	ldr	r3, [r2, #8]
 800f27a:	3b01      	subs	r3, #1
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	b410      	push	{r4}
 800f280:	6093      	str	r3, [r2, #8]
 800f282:	da08      	bge.n	800f296 <__sfputc_r+0x1e>
 800f284:	6994      	ldr	r4, [r2, #24]
 800f286:	42a3      	cmp	r3, r4
 800f288:	db01      	blt.n	800f28e <__sfputc_r+0x16>
 800f28a:	290a      	cmp	r1, #10
 800f28c:	d103      	bne.n	800f296 <__sfputc_r+0x1e>
 800f28e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f292:	f000 bb7d 	b.w	800f990 <__swbuf_r>
 800f296:	6813      	ldr	r3, [r2, #0]
 800f298:	1c58      	adds	r0, r3, #1
 800f29a:	6010      	str	r0, [r2, #0]
 800f29c:	7019      	strb	r1, [r3, #0]
 800f29e:	4608      	mov	r0, r1
 800f2a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2a4:	4770      	bx	lr

0800f2a6 <__sfputs_r>:
 800f2a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a8:	4606      	mov	r6, r0
 800f2aa:	460f      	mov	r7, r1
 800f2ac:	4614      	mov	r4, r2
 800f2ae:	18d5      	adds	r5, r2, r3
 800f2b0:	42ac      	cmp	r4, r5
 800f2b2:	d101      	bne.n	800f2b8 <__sfputs_r+0x12>
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	e007      	b.n	800f2c8 <__sfputs_r+0x22>
 800f2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2bc:	463a      	mov	r2, r7
 800f2be:	4630      	mov	r0, r6
 800f2c0:	f7ff ffda 	bl	800f278 <__sfputc_r>
 800f2c4:	1c43      	adds	r3, r0, #1
 800f2c6:	d1f3      	bne.n	800f2b0 <__sfputs_r+0xa>
 800f2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f2cc <_vfiprintf_r>:
 800f2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d0:	460d      	mov	r5, r1
 800f2d2:	b09d      	sub	sp, #116	@ 0x74
 800f2d4:	4614      	mov	r4, r2
 800f2d6:	4698      	mov	r8, r3
 800f2d8:	4606      	mov	r6, r0
 800f2da:	b118      	cbz	r0, 800f2e4 <_vfiprintf_r+0x18>
 800f2dc:	6a03      	ldr	r3, [r0, #32]
 800f2de:	b90b      	cbnz	r3, 800f2e4 <_vfiprintf_r+0x18>
 800f2e0:	f7ff fd8c 	bl	800edfc <__sinit>
 800f2e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2e6:	07d9      	lsls	r1, r3, #31
 800f2e8:	d405      	bmi.n	800f2f6 <_vfiprintf_r+0x2a>
 800f2ea:	89ab      	ldrh	r3, [r5, #12]
 800f2ec:	059a      	lsls	r2, r3, #22
 800f2ee:	d402      	bmi.n	800f2f6 <_vfiprintf_r+0x2a>
 800f2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2f2:	f7ff fe92 	bl	800f01a <__retarget_lock_acquire_recursive>
 800f2f6:	89ab      	ldrh	r3, [r5, #12]
 800f2f8:	071b      	lsls	r3, r3, #28
 800f2fa:	d501      	bpl.n	800f300 <_vfiprintf_r+0x34>
 800f2fc:	692b      	ldr	r3, [r5, #16]
 800f2fe:	b99b      	cbnz	r3, 800f328 <_vfiprintf_r+0x5c>
 800f300:	4629      	mov	r1, r5
 800f302:	4630      	mov	r0, r6
 800f304:	f000 fb82 	bl	800fa0c <__swsetup_r>
 800f308:	b170      	cbz	r0, 800f328 <_vfiprintf_r+0x5c>
 800f30a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f30c:	07dc      	lsls	r4, r3, #31
 800f30e:	d504      	bpl.n	800f31a <_vfiprintf_r+0x4e>
 800f310:	f04f 30ff 	mov.w	r0, #4294967295
 800f314:	b01d      	add	sp, #116	@ 0x74
 800f316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31a:	89ab      	ldrh	r3, [r5, #12]
 800f31c:	0598      	lsls	r0, r3, #22
 800f31e:	d4f7      	bmi.n	800f310 <_vfiprintf_r+0x44>
 800f320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f322:	f7ff fe7b 	bl	800f01c <__retarget_lock_release_recursive>
 800f326:	e7f3      	b.n	800f310 <_vfiprintf_r+0x44>
 800f328:	2300      	movs	r3, #0
 800f32a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f32c:	2320      	movs	r3, #32
 800f32e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f332:	f8cd 800c 	str.w	r8, [sp, #12]
 800f336:	2330      	movs	r3, #48	@ 0x30
 800f338:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f4e8 <_vfiprintf_r+0x21c>
 800f33c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f340:	f04f 0901 	mov.w	r9, #1
 800f344:	4623      	mov	r3, r4
 800f346:	469a      	mov	sl, r3
 800f348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f34c:	b10a      	cbz	r2, 800f352 <_vfiprintf_r+0x86>
 800f34e:	2a25      	cmp	r2, #37	@ 0x25
 800f350:	d1f9      	bne.n	800f346 <_vfiprintf_r+0x7a>
 800f352:	ebba 0b04 	subs.w	fp, sl, r4
 800f356:	d00b      	beq.n	800f370 <_vfiprintf_r+0xa4>
 800f358:	465b      	mov	r3, fp
 800f35a:	4622      	mov	r2, r4
 800f35c:	4629      	mov	r1, r5
 800f35e:	4630      	mov	r0, r6
 800f360:	f7ff ffa1 	bl	800f2a6 <__sfputs_r>
 800f364:	3001      	adds	r0, #1
 800f366:	f000 80a7 	beq.w	800f4b8 <_vfiprintf_r+0x1ec>
 800f36a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f36c:	445a      	add	r2, fp
 800f36e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f370:	f89a 3000 	ldrb.w	r3, [sl]
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 809f 	beq.w	800f4b8 <_vfiprintf_r+0x1ec>
 800f37a:	2300      	movs	r3, #0
 800f37c:	f04f 32ff 	mov.w	r2, #4294967295
 800f380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f384:	f10a 0a01 	add.w	sl, sl, #1
 800f388:	9304      	str	r3, [sp, #16]
 800f38a:	9307      	str	r3, [sp, #28]
 800f38c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f390:	931a      	str	r3, [sp, #104]	@ 0x68
 800f392:	4654      	mov	r4, sl
 800f394:	2205      	movs	r2, #5
 800f396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f39a:	4853      	ldr	r0, [pc, #332]	@ (800f4e8 <_vfiprintf_r+0x21c>)
 800f39c:	f7f0 ff20 	bl	80001e0 <memchr>
 800f3a0:	9a04      	ldr	r2, [sp, #16]
 800f3a2:	b9d8      	cbnz	r0, 800f3dc <_vfiprintf_r+0x110>
 800f3a4:	06d1      	lsls	r1, r2, #27
 800f3a6:	bf44      	itt	mi
 800f3a8:	2320      	movmi	r3, #32
 800f3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3ae:	0713      	lsls	r3, r2, #28
 800f3b0:	bf44      	itt	mi
 800f3b2:	232b      	movmi	r3, #43	@ 0x2b
 800f3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f3bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3be:	d015      	beq.n	800f3ec <_vfiprintf_r+0x120>
 800f3c0:	9a07      	ldr	r2, [sp, #28]
 800f3c2:	4654      	mov	r4, sl
 800f3c4:	2000      	movs	r0, #0
 800f3c6:	f04f 0c0a 	mov.w	ip, #10
 800f3ca:	4621      	mov	r1, r4
 800f3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3d0:	3b30      	subs	r3, #48	@ 0x30
 800f3d2:	2b09      	cmp	r3, #9
 800f3d4:	d94b      	bls.n	800f46e <_vfiprintf_r+0x1a2>
 800f3d6:	b1b0      	cbz	r0, 800f406 <_vfiprintf_r+0x13a>
 800f3d8:	9207      	str	r2, [sp, #28]
 800f3da:	e014      	b.n	800f406 <_vfiprintf_r+0x13a>
 800f3dc:	eba0 0308 	sub.w	r3, r0, r8
 800f3e0:	fa09 f303 	lsl.w	r3, r9, r3
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	9304      	str	r3, [sp, #16]
 800f3e8:	46a2      	mov	sl, r4
 800f3ea:	e7d2      	b.n	800f392 <_vfiprintf_r+0xc6>
 800f3ec:	9b03      	ldr	r3, [sp, #12]
 800f3ee:	1d19      	adds	r1, r3, #4
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	9103      	str	r1, [sp, #12]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	bfbb      	ittet	lt
 800f3f8:	425b      	neglt	r3, r3
 800f3fa:	f042 0202 	orrlt.w	r2, r2, #2
 800f3fe:	9307      	strge	r3, [sp, #28]
 800f400:	9307      	strlt	r3, [sp, #28]
 800f402:	bfb8      	it	lt
 800f404:	9204      	strlt	r2, [sp, #16]
 800f406:	7823      	ldrb	r3, [r4, #0]
 800f408:	2b2e      	cmp	r3, #46	@ 0x2e
 800f40a:	d10a      	bne.n	800f422 <_vfiprintf_r+0x156>
 800f40c:	7863      	ldrb	r3, [r4, #1]
 800f40e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f410:	d132      	bne.n	800f478 <_vfiprintf_r+0x1ac>
 800f412:	9b03      	ldr	r3, [sp, #12]
 800f414:	1d1a      	adds	r2, r3, #4
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	9203      	str	r2, [sp, #12]
 800f41a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f41e:	3402      	adds	r4, #2
 800f420:	9305      	str	r3, [sp, #20]
 800f422:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f4f8 <_vfiprintf_r+0x22c>
 800f426:	7821      	ldrb	r1, [r4, #0]
 800f428:	2203      	movs	r2, #3
 800f42a:	4650      	mov	r0, sl
 800f42c:	f7f0 fed8 	bl	80001e0 <memchr>
 800f430:	b138      	cbz	r0, 800f442 <_vfiprintf_r+0x176>
 800f432:	9b04      	ldr	r3, [sp, #16]
 800f434:	eba0 000a 	sub.w	r0, r0, sl
 800f438:	2240      	movs	r2, #64	@ 0x40
 800f43a:	4082      	lsls	r2, r0
 800f43c:	4313      	orrs	r3, r2
 800f43e:	3401      	adds	r4, #1
 800f440:	9304      	str	r3, [sp, #16]
 800f442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f446:	4829      	ldr	r0, [pc, #164]	@ (800f4ec <_vfiprintf_r+0x220>)
 800f448:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f44c:	2206      	movs	r2, #6
 800f44e:	f7f0 fec7 	bl	80001e0 <memchr>
 800f452:	2800      	cmp	r0, #0
 800f454:	d03f      	beq.n	800f4d6 <_vfiprintf_r+0x20a>
 800f456:	4b26      	ldr	r3, [pc, #152]	@ (800f4f0 <_vfiprintf_r+0x224>)
 800f458:	bb1b      	cbnz	r3, 800f4a2 <_vfiprintf_r+0x1d6>
 800f45a:	9b03      	ldr	r3, [sp, #12]
 800f45c:	3307      	adds	r3, #7
 800f45e:	f023 0307 	bic.w	r3, r3, #7
 800f462:	3308      	adds	r3, #8
 800f464:	9303      	str	r3, [sp, #12]
 800f466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f468:	443b      	add	r3, r7
 800f46a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f46c:	e76a      	b.n	800f344 <_vfiprintf_r+0x78>
 800f46e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f472:	460c      	mov	r4, r1
 800f474:	2001      	movs	r0, #1
 800f476:	e7a8      	b.n	800f3ca <_vfiprintf_r+0xfe>
 800f478:	2300      	movs	r3, #0
 800f47a:	3401      	adds	r4, #1
 800f47c:	9305      	str	r3, [sp, #20]
 800f47e:	4619      	mov	r1, r3
 800f480:	f04f 0c0a 	mov.w	ip, #10
 800f484:	4620      	mov	r0, r4
 800f486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f48a:	3a30      	subs	r2, #48	@ 0x30
 800f48c:	2a09      	cmp	r2, #9
 800f48e:	d903      	bls.n	800f498 <_vfiprintf_r+0x1cc>
 800f490:	2b00      	cmp	r3, #0
 800f492:	d0c6      	beq.n	800f422 <_vfiprintf_r+0x156>
 800f494:	9105      	str	r1, [sp, #20]
 800f496:	e7c4      	b.n	800f422 <_vfiprintf_r+0x156>
 800f498:	fb0c 2101 	mla	r1, ip, r1, r2
 800f49c:	4604      	mov	r4, r0
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e7f0      	b.n	800f484 <_vfiprintf_r+0x1b8>
 800f4a2:	ab03      	add	r3, sp, #12
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	462a      	mov	r2, r5
 800f4a8:	4b12      	ldr	r3, [pc, #72]	@ (800f4f4 <_vfiprintf_r+0x228>)
 800f4aa:	a904      	add	r1, sp, #16
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f3af 8000 	nop.w
 800f4b2:	4607      	mov	r7, r0
 800f4b4:	1c78      	adds	r0, r7, #1
 800f4b6:	d1d6      	bne.n	800f466 <_vfiprintf_r+0x19a>
 800f4b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4ba:	07d9      	lsls	r1, r3, #31
 800f4bc:	d405      	bmi.n	800f4ca <_vfiprintf_r+0x1fe>
 800f4be:	89ab      	ldrh	r3, [r5, #12]
 800f4c0:	059a      	lsls	r2, r3, #22
 800f4c2:	d402      	bmi.n	800f4ca <_vfiprintf_r+0x1fe>
 800f4c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4c6:	f7ff fda9 	bl	800f01c <__retarget_lock_release_recursive>
 800f4ca:	89ab      	ldrh	r3, [r5, #12]
 800f4cc:	065b      	lsls	r3, r3, #25
 800f4ce:	f53f af1f 	bmi.w	800f310 <_vfiprintf_r+0x44>
 800f4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4d4:	e71e      	b.n	800f314 <_vfiprintf_r+0x48>
 800f4d6:	ab03      	add	r3, sp, #12
 800f4d8:	9300      	str	r3, [sp, #0]
 800f4da:	462a      	mov	r2, r5
 800f4dc:	4b05      	ldr	r3, [pc, #20]	@ (800f4f4 <_vfiprintf_r+0x228>)
 800f4de:	a904      	add	r1, sp, #16
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	f000 f879 	bl	800f5d8 <_printf_i>
 800f4e6:	e7e4      	b.n	800f4b2 <_vfiprintf_r+0x1e6>
 800f4e8:	0801283d 	.word	0x0801283d
 800f4ec:	08012847 	.word	0x08012847
 800f4f0:	00000000 	.word	0x00000000
 800f4f4:	0800f2a7 	.word	0x0800f2a7
 800f4f8:	08012843 	.word	0x08012843

0800f4fc <_printf_common>:
 800f4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f500:	4616      	mov	r6, r2
 800f502:	4698      	mov	r8, r3
 800f504:	688a      	ldr	r2, [r1, #8]
 800f506:	690b      	ldr	r3, [r1, #16]
 800f508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f50c:	4293      	cmp	r3, r2
 800f50e:	bfb8      	it	lt
 800f510:	4613      	movlt	r3, r2
 800f512:	6033      	str	r3, [r6, #0]
 800f514:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f518:	4607      	mov	r7, r0
 800f51a:	460c      	mov	r4, r1
 800f51c:	b10a      	cbz	r2, 800f522 <_printf_common+0x26>
 800f51e:	3301      	adds	r3, #1
 800f520:	6033      	str	r3, [r6, #0]
 800f522:	6823      	ldr	r3, [r4, #0]
 800f524:	0699      	lsls	r1, r3, #26
 800f526:	bf42      	ittt	mi
 800f528:	6833      	ldrmi	r3, [r6, #0]
 800f52a:	3302      	addmi	r3, #2
 800f52c:	6033      	strmi	r3, [r6, #0]
 800f52e:	6825      	ldr	r5, [r4, #0]
 800f530:	f015 0506 	ands.w	r5, r5, #6
 800f534:	d106      	bne.n	800f544 <_printf_common+0x48>
 800f536:	f104 0a19 	add.w	sl, r4, #25
 800f53a:	68e3      	ldr	r3, [r4, #12]
 800f53c:	6832      	ldr	r2, [r6, #0]
 800f53e:	1a9b      	subs	r3, r3, r2
 800f540:	42ab      	cmp	r3, r5
 800f542:	dc26      	bgt.n	800f592 <_printf_common+0x96>
 800f544:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f548:	6822      	ldr	r2, [r4, #0]
 800f54a:	3b00      	subs	r3, #0
 800f54c:	bf18      	it	ne
 800f54e:	2301      	movne	r3, #1
 800f550:	0692      	lsls	r2, r2, #26
 800f552:	d42b      	bmi.n	800f5ac <_printf_common+0xb0>
 800f554:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f558:	4641      	mov	r1, r8
 800f55a:	4638      	mov	r0, r7
 800f55c:	47c8      	blx	r9
 800f55e:	3001      	adds	r0, #1
 800f560:	d01e      	beq.n	800f5a0 <_printf_common+0xa4>
 800f562:	6823      	ldr	r3, [r4, #0]
 800f564:	6922      	ldr	r2, [r4, #16]
 800f566:	f003 0306 	and.w	r3, r3, #6
 800f56a:	2b04      	cmp	r3, #4
 800f56c:	bf02      	ittt	eq
 800f56e:	68e5      	ldreq	r5, [r4, #12]
 800f570:	6833      	ldreq	r3, [r6, #0]
 800f572:	1aed      	subeq	r5, r5, r3
 800f574:	68a3      	ldr	r3, [r4, #8]
 800f576:	bf0c      	ite	eq
 800f578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f57c:	2500      	movne	r5, #0
 800f57e:	4293      	cmp	r3, r2
 800f580:	bfc4      	itt	gt
 800f582:	1a9b      	subgt	r3, r3, r2
 800f584:	18ed      	addgt	r5, r5, r3
 800f586:	2600      	movs	r6, #0
 800f588:	341a      	adds	r4, #26
 800f58a:	42b5      	cmp	r5, r6
 800f58c:	d11a      	bne.n	800f5c4 <_printf_common+0xc8>
 800f58e:	2000      	movs	r0, #0
 800f590:	e008      	b.n	800f5a4 <_printf_common+0xa8>
 800f592:	2301      	movs	r3, #1
 800f594:	4652      	mov	r2, sl
 800f596:	4641      	mov	r1, r8
 800f598:	4638      	mov	r0, r7
 800f59a:	47c8      	blx	r9
 800f59c:	3001      	adds	r0, #1
 800f59e:	d103      	bne.n	800f5a8 <_printf_common+0xac>
 800f5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5a8:	3501      	adds	r5, #1
 800f5aa:	e7c6      	b.n	800f53a <_printf_common+0x3e>
 800f5ac:	18e1      	adds	r1, r4, r3
 800f5ae:	1c5a      	adds	r2, r3, #1
 800f5b0:	2030      	movs	r0, #48	@ 0x30
 800f5b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f5b6:	4422      	add	r2, r4
 800f5b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f5bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f5c0:	3302      	adds	r3, #2
 800f5c2:	e7c7      	b.n	800f554 <_printf_common+0x58>
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	4622      	mov	r2, r4
 800f5c8:	4641      	mov	r1, r8
 800f5ca:	4638      	mov	r0, r7
 800f5cc:	47c8      	blx	r9
 800f5ce:	3001      	adds	r0, #1
 800f5d0:	d0e6      	beq.n	800f5a0 <_printf_common+0xa4>
 800f5d2:	3601      	adds	r6, #1
 800f5d4:	e7d9      	b.n	800f58a <_printf_common+0x8e>
	...

0800f5d8 <_printf_i>:
 800f5d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5dc:	7e0f      	ldrb	r7, [r1, #24]
 800f5de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f5e0:	2f78      	cmp	r7, #120	@ 0x78
 800f5e2:	4691      	mov	r9, r2
 800f5e4:	4680      	mov	r8, r0
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	469a      	mov	sl, r3
 800f5ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f5ee:	d807      	bhi.n	800f600 <_printf_i+0x28>
 800f5f0:	2f62      	cmp	r7, #98	@ 0x62
 800f5f2:	d80a      	bhi.n	800f60a <_printf_i+0x32>
 800f5f4:	2f00      	cmp	r7, #0
 800f5f6:	f000 80d1 	beq.w	800f79c <_printf_i+0x1c4>
 800f5fa:	2f58      	cmp	r7, #88	@ 0x58
 800f5fc:	f000 80b8 	beq.w	800f770 <_printf_i+0x198>
 800f600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f608:	e03a      	b.n	800f680 <_printf_i+0xa8>
 800f60a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f60e:	2b15      	cmp	r3, #21
 800f610:	d8f6      	bhi.n	800f600 <_printf_i+0x28>
 800f612:	a101      	add	r1, pc, #4	@ (adr r1, 800f618 <_printf_i+0x40>)
 800f614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f618:	0800f671 	.word	0x0800f671
 800f61c:	0800f685 	.word	0x0800f685
 800f620:	0800f601 	.word	0x0800f601
 800f624:	0800f601 	.word	0x0800f601
 800f628:	0800f601 	.word	0x0800f601
 800f62c:	0800f601 	.word	0x0800f601
 800f630:	0800f685 	.word	0x0800f685
 800f634:	0800f601 	.word	0x0800f601
 800f638:	0800f601 	.word	0x0800f601
 800f63c:	0800f601 	.word	0x0800f601
 800f640:	0800f601 	.word	0x0800f601
 800f644:	0800f783 	.word	0x0800f783
 800f648:	0800f6af 	.word	0x0800f6af
 800f64c:	0800f73d 	.word	0x0800f73d
 800f650:	0800f601 	.word	0x0800f601
 800f654:	0800f601 	.word	0x0800f601
 800f658:	0800f7a5 	.word	0x0800f7a5
 800f65c:	0800f601 	.word	0x0800f601
 800f660:	0800f6af 	.word	0x0800f6af
 800f664:	0800f601 	.word	0x0800f601
 800f668:	0800f601 	.word	0x0800f601
 800f66c:	0800f745 	.word	0x0800f745
 800f670:	6833      	ldr	r3, [r6, #0]
 800f672:	1d1a      	adds	r2, r3, #4
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	6032      	str	r2, [r6, #0]
 800f678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f67c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f680:	2301      	movs	r3, #1
 800f682:	e09c      	b.n	800f7be <_printf_i+0x1e6>
 800f684:	6833      	ldr	r3, [r6, #0]
 800f686:	6820      	ldr	r0, [r4, #0]
 800f688:	1d19      	adds	r1, r3, #4
 800f68a:	6031      	str	r1, [r6, #0]
 800f68c:	0606      	lsls	r6, r0, #24
 800f68e:	d501      	bpl.n	800f694 <_printf_i+0xbc>
 800f690:	681d      	ldr	r5, [r3, #0]
 800f692:	e003      	b.n	800f69c <_printf_i+0xc4>
 800f694:	0645      	lsls	r5, r0, #25
 800f696:	d5fb      	bpl.n	800f690 <_printf_i+0xb8>
 800f698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f69c:	2d00      	cmp	r5, #0
 800f69e:	da03      	bge.n	800f6a8 <_printf_i+0xd0>
 800f6a0:	232d      	movs	r3, #45	@ 0x2d
 800f6a2:	426d      	negs	r5, r5
 800f6a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6a8:	4858      	ldr	r0, [pc, #352]	@ (800f80c <_printf_i+0x234>)
 800f6aa:	230a      	movs	r3, #10
 800f6ac:	e011      	b.n	800f6d2 <_printf_i+0xfa>
 800f6ae:	6821      	ldr	r1, [r4, #0]
 800f6b0:	6833      	ldr	r3, [r6, #0]
 800f6b2:	0608      	lsls	r0, r1, #24
 800f6b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f6b8:	d402      	bmi.n	800f6c0 <_printf_i+0xe8>
 800f6ba:	0649      	lsls	r1, r1, #25
 800f6bc:	bf48      	it	mi
 800f6be:	b2ad      	uxthmi	r5, r5
 800f6c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f6c2:	4852      	ldr	r0, [pc, #328]	@ (800f80c <_printf_i+0x234>)
 800f6c4:	6033      	str	r3, [r6, #0]
 800f6c6:	bf14      	ite	ne
 800f6c8:	230a      	movne	r3, #10
 800f6ca:	2308      	moveq	r3, #8
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f6d2:	6866      	ldr	r6, [r4, #4]
 800f6d4:	60a6      	str	r6, [r4, #8]
 800f6d6:	2e00      	cmp	r6, #0
 800f6d8:	db05      	blt.n	800f6e6 <_printf_i+0x10e>
 800f6da:	6821      	ldr	r1, [r4, #0]
 800f6dc:	432e      	orrs	r6, r5
 800f6de:	f021 0104 	bic.w	r1, r1, #4
 800f6e2:	6021      	str	r1, [r4, #0]
 800f6e4:	d04b      	beq.n	800f77e <_printf_i+0x1a6>
 800f6e6:	4616      	mov	r6, r2
 800f6e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800f6ec:	fb03 5711 	mls	r7, r3, r1, r5
 800f6f0:	5dc7      	ldrb	r7, [r0, r7]
 800f6f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f6f6:	462f      	mov	r7, r5
 800f6f8:	42bb      	cmp	r3, r7
 800f6fa:	460d      	mov	r5, r1
 800f6fc:	d9f4      	bls.n	800f6e8 <_printf_i+0x110>
 800f6fe:	2b08      	cmp	r3, #8
 800f700:	d10b      	bne.n	800f71a <_printf_i+0x142>
 800f702:	6823      	ldr	r3, [r4, #0]
 800f704:	07df      	lsls	r7, r3, #31
 800f706:	d508      	bpl.n	800f71a <_printf_i+0x142>
 800f708:	6923      	ldr	r3, [r4, #16]
 800f70a:	6861      	ldr	r1, [r4, #4]
 800f70c:	4299      	cmp	r1, r3
 800f70e:	bfde      	ittt	le
 800f710:	2330      	movle	r3, #48	@ 0x30
 800f712:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f716:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f71a:	1b92      	subs	r2, r2, r6
 800f71c:	6122      	str	r2, [r4, #16]
 800f71e:	f8cd a000 	str.w	sl, [sp]
 800f722:	464b      	mov	r3, r9
 800f724:	aa03      	add	r2, sp, #12
 800f726:	4621      	mov	r1, r4
 800f728:	4640      	mov	r0, r8
 800f72a:	f7ff fee7 	bl	800f4fc <_printf_common>
 800f72e:	3001      	adds	r0, #1
 800f730:	d14a      	bne.n	800f7c8 <_printf_i+0x1f0>
 800f732:	f04f 30ff 	mov.w	r0, #4294967295
 800f736:	b004      	add	sp, #16
 800f738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f73c:	6823      	ldr	r3, [r4, #0]
 800f73e:	f043 0320 	orr.w	r3, r3, #32
 800f742:	6023      	str	r3, [r4, #0]
 800f744:	4832      	ldr	r0, [pc, #200]	@ (800f810 <_printf_i+0x238>)
 800f746:	2778      	movs	r7, #120	@ 0x78
 800f748:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f74c:	6823      	ldr	r3, [r4, #0]
 800f74e:	6831      	ldr	r1, [r6, #0]
 800f750:	061f      	lsls	r7, r3, #24
 800f752:	f851 5b04 	ldr.w	r5, [r1], #4
 800f756:	d402      	bmi.n	800f75e <_printf_i+0x186>
 800f758:	065f      	lsls	r7, r3, #25
 800f75a:	bf48      	it	mi
 800f75c:	b2ad      	uxthmi	r5, r5
 800f75e:	6031      	str	r1, [r6, #0]
 800f760:	07d9      	lsls	r1, r3, #31
 800f762:	bf44      	itt	mi
 800f764:	f043 0320 	orrmi.w	r3, r3, #32
 800f768:	6023      	strmi	r3, [r4, #0]
 800f76a:	b11d      	cbz	r5, 800f774 <_printf_i+0x19c>
 800f76c:	2310      	movs	r3, #16
 800f76e:	e7ad      	b.n	800f6cc <_printf_i+0xf4>
 800f770:	4826      	ldr	r0, [pc, #152]	@ (800f80c <_printf_i+0x234>)
 800f772:	e7e9      	b.n	800f748 <_printf_i+0x170>
 800f774:	6823      	ldr	r3, [r4, #0]
 800f776:	f023 0320 	bic.w	r3, r3, #32
 800f77a:	6023      	str	r3, [r4, #0]
 800f77c:	e7f6      	b.n	800f76c <_printf_i+0x194>
 800f77e:	4616      	mov	r6, r2
 800f780:	e7bd      	b.n	800f6fe <_printf_i+0x126>
 800f782:	6833      	ldr	r3, [r6, #0]
 800f784:	6825      	ldr	r5, [r4, #0]
 800f786:	6961      	ldr	r1, [r4, #20]
 800f788:	1d18      	adds	r0, r3, #4
 800f78a:	6030      	str	r0, [r6, #0]
 800f78c:	062e      	lsls	r6, r5, #24
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	d501      	bpl.n	800f796 <_printf_i+0x1be>
 800f792:	6019      	str	r1, [r3, #0]
 800f794:	e002      	b.n	800f79c <_printf_i+0x1c4>
 800f796:	0668      	lsls	r0, r5, #25
 800f798:	d5fb      	bpl.n	800f792 <_printf_i+0x1ba>
 800f79a:	8019      	strh	r1, [r3, #0]
 800f79c:	2300      	movs	r3, #0
 800f79e:	6123      	str	r3, [r4, #16]
 800f7a0:	4616      	mov	r6, r2
 800f7a2:	e7bc      	b.n	800f71e <_printf_i+0x146>
 800f7a4:	6833      	ldr	r3, [r6, #0]
 800f7a6:	1d1a      	adds	r2, r3, #4
 800f7a8:	6032      	str	r2, [r6, #0]
 800f7aa:	681e      	ldr	r6, [r3, #0]
 800f7ac:	6862      	ldr	r2, [r4, #4]
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	f7f0 fd15 	bl	80001e0 <memchr>
 800f7b6:	b108      	cbz	r0, 800f7bc <_printf_i+0x1e4>
 800f7b8:	1b80      	subs	r0, r0, r6
 800f7ba:	6060      	str	r0, [r4, #4]
 800f7bc:	6863      	ldr	r3, [r4, #4]
 800f7be:	6123      	str	r3, [r4, #16]
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7c6:	e7aa      	b.n	800f71e <_printf_i+0x146>
 800f7c8:	6923      	ldr	r3, [r4, #16]
 800f7ca:	4632      	mov	r2, r6
 800f7cc:	4649      	mov	r1, r9
 800f7ce:	4640      	mov	r0, r8
 800f7d0:	47d0      	blx	sl
 800f7d2:	3001      	adds	r0, #1
 800f7d4:	d0ad      	beq.n	800f732 <_printf_i+0x15a>
 800f7d6:	6823      	ldr	r3, [r4, #0]
 800f7d8:	079b      	lsls	r3, r3, #30
 800f7da:	d413      	bmi.n	800f804 <_printf_i+0x22c>
 800f7dc:	68e0      	ldr	r0, [r4, #12]
 800f7de:	9b03      	ldr	r3, [sp, #12]
 800f7e0:	4298      	cmp	r0, r3
 800f7e2:	bfb8      	it	lt
 800f7e4:	4618      	movlt	r0, r3
 800f7e6:	e7a6      	b.n	800f736 <_printf_i+0x15e>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	4632      	mov	r2, r6
 800f7ec:	4649      	mov	r1, r9
 800f7ee:	4640      	mov	r0, r8
 800f7f0:	47d0      	blx	sl
 800f7f2:	3001      	adds	r0, #1
 800f7f4:	d09d      	beq.n	800f732 <_printf_i+0x15a>
 800f7f6:	3501      	adds	r5, #1
 800f7f8:	68e3      	ldr	r3, [r4, #12]
 800f7fa:	9903      	ldr	r1, [sp, #12]
 800f7fc:	1a5b      	subs	r3, r3, r1
 800f7fe:	42ab      	cmp	r3, r5
 800f800:	dcf2      	bgt.n	800f7e8 <_printf_i+0x210>
 800f802:	e7eb      	b.n	800f7dc <_printf_i+0x204>
 800f804:	2500      	movs	r5, #0
 800f806:	f104 0619 	add.w	r6, r4, #25
 800f80a:	e7f5      	b.n	800f7f8 <_printf_i+0x220>
 800f80c:	0801284e 	.word	0x0801284e
 800f810:	0801285f 	.word	0x0801285f

0800f814 <__sflush_r>:
 800f814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f81c:	0716      	lsls	r6, r2, #28
 800f81e:	4605      	mov	r5, r0
 800f820:	460c      	mov	r4, r1
 800f822:	d454      	bmi.n	800f8ce <__sflush_r+0xba>
 800f824:	684b      	ldr	r3, [r1, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	dc02      	bgt.n	800f830 <__sflush_r+0x1c>
 800f82a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	dd48      	ble.n	800f8c2 <__sflush_r+0xae>
 800f830:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f832:	2e00      	cmp	r6, #0
 800f834:	d045      	beq.n	800f8c2 <__sflush_r+0xae>
 800f836:	2300      	movs	r3, #0
 800f838:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f83c:	682f      	ldr	r7, [r5, #0]
 800f83e:	6a21      	ldr	r1, [r4, #32]
 800f840:	602b      	str	r3, [r5, #0]
 800f842:	d030      	beq.n	800f8a6 <__sflush_r+0x92>
 800f844:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f846:	89a3      	ldrh	r3, [r4, #12]
 800f848:	0759      	lsls	r1, r3, #29
 800f84a:	d505      	bpl.n	800f858 <__sflush_r+0x44>
 800f84c:	6863      	ldr	r3, [r4, #4]
 800f84e:	1ad2      	subs	r2, r2, r3
 800f850:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f852:	b10b      	cbz	r3, 800f858 <__sflush_r+0x44>
 800f854:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f856:	1ad2      	subs	r2, r2, r3
 800f858:	2300      	movs	r3, #0
 800f85a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f85c:	6a21      	ldr	r1, [r4, #32]
 800f85e:	4628      	mov	r0, r5
 800f860:	47b0      	blx	r6
 800f862:	1c43      	adds	r3, r0, #1
 800f864:	89a3      	ldrh	r3, [r4, #12]
 800f866:	d106      	bne.n	800f876 <__sflush_r+0x62>
 800f868:	6829      	ldr	r1, [r5, #0]
 800f86a:	291d      	cmp	r1, #29
 800f86c:	d82b      	bhi.n	800f8c6 <__sflush_r+0xb2>
 800f86e:	4a2a      	ldr	r2, [pc, #168]	@ (800f918 <__sflush_r+0x104>)
 800f870:	40ca      	lsrs	r2, r1
 800f872:	07d6      	lsls	r6, r2, #31
 800f874:	d527      	bpl.n	800f8c6 <__sflush_r+0xb2>
 800f876:	2200      	movs	r2, #0
 800f878:	6062      	str	r2, [r4, #4]
 800f87a:	04d9      	lsls	r1, r3, #19
 800f87c:	6922      	ldr	r2, [r4, #16]
 800f87e:	6022      	str	r2, [r4, #0]
 800f880:	d504      	bpl.n	800f88c <__sflush_r+0x78>
 800f882:	1c42      	adds	r2, r0, #1
 800f884:	d101      	bne.n	800f88a <__sflush_r+0x76>
 800f886:	682b      	ldr	r3, [r5, #0]
 800f888:	b903      	cbnz	r3, 800f88c <__sflush_r+0x78>
 800f88a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f88c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f88e:	602f      	str	r7, [r5, #0]
 800f890:	b1b9      	cbz	r1, 800f8c2 <__sflush_r+0xae>
 800f892:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f896:	4299      	cmp	r1, r3
 800f898:	d002      	beq.n	800f8a0 <__sflush_r+0x8c>
 800f89a:	4628      	mov	r0, r5
 800f89c:	f7ff fbec 	bl	800f078 <_free_r>
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8a4:	e00d      	b.n	800f8c2 <__sflush_r+0xae>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	47b0      	blx	r6
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	1c50      	adds	r0, r2, #1
 800f8b0:	d1c9      	bne.n	800f846 <__sflush_r+0x32>
 800f8b2:	682b      	ldr	r3, [r5, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d0c6      	beq.n	800f846 <__sflush_r+0x32>
 800f8b8:	2b1d      	cmp	r3, #29
 800f8ba:	d001      	beq.n	800f8c0 <__sflush_r+0xac>
 800f8bc:	2b16      	cmp	r3, #22
 800f8be:	d11e      	bne.n	800f8fe <__sflush_r+0xea>
 800f8c0:	602f      	str	r7, [r5, #0]
 800f8c2:	2000      	movs	r0, #0
 800f8c4:	e022      	b.n	800f90c <__sflush_r+0xf8>
 800f8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8ca:	b21b      	sxth	r3, r3
 800f8cc:	e01b      	b.n	800f906 <__sflush_r+0xf2>
 800f8ce:	690f      	ldr	r7, [r1, #16]
 800f8d0:	2f00      	cmp	r7, #0
 800f8d2:	d0f6      	beq.n	800f8c2 <__sflush_r+0xae>
 800f8d4:	0793      	lsls	r3, r2, #30
 800f8d6:	680e      	ldr	r6, [r1, #0]
 800f8d8:	bf08      	it	eq
 800f8da:	694b      	ldreq	r3, [r1, #20]
 800f8dc:	600f      	str	r7, [r1, #0]
 800f8de:	bf18      	it	ne
 800f8e0:	2300      	movne	r3, #0
 800f8e2:	eba6 0807 	sub.w	r8, r6, r7
 800f8e6:	608b      	str	r3, [r1, #8]
 800f8e8:	f1b8 0f00 	cmp.w	r8, #0
 800f8ec:	dde9      	ble.n	800f8c2 <__sflush_r+0xae>
 800f8ee:	6a21      	ldr	r1, [r4, #32]
 800f8f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f8f2:	4643      	mov	r3, r8
 800f8f4:	463a      	mov	r2, r7
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	47b0      	blx	r6
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	dc08      	bgt.n	800f910 <__sflush_r+0xfc>
 800f8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f906:	81a3      	strh	r3, [r4, #12]
 800f908:	f04f 30ff 	mov.w	r0, #4294967295
 800f90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f910:	4407      	add	r7, r0
 800f912:	eba8 0800 	sub.w	r8, r8, r0
 800f916:	e7e7      	b.n	800f8e8 <__sflush_r+0xd4>
 800f918:	20400001 	.word	0x20400001

0800f91c <_fflush_r>:
 800f91c:	b538      	push	{r3, r4, r5, lr}
 800f91e:	690b      	ldr	r3, [r1, #16]
 800f920:	4605      	mov	r5, r0
 800f922:	460c      	mov	r4, r1
 800f924:	b913      	cbnz	r3, 800f92c <_fflush_r+0x10>
 800f926:	2500      	movs	r5, #0
 800f928:	4628      	mov	r0, r5
 800f92a:	bd38      	pop	{r3, r4, r5, pc}
 800f92c:	b118      	cbz	r0, 800f936 <_fflush_r+0x1a>
 800f92e:	6a03      	ldr	r3, [r0, #32]
 800f930:	b90b      	cbnz	r3, 800f936 <_fflush_r+0x1a>
 800f932:	f7ff fa63 	bl	800edfc <__sinit>
 800f936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d0f3      	beq.n	800f926 <_fflush_r+0xa>
 800f93e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f940:	07d0      	lsls	r0, r2, #31
 800f942:	d404      	bmi.n	800f94e <_fflush_r+0x32>
 800f944:	0599      	lsls	r1, r3, #22
 800f946:	d402      	bmi.n	800f94e <_fflush_r+0x32>
 800f948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f94a:	f7ff fb66 	bl	800f01a <__retarget_lock_acquire_recursive>
 800f94e:	4628      	mov	r0, r5
 800f950:	4621      	mov	r1, r4
 800f952:	f7ff ff5f 	bl	800f814 <__sflush_r>
 800f956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f958:	07da      	lsls	r2, r3, #31
 800f95a:	4605      	mov	r5, r0
 800f95c:	d4e4      	bmi.n	800f928 <_fflush_r+0xc>
 800f95e:	89a3      	ldrh	r3, [r4, #12]
 800f960:	059b      	lsls	r3, r3, #22
 800f962:	d4e1      	bmi.n	800f928 <_fflush_r+0xc>
 800f964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f966:	f7ff fb59 	bl	800f01c <__retarget_lock_release_recursive>
 800f96a:	e7dd      	b.n	800f928 <_fflush_r+0xc>

0800f96c <fiprintf>:
 800f96c:	b40e      	push	{r1, r2, r3}
 800f96e:	b503      	push	{r0, r1, lr}
 800f970:	4601      	mov	r1, r0
 800f972:	ab03      	add	r3, sp, #12
 800f974:	4805      	ldr	r0, [pc, #20]	@ (800f98c <fiprintf+0x20>)
 800f976:	f853 2b04 	ldr.w	r2, [r3], #4
 800f97a:	6800      	ldr	r0, [r0, #0]
 800f97c:	9301      	str	r3, [sp, #4]
 800f97e:	f7ff fca5 	bl	800f2cc <_vfiprintf_r>
 800f982:	b002      	add	sp, #8
 800f984:	f85d eb04 	ldr.w	lr, [sp], #4
 800f988:	b003      	add	sp, #12
 800f98a:	4770      	bx	lr
 800f98c:	20000038 	.word	0x20000038

0800f990 <__swbuf_r>:
 800f990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f992:	460e      	mov	r6, r1
 800f994:	4614      	mov	r4, r2
 800f996:	4605      	mov	r5, r0
 800f998:	b118      	cbz	r0, 800f9a2 <__swbuf_r+0x12>
 800f99a:	6a03      	ldr	r3, [r0, #32]
 800f99c:	b90b      	cbnz	r3, 800f9a2 <__swbuf_r+0x12>
 800f99e:	f7ff fa2d 	bl	800edfc <__sinit>
 800f9a2:	69a3      	ldr	r3, [r4, #24]
 800f9a4:	60a3      	str	r3, [r4, #8]
 800f9a6:	89a3      	ldrh	r3, [r4, #12]
 800f9a8:	071a      	lsls	r2, r3, #28
 800f9aa:	d501      	bpl.n	800f9b0 <__swbuf_r+0x20>
 800f9ac:	6923      	ldr	r3, [r4, #16]
 800f9ae:	b943      	cbnz	r3, 800f9c2 <__swbuf_r+0x32>
 800f9b0:	4621      	mov	r1, r4
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	f000 f82a 	bl	800fa0c <__swsetup_r>
 800f9b8:	b118      	cbz	r0, 800f9c2 <__swbuf_r+0x32>
 800f9ba:	f04f 37ff 	mov.w	r7, #4294967295
 800f9be:	4638      	mov	r0, r7
 800f9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	6922      	ldr	r2, [r4, #16]
 800f9c6:	1a98      	subs	r0, r3, r2
 800f9c8:	6963      	ldr	r3, [r4, #20]
 800f9ca:	b2f6      	uxtb	r6, r6
 800f9cc:	4283      	cmp	r3, r0
 800f9ce:	4637      	mov	r7, r6
 800f9d0:	dc05      	bgt.n	800f9de <__swbuf_r+0x4e>
 800f9d2:	4621      	mov	r1, r4
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	f7ff ffa1 	bl	800f91c <_fflush_r>
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	d1ed      	bne.n	800f9ba <__swbuf_r+0x2a>
 800f9de:	68a3      	ldr	r3, [r4, #8]
 800f9e0:	3b01      	subs	r3, #1
 800f9e2:	60a3      	str	r3, [r4, #8]
 800f9e4:	6823      	ldr	r3, [r4, #0]
 800f9e6:	1c5a      	adds	r2, r3, #1
 800f9e8:	6022      	str	r2, [r4, #0]
 800f9ea:	701e      	strb	r6, [r3, #0]
 800f9ec:	6962      	ldr	r2, [r4, #20]
 800f9ee:	1c43      	adds	r3, r0, #1
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d004      	beq.n	800f9fe <__swbuf_r+0x6e>
 800f9f4:	89a3      	ldrh	r3, [r4, #12]
 800f9f6:	07db      	lsls	r3, r3, #31
 800f9f8:	d5e1      	bpl.n	800f9be <__swbuf_r+0x2e>
 800f9fa:	2e0a      	cmp	r6, #10
 800f9fc:	d1df      	bne.n	800f9be <__swbuf_r+0x2e>
 800f9fe:	4621      	mov	r1, r4
 800fa00:	4628      	mov	r0, r5
 800fa02:	f7ff ff8b 	bl	800f91c <_fflush_r>
 800fa06:	2800      	cmp	r0, #0
 800fa08:	d0d9      	beq.n	800f9be <__swbuf_r+0x2e>
 800fa0a:	e7d6      	b.n	800f9ba <__swbuf_r+0x2a>

0800fa0c <__swsetup_r>:
 800fa0c:	b538      	push	{r3, r4, r5, lr}
 800fa0e:	4b29      	ldr	r3, [pc, #164]	@ (800fab4 <__swsetup_r+0xa8>)
 800fa10:	4605      	mov	r5, r0
 800fa12:	6818      	ldr	r0, [r3, #0]
 800fa14:	460c      	mov	r4, r1
 800fa16:	b118      	cbz	r0, 800fa20 <__swsetup_r+0x14>
 800fa18:	6a03      	ldr	r3, [r0, #32]
 800fa1a:	b90b      	cbnz	r3, 800fa20 <__swsetup_r+0x14>
 800fa1c:	f7ff f9ee 	bl	800edfc <__sinit>
 800fa20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa24:	0719      	lsls	r1, r3, #28
 800fa26:	d422      	bmi.n	800fa6e <__swsetup_r+0x62>
 800fa28:	06da      	lsls	r2, r3, #27
 800fa2a:	d407      	bmi.n	800fa3c <__swsetup_r+0x30>
 800fa2c:	2209      	movs	r2, #9
 800fa2e:	602a      	str	r2, [r5, #0]
 800fa30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa34:	81a3      	strh	r3, [r4, #12]
 800fa36:	f04f 30ff 	mov.w	r0, #4294967295
 800fa3a:	e033      	b.n	800faa4 <__swsetup_r+0x98>
 800fa3c:	0758      	lsls	r0, r3, #29
 800fa3e:	d512      	bpl.n	800fa66 <__swsetup_r+0x5a>
 800fa40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa42:	b141      	cbz	r1, 800fa56 <__swsetup_r+0x4a>
 800fa44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa48:	4299      	cmp	r1, r3
 800fa4a:	d002      	beq.n	800fa52 <__swsetup_r+0x46>
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	f7ff fb13 	bl	800f078 <_free_r>
 800fa52:	2300      	movs	r3, #0
 800fa54:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa56:	89a3      	ldrh	r3, [r4, #12]
 800fa58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa5c:	81a3      	strh	r3, [r4, #12]
 800fa5e:	2300      	movs	r3, #0
 800fa60:	6063      	str	r3, [r4, #4]
 800fa62:	6923      	ldr	r3, [r4, #16]
 800fa64:	6023      	str	r3, [r4, #0]
 800fa66:	89a3      	ldrh	r3, [r4, #12]
 800fa68:	f043 0308 	orr.w	r3, r3, #8
 800fa6c:	81a3      	strh	r3, [r4, #12]
 800fa6e:	6923      	ldr	r3, [r4, #16]
 800fa70:	b94b      	cbnz	r3, 800fa86 <__swsetup_r+0x7a>
 800fa72:	89a3      	ldrh	r3, [r4, #12]
 800fa74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa7c:	d003      	beq.n	800fa86 <__swsetup_r+0x7a>
 800fa7e:	4621      	mov	r1, r4
 800fa80:	4628      	mov	r0, r5
 800fa82:	f000 f856 	bl	800fb32 <__smakebuf_r>
 800fa86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa8a:	f013 0201 	ands.w	r2, r3, #1
 800fa8e:	d00a      	beq.n	800faa6 <__swsetup_r+0x9a>
 800fa90:	2200      	movs	r2, #0
 800fa92:	60a2      	str	r2, [r4, #8]
 800fa94:	6962      	ldr	r2, [r4, #20]
 800fa96:	4252      	negs	r2, r2
 800fa98:	61a2      	str	r2, [r4, #24]
 800fa9a:	6922      	ldr	r2, [r4, #16]
 800fa9c:	b942      	cbnz	r2, 800fab0 <__swsetup_r+0xa4>
 800fa9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800faa2:	d1c5      	bne.n	800fa30 <__swsetup_r+0x24>
 800faa4:	bd38      	pop	{r3, r4, r5, pc}
 800faa6:	0799      	lsls	r1, r3, #30
 800faa8:	bf58      	it	pl
 800faaa:	6962      	ldrpl	r2, [r4, #20]
 800faac:	60a2      	str	r2, [r4, #8]
 800faae:	e7f4      	b.n	800fa9a <__swsetup_r+0x8e>
 800fab0:	2000      	movs	r0, #0
 800fab2:	e7f7      	b.n	800faa4 <__swsetup_r+0x98>
 800fab4:	20000038 	.word	0x20000038

0800fab8 <_sbrk_r>:
 800fab8:	b538      	push	{r3, r4, r5, lr}
 800faba:	4d06      	ldr	r5, [pc, #24]	@ (800fad4 <_sbrk_r+0x1c>)
 800fabc:	2300      	movs	r3, #0
 800fabe:	4604      	mov	r4, r0
 800fac0:	4608      	mov	r0, r1
 800fac2:	602b      	str	r3, [r5, #0]
 800fac4:	f7f1 f864 	bl	8000b90 <_sbrk>
 800fac8:	1c43      	adds	r3, r0, #1
 800faca:	d102      	bne.n	800fad2 <_sbrk_r+0x1a>
 800facc:	682b      	ldr	r3, [r5, #0]
 800face:	b103      	cbz	r3, 800fad2 <_sbrk_r+0x1a>
 800fad0:	6023      	str	r3, [r4, #0]
 800fad2:	bd38      	pop	{r3, r4, r5, pc}
 800fad4:	20008520 	.word	0x20008520

0800fad8 <abort>:
 800fad8:	b508      	push	{r3, lr}
 800fada:	2006      	movs	r0, #6
 800fadc:	f000 f88e 	bl	800fbfc <raise>
 800fae0:	2001      	movs	r0, #1
 800fae2:	f7f0 ffdd 	bl	8000aa0 <_exit>

0800fae6 <__swhatbuf_r>:
 800fae6:	b570      	push	{r4, r5, r6, lr}
 800fae8:	460c      	mov	r4, r1
 800faea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faee:	2900      	cmp	r1, #0
 800faf0:	b096      	sub	sp, #88	@ 0x58
 800faf2:	4615      	mov	r5, r2
 800faf4:	461e      	mov	r6, r3
 800faf6:	da0d      	bge.n	800fb14 <__swhatbuf_r+0x2e>
 800faf8:	89a3      	ldrh	r3, [r4, #12]
 800fafa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fafe:	f04f 0100 	mov.w	r1, #0
 800fb02:	bf14      	ite	ne
 800fb04:	2340      	movne	r3, #64	@ 0x40
 800fb06:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	6031      	str	r1, [r6, #0]
 800fb0e:	602b      	str	r3, [r5, #0]
 800fb10:	b016      	add	sp, #88	@ 0x58
 800fb12:	bd70      	pop	{r4, r5, r6, pc}
 800fb14:	466a      	mov	r2, sp
 800fb16:	f000 f879 	bl	800fc0c <_fstat_r>
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	dbec      	blt.n	800faf8 <__swhatbuf_r+0x12>
 800fb1e:	9901      	ldr	r1, [sp, #4]
 800fb20:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb24:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb28:	4259      	negs	r1, r3
 800fb2a:	4159      	adcs	r1, r3
 800fb2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb30:	e7eb      	b.n	800fb0a <__swhatbuf_r+0x24>

0800fb32 <__smakebuf_r>:
 800fb32:	898b      	ldrh	r3, [r1, #12]
 800fb34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb36:	079d      	lsls	r5, r3, #30
 800fb38:	4606      	mov	r6, r0
 800fb3a:	460c      	mov	r4, r1
 800fb3c:	d507      	bpl.n	800fb4e <__smakebuf_r+0x1c>
 800fb3e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb42:	6023      	str	r3, [r4, #0]
 800fb44:	6123      	str	r3, [r4, #16]
 800fb46:	2301      	movs	r3, #1
 800fb48:	6163      	str	r3, [r4, #20]
 800fb4a:	b003      	add	sp, #12
 800fb4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb4e:	ab01      	add	r3, sp, #4
 800fb50:	466a      	mov	r2, sp
 800fb52:	f7ff ffc8 	bl	800fae6 <__swhatbuf_r>
 800fb56:	9f00      	ldr	r7, [sp, #0]
 800fb58:	4605      	mov	r5, r0
 800fb5a:	4639      	mov	r1, r7
 800fb5c:	4630      	mov	r0, r6
 800fb5e:	f7ff faff 	bl	800f160 <_malloc_r>
 800fb62:	b948      	cbnz	r0, 800fb78 <__smakebuf_r+0x46>
 800fb64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb68:	059a      	lsls	r2, r3, #22
 800fb6a:	d4ee      	bmi.n	800fb4a <__smakebuf_r+0x18>
 800fb6c:	f023 0303 	bic.w	r3, r3, #3
 800fb70:	f043 0302 	orr.w	r3, r3, #2
 800fb74:	81a3      	strh	r3, [r4, #12]
 800fb76:	e7e2      	b.n	800fb3e <__smakebuf_r+0xc>
 800fb78:	89a3      	ldrh	r3, [r4, #12]
 800fb7a:	6020      	str	r0, [r4, #0]
 800fb7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb80:	81a3      	strh	r3, [r4, #12]
 800fb82:	9b01      	ldr	r3, [sp, #4]
 800fb84:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb88:	b15b      	cbz	r3, 800fba2 <__smakebuf_r+0x70>
 800fb8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb8e:	4630      	mov	r0, r6
 800fb90:	f000 f84e 	bl	800fc30 <_isatty_r>
 800fb94:	b128      	cbz	r0, 800fba2 <__smakebuf_r+0x70>
 800fb96:	89a3      	ldrh	r3, [r4, #12]
 800fb98:	f023 0303 	bic.w	r3, r3, #3
 800fb9c:	f043 0301 	orr.w	r3, r3, #1
 800fba0:	81a3      	strh	r3, [r4, #12]
 800fba2:	89a3      	ldrh	r3, [r4, #12]
 800fba4:	431d      	orrs	r5, r3
 800fba6:	81a5      	strh	r5, [r4, #12]
 800fba8:	e7cf      	b.n	800fb4a <__smakebuf_r+0x18>

0800fbaa <_raise_r>:
 800fbaa:	291f      	cmp	r1, #31
 800fbac:	b538      	push	{r3, r4, r5, lr}
 800fbae:	4605      	mov	r5, r0
 800fbb0:	460c      	mov	r4, r1
 800fbb2:	d904      	bls.n	800fbbe <_raise_r+0x14>
 800fbb4:	2316      	movs	r3, #22
 800fbb6:	6003      	str	r3, [r0, #0]
 800fbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbbc:	bd38      	pop	{r3, r4, r5, pc}
 800fbbe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fbc0:	b112      	cbz	r2, 800fbc8 <_raise_r+0x1e>
 800fbc2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fbc6:	b94b      	cbnz	r3, 800fbdc <_raise_r+0x32>
 800fbc8:	4628      	mov	r0, r5
 800fbca:	f000 f853 	bl	800fc74 <_getpid_r>
 800fbce:	4622      	mov	r2, r4
 800fbd0:	4601      	mov	r1, r0
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbd8:	f000 b83a 	b.w	800fc50 <_kill_r>
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d00a      	beq.n	800fbf6 <_raise_r+0x4c>
 800fbe0:	1c59      	adds	r1, r3, #1
 800fbe2:	d103      	bne.n	800fbec <_raise_r+0x42>
 800fbe4:	2316      	movs	r3, #22
 800fbe6:	6003      	str	r3, [r0, #0]
 800fbe8:	2001      	movs	r0, #1
 800fbea:	e7e7      	b.n	800fbbc <_raise_r+0x12>
 800fbec:	2100      	movs	r1, #0
 800fbee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	4798      	blx	r3
 800fbf6:	2000      	movs	r0, #0
 800fbf8:	e7e0      	b.n	800fbbc <_raise_r+0x12>
	...

0800fbfc <raise>:
 800fbfc:	4b02      	ldr	r3, [pc, #8]	@ (800fc08 <raise+0xc>)
 800fbfe:	4601      	mov	r1, r0
 800fc00:	6818      	ldr	r0, [r3, #0]
 800fc02:	f7ff bfd2 	b.w	800fbaa <_raise_r>
 800fc06:	bf00      	nop
 800fc08:	20000038 	.word	0x20000038

0800fc0c <_fstat_r>:
 800fc0c:	b538      	push	{r3, r4, r5, lr}
 800fc0e:	4d07      	ldr	r5, [pc, #28]	@ (800fc2c <_fstat_r+0x20>)
 800fc10:	2300      	movs	r3, #0
 800fc12:	4604      	mov	r4, r0
 800fc14:	4608      	mov	r0, r1
 800fc16:	4611      	mov	r1, r2
 800fc18:	602b      	str	r3, [r5, #0]
 800fc1a:	f7f0 ff91 	bl	8000b40 <_fstat>
 800fc1e:	1c43      	adds	r3, r0, #1
 800fc20:	d102      	bne.n	800fc28 <_fstat_r+0x1c>
 800fc22:	682b      	ldr	r3, [r5, #0]
 800fc24:	b103      	cbz	r3, 800fc28 <_fstat_r+0x1c>
 800fc26:	6023      	str	r3, [r4, #0]
 800fc28:	bd38      	pop	{r3, r4, r5, pc}
 800fc2a:	bf00      	nop
 800fc2c:	20008520 	.word	0x20008520

0800fc30 <_isatty_r>:
 800fc30:	b538      	push	{r3, r4, r5, lr}
 800fc32:	4d06      	ldr	r5, [pc, #24]	@ (800fc4c <_isatty_r+0x1c>)
 800fc34:	2300      	movs	r3, #0
 800fc36:	4604      	mov	r4, r0
 800fc38:	4608      	mov	r0, r1
 800fc3a:	602b      	str	r3, [r5, #0]
 800fc3c:	f7f0 ff90 	bl	8000b60 <_isatty>
 800fc40:	1c43      	adds	r3, r0, #1
 800fc42:	d102      	bne.n	800fc4a <_isatty_r+0x1a>
 800fc44:	682b      	ldr	r3, [r5, #0]
 800fc46:	b103      	cbz	r3, 800fc4a <_isatty_r+0x1a>
 800fc48:	6023      	str	r3, [r4, #0]
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}
 800fc4c:	20008520 	.word	0x20008520

0800fc50 <_kill_r>:
 800fc50:	b538      	push	{r3, r4, r5, lr}
 800fc52:	4d07      	ldr	r5, [pc, #28]	@ (800fc70 <_kill_r+0x20>)
 800fc54:	2300      	movs	r3, #0
 800fc56:	4604      	mov	r4, r0
 800fc58:	4608      	mov	r0, r1
 800fc5a:	4611      	mov	r1, r2
 800fc5c:	602b      	str	r3, [r5, #0]
 800fc5e:	f7f0 ff0d 	bl	8000a7c <_kill>
 800fc62:	1c43      	adds	r3, r0, #1
 800fc64:	d102      	bne.n	800fc6c <_kill_r+0x1c>
 800fc66:	682b      	ldr	r3, [r5, #0]
 800fc68:	b103      	cbz	r3, 800fc6c <_kill_r+0x1c>
 800fc6a:	6023      	str	r3, [r4, #0]
 800fc6c:	bd38      	pop	{r3, r4, r5, pc}
 800fc6e:	bf00      	nop
 800fc70:	20008520 	.word	0x20008520

0800fc74 <_getpid_r>:
 800fc74:	f7f0 befa 	b.w	8000a6c <_getpid>

0800fc78 <_init>:
 800fc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc7a:	bf00      	nop
 800fc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc7e:	bc08      	pop	{r3}
 800fc80:	469e      	mov	lr, r3
 800fc82:	4770      	bx	lr

0800fc84 <_fini>:
 800fc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc86:	bf00      	nop
 800fc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc8a:	bc08      	pop	{r3}
 800fc8c:	469e      	mov	lr, r3
 800fc8e:	4770      	bx	lr

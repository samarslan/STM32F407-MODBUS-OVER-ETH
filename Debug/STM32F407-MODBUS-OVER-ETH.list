
STM32F407-MODBUS-OVER-ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e54  08013350  08013350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080161a4  080161a4  00018108  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080161a4  080161a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080161ac  080161ac  00018108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080161ac  080161ac  000171ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080161b0  080161b0  000171b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  080161b4  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018108  2**0
                  CONTENTS
 10 .bss          00008678  20000108  20000108  00018108  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008780  20008780  00018108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027f6b  00000000  00000000  00018138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c5a  00000000  00000000  000400a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fb0  00000000  00000000  00046d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001920  00000000  00000000  00048cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000315a5  00000000  00000000  0004a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000325f6  00000000  00000000  0007bb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f439b  00000000  00000000  000ae16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a2506  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008c48  00000000  00000000  001a254c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001ab194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013338 	.word	0x08013338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	08013338 	.word	0x08013338

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 ffef 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f8bf 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 fa25 	bl	8000a08 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005be:	f005 f8e5 	bl	800578c <MX_LWIP_Init>
  MX_UART4_Init();
 80005c2:	f000 f9f7 	bl	80009b4 <MX_UART4_Init>
  MX_ADC1_Init();
 80005c6:	f000 f91f 	bl	8000808 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005ca:	f000 f9a5 	bl	8000918 <MX_TIM2_Init>
  MX_SPI1_Init();
 80005ce:	f000 f96d 	bl	80008ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80005d2:	484d      	ldr	r0, [pc, #308]	@ (8000708 <main+0x15c>)
 80005d4:	f004 f9e2 	bl	800499c <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 80005d8:	484c      	ldr	r0, [pc, #304]	@ (800070c <main+0x160>)
 80005da:	f001 f8b5 	bl	8001748 <HAL_ADC_Start_IT>

	eMBErrorCode err;
	err = eMBTCPInit(502);
 80005de:	f44f 70fb 	mov.w	r0, #502	@ 0x1f6
 80005e2:	f010 fd31 	bl	8011048 <eMBTCPInit>
 80005e6:	4603      	mov	r3, r0
 80005e8:	77fb      	strb	r3, [r7, #31]
	if (err != MB_ENOERR) {
 80005ea:	7ffb      	ldrb	r3, [r7, #31]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d016      	beq.n	800061e <main+0x72>
		DEBUG_PRINTF("eMBTCPInit failed: %d\r\n", err);
 80005f0:	7ffb      	ldrb	r3, [r7, #31]
 80005f2:	4a47      	ldr	r2, [pc, #284]	@ (8000710 <main+0x164>)
 80005f4:	2140      	movs	r1, #64	@ 0x40
 80005f6:	4847      	ldr	r0, [pc, #284]	@ (8000714 <main+0x168>)
 80005f8:	f011 fdd0 	bl	801219c <sniprintf>
 80005fc:	6038      	str	r0, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	b29a      	uxth	r2, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000606:	4943      	ldr	r1, [pc, #268]	@ (8000714 <main+0x168>)
 8000608:	4843      	ldr	r0, [pc, #268]	@ (8000718 <main+0x16c>)
 800060a:	f004 fd03 	bl	8005014 <HAL_UART_Transmit>
		LED_ON(LED_RED_PIN);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000614:	4841      	ldr	r0, [pc, #260]	@ (800071c <main+0x170>)
 8000616:	f003 f9cd 	bl	80039b4 <HAL_GPIO_WritePin>
		while (1); // hang on error
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <main+0x6e>
	} else {
		DEBUG_PRINTF("eMBTCPInit OK.\r\n");
 800061e:	4a40      	ldr	r2, [pc, #256]	@ (8000720 <main+0x174>)
 8000620:	2140      	movs	r1, #64	@ 0x40
 8000622:	483c      	ldr	r0, [pc, #240]	@ (8000714 <main+0x168>)
 8000624:	f011 fdba 	bl	801219c <sniprintf>
 8000628:	61b8      	str	r0, [r7, #24]
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	b29a      	uxth	r2, r3
 800062e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000632:	4938      	ldr	r1, [pc, #224]	@ (8000714 <main+0x168>)
 8000634:	4838      	ldr	r0, [pc, #224]	@ (8000718 <main+0x16c>)
 8000636:	f004 fced 	bl	8005014 <HAL_UART_Transmit>
	}

	err = eMBEnable();
 800063a:	f010 fd57 	bl	80110ec <eMBEnable>
 800063e:	4603      	mov	r3, r0
 8000640:	77fb      	strb	r3, [r7, #31]
	if (err != MB_ENOERR) {
 8000642:	7ffb      	ldrb	r3, [r7, #31]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d016      	beq.n	8000676 <main+0xca>
		DEBUG_PRINTF("eMBEnable failed: %d\r\n", err);
 8000648:	7ffb      	ldrb	r3, [r7, #31]
 800064a:	4a36      	ldr	r2, [pc, #216]	@ (8000724 <main+0x178>)
 800064c:	2140      	movs	r1, #64	@ 0x40
 800064e:	4831      	ldr	r0, [pc, #196]	@ (8000714 <main+0x168>)
 8000650:	f011 fda4 	bl	801219c <sniprintf>
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	b29a      	uxth	r2, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800065e:	492d      	ldr	r1, [pc, #180]	@ (8000714 <main+0x168>)
 8000660:	482d      	ldr	r0, [pc, #180]	@ (8000718 <main+0x16c>)
 8000662:	f004 fcd7 	bl	8005014 <HAL_UART_Transmit>
		LED_ON(LED_RED_PIN);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066c:	482b      	ldr	r0, [pc, #172]	@ (800071c <main+0x170>)
 800066e:	f003 f9a1 	bl	80039b4 <HAL_GPIO_WritePin>
		while (1);
 8000672:	bf00      	nop
 8000674:	e7fd      	b.n	8000672 <main+0xc6>
	} else {
		DEBUG_PRINTF("eMBEnable OK.\r\n");
 8000676:	4a2c      	ldr	r2, [pc, #176]	@ (8000728 <main+0x17c>)
 8000678:	2140      	movs	r1, #64	@ 0x40
 800067a:	4826      	ldr	r0, [pc, #152]	@ (8000714 <main+0x168>)
 800067c:	f011 fd8e 	bl	801219c <sniprintf>
 8000680:	6178      	str	r0, [r7, #20]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	b29a      	uxth	r2, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068a:	4922      	ldr	r1, [pc, #136]	@ (8000714 <main+0x168>)
 800068c:	4822      	ldr	r0, [pc, #136]	@ (8000718 <main+0x16c>)
 800068e:	f004 fcc1 	bl	8005014 <HAL_UART_Transmit>
	}
	Modbus_InitCallbacks();
 8000692:	f010 fe65 	bl	8011360 <Modbus_InitCallbacks>
	DEBUG_PRINTF("Callbacks registered.\r\n");
 8000696:	4a25      	ldr	r2, [pc, #148]	@ (800072c <main+0x180>)
 8000698:	2140      	movs	r1, #64	@ 0x40
 800069a:	481e      	ldr	r0, [pc, #120]	@ (8000714 <main+0x168>)
 800069c:	f011 fd7e 	bl	801219c <sniprintf>
 80006a0:	6138      	str	r0, [r7, #16]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006aa:	491a      	ldr	r1, [pc, #104]	@ (8000714 <main+0x168>)
 80006ac:	481a      	ldr	r0, [pc, #104]	@ (8000718 <main+0x16c>)
 80006ae:	f004 fcb1 	bl	8005014 <HAL_UART_Transmit>

	Modbus_SetHolding(0, 65);
 80006b2:	2141      	movs	r1, #65	@ 0x41
 80006b4:	2000      	movs	r0, #0
 80006b6:	f011 f8a5 	bl	8011804 <Modbus_SetHolding>
	DEBUG_PRINTF("Holding[0] = 65 set.\r\n");
 80006ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000730 <main+0x184>)
 80006bc:	2140      	movs	r1, #64	@ 0x40
 80006be:	4815      	ldr	r0, [pc, #84]	@ (8000714 <main+0x168>)
 80006c0:	f011 fd6c 	bl	801219c <sniprintf>
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ce:	4911      	ldr	r1, [pc, #68]	@ (8000714 <main+0x168>)
 80006d0:	4811      	ldr	r0, [pc, #68]	@ (8000718 <main+0x16c>)
 80006d2:	f004 fc9f 	bl	8005014 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_LWIP_Process();
 80006d6:	f005 f999 	bl	8005a0c <MX_LWIP_Process>

		err = eMBPoll();
 80006da:	f010 fd23 	bl	8011124 <eMBPoll>
 80006de:	4603      	mov	r3, r0
 80006e0:	77fb      	strb	r3, [r7, #31]
		if (err != MB_ENOERR) {
 80006e2:	7ffb      	ldrb	r3, [r7, #31]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0f6      	beq.n	80006d6 <main+0x12a>
			DEBUG_PRINTF("eMBPoll error: %d\r\n", err);
 80006e8:	7ffb      	ldrb	r3, [r7, #31]
 80006ea:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <main+0x188>)
 80006ec:	2140      	movs	r1, #64	@ 0x40
 80006ee:	4809      	ldr	r0, [pc, #36]	@ (8000714 <main+0x168>)
 80006f0:	f011 fd54 	bl	801219c <sniprintf>
 80006f4:	60b8      	str	r0, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fe:	4905      	ldr	r1, [pc, #20]	@ (8000714 <main+0x168>)
 8000700:	4805      	ldr	r0, [pc, #20]	@ (8000718 <main+0x16c>)
 8000702:	f004 fc87 	bl	8005014 <HAL_UART_Transmit>
		MX_LWIP_Process();
 8000706:	e7e6      	b.n	80006d6 <main+0x12a>
 8000708:	200001c4 	.word	0x200001c4
 800070c:	20000124 	.word	0x20000124
 8000710:	08013350 	.word	0x08013350
 8000714:	20000254 	.word	0x20000254
 8000718:	2000020c 	.word	0x2000020c
 800071c:	40020c00 	.word	0x40020c00
 8000720:	08013368 	.word	0x08013368
 8000724:	0801337c 	.word	0x0801337c
 8000728:	08013394 	.word	0x08013394
 800072c:	080133a4 	.word	0x080133a4
 8000730:	080133bc 	.word	0x080133bc
 8000734:	080133d4 	.word	0x080133d4

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	@ 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f011 fdcb 	bl	80122e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <SystemClock_Config+0xc8>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a26      	ldr	r2, [pc, #152]	@ (8000800 <SystemClock_Config+0xc8>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <SystemClock_Config+0xc8>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <SystemClock_Config+0xcc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a20      	ldr	r2, [pc, #128]	@ (8000804 <SystemClock_Config+0xcc>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <SystemClock_Config+0xcc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a8:	2308      	movs	r3, #8
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80007ac:	2340      	movs	r3, #64	@ 0x40
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f003 f937 	bl	8003a30 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c8:	f000 f9f2 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007d4:	2380      	movs	r3, #128	@ 0x80
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2101      	movs	r1, #1
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 fb9a 	bl	8003f20 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007f2:	f000 f9dd 	bl	8000bb0 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	@ 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800081a:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 800081c:	4a22      	ldr	r2, [pc, #136]	@ (80008a8 <MX_ADC1_Init+0xa0>)
 800081e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000820:	4b20      	ldr	r3, [pc, #128]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 8000822:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000826:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000828:	4b1e      	ldr	r3, [pc, #120]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800082e:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000834:	4b1b      	ldr	r3, [pc, #108]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 8000836:	2200      	movs	r2, #0
 8000838:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083a:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000842:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 8000844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000848:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800084a:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 800084c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 800085a:	2201      	movs	r2, #1
 800085c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 8000868:	2201      	movs	r2, #1
 800086a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 800086e:	f000 ff27 	bl	80016c0 <HAL_ADC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000878:	f000 f99a 	bl	8000bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800087c:	2310      	movs	r3, #16
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000880:	2301      	movs	r3, #1
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000884:	2307      	movs	r3, #7
 8000886:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 800088e:	f001 f96b 	bl	8001b68 <HAL_ADC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000898:	f000 f98a 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000124 	.word	0x20000124
 80008a8:	40012000 	.word	0x40012000

080008ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b0:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008b2:	4a18      	ldr	r2, [pc, #96]	@ (8000914 <MX_SPI1_Init+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008b6:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008e0:	2220      	movs	r2, #32
 80008e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008f8:	220a      	movs	r2, #10
 80008fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_SPI1_Init+0x64>)
 80008fe:	f003 fcef 	bl	80042e0 <HAL_SPI_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000908:	f000 f952 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000016c 	.word	0x2000016c
 8000914:	40013000 	.word	0x40013000

08000918 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092c:	463b      	mov	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000934:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <MX_TIM2_Init+0x98>)
 8000936:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800093a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 800093c:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_TIM2_Init+0x98>)
 800093e:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000942:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_TIM2_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <MX_TIM2_Init+0x98>)
 800094c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000950:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_TIM2_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_TIM2_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800095e:	4814      	ldr	r0, [pc, #80]	@ (80009b0 <MX_TIM2_Init+0x98>)
 8000960:	f003 ffcc 	bl	80048fc <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800096a:	f000 f921 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4619      	mov	r1, r3
 800097a:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <MX_TIM2_Init+0x98>)
 800097c:	f004 f876 	bl	8004a6c <HAL_TIM_ConfigClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000986:	f000 f913 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800098a:	2320      	movs	r3, #32
 800098c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	4806      	ldr	r0, [pc, #24]	@ (80009b0 <MX_TIM2_Init+0x98>)
 8000998:	f004 fa70 	bl	8004e7c <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009a2:	f000 f905 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200001c4 	.word	0x200001c4

080009b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <MX_UART4_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009ec:	f004 fac2 	bl	8004f74 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 f8db 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000020c 	.word	0x2000020c
 8000a04:	40004c00 	.word	0x40004c00

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b3b      	ldr	r3, [pc, #236]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a3a      	ldr	r2, [pc, #232]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b38      	ldr	r3, [pc, #224]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b34      	ldr	r3, [pc, #208]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a33      	ldr	r2, [pc, #204]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b31      	ldr	r3, [pc, #196]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b2a      	ldr	r3, [pc, #168]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a25      	ldr	r2, [pc, #148]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <MX_GPIO_Init+0x108>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2110      	movs	r1, #16
 8000a92:	4820      	ldr	r0, [pc, #128]	@ (8000b14 <MX_GPIO_Init+0x10c>)
 8000a94:	f002 ff8e 	bl	80039b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000a9e:	481e      	ldr	r0, [pc, #120]	@ (8000b18 <MX_GPIO_Init+0x110>)
 8000aa0:	f002 ff88 	bl	80039b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4816      	ldr	r0, [pc, #88]	@ (8000b14 <MX_GPIO_Init+0x10c>)
 8000aba:	f002 fddf 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000abe:	2310      	movs	r3, #16
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480f      	ldr	r0, [pc, #60]	@ (8000b14 <MX_GPIO_Init+0x10c>)
 8000ad6:	f002 fdd1 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ada:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <MX_GPIO_Init+0x110>)
 8000af4:	f002 fdc2 	bl	800367c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2006      	movs	r0, #6
 8000afe:	f001 fb36 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b02:	2006      	movs	r0, #6
 8000b04:	f001 fb4f 	bl	80021a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	@ 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020c00 	.word	0x40020c00

08000b1c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1c      	ldr	r2, [pc, #112]	@ (8000b9c <HAL_ADC_ConvCpltCallback+0x80>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d132      	bne.n	8000b94 <HAL_ADC_ConvCpltCallback+0x78>
    {
        uint32_t raw = HAL_ADC_GetValue(hadc);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 fff8 	bl	8001b24 <HAL_ADC_GetValue>
 8000b34:	6178      	str	r0, [r7, #20]

        float Vsense = ((float)raw) * 3.3f / 4095.0f;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	ee07 3a90 	vmov	s15, r3
 8000b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b40:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000ba0 <HAL_ADC_ConvCpltCallback+0x84>
 8000b44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b48:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000ba4 <HAL_ADC_ConvCpltCallback+0x88>
 8000b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b50:	edc7 7a04 	vstr	s15, [r7, #16]
        float temperature = ((Vsense - 0.76f) / 0.0025f) + 25.0f;
 8000b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b58:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000ba8 <HAL_ADC_ConvCpltCallback+0x8c>
 8000b5c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b60:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000bac <HAL_ADC_ConvCpltCallback+0x90>
 8000b64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b68:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000b6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b70:	edc7 7a03 	vstr	s15, [r7, #12]

        uint16_t temp_scaled = (uint16_t)(temperature * 10.0f);
 8000b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b78:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b84:	ee17 3a90 	vmov	r3, s15
 8000b88:	817b      	strh	r3, [r7, #10]

        Modbus_SetHolding(1, temp_scaled);
 8000b8a:	897b      	ldrh	r3, [r7, #10]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f010 fe38 	bl	8011804 <Modbus_SetHolding>
    }
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40012000 	.word	0x40012000
 8000ba0:	40533333 	.word	0x40533333
 8000ba4:	457ff000 	.word	0x457ff000
 8000ba8:	3f428f5c 	.word	0x3f428f5c
 8000bac:	3b23d70a 	.word	0x3b23d70a

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <Error_Handler+0x8>

08000bbc <SPI_CS_Low>:
static uint8_t rxBuffer[SPI_RX_BUFFER_SIZE];

/* ----------------------------------------------------------------
 * Low-level SPI helpers
 * ----------------------------------------------------------------*/
static inline void SPI_CS_Low(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <SPI_CS_Low+0x14>)
 8000bc6:	f002 fef5 	bl	80039b4 <HAL_GPIO_WritePin>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <SPI_CS_High>:

static inline void SPI_CS_High(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <SPI_CS_High+0x14>)
 8000bde:	f002 fee9 	bl	80039b4 <HAL_GPIO_WritePin>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40020000 	.word	0x40020000

08000bec <SPI_SendCommand>:

/* Send command and receive response */
static HAL_StatusTypeDef SPI_SendCommand(const char *cmd, char *response, uint16_t respSize) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint16_t cmdLen = strlen(cmd);
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f7ff fae8 	bl	80001d0 <strlen>
 8000c00:	4603      	mov	r3, r0
 8000c02:	82fb      	strh	r3, [r7, #22]

    if (cmdLen >= SPI_TX_BUFFER_SIZE) {
 8000c04:	8afb      	ldrh	r3, [r7, #22]
 8000c06:	2b1f      	cmp	r3, #31
 8000c08:	d901      	bls.n	8000c0e <SPI_SendCommand+0x22>
        return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e035      	b.n	8000c7a <SPI_SendCommand+0x8e>
    }

    /* Prepare TX buffer */
    memset(txBuffer, 0, SPI_TX_BUFFER_SIZE);
 8000c0e:	2220      	movs	r2, #32
 8000c10:	2100      	movs	r1, #0
 8000c12:	481c      	ldr	r0, [pc, #112]	@ (8000c84 <SPI_SendCommand+0x98>)
 8000c14:	f011 fb65 	bl	80122e2 <memset>
    memset(rxBuffer, 0, SPI_RX_BUFFER_SIZE);
 8000c18:	2220      	movs	r2, #32
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	481a      	ldr	r0, [pc, #104]	@ (8000c88 <SPI_SendCommand+0x9c>)
 8000c1e:	f011 fb60 	bl	80122e2 <memset>
    strcpy((char *)txBuffer, cmd);
 8000c22:	68f9      	ldr	r1, [r7, #12]
 8000c24:	4817      	ldr	r0, [pc, #92]	@ (8000c84 <SPI_SendCommand+0x98>)
 8000c26:	f011 fbf6 	bl	8012416 <strcpy>

    /* SPI transaction */
    SPI_CS_Low();
 8000c2a:	f7ff ffc7 	bl	8000bbc <SPI_CS_Low>
    HAL_Delay(1); // Small delay for slave to detect CS
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f000 fd22 	bl	8001678 <HAL_Delay>

    status = HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer,
 8000c34:	2364      	movs	r3, #100	@ 0x64
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	2320      	movs	r3, #32
 8000c3a:	4a13      	ldr	r2, [pc, #76]	@ (8000c88 <SPI_SendCommand+0x9c>)
 8000c3c:	4911      	ldr	r1, [pc, #68]	@ (8000c84 <SPI_SendCommand+0x98>)
 8000c3e:	4813      	ldr	r0, [pc, #76]	@ (8000c8c <SPI_SendCommand+0xa0>)
 8000c40:	f003 fbd7 	bl	80043f2 <HAL_SPI_TransmitReceive>
 8000c44:	4603      	mov	r3, r0
 8000c46:	757b      	strb	r3, [r7, #21]
                                     SPI_TX_BUFFER_SIZE, SPI_TIMEOUT_MS);

    HAL_Delay(1); // Small delay before releasing CS
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 fd15 	bl	8001678 <HAL_Delay>
    SPI_CS_High();
 8000c4e:	f7ff ffc1 	bl	8000bd4 <SPI_CS_High>

    if (status == HAL_OK && response != NULL) {
 8000c52:	7d7b      	ldrb	r3, [r7, #21]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10f      	bne.n	8000c78 <SPI_SendCommand+0x8c>
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00c      	beq.n	8000c78 <SPI_SendCommand+0x8c>
        /* Copy response */
        strncpy(response, (char *)rxBuffer, respSize - 1);
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	461a      	mov	r2, r3
 8000c64:	4908      	ldr	r1, [pc, #32]	@ (8000c88 <SPI_SendCommand+0x9c>)
 8000c66:	68b8      	ldr	r0, [r7, #8]
 8000c68:	f011 fb55 	bl	8012316 <strncpy>
        response[respSize - 1] = '\0';
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	4413      	add	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8000c78:	7d7b      	ldrb	r3, [r7, #21]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000294 	.word	0x20000294
 8000c88:	200002b4 	.word	0x200002b4
 8000c8c:	2000016c 	.word	0x2000016c

08000c90 <SPI_Protocol_Init>:

/* ----------------------------------------------------------------
 * Public API
 * ----------------------------------------------------------------*/

void SPI_Protocol_Init(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    /* Initialize CS pin high (inactive) */
    HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2110      	movs	r1, #16
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <SPI_Protocol_Init+0x14>)
 8000c9a:	f002 fe8b 	bl	80039b4 <HAL_GPIO_WritePin>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <SPI_SetLED>:

SPI_Result SPI_SetLED(SPI_LED_Color color, uint8_t state) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	@ 0x38
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
    char cmd[16];
    char response[16];
    char colorChar;

    /* Map color to character */
    switch (color) {
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d820      	bhi.n	8000d00 <SPI_SetLED+0x58>
 8000cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc4 <SPI_SetLED+0x1c>)
 8000cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc4:	08000cd9 	.word	0x08000cd9
 8000cc8:	08000ce1 	.word	0x08000ce1
 8000ccc:	08000ce9 	.word	0x08000ce9
 8000cd0:	08000cf1 	.word	0x08000cf1
 8000cd4:	08000cf9 	.word	0x08000cf9
        case SPI_LED_GREEN:  colorChar = 'G'; break;
 8000cd8:	2347      	movs	r3, #71	@ 0x47
 8000cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cde:	e011      	b.n	8000d04 <SPI_SetLED+0x5c>
        case SPI_LED_ORANGE: colorChar = 'O'; break;
 8000ce0:	234f      	movs	r3, #79	@ 0x4f
 8000ce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ce6:	e00d      	b.n	8000d04 <SPI_SetLED+0x5c>
        case SPI_LED_RED:    colorChar = 'R'; break;
 8000ce8:	2352      	movs	r3, #82	@ 0x52
 8000cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cee:	e009      	b.n	8000d04 <SPI_SetLED+0x5c>
        case SPI_LED_BLUE:   colorChar = 'B'; break;
 8000cf0:	2342      	movs	r3, #66	@ 0x42
 8000cf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cf6:	e005      	b.n	8000d04 <SPI_SetLED+0x5c>
        case SPI_LED_ALL:    colorChar = 'A'; break;
 8000cf8:	2341      	movs	r3, #65	@ 0x41
 8000cfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cfe:	e001      	b.n	8000d04 <SPI_SetLED+0x5c>
        default: return SPI_RESULT_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e029      	b.n	8000d58 <SPI_SetLED+0xb0>
    }

    /* Build command: LED:G1\n */
    snprintf(cmd, sizeof(cmd), "LED:%c%d\n", colorChar, state ? 1 : 0);
 8000d04:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000d08:	79bb      	ldrb	r3, [r7, #6]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bf14      	ite	ne
 8000d0e:	2301      	movne	r3, #1
 8000d10:	2300      	moveq	r3, #0
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f107 001c 	add.w	r0, r7, #28
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <SPI_SetLED+0xb8>)
 8000d1e:	2110      	movs	r1, #16
 8000d20:	f011 fa3c 	bl	801219c <sniprintf>

    /* Send command */
    if (SPI_SendCommand(cmd, response, sizeof(response)) != HAL_OK) {
 8000d24:	f107 010c 	add.w	r1, r7, #12
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff5c 	bl	8000bec <SPI_SendCommand>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SPI_SetLED+0x96>
        return SPI_RESULT_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00c      	b.n	8000d58 <SPI_SetLED+0xb0>
    }

    /* Check response */
    if (strncmp(response, "OK", 2) == 0) {
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	2202      	movs	r2, #2
 8000d44:	4907      	ldr	r1, [pc, #28]	@ (8000d64 <SPI_SetLED+0xbc>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f011 fad3 	bl	80122f2 <strncmp>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <SPI_SetLED+0xae>
        return SPI_RESULT_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <SPI_SetLED+0xb0>
    }

    return SPI_RESULT_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3730      	adds	r7, #48	@ 0x30
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	080133e8 	.word	0x080133e8
 8000d64:	080133f4 	.word	0x080133f4

08000d68 <SPI_GetLEDStatus>:

SPI_Result SPI_GetLEDStatus(uint8_t *green, uint8_t *orange, uint8_t *red, uint8_t *blue) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	603b      	str	r3, [r7, #0]
    char response[16];

    /* Send GET:LED command */
    if (SPI_SendCommand("GET:LED\n", response, sizeof(response)) != HAL_OK) {
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	2210      	movs	r2, #16
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4823      	ldr	r0, [pc, #140]	@ (8000e0c <SPI_GetLEDStatus+0xa4>)
 8000d80:	f7ff ff34 	bl	8000bec <SPI_SendCommand>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SPI_GetLEDStatus+0x26>
        return SPI_RESULT_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e03a      	b.n	8000e04 <SPI_GetLEDStatus+0x9c>
    }

    /* Parse response: STA:GORB\n where each letter is 0 or 1 */
    if (strncmp(response, "STA:", 4) != 0) {
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	2204      	movs	r2, #4
 8000d94:	491e      	ldr	r1, [pc, #120]	@ (8000e10 <SPI_GetLEDStatus+0xa8>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f011 faab 	bl	80122f2 <strncmp>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SPI_GetLEDStatus+0x3e>
        return SPI_RESULT_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e02e      	b.n	8000e04 <SPI_GetLEDStatus+0x9c>
    }

    if (strlen(response) < 8) {
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fa10 	bl	80001d0 <strlen>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b07      	cmp	r3, #7
 8000db4:	d801      	bhi.n	8000dba <SPI_GetLEDStatus+0x52>
        return SPI_RESULT_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e024      	b.n	8000e04 <SPI_GetLEDStatus+0x9c>
    }

    /* Extract LED states */
    *green  = (response[4] == '1') ? 1 : 0;
 8000dba:	7d3b      	ldrb	r3, [r7, #20]
 8000dbc:	2b31      	cmp	r3, #49	@ 0x31
 8000dbe:	bf0c      	ite	eq
 8000dc0:	2301      	moveq	r3, #1
 8000dc2:	2300      	movne	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	701a      	strb	r2, [r3, #0]
    *orange = (response[5] == '1') ? 1 : 0;
 8000dcc:	7d7b      	ldrb	r3, [r7, #21]
 8000dce:	2b31      	cmp	r3, #49	@ 0x31
 8000dd0:	bf0c      	ite	eq
 8000dd2:	2301      	moveq	r3, #1
 8000dd4:	2300      	movne	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	461a      	mov	r2, r3
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	701a      	strb	r2, [r3, #0]
    *red    = (response[6] == '1') ? 1 : 0;
 8000dde:	7dbb      	ldrb	r3, [r7, #22]
 8000de0:	2b31      	cmp	r3, #49	@ 0x31
 8000de2:	bf0c      	ite	eq
 8000de4:	2301      	moveq	r3, #1
 8000de6:	2300      	movne	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	701a      	strb	r2, [r3, #0]
    *blue   = (response[7] == '1') ? 1 : 0;
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	2b31      	cmp	r3, #49	@ 0x31
 8000df4:	bf0c      	ite	eq
 8000df6:	2301      	moveq	r3, #1
 8000df8:	2300      	movne	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	701a      	strb	r2, [r3, #0]

    return SPI_RESULT_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3720      	adds	r7, #32
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	080133f8 	.word	0x080133f8
 8000e10:	08013404 	.word	0x08013404

08000e14 <SPI_HandleModbusCoilWrite>:
 * Coils 0-3: Bridge LEDs (local)
 * Coils 4-7: Slave LEDs (via SPI)
 */
#define SPI_COIL_OFFSET 4

void SPI_HandleModbusCoilWrite(USHORT coilIndex, UCHAR value) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	80fb      	strh	r3, [r7, #6]
 8000e20:	4613      	mov	r3, r2
 8000e22:	717b      	strb	r3, [r7, #5]
    if (coilIndex < SPI_COIL_OFFSET || coilIndex >= SPI_COIL_OFFSET + 4) {
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d927      	bls.n	8000e7a <SPI_HandleModbusCoilWrite+0x66>
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	2b07      	cmp	r3, #7
 8000e2e:	d824      	bhi.n	8000e7a <SPI_HandleModbusCoilWrite+0x66>
        return; // Not an SPI coil
    }

    SPI_LED_Color color;
    USHORT localIndex = coilIndex - SPI_COIL_OFFSET;
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	3b04      	subs	r3, #4
 8000e34:	81bb      	strh	r3, [r7, #12]

    switch (localIndex) {
 8000e36:	89bb      	ldrh	r3, [r7, #12]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d820      	bhi.n	8000e7e <SPI_HandleModbusCoilWrite+0x6a>
 8000e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e44 <SPI_HandleModbusCoilWrite+0x30>)
 8000e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e42:	bf00      	nop
 8000e44:	08000e55 	.word	0x08000e55
 8000e48:	08000e5b 	.word	0x08000e5b
 8000e4c:	08000e61 	.word	0x08000e61
 8000e50:	08000e67 	.word	0x08000e67
        case 0: color = SPI_LED_GREEN; break;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	e008      	b.n	8000e6c <SPI_HandleModbusCoilWrite+0x58>
        case 1: color = SPI_LED_ORANGE; break;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e005      	b.n	8000e6c <SPI_HandleModbusCoilWrite+0x58>
        case 2: color = SPI_LED_RED; break;
 8000e60:	2302      	movs	r3, #2
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e002      	b.n	8000e6c <SPI_HandleModbusCoilWrite+0x58>
        case 3: color = SPI_LED_BLUE; break;
 8000e66:	2303      	movs	r3, #3
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	bf00      	nop
        default: return;
    }

    SPI_SetLED(color, value);
 8000e6c:	797a      	ldrb	r2, [r7, #5]
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff18 	bl	8000ca8 <SPI_SetLED>
 8000e78:	e002      	b.n	8000e80 <SPI_HandleModbusCoilWrite+0x6c>
        return; // Not an SPI coil
 8000e7a:	bf00      	nop
 8000e7c:	e000      	b.n	8000e80 <SPI_HandleModbusCoilWrite+0x6c>
        default: return;
 8000e7e:	bf00      	nop
}
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop

08000e88 <SPI_TurnOffAllLEDs>:
        }
    }
}

/* Special command handler for "turn off all LEDs" via holding register */
void SPI_TurnOffAllLEDs(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
    SPI_SetLED(SPI_LED_ALL, 0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f7ff ff0a 	bl	8000ca8 <SPI_SetLED>
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <SPI_TurnOnAllLEDs>:

void SPI_TurnOnAllLEDs(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    SPI_SetLED(SPI_LED_ALL, 1);
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2004      	movs	r0, #4
 8000ea0:	f7ff ff02 	bl	8000ca8 <SPI_SetLED>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <HAL_ADC_MspInit+0x48>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d115      	bne.n	8000f36 <HAL_ADC_MspInit+0x3e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <HAL_ADC_MspInit+0x4c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <HAL_ADC_MspInit+0x4c>)
 8000f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_ADC_MspInit+0x4c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2012      	movs	r0, #18
 8000f2c:	f001 f91f 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f30:	2012      	movs	r0, #18
 8000f32:	f001 f938 	bl	80021a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40012000 	.word	0x40012000
 8000f44:	40023800 	.word	0x40023800

08000f48 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	@ 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a28      	ldr	r2, [pc, #160]	@ (8001008 <HAL_SPI_MspInit+0xc0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d149      	bne.n	8000ffe <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b27      	ldr	r3, [pc, #156]	@ (800100c <HAL_SPI_MspInit+0xc4>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	4a26      	ldr	r2, [pc, #152]	@ (800100c <HAL_SPI_MspInit+0xc4>)
 8000f74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7a:	4b24      	ldr	r3, [pc, #144]	@ (800100c <HAL_SPI_MspInit+0xc4>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b20      	ldr	r3, [pc, #128]	@ (800100c <HAL_SPI_MspInit+0xc4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800100c <HAL_SPI_MspInit+0xc4>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <HAL_SPI_MspInit+0xc4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b19      	ldr	r3, [pc, #100]	@ (800100c <HAL_SPI_MspInit+0xc4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a18      	ldr	r2, [pc, #96]	@ (800100c <HAL_SPI_MspInit+0xc4>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b16      	ldr	r3, [pc, #88]	@ (800100c <HAL_SPI_MspInit+0xc4>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fbe:	2360      	movs	r3, #96	@ 0x60
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480d      	ldr	r0, [pc, #52]	@ (8001010 <HAL_SPI_MspInit+0xc8>)
 8000fda:	f002 fb4f 	bl	800367c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4806      	ldr	r0, [pc, #24]	@ (8001014 <HAL_SPI_MspInit+0xcc>)
 8000ffa:	f002 fb3f 	bl	800367c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	@ 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40013000 	.word	0x40013000
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400

08001018 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001028:	d10d      	bne.n	8001046 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <HAL_TIM_Base_MspInit+0x3c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	4a08      	ldr	r2, [pc, #32]	@ (8001054 <HAL_TIM_Base_MspInit+0x3c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6413      	str	r3, [r2, #64]	@ 0x40
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_TIM_Base_MspInit+0x3c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a19      	ldr	r2, [pc, #100]	@ (80010dc <HAL_UART_MspInit+0x84>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d12c      	bne.n	80010d4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 8001084:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001088:	6413      	str	r3, [r2, #64]	@ 0x40
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010c4:	2308      	movs	r3, #8
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <HAL_UART_MspInit+0x8c>)
 80010d0:	f002 fad4 	bl	800367c <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	@ 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40004c00 	.word	0x40004c00
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020800 	.word	0x40020800

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <NMI_Handler+0x4>

080010f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MemManage_Handler+0x4>

08001100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <UsageFault_Handler+0x4>

08001110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113e:	f000 fa7b 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}

08001146 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800114a:	2001      	movs	r0, #1
 800114c:	f002 fc4c 	bl	80039e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <ADC_IRQHandler+0x10>)
 800115a:	f000 fbd3 	bl	8001904 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000124 	.word	0x20000124

08001168 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <ETH_IRQHandler+0x10>)
 800116e:	f001 fb97 	bl	80028a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20004df8 	.word	0x20004df8

0800117c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return 1;
 8001180:	2301      	movs	r3, #1
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_kill>:

int _kill(int pid, int sig)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <_kill+0x20>)
 8001198:	2216      	movs	r2, #22
 800119a:	601a      	str	r2, [r3, #0]
  return -1;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20008770 	.word	0x20008770

080011b0 <_exit>:

void _exit (int status)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ffe5 	bl	800118c <_kill>
  while (1) {}    /* Make sure we hang here */
 80011c2:	bf00      	nop
 80011c4:	e7fd      	b.n	80011c2 <_exit+0x12>

080011c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e00a      	b.n	80011ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011d8:	f3af 8000 	nop.w
 80011dc:	4601      	mov	r1, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	60ba      	str	r2, [r7, #8]
 80011e4:	b2ca      	uxtb	r2, r1
 80011e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbf0      	blt.n	80011d8 <_read+0x12>
  }

  return len;
 80011f6:	687b      	ldr	r3, [r7, #4]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e009      	b.n	8001226 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	60ba      	str	r2, [r7, #8]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	dbf1      	blt.n	8001212 <_write+0x12>
  }
  return len;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_close>:

int _close(int file)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001260:	605a      	str	r2, [r3, #4]
  return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_isatty>:

int _isatty(int file)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d205      	bcs.n	80012dc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <_sbrk+0x6c>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	20020000 	.word	0x20020000
 8001300:	00000400 	.word	0x00000400
 8001304:	200002d4 	.word	0x200002d4
 8001308:	20008780 	.word	0x20008780
 800130c:	20008770 	.word	0x20008770

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800136c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001338:	f7ff ffea 	bl	8001310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	@ (8001374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	@ (8001380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001362:	f011 f831 	bl	80123c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001366:	f7ff f921 	bl	80005ac <main>
  bx  lr    
 800136a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800136c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001378:	080161b4 	.word	0x080161b4
  ldr r2, =_sbss
 800137c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001380:	20008780 	.word	0x20008780

08001384 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <CAN1_RX0_IRQHandler>

08001386 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <LAN8742_RegisterBusIO+0x28>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <LAN8742_RegisterBusIO+0x28>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <LAN8742_RegisterBusIO+0x28>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	e014      	b.n	80013de <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d139      	bne.n	800147a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2220      	movs	r2, #32
 8001418:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e01c      	b.n	800145a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f107 020c 	add.w	r2, r7, #12
 8001428:	2112      	movs	r1, #18
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	4798      	blx	r3
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	da03      	bge.n	800143c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001434:	f06f 0304 	mvn.w	r3, #4
 8001438:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800143a:	e00b      	b.n	8001454 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	d105      	bne.n	8001454 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
         break;
 8001452:	e005      	b.n	8001460 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b1f      	cmp	r3, #31
 800145e:	d9df      	bls.n	8001420 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b1f      	cmp	r3, #31
 8001466:	d902      	bls.n	800146e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001468:	f06f 0302 	mvn.w	r3, #2
 800146c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800147a:	693b      	ldr	r3, [r7, #16]
 }
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6810      	ldr	r0, [r2, #0]
 8001498:	f107 020c 	add.w	r2, r7, #12
 800149c:	2101      	movs	r1, #1
 800149e:	4798      	blx	r3
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da02      	bge.n	80014ac <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014a6:	f06f 0304 	mvn.w	r3, #4
 80014aa:	e06e      	b.n	800158a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6810      	ldr	r0, [r2, #0]
 80014b4:	f107 020c 	add.w	r2, r7, #12
 80014b8:	2101      	movs	r1, #1
 80014ba:	4798      	blx	r3
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da02      	bge.n	80014c8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014c2:	f06f 0304 	mvn.w	r3, #4
 80014c6:	e060      	b.n	800158a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e059      	b.n	800158a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6810      	ldr	r0, [r2, #0]
 80014de:	f107 020c 	add.w	r2, r7, #12
 80014e2:	2100      	movs	r1, #0
 80014e4:	4798      	blx	r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da02      	bge.n	80014f2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014ec:	f06f 0304 	mvn.w	r3, #4
 80014f0:	e04b      	b.n	800158a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d11b      	bne.n	8001534 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <LAN8742_GetLinkState+0x90>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001510:	2302      	movs	r3, #2
 8001512:	e03a      	b.n	800158a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800151e:	2303      	movs	r3, #3
 8001520:	e033      	b.n	800158a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800152c:	2304      	movs	r3, #4
 800152e:	e02c      	b.n	800158a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001530:	2305      	movs	r3, #5
 8001532:	e02a      	b.n	800158a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6810      	ldr	r0, [r2, #0]
 800153c:	f107 020c 	add.w	r2, r7, #12
 8001540:	211f      	movs	r1, #31
 8001542:	4798      	blx	r3
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	da02      	bge.n	8001550 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800154a:	f06f 0304 	mvn.w	r3, #4
 800154e:	e01c      	b.n	800158a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800155a:	2306      	movs	r3, #6
 800155c:	e015      	b.n	800158a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f003 031c 	and.w	r3, r3, #28
 8001564:	2b18      	cmp	r3, #24
 8001566:	d101      	bne.n	800156c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001568:	2302      	movs	r3, #2
 800156a:	e00e      	b.n	800158a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 031c 	and.w	r3, r3, #28
 8001572:	2b08      	cmp	r3, #8
 8001574:	d101      	bne.n	800157a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001576:	2303      	movs	r3, #3
 8001578:	e007      	b.n	800158a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f003 031c 	and.w	r3, r3, #28
 8001580:	2b14      	cmp	r3, #20
 8001582:	d101      	bne.n	8001588 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001584:	2304      	movs	r3, #4
 8001586:	e000      	b.n	800158a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001588:	2305      	movs	r3, #5
    }
  }
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001598:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <HAL_Init+0x40>)
 800159e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a4:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <HAL_Init+0x40>)
 80015aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	@ (80015d4 <HAL_Init+0x40>)
 80015b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 fdcb 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c2:	200f      	movs	r0, #15
 80015c4:	f000 f808 	bl	80015d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f7ff fc6e 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_InitTick+0x54>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_InitTick+0x58>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fde3 	bl	80021c2 <HAL_SYSTICK_Config>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00e      	b.n	8001624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d80a      	bhi.n	8001622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f000 fdab 	bl	800216e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001618:	4a06      	ldr	r2, [pc, #24]	@ (8001634 <HAL_InitTick+0x5c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000000 	.word	0x20000000
 8001630:	20000008 	.word	0x20000008
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	@ (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008
 800165c:	200002d8 	.word	0x200002d8

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200002d8 	.word	0x200002d8

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008

080016c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e033      	b.n	800173e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fc0a 	bl	8000ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001706:	f023 0302 	bic.w	r3, r3, #2
 800170a:	f043 0202 	orr.w	r2, r3, #2
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fb4a 	bl	8001dac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f023 0303 	bic.w	r3, r3, #3
 8001726:	f043 0201 	orr.w	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	641a      	str	r2, [r3, #64]	@ 0x40
 800172e:	e001      	b.n	8001734 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Start_IT+0x1a>
 800175e:	2302      	movs	r3, #2
 8001760:	e0bd      	b.n	80018de <HAL_ADC_Start_IT+0x196>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d018      	beq.n	80017aa <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001788:	4b58      	ldr	r3, [pc, #352]	@ (80018ec <HAL_ADC_Start_IT+0x1a4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a58      	ldr	r2, [pc, #352]	@ (80018f0 <HAL_ADC_Start_IT+0x1a8>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9a      	lsrs	r2, r3, #18
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800179c:	e002      	b.n	80017a4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f9      	bne.n	800179e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	f040 8085 	bne.w	80018c4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017f8:	d106      	bne.n	8001808 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fe:	f023 0206 	bic.w	r2, r3, #6
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	645a      	str	r2, [r3, #68]	@ 0x44
 8001806:	e002      	b.n	800180e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001816:	4b37      	ldr	r3, [pc, #220]	@ (80018f4 <HAL_ADC_Start_IT+0x1ac>)
 8001818:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001822:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001832:	f043 0320 	orr.w	r3, r3, #32
 8001836:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	2b00      	cmp	r3, #0
 8001842:	d12a      	bne.n	800189a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a2b      	ldr	r2, [pc, #172]	@ (80018f8 <HAL_ADC_Start_IT+0x1b0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d015      	beq.n	800187a <HAL_ADC_Start_IT+0x132>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a2a      	ldr	r2, [pc, #168]	@ (80018fc <HAL_ADC_Start_IT+0x1b4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d105      	bne.n	8001864 <HAL_ADC_Start_IT+0x11c>
 8001858:	4b26      	ldr	r3, [pc, #152]	@ (80018f4 <HAL_ADC_Start_IT+0x1ac>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00a      	beq.n	800187a <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a25      	ldr	r2, [pc, #148]	@ (8001900 <HAL_ADC_Start_IT+0x1b8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d136      	bne.n	80018dc <HAL_ADC_Start_IT+0x194>
 800186e:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <HAL_ADC_Start_IT+0x1ac>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	d130      	bne.n	80018dc <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d129      	bne.n	80018dc <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	e020      	b.n	80018dc <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a16      	ldr	r2, [pc, #88]	@ (80018f8 <HAL_ADC_Start_IT+0x1b0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d11b      	bne.n	80018dc <HAL_ADC_Start_IT+0x194>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d114      	bne.n	80018dc <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	e00b      	b.n	80018dc <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f043 0210 	orr.w	r2, r3, #16
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000000 	.word	0x20000000
 80018f0:	431bde83 	.word	0x431bde83
 80018f4:	40012300 	.word	0x40012300
 80018f8:	40012000 	.word	0x40012000
 80018fc:	40012100 	.word	0x40012100
 8001900:	40012200 	.word	0x40012200

08001904 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f003 0320 	and.w	r3, r3, #32
 8001932:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d049      	beq.n	80019ce <HAL_ADC_IRQHandler+0xca>
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d046      	beq.n	80019ce <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d12b      	bne.n	80019be <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800196a:	2b00      	cmp	r3, #0
 800196c:	d127      	bne.n	80019be <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001986:	2b00      	cmp	r3, #0
 8001988:	d119      	bne.n	80019be <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0220 	bic.w	r2, r2, #32
 8001998:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d105      	bne.n	80019be <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff f8ac 	bl	8000b1c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f06f 0212 	mvn.w	r2, #18
 80019cc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d057      	beq.n	8001a94 <HAL_ADC_IRQHandler+0x190>
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d054      	beq.n	8001a94 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d139      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a16:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d12b      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d124      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d11d      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d119      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a5e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fa8d 	bl	8001fa4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f06f 020c 	mvn.w	r2, #12
 8001a92:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d017      	beq.n	8001ada <HAL_ADC_IRQHandler+0x1d6>
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d014      	beq.n	8001ada <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d10d      	bne.n	8001ada <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f837 	bl	8001b3e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f06f 0201 	mvn.w	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ae8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d015      	beq.n	8001b1c <HAL_ADC_IRQHandler+0x218>
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d012      	beq.n	8001b1c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f043 0202 	orr.w	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f06f 0220 	mvn.w	r2, #32
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f820 	bl	8001b52 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f06f 0220 	mvn.w	r2, #32
 8001b1a:	601a      	str	r2, [r3, #0]
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1c>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e105      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x228>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	d925      	bls.n	8001be0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68d9      	ldr	r1, [r3, #12]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b1e      	subs	r3, #30
 8001baa:	2207      	movs	r2, #7
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68d9      	ldr	r1, [r3, #12]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4603      	mov	r3, r0
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4403      	add	r3, r0
 8001bd2:	3b1e      	subs	r3, #30
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	e022      	b.n	8001c26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6919      	ldr	r1, [r3, #16]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	400a      	ands	r2, r1
 8001c02:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6919      	ldr	r1, [r3, #16]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4403      	add	r3, r0
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d824      	bhi.n	8001c78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b05      	subs	r3, #5
 8001c40:	221f      	movs	r2, #31
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	3b05      	subs	r3, #5
 8001c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c76:	e04c      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b0c      	cmp	r3, #12
 8001c7e:	d824      	bhi.n	8001cca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b23      	subs	r3, #35	@ 0x23
 8001c92:	221f      	movs	r2, #31
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b23      	subs	r3, #35	@ 0x23
 8001cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cc8:	e023      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b41      	subs	r3, #65	@ 0x41
 8001cdc:	221f      	movs	r2, #31
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	400a      	ands	r2, r1
 8001cea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	3b41      	subs	r3, #65	@ 0x41
 8001d06:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d12:	4b22      	ldr	r3, [pc, #136]	@ (8001d9c <HAL_ADC_ConfigChannel+0x234>)
 8001d14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a21      	ldr	r2, [pc, #132]	@ (8001da0 <HAL_ADC_ConfigChannel+0x238>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d109      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1cc>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b12      	cmp	r3, #18
 8001d26:	d105      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a19      	ldr	r2, [pc, #100]	@ (8001da0 <HAL_ADC_ConfigChannel+0x238>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d123      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x21e>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d003      	beq.n	8001d4e <HAL_ADC_ConfigChannel+0x1e6>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b11      	cmp	r3, #17
 8001d4c:	d11b      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d111      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <HAL_ADC_ConfigChannel+0x23c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a10      	ldr	r2, [pc, #64]	@ (8001da8 <HAL_ADC_ConfigChannel+0x240>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	0c9a      	lsrs	r2, r3, #18
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d78:	e002      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f9      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40012300 	.word	0x40012300
 8001da0:	40012000 	.word	0x40012000
 8001da4:	20000000 	.word	0x20000000
 8001da8:	431bde83 	.word	0x431bde83

08001dac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db4:	4b79      	ldr	r3, [pc, #484]	@ (8001f9c <ADC_Init+0x1f0>)
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	021a      	lsls	r2, r3, #8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6899      	ldr	r1, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3e:	4a58      	ldr	r2, [pc, #352]	@ (8001fa0 <ADC_Init+0x1f4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d022      	beq.n	8001e8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6899      	ldr	r1, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e00f      	b.n	8001eaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ea8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0202 	bic.w	r2, r2, #2
 8001eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7e1b      	ldrb	r3, [r3, #24]
 8001ec4:	005a      	lsls	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ee6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ef6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6859      	ldr	r1, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	3b01      	subs	r3, #1
 8001f04:	035a      	lsls	r2, r3, #13
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	e007      	b.n	8001f20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f1e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	051a      	lsls	r2, r3, #20
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6899      	ldr	r1, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f62:	025a      	lsls	r2, r3, #9
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	029a      	lsls	r2, r3, #10
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40012300 	.word	0x40012300
 8001fa0:	0f000001 	.word	0x0f000001

08001fa4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db0b      	blt.n	8002046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4907      	ldr	r1, [pc, #28]	@ (8002054 <__NVIC_EnableIRQ+0x38>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2001      	movs	r0, #1
 800203e:	fa00 f202 	lsl.w	r2, r0, r2
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	@ (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	@ (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	@ 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff8e 	bl	8002058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff29 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff3e 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff8e 	bl	80020ac <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5d 	bl	8002058 <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff31 	bl	800201c <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa2 	bl	8002114 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e08a      	b.n	8002304 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f003 fdc7 	bl	8005d94 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b40      	ldr	r3, [pc, #256]	@ (800230c <HAL_ETH_Init+0x130>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	4a3f      	ldr	r2, [pc, #252]	@ (800230c <HAL_ETH_Init+0x130>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002214:	6453      	str	r3, [r2, #68]	@ 0x44
 8002216:	4b3d      	ldr	r3, [pc, #244]	@ (800230c <HAL_ETH_Init+0x130>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002222:	4b3b      	ldr	r3, [pc, #236]	@ (8002310 <HAL_ETH_Init+0x134>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a3a      	ldr	r2, [pc, #232]	@ (8002310 <HAL_ETH_Init+0x134>)
 8002228:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800222c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800222e:	4b38      	ldr	r3, [pc, #224]	@ (8002310 <HAL_ETH_Init+0x134>)
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4936      	ldr	r1, [pc, #216]	@ (8002310 <HAL_ETH_Init+0x134>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800223c:	4b34      	ldr	r3, [pc, #208]	@ (8002310 <HAL_ETH_Init+0x134>)
 800223e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002256:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002258:	f7ff fa02 	bl	8001660 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800225e:	e011      	b.n	8002284 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002260:	f7ff f9fe 	bl	8001660 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800226e:	d909      	bls.n	8002284 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2204      	movs	r2, #4
 8002274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	22e0      	movs	r2, #224	@ 0xe0
 800227c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e03f      	b.n	8002304 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e4      	bne.n	8002260 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 ff32 	bl	8003100 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 ffdd 	bl	800325c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f001 f833 	bl	800330e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	461a      	mov	r2, r3
 80022ae:	2100      	movs	r1, #0
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 ff9b 	bl	80031ec <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80022c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80022da:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80022ee:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2210      	movs	r2, #16
 80022fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	40013800 	.word	0x40013800

08002314 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002322:	2b10      	cmp	r3, #16
 8002324:	d161      	bne.n	80023ea <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2204      	movs	r2, #4
 8002338:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fa2c 	bl	8002798 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002348:	2001      	movs	r0, #1
 800234a:	f7ff f995 	bl	8001678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002368:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800236c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002384:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fd56 	bl	8002e38 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0208 	orr.w	r2, r2, #8
 800239a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7ff f967 	bl	8001678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0204 	orr.w	r2, r2, #4
 80023c0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80023d4:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80023d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023dc:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2240      	movs	r2, #64	@ 0x40
 80023e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
  }
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002402:	2b40      	cmp	r3, #64	@ 0x40
 8002404:	d170      	bne.n	80024e8 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002420:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8002424:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002428:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800243c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002440:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	f023 0302 	bic.w	r3, r3, #2
 8002454:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002458:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0204 	bic.w	r2, r2, #4
 8002468:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002472:	2001      	movs	r0, #1
 8002474:	f7ff f900 	bl	8001678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fcd9 	bl	8002e38 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0208 	bic.w	r2, r2, #8
 8002494:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800249e:	2001      	movs	r0, #1
 80024a0:	f7ff f8ea 	bl	8001678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	e00e      	b.n	80024d0 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	3212      	adds	r2, #18
 80024b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024bc:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3301      	adds	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d9ed      	bls.n	80024b2 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2210      	movs	r2, #16
 80024e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e000      	b.n	80024ea <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
  }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e07c      	b.n	8002612 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800251e:	2b40      	cmp	r3, #64	@ 0x40
 8002520:	d176      	bne.n	8002610 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002522:	2200      	movs	r2, #0
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 ff60 	bl	80033ec <ETH_Prepare_Tx_Descriptors>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002538:	f043 0202 	orr.w	r2, r3, #2
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e065      	b.n	8002612 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002546:	f3bf 8f4f 	dsb	sy
}
 800254a:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3206      	adds	r2, #6
 8002554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002558:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	2b03      	cmp	r3, #3
 800256a:	d904      	bls.n	8002576 <HAL_ETH_Transmit+0x84>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	1f1a      	subs	r2, r3, #4
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3106      	adds	r1, #6
 8002582:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002586:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800258a:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800258c:	f7ff f868 	bl	8001660 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002592:	e037      	b.n	8002604 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d011      	beq.n	80025ca <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ac:	f043 0208 	orr.w	r2, r3, #8
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e023      	b.n	8002612 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d018      	beq.n	8002604 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7ff f845 	bl	8001660 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d302      	bcc.n	80025e8 <HAL_ETH_Transmit+0xf6>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10d      	bne.n	8002604 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ee:	f043 0204 	orr.w	r2, r3, #4
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80025fe:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e006      	b.n	8002612 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	dbc3      	blt.n	8002594 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	e000      	b.n	8002612 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
  }
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b088      	sub	sp, #32
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0a4      	b.n	8002790 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800264c:	2b40      	cmp	r3, #64	@ 0x40
 800264e:	d001      	beq.n	8002654 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e09d      	b.n	8002790 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002658:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	3212      	adds	r2, #18
 8002660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002664:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800266a:	f1c3 0304 	rsb	r3, r3, #4
 800266e:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002670:	e066      	b.n	8002740 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	69da      	ldr	r2, [r3, #28]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <HAL_ETH_ReadData+0x88>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d03c      	beq.n	800271c <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80026c4:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026f6:	461a      	mov	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f003 fd02 	bl	8006104 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	441a      	add	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	3301      	adds	r3, #1
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d902      	bls.n	800272e <HAL_ETH_ReadData+0x114>
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	3b04      	subs	r3, #4
 800272c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	3212      	adds	r2, #18
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002744:	2b00      	cmp	r3, #0
 8002746:	db06      	blt.n	8002756 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d202      	bcs.n	8002756 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d08d      	beq.n	8002672 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	441a      	add	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f814 	bl	8002798 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d108      	bne.n	800278e <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
}
 8002790:	4618      	mov	r0, r3
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80027a4:	2301      	movs	r3, #1
 80027a6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	3212      	adds	r2, #18
 80027b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027be:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80027c0:	e044      	b.n	800284c <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d112      	bne.n	80027f0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80027ca:	f107 0308 	add.w	r3, r7, #8
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 fc68 	bl	80060a4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	74fb      	strb	r3, [r7, #19]
 80027de:	e007      	b.n	80027f0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	461a      	mov	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	461a      	mov	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d02a      	beq.n	800284c <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002806:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	6053      	str	r3, [r2, #4]
 800280e:	e005      	b.n	800281c <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d902      	bls.n	800283a <ETH_UpdateDescriptor+0xa2>
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	3b04      	subs	r3, #4
 8002838:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	3212      	adds	r2, #18
 8002840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002844:	617b      	str	r3, [r7, #20]
      desccount--;
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	3b01      	subs	r3, #1
 800284a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <ETH_UpdateDescriptor+0xc0>
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1b4      	bne.n	80027c2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	429a      	cmp	r2, r3
 8002860:	d01a      	beq.n	8002898 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3303      	adds	r3, #3
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800286c:	f3bf 8f5f 	dmb	sy
}
 8002870:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6919      	ldr	r1, [r3, #16]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	18ca      	adds	r2, r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800288a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002898:	bf00      	nop
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ae:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80028c8:	4b4b      	ldr	r3, [pc, #300]	@ (80029f8 <HAL_ETH_IRQHandler+0x158>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <HAL_ETH_IRQHandler+0x56>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b43      	ldr	r3, [pc, #268]	@ (80029fc <HAL_ETH_IRQHandler+0x15c>)
 80028ee:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f891 	bl	8002a18 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00f      	beq.n	8002920 <HAL_ETH_IRQHandler+0x80>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002912:	461a      	mov	r2, r3
 8002914:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002918:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f872 	bl	8002a04 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d042      	beq.n	80029b0 <HAL_ETH_IRQHandler+0x110>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d03d      	beq.n	80029b0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293a:	f043 0208 	orr.w	r2, r3, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01a      	beq.n	8002984 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	4b29      	ldr	r3, [pc, #164]	@ (8002a00 <HAL_ETH_IRQHandler+0x160>)
 800295a:	4013      	ands	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002974:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002978:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	22e0      	movs	r2, #224	@ 0xe0
 800297e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002982:	e012      	b.n	80029aa <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002992:	4013      	ands	r3, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a2:	461a      	mov	r2, r3
 80029a4:	f248 6380 	movw	r3, #34432	@ 0x8680
 80029a8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f83e 	bl	8002a2c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00e      	beq.n	80029d8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f838 	bl	8002a40 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d006      	beq.n	80029f0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80029e2:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <HAL_ETH_IRQHandler+0x158>)
 80029e4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80029e8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f832 	bl	8002a54 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80029f0:	bf00      	nop
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40013c00 	.word	0x40013c00
 80029fc:	00010040 	.word	0x00010040
 8002a00:	007e2000 	.word	0x007e2000

08002a04 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 031c 	and.w	r3, r3, #28
 8002a84:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	02db      	lsls	r3, r3, #11
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	019b      	lsls	r3, r3, #6
 8002a96:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0302 	bic.w	r3, r3, #2
 8002aa6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002ab8:	f7fe fdd2 	bl	8001660 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002abe:	e00d      	b.n	8002adc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002ac0:	f7fe fdce 	bl	8001660 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ace:	d301      	bcc.n	8002ad4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e010      	b.n	8002af6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ec      	bne.n	8002ac0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 031c 	and.w	r3, r3, #28
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	02db      	lsls	r3, r3, #11
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	019b      	lsls	r3, r3, #6
 8002b2c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b58:	f7fe fd82 	bl	8001660 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b5e:	e00d      	b.n	8002b7c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002b60:	f7fe fd7e 	bl	8001660 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b6e:	d301      	bcc.n	8002b74 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e009      	b.n	8002b88 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ec      	bne.n	8002b60 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0e6      	b.n	8002d72 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf14      	ite	ne
 8002cbe:	2301      	movne	r3, #1
 8002cc0:	2300      	moveq	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf0c      	ite	eq
 8002d0e:	2301      	moveq	r3, #1
 8002d10:	2300      	movne	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00b      	b.n	8002daa <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d105      	bne.n	8002da8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d9c:	6839      	ldr	r1, [r7, #0]
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f870 	bl	8002e84 <ETH_SetMACConfig>

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 031c 	bic.w	r3, r3, #28
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002dcc:	f001 fa54 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 8002dd0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4a14      	ldr	r2, [pc, #80]	@ (8002e28 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d804      	bhi.n	8002de4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	e019      	b.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4a11      	ldr	r2, [pc, #68]	@ (8002e2c <HAL_ETH_SetMDIOClockRange+0x78>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d204      	bcs.n	8002df6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f043 030c 	orr.w	r3, r3, #12
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e010      	b.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e30 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d90c      	bls.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4a0c      	ldr	r2, [pc, #48]	@ (8002e34 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d804      	bhi.n	8002e10 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e003      	b.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f043 0310 	orr.w	r3, r3, #16
 8002e16:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	02160ebf 	.word	0x02160ebf
 8002e2c:	03938700 	.word	0x03938700
 8002e30:	05f5e0ff 	.word	0x05f5e0ff
 8002e34:	08f0d17f 	.word	0x08f0d17f

08002e38 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e5a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f7fe fc05 	bl	8001678 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e78:	6193      	str	r3, [r2, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4b53      	ldr	r3, [pc, #332]	@ (8002fe8 <ETH_SetMACConfig+0x164>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	7b9b      	ldrb	r3, [r3, #14]
 8002ea2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	7c12      	ldrb	r2, [r2, #16]
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d102      	bne.n	8002eb2 <ETH_SetMACConfig+0x2e>
 8002eac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002eb0:	e000      	b.n	8002eb4 <ETH_SetMACConfig+0x30>
 8002eb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002eb4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	7c52      	ldrb	r2, [r2, #17]
 8002eba:	2a00      	cmp	r2, #0
 8002ebc:	d102      	bne.n	8002ec4 <ETH_SetMACConfig+0x40>
 8002ebe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002ec2:	e000      	b.n	8002ec6 <ETH_SetMACConfig+0x42>
 8002ec4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ec6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ecc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	7fdb      	ldrb	r3, [r3, #31]
 8002ed2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ed4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002eda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	7f92      	ldrb	r2, [r2, #30]
 8002ee0:	2a00      	cmp	r2, #0
 8002ee2:	d102      	bne.n	8002eea <ETH_SetMACConfig+0x66>
 8002ee4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ee8:	e000      	b.n	8002eec <ETH_SetMACConfig+0x68>
 8002eea:	2200      	movs	r2, #0
                        macconf->Speed |
 8002eec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	7f1b      	ldrb	r3, [r3, #28]
 8002ef2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ef4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002efa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	791b      	ldrb	r3, [r3, #4]
 8002f00:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f0a:	2a00      	cmp	r2, #0
 8002f0c:	d102      	bne.n	8002f14 <ETH_SetMACConfig+0x90>
 8002f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f12:	e000      	b.n	8002f16 <ETH_SetMACConfig+0x92>
 8002f14:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	7bdb      	ldrb	r3, [r3, #15]
 8002f1c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f1e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f2c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f46:	2001      	movs	r0, #1
 8002f48:	f7fe fb96 	bl	8001678 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002f62:	4013      	ands	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002f72:	2a00      	cmp	r2, #0
 8002f74:	d101      	bne.n	8002f7a <ETH_SetMACConfig+0xf6>
 8002f76:	2280      	movs	r2, #128	@ 0x80
 8002f78:	e000      	b.n	8002f7c <ETH_SetMACConfig+0xf8>
 8002f7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f7c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002f8a:	2a01      	cmp	r2, #1
 8002f8c:	d101      	bne.n	8002f92 <ETH_SetMACConfig+0x10e>
 8002f8e:	2208      	movs	r2, #8
 8002f90:	e000      	b.n	8002f94 <ETH_SetMACConfig+0x110>
 8002f92:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f94:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002f9c:	2a01      	cmp	r2, #1
 8002f9e:	d101      	bne.n	8002fa4 <ETH_SetMACConfig+0x120>
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	e000      	b.n	8002fa6 <ETH_SetMACConfig+0x122>
 8002fa4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fa6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002fae:	2a01      	cmp	r2, #1
 8002fb0:	d101      	bne.n	8002fb6 <ETH_SetMACConfig+0x132>
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	e000      	b.n	8002fb8 <ETH_SetMACConfig+0x134>
 8002fb6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7fe fb51 	bl	8001678 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	619a      	str	r2, [r3, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	fd20810f 	.word	0xfd20810f

08002fec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4b3d      	ldr	r3, [pc, #244]	@ (80030fc <ETH_SetDMAConfig+0x110>)
 8003006:	4013      	ands	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7b1b      	ldrb	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <ETH_SetDMAConfig+0x2c>
 8003012:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003016:	e000      	b.n	800301a <ETH_SetDMAConfig+0x2e>
 8003018:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	7b5b      	ldrb	r3, [r3, #13]
 800301e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003020:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	7f52      	ldrb	r2, [r2, #29]
 8003026:	2a00      	cmp	r2, #0
 8003028:	d102      	bne.n	8003030 <ETH_SetDMAConfig+0x44>
 800302a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800302e:	e000      	b.n	8003032 <ETH_SetDMAConfig+0x46>
 8003030:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003032:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	7b9b      	ldrb	r3, [r3, #14]
 8003038:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800303a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003040:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	7f1b      	ldrb	r3, [r3, #28]
 8003046:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003048:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	7f9b      	ldrb	r3, [r3, #30]
 800304e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003050:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003056:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800305e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003060:	4313      	orrs	r3, r2
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003070:	461a      	mov	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003082:	2001      	movs	r0, #1
 8003084:	f7fe faf8 	bl	8001678 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003090:	461a      	mov	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	791b      	ldrb	r3, [r3, #4]
 800309a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80030a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80030b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7fe fac9 	bl	8001678 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	f8de3f23 	.word	0xf8de3f23

08003100 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0a6      	sub	sp, #152	@ 0x98
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003114:	2300      	movs	r3, #0
 8003116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800312a:	2301      	movs	r3, #1
 800312c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003142:	2300      	movs	r3, #0
 8003144:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800314c:	2300      	movs	r3, #0
 800314e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003168:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800316c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800316e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800317a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fe7f 	bl	8002e84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003186:	2301      	movs	r3, #1
 8003188:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800318a:	2301      	movs	r3, #1
 800318c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003194:	2301      	movs	r3, #1
 8003196:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80031a8:	2300      	movs	r3, #0
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031ba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80031bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80031c0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80031c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031c6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff05 	bl	8002fec <ETH_SetDMAConfig>
}
 80031e2:	bf00      	nop
 80031e4:	3798      	adds	r7, #152	@ 0x98
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3305      	adds	r3, #5
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	3204      	adds	r2, #4
 8003204:	7812      	ldrb	r2, [r2, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <ETH_MACAddressConfig+0x68>)
 800320e:	4413      	add	r3, r2
 8003210:	461a      	mov	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3303      	adds	r3, #3
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	061a      	lsls	r2, r3, #24
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3302      	adds	r3, #2
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3301      	adds	r3, #1
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	4313      	orrs	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <ETH_MACAddressConfig+0x6c>)
 800323e:	4413      	add	r3, r2
 8003240:	461a      	mov	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6013      	str	r3, [r2, #0]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40028040 	.word	0x40028040
 8003258:	40028044 	.word	0x40028044

0800325c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e03e      	b.n	80032e8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68d9      	ldr	r1, [r3, #12]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	440b      	add	r3, r1
 800327a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2200      	movs	r2, #0
 8003286:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2200      	movs	r2, #0
 8003292:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	3206      	adds	r2, #6
 800329c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d80c      	bhi.n	80032cc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68d9      	ldr	r1, [r3, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	e004      	b.n	80032d6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3301      	adds	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d9bd      	bls.n	800326a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003300:	611a      	str	r2, [r3, #16]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e048      	b.n	80033ae <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6919      	ldr	r1, [r3, #16]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2200      	movs	r2, #0
 8003338:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2200      	movs	r2, #0
 800334a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003358:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	3212      	adds	r2, #18
 800337a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d80c      	bhi.n	800339e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6919      	ldr	r1, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	440b      	add	r3, r1
 8003396:	461a      	mov	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	60da      	str	r2, [r3, #12]
 800339c:	e004      	b.n	80033a8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	461a      	mov	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d9b3      	bls.n	800331c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033de:	60da      	str	r2, [r3, #12]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b091      	sub	sp, #68	@ 0x44
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3318      	adds	r3, #24
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003416:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800342a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800342e:	d007      	beq.n	8003440 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003434:	3304      	adds	r3, #4
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003440:	2302      	movs	r3, #2
 8003442:	e115      	b.n	8003670 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8003444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003446:	3301      	adds	r3, #1
 8003448:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800344a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003452:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800345c:	f023 031f 	bic.w	r3, r3, #31
 8003460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003462:	6852      	ldr	r2, [r2, #4]
 8003464:	431a      	orrs	r2, r3
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	431a      	orrs	r2, r3
 8003484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003486:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80034c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80034ca:	e084      	b.n	80035d6 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80034cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80034e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e005      	b.n	80034f8 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fa:	3301      	adds	r3, #1
 80034fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003500:	2b03      	cmp	r3, #3
 8003502:	d902      	bls.n	800350a <ETH_Prepare_Tx_Descriptors+0x11e>
 8003504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003506:	3b04      	subs	r3, #4
 8003508:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800350e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003512:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800351c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003520:	d007      	beq.n	8003532 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003526:	3304      	adds	r3, #4
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d029      	beq.n	8003586 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800353a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003540:	2300      	movs	r3, #0
 8003542:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003544:	e019      	b.n	800357a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8003546:	f3bf 8f5f 	dmb	sy
}
 800354a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355a:	3301      	adds	r3, #1
 800355c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800355e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003560:	2b03      	cmp	r3, #3
 8003562:	d902      	bls.n	800356a <ETH_Prepare_Tx_Descriptors+0x17e>
 8003564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003566:	3b04      	subs	r3, #4
 8003568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800356e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003572:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003576:	3301      	adds	r3, #1
 8003578:	63bb      	str	r3, [r7, #56]	@ 0x38
 800357a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800357c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357e:	429a      	cmp	r2, r3
 8003580:	d3e1      	bcc.n	8003546 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8003582:	2302      	movs	r3, #2
 8003584:	e074      	b.n	8003670 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800358e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003590:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003594:	3301      	adds	r3, #1
 8003596:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800359e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80035a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80035b0:	f023 031f 	bic.w	r3, r3, #31
 80035b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035b6:	6852      	ldr	r2, [r2, #4]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035bc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80035be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c0:	3301      	adds	r3, #1
 80035c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80035c4:	f3bf 8f5f 	dmb	sy
}
 80035c8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80035d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f47f af76 	bne.w	80034cc <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80035ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e005      	b.n	8003600 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fe:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	6a3a      	ldr	r2, [r7, #32]
 8003610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003614:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003616:	f3bf 8f5f 	dmb	sy
}
 800361a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800361c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003626:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800362c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800362e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003630:	3304      	adds	r3, #4
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800363c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800363e:	f3ef 8310 	mrs	r3, PRIMASK
 8003642:	613b      	str	r3, [r7, #16]
  return(result);
 8003644:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	2301      	movs	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f383 8810 	msr	PRIMASK, r3
}
 8003652:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365a:	4413      	add	r3, r2
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	629a      	str	r2, [r3, #40]	@ 0x28
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f383 8810 	msr	PRIMASK, r3
}
 800366c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3744      	adds	r7, #68	@ 0x44
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800367c:	b480      	push	{r7}
 800367e:	b089      	sub	sp, #36	@ 0x24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	e16b      	b.n	8003970 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003698:	2201      	movs	r2, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	f040 815a 	bne.w	800396a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d005      	beq.n	80036ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d130      	bne.n	8003730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	2203      	movs	r2, #3
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003704:	2201      	movs	r2, #1
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 0201 	and.w	r2, r3, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b03      	cmp	r3, #3
 800373a:	d017      	beq.n	800376c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d123      	bne.n	80037c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	08da      	lsrs	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3208      	adds	r2, #8
 8003780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	220f      	movs	r2, #15
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	08da      	lsrs	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3208      	adds	r2, #8
 80037ba:	69b9      	ldr	r1, [r7, #24]
 80037bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2203      	movs	r2, #3
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0203 	and.w	r2, r3, #3
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80b4 	beq.w	800396a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	4b60      	ldr	r3, [pc, #384]	@ (8003988 <HAL_GPIO_Init+0x30c>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	4a5f      	ldr	r2, [pc, #380]	@ (8003988 <HAL_GPIO_Init+0x30c>)
 800380c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003810:	6453      	str	r3, [r2, #68]	@ 0x44
 8003812:	4b5d      	ldr	r3, [pc, #372]	@ (8003988 <HAL_GPIO_Init+0x30c>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800381e:	4a5b      	ldr	r2, [pc, #364]	@ (800398c <HAL_GPIO_Init+0x310>)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	089b      	lsrs	r3, r3, #2
 8003824:	3302      	adds	r3, #2
 8003826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	220f      	movs	r2, #15
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a52      	ldr	r2, [pc, #328]	@ (8003990 <HAL_GPIO_Init+0x314>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02b      	beq.n	80038a2 <HAL_GPIO_Init+0x226>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a51      	ldr	r2, [pc, #324]	@ (8003994 <HAL_GPIO_Init+0x318>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d025      	beq.n	800389e <HAL_GPIO_Init+0x222>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a50      	ldr	r2, [pc, #320]	@ (8003998 <HAL_GPIO_Init+0x31c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01f      	beq.n	800389a <HAL_GPIO_Init+0x21e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4f      	ldr	r2, [pc, #316]	@ (800399c <HAL_GPIO_Init+0x320>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d019      	beq.n	8003896 <HAL_GPIO_Init+0x21a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4e      	ldr	r2, [pc, #312]	@ (80039a0 <HAL_GPIO_Init+0x324>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_GPIO_Init+0x216>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4d      	ldr	r2, [pc, #308]	@ (80039a4 <HAL_GPIO_Init+0x328>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00d      	beq.n	800388e <HAL_GPIO_Init+0x212>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4c      	ldr	r2, [pc, #304]	@ (80039a8 <HAL_GPIO_Init+0x32c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <HAL_GPIO_Init+0x20e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4b      	ldr	r2, [pc, #300]	@ (80039ac <HAL_GPIO_Init+0x330>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_GPIO_Init+0x20a>
 8003882:	2307      	movs	r3, #7
 8003884:	e00e      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 8003886:	2308      	movs	r3, #8
 8003888:	e00c      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800388a:	2306      	movs	r3, #6
 800388c:	e00a      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800388e:	2305      	movs	r3, #5
 8003890:	e008      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 8003892:	2304      	movs	r3, #4
 8003894:	e006      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 8003896:	2303      	movs	r3, #3
 8003898:	e004      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800389a:	2302      	movs	r3, #2
 800389c:	e002      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 80038a2:	2300      	movs	r3, #0
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	f002 0203 	and.w	r2, r2, #3
 80038aa:	0092      	lsls	r2, r2, #2
 80038ac:	4093      	lsls	r3, r2
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038b4:	4935      	ldr	r1, [pc, #212]	@ (800398c <HAL_GPIO_Init+0x310>)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	3302      	adds	r3, #2
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c2:	4b3b      	ldr	r3, [pc, #236]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038e6:	4a32      	ldr	r2, [pc, #200]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ec:	4b30      	ldr	r3, [pc, #192]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003910:	4a27      	ldr	r2, [pc, #156]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003916:	4b26      	ldr	r3, [pc, #152]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800393a:	4a1d      	ldr	r2, [pc, #116]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003940:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003964:	4a12      	ldr	r2, [pc, #72]	@ (80039b0 <HAL_GPIO_Init+0x334>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3301      	adds	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b0f      	cmp	r3, #15
 8003974:	f67f ae90 	bls.w	8003698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3724      	adds	r7, #36	@ 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	40013800 	.word	0x40013800
 8003990:	40020000 	.word	0x40020000
 8003994:	40020400 	.word	0x40020400
 8003998:	40020800 	.word	0x40020800
 800399c:	40020c00 	.word	0x40020c00
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40021400 	.word	0x40021400
 80039a8:	40021800 	.word	0x40021800
 80039ac:	40021c00 	.word	0x40021c00
 80039b0:	40013c00 	.word	0x40013c00

080039b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	807b      	strh	r3, [r7, #2]
 80039c0:	4613      	mov	r3, r2
 80039c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039c4:	787b      	ldrb	r3, [r7, #1]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ca:	887a      	ldrh	r2, [r7, #2]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039d0:	e003      	b.n	80039da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039d2:	887b      	ldrh	r3, [r7, #2]
 80039d4:	041a      	lsls	r2, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	619a      	str	r2, [r3, #24]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039f2:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d006      	beq.n	8003a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039fe:	4a05      	ldr	r2, [pc, #20]	@ (8003a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f806 	bl	8003a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40013c00 	.word	0x40013c00

08003a18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e267      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d075      	beq.n	8003b3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a4e:	4b88      	ldr	r3, [pc, #544]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d00c      	beq.n	8003a74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5a:	4b85      	ldr	r3, [pc, #532]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d112      	bne.n	8003a8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a66:	4b82      	ldr	r3, [pc, #520]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a72:	d10b      	bne.n	8003a8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	4b7e      	ldr	r3, [pc, #504]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d05b      	beq.n	8003b38 <HAL_RCC_OscConfig+0x108>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d157      	bne.n	8003b38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e242      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a94:	d106      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x74>
 8003a96:	4b76      	ldr	r3, [pc, #472]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a75      	ldr	r2, [pc, #468]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e01d      	b.n	8003ae0 <HAL_RCC_OscConfig+0xb0>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x98>
 8003aae:	4b70      	ldr	r3, [pc, #448]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6f      	ldr	r2, [pc, #444]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4b6d      	ldr	r3, [pc, #436]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6c      	ldr	r2, [pc, #432]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e00b      	b.n	8003ae0 <HAL_RCC_OscConfig+0xb0>
 8003ac8:	4b69      	ldr	r3, [pc, #420]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a68      	ldr	r2, [pc, #416]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	4b66      	ldr	r3, [pc, #408]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a65      	ldr	r2, [pc, #404]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d013      	beq.n	8003b10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fdba 	bl	8001660 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af0:	f7fd fdb6 	bl	8001660 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	@ 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e207      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	4b5b      	ldr	r3, [pc, #364]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0xc0>
 8003b0e:	e014      	b.n	8003b3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fd fda6 	bl	8001660 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b18:	f7fd fda2 	bl	8001660 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	@ 0x64
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e1f3      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	4b51      	ldr	r3, [pc, #324]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0xe8>
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d063      	beq.n	8003c0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b46:	4b4a      	ldr	r3, [pc, #296]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b52:	4b47      	ldr	r3, [pc, #284]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d11c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5e:	4b44      	ldr	r3, [pc, #272]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d116      	bne.n	8003b98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6a:	4b41      	ldr	r3, [pc, #260]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_RCC_OscConfig+0x152>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e1c7      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b82:	4b3b      	ldr	r3, [pc, #236]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4937      	ldr	r1, [pc, #220]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b96:	e03a      	b.n	8003c0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d020      	beq.n	8003be2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba0:	4b34      	ldr	r3, [pc, #208]	@ (8003c74 <HAL_RCC_OscConfig+0x244>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7fd fd5b 	bl	8001660 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bae:	f7fd fd57 	bl	8001660 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e1a8      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bcc:	4b28      	ldr	r3, [pc, #160]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4925      	ldr	r1, [pc, #148]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]
 8003be0:	e015      	b.n	8003c0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be2:	4b24      	ldr	r3, [pc, #144]	@ (8003c74 <HAL_RCC_OscConfig+0x244>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd fd3a 	bl	8001660 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf0:	f7fd fd36 	bl	8001660 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e187      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	4b1b      	ldr	r3, [pc, #108]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d036      	beq.n	8003c88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d016      	beq.n	8003c50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c22:	4b15      	ldr	r3, [pc, #84]	@ (8003c78 <HAL_RCC_OscConfig+0x248>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c28:	f7fd fd1a 	bl	8001660 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c30:	f7fd fd16 	bl	8001660 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e167      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c42:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <HAL_RCC_OscConfig+0x240>)
 8003c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x200>
 8003c4e:	e01b      	b.n	8003c88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c50:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <HAL_RCC_OscConfig+0x248>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c56:	f7fd fd03 	bl	8001660 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5c:	e00e      	b.n	8003c7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5e:	f7fd fcff 	bl	8001660 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d907      	bls.n	8003c7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e150      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
 8003c70:	40023800 	.word	0x40023800
 8003c74:	42470000 	.word	0x42470000
 8003c78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7c:	4b88      	ldr	r3, [pc, #544]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ea      	bne.n	8003c5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8097 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9a:	4b81      	ldr	r3, [pc, #516]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	4a7c      	ldr	r2, [pc, #496]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b77      	ldr	r3, [pc, #476]	@ (8003ea4 <HAL_RCC_OscConfig+0x474>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d118      	bne.n	8003d04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd2:	4b74      	ldr	r3, [pc, #464]	@ (8003ea4 <HAL_RCC_OscConfig+0x474>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a73      	ldr	r2, [pc, #460]	@ (8003ea4 <HAL_RCC_OscConfig+0x474>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cde:	f7fd fcbf 	bl	8001660 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce6:	f7fd fcbb 	bl	8001660 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e10c      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	4b6a      	ldr	r3, [pc, #424]	@ (8003ea4 <HAL_RCC_OscConfig+0x474>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0x2ea>
 8003d0c:	4b64      	ldr	r3, [pc, #400]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d10:	4a63      	ldr	r2, [pc, #396]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d18:	e01c      	b.n	8003d54 <HAL_RCC_OscConfig+0x324>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x30c>
 8003d22:	4b5f      	ldr	r3, [pc, #380]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d26:	4a5e      	ldr	r2, [pc, #376]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	4a5b      	ldr	r2, [pc, #364]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0x324>
 8003d3c:	4b58      	ldr	r3, [pc, #352]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d40:	4a57      	ldr	r2, [pc, #348]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d48:	4b55      	ldr	r3, [pc, #340]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	4a54      	ldr	r2, [pc, #336]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	f023 0304 	bic.w	r3, r3, #4
 8003d52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fd fc80 	bl	8001660 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7fd fc7c 	bl	8001660 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e0cb      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7a:	4b49      	ldr	r3, [pc, #292]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0ee      	beq.n	8003d64 <HAL_RCC_OscConfig+0x334>
 8003d86:	e014      	b.n	8003db2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d88:	f7fd fc6a 	bl	8001660 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d90:	f7fd fc66 	bl	8001660 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e0b5      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1ee      	bne.n	8003d90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db8:	4b39      	ldr	r3, [pc, #228]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbc:	4a38      	ldr	r2, [pc, #224]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80a1 	beq.w	8003f10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dce:	4b34      	ldr	r3, [pc, #208]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d05c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d141      	bne.n	8003e66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de2:	4b31      	ldr	r3, [pc, #196]	@ (8003ea8 <HAL_RCC_OscConfig+0x478>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd fc3a 	bl	8001660 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fd fc36 	bl	8001660 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e087      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	4b27      	ldr	r3, [pc, #156]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69da      	ldr	r2, [r3, #28]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	019b      	lsls	r3, r3, #6
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	085b      	lsrs	r3, r3, #1
 8003e26:	3b01      	subs	r3, #1
 8003e28:	041b      	lsls	r3, r3, #16
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	061b      	lsls	r3, r3, #24
 8003e32:	491b      	ldr	r1, [pc, #108]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <HAL_RCC_OscConfig+0x478>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fc0f 	bl	8001660 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e46:	f7fd fc0b 	bl	8001660 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e05c      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e58:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x416>
 8003e64:	e054      	b.n	8003f10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e66:	4b10      	ldr	r3, [pc, #64]	@ (8003ea8 <HAL_RCC_OscConfig+0x478>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fd fbf8 	bl	8001660 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd fbf4 	bl	8001660 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e045      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <HAL_RCC_OscConfig+0x470>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x444>
 8003e92:	e03d      	b.n	8003f10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e038      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40007000 	.word	0x40007000
 8003ea8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eac:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <HAL_RCC_OscConfig+0x4ec>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d028      	beq.n	8003f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d121      	bne.n	8003f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d11a      	bne.n	8003f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003edc:	4013      	ands	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ee2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d111      	bne.n	8003f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d107      	bne.n	8003f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800

08003f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0cc      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f34:	4b68      	ldr	r3, [pc, #416]	@ (80040d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d90c      	bls.n	8003f5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f42:	4b65      	ldr	r3, [pc, #404]	@ (80040d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4a:	4b63      	ldr	r3, [pc, #396]	@ (80040d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0b8      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d020      	beq.n	8003faa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f74:	4b59      	ldr	r3, [pc, #356]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4a58      	ldr	r2, [pc, #352]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f8c:	4b53      	ldr	r3, [pc, #332]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a52      	ldr	r2, [pc, #328]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f98:	4b50      	ldr	r3, [pc, #320]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	494d      	ldr	r1, [pc, #308]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d044      	beq.n	8004040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d107      	bne.n	8003fce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fbe:	4b47      	ldr	r3, [pc, #284]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d119      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e07f      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d003      	beq.n	8003fde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d107      	bne.n	8003fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fde:	4b3f      	ldr	r3, [pc, #252]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e06f      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fee:	4b3b      	ldr	r3, [pc, #236]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e067      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffe:	4b37      	ldr	r3, [pc, #220]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f023 0203 	bic.w	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	4934      	ldr	r1, [pc, #208]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	4313      	orrs	r3, r2
 800400e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004010:	f7fd fb26 	bl	8001660 <HAL_GetTick>
 8004014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004016:	e00a      	b.n	800402e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004018:	f7fd fb22 	bl	8001660 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e04f      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402e:	4b2b      	ldr	r3, [pc, #172]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 020c 	and.w	r2, r3, #12
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	429a      	cmp	r2, r3
 800403e:	d1eb      	bne.n	8004018 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004040:	4b25      	ldr	r3, [pc, #148]	@ (80040d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d20c      	bcs.n	8004068 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b22      	ldr	r3, [pc, #136]	@ (80040d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b20      	ldr	r3, [pc, #128]	@ (80040d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e032      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004074:	4b19      	ldr	r3, [pc, #100]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4916      	ldr	r1, [pc, #88]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d009      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004092:	4b12      	ldr	r3, [pc, #72]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	490e      	ldr	r1, [pc, #56]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040a6:	f000 f821 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 80040aa:	4602      	mov	r2, r0
 80040ac:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	490a      	ldr	r1, [pc, #40]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	5ccb      	ldrb	r3, [r1, r3]
 80040ba:	fa22 f303 	lsr.w	r3, r2, r3
 80040be:	4a09      	ldr	r2, [pc, #36]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 80040c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040c2:	4b09      	ldr	r3, [pc, #36]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd fa86 	bl	80015d8 <HAL_InitTick>

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40023c00 	.word	0x40023c00
 80040dc:	40023800 	.word	0x40023800
 80040e0:	08015f40 	.word	0x08015f40
 80040e4:	20000000 	.word	0x20000000
 80040e8:	20000004 	.word	0x20000004

080040ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f0:	b090      	sub	sp, #64	@ 0x40
 80040f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004104:	4b59      	ldr	r3, [pc, #356]	@ (800426c <HAL_RCC_GetSysClockFreq+0x180>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 030c 	and.w	r3, r3, #12
 800410c:	2b08      	cmp	r3, #8
 800410e:	d00d      	beq.n	800412c <HAL_RCC_GetSysClockFreq+0x40>
 8004110:	2b08      	cmp	r3, #8
 8004112:	f200 80a1 	bhi.w	8004258 <HAL_RCC_GetSysClockFreq+0x16c>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x34>
 800411a:	2b04      	cmp	r3, #4
 800411c:	d003      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0x3a>
 800411e:	e09b      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b53      	ldr	r3, [pc, #332]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x184>)
 8004122:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004124:	e09b      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004126:	4b53      	ldr	r3, [pc, #332]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x188>)
 8004128:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800412a:	e098      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800412c:	4b4f      	ldr	r3, [pc, #316]	@ (800426c <HAL_RCC_GetSysClockFreq+0x180>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004134:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004136:	4b4d      	ldr	r3, [pc, #308]	@ (800426c <HAL_RCC_GetSysClockFreq+0x180>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d028      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004142:	4b4a      	ldr	r3, [pc, #296]	@ (800426c <HAL_RCC_GetSysClockFreq+0x180>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	099b      	lsrs	r3, r3, #6
 8004148:	2200      	movs	r2, #0
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	627a      	str	r2, [r7, #36]	@ 0x24
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004154:	2100      	movs	r1, #0
 8004156:	4b47      	ldr	r3, [pc, #284]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x188>)
 8004158:	fb03 f201 	mul.w	r2, r3, r1
 800415c:	2300      	movs	r3, #0
 800415e:	fb00 f303 	mul.w	r3, r0, r3
 8004162:	4413      	add	r3, r2
 8004164:	4a43      	ldr	r2, [pc, #268]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x188>)
 8004166:	fba0 1202 	umull	r1, r2, r0, r2
 800416a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800416c:	460a      	mov	r2, r1
 800416e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004172:	4413      	add	r3, r2
 8004174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004178:	2200      	movs	r2, #0
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	61fa      	str	r2, [r7, #28]
 800417e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004182:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004186:	f7fc f87b 	bl	8000280 <__aeabi_uldivmod>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4613      	mov	r3, r2
 8004190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004192:	e053      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004194:	4b35      	ldr	r3, [pc, #212]	@ (800426c <HAL_RCC_GetSysClockFreq+0x180>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	099b      	lsrs	r3, r3, #6
 800419a:	2200      	movs	r2, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	617a      	str	r2, [r7, #20]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041a6:	f04f 0b00 	mov.w	fp, #0
 80041aa:	4652      	mov	r2, sl
 80041ac:	465b      	mov	r3, fp
 80041ae:	f04f 0000 	mov.w	r0, #0
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	0159      	lsls	r1, r3, #5
 80041b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041bc:	0150      	lsls	r0, r2, #5
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	ebb2 080a 	subs.w	r8, r2, sl
 80041c6:	eb63 090b 	sbc.w	r9, r3, fp
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041de:	ebb2 0408 	subs.w	r4, r2, r8
 80041e2:	eb63 0509 	sbc.w	r5, r3, r9
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	00eb      	lsls	r3, r5, #3
 80041f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f4:	00e2      	lsls	r2, r4, #3
 80041f6:	4614      	mov	r4, r2
 80041f8:	461d      	mov	r5, r3
 80041fa:	eb14 030a 	adds.w	r3, r4, sl
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	eb45 030b 	adc.w	r3, r5, fp
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004212:	4629      	mov	r1, r5
 8004214:	028b      	lsls	r3, r1, #10
 8004216:	4621      	mov	r1, r4
 8004218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800421c:	4621      	mov	r1, r4
 800421e:	028a      	lsls	r2, r1, #10
 8004220:	4610      	mov	r0, r2
 8004222:	4619      	mov	r1, r3
 8004224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004226:	2200      	movs	r2, #0
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	60fa      	str	r2, [r7, #12]
 800422c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004230:	f7fc f826 	bl	8000280 <__aeabi_uldivmod>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4613      	mov	r3, r2
 800423a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800423c:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <HAL_RCC_GetSysClockFreq+0x180>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	3301      	adds	r3, #1
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800424c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800424e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004256:	e002      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x184>)
 800425a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800425c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800425e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004260:	4618      	mov	r0, r3
 8004262:	3740      	adds	r7, #64	@ 0x40
 8004264:	46bd      	mov	sp, r7
 8004266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800
 8004270:	00f42400 	.word	0x00f42400
 8004274:	017d7840 	.word	0x017d7840

08004278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800427c:	4b03      	ldr	r3, [pc, #12]	@ (800428c <HAL_RCC_GetHCLKFreq+0x14>)
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000000 	.word	0x20000000

08004290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004294:	f7ff fff0 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 8004298:	4602      	mov	r2, r0
 800429a:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	0a9b      	lsrs	r3, r3, #10
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	4903      	ldr	r1, [pc, #12]	@ (80042b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a6:	5ccb      	ldrb	r3, [r1, r3]
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40023800 	.word	0x40023800
 80042b4:	08015f50 	.word	0x08015f50

080042b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042bc:	f7ff ffdc 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	0b5b      	lsrs	r3, r3, #13
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4903      	ldr	r1, [pc, #12]	@ (80042dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40023800 	.word	0x40023800
 80042dc:	08015f50 	.word	0x08015f50

080042e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e07b      	b.n	80043ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d108      	bne.n	800430c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004302:	d009      	beq.n	8004318 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	61da      	str	r2, [r3, #28]
 800430a:	e005      	b.n	8004318 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fe08 	bl	8000f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800434e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439c:	ea42 0103 	orr.w	r1, r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0104 	and.w	r1, r3, #4
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	f003 0210 	and.w	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69da      	ldr	r2, [r3, #28]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b08a      	sub	sp, #40	@ 0x28
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004400:	2301      	movs	r3, #1
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004404:	f7fd f92c 	bl	8001660 <HAL_GetTick>
 8004408:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004410:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800441c:	7ffb      	ldrb	r3, [r7, #31]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d00c      	beq.n	800443c <HAL_SPI_TransmitReceive+0x4a>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004428:	d106      	bne.n	8004438 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <HAL_SPI_TransmitReceive+0x46>
 8004432:	7ffb      	ldrb	r3, [r7, #31]
 8004434:	2b04      	cmp	r3, #4
 8004436:	d001      	beq.n	800443c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
 800443a:	e17f      	b.n	800473c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_SPI_TransmitReceive+0x5c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_SPI_TransmitReceive+0x5c>
 8004448:	887b      	ldrh	r3, [r7, #2]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e174      	b.n	800473c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_SPI_TransmitReceive+0x6e>
 800445c:	2302      	movs	r3, #2
 800445e:	e16d      	b.n	800473c <HAL_SPI_TransmitReceive+0x34a>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b04      	cmp	r3, #4
 8004472:	d003      	beq.n	800447c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2205      	movs	r2, #5
 8004478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	887a      	ldrh	r2, [r7, #2]
 800448c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	887a      	ldrh	r2, [r7, #2]
 8004492:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	887a      	ldrh	r2, [r7, #2]
 800449e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	887a      	ldrh	r2, [r7, #2]
 80044a4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044bc:	2b40      	cmp	r3, #64	@ 0x40
 80044be:	d007      	beq.n	80044d0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044d8:	d17e      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_SPI_TransmitReceive+0xf6>
 80044e2:	8afb      	ldrh	r3, [r7, #22]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d16c      	bne.n	80045c2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	881a      	ldrh	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	1c9a      	adds	r2, r3, #2
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800450c:	e059      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d11b      	bne.n	8004554 <HAL_SPI_TransmitReceive+0x162>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x162>
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	2b01      	cmp	r3, #1
 800452a:	d113      	bne.n	8004554 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004530:	881a      	ldrh	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	1c9a      	adds	r2, r3, #2
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d119      	bne.n	8004596 <HAL_SPI_TransmitReceive+0x1a4>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d014      	beq.n	8004596 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004576:	b292      	uxth	r2, r2
 8004578:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457e:	1c9a      	adds	r2, r3, #2
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004592:	2301      	movs	r3, #1
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004596:	f7fd f863 	bl	8001660 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d80d      	bhi.n	80045c2 <HAL_SPI_TransmitReceive+0x1d0>
 80045a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d009      	beq.n	80045c2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e0bc      	b.n	800473c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1a0      	bne.n	800450e <HAL_SPI_TransmitReceive+0x11c>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d19b      	bne.n	800450e <HAL_SPI_TransmitReceive+0x11c>
 80045d6:	e082      	b.n	80046de <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_SPI_TransmitReceive+0x1f4>
 80045e0:	8afb      	ldrh	r3, [r7, #22]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d171      	bne.n	80046ca <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	330c      	adds	r3, #12
 80045f0:	7812      	ldrb	r2, [r2, #0]
 80045f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800460c:	e05d      	b.n	80046ca <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b02      	cmp	r3, #2
 800461a:	d11c      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x264>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d017      	beq.n	8004656 <HAL_SPI_TransmitReceive+0x264>
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	2b01      	cmp	r3, #1
 800462a:	d114      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	7812      	ldrb	r2, [r2, #0]
 8004638:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d119      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x2a6>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d014      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004694:	2301      	movs	r3, #1
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004698:	f7fc ffe2 	bl	8001660 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d803      	bhi.n	80046b0 <HAL_SPI_TransmitReceive+0x2be>
 80046a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d102      	bne.n	80046b6 <HAL_SPI_TransmitReceive+0x2c4>
 80046b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e038      	b.n	800473c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d19c      	bne.n	800460e <HAL_SPI_TransmitReceive+0x21c>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d197      	bne.n	800460e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046de:	6a3a      	ldr	r2, [r7, #32]
 80046e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f8b6 	bl	8004854 <SPI_EndRxTxTransaction>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2220      	movs	r2, #32
 80046f2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e01d      	b.n	800473c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800473a:	2300      	movs	r3, #0
  }
}
 800473c:	4618      	mov	r0, r3
 800473e:	3728      	adds	r7, #40	@ 0x28
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	4613      	mov	r3, r2
 8004752:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004754:	f7fc ff84 	bl	8001660 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	4413      	add	r3, r2
 8004762:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004764:	f7fc ff7c 	bl	8001660 <HAL_GetTick>
 8004768:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800476a:	4b39      	ldr	r3, [pc, #228]	@ (8004850 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	015b      	lsls	r3, r3, #5
 8004770:	0d1b      	lsrs	r3, r3, #20
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	fb02 f303 	mul.w	r3, r2, r3
 8004778:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800477a:	e055      	b.n	8004828 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004782:	d051      	beq.n	8004828 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004784:	f7fc ff6c 	bl	8001660 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	429a      	cmp	r2, r3
 8004792:	d902      	bls.n	800479a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d13d      	bne.n	8004816 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047b2:	d111      	bne.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047bc:	d004      	beq.n	80047c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c6:	d107      	bne.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047e0:	d10f      	bne.n	8004802 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004800:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e018      	b.n	8004848 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	e002      	b.n	8004828 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	3b01      	subs	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4013      	ands	r3, r2
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	429a      	cmp	r2, r3
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	429a      	cmp	r2, r3
 8004844:	d19a      	bne.n	800477c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000000 	.word	0x20000000

08004854 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2201      	movs	r2, #1
 8004868:	2102      	movs	r1, #2
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f7ff ff6a 	bl	8004744 <SPI_WaitFlagStateUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487a:	f043 0220 	orr.w	r2, r3, #32
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e032      	b.n	80048ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004886:	4b1b      	ldr	r3, [pc, #108]	@ (80048f4 <SPI_EndRxTxTransaction+0xa0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1b      	ldr	r2, [pc, #108]	@ (80048f8 <SPI_EndRxTxTransaction+0xa4>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	0d5b      	lsrs	r3, r3, #21
 8004892:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048a4:	d112      	bne.n	80048cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2200      	movs	r2, #0
 80048ae:	2180      	movs	r1, #128	@ 0x80
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff ff47 	bl	8004744 <SPI_WaitFlagStateUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d016      	beq.n	80048ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e00f      	b.n	80048ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e2:	2b80      	cmp	r3, #128	@ 0x80
 80048e4:	d0f2      	beq.n	80048cc <SPI_EndRxTxTransaction+0x78>
 80048e6:	e000      	b.n	80048ea <SPI_EndRxTxTransaction+0x96>
        break;
 80048e8:	bf00      	nop
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20000000 	.word	0x20000000
 80048f8:	165e9f81 	.word	0x165e9f81

080048fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e041      	b.n	8004992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fb78 	bl	8001018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f000 f95e 	bl	8004bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d001      	beq.n	80049b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e046      	b.n	8004a42 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a23      	ldr	r2, [pc, #140]	@ (8004a50 <HAL_TIM_Base_Start+0xb4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d022      	beq.n	8004a0c <HAL_TIM_Base_Start+0x70>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ce:	d01d      	beq.n	8004a0c <HAL_TIM_Base_Start+0x70>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a54 <HAL_TIM_Base_Start+0xb8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d018      	beq.n	8004a0c <HAL_TIM_Base_Start+0x70>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1e      	ldr	r2, [pc, #120]	@ (8004a58 <HAL_TIM_Base_Start+0xbc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <HAL_TIM_Base_Start+0x70>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a5c <HAL_TIM_Base_Start+0xc0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00e      	beq.n	8004a0c <HAL_TIM_Base_Start+0x70>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a60 <HAL_TIM_Base_Start+0xc4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d009      	beq.n	8004a0c <HAL_TIM_Base_Start+0x70>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a19      	ldr	r2, [pc, #100]	@ (8004a64 <HAL_TIM_Base_Start+0xc8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_TIM_Base_Start+0x70>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a18      	ldr	r2, [pc, #96]	@ (8004a68 <HAL_TIM_Base_Start+0xcc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d111      	bne.n	8004a30 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d010      	beq.n	8004a40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	e007      	b.n	8004a40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40010000 	.word	0x40010000
 8004a54:	40000400 	.word	0x40000400
 8004a58:	40000800 	.word	0x40000800
 8004a5c:	40000c00 	.word	0x40000c00
 8004a60:	40010400 	.word	0x40010400
 8004a64:	40014000 	.word	0x40014000
 8004a68:	40001800 	.word	0x40001800

08004a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_TIM_ConfigClockSource+0x1c>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e0b4      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x186>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004aae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac0:	d03e      	beq.n	8004b40 <HAL_TIM_ConfigClockSource+0xd4>
 8004ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac6:	f200 8087 	bhi.w	8004bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ace:	f000 8086 	beq.w	8004bde <HAL_TIM_ConfigClockSource+0x172>
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad6:	d87f      	bhi.n	8004bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad8:	2b70      	cmp	r3, #112	@ 0x70
 8004ada:	d01a      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0xa6>
 8004adc:	2b70      	cmp	r3, #112	@ 0x70
 8004ade:	d87b      	bhi.n	8004bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae0:	2b60      	cmp	r3, #96	@ 0x60
 8004ae2:	d050      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x11a>
 8004ae4:	2b60      	cmp	r3, #96	@ 0x60
 8004ae6:	d877      	bhi.n	8004bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b50      	cmp	r3, #80	@ 0x50
 8004aea:	d03c      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0xfa>
 8004aec:	2b50      	cmp	r3, #80	@ 0x50
 8004aee:	d873      	bhi.n	8004bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af0:	2b40      	cmp	r3, #64	@ 0x40
 8004af2:	d058      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x13a>
 8004af4:	2b40      	cmp	r3, #64	@ 0x40
 8004af6:	d86f      	bhi.n	8004bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b30      	cmp	r3, #48	@ 0x30
 8004afa:	d064      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004afc:	2b30      	cmp	r3, #48	@ 0x30
 8004afe:	d86b      	bhi.n	8004bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d060      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d867      	bhi.n	8004bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d05c      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d05a      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b10:	e062      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b22:	f000 f98b 	bl	8004e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	609a      	str	r2, [r3, #8]
      break;
 8004b3e:	e04f      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b50:	f000 f974 	bl	8004e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b62:	609a      	str	r2, [r3, #8]
      break;
 8004b64:	e03c      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b72:	461a      	mov	r2, r3
 8004b74:	f000 f8e8 	bl	8004d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2150      	movs	r1, #80	@ 0x50
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f941 	bl	8004e06 <TIM_ITRx_SetConfig>
      break;
 8004b84:	e02c      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b92:	461a      	mov	r2, r3
 8004b94:	f000 f907 	bl	8004da6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2160      	movs	r1, #96	@ 0x60
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f931 	bl	8004e06 <TIM_ITRx_SetConfig>
      break;
 8004ba4:	e01c      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f000 f8c8 	bl	8004d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2140      	movs	r1, #64	@ 0x40
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f921 	bl	8004e06 <TIM_ITRx_SetConfig>
      break;
 8004bc4:	e00c      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f000 f918 	bl	8004e06 <TIM_ITRx_SetConfig>
      break;
 8004bd6:	e003      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      break;
 8004bdc:	e000      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a43      	ldr	r2, [pc, #268]	@ (8004d1c <TIM_Base_SetConfig+0x120>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d013      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1a:	d00f      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a40      	ldr	r2, [pc, #256]	@ (8004d20 <TIM_Base_SetConfig+0x124>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00b      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3f      	ldr	r2, [pc, #252]	@ (8004d24 <TIM_Base_SetConfig+0x128>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d28 <TIM_Base_SetConfig+0x12c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a3d      	ldr	r2, [pc, #244]	@ (8004d2c <TIM_Base_SetConfig+0x130>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d108      	bne.n	8004c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a32      	ldr	r2, [pc, #200]	@ (8004d1c <TIM_Base_SetConfig+0x120>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d02b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5c:	d027      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2f      	ldr	r2, [pc, #188]	@ (8004d20 <TIM_Base_SetConfig+0x124>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d023      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2e      	ldr	r2, [pc, #184]	@ (8004d24 <TIM_Base_SetConfig+0x128>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01f      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2d      	ldr	r2, [pc, #180]	@ (8004d28 <TIM_Base_SetConfig+0x12c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a2c      	ldr	r2, [pc, #176]	@ (8004d2c <TIM_Base_SetConfig+0x130>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d017      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2b      	ldr	r2, [pc, #172]	@ (8004d30 <TIM_Base_SetConfig+0x134>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a2a      	ldr	r2, [pc, #168]	@ (8004d34 <TIM_Base_SetConfig+0x138>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00f      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a29      	ldr	r2, [pc, #164]	@ (8004d38 <TIM_Base_SetConfig+0x13c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a28      	ldr	r2, [pc, #160]	@ (8004d3c <TIM_Base_SetConfig+0x140>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a27      	ldr	r2, [pc, #156]	@ (8004d40 <TIM_Base_SetConfig+0x144>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a26      	ldr	r2, [pc, #152]	@ (8004d44 <TIM_Base_SetConfig+0x148>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d108      	bne.n	8004cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8004d1c <TIM_Base_SetConfig+0x120>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d003      	beq.n	8004cee <TIM_Base_SetConfig+0xf2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a10      	ldr	r2, [pc, #64]	@ (8004d2c <TIM_Base_SetConfig+0x130>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d103      	bne.n	8004cf6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f043 0204 	orr.w	r2, r3, #4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	601a      	str	r2, [r3, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00
 8004d2c:	40010400 	.word	0x40010400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800
 8004d3c:	40001800 	.word	0x40001800
 8004d40:	40001c00 	.word	0x40001c00
 8004d44:	40002000 	.word	0x40002000

08004d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f023 0201 	bic.w	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f023 030a 	bic.w	r3, r3, #10
 8004d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b087      	sub	sp, #28
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f023 0210 	bic.w	r2, r3, #16
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	031b      	lsls	r3, r3, #12
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004de2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f043 0307 	orr.w	r3, r3, #7
 8004e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	609a      	str	r2, [r3, #8]
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	021a      	lsls	r2, r3, #8
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	609a      	str	r2, [r3, #8]
}
 8004e70:	bf00      	nop
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e05a      	b.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a21      	ldr	r2, [pc, #132]	@ (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d022      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee0:	d01d      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d018      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1a      	ldr	r2, [pc, #104]	@ (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00e      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a18      	ldr	r2, [pc, #96]	@ (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d009      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a17      	ldr	r2, [pc, #92]	@ (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a15      	ldr	r2, [pc, #84]	@ (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d10c      	bne.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	40000c00 	.word	0x40000c00
 8004f68:	40010400 	.word	0x40010400
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40001800 	.word	0x40001800

08004f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e042      	b.n	800500c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d106      	bne.n	8004fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fc f85c 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2224      	movs	r2, #36	@ 0x24
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f973 	bl	80052a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08a      	sub	sp, #40	@ 0x28
 8005018:	af02      	add	r7, sp, #8
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	4613      	mov	r3, r2
 8005022:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b20      	cmp	r3, #32
 8005032:	d175      	bne.n	8005120 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_UART_Transmit+0x2c>
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e06e      	b.n	8005122 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2221      	movs	r2, #33	@ 0x21
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005052:	f7fc fb05 	bl	8001660 <HAL_GetTick>
 8005056:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	88fa      	ldrh	r2, [r7, #6]
 800505c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	88fa      	ldrh	r2, [r7, #6]
 8005062:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506c:	d108      	bne.n	8005080 <HAL_UART_Transmit+0x6c>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d104      	bne.n	8005080 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	e003      	b.n	8005088 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005084:	2300      	movs	r3, #0
 8005086:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005088:	e02e      	b.n	80050e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2200      	movs	r2, #0
 8005092:	2180      	movs	r1, #128	@ 0x80
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f848 	bl	800512a <UART_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e03a      	b.n	8005122 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	3302      	adds	r3, #2
 80050c6:	61bb      	str	r3, [r7, #24]
 80050c8:	e007      	b.n	80050da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	781a      	ldrb	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	3301      	adds	r3, #1
 80050d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1cb      	bne.n	800508a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2200      	movs	r2, #0
 80050fa:	2140      	movs	r1, #64	@ 0x40
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 f814 	bl	800512a <UART_WaitOnFlagUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e006      	b.n	8005122 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	e000      	b.n	8005122 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005120:	2302      	movs	r3, #2
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	4613      	mov	r3, r2
 8005138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800513a:	e03b      	b.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d037      	beq.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005144:	f7fc fa8c 	bl	8001660 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	6a3a      	ldr	r2, [r7, #32]
 8005150:	429a      	cmp	r2, r3
 8005152:	d302      	bcc.n	800515a <UART_WaitOnFlagUntilTimeout+0x30>
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e03a      	b.n	80051d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d023      	beq.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b80      	cmp	r3, #128	@ 0x80
 8005170:	d020      	beq.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b40      	cmp	r3, #64	@ 0x40
 8005176:	d01d      	beq.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b08      	cmp	r3, #8
 8005184:	d116      	bne.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f81d 	bl	80051dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2208      	movs	r2, #8
 80051a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e00f      	b.n	80051d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	4013      	ands	r3, r2
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d0b4      	beq.n	800513c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b095      	sub	sp, #84	@ 0x54
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005204:	643a      	str	r2, [r7, #64]	@ 0x40
 8005206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800520a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e5      	bne.n	80051e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3314      	adds	r3, #20
 800521e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	61fb      	str	r3, [r7, #28]
   return(result);
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3314      	adds	r3, #20
 8005236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005238:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800523a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800523e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e5      	bne.n	8005218 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	2b01      	cmp	r3, #1
 8005252:	d119      	bne.n	8005288 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	330c      	adds	r3, #12
 800525a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	60bb      	str	r3, [r7, #8]
   return(result);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f023 0310 	bic.w	r3, r3, #16
 800526a:	647b      	str	r3, [r7, #68]	@ 0x44
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	330c      	adds	r3, #12
 8005272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005274:	61ba      	str	r2, [r7, #24]
 8005276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6979      	ldr	r1, [r7, #20]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	613b      	str	r3, [r7, #16]
   return(result);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e5      	bne.n	8005254 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005296:	bf00      	nop
 8005298:	3754      	adds	r7, #84	@ 0x54
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
	...

080052a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a8:	b0c0      	sub	sp, #256	@ 0x100
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c0:	68d9      	ldr	r1, [r3, #12]
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	ea40 0301 	orr.w	r3, r0, r1
 80052cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	431a      	orrs	r2, r3
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052fc:	f021 010c 	bic.w	r1, r1, #12
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800530a:	430b      	orrs	r3, r1
 800530c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531e:	6999      	ldr	r1, [r3, #24]
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	ea40 0301 	orr.w	r3, r0, r1
 800532a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b8f      	ldr	r3, [pc, #572]	@ (8005570 <UART_SetConfig+0x2cc>)
 8005334:	429a      	cmp	r2, r3
 8005336:	d005      	beq.n	8005344 <UART_SetConfig+0xa0>
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4b8d      	ldr	r3, [pc, #564]	@ (8005574 <UART_SetConfig+0x2d0>)
 8005340:	429a      	cmp	r2, r3
 8005342:	d104      	bne.n	800534e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005344:	f7fe ffb8 	bl	80042b8 <HAL_RCC_GetPCLK2Freq>
 8005348:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800534c:	e003      	b.n	8005356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800534e:	f7fe ff9f 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 8005352:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005360:	f040 810c 	bne.w	800557c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005368:	2200      	movs	r2, #0
 800536a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800536e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005376:	4622      	mov	r2, r4
 8005378:	462b      	mov	r3, r5
 800537a:	1891      	adds	r1, r2, r2
 800537c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800537e:	415b      	adcs	r3, r3
 8005380:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005386:	4621      	mov	r1, r4
 8005388:	eb12 0801 	adds.w	r8, r2, r1
 800538c:	4629      	mov	r1, r5
 800538e:	eb43 0901 	adc.w	r9, r3, r1
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800539e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053a6:	4690      	mov	r8, r2
 80053a8:	4699      	mov	r9, r3
 80053aa:	4623      	mov	r3, r4
 80053ac:	eb18 0303 	adds.w	r3, r8, r3
 80053b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053b4:	462b      	mov	r3, r5
 80053b6:	eb49 0303 	adc.w	r3, r9, r3
 80053ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053d2:	460b      	mov	r3, r1
 80053d4:	18db      	adds	r3, r3, r3
 80053d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053d8:	4613      	mov	r3, r2
 80053da:	eb42 0303 	adc.w	r3, r2, r3
 80053de:	657b      	str	r3, [r7, #84]	@ 0x54
 80053e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053e8:	f7fa ff4a 	bl	8000280 <__aeabi_uldivmod>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4b61      	ldr	r3, [pc, #388]	@ (8005578 <UART_SetConfig+0x2d4>)
 80053f2:	fba3 2302 	umull	r2, r3, r3, r2
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	011c      	lsls	r4, r3, #4
 80053fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005404:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800540c:	4642      	mov	r2, r8
 800540e:	464b      	mov	r3, r9
 8005410:	1891      	adds	r1, r2, r2
 8005412:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005414:	415b      	adcs	r3, r3
 8005416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800541c:	4641      	mov	r1, r8
 800541e:	eb12 0a01 	adds.w	sl, r2, r1
 8005422:	4649      	mov	r1, r9
 8005424:	eb43 0b01 	adc.w	fp, r3, r1
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800543c:	4692      	mov	sl, r2
 800543e:	469b      	mov	fp, r3
 8005440:	4643      	mov	r3, r8
 8005442:	eb1a 0303 	adds.w	r3, sl, r3
 8005446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800544a:	464b      	mov	r3, r9
 800544c:	eb4b 0303 	adc.w	r3, fp, r3
 8005450:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005460:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005468:	460b      	mov	r3, r1
 800546a:	18db      	adds	r3, r3, r3
 800546c:	643b      	str	r3, [r7, #64]	@ 0x40
 800546e:	4613      	mov	r3, r2
 8005470:	eb42 0303 	adc.w	r3, r2, r3
 8005474:	647b      	str	r3, [r7, #68]	@ 0x44
 8005476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800547a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800547e:	f7fa feff 	bl	8000280 <__aeabi_uldivmod>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4611      	mov	r1, r2
 8005488:	4b3b      	ldr	r3, [pc, #236]	@ (8005578 <UART_SetConfig+0x2d4>)
 800548a:	fba3 2301 	umull	r2, r3, r3, r1
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2264      	movs	r2, #100	@ 0x64
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	1acb      	subs	r3, r1, r3
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800549e:	4b36      	ldr	r3, [pc, #216]	@ (8005578 <UART_SetConfig+0x2d4>)
 80054a0:	fba3 2302 	umull	r2, r3, r3, r2
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054ac:	441c      	add	r4, r3
 80054ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054c0:	4642      	mov	r2, r8
 80054c2:	464b      	mov	r3, r9
 80054c4:	1891      	adds	r1, r2, r2
 80054c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054c8:	415b      	adcs	r3, r3
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054d0:	4641      	mov	r1, r8
 80054d2:	1851      	adds	r1, r2, r1
 80054d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80054d6:	4649      	mov	r1, r9
 80054d8:	414b      	adcs	r3, r1
 80054da:	637b      	str	r3, [r7, #52]	@ 0x34
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054e8:	4659      	mov	r1, fp
 80054ea:	00cb      	lsls	r3, r1, #3
 80054ec:	4651      	mov	r1, sl
 80054ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f2:	4651      	mov	r1, sl
 80054f4:	00ca      	lsls	r2, r1, #3
 80054f6:	4610      	mov	r0, r2
 80054f8:	4619      	mov	r1, r3
 80054fa:	4603      	mov	r3, r0
 80054fc:	4642      	mov	r2, r8
 80054fe:	189b      	adds	r3, r3, r2
 8005500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005504:	464b      	mov	r3, r9
 8005506:	460a      	mov	r2, r1
 8005508:	eb42 0303 	adc.w	r3, r2, r3
 800550c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800551c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005524:	460b      	mov	r3, r1
 8005526:	18db      	adds	r3, r3, r3
 8005528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800552a:	4613      	mov	r3, r2
 800552c:	eb42 0303 	adc.w	r3, r2, r3
 8005530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800553a:	f7fa fea1 	bl	8000280 <__aeabi_uldivmod>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4b0d      	ldr	r3, [pc, #52]	@ (8005578 <UART_SetConfig+0x2d4>)
 8005544:	fba3 1302 	umull	r1, r3, r3, r2
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	2164      	movs	r1, #100	@ 0x64
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	3332      	adds	r3, #50	@ 0x32
 8005556:	4a08      	ldr	r2, [pc, #32]	@ (8005578 <UART_SetConfig+0x2d4>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	f003 0207 	and.w	r2, r3, #7
 8005562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4422      	add	r2, r4
 800556a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800556c:	e106      	b.n	800577c <UART_SetConfig+0x4d8>
 800556e:	bf00      	nop
 8005570:	40011000 	.word	0x40011000
 8005574:	40011400 	.word	0x40011400
 8005578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800557c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005580:	2200      	movs	r2, #0
 8005582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005586:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800558a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800558e:	4642      	mov	r2, r8
 8005590:	464b      	mov	r3, r9
 8005592:	1891      	adds	r1, r2, r2
 8005594:	6239      	str	r1, [r7, #32]
 8005596:	415b      	adcs	r3, r3
 8005598:	627b      	str	r3, [r7, #36]	@ 0x24
 800559a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800559e:	4641      	mov	r1, r8
 80055a0:	1854      	adds	r4, r2, r1
 80055a2:	4649      	mov	r1, r9
 80055a4:	eb43 0501 	adc.w	r5, r3, r1
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	00eb      	lsls	r3, r5, #3
 80055b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055b6:	00e2      	lsls	r2, r4, #3
 80055b8:	4614      	mov	r4, r2
 80055ba:	461d      	mov	r5, r3
 80055bc:	4643      	mov	r3, r8
 80055be:	18e3      	adds	r3, r4, r3
 80055c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055c4:	464b      	mov	r3, r9
 80055c6:	eb45 0303 	adc.w	r3, r5, r3
 80055ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055ea:	4629      	mov	r1, r5
 80055ec:	008b      	lsls	r3, r1, #2
 80055ee:	4621      	mov	r1, r4
 80055f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055f4:	4621      	mov	r1, r4
 80055f6:	008a      	lsls	r2, r1, #2
 80055f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055fc:	f7fa fe40 	bl	8000280 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4b60      	ldr	r3, [pc, #384]	@ (8005788 <UART_SetConfig+0x4e4>)
 8005606:	fba3 2302 	umull	r2, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	011c      	lsls	r4, r3, #4
 800560e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005612:	2200      	movs	r2, #0
 8005614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005618:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800561c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	1891      	adds	r1, r2, r2
 8005626:	61b9      	str	r1, [r7, #24]
 8005628:	415b      	adcs	r3, r3
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005630:	4641      	mov	r1, r8
 8005632:	1851      	adds	r1, r2, r1
 8005634:	6139      	str	r1, [r7, #16]
 8005636:	4649      	mov	r1, r9
 8005638:	414b      	adcs	r3, r1
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005648:	4659      	mov	r1, fp
 800564a:	00cb      	lsls	r3, r1, #3
 800564c:	4651      	mov	r1, sl
 800564e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005652:	4651      	mov	r1, sl
 8005654:	00ca      	lsls	r2, r1, #3
 8005656:	4610      	mov	r0, r2
 8005658:	4619      	mov	r1, r3
 800565a:	4603      	mov	r3, r0
 800565c:	4642      	mov	r2, r8
 800565e:	189b      	adds	r3, r3, r2
 8005660:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005664:	464b      	mov	r3, r9
 8005666:	460a      	mov	r2, r1
 8005668:	eb42 0303 	adc.w	r3, r2, r3
 800566c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	67bb      	str	r3, [r7, #120]	@ 0x78
 800567a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005688:	4649      	mov	r1, r9
 800568a:	008b      	lsls	r3, r1, #2
 800568c:	4641      	mov	r1, r8
 800568e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005692:	4641      	mov	r1, r8
 8005694:	008a      	lsls	r2, r1, #2
 8005696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800569a:	f7fa fdf1 	bl	8000280 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4611      	mov	r1, r2
 80056a4:	4b38      	ldr	r3, [pc, #224]	@ (8005788 <UART_SetConfig+0x4e4>)
 80056a6:	fba3 2301 	umull	r2, r3, r3, r1
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	2264      	movs	r2, #100	@ 0x64
 80056ae:	fb02 f303 	mul.w	r3, r2, r3
 80056b2:	1acb      	subs	r3, r1, r3
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	3332      	adds	r3, #50	@ 0x32
 80056b8:	4a33      	ldr	r2, [pc, #204]	@ (8005788 <UART_SetConfig+0x4e4>)
 80056ba:	fba2 2303 	umull	r2, r3, r2, r3
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056c4:	441c      	add	r4, r3
 80056c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ca:	2200      	movs	r2, #0
 80056cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80056ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80056d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056d4:	4642      	mov	r2, r8
 80056d6:	464b      	mov	r3, r9
 80056d8:	1891      	adds	r1, r2, r2
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	415b      	adcs	r3, r3
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056e4:	4641      	mov	r1, r8
 80056e6:	1851      	adds	r1, r2, r1
 80056e8:	6039      	str	r1, [r7, #0]
 80056ea:	4649      	mov	r1, r9
 80056ec:	414b      	adcs	r3, r1
 80056ee:	607b      	str	r3, [r7, #4]
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056fc:	4659      	mov	r1, fp
 80056fe:	00cb      	lsls	r3, r1, #3
 8005700:	4651      	mov	r1, sl
 8005702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005706:	4651      	mov	r1, sl
 8005708:	00ca      	lsls	r2, r1, #3
 800570a:	4610      	mov	r0, r2
 800570c:	4619      	mov	r1, r3
 800570e:	4603      	mov	r3, r0
 8005710:	4642      	mov	r2, r8
 8005712:	189b      	adds	r3, r3, r2
 8005714:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005716:	464b      	mov	r3, r9
 8005718:	460a      	mov	r2, r1
 800571a:	eb42 0303 	adc.w	r3, r2, r3
 800571e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	663b      	str	r3, [r7, #96]	@ 0x60
 800572a:	667a      	str	r2, [r7, #100]	@ 0x64
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005738:	4649      	mov	r1, r9
 800573a:	008b      	lsls	r3, r1, #2
 800573c:	4641      	mov	r1, r8
 800573e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005742:	4641      	mov	r1, r8
 8005744:	008a      	lsls	r2, r1, #2
 8005746:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800574a:	f7fa fd99 	bl	8000280 <__aeabi_uldivmod>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4b0d      	ldr	r3, [pc, #52]	@ (8005788 <UART_SetConfig+0x4e4>)
 8005754:	fba3 1302 	umull	r1, r3, r3, r2
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	2164      	movs	r1, #100	@ 0x64
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	3332      	adds	r3, #50	@ 0x32
 8005766:	4a08      	ldr	r2, [pc, #32]	@ (8005788 <UART_SetConfig+0x4e4>)
 8005768:	fba2 2303 	umull	r2, r3, r2, r3
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	f003 020f 	and.w	r2, r3, #15
 8005772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4422      	add	r2, r4
 800577a:	609a      	str	r2, [r3, #8]
}
 800577c:	bf00      	nop
 800577e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005782:	46bd      	mov	sp, r7
 8005784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005788:	51eb851f 	.word	0x51eb851f

0800578c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005792:	4b87      	ldr	r3, [pc, #540]	@ (80059b0 <MX_LWIP_Init+0x224>)
 8005794:	22c0      	movs	r2, #192	@ 0xc0
 8005796:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005798:	4b85      	ldr	r3, [pc, #532]	@ (80059b0 <MX_LWIP_Init+0x224>)
 800579a:	22a8      	movs	r2, #168	@ 0xa8
 800579c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800579e:	4b84      	ldr	r3, [pc, #528]	@ (80059b0 <MX_LWIP_Init+0x224>)
 80057a0:	2201      	movs	r2, #1
 80057a2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 80057a4:	4b82      	ldr	r3, [pc, #520]	@ (80059b0 <MX_LWIP_Init+0x224>)
 80057a6:	2232      	movs	r2, #50	@ 0x32
 80057a8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80057aa:	4b82      	ldr	r3, [pc, #520]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80057ac:	22ff      	movs	r2, #255	@ 0xff
 80057ae:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80057b0:	4b80      	ldr	r3, [pc, #512]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80057b2:	22ff      	movs	r2, #255	@ 0xff
 80057b4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80057b6:	4b7f      	ldr	r3, [pc, #508]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80057b8:	22ff      	movs	r2, #255	@ 0xff
 80057ba:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80057bc:	4b7d      	ldr	r3, [pc, #500]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80057be:	2200      	movs	r2, #0
 80057c0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80057c2:	4b7d      	ldr	r3, [pc, #500]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 80057c4:	22c0      	movs	r2, #192	@ 0xc0
 80057c6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80057c8:	4b7b      	ldr	r3, [pc, #492]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 80057ca:	22a8      	movs	r2, #168	@ 0xa8
 80057cc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80057ce:	4b7a      	ldr	r3, [pc, #488]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80057d4:	4b78      	ldr	r3, [pc, #480]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80057da:	f000 fd02 	bl	80061e2 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80057de:	4b74      	ldr	r3, [pc, #464]	@ (80059b0 <MX_LWIP_Init+0x224>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	061a      	lsls	r2, r3, #24
 80057e4:	4b72      	ldr	r3, [pc, #456]	@ (80059b0 <MX_LWIP_Init+0x224>)
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	431a      	orrs	r2, r3
 80057ec:	4b70      	ldr	r3, [pc, #448]	@ (80059b0 <MX_LWIP_Init+0x224>)
 80057ee:	789b      	ldrb	r3, [r3, #2]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	4313      	orrs	r3, r2
 80057f4:	4a6e      	ldr	r2, [pc, #440]	@ (80059b0 <MX_LWIP_Init+0x224>)
 80057f6:	78d2      	ldrb	r2, [r2, #3]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	061a      	lsls	r2, r3, #24
 80057fc:	4b6c      	ldr	r3, [pc, #432]	@ (80059b0 <MX_LWIP_Init+0x224>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	0619      	lsls	r1, r3, #24
 8005802:	4b6b      	ldr	r3, [pc, #428]	@ (80059b0 <MX_LWIP_Init+0x224>)
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	4319      	orrs	r1, r3
 800580a:	4b69      	ldr	r3, [pc, #420]	@ (80059b0 <MX_LWIP_Init+0x224>)
 800580c:	789b      	ldrb	r3, [r3, #2]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	430b      	orrs	r3, r1
 8005812:	4967      	ldr	r1, [pc, #412]	@ (80059b0 <MX_LWIP_Init+0x224>)
 8005814:	78c9      	ldrb	r1, [r1, #3]
 8005816:	430b      	orrs	r3, r1
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800581e:	431a      	orrs	r2, r3
 8005820:	4b63      	ldr	r3, [pc, #396]	@ (80059b0 <MX_LWIP_Init+0x224>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	0619      	lsls	r1, r3, #24
 8005826:	4b62      	ldr	r3, [pc, #392]	@ (80059b0 <MX_LWIP_Init+0x224>)
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	4319      	orrs	r1, r3
 800582e:	4b60      	ldr	r3, [pc, #384]	@ (80059b0 <MX_LWIP_Init+0x224>)
 8005830:	789b      	ldrb	r3, [r3, #2]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	430b      	orrs	r3, r1
 8005836:	495e      	ldr	r1, [pc, #376]	@ (80059b0 <MX_LWIP_Init+0x224>)
 8005838:	78c9      	ldrb	r1, [r1, #3]
 800583a:	430b      	orrs	r3, r1
 800583c:	0a1b      	lsrs	r3, r3, #8
 800583e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005842:	431a      	orrs	r2, r3
 8005844:	4b5a      	ldr	r3, [pc, #360]	@ (80059b0 <MX_LWIP_Init+0x224>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	0619      	lsls	r1, r3, #24
 800584a:	4b59      	ldr	r3, [pc, #356]	@ (80059b0 <MX_LWIP_Init+0x224>)
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	4319      	orrs	r1, r3
 8005852:	4b57      	ldr	r3, [pc, #348]	@ (80059b0 <MX_LWIP_Init+0x224>)
 8005854:	789b      	ldrb	r3, [r3, #2]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	430b      	orrs	r3, r1
 800585a:	4955      	ldr	r1, [pc, #340]	@ (80059b0 <MX_LWIP_Init+0x224>)
 800585c:	78c9      	ldrb	r1, [r1, #3]
 800585e:	430b      	orrs	r3, r1
 8005860:	0e1b      	lsrs	r3, r3, #24
 8005862:	4313      	orrs	r3, r2
 8005864:	4a55      	ldr	r2, [pc, #340]	@ (80059bc <MX_LWIP_Init+0x230>)
 8005866:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005868:	4b52      	ldr	r3, [pc, #328]	@ (80059b4 <MX_LWIP_Init+0x228>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	061a      	lsls	r2, r3, #24
 800586e:	4b51      	ldr	r3, [pc, #324]	@ (80059b4 <MX_LWIP_Init+0x228>)
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	431a      	orrs	r2, r3
 8005876:	4b4f      	ldr	r3, [pc, #316]	@ (80059b4 <MX_LWIP_Init+0x228>)
 8005878:	789b      	ldrb	r3, [r3, #2]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	4313      	orrs	r3, r2
 800587e:	4a4d      	ldr	r2, [pc, #308]	@ (80059b4 <MX_LWIP_Init+0x228>)
 8005880:	78d2      	ldrb	r2, [r2, #3]
 8005882:	4313      	orrs	r3, r2
 8005884:	061a      	lsls	r2, r3, #24
 8005886:	4b4b      	ldr	r3, [pc, #300]	@ (80059b4 <MX_LWIP_Init+0x228>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	0619      	lsls	r1, r3, #24
 800588c:	4b49      	ldr	r3, [pc, #292]	@ (80059b4 <MX_LWIP_Init+0x228>)
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	041b      	lsls	r3, r3, #16
 8005892:	4319      	orrs	r1, r3
 8005894:	4b47      	ldr	r3, [pc, #284]	@ (80059b4 <MX_LWIP_Init+0x228>)
 8005896:	789b      	ldrb	r3, [r3, #2]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	430b      	orrs	r3, r1
 800589c:	4945      	ldr	r1, [pc, #276]	@ (80059b4 <MX_LWIP_Init+0x228>)
 800589e:	78c9      	ldrb	r1, [r1, #3]
 80058a0:	430b      	orrs	r3, r1
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80058a8:	431a      	orrs	r2, r3
 80058aa:	4b42      	ldr	r3, [pc, #264]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	0619      	lsls	r1, r3, #24
 80058b0:	4b40      	ldr	r3, [pc, #256]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	041b      	lsls	r3, r3, #16
 80058b6:	4319      	orrs	r1, r3
 80058b8:	4b3e      	ldr	r3, [pc, #248]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80058ba:	789b      	ldrb	r3, [r3, #2]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	430b      	orrs	r3, r1
 80058c0:	493c      	ldr	r1, [pc, #240]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80058c2:	78c9      	ldrb	r1, [r1, #3]
 80058c4:	430b      	orrs	r3, r1
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80058cc:	431a      	orrs	r2, r3
 80058ce:	4b39      	ldr	r3, [pc, #228]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	0619      	lsls	r1, r3, #24
 80058d4:	4b37      	ldr	r3, [pc, #220]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	041b      	lsls	r3, r3, #16
 80058da:	4319      	orrs	r1, r3
 80058dc:	4b35      	ldr	r3, [pc, #212]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80058de:	789b      	ldrb	r3, [r3, #2]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	430b      	orrs	r3, r1
 80058e4:	4933      	ldr	r1, [pc, #204]	@ (80059b4 <MX_LWIP_Init+0x228>)
 80058e6:	78c9      	ldrb	r1, [r1, #3]
 80058e8:	430b      	orrs	r3, r1
 80058ea:	0e1b      	lsrs	r3, r3, #24
 80058ec:	4313      	orrs	r3, r2
 80058ee:	4a34      	ldr	r2, [pc, #208]	@ (80059c0 <MX_LWIP_Init+0x234>)
 80058f0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80058f2:	4b31      	ldr	r3, [pc, #196]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	061a      	lsls	r2, r3, #24
 80058f8:	4b2f      	ldr	r3, [pc, #188]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	431a      	orrs	r2, r3
 8005900:	4b2d      	ldr	r3, [pc, #180]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 8005902:	789b      	ldrb	r3, [r3, #2]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	4313      	orrs	r3, r2
 8005908:	4a2b      	ldr	r2, [pc, #172]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 800590a:	78d2      	ldrb	r2, [r2, #3]
 800590c:	4313      	orrs	r3, r2
 800590e:	061a      	lsls	r2, r3, #24
 8005910:	4b29      	ldr	r3, [pc, #164]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	0619      	lsls	r1, r3, #24
 8005916:	4b28      	ldr	r3, [pc, #160]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	041b      	lsls	r3, r3, #16
 800591c:	4319      	orrs	r1, r3
 800591e:	4b26      	ldr	r3, [pc, #152]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 8005920:	789b      	ldrb	r3, [r3, #2]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	430b      	orrs	r3, r1
 8005926:	4924      	ldr	r1, [pc, #144]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 8005928:	78c9      	ldrb	r1, [r1, #3]
 800592a:	430b      	orrs	r3, r1
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005932:	431a      	orrs	r2, r3
 8005934:	4b20      	ldr	r3, [pc, #128]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	0619      	lsls	r1, r3, #24
 800593a:	4b1f      	ldr	r3, [pc, #124]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	4319      	orrs	r1, r3
 8005942:	4b1d      	ldr	r3, [pc, #116]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 8005944:	789b      	ldrb	r3, [r3, #2]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	430b      	orrs	r3, r1
 800594a:	491b      	ldr	r1, [pc, #108]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 800594c:	78c9      	ldrb	r1, [r1, #3]
 800594e:	430b      	orrs	r3, r1
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005956:	431a      	orrs	r2, r3
 8005958:	4b17      	ldr	r3, [pc, #92]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	0619      	lsls	r1, r3, #24
 800595e:	4b16      	ldr	r3, [pc, #88]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	4319      	orrs	r1, r3
 8005966:	4b14      	ldr	r3, [pc, #80]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 8005968:	789b      	ldrb	r3, [r3, #2]
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	430b      	orrs	r3, r1
 800596e:	4912      	ldr	r1, [pc, #72]	@ (80059b8 <MX_LWIP_Init+0x22c>)
 8005970:	78c9      	ldrb	r1, [r1, #3]
 8005972:	430b      	orrs	r3, r1
 8005974:	0e1b      	lsrs	r3, r3, #24
 8005976:	4313      	orrs	r3, r2
 8005978:	4a12      	ldr	r2, [pc, #72]	@ (80059c4 <MX_LWIP_Init+0x238>)
 800597a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800597c:	4b12      	ldr	r3, [pc, #72]	@ (80059c8 <MX_LWIP_Init+0x23c>)
 800597e:	9302      	str	r3, [sp, #8]
 8005980:	4b12      	ldr	r3, [pc, #72]	@ (80059cc <MX_LWIP_Init+0x240>)
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	2300      	movs	r3, #0
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	4b0e      	ldr	r3, [pc, #56]	@ (80059c4 <MX_LWIP_Init+0x238>)
 800598a:	4a0d      	ldr	r2, [pc, #52]	@ (80059c0 <MX_LWIP_Init+0x234>)
 800598c:	490b      	ldr	r1, [pc, #44]	@ (80059bc <MX_LWIP_Init+0x230>)
 800598e:	4810      	ldr	r0, [pc, #64]	@ (80059d0 <MX_LWIP_Init+0x244>)
 8005990:	f001 f912 	bl	8006bb8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005994:	480e      	ldr	r0, [pc, #56]	@ (80059d0 <MX_LWIP_Init+0x244>)
 8005996:	f001 fac1 	bl	8006f1c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800599a:	480d      	ldr	r0, [pc, #52]	@ (80059d0 <MX_LWIP_Init+0x244>)
 800599c:	f001 face 	bl	8006f3c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80059a0:	490c      	ldr	r1, [pc, #48]	@ (80059d4 <MX_LWIP_Init+0x248>)
 80059a2:	480b      	ldr	r0, [pc, #44]	@ (80059d0 <MX_LWIP_Init+0x244>)
 80059a4:	f001 fbcc 	bl	8007140 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80059a8:	bf00      	nop
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000320 	.word	0x20000320
 80059b4:	20000324 	.word	0x20000324
 80059b8:	20000328 	.word	0x20000328
 80059bc:	20000314 	.word	0x20000314
 80059c0:	20000318 	.word	0x20000318
 80059c4:	2000031c 	.word	0x2000031c
 80059c8:	0801069d 	.word	0x0801069d
 80059cc:	08005cf5 	.word	0x08005cf5
 80059d0:	200002e0 	.word	0x200002e0
 80059d4:	08005a29 	.word	0x08005a29

080059d8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80059e0:	f7fb fe3e 	bl	8001660 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	4b08      	ldr	r3, [pc, #32]	@ (8005a08 <Ethernet_Link_Periodic_Handle+0x30>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b63      	cmp	r3, #99	@ 0x63
 80059ee:	d907      	bls.n	8005a00 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80059f0:	f7fb fe36 	bl	8001660 <HAL_GetTick>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4a04      	ldr	r2, [pc, #16]	@ (8005a08 <Ethernet_Link_Periodic_Handle+0x30>)
 80059f8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fac6 	bl	8005f8c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005a00:	bf00      	nop
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	200002dc 	.word	0x200002dc

08005a0c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005a10:	4804      	ldr	r0, [pc, #16]	@ (8005a24 <MX_LWIP_Process+0x18>)
 8005a12:	f000 f94f 	bl	8005cb4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005a16:	f008 fa55 	bl	800dec4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005a1a:	4802      	ldr	r0, [pc, #8]	@ (8005a24 <MX_LWIP_Process+0x18>)
 8005a1c:	f7ff ffdc 	bl	80059d8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005a20:	bf00      	nop
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	200002e0 	.word	0x200002e0

08005a28 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005a48:	4b44      	ldr	r3, [pc, #272]	@ (8005b5c <low_level_init+0x120>)
 8005a4a:	4a45      	ldr	r2, [pc, #276]	@ (8005b60 <low_level_init+0x124>)
 8005a4c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005a52:	2380      	movs	r3, #128	@ 0x80
 8005a54:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005a56:	23e1      	movs	r3, #225	@ 0xe1
 8005a58:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005a62:	2300      	movs	r3, #0
 8005a64:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005a66:	4a3d      	ldr	r2, [pc, #244]	@ (8005b5c <low_level_init+0x120>)
 8005a68:	f107 0308 	add.w	r3, r7, #8
 8005a6c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b5c <low_level_init+0x120>)
 8005a70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005a74:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005a76:	4b39      	ldr	r3, [pc, #228]	@ (8005b5c <low_level_init+0x120>)
 8005a78:	4a3a      	ldr	r2, [pc, #232]	@ (8005b64 <low_level_init+0x128>)
 8005a7a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005a7c:	4b37      	ldr	r3, [pc, #220]	@ (8005b5c <low_level_init+0x120>)
 8005a7e:	4a3a      	ldr	r2, [pc, #232]	@ (8005b68 <low_level_init+0x12c>)
 8005a80:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005a82:	4b36      	ldr	r3, [pc, #216]	@ (8005b5c <low_level_init+0x120>)
 8005a84:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005a88:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005a8a:	4834      	ldr	r0, [pc, #208]	@ (8005b5c <low_level_init+0x120>)
 8005a8c:	f7fc fba6 	bl	80021dc <HAL_ETH_Init>
 8005a90:	4603      	mov	r3, r0
 8005a92:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005a94:	2238      	movs	r2, #56	@ 0x38
 8005a96:	2100      	movs	r1, #0
 8005a98:	4834      	ldr	r0, [pc, #208]	@ (8005b6c <low_level_init+0x130>)
 8005a9a:	f00c fc22 	bl	80122e2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005a9e:	4b33      	ldr	r3, [pc, #204]	@ (8005b6c <low_level_init+0x130>)
 8005aa0:	2221      	movs	r2, #33	@ 0x21
 8005aa2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005aa4:	4b31      	ldr	r3, [pc, #196]	@ (8005b6c <low_level_init+0x130>)
 8005aa6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005aaa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005aac:	4b2f      	ldr	r3, [pc, #188]	@ (8005b6c <low_level_init+0x130>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005ab2:	482f      	ldr	r0, [pc, #188]	@ (8005b70 <low_level_init+0x134>)
 8005ab4:	f000 ff48 	bl	8006948 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2206      	movs	r2, #6
 8005abc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005ac0:	4b26      	ldr	r3, [pc, #152]	@ (8005b5c <low_level_init+0x120>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005acc:	4b23      	ldr	r3, [pc, #140]	@ (8005b5c <low_level_init+0x120>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	785a      	ldrb	r2, [r3, #1]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005ad8:	4b20      	ldr	r3, [pc, #128]	@ (8005b5c <low_level_init+0x120>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	789a      	ldrb	r2, [r3, #2]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b5c <low_level_init+0x120>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	78da      	ldrb	r2, [r3, #3]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005af0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b5c <low_level_init+0x120>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	791a      	ldrb	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005afc:	4b17      	ldr	r3, [pc, #92]	@ (8005b5c <low_level_init+0x120>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	795a      	ldrb	r2, [r3, #5]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005b0e:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b16:	f043 030a 	orr.w	r3, r3, #10
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005b22:	4914      	ldr	r1, [pc, #80]	@ (8005b74 <low_level_init+0x138>)
 8005b24:	4814      	ldr	r0, [pc, #80]	@ (8005b78 <low_level_init+0x13c>)
 8005b26:	f7fb fc2e 	bl	8001386 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005b2a:	4813      	ldr	r0, [pc, #76]	@ (8005b78 <low_level_init+0x13c>)
 8005b2c:	f7fb fc5d 	bl	80013ea <LAN8742_Init>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d006      	beq.n	8005b44 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f001 fad2 	bl	80070e0 <netif_set_link_down>
    netif_set_down(netif);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 fa69 	bl	8007014 <netif_set_down>
 8005b42:	e008      	b.n	8005b56 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa1e 	bl	8005f8c <ethernet_link_check_state>
 8005b50:	e001      	b.n	8005b56 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8005b52:	f7fb f82d 	bl	8000bb0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20004df8 	.word	0x20004df8
 8005b60:	40028000 	.word	0x40028000
 8005b64:	20004d58 	.word	0x20004d58
 8005b68:	20004cb8 	.word	0x20004cb8
 8005b6c:	20004ea8 	.word	0x20004ea8
 8005b70:	08015f58 	.word	0x08015f58
 8005b74:	2000000c 	.word	0x2000000c
 8005b78:	20004ee0 	.word	0x20004ee0

08005b7c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b092      	sub	sp, #72	@ 0x48
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005b94:	f107 030c 	add.w	r3, r7, #12
 8005b98:	2230      	movs	r2, #48	@ 0x30
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f00c fba0 	bl	80122e2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005ba2:	f107 030c 	add.w	r3, r7, #12
 8005ba6:	2230      	movs	r2, #48	@ 0x30
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f00c fb99 	bl	80122e2 <memset>

  for(q = p; q != NULL; q = q->next)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb4:	e045      	b.n	8005c42 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d902      	bls.n	8005bc2 <low_level_output+0x46>
      return ERR_IF;
 8005bbc:	f06f 030b 	mvn.w	r3, #11
 8005bc0:	e055      	b.n	8005c6e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bc4:	6859      	ldr	r1, [r3, #4]
 8005bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc8:	4613      	mov	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	3348      	adds	r3, #72	@ 0x48
 8005bd2:	443b      	add	r3, r7
 8005bd4:	3b3c      	subs	r3, #60	@ 0x3c
 8005bd6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bda:	895b      	ldrh	r3, [r3, #10]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005be0:	4613      	mov	r3, r2
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	3348      	adds	r3, #72	@ 0x48
 8005bea:	443b      	add	r3, r7
 8005bec:	3b38      	subs	r3, #56	@ 0x38
 8005bee:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d011      	beq.n	8005c1a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bf8:	1e5a      	subs	r2, r3, #1
 8005bfa:	f107 000c 	add.w	r0, r7, #12
 8005bfe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c00:	460b      	mov	r3, r1
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	440b      	add	r3, r1
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	18c1      	adds	r1, r0, r3
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	3348      	adds	r3, #72	@ 0x48
 8005c14:	443b      	add	r3, r7
 8005c16:	3b34      	subs	r3, #52	@ 0x34
 8005c18:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005c22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c24:	4613      	mov	r3, r2
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	3348      	adds	r3, #72	@ 0x48
 8005c2e:	443b      	add	r3, r7
 8005c30:	3b34      	subs	r3, #52	@ 0x34
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c38:	3301      	adds	r3, #1
 8005c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1b6      	bne.n	8005bb6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	891b      	ldrh	r3, [r3, #8]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <low_level_output+0xfc>)
 8005c50:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005c52:	4a09      	ldr	r2, [pc, #36]	@ (8005c78 <low_level_output+0xfc>)
 8005c54:	f107 030c 	add.w	r3, r7, #12
 8005c58:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005c5a:	4a07      	ldr	r2, [pc, #28]	@ (8005c78 <low_level_output+0xfc>)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005c60:	2214      	movs	r2, #20
 8005c62:	4905      	ldr	r1, [pc, #20]	@ (8005c78 <low_level_output+0xfc>)
 8005c64:	4805      	ldr	r0, [pc, #20]	@ (8005c7c <low_level_output+0x100>)
 8005c66:	f7fc fc44 	bl	80024f2 <HAL_ETH_Transmit>

  return errval;
 8005c6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3748      	adds	r7, #72	@ 0x48
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20004ea8 	.word	0x20004ea8
 8005c7c:	20004df8 	.word	0x20004df8

08005c80 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005c8c:	4b07      	ldr	r3, [pc, #28]	@ (8005cac <low_level_input+0x2c>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d105      	bne.n	8005ca0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005c94:	f107 030c 	add.w	r3, r7, #12
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4805      	ldr	r0, [pc, #20]	@ (8005cb0 <low_level_input+0x30>)
 8005c9c:	f7fc fcbd 	bl	800261a <HAL_ETH_ReadData>
  }

  return p;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20004cb4 	.word	0x20004cb4
 8005cb0:	20004df8 	.word	0x20004df8

08005cb4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff ffdd 	bl	8005c80 <low_level_input>
 8005cc6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	4798      	blx	r3
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f001 fdae 	bl	8007840 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1ea      	bne.n	8005cc0 <ethernetif_input+0xc>
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <ethernetif_init+0x1c>
 8005d02:	4b0e      	ldr	r3, [pc, #56]	@ (8005d3c <ethernetif_init+0x48>)
 8005d04:	f240 126f 	movw	r2, #367	@ 0x16f
 8005d08:	490d      	ldr	r1, [pc, #52]	@ (8005d40 <ethernetif_init+0x4c>)
 8005d0a:	480e      	ldr	r0, [pc, #56]	@ (8005d44 <ethernetif_init+0x50>)
 8005d0c:	f00c fa34 	bl	8012178 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2273      	movs	r2, #115	@ 0x73
 8005d14:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2274      	movs	r2, #116	@ 0x74
 8005d1c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a09      	ldr	r2, [pc, #36]	@ (8005d48 <ethernetif_init+0x54>)
 8005d24:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a08      	ldr	r2, [pc, #32]	@ (8005d4c <ethernetif_init+0x58>)
 8005d2a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff fe85 	bl	8005a3c <low_level_init>

  return ERR_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	0801340c 	.word	0x0801340c
 8005d40:	08013428 	.word	0x08013428
 8005d44:	08013438 	.word	0x08013438
 8005d48:	0800eb55 	.word	0x0800eb55
 8005d4c:	08005b7d 	.word	0x08005b7d

08005d50 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005d5c:	68f9      	ldr	r1, [r7, #12]
 8005d5e:	4807      	ldr	r0, [pc, #28]	@ (8005d7c <pbuf_free_custom+0x2c>)
 8005d60:	f000 fed4 	bl	8006b0c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005d64:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <pbuf_free_custom+0x30>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d102      	bne.n	8005d72 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005d6c:	4b04      	ldr	r3, [pc, #16]	@ (8005d80 <pbuf_free_custom+0x30>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	701a      	strb	r2, [r3, #0]
  }
}
 8005d72:	bf00      	nop
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	08015f58 	.word	0x08015f58
 8005d80:	20004cb4 	.word	0x20004cb4

08005d84 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d88:	f7fb fc6a 	bl	8001660 <HAL_GetTick>
 8005d8c:	4603      	mov	r3, r0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08e      	sub	sp, #56	@ 0x38
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a4a      	ldr	r2, [pc, #296]	@ (8005edc <HAL_ETH_MspInit+0x148>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	f040 808d 	bne.w	8005ed2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005db8:	2300      	movs	r3, #0
 8005dba:	623b      	str	r3, [r7, #32]
 8005dbc:	4b48      	ldr	r3, [pc, #288]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc0:	4a47      	ldr	r2, [pc, #284]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005dc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dc8:	4b45      	ldr	r3, [pc, #276]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd0:	623b      	str	r3, [r7, #32]
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	4b41      	ldr	r3, [pc, #260]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ddc:	4a40      	ldr	r2, [pc, #256]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005dde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005de4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df8:	4a39      	ldr	r2, [pc, #228]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005dfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e00:	4b37      	ldr	r3, [pc, #220]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	4b33      	ldr	r3, [pc, #204]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e14:	4a32      	ldr	r2, [pc, #200]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005e16:	f043 0304 	orr.w	r3, r3, #4
 8005e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e1c:	4b30      	ldr	r3, [pc, #192]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e30:	4a2b      	ldr	r2, [pc, #172]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005e32:	f043 0301 	orr.w	r3, r3, #1
 8005e36:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e38:	4b29      	ldr	r3, [pc, #164]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	4b25      	ldr	r3, [pc, #148]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4c:	4a24      	ldr	r2, [pc, #144]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005e4e:	f043 0302 	orr.w	r3, r3, #2
 8005e52:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e54:	4b22      	ldr	r3, [pc, #136]	@ (8005ee0 <HAL_ETH_MspInit+0x14c>)
 8005e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005e60:	2332      	movs	r3, #50	@ 0x32
 8005e62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e64:	2302      	movs	r3, #2
 8005e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e70:	230b      	movs	r3, #11
 8005e72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e78:	4619      	mov	r1, r3
 8005e7a:	481a      	ldr	r0, [pc, #104]	@ (8005ee4 <HAL_ETH_MspInit+0x150>)
 8005e7c:	f7fd fbfe 	bl	800367c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005e80:	2386      	movs	r3, #134	@ 0x86
 8005e82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e84:	2302      	movs	r3, #2
 8005e86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e90:	230b      	movs	r3, #11
 8005e92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4813      	ldr	r0, [pc, #76]	@ (8005ee8 <HAL_ETH_MspInit+0x154>)
 8005e9c:	f7fd fbee 	bl	800367c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005ea0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005eb2:	230b      	movs	r3, #11
 8005eb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005eba:	4619      	mov	r1, r3
 8005ebc:	480b      	ldr	r0, [pc, #44]	@ (8005eec <HAL_ETH_MspInit+0x158>)
 8005ebe:	f7fd fbdd 	bl	800367c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	203d      	movs	r0, #61	@ 0x3d
 8005ec8:	f7fc f951 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005ecc:	203d      	movs	r0, #61	@ 0x3d
 8005ece:	f7fc f96a 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005ed2:	bf00      	nop
 8005ed4:	3738      	adds	r7, #56	@ 0x38
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40028000 	.word	0x40028000
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	40020800 	.word	0x40020800
 8005ee8:	40020000 	.word	0x40020000
 8005eec:	40020400 	.word	0x40020400

08005ef0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005ef4:	4802      	ldr	r0, [pc, #8]	@ (8005f00 <ETH_PHY_IO_Init+0x10>)
 8005ef6:	f7fc ff5d 	bl	8002db4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20004df8 	.word	0x20004df8

08005f04 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  return 0;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	68f9      	ldr	r1, [r7, #12]
 8005f26:	4807      	ldr	r0, [pc, #28]	@ (8005f44 <ETH_PHY_IO_ReadReg+0x30>)
 8005f28:	f7fc fd9e 	bl	8002a68 <HAL_ETH_ReadPHYRegister>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	e000      	b.n	8005f3a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20004df8 	.word	0x20004df8

08005f48 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	68f9      	ldr	r1, [r7, #12]
 8005f5a:	4807      	ldr	r0, [pc, #28]	@ (8005f78 <ETH_PHY_IO_WriteReg+0x30>)
 8005f5c:	f7fc fdcf 	bl	8002afe <HAL_ETH_WritePHYRegister>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005f66:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6a:	e000      	b.n	8005f6e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20004df8 	.word	0x20004df8

08005f7c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f80:	f7fb fb6e 	bl	8001660 <HAL_GetTick>
 8005f84:	4603      	mov	r3, r0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b0a0      	sub	sp, #128	@ 0x80
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005f94:	f107 030c 	add.w	r3, r7, #12
 8005f98:	2264      	movs	r2, #100	@ 0x64
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f00c f9a0 	bl	80122e2 <memset>
  int32_t PHYLinkState = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005faa:	2300      	movs	r3, #0
 8005fac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fae:	2300      	movs	r3, #0
 8005fb0:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005fb2:	483a      	ldr	r0, [pc, #232]	@ (800609c <ethernet_link_check_state+0x110>)
 8005fb4:	f7fb fa66 	bl	8001484 <LAN8742_GetLinkState>
 8005fb8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005fc0:	089b      	lsrs	r3, r3, #2
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00c      	beq.n	8005fe6 <ethernet_link_check_state+0x5a>
 8005fcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	dc09      	bgt.n	8005fe6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8005fd2:	4833      	ldr	r0, [pc, #204]	@ (80060a0 <ethernet_link_check_state+0x114>)
 8005fd4:	f7fc fa0e 	bl	80023f4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 f81b 	bl	8007014 <netif_set_down>
    netif_set_link_down(netif);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f001 f87e 	bl	80070e0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005fe4:	e055      	b.n	8006092 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d14e      	bne.n	8006092 <ethernet_link_check_state+0x106>
 8005ff4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	dd4b      	ble.n	8006092 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8005ffa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ffc:	3b02      	subs	r3, #2
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d82a      	bhi.n	8006058 <ethernet_link_check_state+0xcc>
 8006002:	a201      	add	r2, pc, #4	@ (adr r2, 8006008 <ethernet_link_check_state+0x7c>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	08006019 	.word	0x08006019
 800600c:	0800602b 	.word	0x0800602b
 8006010:	0800603b 	.word	0x0800603b
 8006014:	0800604b 	.word	0x0800604b
      duplex = ETH_FULLDUPLEX_MODE;
 8006018:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800601c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800601e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006022:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006024:	2301      	movs	r3, #1
 8006026:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006028:	e017      	b.n	800605a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800602a:	2300      	movs	r3, #0
 800602c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800602e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006032:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006034:	2301      	movs	r3, #1
 8006036:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006038:	e00f      	b.n	800605a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800603a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800603e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006040:	2300      	movs	r3, #0
 8006042:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006044:	2301      	movs	r3, #1
 8006046:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006048:	e007      	b.n	800605a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800604a:	2300      	movs	r3, #0
 800604c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800604e:	2300      	movs	r3, #0
 8006050:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006052:	2301      	movs	r3, #1
 8006054:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006056:	e000      	b.n	800605a <ethernet_link_check_state+0xce>
      break;
 8006058:	bf00      	nop
    if(linkchanged)
 800605a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d018      	beq.n	8006092 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	4619      	mov	r1, r3
 8006066:	480e      	ldr	r0, [pc, #56]	@ (80060a0 <ethernet_link_check_state+0x114>)
 8006068:	f7fc fd92 	bl	8002b90 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800606c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006072:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006074:	f107 030c 	add.w	r3, r7, #12
 8006078:	4619      	mov	r1, r3
 800607a:	4809      	ldr	r0, [pc, #36]	@ (80060a0 <ethernet_link_check_state+0x114>)
 800607c:	f7fc fe7f 	bl	8002d7e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006080:	4807      	ldr	r0, [pc, #28]	@ (80060a0 <ethernet_link_check_state+0x114>)
 8006082:	f7fc f947 	bl	8002314 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 ff58 	bl	8006f3c <netif_set_up>
      netif_set_link_up(netif);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fff3 	bl	8007078 <netif_set_link_up>
}
 8006092:	bf00      	nop
 8006094:	3780      	adds	r7, #128	@ 0x80
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20004ee0 	.word	0x20004ee0
 80060a0:	20004df8 	.word	0x20004df8

080060a4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80060ac:	4812      	ldr	r0, [pc, #72]	@ (80060f8 <HAL_ETH_RxAllocateCallback+0x54>)
 80060ae:	f000 fcbf 	bl	8006a30 <memp_malloc_pool>
 80060b2:	60f8      	str	r0, [r7, #12]
  if (p)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d014      	beq.n	80060e4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f103 0220 	add.w	r2, r3, #32
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4a0d      	ldr	r2, [pc, #52]	@ (80060fc <HAL_ETH_RxAllocateCallback+0x58>)
 80060c8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80060d2:	9201      	str	r2, [sp, #4]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2241      	movs	r2, #65	@ 0x41
 80060da:	2100      	movs	r1, #0
 80060dc:	2000      	movs	r0, #0
 80060de:	f001 f9f5 	bl	80074cc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80060e2:	e005      	b.n	80060f0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80060e4:	4b06      	ldr	r3, [pc, #24]	@ (8006100 <HAL_ETH_RxAllocateCallback+0x5c>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
}
 80060f0:	bf00      	nop
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	08015f58 	.word	0x08015f58
 80060fc:	08005d51 	.word	0x08005d51
 8006100:	20004cb4 	.word	0x20004cb4

08006104 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006104:	b480      	push	{r7}
 8006106:	b089      	sub	sp, #36	@ 0x24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3b20      	subs	r3, #32
 8006122:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	2200      	movs	r2, #0
 800612e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	887a      	ldrh	r2, [r7, #2]
 8006134:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e003      	b.n	800614e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	e009      	b.n	8006170 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	891a      	ldrh	r2, [r3, #8]
 8006160:	887b      	ldrh	r3, [r7, #2]
 8006162:	4413      	add	r3, r2
 8006164:	b29a      	uxth	r2, r3
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f2      	bne.n	800615c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006176:	bf00      	nop
 8006178:	bf00      	nop
 800617a:	3724      	adds	r7, #36	@ 0x24
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800618e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	b21a      	sxth	r2, r3
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	0a1b      	lsrs	r3, r3, #8
 800619a:	b29b      	uxth	r3, r3
 800619c:	b21b      	sxth	r3, r3
 800619e:	4313      	orrs	r3, r2
 80061a0:	b21b      	sxth	r3, r3
 80061a2:	b29b      	uxth	r3, r3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	061a      	lsls	r2, r3, #24
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	0e1b      	lsrs	r3, r3, #24
 80061d4:	4313      	orrs	r3, r2
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80061ec:	f000 f8d4 	bl	8006398 <mem_init>
  memp_init();
 80061f0:	f000 fbda 	bl	80069a8 <memp_init>
  pbuf_init();
  netif_init();
 80061f4:	f000 fcd8 	bl	8006ba8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80061f8:	f007 fea6 	bl	800df48 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80061fc:	f001 fdae 	bl	8007d5c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006200:	f007 fe18 	bl	800de34 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006216:	4b05      	ldr	r3, [pc, #20]	@ (800622c <ptr_to_mem+0x20>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	4413      	add	r3, r2
}
 800621e:	4618      	mov	r0, r3
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	2000556c 	.word	0x2000556c

08006230 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006238:	4b05      	ldr	r3, [pc, #20]	@ (8006250 <mem_to_ptr+0x20>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	b29b      	uxth	r3, r3
}
 8006242:	4618      	mov	r0, r3
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	2000556c 	.word	0x2000556c

08006254 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006254:	b590      	push	{r4, r7, lr}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800625c:	4b45      	ldr	r3, [pc, #276]	@ (8006374 <plug_holes+0x120>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	429a      	cmp	r2, r3
 8006264:	d206      	bcs.n	8006274 <plug_holes+0x20>
 8006266:	4b44      	ldr	r3, [pc, #272]	@ (8006378 <plug_holes+0x124>)
 8006268:	f240 12df 	movw	r2, #479	@ 0x1df
 800626c:	4943      	ldr	r1, [pc, #268]	@ (800637c <plug_holes+0x128>)
 800626e:	4844      	ldr	r0, [pc, #272]	@ (8006380 <plug_holes+0x12c>)
 8006270:	f00b ff82 	bl	8012178 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006274:	4b43      	ldr	r3, [pc, #268]	@ (8006384 <plug_holes+0x130>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	429a      	cmp	r2, r3
 800627c:	d306      	bcc.n	800628c <plug_holes+0x38>
 800627e:	4b3e      	ldr	r3, [pc, #248]	@ (8006378 <plug_holes+0x124>)
 8006280:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006284:	4940      	ldr	r1, [pc, #256]	@ (8006388 <plug_holes+0x134>)
 8006286:	483e      	ldr	r0, [pc, #248]	@ (8006380 <plug_holes+0x12c>)
 8006288:	f00b ff76 	bl	8012178 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	791b      	ldrb	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d006      	beq.n	80062a2 <plug_holes+0x4e>
 8006294:	4b38      	ldr	r3, [pc, #224]	@ (8006378 <plug_holes+0x124>)
 8006296:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800629a:	493c      	ldr	r1, [pc, #240]	@ (800638c <plug_holes+0x138>)
 800629c:	4838      	ldr	r0, [pc, #224]	@ (8006380 <plug_holes+0x12c>)
 800629e:	f00b ff6b 	bl	8012178 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80062aa:	d906      	bls.n	80062ba <plug_holes+0x66>
 80062ac:	4b32      	ldr	r3, [pc, #200]	@ (8006378 <plug_holes+0x124>)
 80062ae:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80062b2:	4937      	ldr	r1, [pc, #220]	@ (8006390 <plug_holes+0x13c>)
 80062b4:	4832      	ldr	r0, [pc, #200]	@ (8006380 <plug_holes+0x12c>)
 80062b6:	f00b ff5f 	bl	8012178 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff ffa4 	bl	800620c <ptr_to_mem>
 80062c4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d024      	beq.n	8006318 <plug_holes+0xc4>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	791b      	ldrb	r3, [r3, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d120      	bne.n	8006318 <plug_holes+0xc4>
 80062d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006384 <plug_holes+0x130>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d01b      	beq.n	8006318 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80062e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006394 <plug_holes+0x140>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d102      	bne.n	80062f0 <plug_holes+0x9c>
      lfree = mem;
 80062ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006394 <plug_holes+0x140>)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	881a      	ldrh	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006300:	d00a      	beq.n	8006318 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff ff80 	bl	800620c <ptr_to_mem>
 800630c:	4604      	mov	r4, r0
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff ff8e 	bl	8006230 <mem_to_ptr>
 8006314:	4603      	mov	r3, r0
 8006316:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	885b      	ldrh	r3, [r3, #2]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff ff75 	bl	800620c <ptr_to_mem>
 8006322:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	429a      	cmp	r2, r3
 800632a:	d01f      	beq.n	800636c <plug_holes+0x118>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	791b      	ldrb	r3, [r3, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d11b      	bne.n	800636c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006334:	4b17      	ldr	r3, [pc, #92]	@ (8006394 <plug_holes+0x140>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	429a      	cmp	r2, r3
 800633c:	d102      	bne.n	8006344 <plug_holes+0xf0>
      lfree = pmem;
 800633e:	4a15      	ldr	r2, [pc, #84]	@ (8006394 <plug_holes+0x140>)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	881a      	ldrh	r2, [r3, #0]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006354:	d00a      	beq.n	800636c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff ff56 	bl	800620c <ptr_to_mem>
 8006360:	4604      	mov	r4, r0
 8006362:	68b8      	ldr	r0, [r7, #8]
 8006364:	f7ff ff64 	bl	8006230 <mem_to_ptr>
 8006368:	4603      	mov	r3, r0
 800636a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800636c:	bf00      	nop
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	bd90      	pop	{r4, r7, pc}
 8006374:	2000556c 	.word	0x2000556c
 8006378:	08013460 	.word	0x08013460
 800637c:	08013490 	.word	0x08013490
 8006380:	080134a8 	.word	0x080134a8
 8006384:	20005570 	.word	0x20005570
 8006388:	080134d0 	.word	0x080134d0
 800638c:	080134ec 	.word	0x080134ec
 8006390:	08013508 	.word	0x08013508
 8006394:	20005574 	.word	0x20005574

08006398 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800639e:	4b18      	ldr	r3, [pc, #96]	@ (8006400 <mem_init+0x68>)
 80063a0:	3303      	adds	r3, #3
 80063a2:	f023 0303 	bic.w	r3, r3, #3
 80063a6:	461a      	mov	r2, r3
 80063a8:	4b16      	ldr	r3, [pc, #88]	@ (8006404 <mem_init+0x6c>)
 80063aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80063ac:	4b15      	ldr	r3, [pc, #84]	@ (8006404 <mem_init+0x6c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80063b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80063c6:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80063ca:	f7ff ff1f 	bl	800620c <ptr_to_mem>
 80063ce:	4603      	mov	r3, r0
 80063d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006408 <mem_init+0x70>)
 80063d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80063d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006408 <mem_init+0x70>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2201      	movs	r2, #1
 80063da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80063dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006408 <mem_init+0x70>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80063e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80063e6:	4b08      	ldr	r3, [pc, #32]	@ (8006408 <mem_init+0x70>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80063ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80063f0:	4b04      	ldr	r3, [pc, #16]	@ (8006404 <mem_init+0x6c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a05      	ldr	r2, [pc, #20]	@ (800640c <mem_init+0x74>)
 80063f6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20004f18 	.word	0x20004f18
 8006404:	2000556c 	.word	0x2000556c
 8006408:	20005570 	.word	0x20005570
 800640c:	20005574 	.word	0x20005574

08006410 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff ff09 	bl	8006230 <mem_to_ptr>
 800641e:	4603      	mov	r3, r0
 8006420:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff fef0 	bl	800620c <ptr_to_mem>
 800642c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	885b      	ldrh	r3, [r3, #2]
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff feea 	bl	800620c <ptr_to_mem>
 8006438:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006442:	d818      	bhi.n	8006476 <mem_link_valid+0x66>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	885b      	ldrh	r3, [r3, #2]
 8006448:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800644c:	d813      	bhi.n	8006476 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006452:	8afa      	ldrh	r2, [r7, #22]
 8006454:	429a      	cmp	r2, r3
 8006456:	d004      	beq.n	8006462 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	8afa      	ldrh	r2, [r7, #22]
 800645e:	429a      	cmp	r2, r3
 8006460:	d109      	bne.n	8006476 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006462:	4b08      	ldr	r3, [pc, #32]	@ (8006484 <mem_link_valid+0x74>)
 8006464:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	429a      	cmp	r2, r3
 800646a:	d006      	beq.n	800647a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	885b      	ldrh	r3, [r3, #2]
 8006470:	8afa      	ldrh	r2, [r7, #22]
 8006472:	429a      	cmp	r2, r3
 8006474:	d001      	beq.n	800647a <mem_link_valid+0x6a>
    return 0;
 8006476:	2300      	movs	r3, #0
 8006478:	e000      	b.n	800647c <mem_link_valid+0x6c>
  }
  return 1;
 800647a:	2301      	movs	r3, #1
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20005570 	.word	0x20005570

08006488 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d04c      	beq.n	8006530 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80064a0:	4b25      	ldr	r3, [pc, #148]	@ (8006538 <mem_free+0xb0>)
 80064a2:	f240 2273 	movw	r2, #627	@ 0x273
 80064a6:	4925      	ldr	r1, [pc, #148]	@ (800653c <mem_free+0xb4>)
 80064a8:	4825      	ldr	r0, [pc, #148]	@ (8006540 <mem_free+0xb8>)
 80064aa:	f00b fe65 	bl	8012178 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80064ae:	e040      	b.n	8006532 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3b08      	subs	r3, #8
 80064b4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80064b6:	4b23      	ldr	r3, [pc, #140]	@ (8006544 <mem_free+0xbc>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d306      	bcc.n	80064ce <mem_free+0x46>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f103 020c 	add.w	r2, r3, #12
 80064c6:	4b20      	ldr	r3, [pc, #128]	@ (8006548 <mem_free+0xc0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d907      	bls.n	80064de <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80064ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006538 <mem_free+0xb0>)
 80064d0:	f240 227f 	movw	r2, #639	@ 0x27f
 80064d4:	491d      	ldr	r1, [pc, #116]	@ (800654c <mem_free+0xc4>)
 80064d6:	481a      	ldr	r0, [pc, #104]	@ (8006540 <mem_free+0xb8>)
 80064d8:	f00b fe4e 	bl	8012178 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80064dc:	e029      	b.n	8006532 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	791b      	ldrb	r3, [r3, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d107      	bne.n	80064f6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80064e6:	4b14      	ldr	r3, [pc, #80]	@ (8006538 <mem_free+0xb0>)
 80064e8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80064ec:	4918      	ldr	r1, [pc, #96]	@ (8006550 <mem_free+0xc8>)
 80064ee:	4814      	ldr	r0, [pc, #80]	@ (8006540 <mem_free+0xb8>)
 80064f0:	f00b fe42 	bl	8012178 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80064f4:	e01d      	b.n	8006532 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f7ff ff8a 	bl	8006410 <mem_link_valid>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006502:	4b0d      	ldr	r3, [pc, #52]	@ (8006538 <mem_free+0xb0>)
 8006504:	f240 2295 	movw	r2, #661	@ 0x295
 8006508:	4912      	ldr	r1, [pc, #72]	@ (8006554 <mem_free+0xcc>)
 800650a:	480d      	ldr	r0, [pc, #52]	@ (8006540 <mem_free+0xb8>)
 800650c:	f00b fe34 	bl	8012178 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006510:	e00f      	b.n	8006532 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006518:	4b0f      	ldr	r3, [pc, #60]	@ (8006558 <mem_free+0xd0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	429a      	cmp	r2, r3
 8006520:	d202      	bcs.n	8006528 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006522:	4a0d      	ldr	r2, [pc, #52]	@ (8006558 <mem_free+0xd0>)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f7ff fe93 	bl	8006254 <plug_holes>
 800652e:	e000      	b.n	8006532 <mem_free+0xaa>
    return;
 8006530:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	08013460 	.word	0x08013460
 800653c:	08013534 	.word	0x08013534
 8006540:	080134a8 	.word	0x080134a8
 8006544:	2000556c 	.word	0x2000556c
 8006548:	20005570 	.word	0x20005570
 800654c:	08013558 	.word	0x08013558
 8006550:	08013574 	.word	0x08013574
 8006554:	0801359c 	.word	0x0801359c
 8006558:	20005574 	.word	0x20005574

0800655c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006568:	887b      	ldrh	r3, [r7, #2]
 800656a:	3303      	adds	r3, #3
 800656c:	b29b      	uxth	r3, r3
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006574:	8bfb      	ldrh	r3, [r7, #30]
 8006576:	2b0b      	cmp	r3, #11
 8006578:	d801      	bhi.n	800657e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800657a:	230c      	movs	r3, #12
 800657c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800657e:	8bfb      	ldrh	r3, [r7, #30]
 8006580:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006584:	d803      	bhi.n	800658e <mem_trim+0x32>
 8006586:	8bfa      	ldrh	r2, [r7, #30]
 8006588:	887b      	ldrh	r3, [r7, #2]
 800658a:	429a      	cmp	r2, r3
 800658c:	d201      	bcs.n	8006592 <mem_trim+0x36>
    return NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	e0cc      	b.n	800672c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006592:	4b68      	ldr	r3, [pc, #416]	@ (8006734 <mem_trim+0x1d8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	429a      	cmp	r2, r3
 800659a:	d304      	bcc.n	80065a6 <mem_trim+0x4a>
 800659c:	4b66      	ldr	r3, [pc, #408]	@ (8006738 <mem_trim+0x1dc>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d306      	bcc.n	80065b4 <mem_trim+0x58>
 80065a6:	4b65      	ldr	r3, [pc, #404]	@ (800673c <mem_trim+0x1e0>)
 80065a8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80065ac:	4964      	ldr	r1, [pc, #400]	@ (8006740 <mem_trim+0x1e4>)
 80065ae:	4865      	ldr	r0, [pc, #404]	@ (8006744 <mem_trim+0x1e8>)
 80065b0:	f00b fde2 	bl	8012178 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80065b4:	4b5f      	ldr	r3, [pc, #380]	@ (8006734 <mem_trim+0x1d8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d304      	bcc.n	80065c8 <mem_trim+0x6c>
 80065be:	4b5e      	ldr	r3, [pc, #376]	@ (8006738 <mem_trim+0x1dc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d301      	bcc.n	80065cc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	e0af      	b.n	800672c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3b08      	subs	r3, #8
 80065d0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80065d2:	69b8      	ldr	r0, [r7, #24]
 80065d4:	f7ff fe2c 	bl	8006230 <mem_to_ptr>
 80065d8:	4603      	mov	r3, r0
 80065da:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	881a      	ldrh	r2, [r3, #0]
 80065e0:	8afb      	ldrh	r3, [r7, #22]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b08      	subs	r3, #8
 80065e8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80065ea:	8bfa      	ldrh	r2, [r7, #30]
 80065ec:	8abb      	ldrh	r3, [r7, #20]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d906      	bls.n	8006600 <mem_trim+0xa4>
 80065f2:	4b52      	ldr	r3, [pc, #328]	@ (800673c <mem_trim+0x1e0>)
 80065f4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80065f8:	4953      	ldr	r1, [pc, #332]	@ (8006748 <mem_trim+0x1ec>)
 80065fa:	4852      	ldr	r0, [pc, #328]	@ (8006744 <mem_trim+0x1e8>)
 80065fc:	f00b fdbc 	bl	8012178 <iprintf>
  if (newsize > size) {
 8006600:	8bfa      	ldrh	r2, [r7, #30]
 8006602:	8abb      	ldrh	r3, [r7, #20]
 8006604:	429a      	cmp	r2, r3
 8006606:	d901      	bls.n	800660c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006608:	2300      	movs	r3, #0
 800660a:	e08f      	b.n	800672c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800660c:	8bfa      	ldrh	r2, [r7, #30]
 800660e:	8abb      	ldrh	r3, [r7, #20]
 8006610:	429a      	cmp	r2, r3
 8006612:	d101      	bne.n	8006618 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	e089      	b.n	800672c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fdf5 	bl	800620c <ptr_to_mem>
 8006622:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	791b      	ldrb	r3, [r3, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d13f      	bne.n	80066ac <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006634:	d106      	bne.n	8006644 <mem_trim+0xe8>
 8006636:	4b41      	ldr	r3, [pc, #260]	@ (800673c <mem_trim+0x1e0>)
 8006638:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800663c:	4943      	ldr	r1, [pc, #268]	@ (800674c <mem_trim+0x1f0>)
 800663e:	4841      	ldr	r0, [pc, #260]	@ (8006744 <mem_trim+0x1e8>)
 8006640:	f00b fd9a 	bl	8012178 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800664a:	8afa      	ldrh	r2, [r7, #22]
 800664c:	8bfb      	ldrh	r3, [r7, #30]
 800664e:	4413      	add	r3, r2
 8006650:	b29b      	uxth	r3, r3
 8006652:	3308      	adds	r3, #8
 8006654:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006656:	4b3e      	ldr	r3, [pc, #248]	@ (8006750 <mem_trim+0x1f4>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	429a      	cmp	r2, r3
 800665e:	d106      	bne.n	800666e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006660:	89fb      	ldrh	r3, [r7, #14]
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff fdd2 	bl	800620c <ptr_to_mem>
 8006668:	4603      	mov	r3, r0
 800666a:	4a39      	ldr	r2, [pc, #228]	@ (8006750 <mem_trim+0x1f4>)
 800666c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800666e:	89fb      	ldrh	r3, [r7, #14]
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff fdcb 	bl	800620c <ptr_to_mem>
 8006676:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2200      	movs	r2, #0
 800667c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	89ba      	ldrh	r2, [r7, #12]
 8006682:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	8afa      	ldrh	r2, [r7, #22]
 8006688:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	89fa      	ldrh	r2, [r7, #14]
 800668e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006698:	d047      	beq.n	800672a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff fdb4 	bl	800620c <ptr_to_mem>
 80066a4:	4602      	mov	r2, r0
 80066a6:	89fb      	ldrh	r3, [r7, #14]
 80066a8:	8053      	strh	r3, [r2, #2]
 80066aa:	e03e      	b.n	800672a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80066ac:	8bfb      	ldrh	r3, [r7, #30]
 80066ae:	f103 0214 	add.w	r2, r3, #20
 80066b2:	8abb      	ldrh	r3, [r7, #20]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d838      	bhi.n	800672a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80066b8:	8afa      	ldrh	r2, [r7, #22]
 80066ba:	8bfb      	ldrh	r3, [r7, #30]
 80066bc:	4413      	add	r3, r2
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3308      	adds	r3, #8
 80066c2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80066cc:	d106      	bne.n	80066dc <mem_trim+0x180>
 80066ce:	4b1b      	ldr	r3, [pc, #108]	@ (800673c <mem_trim+0x1e0>)
 80066d0:	f240 3216 	movw	r2, #790	@ 0x316
 80066d4:	491d      	ldr	r1, [pc, #116]	@ (800674c <mem_trim+0x1f0>)
 80066d6:	481b      	ldr	r0, [pc, #108]	@ (8006744 <mem_trim+0x1e8>)
 80066d8:	f00b fd4e 	bl	8012178 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80066dc:	89fb      	ldrh	r3, [r7, #14]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff fd94 	bl	800620c <ptr_to_mem>
 80066e4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80066e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006750 <mem_trim+0x1f4>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d202      	bcs.n	80066f6 <mem_trim+0x19a>
      lfree = mem2;
 80066f0:	4a17      	ldr	r2, [pc, #92]	@ (8006750 <mem_trim+0x1f4>)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2200      	movs	r2, #0
 80066fa:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	881a      	ldrh	r2, [r3, #0]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	8afa      	ldrh	r2, [r7, #22]
 8006708:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	89fa      	ldrh	r2, [r7, #14]
 800670e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006718:	d007      	beq.n	800672a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fd74 	bl	800620c <ptr_to_mem>
 8006724:	4602      	mov	r2, r0
 8006726:	89fb      	ldrh	r3, [r7, #14]
 8006728:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800672a:	687b      	ldr	r3, [r7, #4]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	2000556c 	.word	0x2000556c
 8006738:	20005570 	.word	0x20005570
 800673c:	08013460 	.word	0x08013460
 8006740:	080135d0 	.word	0x080135d0
 8006744:	080134a8 	.word	0x080134a8
 8006748:	080135e8 	.word	0x080135e8
 800674c:	08013608 	.word	0x08013608
 8006750:	20005574 	.word	0x20005574

08006754 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <mem_malloc+0x14>
    return NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	e0d9      	b.n	800691c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	3303      	adds	r3, #3
 800676c:	b29b      	uxth	r3, r3
 800676e:	f023 0303 	bic.w	r3, r3, #3
 8006772:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006774:	8bbb      	ldrh	r3, [r7, #28]
 8006776:	2b0b      	cmp	r3, #11
 8006778:	d801      	bhi.n	800677e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800677a:	230c      	movs	r3, #12
 800677c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800677e:	8bbb      	ldrh	r3, [r7, #28]
 8006780:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006784:	d803      	bhi.n	800678e <mem_malloc+0x3a>
 8006786:	8bba      	ldrh	r2, [r7, #28]
 8006788:	88fb      	ldrh	r3, [r7, #6]
 800678a:	429a      	cmp	r2, r3
 800678c:	d201      	bcs.n	8006792 <mem_malloc+0x3e>
    return NULL;
 800678e:	2300      	movs	r3, #0
 8006790:	e0c4      	b.n	800691c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006792:	4b64      	ldr	r3, [pc, #400]	@ (8006924 <mem_malloc+0x1d0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fd4a 	bl	8006230 <mem_to_ptr>
 800679c:	4603      	mov	r3, r0
 800679e:	83fb      	strh	r3, [r7, #30]
 80067a0:	e0b4      	b.n	800690c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80067a2:	8bfb      	ldrh	r3, [r7, #30]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fd31 	bl	800620c <ptr_to_mem>
 80067aa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	791b      	ldrb	r3, [r3, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f040 80a4 	bne.w	80068fe <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	8bfb      	ldrh	r3, [r7, #30]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	f1a3 0208 	sub.w	r2, r3, #8
 80067c4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80067c6:	429a      	cmp	r2, r3
 80067c8:	f0c0 8099 	bcc.w	80068fe <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	8bfb      	ldrh	r3, [r7, #30]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f1a3 0208 	sub.w	r2, r3, #8
 80067da:	8bbb      	ldrh	r3, [r7, #28]
 80067dc:	3314      	adds	r3, #20
 80067de:	429a      	cmp	r2, r3
 80067e0:	d333      	bcc.n	800684a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80067e2:	8bfa      	ldrh	r2, [r7, #30]
 80067e4:	8bbb      	ldrh	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3308      	adds	r3, #8
 80067ec:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80067ee:	8a7b      	ldrh	r3, [r7, #18]
 80067f0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80067f4:	d106      	bne.n	8006804 <mem_malloc+0xb0>
 80067f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006928 <mem_malloc+0x1d4>)
 80067f8:	f240 3287 	movw	r2, #903	@ 0x387
 80067fc:	494b      	ldr	r1, [pc, #300]	@ (800692c <mem_malloc+0x1d8>)
 80067fe:	484c      	ldr	r0, [pc, #304]	@ (8006930 <mem_malloc+0x1dc>)
 8006800:	f00b fcba 	bl	8012178 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006804:	8a7b      	ldrh	r3, [r7, #18]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff fd00 	bl	800620c <ptr_to_mem>
 800680c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	881a      	ldrh	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8bfa      	ldrh	r2, [r7, #30]
 8006820:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	8a7a      	ldrh	r2, [r7, #18]
 8006826:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2201      	movs	r2, #1
 800682c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006836:	d00b      	beq.n	8006850 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff fce5 	bl	800620c <ptr_to_mem>
 8006842:	4602      	mov	r2, r0
 8006844:	8a7b      	ldrh	r3, [r7, #18]
 8006846:	8053      	strh	r3, [r2, #2]
 8006848:	e002      	b.n	8006850 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2201      	movs	r2, #1
 800684e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006850:	4b34      	ldr	r3, [pc, #208]	@ (8006924 <mem_malloc+0x1d0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	429a      	cmp	r2, r3
 8006858:	d127      	bne.n	80068aa <mem_malloc+0x156>
          struct mem *cur = lfree;
 800685a:	4b32      	ldr	r3, [pc, #200]	@ (8006924 <mem_malloc+0x1d0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006860:	e005      	b.n	800686e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff fcd0 	bl	800620c <ptr_to_mem>
 800686c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	791b      	ldrb	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <mem_malloc+0x12c>
 8006876:	4b2f      	ldr	r3, [pc, #188]	@ (8006934 <mem_malloc+0x1e0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	429a      	cmp	r2, r3
 800687e:	d1f0      	bne.n	8006862 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006880:	4a28      	ldr	r2, [pc, #160]	@ (8006924 <mem_malloc+0x1d0>)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006886:	4b27      	ldr	r3, [pc, #156]	@ (8006924 <mem_malloc+0x1d0>)
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	4b2a      	ldr	r3, [pc, #168]	@ (8006934 <mem_malloc+0x1e0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	429a      	cmp	r2, r3
 8006890:	d00b      	beq.n	80068aa <mem_malloc+0x156>
 8006892:	4b24      	ldr	r3, [pc, #144]	@ (8006924 <mem_malloc+0x1d0>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	791b      	ldrb	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d006      	beq.n	80068aa <mem_malloc+0x156>
 800689c:	4b22      	ldr	r3, [pc, #136]	@ (8006928 <mem_malloc+0x1d4>)
 800689e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80068a2:	4925      	ldr	r1, [pc, #148]	@ (8006938 <mem_malloc+0x1e4>)
 80068a4:	4822      	ldr	r0, [pc, #136]	@ (8006930 <mem_malloc+0x1dc>)
 80068a6:	f00b fc67 	bl	8012178 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80068aa:	8bba      	ldrh	r2, [r7, #28]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	4413      	add	r3, r2
 80068b0:	3308      	adds	r3, #8
 80068b2:	4a20      	ldr	r2, [pc, #128]	@ (8006934 <mem_malloc+0x1e0>)
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d906      	bls.n	80068c8 <mem_malloc+0x174>
 80068ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006928 <mem_malloc+0x1d4>)
 80068bc:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80068c0:	491e      	ldr	r1, [pc, #120]	@ (800693c <mem_malloc+0x1e8>)
 80068c2:	481b      	ldr	r0, [pc, #108]	@ (8006930 <mem_malloc+0x1dc>)
 80068c4:	f00b fc58 	bl	8012178 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d006      	beq.n	80068e0 <mem_malloc+0x18c>
 80068d2:	4b15      	ldr	r3, [pc, #84]	@ (8006928 <mem_malloc+0x1d4>)
 80068d4:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80068d8:	4919      	ldr	r1, [pc, #100]	@ (8006940 <mem_malloc+0x1ec>)
 80068da:	4815      	ldr	r0, [pc, #84]	@ (8006930 <mem_malloc+0x1dc>)
 80068dc:	f00b fc4c 	bl	8012178 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d006      	beq.n	80068f8 <mem_malloc+0x1a4>
 80068ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006928 <mem_malloc+0x1d4>)
 80068ec:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80068f0:	4914      	ldr	r1, [pc, #80]	@ (8006944 <mem_malloc+0x1f0>)
 80068f2:	480f      	ldr	r0, [pc, #60]	@ (8006930 <mem_malloc+0x1dc>)
 80068f4:	f00b fc40 	bl	8012178 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	3308      	adds	r3, #8
 80068fc:	e00e      	b.n	800691c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80068fe:	8bfb      	ldrh	r3, [r7, #30]
 8006900:	4618      	mov	r0, r3
 8006902:	f7ff fc83 	bl	800620c <ptr_to_mem>
 8006906:	4603      	mov	r3, r0
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800690c:	8bfa      	ldrh	r2, [r7, #30]
 800690e:	8bbb      	ldrh	r3, [r7, #28]
 8006910:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8006914:	429a      	cmp	r2, r3
 8006916:	f4ff af44 	bcc.w	80067a2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3720      	adds	r7, #32
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20005574 	.word	0x20005574
 8006928:	08013460 	.word	0x08013460
 800692c:	08013608 	.word	0x08013608
 8006930:	080134a8 	.word	0x080134a8
 8006934:	20005570 	.word	0x20005570
 8006938:	0801361c 	.word	0x0801361c
 800693c:	08013638 	.word	0x08013638
 8006940:	08013668 	.word	0x08013668
 8006944:	08013698 	.word	0x08013698

08006948 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	3303      	adds	r3, #3
 800695e:	f023 0303 	bic.w	r3, r3, #3
 8006962:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e011      	b.n	800698e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	4413      	add	r3, r2
 8006986:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	885b      	ldrh	r3, [r3, #2]
 8006992:	461a      	mov	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4293      	cmp	r3, r2
 8006998:	dbe7      	blt.n	800696a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800699a:	bf00      	nop
 800699c:	bf00      	nop
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80069ae:	2300      	movs	r3, #0
 80069b0:	80fb      	strh	r3, [r7, #6]
 80069b2:	e009      	b.n	80069c8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80069b4:	88fb      	ldrh	r3, [r7, #6]
 80069b6:	4a08      	ldr	r2, [pc, #32]	@ (80069d8 <memp_init+0x30>)
 80069b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff ffc3 	bl	8006948 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	3301      	adds	r3, #1
 80069c6:	80fb      	strh	r3, [r7, #6]
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d9f2      	bls.n	80069b4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	08015fd0 	.word	0x08015fd0

080069dc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d012      	beq.n	8006a18 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d006      	beq.n	8006a14 <do_memp_malloc_pool+0x38>
 8006a06:	4b07      	ldr	r3, [pc, #28]	@ (8006a24 <do_memp_malloc_pool+0x48>)
 8006a08:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006a0c:	4906      	ldr	r1, [pc, #24]	@ (8006a28 <do_memp_malloc_pool+0x4c>)
 8006a0e:	4807      	ldr	r0, [pc, #28]	@ (8006a2c <do_memp_malloc_pool+0x50>)
 8006a10:	f00b fbb2 	bl	8012178 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	e000      	b.n	8006a1a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	080136bc 	.word	0x080136bc
 8006a28:	080136ec 	.word	0x080136ec
 8006a2c:	08013710 	.word	0x08013710

08006a30 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <memp_malloc_pool+0x1c>
 8006a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a68 <memp_malloc_pool+0x38>)
 8006a40:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006a44:	4909      	ldr	r1, [pc, #36]	@ (8006a6c <memp_malloc_pool+0x3c>)
 8006a46:	480a      	ldr	r0, [pc, #40]	@ (8006a70 <memp_malloc_pool+0x40>)
 8006a48:	f00b fb96 	bl	8012178 <iprintf>
  if (desc == NULL) {
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <memp_malloc_pool+0x26>
    return NULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e003      	b.n	8006a5e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff ffc0 	bl	80069dc <do_memp_malloc_pool>
 8006a5c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	080136bc 	.word	0x080136bc
 8006a6c:	08013738 	.word	0x08013738
 8006a70:	08013710 	.word	0x08013710

08006a74 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d908      	bls.n	8006a96 <memp_malloc+0x22>
 8006a84:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab0 <memp_malloc+0x3c>)
 8006a86:	f240 1257 	movw	r2, #343	@ 0x157
 8006a8a:	490a      	ldr	r1, [pc, #40]	@ (8006ab4 <memp_malloc+0x40>)
 8006a8c:	480a      	ldr	r0, [pc, #40]	@ (8006ab8 <memp_malloc+0x44>)
 8006a8e:	f00b fb73 	bl	8012178 <iprintf>
 8006a92:	2300      	movs	r3, #0
 8006a94:	e008      	b.n	8006aa8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	4a08      	ldr	r2, [pc, #32]	@ (8006abc <memp_malloc+0x48>)
 8006a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff ff9c 	bl	80069dc <do_memp_malloc_pool>
 8006aa4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	080136bc 	.word	0x080136bc
 8006ab4:	0801374c 	.word	0x0801374c
 8006ab8:	08013710 	.word	0x08013710
 8006abc:	08015fd0 	.word	0x08015fd0

08006ac0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d006      	beq.n	8006ae2 <do_memp_free_pool+0x22>
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b00 <do_memp_free_pool+0x40>)
 8006ad6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006ada:	490a      	ldr	r1, [pc, #40]	@ (8006b04 <do_memp_free_pool+0x44>)
 8006adc:	480a      	ldr	r0, [pc, #40]	@ (8006b08 <do_memp_free_pool+0x48>)
 8006ade:	f00b fb4b 	bl	8012178 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	080136bc 	.word	0x080136bc
 8006b04:	0801376c 	.word	0x0801376c
 8006b08:	08013710 	.word	0x08013710

08006b0c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d106      	bne.n	8006b2a <memp_free_pool+0x1e>
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <memp_free_pool+0x3c>)
 8006b1e:	f240 1295 	movw	r2, #405	@ 0x195
 8006b22:	490a      	ldr	r1, [pc, #40]	@ (8006b4c <memp_free_pool+0x40>)
 8006b24:	480a      	ldr	r0, [pc, #40]	@ (8006b50 <memp_free_pool+0x44>)
 8006b26:	f00b fb27 	bl	8012178 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <memp_free_pool+0x34>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff ffc1 	bl	8006ac0 <do_memp_free_pool>
 8006b3e:	e000      	b.n	8006b42 <memp_free_pool+0x36>
    return;
 8006b40:	bf00      	nop
}
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	080136bc 	.word	0x080136bc
 8006b4c:	08013738 	.word	0x08013738
 8006b50:	08013710 	.word	0x08013710

08006b54 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	6039      	str	r1, [r7, #0]
 8006b5e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	2b08      	cmp	r3, #8
 8006b64:	d907      	bls.n	8006b76 <memp_free+0x22>
 8006b66:	4b0c      	ldr	r3, [pc, #48]	@ (8006b98 <memp_free+0x44>)
 8006b68:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006b6c:	490b      	ldr	r1, [pc, #44]	@ (8006b9c <memp_free+0x48>)
 8006b6e:	480c      	ldr	r0, [pc, #48]	@ (8006ba0 <memp_free+0x4c>)
 8006b70:	f00b fb02 	bl	8012178 <iprintf>
 8006b74:	e00c      	b.n	8006b90 <memp_free+0x3c>

  if (mem == NULL) {
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d008      	beq.n	8006b8e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	4a09      	ldr	r2, [pc, #36]	@ (8006ba4 <memp_free+0x50>)
 8006b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff ff9a 	bl	8006ac0 <do_memp_free_pool>
 8006b8c:	e000      	b.n	8006b90 <memp_free+0x3c>
    return;
 8006b8e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	080136bc 	.word	0x080136bc
 8006b9c:	0801378c 	.word	0x0801378c
 8006ba0:	08013710 	.word	0x08013710
 8006ba4:	08015fd0 	.word	0x08015fd0

08006ba8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006bac:	bf00      	nop
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
	...

08006bb8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d108      	bne.n	8006bde <netif_add+0x26>
 8006bcc:	4b57      	ldr	r3, [pc, #348]	@ (8006d2c <netif_add+0x174>)
 8006bce:	f240 1227 	movw	r2, #295	@ 0x127
 8006bd2:	4957      	ldr	r1, [pc, #348]	@ (8006d30 <netif_add+0x178>)
 8006bd4:	4857      	ldr	r0, [pc, #348]	@ (8006d34 <netif_add+0x17c>)
 8006bd6:	f00b facf 	bl	8012178 <iprintf>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e0a2      	b.n	8006d24 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d108      	bne.n	8006bf6 <netif_add+0x3e>
 8006be4:	4b51      	ldr	r3, [pc, #324]	@ (8006d2c <netif_add+0x174>)
 8006be6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006bea:	4953      	ldr	r1, [pc, #332]	@ (8006d38 <netif_add+0x180>)
 8006bec:	4851      	ldr	r0, [pc, #324]	@ (8006d34 <netif_add+0x17c>)
 8006bee:	f00b fac3 	bl	8012178 <iprintf>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e096      	b.n	8006d24 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8006d3c <netif_add+0x184>)
 8006bfe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006c06:	4b4d      	ldr	r3, [pc, #308]	@ (8006d3c <netif_add+0x184>)
 8006c08:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006c10:	4b4a      	ldr	r3, [pc, #296]	@ (8006d3c <netif_add+0x184>)
 8006c12:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4a45      	ldr	r2, [pc, #276]	@ (8006d40 <netif_add+0x188>)
 8006c2a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a3a      	ldr	r2, [r7, #32]
 8006c44:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006c46:	4b3f      	ldr	r3, [pc, #252]	@ (8006d44 <netif_add+0x18c>)
 8006c48:	781a      	ldrb	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c54:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f913 	bl	8006e88 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	4798      	blx	r3
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <netif_add+0xba>
    return NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e058      	b.n	8006d24 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c78:	2bff      	cmp	r3, #255	@ 0xff
 8006c7a:	d103      	bne.n	8006c84 <netif_add+0xcc>
        netif->num = 0;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006c88:	4b2f      	ldr	r3, [pc, #188]	@ (8006d48 <netif_add+0x190>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e02b      	b.n	8006ce8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d106      	bne.n	8006ca6 <netif_add+0xee>
 8006c98:	4b24      	ldr	r3, [pc, #144]	@ (8006d2c <netif_add+0x174>)
 8006c9a:	f240 128b 	movw	r2, #395	@ 0x18b
 8006c9e:	492b      	ldr	r1, [pc, #172]	@ (8006d4c <netif_add+0x194>)
 8006ca0:	4824      	ldr	r0, [pc, #144]	@ (8006d34 <netif_add+0x17c>)
 8006ca2:	f00b fa69 	bl	8012178 <iprintf>
        num_netifs++;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2bff      	cmp	r3, #255	@ 0xff
 8006cb0:	dd06      	ble.n	8006cc0 <netif_add+0x108>
 8006cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d2c <netif_add+0x174>)
 8006cb4:	f240 128d 	movw	r2, #397	@ 0x18d
 8006cb8:	4925      	ldr	r1, [pc, #148]	@ (8006d50 <netif_add+0x198>)
 8006cba:	481e      	ldr	r0, [pc, #120]	@ (8006d34 <netif_add+0x17c>)
 8006cbc:	f00b fa5c 	bl	8012178 <iprintf>
        if (netif2->num == netif->num) {
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d108      	bne.n	8006ce2 <netif_add+0x12a>
          netif->num++;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8006ce0:	e005      	b.n	8006cee <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	617b      	str	r3, [r7, #20]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1d0      	bne.n	8006c90 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1be      	bne.n	8006c72 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cfa:	2bfe      	cmp	r3, #254	@ 0xfe
 8006cfc:	d103      	bne.n	8006d06 <netif_add+0x14e>
    netif_num = 0;
 8006cfe:	4b11      	ldr	r3, [pc, #68]	@ (8006d44 <netif_add+0x18c>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	e006      	b.n	8006d14 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	4b0c      	ldr	r3, [pc, #48]	@ (8006d44 <netif_add+0x18c>)
 8006d12:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006d14:	4b0c      	ldr	r3, [pc, #48]	@ (8006d48 <netif_add+0x190>)
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d48 <netif_add+0x190>)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006d22:	68fb      	ldr	r3, [r7, #12]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	080137a8 	.word	0x080137a8
 8006d30:	0801383c 	.word	0x0801383c
 8006d34:	080137f8 	.word	0x080137f8
 8006d38:	08013858 	.word	0x08013858
 8006d3c:	08016034 	.word	0x08016034
 8006d40:	08007163 	.word	0x08007163
 8006d44:	2000846c 	.word	0x2000846c
 8006d48:	20008464 	.word	0x20008464
 8006d4c:	0801387c 	.word	0x0801387c
 8006d50:	08013890 	.word	0x08013890

08006d54 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f002 fd41 	bl	80097e8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f007 fa77 	bl	800e25c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <netif_do_set_ipaddr+0x20>
 8006d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006e00 <netif_do_set_ipaddr+0x88>)
 8006d8c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006d90:	491c      	ldr	r1, [pc, #112]	@ (8006e04 <netif_do_set_ipaddr+0x8c>)
 8006d92:	481d      	ldr	r0, [pc, #116]	@ (8006e08 <netif_do_set_ipaddr+0x90>)
 8006d94:	f00b f9f0 	bl	8012178 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <netif_do_set_ipaddr+0x34>
 8006d9e:	4b18      	ldr	r3, [pc, #96]	@ (8006e00 <netif_do_set_ipaddr+0x88>)
 8006da0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006da4:	4917      	ldr	r1, [pc, #92]	@ (8006e04 <netif_do_set_ipaddr+0x8c>)
 8006da6:	4818      	ldr	r0, [pc, #96]	@ (8006e08 <netif_do_set_ipaddr+0x90>)
 8006da8:	f00b f9e6 	bl	8012178 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3304      	adds	r3, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d01c      	beq.n	8006df4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006dca:	f107 0314 	add.w	r3, r7, #20
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff ffbf 	bl	8006d54 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <netif_do_set_ipaddr+0x6a>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	e000      	b.n	8006de4 <netif_do_set_ipaddr+0x6c>
 8006de2:	2300      	movs	r3, #0
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006de8:	2101      	movs	r1, #1
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f8d2 	bl	8006f94 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	080137a8 	.word	0x080137a8
 8006e04:	080138c0 	.word	0x080138c0
 8006e08:	080137f8 	.word	0x080137f8

08006e0c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d00a      	beq.n	8006e3c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <netif_do_set_netmask+0x26>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	e000      	b.n	8006e34 <netif_do_set_netmask+0x28>
 8006e32:	2300      	movs	r3, #0
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e000      	b.n	8006e3e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	330c      	adds	r3, #12
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d00a      	beq.n	8006e7a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <netif_do_set_gw+0x26>
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	e000      	b.n	8006e72 <netif_do_set_gw+0x28>
 8006e70:	2300      	movs	r3, #0
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8006f18 <netif_set_addr+0x90>)
 8006ea6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006eae:	4b1a      	ldr	r3, [pc, #104]	@ (8006f18 <netif_set_addr+0x90>)
 8006eb0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006eb8:	4b17      	ldr	r3, [pc, #92]	@ (8006f18 <netif_set_addr+0x90>)
 8006eba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <netif_set_addr+0x42>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <netif_set_addr+0x46>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <netif_set_addr+0x48>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d006      	beq.n	8006ee6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006ed8:	f107 0310 	add.w	r3, r7, #16
 8006edc:	461a      	mov	r2, r3
 8006ede:	68b9      	ldr	r1, [r7, #8]
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff ff49 	bl	8006d78 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7ff ff8e 	bl	8006e0c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff ffa8 	bl	8006e4a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d106      	bne.n	8006f0e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006f00:	f107 0310 	add.w	r3, r7, #16
 8006f04:	461a      	mov	r2, r3
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff ff35 	bl	8006d78 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006f0e:	bf00      	nop
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	08016034 	.word	0x08016034

08006f1c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006f24:	4a04      	ldr	r2, [pc, #16]	@ (8006f38 <netif_set_default+0x1c>)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20008468 	.word	0x20008468

08006f3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d107      	bne.n	8006f5a <netif_set_up+0x1e>
 8006f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f88 <netif_set_up+0x4c>)
 8006f4c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006f50:	490e      	ldr	r1, [pc, #56]	@ (8006f8c <netif_set_up+0x50>)
 8006f52:	480f      	ldr	r0, [pc, #60]	@ (8006f90 <netif_set_up+0x54>)
 8006f54:	f00b f910 	bl	8012178 <iprintf>
 8006f58:	e013      	b.n	8006f82 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10c      	bne.n	8006f82 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006f6e:	f043 0301 	orr.w	r3, r3, #1
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006f7a:	2103      	movs	r1, #3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f809 	bl	8006f94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	080137a8 	.word	0x080137a8
 8006f8c:	08013930 	.word	0x08013930
 8006f90:	080137f8 	.word	0x080137f8

08006f94 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d106      	bne.n	8006fb4 <netif_issue_reports+0x20>
 8006fa6:	4b18      	ldr	r3, [pc, #96]	@ (8007008 <netif_issue_reports+0x74>)
 8006fa8:	f240 326d 	movw	r2, #877	@ 0x36d
 8006fac:	4917      	ldr	r1, [pc, #92]	@ (800700c <netif_issue_reports+0x78>)
 8006fae:	4818      	ldr	r0, [pc, #96]	@ (8007010 <netif_issue_reports+0x7c>)
 8006fb0:	f00b f8e2 	bl	8012178 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01e      	beq.n	8007000 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006fc8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d017      	beq.n	8007000 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d013      	beq.n	8007002 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00e      	beq.n	8007002 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f008 f899 	bl	800f130 <etharp_request>
 8006ffe:	e000      	b.n	8007002 <netif_issue_reports+0x6e>
    return;
 8007000:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	080137a8 	.word	0x080137a8
 800700c:	0801394c 	.word	0x0801394c
 8007010:	080137f8 	.word	0x080137f8

08007014 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d107      	bne.n	8007032 <netif_set_down+0x1e>
 8007022:	4b12      	ldr	r3, [pc, #72]	@ (800706c <netif_set_down+0x58>)
 8007024:	f240 329b 	movw	r2, #923	@ 0x39b
 8007028:	4911      	ldr	r1, [pc, #68]	@ (8007070 <netif_set_down+0x5c>)
 800702a:	4812      	ldr	r0, [pc, #72]	@ (8007074 <netif_set_down+0x60>)
 800702c:	f00b f8a4 	bl	8012178 <iprintf>
 8007030:	e019      	b.n	8007066 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d012      	beq.n	8007066 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007046:	f023 0301 	bic.w	r3, r3, #1
 800704a:	b2da      	uxtb	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f007 fc23 	bl	800e8ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	080137a8 	.word	0x080137a8
 8007070:	08013970 	.word	0x08013970
 8007074:	080137f8 	.word	0x080137f8

08007078 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d107      	bne.n	8007096 <netif_set_link_up+0x1e>
 8007086:	4b13      	ldr	r3, [pc, #76]	@ (80070d4 <netif_set_link_up+0x5c>)
 8007088:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800708c:	4912      	ldr	r1, [pc, #72]	@ (80070d8 <netif_set_link_up+0x60>)
 800708e:	4813      	ldr	r0, [pc, #76]	@ (80070dc <netif_set_link_up+0x64>)
 8007090:	f00b f872 	bl	8012178 <iprintf>
 8007094:	e01b      	b.n	80070ce <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d114      	bne.n	80070ce <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80070aa:	f043 0304 	orr.w	r3, r3, #4
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80070b6:	2103      	movs	r1, #3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff ff6b 	bl	8006f94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <netif_set_link_up+0x56>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	080137a8 	.word	0x080137a8
 80070d8:	08013990 	.word	0x08013990
 80070dc:	080137f8 	.word	0x080137f8

080070e0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d107      	bne.n	80070fe <netif_set_link_down+0x1e>
 80070ee:	4b11      	ldr	r3, [pc, #68]	@ (8007134 <netif_set_link_down+0x54>)
 80070f0:	f240 4206 	movw	r2, #1030	@ 0x406
 80070f4:	4910      	ldr	r1, [pc, #64]	@ (8007138 <netif_set_link_down+0x58>)
 80070f6:	4811      	ldr	r0, [pc, #68]	@ (800713c <netif_set_link_down+0x5c>)
 80070f8:	f00b f83e 	bl	8012178 <iprintf>
 80070fc:	e017      	b.n	800712e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d010      	beq.n	800712e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007112:	f023 0304 	bic.w	r3, r3, #4
 8007116:	b2da      	uxtb	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <netif_set_link_down+0x4e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	080137a8 	.word	0x080137a8
 8007138:	080139b4 	.word	0x080139b4
 800713c:	080137f8 	.word	0x080137f8

08007140 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	61da      	str	r2, [r3, #28]
  }
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800716e:	f06f 030b 	mvn.w	r3, #11
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
	...

08007180 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d013      	beq.n	80071b8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007190:	4b0d      	ldr	r3, [pc, #52]	@ (80071c8 <netif_get_by_index+0x48>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	e00c      	b.n	80071b2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800719e:	3301      	adds	r3, #1
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	79fa      	ldrb	r2, [r7, #7]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d101      	bne.n	80071ac <netif_get_by_index+0x2c>
        return netif; /* found! */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	e006      	b.n	80071ba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1ef      	bne.n	8007198 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20008464 	.word	0x20008464

080071cc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80071d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007204 <pbuf_free_ooseq+0x38>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <pbuf_free_ooseq+0x3c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	607b      	str	r3, [r7, #4]
 80071de:	e00a      	b.n	80071f6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f002 fb3b 	bl	8009864 <tcp_free_ooseq>
      return;
 80071ee:	e005      	b.n	80071fc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	607b      	str	r3, [r7, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1f1      	bne.n	80071e0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	2000846d 	.word	0x2000846d
 8007208:	2000847c 	.word	0x2000847c

0800720c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007210:	4b03      	ldr	r3, [pc, #12]	@ (8007220 <pbuf_pool_is_empty+0x14>)
 8007212:	2201      	movs	r2, #1
 8007214:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007216:	bf00      	nop
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	2000846d 	.word	0x2000846d

08007224 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	4611      	mov	r1, r2
 8007230:	461a      	mov	r2, r3
 8007232:	460b      	mov	r3, r1
 8007234:	80fb      	strh	r3, [r7, #6]
 8007236:	4613      	mov	r3, r2
 8007238:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	88fa      	ldrh	r2, [r7, #6]
 800724a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	88ba      	ldrh	r2, [r7, #4]
 8007250:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007252:	8b3b      	ldrh	r3, [r7, #24]
 8007254:	b2da      	uxtb	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	7f3a      	ldrb	r2, [r7, #28]
 800725e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	73da      	strb	r2, [r3, #15]
}
 800726c:	bf00      	nop
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08c      	sub	sp, #48	@ 0x30
 800727c:	af02      	add	r7, sp, #8
 800727e:	4603      	mov	r3, r0
 8007280:	71fb      	strb	r3, [r7, #7]
 8007282:	460b      	mov	r3, r1
 8007284:	80bb      	strh	r3, [r7, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800728e:	887b      	ldrh	r3, [r7, #2]
 8007290:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007294:	d07f      	beq.n	8007396 <pbuf_alloc+0x11e>
 8007296:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800729a:	f300 80c8 	bgt.w	800742e <pbuf_alloc+0x1b6>
 800729e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80072a2:	d010      	beq.n	80072c6 <pbuf_alloc+0x4e>
 80072a4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80072a8:	f300 80c1 	bgt.w	800742e <pbuf_alloc+0x1b6>
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d002      	beq.n	80072b6 <pbuf_alloc+0x3e>
 80072b0:	2b41      	cmp	r3, #65	@ 0x41
 80072b2:	f040 80bc 	bne.w	800742e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80072b6:	887a      	ldrh	r2, [r7, #2]
 80072b8:	88bb      	ldrh	r3, [r7, #4]
 80072ba:	4619      	mov	r1, r3
 80072bc:	2000      	movs	r0, #0
 80072be:	f000 f8d1 	bl	8007464 <pbuf_alloc_reference>
 80072c2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80072c4:	e0bd      	b.n	8007442 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80072ce:	88bb      	ldrh	r3, [r7, #4]
 80072d0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80072d2:	2008      	movs	r0, #8
 80072d4:	f7ff fbce 	bl	8006a74 <memp_malloc>
 80072d8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d109      	bne.n	80072f4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80072e0:	f7ff ff94 	bl	800720c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80072ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072ec:	f000 faa8 	bl	8007840 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e0a7      	b.n	8007444 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80072f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80072f6:	3303      	adds	r3, #3
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f023 0303 	bic.w	r3, r3, #3
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007304:	b29b      	uxth	r3, r3
 8007306:	8b7a      	ldrh	r2, [r7, #26]
 8007308:	4293      	cmp	r3, r2
 800730a:	bf28      	it	cs
 800730c:	4613      	movcs	r3, r2
 800730e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007310:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007312:	3310      	adds	r3, #16
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4413      	add	r3, r2
 8007318:	3303      	adds	r3, #3
 800731a:	f023 0303 	bic.w	r3, r3, #3
 800731e:	4618      	mov	r0, r3
 8007320:	89f9      	ldrh	r1, [r7, #14]
 8007322:	8b7a      	ldrh	r2, [r7, #26]
 8007324:	2300      	movs	r3, #0
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	887b      	ldrh	r3, [r7, #2]
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	460b      	mov	r3, r1
 800732e:	4601      	mov	r1, r0
 8007330:	6938      	ldr	r0, [r7, #16]
 8007332:	f7ff ff77 	bl	8007224 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d006      	beq.n	8007350 <pbuf_alloc+0xd8>
 8007342:	4b42      	ldr	r3, [pc, #264]	@ (800744c <pbuf_alloc+0x1d4>)
 8007344:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007348:	4941      	ldr	r1, [pc, #260]	@ (8007450 <pbuf_alloc+0x1d8>)
 800734a:	4842      	ldr	r0, [pc, #264]	@ (8007454 <pbuf_alloc+0x1dc>)
 800734c:	f00a ff14 	bl	8012178 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007350:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007352:	3303      	adds	r3, #3
 8007354:	f023 0303 	bic.w	r3, r3, #3
 8007358:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800735c:	d106      	bne.n	800736c <pbuf_alloc+0xf4>
 800735e:	4b3b      	ldr	r3, [pc, #236]	@ (800744c <pbuf_alloc+0x1d4>)
 8007360:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007364:	493c      	ldr	r1, [pc, #240]	@ (8007458 <pbuf_alloc+0x1e0>)
 8007366:	483b      	ldr	r0, [pc, #236]	@ (8007454 <pbuf_alloc+0x1dc>)
 8007368:	f00a ff06 	bl	8012178 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	d102      	bne.n	8007378 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	627b      	str	r3, [r7, #36]	@ 0x24
 8007376:	e002      	b.n	800737e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007382:	8b7a      	ldrh	r2, [r7, #26]
 8007384:	89fb      	ldrh	r3, [r7, #14]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800738e:	8b7b      	ldrh	r3, [r7, #26]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d19e      	bne.n	80072d2 <pbuf_alloc+0x5a>
      break;
 8007394:	e055      	b.n	8007442 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007396:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007398:	3303      	adds	r3, #3
 800739a:	b29b      	uxth	r3, r3
 800739c:	f023 0303 	bic.w	r3, r3, #3
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	88bb      	ldrh	r3, [r7, #4]
 80073a4:	3303      	adds	r3, #3
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f023 0303 	bic.w	r3, r3, #3
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	4413      	add	r3, r2
 80073b0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80073b2:	8b3b      	ldrh	r3, [r7, #24]
 80073b4:	3310      	adds	r3, #16
 80073b6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073b8:	8b3a      	ldrh	r2, [r7, #24]
 80073ba:	88bb      	ldrh	r3, [r7, #4]
 80073bc:	3303      	adds	r3, #3
 80073be:	f023 0303 	bic.w	r3, r3, #3
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d306      	bcc.n	80073d4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80073c6:	8afa      	ldrh	r2, [r7, #22]
 80073c8:	88bb      	ldrh	r3, [r7, #4]
 80073ca:	3303      	adds	r3, #3
 80073cc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d201      	bcs.n	80073d8 <pbuf_alloc+0x160>
        return NULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e035      	b.n	8007444 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80073d8:	8afb      	ldrh	r3, [r7, #22]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff f9ba 	bl	8006754 <mem_malloc>
 80073e0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <pbuf_alloc+0x174>
        return NULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e02b      	b.n	8007444 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80073ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80073ee:	3310      	adds	r3, #16
 80073f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073f2:	4413      	add	r3, r2
 80073f4:	3303      	adds	r3, #3
 80073f6:	f023 0303 	bic.w	r3, r3, #3
 80073fa:	4618      	mov	r0, r3
 80073fc:	88b9      	ldrh	r1, [r7, #4]
 80073fe:	88ba      	ldrh	r2, [r7, #4]
 8007400:	2300      	movs	r3, #0
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	887b      	ldrh	r3, [r7, #2]
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	460b      	mov	r3, r1
 800740a:	4601      	mov	r1, r0
 800740c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800740e:	f7ff ff09 	bl	8007224 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d010      	beq.n	8007440 <pbuf_alloc+0x1c8>
 800741e:	4b0b      	ldr	r3, [pc, #44]	@ (800744c <pbuf_alloc+0x1d4>)
 8007420:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007424:	490d      	ldr	r1, [pc, #52]	@ (800745c <pbuf_alloc+0x1e4>)
 8007426:	480b      	ldr	r0, [pc, #44]	@ (8007454 <pbuf_alloc+0x1dc>)
 8007428:	f00a fea6 	bl	8012178 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800742c:	e008      	b.n	8007440 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800742e:	4b07      	ldr	r3, [pc, #28]	@ (800744c <pbuf_alloc+0x1d4>)
 8007430:	f240 1227 	movw	r2, #295	@ 0x127
 8007434:	490a      	ldr	r1, [pc, #40]	@ (8007460 <pbuf_alloc+0x1e8>)
 8007436:	4807      	ldr	r0, [pc, #28]	@ (8007454 <pbuf_alloc+0x1dc>)
 8007438:	f00a fe9e 	bl	8012178 <iprintf>
      return NULL;
 800743c:	2300      	movs	r3, #0
 800743e:	e001      	b.n	8007444 <pbuf_alloc+0x1cc>
      break;
 8007440:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007444:	4618      	mov	r0, r3
 8007446:	3728      	adds	r7, #40	@ 0x28
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	080139d8 	.word	0x080139d8
 8007450:	08013a08 	.word	0x08013a08
 8007454:	08013a38 	.word	0x08013a38
 8007458:	08013a60 	.word	0x08013a60
 800745c:	08013a94 	.word	0x08013a94
 8007460:	08013ac0 	.word	0x08013ac0

08007464 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af02      	add	r7, sp, #8
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	807b      	strh	r3, [r7, #2]
 8007470:	4613      	mov	r3, r2
 8007472:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007474:	883b      	ldrh	r3, [r7, #0]
 8007476:	2b41      	cmp	r3, #65	@ 0x41
 8007478:	d009      	beq.n	800748e <pbuf_alloc_reference+0x2a>
 800747a:	883b      	ldrh	r3, [r7, #0]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d006      	beq.n	800748e <pbuf_alloc_reference+0x2a>
 8007480:	4b0f      	ldr	r3, [pc, #60]	@ (80074c0 <pbuf_alloc_reference+0x5c>)
 8007482:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007486:	490f      	ldr	r1, [pc, #60]	@ (80074c4 <pbuf_alloc_reference+0x60>)
 8007488:	480f      	ldr	r0, [pc, #60]	@ (80074c8 <pbuf_alloc_reference+0x64>)
 800748a:	f00a fe75 	bl	8012178 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800748e:	2007      	movs	r0, #7
 8007490:	f7ff faf0 	bl	8006a74 <memp_malloc>
 8007494:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800749c:	2300      	movs	r3, #0
 800749e:	e00b      	b.n	80074b8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80074a0:	8879      	ldrh	r1, [r7, #2]
 80074a2:	887a      	ldrh	r2, [r7, #2]
 80074a4:	2300      	movs	r3, #0
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	883b      	ldrh	r3, [r7, #0]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	460b      	mov	r3, r1
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff feb7 	bl	8007224 <pbuf_init_alloced_pbuf>
  return p;
 80074b6:	68fb      	ldr	r3, [r7, #12]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	080139d8 	.word	0x080139d8
 80074c4:	08013adc 	.word	0x08013adc
 80074c8:	08013a38 	.word	0x08013a38

080074cc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	607b      	str	r3, [r7, #4]
 80074d4:	4603      	mov	r3, r0
 80074d6:	73fb      	strb	r3, [r7, #15]
 80074d8:	460b      	mov	r3, r1
 80074da:	81bb      	strh	r3, [r7, #12]
 80074dc:	4613      	mov	r3, r2
 80074de:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80074e4:	8a7b      	ldrh	r3, [r7, #18]
 80074e6:	3303      	adds	r3, #3
 80074e8:	f023 0203 	bic.w	r2, r3, #3
 80074ec:	89bb      	ldrh	r3, [r7, #12]
 80074ee:	441a      	add	r2, r3
 80074f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d901      	bls.n	80074fa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	e018      	b.n	800752c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007500:	8a7b      	ldrh	r3, [r7, #18]
 8007502:	3303      	adds	r3, #3
 8007504:	f023 0303 	bic.w	r3, r3, #3
 8007508:	6a3a      	ldr	r2, [r7, #32]
 800750a:	4413      	add	r3, r2
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	e001      	b.n	8007514 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	89b9      	ldrh	r1, [r7, #12]
 8007518:	89ba      	ldrh	r2, [r7, #12]
 800751a:	2302      	movs	r3, #2
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	897b      	ldrh	r3, [r7, #10]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	460b      	mov	r3, r1
 8007524:	6979      	ldr	r1, [r7, #20]
 8007526:	f7ff fe7d 	bl	8007224 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800752a:	687b      	ldr	r3, [r7, #4]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3718      	adds	r7, #24
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d106      	bne.n	8007554 <pbuf_realloc+0x20>
 8007546:	4b3a      	ldr	r3, [pc, #232]	@ (8007630 <pbuf_realloc+0xfc>)
 8007548:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800754c:	4939      	ldr	r1, [pc, #228]	@ (8007634 <pbuf_realloc+0x100>)
 800754e:	483a      	ldr	r0, [pc, #232]	@ (8007638 <pbuf_realloc+0x104>)
 8007550:	f00a fe12 	bl	8012178 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	891b      	ldrh	r3, [r3, #8]
 8007558:	887a      	ldrh	r2, [r7, #2]
 800755a:	429a      	cmp	r2, r3
 800755c:	d263      	bcs.n	8007626 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	891a      	ldrh	r2, [r3, #8]
 8007562:	887b      	ldrh	r3, [r7, #2]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007568:	887b      	ldrh	r3, [r7, #2]
 800756a:	817b      	strh	r3, [r7, #10]
  q = p;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007570:	e018      	b.n	80075a4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	895b      	ldrh	r3, [r3, #10]
 8007576:	897a      	ldrh	r2, [r7, #10]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	891a      	ldrh	r2, [r3, #8]
 8007580:	893b      	ldrh	r3, [r7, #8]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d106      	bne.n	80075a4 <pbuf_realloc+0x70>
 8007596:	4b26      	ldr	r3, [pc, #152]	@ (8007630 <pbuf_realloc+0xfc>)
 8007598:	f240 12af 	movw	r2, #431	@ 0x1af
 800759c:	4927      	ldr	r1, [pc, #156]	@ (800763c <pbuf_realloc+0x108>)
 800759e:	4826      	ldr	r0, [pc, #152]	@ (8007638 <pbuf_realloc+0x104>)
 80075a0:	f00a fdea 	bl	8012178 <iprintf>
  while (rem_len > q->len) {
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	895b      	ldrh	r3, [r3, #10]
 80075a8:	897a      	ldrh	r2, [r7, #10]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d8e1      	bhi.n	8007572 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	7b1b      	ldrb	r3, [r3, #12]
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d121      	bne.n	80075fe <pbuf_realloc+0xca>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	895b      	ldrh	r3, [r3, #10]
 80075be:	897a      	ldrh	r2, [r7, #10]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d01c      	beq.n	80075fe <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	7b5b      	ldrb	r3, [r3, #13]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d116      	bne.n	80075fe <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	b29a      	uxth	r2, r3
 80075da:	897b      	ldrh	r3, [r7, #10]
 80075dc:	4413      	add	r3, r2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	4619      	mov	r1, r3
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7fe ffba 	bl	800655c <mem_trim>
 80075e8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <pbuf_realloc+0xca>
 80075f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007630 <pbuf_realloc+0xfc>)
 80075f2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80075f6:	4912      	ldr	r1, [pc, #72]	@ (8007640 <pbuf_realloc+0x10c>)
 80075f8:	480f      	ldr	r0, [pc, #60]	@ (8007638 <pbuf_realloc+0x104>)
 80075fa:	f00a fdbd 	bl	8012178 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	897a      	ldrh	r2, [r7, #10]
 8007602:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	895a      	ldrh	r2, [r3, #10]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 f911 	bl	8007840 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	e000      	b.n	8007628 <pbuf_realloc+0xf4>
    return;
 8007626:	bf00      	nop

}
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	080139d8 	.word	0x080139d8
 8007634:	08013af0 	.word	0x08013af0
 8007638:	08013a38 	.word	0x08013a38
 800763c:	08013b08 	.word	0x08013b08
 8007640:	08013b20 	.word	0x08013b20

08007644 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <pbuf_add_header_impl+0x22>
 8007658:	4b2b      	ldr	r3, [pc, #172]	@ (8007708 <pbuf_add_header_impl+0xc4>)
 800765a:	f240 12df 	movw	r2, #479	@ 0x1df
 800765e:	492b      	ldr	r1, [pc, #172]	@ (800770c <pbuf_add_header_impl+0xc8>)
 8007660:	482b      	ldr	r0, [pc, #172]	@ (8007710 <pbuf_add_header_impl+0xcc>)
 8007662:	f00a fd89 	bl	8012178 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <pbuf_add_header_impl+0x30>
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007672:	d301      	bcc.n	8007678 <pbuf_add_header_impl+0x34>
    return 1;
 8007674:	2301      	movs	r3, #1
 8007676:	e043      	b.n	8007700 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <pbuf_add_header_impl+0x3e>
    return 0;
 800767e:	2300      	movs	r3, #0
 8007680:	e03e      	b.n	8007700 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	891a      	ldrh	r2, [r3, #8]
 800768a:	8a7b      	ldrh	r3, [r7, #18]
 800768c:	4413      	add	r3, r2
 800768e:	b29b      	uxth	r3, r3
 8007690:	8a7a      	ldrh	r2, [r7, #18]
 8007692:	429a      	cmp	r2, r3
 8007694:	d901      	bls.n	800769a <pbuf_add_header_impl+0x56>
    return 1;
 8007696:	2301      	movs	r3, #1
 8007698:	e032      	b.n	8007700 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	7b1b      	ldrb	r3, [r3, #12]
 800769e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80076a0:	8a3b      	ldrh	r3, [r7, #16]
 80076a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00c      	beq.n	80076c4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	425b      	negs	r3, r3
 80076b2:	4413      	add	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3310      	adds	r3, #16
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d20d      	bcs.n	80076dc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e01d      	b.n	8007700 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d006      	beq.n	80076d8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	425b      	negs	r3, r3
 80076d2:	4413      	add	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	e001      	b.n	80076dc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80076d8:	2301      	movs	r3, #1
 80076da:	e011      	b.n	8007700 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	895a      	ldrh	r2, [r3, #10]
 80076e6:	8a7b      	ldrh	r3, [r7, #18]
 80076e8:	4413      	add	r3, r2
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	891a      	ldrh	r2, [r3, #8]
 80076f4:	8a7b      	ldrh	r3, [r7, #18]
 80076f6:	4413      	add	r3, r2
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	811a      	strh	r2, [r3, #8]


  return 0;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	080139d8 	.word	0x080139d8
 800770c:	08013b3c 	.word	0x08013b3c
 8007710:	08013a38 	.word	0x08013a38

08007714 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800771e:	2200      	movs	r2, #0
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff ff8e 	bl	8007644 <pbuf_add_header_impl>
 8007728:	4603      	mov	r3, r0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
	...

08007734 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d106      	bne.n	8007752 <pbuf_remove_header+0x1e>
 8007744:	4b20      	ldr	r3, [pc, #128]	@ (80077c8 <pbuf_remove_header+0x94>)
 8007746:	f240 224b 	movw	r2, #587	@ 0x24b
 800774a:	4920      	ldr	r1, [pc, #128]	@ (80077cc <pbuf_remove_header+0x98>)
 800774c:	4820      	ldr	r0, [pc, #128]	@ (80077d0 <pbuf_remove_header+0x9c>)
 800774e:	f00a fd13 	bl	8012178 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <pbuf_remove_header+0x2c>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800775e:	d301      	bcc.n	8007764 <pbuf_remove_header+0x30>
    return 1;
 8007760:	2301      	movs	r3, #1
 8007762:	e02c      	b.n	80077be <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <pbuf_remove_header+0x3a>
    return 0;
 800776a:	2300      	movs	r3, #0
 800776c:	e027      	b.n	80077be <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	895b      	ldrh	r3, [r3, #10]
 8007776:	89fa      	ldrh	r2, [r7, #14]
 8007778:	429a      	cmp	r2, r3
 800777a:	d908      	bls.n	800778e <pbuf_remove_header+0x5a>
 800777c:	4b12      	ldr	r3, [pc, #72]	@ (80077c8 <pbuf_remove_header+0x94>)
 800777e:	f240 2255 	movw	r2, #597	@ 0x255
 8007782:	4914      	ldr	r1, [pc, #80]	@ (80077d4 <pbuf_remove_header+0xa0>)
 8007784:	4812      	ldr	r0, [pc, #72]	@ (80077d0 <pbuf_remove_header+0x9c>)
 8007786:	f00a fcf7 	bl	8012178 <iprintf>
 800778a:	2301      	movs	r3, #1
 800778c:	e017      	b.n	80077be <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	441a      	add	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	895a      	ldrh	r2, [r3, #10]
 80077a4:	89fb      	ldrh	r3, [r7, #14]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	891a      	ldrh	r2, [r3, #8]
 80077b2:	89fb      	ldrh	r3, [r7, #14]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	080139d8 	.word	0x080139d8
 80077cc:	08013b3c 	.word	0x08013b3c
 80077d0:	08013a38 	.word	0x08013a38
 80077d4:	08013b48 	.word	0x08013b48

080077d8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	807b      	strh	r3, [r7, #2]
 80077e4:	4613      	mov	r3, r2
 80077e6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80077e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da08      	bge.n	8007802 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80077f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077f4:	425b      	negs	r3, r3
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff ff9b 	bl	8007734 <pbuf_remove_header>
 80077fe:	4603      	mov	r3, r0
 8007800:	e007      	b.n	8007812 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007802:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007806:	787a      	ldrb	r2, [r7, #1]
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff ff1a 	bl	8007644 <pbuf_add_header_impl>
 8007810:	4603      	mov	r3, r0
  }
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	460b      	mov	r3, r1
 8007824:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007826:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800782a:	2201      	movs	r2, #1
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff ffd2 	bl	80077d8 <pbuf_header_impl>
 8007834:	4603      	mov	r3, r0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
	...

08007840 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10b      	bne.n	8007866 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d106      	bne.n	8007862 <pbuf_free+0x22>
 8007854:	4b38      	ldr	r3, [pc, #224]	@ (8007938 <pbuf_free+0xf8>)
 8007856:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800785a:	4938      	ldr	r1, [pc, #224]	@ (800793c <pbuf_free+0xfc>)
 800785c:	4838      	ldr	r0, [pc, #224]	@ (8007940 <pbuf_free+0x100>)
 800785e:	f00a fc8b 	bl	8012178 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007862:	2300      	movs	r3, #0
 8007864:	e063      	b.n	800792e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800786a:	e05c      	b.n	8007926 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7b9b      	ldrb	r3, [r3, #14]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d106      	bne.n	8007882 <pbuf_free+0x42>
 8007874:	4b30      	ldr	r3, [pc, #192]	@ (8007938 <pbuf_free+0xf8>)
 8007876:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800787a:	4932      	ldr	r1, [pc, #200]	@ (8007944 <pbuf_free+0x104>)
 800787c:	4830      	ldr	r0, [pc, #192]	@ (8007940 <pbuf_free+0x100>)
 800787e:	f00a fc7b 	bl	8012178 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	7b9b      	ldrb	r3, [r3, #14]
 8007886:	3b01      	subs	r3, #1
 8007888:	b2da      	uxtb	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	739a      	strb	r2, [r3, #14]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	7b9b      	ldrb	r3, [r3, #14]
 8007892:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007894:	7dbb      	ldrb	r3, [r7, #22]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d143      	bne.n	8007922 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	7b1b      	ldrb	r3, [r3, #12]
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7b5b      	ldrb	r3, [r3, #13]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d011      	beq.n	80078da <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <pbuf_free+0x90>
 80078c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <pbuf_free+0xf8>)
 80078c4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80078c8:	491f      	ldr	r1, [pc, #124]	@ (8007948 <pbuf_free+0x108>)
 80078ca:	481d      	ldr	r0, [pc, #116]	@ (8007940 <pbuf_free+0x100>)
 80078cc:	f00a fc54 	bl	8012178 <iprintf>
        pc->custom_free_function(p);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	4798      	blx	r3
 80078d8:	e01d      	b.n	8007916 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d104      	bne.n	80078ea <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	2008      	movs	r0, #8
 80078e4:	f7ff f936 	bl	8006b54 <memp_free>
 80078e8:	e015      	b.n	8007916 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d104      	bne.n	80078fa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	2007      	movs	r0, #7
 80078f4:	f7ff f92e 	bl	8006b54 <memp_free>
 80078f8:	e00d      	b.n	8007916 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d103      	bne.n	8007908 <pbuf_free+0xc8>
          mem_free(p);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7fe fdc1 	bl	8006488 <mem_free>
 8007906:	e006      	b.n	8007916 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007908:	4b0b      	ldr	r3, [pc, #44]	@ (8007938 <pbuf_free+0xf8>)
 800790a:	f240 320f 	movw	r2, #783	@ 0x30f
 800790e:	490f      	ldr	r1, [pc, #60]	@ (800794c <pbuf_free+0x10c>)
 8007910:	480b      	ldr	r0, [pc, #44]	@ (8007940 <pbuf_free+0x100>)
 8007912:	f00a fc31 	bl	8012178 <iprintf>
        }
      }
      count++;
 8007916:	7dfb      	ldrb	r3, [r7, #23]
 8007918:	3301      	adds	r3, #1
 800791a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	607b      	str	r3, [r7, #4]
 8007920:	e001      	b.n	8007926 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007922:	2300      	movs	r3, #0
 8007924:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d19f      	bne.n	800786c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800792c:	7dfb      	ldrb	r3, [r7, #23]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	080139d8 	.word	0x080139d8
 800793c:	08013b3c 	.word	0x08013b3c
 8007940:	08013a38 	.word	0x08013a38
 8007944:	08013b68 	.word	0x08013b68
 8007948:	08013b80 	.word	0x08013b80
 800794c:	08013ba4 	.word	0x08013ba4

08007950 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800795c:	e005      	b.n	800796a <pbuf_clen+0x1a>
    ++len;
 800795e:	89fb      	ldrh	r3, [r7, #14]
 8007960:	3301      	adds	r3, #1
 8007962:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1f6      	bne.n	800795e <pbuf_clen+0xe>
  }
  return len;
 8007970:	89fb      	ldrh	r3, [r7, #14]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
	...

08007980 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d010      	beq.n	80079b0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7b9b      	ldrb	r3, [r3, #14]
 8007992:	3301      	adds	r3, #1
 8007994:	b2da      	uxtb	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	7b9b      	ldrb	r3, [r3, #14]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <pbuf_ref+0x30>
 80079a2:	4b05      	ldr	r3, [pc, #20]	@ (80079b8 <pbuf_ref+0x38>)
 80079a4:	f240 3242 	movw	r2, #834	@ 0x342
 80079a8:	4904      	ldr	r1, [pc, #16]	@ (80079bc <pbuf_ref+0x3c>)
 80079aa:	4805      	ldr	r0, [pc, #20]	@ (80079c0 <pbuf_ref+0x40>)
 80079ac:	f00a fbe4 	bl	8012178 <iprintf>
  }
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	080139d8 	.word	0x080139d8
 80079bc:	08013bb8 	.word	0x08013bb8
 80079c0:	08013a38 	.word	0x08013a38

080079c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <pbuf_cat+0x16>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d107      	bne.n	80079ea <pbuf_cat+0x26>
 80079da:	4b20      	ldr	r3, [pc, #128]	@ (8007a5c <pbuf_cat+0x98>)
 80079dc:	f240 3259 	movw	r2, #857	@ 0x359
 80079e0:	491f      	ldr	r1, [pc, #124]	@ (8007a60 <pbuf_cat+0x9c>)
 80079e2:	4820      	ldr	r0, [pc, #128]	@ (8007a64 <pbuf_cat+0xa0>)
 80079e4:	f00a fbc8 	bl	8012178 <iprintf>
 80079e8:	e034      	b.n	8007a54 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	e00a      	b.n	8007a06 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	891a      	ldrh	r2, [r3, #8]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	891b      	ldrh	r3, [r3, #8]
 80079f8:	4413      	add	r3, r2
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1f0      	bne.n	80079f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	891a      	ldrh	r2, [r3, #8]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	895b      	ldrh	r3, [r3, #10]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d006      	beq.n	8007a28 <pbuf_cat+0x64>
 8007a1a:	4b10      	ldr	r3, [pc, #64]	@ (8007a5c <pbuf_cat+0x98>)
 8007a1c:	f240 3262 	movw	r2, #866	@ 0x362
 8007a20:	4911      	ldr	r1, [pc, #68]	@ (8007a68 <pbuf_cat+0xa4>)
 8007a22:	4810      	ldr	r0, [pc, #64]	@ (8007a64 <pbuf_cat+0xa0>)
 8007a24:	f00a fba8 	bl	8012178 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d006      	beq.n	8007a3e <pbuf_cat+0x7a>
 8007a30:	4b0a      	ldr	r3, [pc, #40]	@ (8007a5c <pbuf_cat+0x98>)
 8007a32:	f240 3263 	movw	r2, #867	@ 0x363
 8007a36:	490d      	ldr	r1, [pc, #52]	@ (8007a6c <pbuf_cat+0xa8>)
 8007a38:	480a      	ldr	r0, [pc, #40]	@ (8007a64 <pbuf_cat+0xa0>)
 8007a3a:	f00a fb9d 	bl	8012178 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	891a      	ldrh	r2, [r3, #8]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	891b      	ldrh	r3, [r3, #8]
 8007a46:	4413      	add	r3, r2
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	080139d8 	.word	0x080139d8
 8007a60:	08013bcc 	.word	0x08013bcc
 8007a64:	08013a38 	.word	0x08013a38
 8007a68:	08013c04 	.word	0x08013c04
 8007a6c:	08013c34 	.word	0x08013c34

08007a70 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d008      	beq.n	8007a9a <pbuf_copy+0x2a>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <pbuf_copy+0x2a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	891a      	ldrh	r2, [r3, #8]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	891b      	ldrh	r3, [r3, #8]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d209      	bcs.n	8007aae <pbuf_copy+0x3e>
 8007a9a:	4b57      	ldr	r3, [pc, #348]	@ (8007bf8 <pbuf_copy+0x188>)
 8007a9c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007aa0:	4956      	ldr	r1, [pc, #344]	@ (8007bfc <pbuf_copy+0x18c>)
 8007aa2:	4857      	ldr	r0, [pc, #348]	@ (8007c00 <pbuf_copy+0x190>)
 8007aa4:	f00a fb68 	bl	8012178 <iprintf>
 8007aa8:	f06f 030f 	mvn.w	r3, #15
 8007aac:	e09f      	b.n	8007bee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	895b      	ldrh	r3, [r3, #10]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	895b      	ldrh	r3, [r3, #10]
 8007abc:	4619      	mov	r1, r3
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	1acb      	subs	r3, r1, r3
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d306      	bcc.n	8007ad4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	895b      	ldrh	r3, [r3, #10]
 8007aca:	461a      	mov	r2, r3
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	e005      	b.n	8007ae0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	895b      	ldrh	r3, [r3, #10]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	18d0      	adds	r0, r2, r3
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	4413      	add	r3, r2
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4619      	mov	r1, r3
 8007af4:	f00a fc97 	bl	8012426 <memcpy>
    offset_to += len;
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	895b      	ldrh	r3, [r3, #10]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d906      	bls.n	8007b22 <pbuf_copy+0xb2>
 8007b14:	4b38      	ldr	r3, [pc, #224]	@ (8007bf8 <pbuf_copy+0x188>)
 8007b16:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007b1a:	493a      	ldr	r1, [pc, #232]	@ (8007c04 <pbuf_copy+0x194>)
 8007b1c:	4838      	ldr	r0, [pc, #224]	@ (8007c00 <pbuf_copy+0x190>)
 8007b1e:	f00a fb2b 	bl	8012178 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	895b      	ldrh	r3, [r3, #10]
 8007b26:	461a      	mov	r2, r3
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d906      	bls.n	8007b3c <pbuf_copy+0xcc>
 8007b2e:	4b32      	ldr	r3, [pc, #200]	@ (8007bf8 <pbuf_copy+0x188>)
 8007b30:	f240 32da 	movw	r2, #986	@ 0x3da
 8007b34:	4934      	ldr	r1, [pc, #208]	@ (8007c08 <pbuf_copy+0x198>)
 8007b36:	4832      	ldr	r0, [pc, #200]	@ (8007c00 <pbuf_copy+0x190>)
 8007b38:	f00a fb1e 	bl	8012178 <iprintf>
    if (offset_from >= p_from->len) {
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	895b      	ldrh	r3, [r3, #10]
 8007b40:	461a      	mov	r2, r3
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d304      	bcc.n	8007b52 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	895b      	ldrh	r3, [r3, #10]
 8007b56:	461a      	mov	r2, r3
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d114      	bne.n	8007b88 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10c      	bne.n	8007b88 <pbuf_copy+0x118>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d009      	beq.n	8007b88 <pbuf_copy+0x118>
 8007b74:	4b20      	ldr	r3, [pc, #128]	@ (8007bf8 <pbuf_copy+0x188>)
 8007b76:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007b7a:	4924      	ldr	r1, [pc, #144]	@ (8007c0c <pbuf_copy+0x19c>)
 8007b7c:	4820      	ldr	r0, [pc, #128]	@ (8007c00 <pbuf_copy+0x190>)
 8007b7e:	f00a fafb 	bl	8012178 <iprintf>
 8007b82:	f06f 030f 	mvn.w	r3, #15
 8007b86:	e032      	b.n	8007bee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d013      	beq.n	8007bb6 <pbuf_copy+0x146>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	895a      	ldrh	r2, [r3, #10]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	891b      	ldrh	r3, [r3, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d10d      	bne.n	8007bb6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <pbuf_copy+0x146>
 8007ba2:	4b15      	ldr	r3, [pc, #84]	@ (8007bf8 <pbuf_copy+0x188>)
 8007ba4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007ba8:	4919      	ldr	r1, [pc, #100]	@ (8007c10 <pbuf_copy+0x1a0>)
 8007baa:	4815      	ldr	r0, [pc, #84]	@ (8007c00 <pbuf_copy+0x190>)
 8007bac:	f00a fae4 	bl	8012178 <iprintf>
 8007bb0:	f06f 0305 	mvn.w	r3, #5
 8007bb4:	e01b      	b.n	8007bee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d013      	beq.n	8007be4 <pbuf_copy+0x174>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	895a      	ldrh	r2, [r3, #10]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	891b      	ldrh	r3, [r3, #8]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d10d      	bne.n	8007be4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d009      	beq.n	8007be4 <pbuf_copy+0x174>
 8007bd0:	4b09      	ldr	r3, [pc, #36]	@ (8007bf8 <pbuf_copy+0x188>)
 8007bd2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007bd6:	490e      	ldr	r1, [pc, #56]	@ (8007c10 <pbuf_copy+0x1a0>)
 8007bd8:	4809      	ldr	r0, [pc, #36]	@ (8007c00 <pbuf_copy+0x190>)
 8007bda:	f00a facd 	bl	8012178 <iprintf>
 8007bde:	f06f 0305 	mvn.w	r3, #5
 8007be2:	e004      	b.n	8007bee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f47f af61 	bne.w	8007aae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	080139d8 	.word	0x080139d8
 8007bfc:	08013c80 	.word	0x08013c80
 8007c00:	08013a38 	.word	0x08013a38
 8007c04:	08013cb0 	.word	0x08013cb0
 8007c08:	08013cc8 	.word	0x08013cc8
 8007c0c:	08013ce4 	.word	0x08013ce4
 8007c10:	08013cf4 	.word	0x08013cf4

08007c14 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4611      	mov	r1, r2
 8007c20:	461a      	mov	r2, r3
 8007c22:	460b      	mov	r3, r1
 8007c24:	80fb      	strh	r3, [r7, #6]
 8007c26:	4613      	mov	r3, r2
 8007c28:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d108      	bne.n	8007c4a <pbuf_copy_partial+0x36>
 8007c38:	4b2b      	ldr	r3, [pc, #172]	@ (8007ce8 <pbuf_copy_partial+0xd4>)
 8007c3a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007c3e:	492b      	ldr	r1, [pc, #172]	@ (8007cec <pbuf_copy_partial+0xd8>)
 8007c40:	482b      	ldr	r0, [pc, #172]	@ (8007cf0 <pbuf_copy_partial+0xdc>)
 8007c42:	f00a fa99 	bl	8012178 <iprintf>
 8007c46:	2300      	movs	r3, #0
 8007c48:	e04a      	b.n	8007ce0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d108      	bne.n	8007c62 <pbuf_copy_partial+0x4e>
 8007c50:	4b25      	ldr	r3, [pc, #148]	@ (8007ce8 <pbuf_copy_partial+0xd4>)
 8007c52:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007c56:	4927      	ldr	r1, [pc, #156]	@ (8007cf4 <pbuf_copy_partial+0xe0>)
 8007c58:	4825      	ldr	r0, [pc, #148]	@ (8007cf0 <pbuf_copy_partial+0xdc>)
 8007c5a:	f00a fa8d 	bl	8012178 <iprintf>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e03e      	b.n	8007ce0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	61fb      	str	r3, [r7, #28]
 8007c66:	e034      	b.n	8007cd2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007c68:	88bb      	ldrh	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <pbuf_copy_partial+0x70>
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	895b      	ldrh	r3, [r3, #10]
 8007c72:	88ba      	ldrh	r2, [r7, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d305      	bcc.n	8007c84 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	895b      	ldrh	r3, [r3, #10]
 8007c7c:	88ba      	ldrh	r2, [r7, #4]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	80bb      	strh	r3, [r7, #4]
 8007c82:	e023      	b.n	8007ccc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	895a      	ldrh	r2, [r3, #10]
 8007c88:	88bb      	ldrh	r3, [r7, #4]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007c8e:	8b3a      	ldrh	r2, [r7, #24]
 8007c90:	88fb      	ldrh	r3, [r7, #6]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d901      	bls.n	8007c9a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007c96:	88fb      	ldrh	r3, [r7, #6]
 8007c98:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007c9a:	8b7b      	ldrh	r3, [r7, #26]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	18d0      	adds	r0, r2, r3
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	88bb      	ldrh	r3, [r7, #4]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	8b3a      	ldrh	r2, [r7, #24]
 8007caa:	4619      	mov	r1, r3
 8007cac:	f00a fbbb 	bl	8012426 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007cb0:	8afa      	ldrh	r2, [r7, #22]
 8007cb2:	8b3b      	ldrh	r3, [r7, #24]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007cb8:	8b7a      	ldrh	r2, [r7, #26]
 8007cba:	8b3b      	ldrh	r3, [r7, #24]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007cc0:	88fa      	ldrh	r2, [r7, #6]
 8007cc2:	8b3b      	ldrh	r3, [r7, #24]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	61fb      	str	r3, [r7, #28]
 8007cd2:	88fb      	ldrh	r3, [r7, #6]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <pbuf_copy_partial+0xca>
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1c4      	bne.n	8007c68 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007cde:	8afb      	ldrh	r3, [r7, #22]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3720      	adds	r7, #32
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	080139d8 	.word	0x080139d8
 8007cec:	08013d20 	.word	0x08013d20
 8007cf0:	08013a38 	.word	0x08013a38
 8007cf4:	08013d40 	.word	0x08013d40

08007cf8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	603a      	str	r2, [r7, #0]
 8007d02:	71fb      	strb	r3, [r7, #7]
 8007d04:	460b      	mov	r3, r1
 8007d06:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	8919      	ldrh	r1, [r3, #8]
 8007d0c:	88ba      	ldrh	r2, [r7, #4]
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff fab1 	bl	8007278 <pbuf_alloc>
 8007d16:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <pbuf_clone+0x2a>
    return NULL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e011      	b.n	8007d46 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f7ff fea3 	bl	8007a70 <pbuf_copy>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007d2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d006      	beq.n	8007d44 <pbuf_clone+0x4c>
 8007d36:	4b06      	ldr	r3, [pc, #24]	@ (8007d50 <pbuf_clone+0x58>)
 8007d38:	f240 5224 	movw	r2, #1316	@ 0x524
 8007d3c:	4905      	ldr	r1, [pc, #20]	@ (8007d54 <pbuf_clone+0x5c>)
 8007d3e:	4806      	ldr	r0, [pc, #24]	@ (8007d58 <pbuf_clone+0x60>)
 8007d40:	f00a fa1a 	bl	8012178 <iprintf>
  return q;
 8007d44:	68fb      	ldr	r3, [r7, #12]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	080139d8 	.word	0x080139d8
 8007d54:	08013e4c 	.word	0x08013e4c
 8007d58:	08013a38 	.word	0x08013a38

08007d5c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007d60:	f00a f8f8 	bl	8011f54 <rand>
 8007d64:	4603      	mov	r3, r0
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	4b01      	ldr	r3, [pc, #4]	@ (8007d7c <tcp_init+0x20>)
 8007d76:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007d78:	bf00      	nop
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	20000020 	.word	0x20000020

08007d80 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	7d1b      	ldrb	r3, [r3, #20]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d105      	bne.n	8007d9c <tcp_free+0x1c>
 8007d90:	4b06      	ldr	r3, [pc, #24]	@ (8007dac <tcp_free+0x2c>)
 8007d92:	22d4      	movs	r2, #212	@ 0xd4
 8007d94:	4906      	ldr	r1, [pc, #24]	@ (8007db0 <tcp_free+0x30>)
 8007d96:	4807      	ldr	r0, [pc, #28]	@ (8007db4 <tcp_free+0x34>)
 8007d98:	f00a f9ee 	bl	8012178 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	2001      	movs	r0, #1
 8007da0:	f7fe fed8 	bl	8006b54 <memp_free>
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	08013ed8 	.word	0x08013ed8
 8007db0:	08013f08 	.word	0x08013f08
 8007db4:	08013f1c 	.word	0x08013f1c

08007db8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	7d1b      	ldrb	r3, [r3, #20]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d105      	bne.n	8007dd4 <tcp_free_listen+0x1c>
 8007dc8:	4b06      	ldr	r3, [pc, #24]	@ (8007de4 <tcp_free_listen+0x2c>)
 8007dca:	22df      	movs	r2, #223	@ 0xdf
 8007dcc:	4906      	ldr	r1, [pc, #24]	@ (8007de8 <tcp_free_listen+0x30>)
 8007dce:	4807      	ldr	r0, [pc, #28]	@ (8007dec <tcp_free_listen+0x34>)
 8007dd0:	f00a f9d2 	bl	8012178 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	2002      	movs	r0, #2
 8007dd8:	f7fe febc 	bl	8006b54 <memp_free>
}
 8007ddc:	bf00      	nop
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	08013ed8 	.word	0x08013ed8
 8007de8:	08013f44 	.word	0x08013f44
 8007dec:	08013f1c 	.word	0x08013f1c

08007df0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007df4:	f001 f85e 	bl	8008eb4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007df8:	4b07      	ldr	r3, [pc, #28]	@ (8007e18 <tcp_tmr+0x28>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	4b05      	ldr	r3, [pc, #20]	@ (8007e18 <tcp_tmr+0x28>)
 8007e02:	701a      	strb	r2, [r3, #0]
 8007e04:	4b04      	ldr	r3, [pc, #16]	@ (8007e18 <tcp_tmr+0x28>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007e10:	f000 fd0e 	bl	8008830 <tcp_slowtmr>
  }
}
 8007e14:	bf00      	nop
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	20008485 	.word	0x20008485

08007e1c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d105      	bne.n	8007e38 <tcp_remove_listener+0x1c>
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e64 <tcp_remove_listener+0x48>)
 8007e2e:	22ff      	movs	r2, #255	@ 0xff
 8007e30:	490d      	ldr	r1, [pc, #52]	@ (8007e68 <tcp_remove_listener+0x4c>)
 8007e32:	480e      	ldr	r0, [pc, #56]	@ (8007e6c <tcp_remove_listener+0x50>)
 8007e34:	f00a f9a0 	bl	8012178 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	e00a      	b.n	8007e54 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d102      	bne.n	8007e4e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f1      	bne.n	8007e3e <tcp_remove_listener+0x22>
    }
  }
}
 8007e5a:	bf00      	nop
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	08013ed8 	.word	0x08013ed8
 8007e68:	08013f60 	.word	0x08013f60
 8007e6c:	08013f1c 	.word	0x08013f1c

08007e70 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d106      	bne.n	8007e8c <tcp_listen_closed+0x1c>
 8007e7e:	4b14      	ldr	r3, [pc, #80]	@ (8007ed0 <tcp_listen_closed+0x60>)
 8007e80:	f240 1211 	movw	r2, #273	@ 0x111
 8007e84:	4913      	ldr	r1, [pc, #76]	@ (8007ed4 <tcp_listen_closed+0x64>)
 8007e86:	4814      	ldr	r0, [pc, #80]	@ (8007ed8 <tcp_listen_closed+0x68>)
 8007e88:	f00a f976 	bl	8012178 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	7d1b      	ldrb	r3, [r3, #20]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d006      	beq.n	8007ea2 <tcp_listen_closed+0x32>
 8007e94:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed0 <tcp_listen_closed+0x60>)
 8007e96:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8007e9a:	4910      	ldr	r1, [pc, #64]	@ (8007edc <tcp_listen_closed+0x6c>)
 8007e9c:	480e      	ldr	r0, [pc, #56]	@ (8007ed8 <tcp_listen_closed+0x68>)
 8007e9e:	f00a f96b 	bl	8012178 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	e00b      	b.n	8007ec0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee0 <tcp_listen_closed+0x70>)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff ffb1 	bl	8007e1c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d9f0      	bls.n	8007ea8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	08013ed8 	.word	0x08013ed8
 8007ed4:	08013f88 	.word	0x08013f88
 8007ed8:	08013f1c 	.word	0x08013f1c
 8007edc:	08013f94 	.word	0x08013f94
 8007ee0:	0801600c 	.word	0x0801600c

08007ee4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007ee4:	b5b0      	push	{r4, r5, r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af04      	add	r7, sp, #16
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <tcp_close_shutdown+0x20>
 8007ef6:	4b63      	ldr	r3, [pc, #396]	@ (8008084 <tcp_close_shutdown+0x1a0>)
 8007ef8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8007efc:	4962      	ldr	r1, [pc, #392]	@ (8008088 <tcp_close_shutdown+0x1a4>)
 8007efe:	4863      	ldr	r0, [pc, #396]	@ (800808c <tcp_close_shutdown+0x1a8>)
 8007f00:	f00a f93a 	bl	8012178 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d066      	beq.n	8007fd8 <tcp_close_shutdown+0xf4>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	7d1b      	ldrb	r3, [r3, #20]
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d003      	beq.n	8007f1a <tcp_close_shutdown+0x36>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	7d1b      	ldrb	r3, [r3, #20]
 8007f16:	2b07      	cmp	r3, #7
 8007f18:	d15e      	bne.n	8007fd8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d104      	bne.n	8007f2c <tcp_close_shutdown+0x48>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f26:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007f2a:	d055      	beq.n	8007fd8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	8b5b      	ldrh	r3, [r3, #26]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d106      	bne.n	8007f46 <tcp_close_shutdown+0x62>
 8007f38:	4b52      	ldr	r3, [pc, #328]	@ (8008084 <tcp_close_shutdown+0x1a0>)
 8007f3a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8007f3e:	4954      	ldr	r1, [pc, #336]	@ (8008090 <tcp_close_shutdown+0x1ac>)
 8007f40:	4852      	ldr	r0, [pc, #328]	@ (800808c <tcp_close_shutdown+0x1a8>)
 8007f42:	f00a f919 	bl	8012178 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007f4e:	687d      	ldr	r5, [r7, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3304      	adds	r3, #4
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	8ad2      	ldrh	r2, [r2, #22]
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	8b09      	ldrh	r1, [r1, #24]
 8007f5c:	9102      	str	r1, [sp, #8]
 8007f5e:	9201      	str	r2, [sp, #4]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	462b      	mov	r3, r5
 8007f64:	4622      	mov	r2, r4
 8007f66:	4601      	mov	r1, r0
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f005 fce1 	bl	800d930 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 fac4 	bl	80094fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007f74:	4b47      	ldr	r3, [pc, #284]	@ (8008094 <tcp_close_shutdown+0x1b0>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d105      	bne.n	8007f8a <tcp_close_shutdown+0xa6>
 8007f7e:	4b45      	ldr	r3, [pc, #276]	@ (8008094 <tcp_close_shutdown+0x1b0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	4a43      	ldr	r2, [pc, #268]	@ (8008094 <tcp_close_shutdown+0x1b0>)
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	e013      	b.n	8007fb2 <tcp_close_shutdown+0xce>
 8007f8a:	4b42      	ldr	r3, [pc, #264]	@ (8008094 <tcp_close_shutdown+0x1b0>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	e00c      	b.n	8007fac <tcp_close_shutdown+0xc8>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d104      	bne.n	8007fa6 <tcp_close_shutdown+0xc2>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	60da      	str	r2, [r3, #12]
 8007fa4:	e005      	b.n	8007fb2 <tcp_close_shutdown+0xce>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1ef      	bne.n	8007f92 <tcp_close_shutdown+0xae>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	60da      	str	r2, [r3, #12]
 8007fb8:	4b37      	ldr	r3, [pc, #220]	@ (8008098 <tcp_close_shutdown+0x1b4>)
 8007fba:	2201      	movs	r2, #1
 8007fbc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007fbe:	4b37      	ldr	r3, [pc, #220]	@ (800809c <tcp_close_shutdown+0x1b8>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d102      	bne.n	8007fce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007fc8:	f003 ff58 	bl	800be7c <tcp_trigger_input_pcb_close>
 8007fcc:	e002      	b.n	8007fd4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7ff fed6 	bl	8007d80 <tcp_free>
      }
      return ERR_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e050      	b.n	800807a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	7d1b      	ldrb	r3, [r3, #20]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d03b      	beq.n	8008058 <tcp_close_shutdown+0x174>
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	dc44      	bgt.n	800806e <tcp_close_shutdown+0x18a>
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <tcp_close_shutdown+0x10a>
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d02a      	beq.n	8008042 <tcp_close_shutdown+0x15e>
 8007fec:	e03f      	b.n	800806e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	8adb      	ldrh	r3, [r3, #22]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d021      	beq.n	800803a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80080a0 <tcp_close_shutdown+0x1bc>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d105      	bne.n	800800c <tcp_close_shutdown+0x128>
 8008000:	4b27      	ldr	r3, [pc, #156]	@ (80080a0 <tcp_close_shutdown+0x1bc>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	4a26      	ldr	r2, [pc, #152]	@ (80080a0 <tcp_close_shutdown+0x1bc>)
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	e013      	b.n	8008034 <tcp_close_shutdown+0x150>
 800800c:	4b24      	ldr	r3, [pc, #144]	@ (80080a0 <tcp_close_shutdown+0x1bc>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60bb      	str	r3, [r7, #8]
 8008012:	e00c      	b.n	800802e <tcp_close_shutdown+0x14a>
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	429a      	cmp	r2, r3
 800801c:	d104      	bne.n	8008028 <tcp_close_shutdown+0x144>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	60da      	str	r2, [r3, #12]
 8008026:	e005      	b.n	8008034 <tcp_close_shutdown+0x150>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	60bb      	str	r3, [r7, #8]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1ef      	bne.n	8008014 <tcp_close_shutdown+0x130>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff fea0 	bl	8007d80 <tcp_free>
      break;
 8008040:	e01a      	b.n	8008078 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff ff14 	bl	8007e70 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	4816      	ldr	r0, [pc, #88]	@ (80080a4 <tcp_close_shutdown+0x1c0>)
 800804c:	f001 faa6 	bl	800959c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff feb1 	bl	8007db8 <tcp_free_listen>
      break;
 8008056:	e00f      	b.n	8008078 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	480e      	ldr	r0, [pc, #56]	@ (8008094 <tcp_close_shutdown+0x1b0>)
 800805c:	f001 fa9e 	bl	800959c <tcp_pcb_remove>
 8008060:	4b0d      	ldr	r3, [pc, #52]	@ (8008098 <tcp_close_shutdown+0x1b4>)
 8008062:	2201      	movs	r2, #1
 8008064:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff fe8a 	bl	8007d80 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800806c:	e004      	b.n	8008078 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f81a 	bl	80080a8 <tcp_close_shutdown_fin>
 8008074:	4603      	mov	r3, r0
 8008076:	e000      	b.n	800807a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bdb0      	pop	{r4, r5, r7, pc}
 8008082:	bf00      	nop
 8008084:	08013ed8 	.word	0x08013ed8
 8008088:	08013fac 	.word	0x08013fac
 800808c:	08013f1c 	.word	0x08013f1c
 8008090:	08013fcc 	.word	0x08013fcc
 8008094:	2000847c 	.word	0x2000847c
 8008098:	20008484 	.word	0x20008484
 800809c:	200084bc 	.word	0x200084bc
 80080a0:	20008474 	.word	0x20008474
 80080a4:	20008478 	.word	0x20008478

080080a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <tcp_close_shutdown_fin+0x1c>
 80080b6:	4b2e      	ldr	r3, [pc, #184]	@ (8008170 <tcp_close_shutdown_fin+0xc8>)
 80080b8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80080bc:	492d      	ldr	r1, [pc, #180]	@ (8008174 <tcp_close_shutdown_fin+0xcc>)
 80080be:	482e      	ldr	r0, [pc, #184]	@ (8008178 <tcp_close_shutdown_fin+0xd0>)
 80080c0:	f00a f85a 	bl	8012178 <iprintf>

  switch (pcb->state) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	7d1b      	ldrb	r3, [r3, #20]
 80080c8:	2b07      	cmp	r3, #7
 80080ca:	d020      	beq.n	800810e <tcp_close_shutdown_fin+0x66>
 80080cc:	2b07      	cmp	r3, #7
 80080ce:	dc2b      	bgt.n	8008128 <tcp_close_shutdown_fin+0x80>
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d002      	beq.n	80080da <tcp_close_shutdown_fin+0x32>
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d00d      	beq.n	80080f4 <tcp_close_shutdown_fin+0x4c>
 80080d8:	e026      	b.n	8008128 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f004 fd36 	bl	800cb4c <tcp_send_fin>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80080e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d11f      	bne.n	800812c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2205      	movs	r2, #5
 80080f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80080f2:	e01b      	b.n	800812c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f004 fd29 	bl	800cb4c <tcp_send_fin>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80080fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d114      	bne.n	8008130 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2205      	movs	r2, #5
 800810a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800810c:	e010      	b.n	8008130 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f004 fd1c 	bl	800cb4c <tcp_send_fin>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d109      	bne.n	8008134 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2209      	movs	r2, #9
 8008124:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008126:	e005      	b.n	8008134 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	e01c      	b.n	8008166 <tcp_close_shutdown_fin+0xbe>
      break;
 800812c:	bf00      	nop
 800812e:	e002      	b.n	8008136 <tcp_close_shutdown_fin+0x8e>
      break;
 8008130:	bf00      	nop
 8008132:	e000      	b.n	8008136 <tcp_close_shutdown_fin+0x8e>
      break;
 8008134:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f004 fe42 	bl	800cdc8 <tcp_output>
 8008144:	e00d      	b.n	8008162 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d108      	bne.n	8008162 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	8b5b      	ldrh	r3, [r3, #26]
 8008154:	f043 0308 	orr.w	r3, r3, #8
 8008158:	b29a      	uxth	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	e001      	b.n	8008166 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008162:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	08013ed8 	.word	0x08013ed8
 8008174:	08013f88 	.word	0x08013f88
 8008178:	08013f1c 	.word	0x08013f1c

0800817c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d109      	bne.n	800819e <tcp_close+0x22>
 800818a:	4b0f      	ldr	r3, [pc, #60]	@ (80081c8 <tcp_close+0x4c>)
 800818c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008190:	490e      	ldr	r1, [pc, #56]	@ (80081cc <tcp_close+0x50>)
 8008192:	480f      	ldr	r0, [pc, #60]	@ (80081d0 <tcp_close+0x54>)
 8008194:	f009 fff0 	bl	8012178 <iprintf>
 8008198:	f06f 030f 	mvn.w	r3, #15
 800819c:	e00f      	b.n	80081be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	7d1b      	ldrb	r3, [r3, #20]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d006      	beq.n	80081b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	8b5b      	ldrh	r3, [r3, #26]
 80081aa:	f043 0310 	orr.w	r3, r3, #16
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80081b4:	2101      	movs	r1, #1
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fe94 	bl	8007ee4 <tcp_close_shutdown>
 80081bc:	4603      	mov	r3, r0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	08013ed8 	.word	0x08013ed8
 80081cc:	08013fe8 	.word	0x08013fe8
 80081d0:	08013f1c 	.word	0x08013f1c

080081d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08e      	sub	sp, #56	@ 0x38
 80081d8:	af04      	add	r7, sp, #16
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d107      	bne.n	80081f4 <tcp_abandon+0x20>
 80081e4:	4b52      	ldr	r3, [pc, #328]	@ (8008330 <tcp_abandon+0x15c>)
 80081e6:	f240 223d 	movw	r2, #573	@ 0x23d
 80081ea:	4952      	ldr	r1, [pc, #328]	@ (8008334 <tcp_abandon+0x160>)
 80081ec:	4852      	ldr	r0, [pc, #328]	@ (8008338 <tcp_abandon+0x164>)
 80081ee:	f009 ffc3 	bl	8012178 <iprintf>
 80081f2:	e099      	b.n	8008328 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	7d1b      	ldrb	r3, [r3, #20]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d106      	bne.n	800820a <tcp_abandon+0x36>
 80081fc:	4b4c      	ldr	r3, [pc, #304]	@ (8008330 <tcp_abandon+0x15c>)
 80081fe:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008202:	494e      	ldr	r1, [pc, #312]	@ (800833c <tcp_abandon+0x168>)
 8008204:	484c      	ldr	r0, [pc, #304]	@ (8008338 <tcp_abandon+0x164>)
 8008206:	f009 ffb7 	bl	8012178 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	7d1b      	ldrb	r3, [r3, #20]
 800820e:	2b0a      	cmp	r3, #10
 8008210:	d107      	bne.n	8008222 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	484a      	ldr	r0, [pc, #296]	@ (8008340 <tcp_abandon+0x16c>)
 8008216:	f001 f9c1 	bl	800959c <tcp_pcb_remove>
    tcp_free(pcb);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff fdb0 	bl	8007d80 <tcp_free>
 8008220:	e082      	b.n	8008328 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800822e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008234:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800823c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	7d1b      	ldrb	r3, [r3, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d126      	bne.n	800829a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	8adb      	ldrh	r3, [r3, #22]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d02e      	beq.n	80082b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008254:	4b3b      	ldr	r3, [pc, #236]	@ (8008344 <tcp_abandon+0x170>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	429a      	cmp	r2, r3
 800825c:	d105      	bne.n	800826a <tcp_abandon+0x96>
 800825e:	4b39      	ldr	r3, [pc, #228]	@ (8008344 <tcp_abandon+0x170>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	4a37      	ldr	r2, [pc, #220]	@ (8008344 <tcp_abandon+0x170>)
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	e013      	b.n	8008292 <tcp_abandon+0xbe>
 800826a:	4b36      	ldr	r3, [pc, #216]	@ (8008344 <tcp_abandon+0x170>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	61fb      	str	r3, [r7, #28]
 8008270:	e00c      	b.n	800828c <tcp_abandon+0xb8>
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	429a      	cmp	r2, r3
 800827a:	d104      	bne.n	8008286 <tcp_abandon+0xb2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	60da      	str	r2, [r3, #12]
 8008284:	e005      	b.n	8008292 <tcp_abandon+0xbe>
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	61fb      	str	r3, [r7, #28]
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1ef      	bne.n	8008272 <tcp_abandon+0x9e>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	60da      	str	r2, [r3, #12]
 8008298:	e00b      	b.n	80082b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	8adb      	ldrh	r3, [r3, #22]
 80082a2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	4828      	ldr	r0, [pc, #160]	@ (8008348 <tcp_abandon+0x174>)
 80082a8:	f001 f978 	bl	800959c <tcp_pcb_remove>
 80082ac:	4b27      	ldr	r3, [pc, #156]	@ (800834c <tcp_abandon+0x178>)
 80082ae:	2201      	movs	r2, #1
 80082b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d004      	beq.n	80082c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fed8 	bl	8009074 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d004      	beq.n	80082d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fecf 	bl	8009074 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fec6 	bl	8009074 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80082e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00e      	beq.n	800830c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3304      	adds	r3, #4
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	8b12      	ldrh	r2, [r2, #24]
 80082f8:	9202      	str	r2, [sp, #8]
 80082fa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80082fc:	9201      	str	r2, [sp, #4]
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	460b      	mov	r3, r1
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	69b9      	ldr	r1, [r7, #24]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f005 fb12 	bl	800d930 <tcp_rst>
    }
    last_state = pcb->state;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	7d1b      	ldrb	r3, [r3, #20]
 8008310:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff fd34 	bl	8007d80 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d004      	beq.n	8008328 <tcp_abandon+0x154>
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f06f 010c 	mvn.w	r1, #12
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	4798      	blx	r3
  }
}
 8008328:	3728      	adds	r7, #40	@ 0x28
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	08013ed8 	.word	0x08013ed8
 8008334:	0801401c 	.word	0x0801401c
 8008338:	08013f1c 	.word	0x08013f1c
 800833c:	08014038 	.word	0x08014038
 8008340:	20008480 	.word	0x20008480
 8008344:	20008474 	.word	0x20008474
 8008348:	2000847c 	.word	0x2000847c
 800834c:	20008484 	.word	0x20008484

08008350 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008358:	2101      	movs	r1, #1
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff ff3a 	bl	80081d4 <tcp_abandon>
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4613      	mov	r3, r2
 8008374:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008376:	2304      	movs	r3, #4
 8008378:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008380:	4b3e      	ldr	r3, [pc, #248]	@ (800847c <tcp_bind+0x114>)
 8008382:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d109      	bne.n	800839e <tcp_bind+0x36>
 800838a:	4b3d      	ldr	r3, [pc, #244]	@ (8008480 <tcp_bind+0x118>)
 800838c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8008390:	493c      	ldr	r1, [pc, #240]	@ (8008484 <tcp_bind+0x11c>)
 8008392:	483d      	ldr	r0, [pc, #244]	@ (8008488 <tcp_bind+0x120>)
 8008394:	f009 fef0 	bl	8012178 <iprintf>
 8008398:	f06f 030f 	mvn.w	r3, #15
 800839c:	e06a      	b.n	8008474 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	7d1b      	ldrb	r3, [r3, #20]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d009      	beq.n	80083ba <tcp_bind+0x52>
 80083a6:	4b36      	ldr	r3, [pc, #216]	@ (8008480 <tcp_bind+0x118>)
 80083a8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80083ac:	4937      	ldr	r1, [pc, #220]	@ (800848c <tcp_bind+0x124>)
 80083ae:	4836      	ldr	r0, [pc, #216]	@ (8008488 <tcp_bind+0x120>)
 80083b0:	f009 fee2 	bl	8012178 <iprintf>
 80083b4:	f06f 0305 	mvn.w	r3, #5
 80083b8:	e05c      	b.n	8008474 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d109      	bne.n	80083d4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80083c0:	f000 f9f0 	bl	80087a4 <tcp_new_port>
 80083c4:	4603      	mov	r3, r0
 80083c6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80083c8:	88fb      	ldrh	r3, [r7, #6]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d135      	bne.n	800843a <tcp_bind+0xd2>
      return ERR_BUF;
 80083ce:	f06f 0301 	mvn.w	r3, #1
 80083d2:	e04f      	b.n	8008474 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80083d4:	2300      	movs	r3, #0
 80083d6:	61fb      	str	r3, [r7, #28]
 80083d8:	e02b      	b.n	8008432 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80083da:	4a2d      	ldr	r2, [pc, #180]	@ (8008490 <tcp_bind+0x128>)
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	e01e      	b.n	8008426 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	8adb      	ldrh	r3, [r3, #22]
 80083ec:	88fa      	ldrh	r2, [r7, #6]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d116      	bne.n	8008420 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80083f2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d010      	beq.n	800841a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00c      	beq.n	800841a <tcp_bind+0xb2>
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d009      	beq.n	800841a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d005      	beq.n	800841a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008416:	429a      	cmp	r2, r3
 8008418:	d102      	bne.n	8008420 <tcp_bind+0xb8>
              return ERR_USE;
 800841a:	f06f 0307 	mvn.w	r3, #7
 800841e:	e029      	b.n	8008474 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	61bb      	str	r3, [r7, #24]
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1dd      	bne.n	80083e8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	3301      	adds	r3, #1
 8008430:	61fb      	str	r3, [r7, #28]
 8008432:	69fa      	ldr	r2, [r7, #28]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	429a      	cmp	r2, r3
 8008438:	dbcf      	blt.n	80083da <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00c      	beq.n	800845a <tcp_bind+0xf2>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d008      	beq.n	800845a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <tcp_bind+0xec>
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	e000      	b.n	8008456 <tcp_bind+0xee>
 8008454:	2300      	movs	r3, #0
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	88fa      	ldrh	r2, [r7, #6]
 800845e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008460:	4b0c      	ldr	r3, [pc, #48]	@ (8008494 <tcp_bind+0x12c>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	60da      	str	r2, [r3, #12]
 8008468:	4a0a      	ldr	r2, [pc, #40]	@ (8008494 <tcp_bind+0x12c>)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	f005 fc21 	bl	800dcb4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3720      	adds	r7, #32
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	08016034 	.word	0x08016034
 8008480:	08013ed8 	.word	0x08013ed8
 8008484:	0801406c 	.word	0x0801406c
 8008488:	08013f1c 	.word	0x08013f1c
 800848c:	08014084 	.word	0x08014084
 8008490:	0801600c 	.word	0x0801600c
 8008494:	20008474 	.word	0x20008474

08008498 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d106      	bne.n	80084ba <tcp_accept_null+0x22>
 80084ac:	4b07      	ldr	r3, [pc, #28]	@ (80084cc <tcp_accept_null+0x34>)
 80084ae:	f240 320f 	movw	r2, #783	@ 0x30f
 80084b2:	4907      	ldr	r1, [pc, #28]	@ (80084d0 <tcp_accept_null+0x38>)
 80084b4:	4807      	ldr	r0, [pc, #28]	@ (80084d4 <tcp_accept_null+0x3c>)
 80084b6:	f009 fe5f 	bl	8012178 <iprintf>

  tcp_abort(pcb);
 80084ba:	68b8      	ldr	r0, [r7, #8]
 80084bc:	f7ff ff48 	bl	8008350 <tcp_abort>

  return ERR_ABRT;
 80084c0:	f06f 030c 	mvn.w	r3, #12
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	08013ed8 	.word	0x08013ed8
 80084d0:	080140ac 	.word	0x080140ac
 80084d4:	08013f1c 	.word	0x08013f1c

080084d8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	2200      	movs	r2, #0
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f806 	bl	80084fc <tcp_listen_with_backlog_and_err>
 80084f0:	4603      	mov	r3, r0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	460b      	mov	r3, r1
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800850a:	2300      	movs	r3, #0
 800850c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d109      	bne.n	8008528 <tcp_listen_with_backlog_and_err+0x2c>
 8008514:	4b47      	ldr	r3, [pc, #284]	@ (8008634 <tcp_listen_with_backlog_and_err+0x138>)
 8008516:	f240 3259 	movw	r2, #857	@ 0x359
 800851a:	4947      	ldr	r1, [pc, #284]	@ (8008638 <tcp_listen_with_backlog_and_err+0x13c>)
 800851c:	4847      	ldr	r0, [pc, #284]	@ (800863c <tcp_listen_with_backlog_and_err+0x140>)
 800851e:	f009 fe2b 	bl	8012178 <iprintf>
 8008522:	23f0      	movs	r3, #240	@ 0xf0
 8008524:	76fb      	strb	r3, [r7, #27]
 8008526:	e079      	b.n	800861c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	7d1b      	ldrb	r3, [r3, #20]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <tcp_listen_with_backlog_and_err+0x48>
 8008530:	4b40      	ldr	r3, [pc, #256]	@ (8008634 <tcp_listen_with_backlog_and_err+0x138>)
 8008532:	f240 325a 	movw	r2, #858	@ 0x35a
 8008536:	4942      	ldr	r1, [pc, #264]	@ (8008640 <tcp_listen_with_backlog_and_err+0x144>)
 8008538:	4840      	ldr	r0, [pc, #256]	@ (800863c <tcp_listen_with_backlog_and_err+0x140>)
 800853a:	f009 fe1d 	bl	8012178 <iprintf>
 800853e:	23f1      	movs	r3, #241	@ 0xf1
 8008540:	76fb      	strb	r3, [r7, #27]
 8008542:	e06b      	b.n	800861c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	7d1b      	ldrb	r3, [r3, #20]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d104      	bne.n	8008556 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008550:	23f7      	movs	r3, #247	@ 0xf7
 8008552:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008554:	e062      	b.n	800861c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008556:	2002      	movs	r0, #2
 8008558:	f7fe fa8c 	bl	8006a74 <memp_malloc>
 800855c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8008564:	23ff      	movs	r3, #255	@ 0xff
 8008566:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008568:	e058      	b.n	800861c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	691a      	ldr	r2, [r3, #16]
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8ada      	ldrh	r2, [r3, #22]
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	2201      	movs	r2, #1
 800857e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	7d5a      	ldrb	r2, [r3, #21]
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	7a5a      	ldrb	r2, [r3, #9]
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	2200      	movs	r2, #0
 8008594:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	7ada      	ldrb	r2, [r3, #11]
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	7a9a      	ldrb	r2, [r3, #10]
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8adb      	ldrh	r3, [r3, #22]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d021      	beq.n	80085fa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80085b6:	4b23      	ldr	r3, [pc, #140]	@ (8008644 <tcp_listen_with_backlog_and_err+0x148>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d105      	bne.n	80085cc <tcp_listen_with_backlog_and_err+0xd0>
 80085c0:	4b20      	ldr	r3, [pc, #128]	@ (8008644 <tcp_listen_with_backlog_and_err+0x148>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008644 <tcp_listen_with_backlog_and_err+0x148>)
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	e013      	b.n	80085f4 <tcp_listen_with_backlog_and_err+0xf8>
 80085cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008644 <tcp_listen_with_backlog_and_err+0x148>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	e00c      	b.n	80085ee <tcp_listen_with_backlog_and_err+0xf2>
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d104      	bne.n	80085e8 <tcp_listen_with_backlog_and_err+0xec>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	68da      	ldr	r2, [r3, #12]
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	60da      	str	r2, [r3, #12]
 80085e6:	e005      	b.n	80085f4 <tcp_listen_with_backlog_and_err+0xf8>
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1ef      	bne.n	80085d4 <tcp_listen_with_backlog_and_err+0xd8>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7ff fbc0 	bl	8007d80 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	4a11      	ldr	r2, [pc, #68]	@ (8008648 <tcp_listen_with_backlog_and_err+0x14c>)
 8008604:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008606:	4b11      	ldr	r3, [pc, #68]	@ (800864c <tcp_listen_with_backlog_and_err+0x150>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	60da      	str	r2, [r3, #12]
 800860e:	4a0f      	ldr	r2, [pc, #60]	@ (800864c <tcp_listen_with_backlog_and_err+0x150>)
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	f005 fb4e 	bl	800dcb4 <tcp_timer_needed>
  res = ERR_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	7efa      	ldrb	r2, [r7, #27]
 8008626:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008628:	69fb      	ldr	r3, [r7, #28]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	08013ed8 	.word	0x08013ed8
 8008638:	080140cc 	.word	0x080140cc
 800863c:	08013f1c 	.word	0x08013f1c
 8008640:	080140fc 	.word	0x080140fc
 8008644:	20008474 	.word	0x20008474
 8008648:	08008499 	.word	0x08008499
 800864c:	20008478 	.word	0x20008478

08008650 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d106      	bne.n	800866c <tcp_update_rcv_ann_wnd+0x1c>
 800865e:	4b25      	ldr	r3, [pc, #148]	@ (80086f4 <tcp_update_rcv_ann_wnd+0xa4>)
 8008660:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008664:	4924      	ldr	r1, [pc, #144]	@ (80086f8 <tcp_update_rcv_ann_wnd+0xa8>)
 8008666:	4825      	ldr	r0, [pc, #148]	@ (80086fc <tcp_update_rcv_ann_wnd+0xac>)
 8008668:	f009 fd86 	bl	8012178 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008674:	4413      	add	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8008680:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8008684:	bf28      	it	cs
 8008686:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800868a:	b292      	uxth	r2, r2
 800868c:	4413      	add	r3, r2
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	db08      	blt.n	80086a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	e020      	b.n	80086ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	dd03      	ble.n	80086be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80086bc:	e014      	b.n	80086e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086d0:	d306      	bcc.n	80086e0 <tcp_update_rcv_ann_wnd+0x90>
 80086d2:	4b08      	ldr	r3, [pc, #32]	@ (80086f4 <tcp_update_rcv_ann_wnd+0xa4>)
 80086d4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80086d8:	4909      	ldr	r1, [pc, #36]	@ (8008700 <tcp_update_rcv_ann_wnd+0xb0>)
 80086da:	4808      	ldr	r0, [pc, #32]	@ (80086fc <tcp_update_rcv_ann_wnd+0xac>)
 80086dc:	f009 fd4c 	bl	8012178 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80086e8:	2300      	movs	r3, #0
  }
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	08013ed8 	.word	0x08013ed8
 80086f8:	08014134 	.word	0x08014134
 80086fc:	08013f1c 	.word	0x08013f1c
 8008700:	08014158 	.word	0x08014158

08008704 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d107      	bne.n	8008726 <tcp_recved+0x22>
 8008716:	4b1f      	ldr	r3, [pc, #124]	@ (8008794 <tcp_recved+0x90>)
 8008718:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800871c:	491e      	ldr	r1, [pc, #120]	@ (8008798 <tcp_recved+0x94>)
 800871e:	481f      	ldr	r0, [pc, #124]	@ (800879c <tcp_recved+0x98>)
 8008720:	f009 fd2a 	bl	8012178 <iprintf>
 8008724:	e032      	b.n	800878c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	7d1b      	ldrb	r3, [r3, #20]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d106      	bne.n	800873c <tcp_recved+0x38>
 800872e:	4b19      	ldr	r3, [pc, #100]	@ (8008794 <tcp_recved+0x90>)
 8008730:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008734:	491a      	ldr	r1, [pc, #104]	@ (80087a0 <tcp_recved+0x9c>)
 8008736:	4819      	ldr	r0, [pc, #100]	@ (800879c <tcp_recved+0x98>)
 8008738:	f009 fd1e 	bl	8012178 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008740:	887b      	ldrh	r3, [r7, #2]
 8008742:	4413      	add	r3, r2
 8008744:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008746:	89fb      	ldrh	r3, [r7, #14]
 8008748:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800874c:	d804      	bhi.n	8008758 <tcp_recved+0x54>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008752:	89fa      	ldrh	r2, [r7, #14]
 8008754:	429a      	cmp	r2, r3
 8008756:	d204      	bcs.n	8008762 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800875e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008760:	e002      	b.n	8008768 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	89fa      	ldrh	r2, [r7, #14]
 8008766:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff ff71 	bl	8008650 <tcp_update_rcv_ann_wnd>
 800876e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8008776:	d309      	bcc.n	800878c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	8b5b      	ldrh	r3, [r3, #26]
 800877c:	f043 0302 	orr.w	r3, r3, #2
 8008780:	b29a      	uxth	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f004 fb1e 	bl	800cdc8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	08013ed8 	.word	0x08013ed8
 8008798:	08014174 	.word	0x08014174
 800879c:	08013f1c 	.word	0x08013f1c
 80087a0:	0801418c 	.word	0x0801418c

080087a4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80087ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008828 <tcp_new_port+0x84>)
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	3301      	adds	r3, #1
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008828 <tcp_new_port+0x84>)
 80087b8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80087ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008828 <tcp_new_port+0x84>)
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d103      	bne.n	80087ce <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80087c6:	4b18      	ldr	r3, [pc, #96]	@ (8008828 <tcp_new_port+0x84>)
 80087c8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80087cc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80087ce:	2300      	movs	r3, #0
 80087d0:	71fb      	strb	r3, [r7, #7]
 80087d2:	e01e      	b.n	8008812 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	4a15      	ldr	r2, [pc, #84]	@ (800882c <tcp_new_port+0x88>)
 80087d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	e011      	b.n	8008806 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	8ada      	ldrh	r2, [r3, #22]
 80087e6:	4b10      	ldr	r3, [pc, #64]	@ (8008828 <tcp_new_port+0x84>)
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d108      	bne.n	8008800 <tcp_new_port+0x5c>
        n++;
 80087ee:	88bb      	ldrh	r3, [r7, #4]
 80087f0:	3301      	adds	r3, #1
 80087f2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80087f4:	88bb      	ldrh	r3, [r7, #4]
 80087f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087fa:	d3d8      	bcc.n	80087ae <tcp_new_port+0xa>
          return 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e00d      	b.n	800881c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	603b      	str	r3, [r7, #0]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1ea      	bne.n	80087e2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800880c:	79fb      	ldrb	r3, [r7, #7]
 800880e:	3301      	adds	r3, #1
 8008810:	71fb      	strb	r3, [r7, #7]
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	2b03      	cmp	r3, #3
 8008816:	d9dd      	bls.n	80087d4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008818:	4b03      	ldr	r3, [pc, #12]	@ (8008828 <tcp_new_port+0x84>)
 800881a:	881b      	ldrh	r3, [r3, #0]
}
 800881c:	4618      	mov	r0, r3
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	20000020 	.word	0x20000020
 800882c:	0801600c 	.word	0x0801600c

08008830 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008830:	b5b0      	push	{r4, r5, r7, lr}
 8008832:	b090      	sub	sp, #64	@ 0x40
 8008834:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800883c:	4b95      	ldr	r3, [pc, #596]	@ (8008a94 <tcp_slowtmr+0x264>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3301      	adds	r3, #1
 8008842:	4a94      	ldr	r2, [pc, #592]	@ (8008a94 <tcp_slowtmr+0x264>)
 8008844:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008846:	4b94      	ldr	r3, [pc, #592]	@ (8008a98 <tcp_slowtmr+0x268>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	3301      	adds	r3, #1
 800884c:	b2da      	uxtb	r2, r3
 800884e:	4b92      	ldr	r3, [pc, #584]	@ (8008a98 <tcp_slowtmr+0x268>)
 8008850:	701a      	strb	r2, [r3, #0]
 8008852:	e000      	b.n	8008856 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8008854:	bf00      	nop
  prev = NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800885a:	4b90      	ldr	r3, [pc, #576]	@ (8008a9c <tcp_slowtmr+0x26c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008860:	e29f      	b.n	8008da2 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008864:	7d1b      	ldrb	r3, [r3, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <tcp_slowtmr+0x48>
 800886a:	4b8d      	ldr	r3, [pc, #564]	@ (8008aa0 <tcp_slowtmr+0x270>)
 800886c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8008870:	498c      	ldr	r1, [pc, #560]	@ (8008aa4 <tcp_slowtmr+0x274>)
 8008872:	488d      	ldr	r0, [pc, #564]	@ (8008aa8 <tcp_slowtmr+0x278>)
 8008874:	f009 fc80 	bl	8012178 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887a:	7d1b      	ldrb	r3, [r3, #20]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d106      	bne.n	800888e <tcp_slowtmr+0x5e>
 8008880:	4b87      	ldr	r3, [pc, #540]	@ (8008aa0 <tcp_slowtmr+0x270>)
 8008882:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8008886:	4989      	ldr	r1, [pc, #548]	@ (8008aac <tcp_slowtmr+0x27c>)
 8008888:	4887      	ldr	r0, [pc, #540]	@ (8008aa8 <tcp_slowtmr+0x278>)
 800888a:	f009 fc75 	bl	8012178 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800888e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008890:	7d1b      	ldrb	r3, [r3, #20]
 8008892:	2b0a      	cmp	r3, #10
 8008894:	d106      	bne.n	80088a4 <tcp_slowtmr+0x74>
 8008896:	4b82      	ldr	r3, [pc, #520]	@ (8008aa0 <tcp_slowtmr+0x270>)
 8008898:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800889c:	4984      	ldr	r1, [pc, #528]	@ (8008ab0 <tcp_slowtmr+0x280>)
 800889e:	4882      	ldr	r0, [pc, #520]	@ (8008aa8 <tcp_slowtmr+0x278>)
 80088a0:	f009 fc6a 	bl	8012178 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80088a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a6:	7f9a      	ldrb	r2, [r3, #30]
 80088a8:	4b7b      	ldr	r3, [pc, #492]	@ (8008a98 <tcp_slowtmr+0x268>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d105      	bne.n	80088bc <tcp_slowtmr+0x8c>
      prev = pcb;
 80088b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80088b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80088ba:	e272      	b.n	8008da2 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80088bc:	4b76      	ldr	r3, [pc, #472]	@ (8008a98 <tcp_slowtmr+0x268>)
 80088be:	781a      	ldrb	r2, [r3, #0]
 80088c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80088d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d2:	7d1b      	ldrb	r3, [r3, #20]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d10a      	bne.n	80088ee <tcp_slowtmr+0xbe>
 80088d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088de:	2b05      	cmp	r3, #5
 80088e0:	d905      	bls.n	80088ee <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80088e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088e6:	3301      	adds	r3, #1
 80088e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80088ec:	e11e      	b.n	8008b2c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80088ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088f4:	2b0b      	cmp	r3, #11
 80088f6:	d905      	bls.n	8008904 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80088f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088fc:	3301      	adds	r3, #1
 80088fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008902:	e113      	b.n	8008b2c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8008904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008906:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800890a:	2b00      	cmp	r3, #0
 800890c:	d075      	beq.n	80089fa <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800890e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008912:	2b00      	cmp	r3, #0
 8008914:	d006      	beq.n	8008924 <tcp_slowtmr+0xf4>
 8008916:	4b62      	ldr	r3, [pc, #392]	@ (8008aa0 <tcp_slowtmr+0x270>)
 8008918:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800891c:	4965      	ldr	r1, [pc, #404]	@ (8008ab4 <tcp_slowtmr+0x284>)
 800891e:	4862      	ldr	r0, [pc, #392]	@ (8008aa8 <tcp_slowtmr+0x278>)
 8008920:	f009 fc2a 	bl	8012178 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d106      	bne.n	800893a <tcp_slowtmr+0x10a>
 800892c:	4b5c      	ldr	r3, [pc, #368]	@ (8008aa0 <tcp_slowtmr+0x270>)
 800892e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008932:	4961      	ldr	r1, [pc, #388]	@ (8008ab8 <tcp_slowtmr+0x288>)
 8008934:	485c      	ldr	r0, [pc, #368]	@ (8008aa8 <tcp_slowtmr+0x278>)
 8008936:	f009 fc1f 	bl	8012178 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800893a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8008940:	2b0b      	cmp	r3, #11
 8008942:	d905      	bls.n	8008950 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8008944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008948:	3301      	adds	r3, #1
 800894a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800894e:	e0ed      	b.n	8008b2c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008952:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008956:	3b01      	subs	r3, #1
 8008958:	4a58      	ldr	r2, [pc, #352]	@ (8008abc <tcp_slowtmr+0x28c>)
 800895a:	5cd3      	ldrb	r3, [r2, r3]
 800895c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800895e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008960:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008964:	7c7a      	ldrb	r2, [r7, #17]
 8008966:	429a      	cmp	r2, r3
 8008968:	d907      	bls.n	800897a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800896a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008970:	3301      	adds	r3, #1
 8008972:	b2da      	uxtb	r2, r3
 8008974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008976:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008980:	7c7a      	ldrb	r2, [r7, #17]
 8008982:	429a      	cmp	r2, r3
 8008984:	f200 80d2 	bhi.w	8008b2c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8008988:	2301      	movs	r3, #1
 800898a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008992:	2b00      	cmp	r3, #0
 8008994:	d108      	bne.n	80089a8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008996:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008998:	f005 f8be 	bl	800db18 <tcp_zero_window_probe>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d014      	beq.n	80089cc <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80089a2:	2300      	movs	r3, #0
 80089a4:	623b      	str	r3, [r7, #32]
 80089a6:	e011      	b.n	80089cc <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80089a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089ae:	4619      	mov	r1, r3
 80089b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089b2:	f003 ff83 	bl	800c8bc <tcp_split_unsent_seg>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d107      	bne.n	80089cc <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80089bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089be:	f004 fa03 	bl	800cdc8 <tcp_output>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 80ac 	beq.w	8008b2c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80089d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80089dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089de:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80089e2:	2b06      	cmp	r3, #6
 80089e4:	f200 80a2 	bhi.w	8008b2c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80089e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ea:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80089ee:	3301      	adds	r3, #1
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80089f8:	e098      	b.n	8008b2c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80089fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	db0f      	blt.n	8008a24 <tcp_slowtmr+0x1f4>
 8008a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008a0a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d008      	beq.n	8008a24 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8008a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	b21a      	sxth	r2, r3
 8008a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a22:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a26:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008a30:	429a      	cmp	r2, r3
 8008a32:	db7b      	blt.n	8008b2c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a36:	f004 fcbb 	bl	800d3b0 <tcp_rexmit_rto_prepare>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d007      	beq.n	8008a50 <tcp_slowtmr+0x220>
 8008a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d171      	bne.n	8008b2c <tcp_slowtmr+0x2fc>
 8008a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d06d      	beq.n	8008b2c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8008a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a52:	7d1b      	ldrb	r3, [r3, #20]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d03a      	beq.n	8008ace <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a5e:	2b0c      	cmp	r3, #12
 8008a60:	bf28      	it	cs
 8008a62:	230c      	movcs	r3, #12
 8008a64:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008a6c:	10db      	asrs	r3, r3, #3
 8008a6e:	b21b      	sxth	r3, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a78:	4413      	add	r3, r2
 8008a7a:	7efa      	ldrb	r2, [r7, #27]
 8008a7c:	4910      	ldr	r1, [pc, #64]	@ (8008ac0 <tcp_slowtmr+0x290>)
 8008a7e:	5c8a      	ldrb	r2, [r1, r2]
 8008a80:	4093      	lsls	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	dc1a      	bgt.n	8008ac4 <tcp_slowtmr+0x294>
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	b21a      	sxth	r2, r3
 8008a92:	e019      	b.n	8008ac8 <tcp_slowtmr+0x298>
 8008a94:	20008470 	.word	0x20008470
 8008a98:	20008486 	.word	0x20008486
 8008a9c:	2000847c 	.word	0x2000847c
 8008aa0:	08013ed8 	.word	0x08013ed8
 8008aa4:	0801421c 	.word	0x0801421c
 8008aa8:	08013f1c 	.word	0x08013f1c
 8008aac:	08014248 	.word	0x08014248
 8008ab0:	08014274 	.word	0x08014274
 8008ab4:	080142a4 	.word	0x080142a4
 8008ab8:	080142d8 	.word	0x080142d8
 8008abc:	08016004 	.word	0x08016004
 8008ac0:	08015ff4 	.word	0x08015ff4
 8008ac4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008adc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	bf28      	it	cs
 8008ae4:	4613      	movcs	r3, r2
 8008ae6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008ae8:	8a7b      	ldrh	r3, [r7, #18]
 8008aea:	085b      	lsrs	r3, r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008afe:	005b      	lsls	r3, r3, #1
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d206      	bcs.n	8008b14 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b10:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b16:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8008b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b20:	2200      	movs	r2, #0
 8008b22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008b26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b28:	f004 fcb2 	bl	800d490 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2e:	7d1b      	ldrb	r3, [r3, #20]
 8008b30:	2b06      	cmp	r3, #6
 8008b32:	d111      	bne.n	8008b58 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8008b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b36:	8b5b      	ldrh	r3, [r3, #26]
 8008b38:	f003 0310 	and.w	r3, r3, #16
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00b      	beq.n	8008b58 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b40:	4b9d      	ldr	r3, [pc, #628]	@ (8008db8 <tcp_slowtmr+0x588>)
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b28      	cmp	r3, #40	@ 0x28
 8008b4c:	d904      	bls.n	8008b58 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8008b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b52:	3301      	adds	r3, #1
 8008b54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5a:	7a5b      	ldrb	r3, [r3, #9]
 8008b5c:	f003 0308 	and.w	r3, r3, #8
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d04c      	beq.n	8008bfe <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8008b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b66:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b68:	2b04      	cmp	r3, #4
 8008b6a:	d003      	beq.n	8008b74 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8008b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008b70:	2b07      	cmp	r3, #7
 8008b72:	d144      	bne.n	8008bfe <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b74:	4b90      	ldr	r3, [pc, #576]	@ (8008db8 <tcp_slowtmr+0x588>)
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b84:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8008b88:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8008b8c:	498b      	ldr	r1, [pc, #556]	@ (8008dbc <tcp_slowtmr+0x58c>)
 8008b8e:	fba1 1303 	umull	r1, r3, r1, r3
 8008b92:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d90a      	bls.n	8008bae <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8008b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008bac:	e027      	b.n	8008bfe <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bae:	4b82      	ldr	r3, [pc, #520]	@ (8008db8 <tcp_slowtmr+0x588>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bba:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	4b7e      	ldr	r3, [pc, #504]	@ (8008dc0 <tcp_slowtmr+0x590>)
 8008bc8:	fb00 f303 	mul.w	r3, r0, r3
 8008bcc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008bce:	497b      	ldr	r1, [pc, #492]	@ (8008dbc <tcp_slowtmr+0x58c>)
 8008bd0:	fba1 1303 	umull	r1, r3, r1, r3
 8008bd4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d911      	bls.n	8008bfe <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8008bda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008bdc:	f004 ff5c 	bl	800da98 <tcp_keepalive>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8008be6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d107      	bne.n	8008bfe <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8008bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfa:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d011      	beq.n	8008c2a <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008c06:	4b6c      	ldr	r3, [pc, #432]	@ (8008db8 <tcp_slowtmr+0x588>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008c16:	4619      	mov	r1, r3
 8008c18:	460b      	mov	r3, r1
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	440b      	add	r3, r1
 8008c1e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d302      	bcc.n	8008c2a <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8008c24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c26:	f000 fe1d 	bl	8009864 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2c:	7d1b      	ldrb	r3, [r3, #20]
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d10b      	bne.n	8008c4a <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c32:	4b61      	ldr	r3, [pc, #388]	@ (8008db8 <tcp_slowtmr+0x588>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b28      	cmp	r3, #40	@ 0x28
 8008c3e:	d904      	bls.n	8008c4a <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8008c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c44:	3301      	adds	r3, #1
 8008c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4c:	7d1b      	ldrb	r3, [r3, #20]
 8008c4e:	2b09      	cmp	r3, #9
 8008c50:	d10b      	bne.n	8008c6a <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c52:	4b59      	ldr	r3, [pc, #356]	@ (8008db8 <tcp_slowtmr+0x588>)
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2bf0      	cmp	r3, #240	@ 0xf0
 8008c5e:	d904      	bls.n	8008c6a <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8008c60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c64:	3301      	adds	r3, #1
 8008c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8008c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d060      	beq.n	8008d34 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8008c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c78:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8008c7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c7c:	f000 fc3e 	bl	80094fc <tcp_pcb_purge>
      if (prev != NULL) {
 8008c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d010      	beq.n	8008ca8 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c86:	4b4f      	ldr	r3, [pc, #316]	@ (8008dc4 <tcp_slowtmr+0x594>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d106      	bne.n	8008c9e <tcp_slowtmr+0x46e>
 8008c90:	4b4d      	ldr	r3, [pc, #308]	@ (8008dc8 <tcp_slowtmr+0x598>)
 8008c92:	f240 526d 	movw	r2, #1389	@ 0x56d
 8008c96:	494d      	ldr	r1, [pc, #308]	@ (8008dcc <tcp_slowtmr+0x59c>)
 8008c98:	484d      	ldr	r0, [pc, #308]	@ (8008dd0 <tcp_slowtmr+0x5a0>)
 8008c9a:	f009 fa6d 	bl	8012178 <iprintf>
        prev->next = pcb->next;
 8008c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca4:	60da      	str	r2, [r3, #12]
 8008ca6:	e00f      	b.n	8008cc8 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008ca8:	4b46      	ldr	r3, [pc, #280]	@ (8008dc4 <tcp_slowtmr+0x594>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d006      	beq.n	8008cc0 <tcp_slowtmr+0x490>
 8008cb2:	4b45      	ldr	r3, [pc, #276]	@ (8008dc8 <tcp_slowtmr+0x598>)
 8008cb4:	f240 5271 	movw	r2, #1393	@ 0x571
 8008cb8:	4946      	ldr	r1, [pc, #280]	@ (8008dd4 <tcp_slowtmr+0x5a4>)
 8008cba:	4845      	ldr	r0, [pc, #276]	@ (8008dd0 <tcp_slowtmr+0x5a0>)
 8008cbc:	f009 fa5c 	bl	8012178 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8008dc4 <tcp_slowtmr+0x594>)
 8008cc6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008cc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d013      	beq.n	8008cf8 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008cd8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cdc:	3304      	adds	r3, #4
 8008cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ce0:	8ad2      	ldrh	r2, [r2, #22]
 8008ce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ce4:	8b09      	ldrh	r1, [r1, #24]
 8008ce6:	9102      	str	r1, [sp, #8]
 8008ce8:	9201      	str	r2, [sp, #4]
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	462b      	mov	r3, r5
 8008cee:	4622      	mov	r2, r4
 8008cf0:	4601      	mov	r1, r0
 8008cf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cf4:	f004 fe1c 	bl	800d930 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d00:	7d1b      	ldrb	r3, [r3, #20]
 8008d02:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d06:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008d0e:	6838      	ldr	r0, [r7, #0]
 8008d10:	f7ff f836 	bl	8007d80 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008d14:	4b30      	ldr	r3, [pc, #192]	@ (8008dd8 <tcp_slowtmr+0x5a8>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d004      	beq.n	8008d2a <tcp_slowtmr+0x4fa>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f06f 010c 	mvn.w	r1, #12
 8008d26:	68b8      	ldr	r0, [r7, #8]
 8008d28:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8008dd8 <tcp_slowtmr+0x5a8>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d037      	beq.n	8008da2 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8008d32:	e590      	b.n	8008856 <tcp_slowtmr+0x26>
      prev = pcb;
 8008d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d36:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d40:	7f1b      	ldrb	r3, [r3, #28]
 8008d42:	3301      	adds	r3, #1
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d48:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4c:	7f1a      	ldrb	r2, [r3, #28]
 8008d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d50:	7f5b      	ldrb	r3, [r3, #29]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d325      	bcc.n	8008da2 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8008d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d58:	2200      	movs	r2, #0
 8008d5a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd8 <tcp_slowtmr+0x5a8>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00b      	beq.n	8008d84 <tcp_slowtmr+0x554>
 8008d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d74:	6912      	ldr	r2, [r2, #16]
 8008d76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4798      	blx	r3
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008d82:	e002      	b.n	8008d8a <tcp_slowtmr+0x55a>
 8008d84:	2300      	movs	r3, #0
 8008d86:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8008d8a:	4b13      	ldr	r3, [pc, #76]	@ (8008dd8 <tcp_slowtmr+0x5a8>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f47f ad60 	bne.w	8008854 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008d94:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d102      	bne.n	8008da2 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8008d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d9e:	f004 f813 	bl	800cdc8 <tcp_output>
  while (pcb != NULL) {
 8008da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f47f ad5c 	bne.w	8008862 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008dae:	4b0b      	ldr	r3, [pc, #44]	@ (8008ddc <tcp_slowtmr+0x5ac>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008db4:	e067      	b.n	8008e86 <tcp_slowtmr+0x656>
 8008db6:	bf00      	nop
 8008db8:	20008470 	.word	0x20008470
 8008dbc:	10624dd3 	.word	0x10624dd3
 8008dc0:	000124f8 	.word	0x000124f8
 8008dc4:	2000847c 	.word	0x2000847c
 8008dc8:	08013ed8 	.word	0x08013ed8
 8008dcc:	08014310 	.word	0x08014310
 8008dd0:	08013f1c 	.word	0x08013f1c
 8008dd4:	0801433c 	.word	0x0801433c
 8008dd8:	20008484 	.word	0x20008484
 8008ddc:	20008480 	.word	0x20008480
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de2:	7d1b      	ldrb	r3, [r3, #20]
 8008de4:	2b0a      	cmp	r3, #10
 8008de6:	d006      	beq.n	8008df6 <tcp_slowtmr+0x5c6>
 8008de8:	4b2b      	ldr	r3, [pc, #172]	@ (8008e98 <tcp_slowtmr+0x668>)
 8008dea:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008dee:	492b      	ldr	r1, [pc, #172]	@ (8008e9c <tcp_slowtmr+0x66c>)
 8008df0:	482b      	ldr	r0, [pc, #172]	@ (8008ea0 <tcp_slowtmr+0x670>)
 8008df2:	f009 f9c1 	bl	8012178 <iprintf>
    pcb_remove = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008dfc:	4b29      	ldr	r3, [pc, #164]	@ (8008ea4 <tcp_slowtmr+0x674>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2bf0      	cmp	r3, #240	@ 0xf0
 8008e08:	d904      	bls.n	8008e14 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e0e:	3301      	adds	r3, #1
 8008e10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008e14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d02f      	beq.n	8008e7c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008e1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e1e:	f000 fb6d 	bl	80094fc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d010      	beq.n	8008e4a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e28:	4b1f      	ldr	r3, [pc, #124]	@ (8008ea8 <tcp_slowtmr+0x678>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d106      	bne.n	8008e40 <tcp_slowtmr+0x610>
 8008e32:	4b19      	ldr	r3, [pc, #100]	@ (8008e98 <tcp_slowtmr+0x668>)
 8008e34:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008e38:	491c      	ldr	r1, [pc, #112]	@ (8008eac <tcp_slowtmr+0x67c>)
 8008e3a:	4819      	ldr	r0, [pc, #100]	@ (8008ea0 <tcp_slowtmr+0x670>)
 8008e3c:	f009 f99c 	bl	8012178 <iprintf>
        prev->next = pcb->next;
 8008e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e46:	60da      	str	r2, [r3, #12]
 8008e48:	e00f      	b.n	8008e6a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008e4a:	4b17      	ldr	r3, [pc, #92]	@ (8008ea8 <tcp_slowtmr+0x678>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d006      	beq.n	8008e62 <tcp_slowtmr+0x632>
 8008e54:	4b10      	ldr	r3, [pc, #64]	@ (8008e98 <tcp_slowtmr+0x668>)
 8008e56:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008e5a:	4915      	ldr	r1, [pc, #84]	@ (8008eb0 <tcp_slowtmr+0x680>)
 8008e5c:	4810      	ldr	r0, [pc, #64]	@ (8008ea0 <tcp_slowtmr+0x670>)
 8008e5e:	f009 f98b 	bl	8012178 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	4a10      	ldr	r2, [pc, #64]	@ (8008ea8 <tcp_slowtmr+0x678>)
 8008e68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008e74:	69f8      	ldr	r0, [r7, #28]
 8008e76:	f7fe ff83 	bl	8007d80 <tcp_free>
 8008e7a:	e004      	b.n	8008e86 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1a9      	bne.n	8008de0 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	3730      	adds	r7, #48	@ 0x30
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bdb0      	pop	{r4, r5, r7, pc}
 8008e96:	bf00      	nop
 8008e98:	08013ed8 	.word	0x08013ed8
 8008e9c:	08014368 	.word	0x08014368
 8008ea0:	08013f1c 	.word	0x08013f1c
 8008ea4:	20008470 	.word	0x20008470
 8008ea8:	20008480 	.word	0x20008480
 8008eac:	08014398 	.word	0x08014398
 8008eb0:	080143c0 	.word	0x080143c0

08008eb4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008eba:	4b2d      	ldr	r3, [pc, #180]	@ (8008f70 <tcp_fasttmr+0xbc>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8008f70 <tcp_fasttmr+0xbc>)
 8008ec4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8008f74 <tcp_fasttmr+0xc0>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008ecc:	e048      	b.n	8008f60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	7f9a      	ldrb	r2, [r3, #30]
 8008ed2:	4b27      	ldr	r3, [pc, #156]	@ (8008f70 <tcp_fasttmr+0xbc>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d03f      	beq.n	8008f5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008eda:	4b25      	ldr	r3, [pc, #148]	@ (8008f70 <tcp_fasttmr+0xbc>)
 8008edc:	781a      	ldrb	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	8b5b      	ldrh	r3, [r3, #26]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d010      	beq.n	8008f10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	8b5b      	ldrh	r3, [r3, #26]
 8008ef2:	f043 0302 	orr.w	r3, r3, #2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f003 ff63 	bl	800cdc8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	8b5b      	ldrh	r3, [r3, #26]
 8008f06:	f023 0303 	bic.w	r3, r3, #3
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	8b5b      	ldrh	r3, [r3, #26]
 8008f14:	f003 0308 	and.w	r3, r3, #8
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d009      	beq.n	8008f30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	8b5b      	ldrh	r3, [r3, #26]
 8008f20:	f023 0308 	bic.w	r3, r3, #8
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff f8bc 	bl	80080a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f78 <tcp_fasttmr+0xc4>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f819 	bl	8008f7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f78 <tcp_fasttmr+0xc4>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d000      	beq.n	8008f54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008f52:	e7b8      	b.n	8008ec6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	607b      	str	r3, [r7, #4]
 8008f58:	e002      	b.n	8008f60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1b3      	bne.n	8008ece <tcp_fasttmr+0x1a>
    }
  }
}
 8008f66:	bf00      	nop
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20008486 	.word	0x20008486
 8008f74:	2000847c 	.word	0x2000847c
 8008f78:	20008484 	.word	0x20008484

08008f7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008f7c:	b590      	push	{r4, r7, lr}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d109      	bne.n	8008f9e <tcp_process_refused_data+0x22>
 8008f8a:	4b37      	ldr	r3, [pc, #220]	@ (8009068 <tcp_process_refused_data+0xec>)
 8008f8c:	f240 6209 	movw	r2, #1545	@ 0x609
 8008f90:	4936      	ldr	r1, [pc, #216]	@ (800906c <tcp_process_refused_data+0xf0>)
 8008f92:	4837      	ldr	r0, [pc, #220]	@ (8009070 <tcp_process_refused_data+0xf4>)
 8008f94:	f009 f8f0 	bl	8012178 <iprintf>
 8008f98:	f06f 030f 	mvn.w	r3, #15
 8008f9c:	e060      	b.n	8009060 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fa2:	7b5b      	ldrb	r3, [r3, #13]
 8008fa4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008faa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00b      	beq.n	8008fd4 <tcp_process_refused_data+0x58>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6918      	ldr	r0, [r3, #16]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	47a0      	blx	r4
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73fb      	strb	r3, [r7, #15]
 8008fd2:	e007      	b.n	8008fe4 <tcp_process_refused_data+0x68>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	2000      	movs	r0, #0
 8008fdc:	f000 f8a4 	bl	8009128 <tcp_recv_null>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d12a      	bne.n	8009042 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d033      	beq.n	800905e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ffa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008ffe:	d005      	beq.n	800900c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009004:	3301      	adds	r3, #1
 8009006:	b29a      	uxth	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00b      	beq.n	800902e <tcp_process_refused_data+0xb2>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6918      	ldr	r0, [r3, #16]
 8009020:	2300      	movs	r3, #0
 8009022:	2200      	movs	r2, #0
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	47a0      	blx	r4
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]
 800902c:	e001      	b.n	8009032 <tcp_process_refused_data+0xb6>
 800902e:	2300      	movs	r3, #0
 8009030:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009036:	f113 0f0d 	cmn.w	r3, #13
 800903a:	d110      	bne.n	800905e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800903c:	f06f 030c 	mvn.w	r3, #12
 8009040:	e00e      	b.n	8009060 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009046:	f113 0f0d 	cmn.w	r3, #13
 800904a:	d102      	bne.n	8009052 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800904c:	f06f 030c 	mvn.w	r3, #12
 8009050:	e006      	b.n	8009060 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009058:	f06f 0304 	mvn.w	r3, #4
 800905c:	e000      	b.n	8009060 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	bd90      	pop	{r4, r7, pc}
 8009068:	08013ed8 	.word	0x08013ed8
 800906c:	080143e8 	.word	0x080143e8
 8009070:	08013f1c 	.word	0x08013f1c

08009074 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800907c:	e007      	b.n	800908e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f80a 	bl	800909e <tcp_seg_free>
    seg = next;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1f4      	bne.n	800907e <tcp_segs_free+0xa>
  }
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00c      	beq.n	80090c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d004      	beq.n	80090be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fbc1 	bl	8007840 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	2003      	movs	r0, #3
 80090c2:	f7fd fd47 	bl	8006b54 <memp_free>
  }
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d106      	bne.n	80090ec <tcp_seg_copy+0x1c>
 80090de:	4b0f      	ldr	r3, [pc, #60]	@ (800911c <tcp_seg_copy+0x4c>)
 80090e0:	f240 6282 	movw	r2, #1666	@ 0x682
 80090e4:	490e      	ldr	r1, [pc, #56]	@ (8009120 <tcp_seg_copy+0x50>)
 80090e6:	480f      	ldr	r0, [pc, #60]	@ (8009124 <tcp_seg_copy+0x54>)
 80090e8:	f009 f846 	bl	8012178 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80090ec:	2003      	movs	r0, #3
 80090ee:	f7fd fcc1 	bl	8006a74 <memp_malloc>
 80090f2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <tcp_seg_copy+0x2e>
    return NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e00a      	b.n	8009114 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80090fe:	2210      	movs	r2, #16
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f009 f98f 	bl	8012426 <memcpy>
  pbuf_ref(cseg->p);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe fc37 	bl	8007980 <pbuf_ref>
  return cseg;
 8009112:	68fb      	ldr	r3, [r7, #12]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	08013ed8 	.word	0x08013ed8
 8009120:	0801442c 	.word	0x0801442c
 8009124:	08013f1c 	.word	0x08013f1c

08009128 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d109      	bne.n	8009150 <tcp_recv_null+0x28>
 800913c:	4b12      	ldr	r3, [pc, #72]	@ (8009188 <tcp_recv_null+0x60>)
 800913e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009142:	4912      	ldr	r1, [pc, #72]	@ (800918c <tcp_recv_null+0x64>)
 8009144:	4812      	ldr	r0, [pc, #72]	@ (8009190 <tcp_recv_null+0x68>)
 8009146:	f009 f817 	bl	8012178 <iprintf>
 800914a:	f06f 030f 	mvn.w	r3, #15
 800914e:	e016      	b.n	800917e <tcp_recv_null+0x56>

  if (p != NULL) {
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d009      	beq.n	800916a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	891b      	ldrh	r3, [r3, #8]
 800915a:	4619      	mov	r1, r3
 800915c:	68b8      	ldr	r0, [r7, #8]
 800915e:	f7ff fad1 	bl	8008704 <tcp_recved>
    pbuf_free(p);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7fe fb6c 	bl	8007840 <pbuf_free>
 8009168:	e008      	b.n	800917c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800916a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d104      	bne.n	800917c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009172:	68b8      	ldr	r0, [r7, #8]
 8009174:	f7ff f802 	bl	800817c <tcp_close>
 8009178:	4603      	mov	r3, r0
 800917a:	e000      	b.n	800917e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	08013ed8 	.word	0x08013ed8
 800918c:	08014448 	.word	0x08014448
 8009190:	08013f1c 	.word	0x08013f1c

08009194 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800919e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	db01      	blt.n	80091aa <tcp_kill_prio+0x16>
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	e000      	b.n	80091ac <tcp_kill_prio+0x18>
 80091aa:	237f      	movs	r3, #127	@ 0x7f
 80091ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80091ae:	7afb      	ldrb	r3, [r7, #11]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d034      	beq.n	800921e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80091b4:	7afb      	ldrb	r3, [r7, #11]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091c2:	4b19      	ldr	r3, [pc, #100]	@ (8009228 <tcp_kill_prio+0x94>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	e01f      	b.n	800920a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	7d5b      	ldrb	r3, [r3, #21]
 80091ce:	7afa      	ldrb	r2, [r7, #11]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d80c      	bhi.n	80091ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80091d8:	7afa      	ldrb	r2, [r7, #11]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d112      	bne.n	8009204 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091de:	4b13      	ldr	r3, [pc, #76]	@ (800922c <tcp_kill_prio+0x98>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d80a      	bhi.n	8009204 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80091ee:	4b0f      	ldr	r3, [pc, #60]	@ (800922c <tcp_kill_prio+0x98>)
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	7d5b      	ldrb	r3, [r3, #21]
 8009202:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	617b      	str	r3, [r7, #20]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1dc      	bne.n	80091ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009216:	6938      	ldr	r0, [r7, #16]
 8009218:	f7ff f89a 	bl	8008350 <tcp_abort>
 800921c:	e000      	b.n	8009220 <tcp_kill_prio+0x8c>
    return;
 800921e:	bf00      	nop
  }
}
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	2000847c 	.word	0x2000847c
 800922c:	20008470 	.word	0x20008470

08009230 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800923a:	79fb      	ldrb	r3, [r7, #7]
 800923c:	2b08      	cmp	r3, #8
 800923e:	d009      	beq.n	8009254 <tcp_kill_state+0x24>
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	2b09      	cmp	r3, #9
 8009244:	d006      	beq.n	8009254 <tcp_kill_state+0x24>
 8009246:	4b1a      	ldr	r3, [pc, #104]	@ (80092b0 <tcp_kill_state+0x80>)
 8009248:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800924c:	4919      	ldr	r1, [pc, #100]	@ (80092b4 <tcp_kill_state+0x84>)
 800924e:	481a      	ldr	r0, [pc, #104]	@ (80092b8 <tcp_kill_state+0x88>)
 8009250:	f008 ff92 	bl	8012178 <iprintf>

  inactivity = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009258:	2300      	movs	r3, #0
 800925a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800925c:	4b17      	ldr	r3, [pc, #92]	@ (80092bc <tcp_kill_state+0x8c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	e017      	b.n	8009294 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	7d1b      	ldrb	r3, [r3, #20]
 8009268:	79fa      	ldrb	r2, [r7, #7]
 800926a:	429a      	cmp	r2, r3
 800926c:	d10f      	bne.n	800928e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800926e:	4b14      	ldr	r3, [pc, #80]	@ (80092c0 <tcp_kill_state+0x90>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	429a      	cmp	r2, r3
 800927c:	d807      	bhi.n	800928e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800927e:	4b10      	ldr	r3, [pc, #64]	@ (80092c0 <tcp_kill_state+0x90>)
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1e4      	bne.n	8009264 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80092a0:	2100      	movs	r1, #0
 80092a2:	6938      	ldr	r0, [r7, #16]
 80092a4:	f7fe ff96 	bl	80081d4 <tcp_abandon>
  }
}
 80092a8:	bf00      	nop
 80092aa:	3718      	adds	r7, #24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	08013ed8 	.word	0x08013ed8
 80092b4:	08014464 	.word	0x08014464
 80092b8:	08013f1c 	.word	0x08013f1c
 80092bc:	2000847c 	.word	0x2000847c
 80092c0:	20008470 	.word	0x20008470

080092c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092d2:	4b12      	ldr	r3, [pc, #72]	@ (800931c <tcp_kill_timewait+0x58>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	e012      	b.n	8009300 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80092da:	4b11      	ldr	r3, [pc, #68]	@ (8009320 <tcp_kill_timewait+0x5c>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d807      	bhi.n	80092fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80092ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009320 <tcp_kill_timewait+0x5c>)
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e9      	bne.n	80092da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800930c:	68b8      	ldr	r0, [r7, #8]
 800930e:	f7ff f81f 	bl	8008350 <tcp_abort>
  }
}
 8009312:	bf00      	nop
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	20008480 	.word	0x20008480
 8009320:	20008470 	.word	0x20008470

08009324 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800932a:	4b10      	ldr	r3, [pc, #64]	@ (800936c <tcp_handle_closepend+0x48>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009330:	e014      	b.n	800935c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	8b5b      	ldrh	r3, [r3, #26]
 800933c:	f003 0308 	and.w	r3, r3, #8
 8009340:	2b00      	cmp	r3, #0
 8009342:	d009      	beq.n	8009358 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	8b5b      	ldrh	r3, [r3, #26]
 8009348:	f023 0308 	bic.w	r3, r3, #8
 800934c:	b29a      	uxth	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7fe fea8 	bl	80080a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e7      	bne.n	8009332 <tcp_handle_closepend+0xe>
  }
}
 8009362:	bf00      	nop
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	2000847c 	.word	0x2000847c

08009370 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800937a:	2001      	movs	r0, #1
 800937c:	f7fd fb7a 	bl	8006a74 <memp_malloc>
 8009380:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d126      	bne.n	80093d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009388:	f7ff ffcc 	bl	8009324 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800938c:	f7ff ff9a 	bl	80092c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009390:	2001      	movs	r0, #1
 8009392:	f7fd fb6f 	bl	8006a74 <memp_malloc>
 8009396:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d11b      	bne.n	80093d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800939e:	2009      	movs	r0, #9
 80093a0:	f7ff ff46 	bl	8009230 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093a4:	2001      	movs	r0, #1
 80093a6:	f7fd fb65 	bl	8006a74 <memp_malloc>
 80093aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d111      	bne.n	80093d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80093b2:	2008      	movs	r0, #8
 80093b4:	f7ff ff3c 	bl	8009230 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093b8:	2001      	movs	r0, #1
 80093ba:	f7fd fb5b 	bl	8006a74 <memp_malloc>
 80093be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d107      	bne.n	80093d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff fee3 	bl	8009194 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093ce:	2001      	movs	r0, #1
 80093d0:	f7fd fb50 	bl	8006a74 <memp_malloc>
 80093d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d03f      	beq.n	800945c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80093dc:	229c      	movs	r2, #156	@ 0x9c
 80093de:	2100      	movs	r1, #0
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f008 ff7e 	bl	80122e2 <memset>
    pcb->prio = prio;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	79fa      	ldrb	r2, [r7, #7]
 80093ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80093f2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80093fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	22ff      	movs	r2, #255	@ 0xff
 800940a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009412:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2206      	movs	r2, #6
 8009418:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2206      	movs	r2, #6
 8009420:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009428:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009432:	4b0d      	ldr	r3, [pc, #52]	@ (8009468 <tcp_alloc+0xf8>)
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800943a:	4b0c      	ldr	r3, [pc, #48]	@ (800946c <tcp_alloc+0xfc>)
 800943c:	781a      	ldrb	r2, [r3, #0]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009448:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4a08      	ldr	r2, [pc, #32]	@ (8009470 <tcp_alloc+0x100>)
 8009450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4a07      	ldr	r2, [pc, #28]	@ (8009474 <tcp_alloc+0x104>)
 8009458:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800945c:	68fb      	ldr	r3, [r7, #12]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20008470 	.word	0x20008470
 800946c:	20008486 	.word	0x20008486
 8009470:	08009129 	.word	0x08009129
 8009474:	006ddd00 	.word	0x006ddd00

08009478 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800947c:	2040      	movs	r0, #64	@ 0x40
 800947e:	f7ff ff77 	bl	8009370 <tcp_alloc>
 8009482:	4603      	mov	r3, r0
}
 8009484:	4618      	mov	r0, r3
 8009486:	bd80      	pop	{r7, pc}

08009488 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00e      	beq.n	80094b6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	7d1b      	ldrb	r3, [r3, #20]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d106      	bne.n	80094ae <tcp_recv+0x26>
 80094a0:	4b07      	ldr	r3, [pc, #28]	@ (80094c0 <tcp_recv+0x38>)
 80094a2:	f240 72df 	movw	r2, #2015	@ 0x7df
 80094a6:	4907      	ldr	r1, [pc, #28]	@ (80094c4 <tcp_recv+0x3c>)
 80094a8:	4807      	ldr	r0, [pc, #28]	@ (80094c8 <tcp_recv+0x40>)
 80094aa:	f008 fe65 	bl	8012178 <iprintf>
    pcb->recv = recv;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80094b6:	bf00      	nop
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	08013ed8 	.word	0x08013ed8
 80094c4:	08014474 	.word	0x08014474
 80094c8:	08013f1c 	.word	0x08013f1c

080094cc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d008      	beq.n	80094ee <tcp_accept+0x22>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	7d1b      	ldrb	r3, [r3, #20]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d104      	bne.n	80094ee <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	619a      	str	r2, [r3, #24]
  }
}
 80094ee:	bf00      	nop
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
	...

080094fc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d107      	bne.n	800951a <tcp_pcb_purge+0x1e>
 800950a:	4b21      	ldr	r3, [pc, #132]	@ (8009590 <tcp_pcb_purge+0x94>)
 800950c:	f640 0251 	movw	r2, #2129	@ 0x851
 8009510:	4920      	ldr	r1, [pc, #128]	@ (8009594 <tcp_pcb_purge+0x98>)
 8009512:	4821      	ldr	r0, [pc, #132]	@ (8009598 <tcp_pcb_purge+0x9c>)
 8009514:	f008 fe30 	bl	8012178 <iprintf>
 8009518:	e037      	b.n	800958a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	7d1b      	ldrb	r3, [r3, #20]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d033      	beq.n	800958a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009526:	2b0a      	cmp	r3, #10
 8009528:	d02f      	beq.n	800958a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800952e:	2b01      	cmp	r3, #1
 8009530:	d02b      	beq.n	800958a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009536:	2b00      	cmp	r3, #0
 8009538:	d007      	beq.n	800954a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800953e:	4618      	mov	r0, r3
 8009540:	f7fe f97e 	bl	8007840 <pbuf_free>
      pcb->refused_data = NULL;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f986 	bl	8009864 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800955e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff fd85 	bl	8009074 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff fd80 	bl	8009074 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	66da      	str	r2, [r3, #108]	@ 0x6c
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	08013ed8 	.word	0x08013ed8
 8009594:	08014524 	.word	0x08014524
 8009598:	08013f1c 	.word	0x08013f1c

0800959c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d106      	bne.n	80095ba <tcp_pcb_remove+0x1e>
 80095ac:	4b3e      	ldr	r3, [pc, #248]	@ (80096a8 <tcp_pcb_remove+0x10c>)
 80095ae:	f640 0283 	movw	r2, #2179	@ 0x883
 80095b2:	493e      	ldr	r1, [pc, #248]	@ (80096ac <tcp_pcb_remove+0x110>)
 80095b4:	483e      	ldr	r0, [pc, #248]	@ (80096b0 <tcp_pcb_remove+0x114>)
 80095b6:	f008 fddf 	bl	8012178 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d106      	bne.n	80095ce <tcp_pcb_remove+0x32>
 80095c0:	4b39      	ldr	r3, [pc, #228]	@ (80096a8 <tcp_pcb_remove+0x10c>)
 80095c2:	f640 0284 	movw	r2, #2180	@ 0x884
 80095c6:	493b      	ldr	r1, [pc, #236]	@ (80096b4 <tcp_pcb_remove+0x118>)
 80095c8:	4839      	ldr	r0, [pc, #228]	@ (80096b0 <tcp_pcb_remove+0x114>)
 80095ca:	f008 fdd5 	bl	8012178 <iprintf>

  TCP_RMV(pcblist, pcb);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d105      	bne.n	80095e4 <tcp_pcb_remove+0x48>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	e013      	b.n	800960c <tcp_pcb_remove+0x70>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	e00c      	b.n	8009606 <tcp_pcb_remove+0x6a>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d104      	bne.n	8009600 <tcp_pcb_remove+0x64>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	60da      	str	r2, [r3, #12]
 80095fe:	e005      	b.n	800960c <tcp_pcb_remove+0x70>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	60fb      	str	r3, [r7, #12]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1ef      	bne.n	80095ec <tcp_pcb_remove+0x50>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	2200      	movs	r2, #0
 8009610:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009612:	6838      	ldr	r0, [r7, #0]
 8009614:	f7ff ff72 	bl	80094fc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	7d1b      	ldrb	r3, [r3, #20]
 800961c:	2b0a      	cmp	r3, #10
 800961e:	d013      	beq.n	8009648 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009624:	2b01      	cmp	r3, #1
 8009626:	d00f      	beq.n	8009648 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	8b5b      	ldrh	r3, [r3, #26]
 800962c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009630:	2b00      	cmp	r3, #0
 8009632:	d009      	beq.n	8009648 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	8b5b      	ldrh	r3, [r3, #26]
 8009638:	f043 0302 	orr.w	r3, r3, #2
 800963c:	b29a      	uxth	r2, r3
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009642:	6838      	ldr	r0, [r7, #0]
 8009644:	f003 fbc0 	bl	800cdc8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	7d1b      	ldrb	r3, [r3, #20]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d020      	beq.n	8009692 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d006      	beq.n	8009666 <tcp_pcb_remove+0xca>
 8009658:	4b13      	ldr	r3, [pc, #76]	@ (80096a8 <tcp_pcb_remove+0x10c>)
 800965a:	f640 0293 	movw	r2, #2195	@ 0x893
 800965e:	4916      	ldr	r1, [pc, #88]	@ (80096b8 <tcp_pcb_remove+0x11c>)
 8009660:	4813      	ldr	r0, [pc, #76]	@ (80096b0 <tcp_pcb_remove+0x114>)
 8009662:	f008 fd89 	bl	8012178 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800966a:	2b00      	cmp	r3, #0
 800966c:	d006      	beq.n	800967c <tcp_pcb_remove+0xe0>
 800966e:	4b0e      	ldr	r3, [pc, #56]	@ (80096a8 <tcp_pcb_remove+0x10c>)
 8009670:	f640 0294 	movw	r2, #2196	@ 0x894
 8009674:	4911      	ldr	r1, [pc, #68]	@ (80096bc <tcp_pcb_remove+0x120>)
 8009676:	480e      	ldr	r0, [pc, #56]	@ (80096b0 <tcp_pcb_remove+0x114>)
 8009678:	f008 fd7e 	bl	8012178 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009680:	2b00      	cmp	r3, #0
 8009682:	d006      	beq.n	8009692 <tcp_pcb_remove+0xf6>
 8009684:	4b08      	ldr	r3, [pc, #32]	@ (80096a8 <tcp_pcb_remove+0x10c>)
 8009686:	f640 0296 	movw	r2, #2198	@ 0x896
 800968a:	490d      	ldr	r1, [pc, #52]	@ (80096c0 <tcp_pcb_remove+0x124>)
 800968c:	4808      	ldr	r0, [pc, #32]	@ (80096b0 <tcp_pcb_remove+0x114>)
 800968e:	f008 fd73 	bl	8012178 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2200      	movs	r2, #0
 8009696:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2200      	movs	r2, #0
 800969c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800969e:	bf00      	nop
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	08013ed8 	.word	0x08013ed8
 80096ac:	08014540 	.word	0x08014540
 80096b0:	08013f1c 	.word	0x08013f1c
 80096b4:	0801455c 	.word	0x0801455c
 80096b8:	0801457c 	.word	0x0801457c
 80096bc:	08014594 	.word	0x08014594
 80096c0:	080145b0 	.word	0x080145b0

080096c4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d106      	bne.n	80096e0 <tcp_next_iss+0x1c>
 80096d2:	4b0a      	ldr	r3, [pc, #40]	@ (80096fc <tcp_next_iss+0x38>)
 80096d4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80096d8:	4909      	ldr	r1, [pc, #36]	@ (8009700 <tcp_next_iss+0x3c>)
 80096da:	480a      	ldr	r0, [pc, #40]	@ (8009704 <tcp_next_iss+0x40>)
 80096dc:	f008 fd4c 	bl	8012178 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80096e0:	4b09      	ldr	r3, [pc, #36]	@ (8009708 <tcp_next_iss+0x44>)
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	4b09      	ldr	r3, [pc, #36]	@ (800970c <tcp_next_iss+0x48>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4413      	add	r3, r2
 80096ea:	4a07      	ldr	r2, [pc, #28]	@ (8009708 <tcp_next_iss+0x44>)
 80096ec:	6013      	str	r3, [r2, #0]
  return iss;
 80096ee:	4b06      	ldr	r3, [pc, #24]	@ (8009708 <tcp_next_iss+0x44>)
 80096f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	08013ed8 	.word	0x08013ed8
 8009700:	080145c8 	.word	0x080145c8
 8009704:	08013f1c 	.word	0x08013f1c
 8009708:	20000024 	.word	0x20000024
 800970c:	20008470 	.word	0x20008470

08009710 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d106      	bne.n	8009732 <tcp_eff_send_mss_netif+0x22>
 8009724:	4b14      	ldr	r3, [pc, #80]	@ (8009778 <tcp_eff_send_mss_netif+0x68>)
 8009726:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800972a:	4914      	ldr	r1, [pc, #80]	@ (800977c <tcp_eff_send_mss_netif+0x6c>)
 800972c:	4814      	ldr	r0, [pc, #80]	@ (8009780 <tcp_eff_send_mss_netif+0x70>)
 800972e:	f008 fd23 	bl	8012178 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009738:	89fb      	ldrh	r3, [r7, #14]
 800973a:	e019      	b.n	8009770 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009740:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009742:	8afb      	ldrh	r3, [r7, #22]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d012      	beq.n	800976e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009748:	2328      	movs	r3, #40	@ 0x28
 800974a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800974c:	8afa      	ldrh	r2, [r7, #22]
 800974e:	8abb      	ldrh	r3, [r7, #20]
 8009750:	429a      	cmp	r2, r3
 8009752:	d904      	bls.n	800975e <tcp_eff_send_mss_netif+0x4e>
 8009754:	8afa      	ldrh	r2, [r7, #22]
 8009756:	8abb      	ldrh	r3, [r7, #20]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	b29b      	uxth	r3, r3
 800975c:	e000      	b.n	8009760 <tcp_eff_send_mss_netif+0x50>
 800975e:	2300      	movs	r3, #0
 8009760:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009762:	8a7a      	ldrh	r2, [r7, #18]
 8009764:	89fb      	ldrh	r3, [r7, #14]
 8009766:	4293      	cmp	r3, r2
 8009768:	bf28      	it	cs
 800976a:	4613      	movcs	r3, r2
 800976c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800976e:	89fb      	ldrh	r3, [r7, #14]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	08013ed8 	.word	0x08013ed8
 800977c:	080145e4 	.word	0x080145e4
 8009780:	08013f1c 	.word	0x08013f1c

08009784 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d119      	bne.n	80097cc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009798:	4b10      	ldr	r3, [pc, #64]	@ (80097dc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800979a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800979e:	4910      	ldr	r1, [pc, #64]	@ (80097e0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80097a0:	4810      	ldr	r0, [pc, #64]	@ (80097e4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80097a2:	f008 fce9 	bl	8012178 <iprintf>

  while (pcb != NULL) {
 80097a6:	e011      	b.n	80097cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d108      	bne.n	80097c6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f7fe fdc8 	bl	8008350 <tcp_abort>
      pcb = next;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	60fb      	str	r3, [r7, #12]
 80097c4:	e002      	b.n	80097cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1ea      	bne.n	80097a8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	08013ed8 	.word	0x08013ed8
 80097e0:	0801460c 	.word	0x0801460c
 80097e4:	08013f1c 	.word	0x08013f1c

080097e8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d02a      	beq.n	800984e <tcp_netif_ip_addr_changed+0x66>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d026      	beq.n	800984e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009800:	4b15      	ldr	r3, [pc, #84]	@ (8009858 <tcp_netif_ip_addr_changed+0x70>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff ffbc 	bl	8009784 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800980c:	4b13      	ldr	r3, [pc, #76]	@ (800985c <tcp_netif_ip_addr_changed+0x74>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff ffb6 	bl	8009784 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d017      	beq.n	800984e <tcp_netif_ip_addr_changed+0x66>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d013      	beq.n	800984e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009826:	4b0e      	ldr	r3, [pc, #56]	@ (8009860 <tcp_netif_ip_addr_changed+0x78>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	60fb      	str	r3, [r7, #12]
 800982c:	e00c      	b.n	8009848 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	429a      	cmp	r2, r3
 8009838:	d103      	bne.n	8009842 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1ef      	bne.n	800982e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	2000847c 	.word	0x2000847c
 800985c:	20008474 	.word	0x20008474
 8009860:	20008478 	.word	0x20008478

08009864 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009870:	2b00      	cmp	r3, #0
 8009872:	d007      	beq.n	8009884 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff fbfb 	bl	8009074 <tcp_segs_free>
    pcb->ooseq = NULL;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009884:	bf00      	nop
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800988c:	b590      	push	{r4, r7, lr}
 800988e:	b08d      	sub	sp, #52	@ 0x34
 8009890:	af04      	add	r7, sp, #16
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d105      	bne.n	80098a8 <tcp_input+0x1c>
 800989c:	4b9b      	ldr	r3, [pc, #620]	@ (8009b0c <tcp_input+0x280>)
 800989e:	2283      	movs	r2, #131	@ 0x83
 80098a0:	499b      	ldr	r1, [pc, #620]	@ (8009b10 <tcp_input+0x284>)
 80098a2:	489c      	ldr	r0, [pc, #624]	@ (8009b14 <tcp_input+0x288>)
 80098a4:	f008 fc68 	bl	8012178 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	4a9a      	ldr	r2, [pc, #616]	@ (8009b18 <tcp_input+0x28c>)
 80098ae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	895b      	ldrh	r3, [r3, #10]
 80098b4:	2b13      	cmp	r3, #19
 80098b6:	f240 83d1 	bls.w	800a05c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80098ba:	4b98      	ldr	r3, [pc, #608]	@ (8009b1c <tcp_input+0x290>)
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	4a97      	ldr	r2, [pc, #604]	@ (8009b1c <tcp_input+0x290>)
 80098c0:	6812      	ldr	r2, [r2, #0]
 80098c2:	4611      	mov	r1, r2
 80098c4:	4618      	mov	r0, r3
 80098c6:	f006 f869 	bl	800f99c <ip4_addr_isbroadcast_u32>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f040 83c7 	bne.w	800a060 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80098d2:	4b92      	ldr	r3, [pc, #584]	@ (8009b1c <tcp_input+0x290>)
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80098da:	2be0      	cmp	r3, #224	@ 0xe0
 80098dc:	f000 83c0 	beq.w	800a060 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80098e0:	4b8d      	ldr	r3, [pc, #564]	@ (8009b18 <tcp_input+0x28c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	899b      	ldrh	r3, [r3, #12]
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fc fc4b 	bl	8006184 <lwip_htons>
 80098ee:	4603      	mov	r3, r0
 80098f0:	0b1b      	lsrs	r3, r3, #12
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80098fa:	7cbb      	ldrb	r3, [r7, #18]
 80098fc:	2b13      	cmp	r3, #19
 80098fe:	f240 83b1 	bls.w	800a064 <tcp_input+0x7d8>
 8009902:	7cbb      	ldrb	r3, [r7, #18]
 8009904:	b29a      	uxth	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	891b      	ldrh	r3, [r3, #8]
 800990a:	429a      	cmp	r2, r3
 800990c:	f200 83aa 	bhi.w	800a064 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009910:	7cbb      	ldrb	r3, [r7, #18]
 8009912:	b29b      	uxth	r3, r3
 8009914:	3b14      	subs	r3, #20
 8009916:	b29a      	uxth	r2, r3
 8009918:	4b81      	ldr	r3, [pc, #516]	@ (8009b20 <tcp_input+0x294>)
 800991a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800991c:	4b81      	ldr	r3, [pc, #516]	@ (8009b24 <tcp_input+0x298>)
 800991e:	2200      	movs	r2, #0
 8009920:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	895a      	ldrh	r2, [r3, #10]
 8009926:	7cbb      	ldrb	r3, [r7, #18]
 8009928:	b29b      	uxth	r3, r3
 800992a:	429a      	cmp	r2, r3
 800992c:	d309      	bcc.n	8009942 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800992e:	4b7c      	ldr	r3, [pc, #496]	@ (8009b20 <tcp_input+0x294>)
 8009930:	881a      	ldrh	r2, [r3, #0]
 8009932:	4b7d      	ldr	r3, [pc, #500]	@ (8009b28 <tcp_input+0x29c>)
 8009934:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009936:	7cbb      	ldrb	r3, [r7, #18]
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7fd fefa 	bl	8007734 <pbuf_remove_header>
 8009940:	e04e      	b.n	80099e0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d105      	bne.n	8009956 <tcp_input+0xca>
 800994a:	4b70      	ldr	r3, [pc, #448]	@ (8009b0c <tcp_input+0x280>)
 800994c:	22c2      	movs	r2, #194	@ 0xc2
 800994e:	4977      	ldr	r1, [pc, #476]	@ (8009b2c <tcp_input+0x2a0>)
 8009950:	4870      	ldr	r0, [pc, #448]	@ (8009b14 <tcp_input+0x288>)
 8009952:	f008 fc11 	bl	8012178 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009956:	2114      	movs	r1, #20
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7fd feeb 	bl	8007734 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	895a      	ldrh	r2, [r3, #10]
 8009962:	4b71      	ldr	r3, [pc, #452]	@ (8009b28 <tcp_input+0x29c>)
 8009964:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009966:	4b6e      	ldr	r3, [pc, #440]	@ (8009b20 <tcp_input+0x294>)
 8009968:	881a      	ldrh	r2, [r3, #0]
 800996a:	4b6f      	ldr	r3, [pc, #444]	@ (8009b28 <tcp_input+0x29c>)
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009972:	4b6d      	ldr	r3, [pc, #436]	@ (8009b28 <tcp_input+0x29c>)
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7fd fedb 	bl	8007734 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	895b      	ldrh	r3, [r3, #10]
 8009984:	8a3a      	ldrh	r2, [r7, #16]
 8009986:	429a      	cmp	r2, r3
 8009988:	f200 836e 	bhi.w	800a068 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	4a64      	ldr	r2, [pc, #400]	@ (8009b24 <tcp_input+0x298>)
 8009994:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	8a3a      	ldrh	r2, [r7, #16]
 800999c:	4611      	mov	r1, r2
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fd fec8 	bl	8007734 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	891a      	ldrh	r2, [r3, #8]
 80099a8:	8a3b      	ldrh	r3, [r7, #16]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	895b      	ldrh	r3, [r3, #10]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d005      	beq.n	80099c6 <tcp_input+0x13a>
 80099ba:	4b54      	ldr	r3, [pc, #336]	@ (8009b0c <tcp_input+0x280>)
 80099bc:	22df      	movs	r2, #223	@ 0xdf
 80099be:	495c      	ldr	r1, [pc, #368]	@ (8009b30 <tcp_input+0x2a4>)
 80099c0:	4854      	ldr	r0, [pc, #336]	@ (8009b14 <tcp_input+0x288>)
 80099c2:	f008 fbd9 	bl	8012178 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	891a      	ldrh	r2, [r3, #8]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	891b      	ldrh	r3, [r3, #8]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d005      	beq.n	80099e0 <tcp_input+0x154>
 80099d4:	4b4d      	ldr	r3, [pc, #308]	@ (8009b0c <tcp_input+0x280>)
 80099d6:	22e0      	movs	r2, #224	@ 0xe0
 80099d8:	4956      	ldr	r1, [pc, #344]	@ (8009b34 <tcp_input+0x2a8>)
 80099da:	484e      	ldr	r0, [pc, #312]	@ (8009b14 <tcp_input+0x288>)
 80099dc:	f008 fbcc 	bl	8012178 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80099e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009b18 <tcp_input+0x28c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	4a4b      	ldr	r2, [pc, #300]	@ (8009b18 <tcp_input+0x28c>)
 80099ea:	6814      	ldr	r4, [r2, #0]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fc fbc9 	bl	8006184 <lwip_htons>
 80099f2:	4603      	mov	r3, r0
 80099f4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80099f6:	4b48      	ldr	r3, [pc, #288]	@ (8009b18 <tcp_input+0x28c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	885b      	ldrh	r3, [r3, #2]
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	4a46      	ldr	r2, [pc, #280]	@ (8009b18 <tcp_input+0x28c>)
 8009a00:	6814      	ldr	r4, [r2, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fc fbbe 	bl	8006184 <lwip_htons>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009a0c:	4b42      	ldr	r3, [pc, #264]	@ (8009b18 <tcp_input+0x28c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	4a41      	ldr	r2, [pc, #260]	@ (8009b18 <tcp_input+0x28c>)
 8009a14:	6814      	ldr	r4, [r2, #0]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fc fbca 	bl	80061b0 <lwip_htonl>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	6063      	str	r3, [r4, #4]
 8009a20:	6863      	ldr	r3, [r4, #4]
 8009a22:	4a45      	ldr	r2, [pc, #276]	@ (8009b38 <tcp_input+0x2ac>)
 8009a24:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009a26:	4b3c      	ldr	r3, [pc, #240]	@ (8009b18 <tcp_input+0x28c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	4a3a      	ldr	r2, [pc, #232]	@ (8009b18 <tcp_input+0x28c>)
 8009a2e:	6814      	ldr	r4, [r2, #0]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fc fbbd 	bl	80061b0 <lwip_htonl>
 8009a36:	4603      	mov	r3, r0
 8009a38:	60a3      	str	r3, [r4, #8]
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b3c <tcp_input+0x2b0>)
 8009a3e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009a40:	4b35      	ldr	r3, [pc, #212]	@ (8009b18 <tcp_input+0x28c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	89db      	ldrh	r3, [r3, #14]
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	4a33      	ldr	r2, [pc, #204]	@ (8009b18 <tcp_input+0x28c>)
 8009a4a:	6814      	ldr	r4, [r2, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fc fb99 	bl	8006184 <lwip_htons>
 8009a52:	4603      	mov	r3, r0
 8009a54:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009a56:	4b30      	ldr	r3, [pc, #192]	@ (8009b18 <tcp_input+0x28c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	899b      	ldrh	r3, [r3, #12]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fc fb90 	bl	8006184 <lwip_htons>
 8009a64:	4603      	mov	r3, r0
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	4b34      	ldr	r3, [pc, #208]	@ (8009b40 <tcp_input+0x2b4>)
 8009a70:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	891a      	ldrh	r2, [r3, #8]
 8009a76:	4b33      	ldr	r3, [pc, #204]	@ (8009b44 <tcp_input+0x2b8>)
 8009a78:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009a7a:	4b31      	ldr	r3, [pc, #196]	@ (8009b40 <tcp_input+0x2b4>)
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	f003 0303 	and.w	r3, r3, #3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00c      	beq.n	8009aa0 <tcp_input+0x214>
    tcplen++;
 8009a86:	4b2f      	ldr	r3, [pc, #188]	@ (8009b44 <tcp_input+0x2b8>)
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8009b44 <tcp_input+0x2b8>)
 8009a90:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	891a      	ldrh	r2, [r3, #8]
 8009a96:	4b2b      	ldr	r3, [pc, #172]	@ (8009b44 <tcp_input+0x2b8>)
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	f200 82e6 	bhi.w	800a06c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009aa4:	4b28      	ldr	r3, [pc, #160]	@ (8009b48 <tcp_input+0x2bc>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	61fb      	str	r3, [r7, #28]
 8009aaa:	e09d      	b.n	8009be8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	7d1b      	ldrb	r3, [r3, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d105      	bne.n	8009ac0 <tcp_input+0x234>
 8009ab4:	4b15      	ldr	r3, [pc, #84]	@ (8009b0c <tcp_input+0x280>)
 8009ab6:	22fb      	movs	r2, #251	@ 0xfb
 8009ab8:	4924      	ldr	r1, [pc, #144]	@ (8009b4c <tcp_input+0x2c0>)
 8009aba:	4816      	ldr	r0, [pc, #88]	@ (8009b14 <tcp_input+0x288>)
 8009abc:	f008 fb5c 	bl	8012178 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	7d1b      	ldrb	r3, [r3, #20]
 8009ac4:	2b0a      	cmp	r3, #10
 8009ac6:	d105      	bne.n	8009ad4 <tcp_input+0x248>
 8009ac8:	4b10      	ldr	r3, [pc, #64]	@ (8009b0c <tcp_input+0x280>)
 8009aca:	22fc      	movs	r2, #252	@ 0xfc
 8009acc:	4920      	ldr	r1, [pc, #128]	@ (8009b50 <tcp_input+0x2c4>)
 8009ace:	4811      	ldr	r0, [pc, #68]	@ (8009b14 <tcp_input+0x288>)
 8009ad0:	f008 fb52 	bl	8012178 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	7d1b      	ldrb	r3, [r3, #20]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d105      	bne.n	8009ae8 <tcp_input+0x25c>
 8009adc:	4b0b      	ldr	r3, [pc, #44]	@ (8009b0c <tcp_input+0x280>)
 8009ade:	22fd      	movs	r2, #253	@ 0xfd
 8009ae0:	491c      	ldr	r1, [pc, #112]	@ (8009b54 <tcp_input+0x2c8>)
 8009ae2:	480c      	ldr	r0, [pc, #48]	@ (8009b14 <tcp_input+0x288>)
 8009ae4:	f008 fb48 	bl	8012178 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	7a1b      	ldrb	r3, [r3, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d033      	beq.n	8009b58 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	7a1a      	ldrb	r2, [r3, #8]
 8009af4:	4b09      	ldr	r3, [pc, #36]	@ (8009b1c <tcp_input+0x290>)
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009afc:	3301      	adds	r3, #1
 8009afe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d029      	beq.n	8009b58 <tcp_input+0x2cc>
      prev = pcb;
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	61bb      	str	r3, [r7, #24]
      continue;
 8009b08:	e06b      	b.n	8009be2 <tcp_input+0x356>
 8009b0a:	bf00      	nop
 8009b0c:	08014640 	.word	0x08014640
 8009b10:	08014674 	.word	0x08014674
 8009b14:	0801468c 	.word	0x0801468c
 8009b18:	20008498 	.word	0x20008498
 8009b1c:	20004f00 	.word	0x20004f00
 8009b20:	2000849c 	.word	0x2000849c
 8009b24:	200084a0 	.word	0x200084a0
 8009b28:	2000849e 	.word	0x2000849e
 8009b2c:	080146b4 	.word	0x080146b4
 8009b30:	080146c4 	.word	0x080146c4
 8009b34:	080146d0 	.word	0x080146d0
 8009b38:	200084a8 	.word	0x200084a8
 8009b3c:	200084ac 	.word	0x200084ac
 8009b40:	200084b4 	.word	0x200084b4
 8009b44:	200084b2 	.word	0x200084b2
 8009b48:	2000847c 	.word	0x2000847c
 8009b4c:	080146f0 	.word	0x080146f0
 8009b50:	08014718 	.word	0x08014718
 8009b54:	08014744 	.word	0x08014744
    }

    if (pcb->remote_port == tcphdr->src &&
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	8b1a      	ldrh	r2, [r3, #24]
 8009b5c:	4b72      	ldr	r3, [pc, #456]	@ (8009d28 <tcp_input+0x49c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d13a      	bne.n	8009bde <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	8ada      	ldrh	r2, [r3, #22]
 8009b6c:	4b6e      	ldr	r3, [pc, #440]	@ (8009d28 <tcp_input+0x49c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	885b      	ldrh	r3, [r3, #2]
 8009b72:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d132      	bne.n	8009bde <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	4b6b      	ldr	r3, [pc, #428]	@ (8009d2c <tcp_input+0x4a0>)
 8009b7e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d12c      	bne.n	8009bde <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	4b68      	ldr	r3, [pc, #416]	@ (8009d2c <tcp_input+0x4a0>)
 8009b8a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d126      	bne.n	8009bde <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	69fa      	ldr	r2, [r7, #28]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d106      	bne.n	8009ba8 <tcp_input+0x31c>
 8009b9a:	4b65      	ldr	r3, [pc, #404]	@ (8009d30 <tcp_input+0x4a4>)
 8009b9c:	f240 120d 	movw	r2, #269	@ 0x10d
 8009ba0:	4964      	ldr	r1, [pc, #400]	@ (8009d34 <tcp_input+0x4a8>)
 8009ba2:	4865      	ldr	r0, [pc, #404]	@ (8009d38 <tcp_input+0x4ac>)
 8009ba4:	f008 fae8 	bl	8012178 <iprintf>
      if (prev != NULL) {
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <tcp_input+0x338>
        prev->next = pcb->next;
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009bb6:	4b61      	ldr	r3, [pc, #388]	@ (8009d3c <tcp_input+0x4b0>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009bbe:	4a5f      	ldr	r2, [pc, #380]	@ (8009d3c <tcp_input+0x4b0>)
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	69fa      	ldr	r2, [r7, #28]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d111      	bne.n	8009bf2 <tcp_input+0x366>
 8009bce:	4b58      	ldr	r3, [pc, #352]	@ (8009d30 <tcp_input+0x4a4>)
 8009bd0:	f240 1215 	movw	r2, #277	@ 0x115
 8009bd4:	495a      	ldr	r1, [pc, #360]	@ (8009d40 <tcp_input+0x4b4>)
 8009bd6:	4858      	ldr	r0, [pc, #352]	@ (8009d38 <tcp_input+0x4ac>)
 8009bd8:	f008 face 	bl	8012178 <iprintf>
      break;
 8009bdc:	e009      	b.n	8009bf2 <tcp_input+0x366>
    }
    prev = pcb;
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	61fb      	str	r3, [r7, #28]
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f47f af5e 	bne.w	8009aac <tcp_input+0x220>
 8009bf0:	e000      	b.n	8009bf4 <tcp_input+0x368>
      break;
 8009bf2:	bf00      	nop
  }

  if (pcb == NULL) {
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f040 80aa 	bne.w	8009d50 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bfc:	4b51      	ldr	r3, [pc, #324]	@ (8009d44 <tcp_input+0x4b8>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	61fb      	str	r3, [r7, #28]
 8009c02:	e03f      	b.n	8009c84 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	7d1b      	ldrb	r3, [r3, #20]
 8009c08:	2b0a      	cmp	r3, #10
 8009c0a:	d006      	beq.n	8009c1a <tcp_input+0x38e>
 8009c0c:	4b48      	ldr	r3, [pc, #288]	@ (8009d30 <tcp_input+0x4a4>)
 8009c0e:	f240 121f 	movw	r2, #287	@ 0x11f
 8009c12:	494d      	ldr	r1, [pc, #308]	@ (8009d48 <tcp_input+0x4bc>)
 8009c14:	4848      	ldr	r0, [pc, #288]	@ (8009d38 <tcp_input+0x4ac>)
 8009c16:	f008 faaf 	bl	8012178 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	7a1b      	ldrb	r3, [r3, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d009      	beq.n	8009c36 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	7a1a      	ldrb	r2, [r3, #8]
 8009c26:	4b41      	ldr	r3, [pc, #260]	@ (8009d2c <tcp_input+0x4a0>)
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c2e:	3301      	adds	r3, #1
 8009c30:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d122      	bne.n	8009c7c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	8b1a      	ldrh	r2, [r3, #24]
 8009c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8009d28 <tcp_input+0x49c>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d11b      	bne.n	8009c7e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	8ada      	ldrh	r2, [r3, #22]
 8009c4a:	4b37      	ldr	r3, [pc, #220]	@ (8009d28 <tcp_input+0x49c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	885b      	ldrh	r3, [r3, #2]
 8009c50:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d113      	bne.n	8009c7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	4b34      	ldr	r3, [pc, #208]	@ (8009d2c <tcp_input+0x4a0>)
 8009c5c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d10d      	bne.n	8009c7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	4b31      	ldr	r3, [pc, #196]	@ (8009d2c <tcp_input+0x4a0>)
 8009c68:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d107      	bne.n	8009c7e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009c6e:	69f8      	ldr	r0, [r7, #28]
 8009c70:	f000 fb56 	bl	800a320 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7fd fde3 	bl	8007840 <pbuf_free>
        return;
 8009c7a:	e1fd      	b.n	800a078 <tcp_input+0x7ec>
        continue;
 8009c7c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	61fb      	str	r3, [r7, #28]
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1bc      	bne.n	8009c04 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8009d4c <tcp_input+0x4c0>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	617b      	str	r3, [r7, #20]
 8009c94:	e02a      	b.n	8009cec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	7a1b      	ldrb	r3, [r3, #8]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00c      	beq.n	8009cb8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	7a1a      	ldrb	r2, [r3, #8]
 8009ca2:	4b22      	ldr	r3, [pc, #136]	@ (8009d2c <tcp_input+0x4a0>)
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009caa:	3301      	adds	r3, #1
 8009cac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d002      	beq.n	8009cb8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	61bb      	str	r3, [r7, #24]
        continue;
 8009cb6:	e016      	b.n	8009ce6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	8ada      	ldrh	r2, [r3, #22]
 8009cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8009d28 <tcp_input+0x49c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	885b      	ldrh	r3, [r3, #2]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d10c      	bne.n	8009ce2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	4b17      	ldr	r3, [pc, #92]	@ (8009d2c <tcp_input+0x4a0>)
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d00f      	beq.n	8009cf4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00d      	beq.n	8009cf6 <tcp_input+0x46a>
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d009      	beq.n	8009cf6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	617b      	str	r3, [r7, #20]
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1d1      	bne.n	8009c96 <tcp_input+0x40a>
 8009cf2:	e000      	b.n	8009cf6 <tcp_input+0x46a>
            break;
 8009cf4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d029      	beq.n	8009d50 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009d0a:	4b10      	ldr	r3, [pc, #64]	@ (8009d4c <tcp_input+0x4c0>)
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009d12:	4a0e      	ldr	r2, [pc, #56]	@ (8009d4c <tcp_input+0x4c0>)
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009d18:	6978      	ldr	r0, [r7, #20]
 8009d1a:	f000 fa03 	bl	800a124 <tcp_listen_input>
      }
      pbuf_free(p);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7fd fd8e 	bl	8007840 <pbuf_free>
      return;
 8009d24:	e1a8      	b.n	800a078 <tcp_input+0x7ec>
 8009d26:	bf00      	nop
 8009d28:	20008498 	.word	0x20008498
 8009d2c:	20004f00 	.word	0x20004f00
 8009d30:	08014640 	.word	0x08014640
 8009d34:	0801476c 	.word	0x0801476c
 8009d38:	0801468c 	.word	0x0801468c
 8009d3c:	2000847c 	.word	0x2000847c
 8009d40:	08014798 	.word	0x08014798
 8009d44:	20008480 	.word	0x20008480
 8009d48:	080147c4 	.word	0x080147c4
 8009d4c:	20008478 	.word	0x20008478
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 8158 	beq.w	800a008 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009d58:	4b95      	ldr	r3, [pc, #596]	@ (8009fb0 <tcp_input+0x724>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	891a      	ldrh	r2, [r3, #8]
 8009d62:	4b93      	ldr	r3, [pc, #588]	@ (8009fb0 <tcp_input+0x724>)
 8009d64:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009d66:	4a92      	ldr	r2, [pc, #584]	@ (8009fb0 <tcp_input+0x724>)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009d6c:	4b91      	ldr	r3, [pc, #580]	@ (8009fb4 <tcp_input+0x728>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a8f      	ldr	r2, [pc, #572]	@ (8009fb0 <tcp_input+0x724>)
 8009d72:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009d74:	4b90      	ldr	r3, [pc, #576]	@ (8009fb8 <tcp_input+0x72c>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009d7a:	4b90      	ldr	r3, [pc, #576]	@ (8009fbc <tcp_input+0x730>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009d80:	4b8f      	ldr	r3, [pc, #572]	@ (8009fc0 <tcp_input+0x734>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009d86:	4b8f      	ldr	r3, [pc, #572]	@ (8009fc4 <tcp_input+0x738>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	f003 0308 	and.w	r3, r3, #8
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d006      	beq.n	8009da0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	7b5b      	ldrb	r3, [r3, #13]
 8009d96:	f043 0301 	orr.w	r3, r3, #1
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d017      	beq.n	8009dd8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009da8:	69f8      	ldr	r0, [r7, #28]
 8009daa:	f7ff f8e7 	bl	8008f7c <tcp_process_refused_data>
 8009dae:	4603      	mov	r3, r0
 8009db0:	f113 0f0d 	cmn.w	r3, #13
 8009db4:	d007      	beq.n	8009dc6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00c      	beq.n	8009dd8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009dbe:	4b82      	ldr	r3, [pc, #520]	@ (8009fc8 <tcp_input+0x73c>)
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d008      	beq.n	8009dd8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f040 80e3 	bne.w	8009f96 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009dd0:	69f8      	ldr	r0, [r7, #28]
 8009dd2:	f003 fdff 	bl	800d9d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009dd6:	e0de      	b.n	8009f96 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009dd8:	4a7c      	ldr	r2, [pc, #496]	@ (8009fcc <tcp_input+0x740>)
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009dde:	69f8      	ldr	r0, [r7, #28]
 8009de0:	f000 fb18 	bl	800a414 <tcp_process>
 8009de4:	4603      	mov	r3, r0
 8009de6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009de8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009dec:	f113 0f0d 	cmn.w	r3, #13
 8009df0:	f000 80d3 	beq.w	8009f9a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009df4:	4b71      	ldr	r3, [pc, #452]	@ (8009fbc <tcp_input+0x730>)
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	f003 0308 	and.w	r3, r3, #8
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d015      	beq.n	8009e2c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d008      	beq.n	8009e1c <tcp_input+0x590>
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e10:	69fa      	ldr	r2, [r7, #28]
 8009e12:	6912      	ldr	r2, [r2, #16]
 8009e14:	f06f 010d 	mvn.w	r1, #13
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009e1c:	69f9      	ldr	r1, [r7, #28]
 8009e1e:	486c      	ldr	r0, [pc, #432]	@ (8009fd0 <tcp_input+0x744>)
 8009e20:	f7ff fbbc 	bl	800959c <tcp_pcb_remove>
        tcp_free(pcb);
 8009e24:	69f8      	ldr	r0, [r7, #28]
 8009e26:	f7fd ffab 	bl	8007d80 <tcp_free>
 8009e2a:	e0da      	b.n	8009fe2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009e30:	4b63      	ldr	r3, [pc, #396]	@ (8009fc0 <tcp_input+0x734>)
 8009e32:	881b      	ldrh	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d01d      	beq.n	8009e74 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009e38:	4b61      	ldr	r3, [pc, #388]	@ (8009fc0 <tcp_input+0x734>)
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00a      	beq.n	8009e5e <tcp_input+0x5d2>
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e4e:	69fa      	ldr	r2, [r7, #28]
 8009e50:	6910      	ldr	r0, [r2, #16]
 8009e52:	89fa      	ldrh	r2, [r7, #14]
 8009e54:	69f9      	ldr	r1, [r7, #28]
 8009e56:	4798      	blx	r3
 8009e58:	4603      	mov	r3, r0
 8009e5a:	74fb      	strb	r3, [r7, #19]
 8009e5c:	e001      	b.n	8009e62 <tcp_input+0x5d6>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009e62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e66:	f113 0f0d 	cmn.w	r3, #13
 8009e6a:	f000 8098 	beq.w	8009f9e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009e6e:	4b54      	ldr	r3, [pc, #336]	@ (8009fc0 <tcp_input+0x734>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009e74:	69f8      	ldr	r0, [r7, #28]
 8009e76:	f000 f915 	bl	800a0a4 <tcp_input_delayed_close>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f040 8090 	bne.w	8009fa2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009e82:	4b4d      	ldr	r3, [pc, #308]	@ (8009fb8 <tcp_input+0x72c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d041      	beq.n	8009f0e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d006      	beq.n	8009ea0 <tcp_input+0x614>
 8009e92:	4b50      	ldr	r3, [pc, #320]	@ (8009fd4 <tcp_input+0x748>)
 8009e94:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009e98:	494f      	ldr	r1, [pc, #316]	@ (8009fd8 <tcp_input+0x74c>)
 8009e9a:	4850      	ldr	r0, [pc, #320]	@ (8009fdc <tcp_input+0x750>)
 8009e9c:	f008 f96c 	bl	8012178 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	8b5b      	ldrh	r3, [r3, #26]
 8009ea4:	f003 0310 	and.w	r3, r3, #16
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d008      	beq.n	8009ebe <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009eac:	4b42      	ldr	r3, [pc, #264]	@ (8009fb8 <tcp_input+0x72c>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fd fcc5 	bl	8007840 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009eb6:	69f8      	ldr	r0, [r7, #28]
 8009eb8:	f7fe fa4a 	bl	8008350 <tcp_abort>
            goto aborted;
 8009ebc:	e091      	b.n	8009fe2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00c      	beq.n	8009ee2 <tcp_input+0x656>
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	6918      	ldr	r0, [r3, #16]
 8009ed2:	4b39      	ldr	r3, [pc, #228]	@ (8009fb8 <tcp_input+0x72c>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	69f9      	ldr	r1, [r7, #28]
 8009eda:	47a0      	blx	r4
 8009edc:	4603      	mov	r3, r0
 8009ede:	74fb      	strb	r3, [r7, #19]
 8009ee0:	e008      	b.n	8009ef4 <tcp_input+0x668>
 8009ee2:	4b35      	ldr	r3, [pc, #212]	@ (8009fb8 <tcp_input+0x72c>)
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	69f9      	ldr	r1, [r7, #28]
 8009eea:	2000      	movs	r0, #0
 8009eec:	f7ff f91c 	bl	8009128 <tcp_recv_null>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009ef4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ef8:	f113 0f0d 	cmn.w	r3, #13
 8009efc:	d053      	beq.n	8009fa6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009efe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d003      	beq.n	8009f0e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009f06:	4b2c      	ldr	r3, [pc, #176]	@ (8009fb8 <tcp_input+0x72c>)
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8009fbc <tcp_input+0x730>)
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	f003 0320 	and.w	r3, r3, #32
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d030      	beq.n	8009f7c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d009      	beq.n	8009f36 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f26:	7b5a      	ldrb	r2, [r3, #13]
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f2c:	f042 0220 	orr.w	r2, r2, #32
 8009f30:	b2d2      	uxtb	r2, r2
 8009f32:	735a      	strb	r2, [r3, #13]
 8009f34:	e022      	b.n	8009f7c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f3a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009f3e:	d005      	beq.n	8009f4c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f44:	3301      	adds	r3, #1
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00b      	beq.n	8009f6e <tcp_input+0x6e2>
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	6918      	ldr	r0, [r3, #16]
 8009f60:	2300      	movs	r3, #0
 8009f62:	2200      	movs	r2, #0
 8009f64:	69f9      	ldr	r1, [r7, #28]
 8009f66:	47a0      	blx	r4
 8009f68:	4603      	mov	r3, r0
 8009f6a:	74fb      	strb	r3, [r7, #19]
 8009f6c:	e001      	b.n	8009f72 <tcp_input+0x6e6>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009f72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f76:	f113 0f0d 	cmn.w	r3, #13
 8009f7a:	d016      	beq.n	8009faa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009f7c:	4b13      	ldr	r3, [pc, #76]	@ (8009fcc <tcp_input+0x740>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009f82:	69f8      	ldr	r0, [r7, #28]
 8009f84:	f000 f88e 	bl	800a0a4 <tcp_input_delayed_close>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d128      	bne.n	8009fe0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009f8e:	69f8      	ldr	r0, [r7, #28]
 8009f90:	f002 ff1a 	bl	800cdc8 <tcp_output>
 8009f94:	e025      	b.n	8009fe2 <tcp_input+0x756>
        goto aborted;
 8009f96:	bf00      	nop
 8009f98:	e023      	b.n	8009fe2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009f9a:	bf00      	nop
 8009f9c:	e021      	b.n	8009fe2 <tcp_input+0x756>
              goto aborted;
 8009f9e:	bf00      	nop
 8009fa0:	e01f      	b.n	8009fe2 <tcp_input+0x756>
          goto aborted;
 8009fa2:	bf00      	nop
 8009fa4:	e01d      	b.n	8009fe2 <tcp_input+0x756>
            goto aborted;
 8009fa6:	bf00      	nop
 8009fa8:	e01b      	b.n	8009fe2 <tcp_input+0x756>
              goto aborted;
 8009faa:	bf00      	nop
 8009fac:	e019      	b.n	8009fe2 <tcp_input+0x756>
 8009fae:	bf00      	nop
 8009fb0:	20008488 	.word	0x20008488
 8009fb4:	20008498 	.word	0x20008498
 8009fb8:	200084b8 	.word	0x200084b8
 8009fbc:	200084b5 	.word	0x200084b5
 8009fc0:	200084b0 	.word	0x200084b0
 8009fc4:	200084b4 	.word	0x200084b4
 8009fc8:	200084b2 	.word	0x200084b2
 8009fcc:	200084bc 	.word	0x200084bc
 8009fd0:	2000847c 	.word	0x2000847c
 8009fd4:	08014640 	.word	0x08014640
 8009fd8:	080147f4 	.word	0x080147f4
 8009fdc:	0801468c 	.word	0x0801468c
          goto aborted;
 8009fe0:	bf00      	nop
    tcp_input_pcb = NULL;
 8009fe2:	4b27      	ldr	r3, [pc, #156]	@ (800a080 <tcp_input+0x7f4>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009fe8:	4b26      	ldr	r3, [pc, #152]	@ (800a084 <tcp_input+0x7f8>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009fee:	4b26      	ldr	r3, [pc, #152]	@ (800a088 <tcp_input+0x7fc>)
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d03f      	beq.n	800a076 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009ff6:	4b24      	ldr	r3, [pc, #144]	@ (800a088 <tcp_input+0x7fc>)
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fd fc20 	bl	8007840 <pbuf_free>
      inseg.p = NULL;
 800a000:	4b21      	ldr	r3, [pc, #132]	@ (800a088 <tcp_input+0x7fc>)
 800a002:	2200      	movs	r2, #0
 800a004:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a006:	e036      	b.n	800a076 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a008:	4b20      	ldr	r3, [pc, #128]	@ (800a08c <tcp_input+0x800>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	899b      	ldrh	r3, [r3, #12]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	4618      	mov	r0, r3
 800a012:	f7fc f8b7 	bl	8006184 <lwip_htons>
 800a016:	4603      	mov	r3, r0
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	f003 0304 	and.w	r3, r3, #4
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d118      	bne.n	800a054 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a022:	4b1b      	ldr	r3, [pc, #108]	@ (800a090 <tcp_input+0x804>)
 800a024:	6819      	ldr	r1, [r3, #0]
 800a026:	4b1b      	ldr	r3, [pc, #108]	@ (800a094 <tcp_input+0x808>)
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	461a      	mov	r2, r3
 800a02c:	4b1a      	ldr	r3, [pc, #104]	@ (800a098 <tcp_input+0x80c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a032:	4b16      	ldr	r3, [pc, #88]	@ (800a08c <tcp_input+0x800>)
 800a034:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a036:	885b      	ldrh	r3, [r3, #2]
 800a038:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a03a:	4a14      	ldr	r2, [pc, #80]	@ (800a08c <tcp_input+0x800>)
 800a03c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a03e:	8812      	ldrh	r2, [r2, #0]
 800a040:	b292      	uxth	r2, r2
 800a042:	9202      	str	r2, [sp, #8]
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	4b15      	ldr	r3, [pc, #84]	@ (800a09c <tcp_input+0x810>)
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	4b15      	ldr	r3, [pc, #84]	@ (800a0a0 <tcp_input+0x814>)
 800a04c:	4602      	mov	r2, r0
 800a04e:	2000      	movs	r0, #0
 800a050:	f003 fc6e 	bl	800d930 <tcp_rst>
    pbuf_free(p);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7fd fbf3 	bl	8007840 <pbuf_free>
  return;
 800a05a:	e00c      	b.n	800a076 <tcp_input+0x7ea>
    goto dropped;
 800a05c:	bf00      	nop
 800a05e:	e006      	b.n	800a06e <tcp_input+0x7e2>
    goto dropped;
 800a060:	bf00      	nop
 800a062:	e004      	b.n	800a06e <tcp_input+0x7e2>
    goto dropped;
 800a064:	bf00      	nop
 800a066:	e002      	b.n	800a06e <tcp_input+0x7e2>
      goto dropped;
 800a068:	bf00      	nop
 800a06a:	e000      	b.n	800a06e <tcp_input+0x7e2>
      goto dropped;
 800a06c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7fd fbe6 	bl	8007840 <pbuf_free>
 800a074:	e000      	b.n	800a078 <tcp_input+0x7ec>
  return;
 800a076:	bf00      	nop
}
 800a078:	3724      	adds	r7, #36	@ 0x24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd90      	pop	{r4, r7, pc}
 800a07e:	bf00      	nop
 800a080:	200084bc 	.word	0x200084bc
 800a084:	200084b8 	.word	0x200084b8
 800a088:	20008488 	.word	0x20008488
 800a08c:	20008498 	.word	0x20008498
 800a090:	200084ac 	.word	0x200084ac
 800a094:	200084b2 	.word	0x200084b2
 800a098:	200084a8 	.word	0x200084a8
 800a09c:	20004f10 	.word	0x20004f10
 800a0a0:	20004f14 	.word	0x20004f14

0800a0a4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d106      	bne.n	800a0c0 <tcp_input_delayed_close+0x1c>
 800a0b2:	4b17      	ldr	r3, [pc, #92]	@ (800a110 <tcp_input_delayed_close+0x6c>)
 800a0b4:	f240 225a 	movw	r2, #602	@ 0x25a
 800a0b8:	4916      	ldr	r1, [pc, #88]	@ (800a114 <tcp_input_delayed_close+0x70>)
 800a0ba:	4817      	ldr	r0, [pc, #92]	@ (800a118 <tcp_input_delayed_close+0x74>)
 800a0bc:	f008 f85c 	bl	8012178 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a0c0:	4b16      	ldr	r3, [pc, #88]	@ (800a11c <tcp_input_delayed_close+0x78>)
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	f003 0310 	and.w	r3, r3, #16
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d01c      	beq.n	800a106 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	8b5b      	ldrh	r3, [r3, #26]
 800a0d0:	f003 0310 	and.w	r3, r3, #16
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10d      	bne.n	800a0f4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d008      	beq.n	800a0f4 <tcp_input_delayed_close+0x50>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6912      	ldr	r2, [r2, #16]
 800a0ec:	f06f 010e 	mvn.w	r1, #14
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a0f4:	6879      	ldr	r1, [r7, #4]
 800a0f6:	480a      	ldr	r0, [pc, #40]	@ (800a120 <tcp_input_delayed_close+0x7c>)
 800a0f8:	f7ff fa50 	bl	800959c <tcp_pcb_remove>
    tcp_free(pcb);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7fd fe3f 	bl	8007d80 <tcp_free>
    return 1;
 800a102:	2301      	movs	r3, #1
 800a104:	e000      	b.n	800a108 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	08014640 	.word	0x08014640
 800a114:	08014810 	.word	0x08014810
 800a118:	0801468c 	.word	0x0801468c
 800a11c:	200084b5 	.word	0x200084b5
 800a120:	2000847c 	.word	0x2000847c

0800a124 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a124:	b590      	push	{r4, r7, lr}
 800a126:	b08b      	sub	sp, #44	@ 0x2c
 800a128:	af04      	add	r7, sp, #16
 800a12a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a12c:	4b6f      	ldr	r3, [pc, #444]	@ (800a2ec <tcp_listen_input+0x1c8>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f003 0304 	and.w	r3, r3, #4
 800a134:	2b00      	cmp	r3, #0
 800a136:	f040 80d2 	bne.w	800a2de <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d106      	bne.n	800a14e <tcp_listen_input+0x2a>
 800a140:	4b6b      	ldr	r3, [pc, #428]	@ (800a2f0 <tcp_listen_input+0x1cc>)
 800a142:	f240 2281 	movw	r2, #641	@ 0x281
 800a146:	496b      	ldr	r1, [pc, #428]	@ (800a2f4 <tcp_listen_input+0x1d0>)
 800a148:	486b      	ldr	r0, [pc, #428]	@ (800a2f8 <tcp_listen_input+0x1d4>)
 800a14a:	f008 f815 	bl	8012178 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a14e:	4b67      	ldr	r3, [pc, #412]	@ (800a2ec <tcp_listen_input+0x1c8>)
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	f003 0310 	and.w	r3, r3, #16
 800a156:	2b00      	cmp	r3, #0
 800a158:	d019      	beq.n	800a18e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a15a:	4b68      	ldr	r3, [pc, #416]	@ (800a2fc <tcp_listen_input+0x1d8>)
 800a15c:	6819      	ldr	r1, [r3, #0]
 800a15e:	4b68      	ldr	r3, [pc, #416]	@ (800a300 <tcp_listen_input+0x1dc>)
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	461a      	mov	r2, r3
 800a164:	4b67      	ldr	r3, [pc, #412]	@ (800a304 <tcp_listen_input+0x1e0>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a16a:	4b67      	ldr	r3, [pc, #412]	@ (800a308 <tcp_listen_input+0x1e4>)
 800a16c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a16e:	885b      	ldrh	r3, [r3, #2]
 800a170:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a172:	4a65      	ldr	r2, [pc, #404]	@ (800a308 <tcp_listen_input+0x1e4>)
 800a174:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a176:	8812      	ldrh	r2, [r2, #0]
 800a178:	b292      	uxth	r2, r2
 800a17a:	9202      	str	r2, [sp, #8]
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	4b63      	ldr	r3, [pc, #396]	@ (800a30c <tcp_listen_input+0x1e8>)
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	4b63      	ldr	r3, [pc, #396]	@ (800a310 <tcp_listen_input+0x1ec>)
 800a184:	4602      	mov	r2, r0
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f003 fbd2 	bl	800d930 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a18c:	e0a9      	b.n	800a2e2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a18e:	4b57      	ldr	r3, [pc, #348]	@ (800a2ec <tcp_listen_input+0x1c8>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	f003 0302 	and.w	r3, r3, #2
 800a196:	2b00      	cmp	r3, #0
 800a198:	f000 80a3 	beq.w	800a2e2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	7d5b      	ldrb	r3, [r3, #21]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7ff f8e5 	bl	8009370 <tcp_alloc>
 800a1a6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d111      	bne.n	800a1d2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00a      	beq.n	800a1cc <tcp_listen_input+0xa8>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	6910      	ldr	r0, [r2, #16]
 800a1be:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	4798      	blx	r3
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	73bb      	strb	r3, [r7, #14]
      return;
 800a1ca:	e08b      	b.n	800a2e4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a1cc:	23f0      	movs	r3, #240	@ 0xf0
 800a1ce:	73bb      	strb	r3, [r7, #14]
      return;
 800a1d0:	e088      	b.n	800a2e4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a1d2:	4b50      	ldr	r3, [pc, #320]	@ (800a314 <tcp_listen_input+0x1f0>)
 800a1d4:	695a      	ldr	r2, [r3, #20]
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a1da:	4b4e      	ldr	r3, [pc, #312]	@ (800a314 <tcp_listen_input+0x1f0>)
 800a1dc:	691a      	ldr	r2, [r3, #16]
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	8ada      	ldrh	r2, [r3, #22]
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a1ea:	4b47      	ldr	r3, [pc, #284]	@ (800a308 <tcp_listen_input+0x1e4>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2203      	movs	r2, #3
 800a1fa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a1fc:	4b41      	ldr	r3, [pc, #260]	@ (800a304 <tcp_listen_input+0x1e0>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	1c5a      	adds	r2, r3, #1
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800a20e:	6978      	ldr	r0, [r7, #20]
 800a210:	f7ff fa58 	bl	80096c4 <tcp_next_iss>
 800a214:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a22e:	4b35      	ldr	r3, [pc, #212]	@ (800a304 <tcp_listen_input+0x1e0>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	1e5a      	subs	r2, r3, #1
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	691a      	ldr	r2, [r3, #16]
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	7a5b      	ldrb	r3, [r3, #9]
 800a24a:	f003 030c 	and.w	r3, r3, #12
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	7a1a      	ldrb	r2, [r3, #8]
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a25c:	4b2e      	ldr	r3, [pc, #184]	@ (800a318 <tcp_listen_input+0x1f4>)
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	60da      	str	r2, [r3, #12]
 800a264:	4a2c      	ldr	r2, [pc, #176]	@ (800a318 <tcp_listen_input+0x1f4>)
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	f003 fd23 	bl	800dcb4 <tcp_timer_needed>
 800a26e:	4b2b      	ldr	r3, [pc, #172]	@ (800a31c <tcp_listen_input+0x1f8>)
 800a270:	2201      	movs	r2, #1
 800a272:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a274:	6978      	ldr	r0, [r7, #20]
 800a276:	f001 fd8b 	bl	800bd90 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a27a:	4b23      	ldr	r3, [pc, #140]	@ (800a308 <tcp_listen_input+0x1e4>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	89db      	ldrh	r3, [r3, #14]
 800a280:	b29a      	uxth	r2, r3
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4618      	mov	r0, r3
 800a29e:	f005 f8e7 	bl	800f470 <ip4_route>
 800a2a2:	4601      	mov	r1, r0
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f7ff fa30 	bl	8009710 <tcp_eff_send_mss_netif>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a2b8:	2112      	movs	r1, #18
 800a2ba:	6978      	ldr	r0, [r7, #20]
 800a2bc:	f002 fc96 	bl	800cbec <tcp_enqueue_flags>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a2c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d004      	beq.n	800a2d6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	6978      	ldr	r0, [r7, #20]
 800a2d0:	f7fd ff80 	bl	80081d4 <tcp_abandon>
      return;
 800a2d4:	e006      	b.n	800a2e4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a2d6:	6978      	ldr	r0, [r7, #20]
 800a2d8:	f002 fd76 	bl	800cdc8 <tcp_output>
  return;
 800a2dc:	e001      	b.n	800a2e2 <tcp_listen_input+0x1be>
    return;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <tcp_listen_input+0x1c0>
  return;
 800a2e2:	bf00      	nop
}
 800a2e4:	371c      	adds	r7, #28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd90      	pop	{r4, r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	200084b4 	.word	0x200084b4
 800a2f0:	08014640 	.word	0x08014640
 800a2f4:	08014838 	.word	0x08014838
 800a2f8:	0801468c 	.word	0x0801468c
 800a2fc:	200084ac 	.word	0x200084ac
 800a300:	200084b2 	.word	0x200084b2
 800a304:	200084a8 	.word	0x200084a8
 800a308:	20008498 	.word	0x20008498
 800a30c:	20004f10 	.word	0x20004f10
 800a310:	20004f14 	.word	0x20004f14
 800a314:	20004f00 	.word	0x20004f00
 800a318:	2000847c 	.word	0x2000847c
 800a31c:	20008484 	.word	0x20008484

0800a320 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af04      	add	r7, sp, #16
 800a326:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a328:	4b2f      	ldr	r3, [pc, #188]	@ (800a3e8 <tcp_timewait_input+0xc8>)
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	f003 0304 	and.w	r3, r3, #4
 800a330:	2b00      	cmp	r3, #0
 800a332:	d153      	bne.n	800a3dc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d106      	bne.n	800a348 <tcp_timewait_input+0x28>
 800a33a:	4b2c      	ldr	r3, [pc, #176]	@ (800a3ec <tcp_timewait_input+0xcc>)
 800a33c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a340:	492b      	ldr	r1, [pc, #172]	@ (800a3f0 <tcp_timewait_input+0xd0>)
 800a342:	482c      	ldr	r0, [pc, #176]	@ (800a3f4 <tcp_timewait_input+0xd4>)
 800a344:	f007 ff18 	bl	8012178 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a348:	4b27      	ldr	r3, [pc, #156]	@ (800a3e8 <tcp_timewait_input+0xc8>)
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d02a      	beq.n	800a3aa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a354:	4b28      	ldr	r3, [pc, #160]	@ (800a3f8 <tcp_timewait_input+0xd8>)
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	db2d      	blt.n	800a3be <tcp_timewait_input+0x9e>
 800a362:	4b25      	ldr	r3, [pc, #148]	@ (800a3f8 <tcp_timewait_input+0xd8>)
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a36e:	440b      	add	r3, r1
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	dc23      	bgt.n	800a3be <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a376:	4b21      	ldr	r3, [pc, #132]	@ (800a3fc <tcp_timewait_input+0xdc>)
 800a378:	6819      	ldr	r1, [r3, #0]
 800a37a:	4b21      	ldr	r3, [pc, #132]	@ (800a400 <tcp_timewait_input+0xe0>)
 800a37c:	881b      	ldrh	r3, [r3, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	4b1d      	ldr	r3, [pc, #116]	@ (800a3f8 <tcp_timewait_input+0xd8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a386:	4b1f      	ldr	r3, [pc, #124]	@ (800a404 <tcp_timewait_input+0xe4>)
 800a388:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a38a:	885b      	ldrh	r3, [r3, #2]
 800a38c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a38e:	4a1d      	ldr	r2, [pc, #116]	@ (800a404 <tcp_timewait_input+0xe4>)
 800a390:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a392:	8812      	ldrh	r2, [r2, #0]
 800a394:	b292      	uxth	r2, r2
 800a396:	9202      	str	r2, [sp, #8]
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	4b1b      	ldr	r3, [pc, #108]	@ (800a408 <tcp_timewait_input+0xe8>)
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	4b1b      	ldr	r3, [pc, #108]	@ (800a40c <tcp_timewait_input+0xec>)
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f003 fac4 	bl	800d930 <tcp_rst>
      return;
 800a3a8:	e01b      	b.n	800a3e2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a3aa:	4b0f      	ldr	r3, [pc, #60]	@ (800a3e8 <tcp_timewait_input+0xc8>)
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a3b6:	4b16      	ldr	r3, [pc, #88]	@ (800a410 <tcp_timewait_input+0xf0>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a3be:	4b10      	ldr	r3, [pc, #64]	@ (800a400 <tcp_timewait_input+0xe0>)
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00c      	beq.n	800a3e0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	8b5b      	ldrh	r3, [r3, #26]
 800a3ca:	f043 0302 	orr.w	r3, r3, #2
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f002 fcf7 	bl	800cdc8 <tcp_output>
  }
  return;
 800a3da:	e001      	b.n	800a3e0 <tcp_timewait_input+0xc0>
    return;
 800a3dc:	bf00      	nop
 800a3de:	e000      	b.n	800a3e2 <tcp_timewait_input+0xc2>
  return;
 800a3e0:	bf00      	nop
}
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	200084b4 	.word	0x200084b4
 800a3ec:	08014640 	.word	0x08014640
 800a3f0:	08014858 	.word	0x08014858
 800a3f4:	0801468c 	.word	0x0801468c
 800a3f8:	200084a8 	.word	0x200084a8
 800a3fc:	200084ac 	.word	0x200084ac
 800a400:	200084b2 	.word	0x200084b2
 800a404:	20008498 	.word	0x20008498
 800a408:	20004f10 	.word	0x20004f10
 800a40c:	20004f14 	.word	0x20004f14
 800a410:	20008470 	.word	0x20008470

0800a414 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a414:	b590      	push	{r4, r7, lr}
 800a416:	b08d      	sub	sp, #52	@ 0x34
 800a418:	af04      	add	r7, sp, #16
 800a41a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a420:	2300      	movs	r3, #0
 800a422:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d106      	bne.n	800a438 <tcp_process+0x24>
 800a42a:	4b9d      	ldr	r3, [pc, #628]	@ (800a6a0 <tcp_process+0x28c>)
 800a42c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a430:	499c      	ldr	r1, [pc, #624]	@ (800a6a4 <tcp_process+0x290>)
 800a432:	489d      	ldr	r0, [pc, #628]	@ (800a6a8 <tcp_process+0x294>)
 800a434:	f007 fea0 	bl	8012178 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a438:	4b9c      	ldr	r3, [pc, #624]	@ (800a6ac <tcp_process+0x298>)
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	2b00      	cmp	r3, #0
 800a442:	d04e      	beq.n	800a4e2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	7d1b      	ldrb	r3, [r3, #20]
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d108      	bne.n	800a45e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a450:	4b97      	ldr	r3, [pc, #604]	@ (800a6b0 <tcp_process+0x29c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	429a      	cmp	r2, r3
 800a456:	d123      	bne.n	800a4a0 <tcp_process+0x8c>
        acceptable = 1;
 800a458:	2301      	movs	r3, #1
 800a45a:	76fb      	strb	r3, [r7, #27]
 800a45c:	e020      	b.n	800a4a0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a462:	4b94      	ldr	r3, [pc, #592]	@ (800a6b4 <tcp_process+0x2a0>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d102      	bne.n	800a470 <tcp_process+0x5c>
        acceptable = 1;
 800a46a:	2301      	movs	r3, #1
 800a46c:	76fb      	strb	r3, [r7, #27]
 800a46e:	e017      	b.n	800a4a0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a470:	4b90      	ldr	r3, [pc, #576]	@ (800a6b4 <tcp_process+0x2a0>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	db10      	blt.n	800a4a0 <tcp_process+0x8c>
 800a47e:	4b8d      	ldr	r3, [pc, #564]	@ (800a6b4 <tcp_process+0x2a0>)
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a486:	6879      	ldr	r1, [r7, #4]
 800a488:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a48a:	440b      	add	r3, r1
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dc06      	bgt.n	800a4a0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	8b5b      	ldrh	r3, [r3, #26]
 800a496:	f043 0302 	orr.w	r3, r3, #2
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a4a0:	7efb      	ldrb	r3, [r7, #27]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d01b      	beq.n	800a4de <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	7d1b      	ldrb	r3, [r3, #20]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d106      	bne.n	800a4bc <tcp_process+0xa8>
 800a4ae:	4b7c      	ldr	r3, [pc, #496]	@ (800a6a0 <tcp_process+0x28c>)
 800a4b0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a4b4:	4980      	ldr	r1, [pc, #512]	@ (800a6b8 <tcp_process+0x2a4>)
 800a4b6:	487c      	ldr	r0, [pc, #496]	@ (800a6a8 <tcp_process+0x294>)
 800a4b8:	f007 fe5e 	bl	8012178 <iprintf>
      recv_flags |= TF_RESET;
 800a4bc:	4b7f      	ldr	r3, [pc, #508]	@ (800a6bc <tcp_process+0x2a8>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	f043 0308 	orr.w	r3, r3, #8
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	4b7d      	ldr	r3, [pc, #500]	@ (800a6bc <tcp_process+0x2a8>)
 800a4c8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	8b5b      	ldrh	r3, [r3, #26]
 800a4ce:	f023 0301 	bic.w	r3, r3, #1
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a4d8:	f06f 030d 	mvn.w	r3, #13
 800a4dc:	e37a      	b.n	800abd4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	e378      	b.n	800abd4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a4e2:	4b72      	ldr	r3, [pc, #456]	@ (800a6ac <tcp_process+0x298>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	f003 0302 	and.w	r3, r3, #2
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d010      	beq.n	800a510 <tcp_process+0xfc>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	7d1b      	ldrb	r3, [r3, #20]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d00c      	beq.n	800a510 <tcp_process+0xfc>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	7d1b      	ldrb	r3, [r3, #20]
 800a4fa:	2b03      	cmp	r3, #3
 800a4fc:	d008      	beq.n	800a510 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	8b5b      	ldrh	r3, [r3, #26]
 800a502:	f043 0302 	orr.w	r3, r3, #2
 800a506:	b29a      	uxth	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	e361      	b.n	800abd4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	8b5b      	ldrh	r3, [r3, #26]
 800a514:	f003 0310 	and.w	r3, r3, #16
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d103      	bne.n	800a524 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a51c:	4b68      	ldr	r3, [pc, #416]	@ (800a6c0 <tcp_process+0x2ac>)
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f001 fc2b 	bl	800bd90 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	7d1b      	ldrb	r3, [r3, #20]
 800a53e:	3b02      	subs	r3, #2
 800a540:	2b07      	cmp	r3, #7
 800a542:	f200 8337 	bhi.w	800abb4 <tcp_process+0x7a0>
 800a546:	a201      	add	r2, pc, #4	@ (adr r2, 800a54c <tcp_process+0x138>)
 800a548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54c:	0800a56d 	.word	0x0800a56d
 800a550:	0800a79d 	.word	0x0800a79d
 800a554:	0800a915 	.word	0x0800a915
 800a558:	0800a93f 	.word	0x0800a93f
 800a55c:	0800aa63 	.word	0x0800aa63
 800a560:	0800a915 	.word	0x0800a915
 800a564:	0800aaef 	.word	0x0800aaef
 800a568:	0800ab7f 	.word	0x0800ab7f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a56c:	4b4f      	ldr	r3, [pc, #316]	@ (800a6ac <tcp_process+0x298>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	f003 0310 	and.w	r3, r3, #16
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 80e4 	beq.w	800a742 <tcp_process+0x32e>
 800a57a:	4b4c      	ldr	r3, [pc, #304]	@ (800a6ac <tcp_process+0x298>)
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	f003 0302 	and.w	r3, r3, #2
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 80dd 	beq.w	800a742 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a58c:	1c5a      	adds	r2, r3, #1
 800a58e:	4b48      	ldr	r3, [pc, #288]	@ (800a6b0 <tcp_process+0x29c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	429a      	cmp	r2, r3
 800a594:	f040 80d5 	bne.w	800a742 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a598:	4b46      	ldr	r3, [pc, #280]	@ (800a6b4 <tcp_process+0x2a0>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a5aa:	4b41      	ldr	r3, [pc, #260]	@ (800a6b0 <tcp_process+0x29c>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a5b2:	4b44      	ldr	r3, [pc, #272]	@ (800a6c4 <tcp_process+0x2b0>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	89db      	ldrh	r3, [r3, #14]
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a5cc:	4b39      	ldr	r3, [pc, #228]	@ (800a6b4 <tcp_process+0x2a0>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	1e5a      	subs	r2, r3, #1
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2204      	movs	r2, #4
 800a5da:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f004 ff43 	bl	800f470 <ip4_route>
 800a5ea:	4601      	mov	r1, r0
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7ff f88c 	bl	8009710 <tcp_eff_send_mss_netif>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a604:	009a      	lsls	r2, r3, #2
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a60a:	005b      	lsls	r3, r3, #1
 800a60c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a610:	428b      	cmp	r3, r1
 800a612:	bf38      	it	cc
 800a614:	460b      	movcc	r3, r1
 800a616:	429a      	cmp	r2, r3
 800a618:	d204      	bcs.n	800a624 <tcp_process+0x210>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	b29b      	uxth	r3, r3
 800a622:	e00d      	b.n	800a640 <tcp_process+0x22c>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a62e:	4293      	cmp	r3, r2
 800a630:	d904      	bls.n	800a63c <tcp_process+0x228>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	b29b      	uxth	r3, r3
 800a63a:	e001      	b.n	800a640 <tcp_process+0x22c>
 800a63c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d106      	bne.n	800a65e <tcp_process+0x24a>
 800a650:	4b13      	ldr	r3, [pc, #76]	@ (800a6a0 <tcp_process+0x28c>)
 800a652:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a656:	491c      	ldr	r1, [pc, #112]	@ (800a6c8 <tcp_process+0x2b4>)
 800a658:	4813      	ldr	r0, [pc, #76]	@ (800a6a8 <tcp_process+0x294>)
 800a65a:	f007 fd8d 	bl	8012178 <iprintf>
        --pcb->snd_queuelen;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a664:	3b01      	subs	r3, #1
 800a666:	b29a      	uxth	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a672:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d12a      	bne.n	800a6d0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a67e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d106      	bne.n	800a694 <tcp_process+0x280>
 800a686:	4b06      	ldr	r3, [pc, #24]	@ (800a6a0 <tcp_process+0x28c>)
 800a688:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a68c:	490f      	ldr	r1, [pc, #60]	@ (800a6cc <tcp_process+0x2b8>)
 800a68e:	4806      	ldr	r0, [pc, #24]	@ (800a6a8 <tcp_process+0x294>)
 800a690:	f007 fd72 	bl	8012178 <iprintf>
          pcb->unsent = rseg->next;
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a69c:	e01c      	b.n	800a6d8 <tcp_process+0x2c4>
 800a69e:	bf00      	nop
 800a6a0:	08014640 	.word	0x08014640
 800a6a4:	08014878 	.word	0x08014878
 800a6a8:	0801468c 	.word	0x0801468c
 800a6ac:	200084b4 	.word	0x200084b4
 800a6b0:	200084ac 	.word	0x200084ac
 800a6b4:	200084a8 	.word	0x200084a8
 800a6b8:	08014894 	.word	0x08014894
 800a6bc:	200084b5 	.word	0x200084b5
 800a6c0:	20008470 	.word	0x20008470
 800a6c4:	20008498 	.word	0x20008498
 800a6c8:	080148b4 	.word	0x080148b4
 800a6cc:	080148cc 	.word	0x080148cc
        } else {
          pcb->unacked = rseg->next;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a6d8:	69f8      	ldr	r0, [r7, #28]
 800a6da:	f7fe fce0 	bl	800909e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d104      	bne.n	800a6f0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6ec:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a6ee:	e006      	b.n	800a6fe <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00a      	beq.n	800a71e <tcp_process+0x30a>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	6910      	ldr	r0, [r2, #16]
 800a712:	2200      	movs	r2, #0
 800a714:	6879      	ldr	r1, [r7, #4]
 800a716:	4798      	blx	r3
 800a718:	4603      	mov	r3, r0
 800a71a:	76bb      	strb	r3, [r7, #26]
 800a71c:	e001      	b.n	800a722 <tcp_process+0x30e>
 800a71e:	2300      	movs	r3, #0
 800a720:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a722:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a726:	f113 0f0d 	cmn.w	r3, #13
 800a72a:	d102      	bne.n	800a732 <tcp_process+0x31e>
          return ERR_ABRT;
 800a72c:	f06f 030c 	mvn.w	r3, #12
 800a730:	e250      	b.n	800abd4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	8b5b      	ldrh	r3, [r3, #26]
 800a736:	f043 0302 	orr.w	r3, r3, #2
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a740:	e23a      	b.n	800abb8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a742:	4b98      	ldr	r3, [pc, #608]	@ (800a9a4 <tcp_process+0x590>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	f003 0310 	and.w	r3, r3, #16
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f000 8234 	beq.w	800abb8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a750:	4b95      	ldr	r3, [pc, #596]	@ (800a9a8 <tcp_process+0x594>)
 800a752:	6819      	ldr	r1, [r3, #0]
 800a754:	4b95      	ldr	r3, [pc, #596]	@ (800a9ac <tcp_process+0x598>)
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	461a      	mov	r2, r3
 800a75a:	4b95      	ldr	r3, [pc, #596]	@ (800a9b0 <tcp_process+0x59c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a760:	4b94      	ldr	r3, [pc, #592]	@ (800a9b4 <tcp_process+0x5a0>)
 800a762:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a764:	885b      	ldrh	r3, [r3, #2]
 800a766:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a768:	4a92      	ldr	r2, [pc, #584]	@ (800a9b4 <tcp_process+0x5a0>)
 800a76a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a76c:	8812      	ldrh	r2, [r2, #0]
 800a76e:	b292      	uxth	r2, r2
 800a770:	9202      	str	r2, [sp, #8]
 800a772:	9301      	str	r3, [sp, #4]
 800a774:	4b90      	ldr	r3, [pc, #576]	@ (800a9b8 <tcp_process+0x5a4>)
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	4b90      	ldr	r3, [pc, #576]	@ (800a9bc <tcp_process+0x5a8>)
 800a77a:	4602      	mov	r2, r0
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f003 f8d7 	bl	800d930 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a788:	2b05      	cmp	r3, #5
 800a78a:	f200 8215 	bhi.w	800abb8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f002 fea3 	bl	800d4e0 <tcp_rexmit_rto>
      break;
 800a79a:	e20d      	b.n	800abb8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a79c:	4b81      	ldr	r3, [pc, #516]	@ (800a9a4 <tcp_process+0x590>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	f003 0310 	and.w	r3, r3, #16
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 80a1 	beq.w	800a8ec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a7aa:	4b7f      	ldr	r3, [pc, #508]	@ (800a9a8 <tcp_process+0x594>)
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	db7e      	blt.n	800a8b8 <tcp_process+0x4a4>
 800a7ba:	4b7b      	ldr	r3, [pc, #492]	@ (800a9a8 <tcp_process+0x594>)
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	dc77      	bgt.n	800a8b8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2204      	movs	r2, #4
 800a7cc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d102      	bne.n	800a7dc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a7d6:	23fa      	movs	r3, #250	@ 0xfa
 800a7d8:	76bb      	strb	r3, [r7, #26]
 800a7da:	e01d      	b.n	800a818 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d106      	bne.n	800a7f4 <tcp_process+0x3e0>
 800a7e6:	4b76      	ldr	r3, [pc, #472]	@ (800a9c0 <tcp_process+0x5ac>)
 800a7e8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a7ec:	4975      	ldr	r1, [pc, #468]	@ (800a9c4 <tcp_process+0x5b0>)
 800a7ee:	4876      	ldr	r0, [pc, #472]	@ (800a9c8 <tcp_process+0x5b4>)
 800a7f0:	f007 fcc2 	bl	8012178 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00a      	beq.n	800a814 <tcp_process+0x400>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	6910      	ldr	r0, [r2, #16]
 800a808:	2200      	movs	r2, #0
 800a80a:	6879      	ldr	r1, [r7, #4]
 800a80c:	4798      	blx	r3
 800a80e:	4603      	mov	r3, r0
 800a810:	76bb      	strb	r3, [r7, #26]
 800a812:	e001      	b.n	800a818 <tcp_process+0x404>
 800a814:	23f0      	movs	r3, #240	@ 0xf0
 800a816:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a818:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00a      	beq.n	800a836 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a820:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a824:	f113 0f0d 	cmn.w	r3, #13
 800a828:	d002      	beq.n	800a830 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f7fd fd90 	bl	8008350 <tcp_abort>
            }
            return ERR_ABRT;
 800a830:	f06f 030c 	mvn.w	r3, #12
 800a834:	e1ce      	b.n	800abd4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fae0 	bl	800adfc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a83c:	4b63      	ldr	r3, [pc, #396]	@ (800a9cc <tcp_process+0x5b8>)
 800a83e:	881b      	ldrh	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d005      	beq.n	800a850 <tcp_process+0x43c>
            recv_acked--;
 800a844:	4b61      	ldr	r3, [pc, #388]	@ (800a9cc <tcp_process+0x5b8>)
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	3b01      	subs	r3, #1
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	4b5f      	ldr	r3, [pc, #380]	@ (800a9cc <tcp_process+0x5b8>)
 800a84e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a854:	009a      	lsls	r2, r3, #2
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a85a:	005b      	lsls	r3, r3, #1
 800a85c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a860:	428b      	cmp	r3, r1
 800a862:	bf38      	it	cc
 800a864:	460b      	movcc	r3, r1
 800a866:	429a      	cmp	r2, r3
 800a868:	d204      	bcs.n	800a874 <tcp_process+0x460>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	b29b      	uxth	r3, r3
 800a872:	e00d      	b.n	800a890 <tcp_process+0x47c>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a87e:	4293      	cmp	r3, r2
 800a880:	d904      	bls.n	800a88c <tcp_process+0x478>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a886:	005b      	lsls	r3, r3, #1
 800a888:	b29b      	uxth	r3, r3
 800a88a:	e001      	b.n	800a890 <tcp_process+0x47c>
 800a88c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a896:	4b4e      	ldr	r3, [pc, #312]	@ (800a9d0 <tcp_process+0x5bc>)
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d037      	beq.n	800a912 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	8b5b      	ldrh	r3, [r3, #26]
 800a8a6:	f043 0302 	orr.w	r3, r3, #2
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2207      	movs	r2, #7
 800a8b4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a8b6:	e02c      	b.n	800a912 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8b8:	4b3b      	ldr	r3, [pc, #236]	@ (800a9a8 <tcp_process+0x594>)
 800a8ba:	6819      	ldr	r1, [r3, #0]
 800a8bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a9ac <tcp_process+0x598>)
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	4b3b      	ldr	r3, [pc, #236]	@ (800a9b0 <tcp_process+0x59c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8c8:	4b3a      	ldr	r3, [pc, #232]	@ (800a9b4 <tcp_process+0x5a0>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8cc:	885b      	ldrh	r3, [r3, #2]
 800a8ce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8d0:	4a38      	ldr	r2, [pc, #224]	@ (800a9b4 <tcp_process+0x5a0>)
 800a8d2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8d4:	8812      	ldrh	r2, [r2, #0]
 800a8d6:	b292      	uxth	r2, r2
 800a8d8:	9202      	str	r2, [sp, #8]
 800a8da:	9301      	str	r3, [sp, #4]
 800a8dc:	4b36      	ldr	r3, [pc, #216]	@ (800a9b8 <tcp_process+0x5a4>)
 800a8de:	9300      	str	r3, [sp, #0]
 800a8e0:	4b36      	ldr	r3, [pc, #216]	@ (800a9bc <tcp_process+0x5a8>)
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f003 f823 	bl	800d930 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a8ea:	e167      	b.n	800abbc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a8ec:	4b2d      	ldr	r3, [pc, #180]	@ (800a9a4 <tcp_process+0x590>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f000 8161 	beq.w	800abbc <tcp_process+0x7a8>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8fe:	1e5a      	subs	r2, r3, #1
 800a900:	4b2b      	ldr	r3, [pc, #172]	@ (800a9b0 <tcp_process+0x59c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	429a      	cmp	r2, r3
 800a906:	f040 8159 	bne.w	800abbc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f002 fe0a 	bl	800d524 <tcp_rexmit>
      break;
 800a910:	e154      	b.n	800abbc <tcp_process+0x7a8>
 800a912:	e153      	b.n	800abbc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fa71 	bl	800adfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a91a:	4b2d      	ldr	r3, [pc, #180]	@ (800a9d0 <tcp_process+0x5bc>)
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	f003 0320 	and.w	r3, r3, #32
 800a922:	2b00      	cmp	r3, #0
 800a924:	f000 814c 	beq.w	800abc0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8b5b      	ldrh	r3, [r3, #26]
 800a92c:	f043 0302 	orr.w	r3, r3, #2
 800a930:	b29a      	uxth	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2207      	movs	r2, #7
 800a93a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a93c:	e140      	b.n	800abc0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fa5c 	bl	800adfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a944:	4b22      	ldr	r3, [pc, #136]	@ (800a9d0 <tcp_process+0x5bc>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	f003 0320 	and.w	r3, r3, #32
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d071      	beq.n	800aa34 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a950:	4b14      	ldr	r3, [pc, #80]	@ (800a9a4 <tcp_process+0x590>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	f003 0310 	and.w	r3, r3, #16
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d060      	beq.n	800aa1e <tcp_process+0x60a>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a960:	4b11      	ldr	r3, [pc, #68]	@ (800a9a8 <tcp_process+0x594>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	429a      	cmp	r2, r3
 800a966:	d15a      	bne.n	800aa1e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d156      	bne.n	800aa1e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	8b5b      	ldrh	r3, [r3, #26]
 800a974:	f043 0302 	orr.w	r3, r3, #2
 800a978:	b29a      	uxth	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7fe fdbc 	bl	80094fc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a984:	4b13      	ldr	r3, [pc, #76]	@ (800a9d4 <tcp_process+0x5c0>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d105      	bne.n	800a99a <tcp_process+0x586>
 800a98e:	4b11      	ldr	r3, [pc, #68]	@ (800a9d4 <tcp_process+0x5c0>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	4a0f      	ldr	r2, [pc, #60]	@ (800a9d4 <tcp_process+0x5c0>)
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	e02e      	b.n	800a9f8 <tcp_process+0x5e4>
 800a99a:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d4 <tcp_process+0x5c0>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	e027      	b.n	800a9f2 <tcp_process+0x5de>
 800a9a2:	bf00      	nop
 800a9a4:	200084b4 	.word	0x200084b4
 800a9a8:	200084ac 	.word	0x200084ac
 800a9ac:	200084b2 	.word	0x200084b2
 800a9b0:	200084a8 	.word	0x200084a8
 800a9b4:	20008498 	.word	0x20008498
 800a9b8:	20004f10 	.word	0x20004f10
 800a9bc:	20004f14 	.word	0x20004f14
 800a9c0:	08014640 	.word	0x08014640
 800a9c4:	080148e0 	.word	0x080148e0
 800a9c8:	0801468c 	.word	0x0801468c
 800a9cc:	200084b0 	.word	0x200084b0
 800a9d0:	200084b5 	.word	0x200084b5
 800a9d4:	2000847c 	.word	0x2000847c
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d104      	bne.n	800a9ec <tcp_process+0x5d8>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	60da      	str	r2, [r3, #12]
 800a9ea:	e005      	b.n	800a9f8 <tcp_process+0x5e4>
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	617b      	str	r3, [r7, #20]
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d1ef      	bne.n	800a9d8 <tcp_process+0x5c4>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	60da      	str	r2, [r3, #12]
 800a9fe:	4b77      	ldr	r3, [pc, #476]	@ (800abdc <tcp_process+0x7c8>)
 800aa00:	2201      	movs	r2, #1
 800aa02:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	220a      	movs	r2, #10
 800aa08:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800aa0a:	4b75      	ldr	r3, [pc, #468]	@ (800abe0 <tcp_process+0x7cc>)
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	60da      	str	r2, [r3, #12]
 800aa12:	4a73      	ldr	r2, [pc, #460]	@ (800abe0 <tcp_process+0x7cc>)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6013      	str	r3, [r2, #0]
 800aa18:	f003 f94c 	bl	800dcb4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800aa1c:	e0d2      	b.n	800abc4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	8b5b      	ldrh	r3, [r3, #26]
 800aa22:	f043 0302 	orr.w	r3, r3, #2
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2208      	movs	r2, #8
 800aa30:	751a      	strb	r2, [r3, #20]
      break;
 800aa32:	e0c7      	b.n	800abc4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa34:	4b6b      	ldr	r3, [pc, #428]	@ (800abe4 <tcp_process+0x7d0>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	f003 0310 	and.w	r3, r3, #16
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 80c1 	beq.w	800abc4 <tcp_process+0x7b0>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa46:	4b68      	ldr	r3, [pc, #416]	@ (800abe8 <tcp_process+0x7d4>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	f040 80ba 	bne.w	800abc4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f040 80b5 	bne.w	800abc4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2206      	movs	r2, #6
 800aa5e:	751a      	strb	r2, [r3, #20]
      break;
 800aa60:	e0b0      	b.n	800abc4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f9ca 	bl	800adfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aa68:	4b60      	ldr	r3, [pc, #384]	@ (800abec <tcp_process+0x7d8>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	f003 0320 	and.w	r3, r3, #32
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 80a9 	beq.w	800abc8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	8b5b      	ldrh	r3, [r3, #26]
 800aa7a:	f043 0302 	orr.w	r3, r3, #2
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f7fe fd39 	bl	80094fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aa8a:	4b59      	ldr	r3, [pc, #356]	@ (800abf0 <tcp_process+0x7dc>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d105      	bne.n	800aaa0 <tcp_process+0x68c>
 800aa94:	4b56      	ldr	r3, [pc, #344]	@ (800abf0 <tcp_process+0x7dc>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	4a55      	ldr	r2, [pc, #340]	@ (800abf0 <tcp_process+0x7dc>)
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	e013      	b.n	800aac8 <tcp_process+0x6b4>
 800aaa0:	4b53      	ldr	r3, [pc, #332]	@ (800abf0 <tcp_process+0x7dc>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	613b      	str	r3, [r7, #16]
 800aaa6:	e00c      	b.n	800aac2 <tcp_process+0x6ae>
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d104      	bne.n	800aabc <tcp_process+0x6a8>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	60da      	str	r2, [r3, #12]
 800aaba:	e005      	b.n	800aac8 <tcp_process+0x6b4>
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	613b      	str	r3, [r7, #16]
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1ef      	bne.n	800aaa8 <tcp_process+0x694>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	60da      	str	r2, [r3, #12]
 800aace:	4b43      	ldr	r3, [pc, #268]	@ (800abdc <tcp_process+0x7c8>)
 800aad0:	2201      	movs	r2, #1
 800aad2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	220a      	movs	r2, #10
 800aad8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aada:	4b41      	ldr	r3, [pc, #260]	@ (800abe0 <tcp_process+0x7cc>)
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	60da      	str	r2, [r3, #12]
 800aae2:	4a3f      	ldr	r2, [pc, #252]	@ (800abe0 <tcp_process+0x7cc>)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6013      	str	r3, [r2, #0]
 800aae8:	f003 f8e4 	bl	800dcb4 <tcp_timer_needed>
      }
      break;
 800aaec:	e06c      	b.n	800abc8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f984 	bl	800adfc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aaf4:	4b3b      	ldr	r3, [pc, #236]	@ (800abe4 <tcp_process+0x7d0>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	f003 0310 	and.w	r3, r3, #16
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d065      	beq.n	800abcc <tcp_process+0x7b8>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab04:	4b38      	ldr	r3, [pc, #224]	@ (800abe8 <tcp_process+0x7d4>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d15f      	bne.n	800abcc <tcp_process+0x7b8>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d15b      	bne.n	800abcc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7fe fcf1 	bl	80094fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ab1a:	4b35      	ldr	r3, [pc, #212]	@ (800abf0 <tcp_process+0x7dc>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d105      	bne.n	800ab30 <tcp_process+0x71c>
 800ab24:	4b32      	ldr	r3, [pc, #200]	@ (800abf0 <tcp_process+0x7dc>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	4a31      	ldr	r2, [pc, #196]	@ (800abf0 <tcp_process+0x7dc>)
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	e013      	b.n	800ab58 <tcp_process+0x744>
 800ab30:	4b2f      	ldr	r3, [pc, #188]	@ (800abf0 <tcp_process+0x7dc>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	60fb      	str	r3, [r7, #12]
 800ab36:	e00c      	b.n	800ab52 <tcp_process+0x73e>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d104      	bne.n	800ab4c <tcp_process+0x738>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68da      	ldr	r2, [r3, #12]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	60da      	str	r2, [r3, #12]
 800ab4a:	e005      	b.n	800ab58 <tcp_process+0x744>
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	60fb      	str	r3, [r7, #12]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1ef      	bne.n	800ab38 <tcp_process+0x724>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	60da      	str	r2, [r3, #12]
 800ab5e:	4b1f      	ldr	r3, [pc, #124]	@ (800abdc <tcp_process+0x7c8>)
 800ab60:	2201      	movs	r2, #1
 800ab62:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	220a      	movs	r2, #10
 800ab68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ab6a:	4b1d      	ldr	r3, [pc, #116]	@ (800abe0 <tcp_process+0x7cc>)
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	60da      	str	r2, [r3, #12]
 800ab72:	4a1b      	ldr	r2, [pc, #108]	@ (800abe0 <tcp_process+0x7cc>)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6013      	str	r3, [r2, #0]
 800ab78:	f003 f89c 	bl	800dcb4 <tcp_timer_needed>
      }
      break;
 800ab7c:	e026      	b.n	800abcc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f93c 	bl	800adfc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ab84:	4b17      	ldr	r3, [pc, #92]	@ (800abe4 <tcp_process+0x7d0>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f003 0310 	and.w	r3, r3, #16
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d01f      	beq.n	800abd0 <tcp_process+0x7bc>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab94:	4b14      	ldr	r3, [pc, #80]	@ (800abe8 <tcp_process+0x7d4>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d119      	bne.n	800abd0 <tcp_process+0x7bc>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d115      	bne.n	800abd0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800aba4:	4b11      	ldr	r3, [pc, #68]	@ (800abec <tcp_process+0x7d8>)
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	f043 0310 	orr.w	r3, r3, #16
 800abac:	b2da      	uxtb	r2, r3
 800abae:	4b0f      	ldr	r3, [pc, #60]	@ (800abec <tcp_process+0x7d8>)
 800abb0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800abb2:	e00d      	b.n	800abd0 <tcp_process+0x7bc>
    default:
      break;
 800abb4:	bf00      	nop
 800abb6:	e00c      	b.n	800abd2 <tcp_process+0x7be>
      break;
 800abb8:	bf00      	nop
 800abba:	e00a      	b.n	800abd2 <tcp_process+0x7be>
      break;
 800abbc:	bf00      	nop
 800abbe:	e008      	b.n	800abd2 <tcp_process+0x7be>
      break;
 800abc0:	bf00      	nop
 800abc2:	e006      	b.n	800abd2 <tcp_process+0x7be>
      break;
 800abc4:	bf00      	nop
 800abc6:	e004      	b.n	800abd2 <tcp_process+0x7be>
      break;
 800abc8:	bf00      	nop
 800abca:	e002      	b.n	800abd2 <tcp_process+0x7be>
      break;
 800abcc:	bf00      	nop
 800abce:	e000      	b.n	800abd2 <tcp_process+0x7be>
      break;
 800abd0:	bf00      	nop
  }
  return ERR_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3724      	adds	r7, #36	@ 0x24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd90      	pop	{r4, r7, pc}
 800abdc:	20008484 	.word	0x20008484
 800abe0:	20008480 	.word	0x20008480
 800abe4:	200084b4 	.word	0x200084b4
 800abe8:	200084ac 	.word	0x200084ac
 800abec:	200084b5 	.word	0x200084b5
 800abf0:	2000847c 	.word	0x2000847c

0800abf4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800abf4:	b590      	push	{r4, r7, lr}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d106      	bne.n	800ac12 <tcp_oos_insert_segment+0x1e>
 800ac04:	4b3b      	ldr	r3, [pc, #236]	@ (800acf4 <tcp_oos_insert_segment+0x100>)
 800ac06:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ac0a:	493b      	ldr	r1, [pc, #236]	@ (800acf8 <tcp_oos_insert_segment+0x104>)
 800ac0c:	483b      	ldr	r0, [pc, #236]	@ (800acfc <tcp_oos_insert_segment+0x108>)
 800ac0e:	f007 fab3 	bl	8012178 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	899b      	ldrh	r3, [r3, #12]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fb fab2 	bl	8006184 <lwip_htons>
 800ac20:	4603      	mov	r3, r0
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d028      	beq.n	800ac7e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ac2c:	6838      	ldr	r0, [r7, #0]
 800ac2e:	f7fe fa21 	bl	8009074 <tcp_segs_free>
    next = NULL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	603b      	str	r3, [r7, #0]
 800ac36:	e056      	b.n	800ace6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	899b      	ldrh	r3, [r3, #12]
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fb fa9f 	bl	8006184 <lwip_htons>
 800ac46:	4603      	mov	r3, r0
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00d      	beq.n	800ac6e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	899b      	ldrh	r3, [r3, #12]
 800ac58:	b29c      	uxth	r4, r3
 800ac5a:	2001      	movs	r0, #1
 800ac5c:	f7fb fa92 	bl	8006184 <lwip_htons>
 800ac60:	4603      	mov	r3, r0
 800ac62:	461a      	mov	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	4322      	orrs	r2, r4
 800ac6a:	b292      	uxth	r2, r2
 800ac6c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7fe fa10 	bl	800909e <tcp_seg_free>
    while (next &&
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00e      	beq.n	800aca2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	891b      	ldrh	r3, [r3, #8]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	4b1d      	ldr	r3, [pc, #116]	@ (800ad00 <tcp_oos_insert_segment+0x10c>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	441a      	add	r2, r3
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	8909      	ldrh	r1, [r1, #8]
 800ac9a:	440b      	add	r3, r1
 800ac9c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	daca      	bge.n	800ac38 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d01e      	beq.n	800ace6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	891b      	ldrh	r3, [r3, #8]
 800acac:	461a      	mov	r2, r3
 800acae:	4b14      	ldr	r3, [pc, #80]	@ (800ad00 <tcp_oos_insert_segment+0x10c>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	441a      	add	r2, r3
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	1ad3      	subs	r3, r2, r3
    if (next &&
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	dd12      	ble.n	800ace6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	4b0d      	ldr	r3, [pc, #52]	@ (800ad00 <tcp_oos_insert_segment+0x10c>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	b29b      	uxth	r3, r3
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	891b      	ldrh	r3, [r3, #8]
 800acde:	4619      	mov	r1, r3
 800ace0:	4610      	mov	r0, r2
 800ace2:	f7fc fc27 	bl	8007534 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	601a      	str	r2, [r3, #0]
}
 800acec:	bf00      	nop
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd90      	pop	{r4, r7, pc}
 800acf4:	08014640 	.word	0x08014640
 800acf8:	08014900 	.word	0x08014900
 800acfc:	0801468c 	.word	0x0801468c
 800ad00:	200084a8 	.word	0x200084a8

0800ad04 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ad04:	b5b0      	push	{r4, r5, r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
 800ad10:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ad12:	e03e      	b.n	800ad92 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fc fe14 	bl	8007950 <pbuf_clen>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad32:	8a7a      	ldrh	r2, [r7, #18]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d906      	bls.n	800ad46 <tcp_free_acked_segments+0x42>
 800ad38:	4b2a      	ldr	r3, [pc, #168]	@ (800ade4 <tcp_free_acked_segments+0xe0>)
 800ad3a:	f240 4257 	movw	r2, #1111	@ 0x457
 800ad3e:	492a      	ldr	r1, [pc, #168]	@ (800ade8 <tcp_free_acked_segments+0xe4>)
 800ad40:	482a      	ldr	r0, [pc, #168]	@ (800adec <tcp_free_acked_segments+0xe8>)
 800ad42:	f007 fa19 	bl	8012178 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ad4c:	8a7b      	ldrh	r3, [r7, #18]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	891a      	ldrh	r2, [r3, #8]
 800ad5c:	4b24      	ldr	r3, [pc, #144]	@ (800adf0 <tcp_free_acked_segments+0xec>)
 800ad5e:	881b      	ldrh	r3, [r3, #0]
 800ad60:	4413      	add	r3, r2
 800ad62:	b29a      	uxth	r2, r3
 800ad64:	4b22      	ldr	r3, [pc, #136]	@ (800adf0 <tcp_free_acked_segments+0xec>)
 800ad66:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ad68:	6978      	ldr	r0, [r7, #20]
 800ad6a:	f7fe f998 	bl	800909e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00c      	beq.n	800ad92 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d109      	bne.n	800ad92 <tcp_free_acked_segments+0x8e>
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d106      	bne.n	800ad92 <tcp_free_acked_segments+0x8e>
 800ad84:	4b17      	ldr	r3, [pc, #92]	@ (800ade4 <tcp_free_acked_segments+0xe0>)
 800ad86:	f240 4261 	movw	r2, #1121	@ 0x461
 800ad8a:	491a      	ldr	r1, [pc, #104]	@ (800adf4 <tcp_free_acked_segments+0xf0>)
 800ad8c:	4817      	ldr	r0, [pc, #92]	@ (800adec <tcp_free_acked_segments+0xe8>)
 800ad8e:	f007 f9f3 	bl	8012178 <iprintf>
  while (seg_list != NULL &&
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d020      	beq.n	800adda <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fb fa06 	bl	80061b0 <lwip_htonl>
 800ada4:	4604      	mov	r4, r0
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	891b      	ldrh	r3, [r3, #8]
 800adaa:	461d      	mov	r5, r3
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	899b      	ldrh	r3, [r3, #12]
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fb f9e5 	bl	8006184 <lwip_htons>
 800adba:	4603      	mov	r3, r0
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	f003 0303 	and.w	r3, r3, #3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <tcp_free_acked_segments+0xc6>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e000      	b.n	800adcc <tcp_free_acked_segments+0xc8>
 800adca:	2300      	movs	r3, #0
 800adcc:	442b      	add	r3, r5
 800adce:	18e2      	adds	r2, r4, r3
 800add0:	4b09      	ldr	r3, [pc, #36]	@ (800adf8 <tcp_free_acked_segments+0xf4>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800add6:	2b00      	cmp	r3, #0
 800add8:	dd9c      	ble.n	800ad14 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800adda:	68bb      	ldr	r3, [r7, #8]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bdb0      	pop	{r4, r5, r7, pc}
 800ade4:	08014640 	.word	0x08014640
 800ade8:	08014928 	.word	0x08014928
 800adec:	0801468c 	.word	0x0801468c
 800adf0:	200084b0 	.word	0x200084b0
 800adf4:	08014950 	.word	0x08014950
 800adf8:	200084ac 	.word	0x200084ac

0800adfc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800adfc:	b5b0      	push	{r4, r5, r7, lr}
 800adfe:	b094      	sub	sp, #80	@ 0x50
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d106      	bne.n	800ae1c <tcp_receive+0x20>
 800ae0e:	4b91      	ldr	r3, [pc, #580]	@ (800b054 <tcp_receive+0x258>)
 800ae10:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ae14:	4990      	ldr	r1, [pc, #576]	@ (800b058 <tcp_receive+0x25c>)
 800ae16:	4891      	ldr	r0, [pc, #580]	@ (800b05c <tcp_receive+0x260>)
 800ae18:	f007 f9ae 	bl	8012178 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	7d1b      	ldrb	r3, [r3, #20]
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d806      	bhi.n	800ae32 <tcp_receive+0x36>
 800ae24:	4b8b      	ldr	r3, [pc, #556]	@ (800b054 <tcp_receive+0x258>)
 800ae26:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ae2a:	498d      	ldr	r1, [pc, #564]	@ (800b060 <tcp_receive+0x264>)
 800ae2c:	488b      	ldr	r0, [pc, #556]	@ (800b05c <tcp_receive+0x260>)
 800ae2e:	f007 f9a3 	bl	8012178 <iprintf>

  if (flags & TCP_ACK) {
 800ae32:	4b8c      	ldr	r3, [pc, #560]	@ (800b064 <tcp_receive+0x268>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	f003 0310 	and.w	r3, r3, #16
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f000 8264 	beq.w	800b308 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae46:	461a      	mov	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae4c:	4413      	add	r3, r2
 800ae4e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae54:	4b84      	ldr	r3, [pc, #528]	@ (800b068 <tcp_receive+0x26c>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	db1b      	blt.n	800ae96 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae62:	4b81      	ldr	r3, [pc, #516]	@ (800b068 <tcp_receive+0x26c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d106      	bne.n	800ae78 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ae6e:	4b7f      	ldr	r3, [pc, #508]	@ (800b06c <tcp_receive+0x270>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	db0e      	blt.n	800ae96 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ae7c:	4b7b      	ldr	r3, [pc, #492]	@ (800b06c <tcp_receive+0x270>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d125      	bne.n	800aed0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ae84:	4b7a      	ldr	r3, [pc, #488]	@ (800b070 <tcp_receive+0x274>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	89db      	ldrh	r3, [r3, #14]
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d91c      	bls.n	800aed0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ae96:	4b76      	ldr	r3, [pc, #472]	@ (800b070 <tcp_receive+0x274>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	89db      	ldrh	r3, [r3, #14]
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d205      	bcs.n	800aec0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800aec0:	4b69      	ldr	r3, [pc, #420]	@ (800b068 <tcp_receive+0x26c>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800aec8:	4b68      	ldr	r3, [pc, #416]	@ (800b06c <tcp_receive+0x270>)
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800aed0:	4b66      	ldr	r3, [pc, #408]	@ (800b06c <tcp_receive+0x270>)
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aed8:	1ad3      	subs	r3, r2, r3
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	dc58      	bgt.n	800af90 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800aede:	4b65      	ldr	r3, [pc, #404]	@ (800b074 <tcp_receive+0x278>)
 800aee0:	881b      	ldrh	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d14b      	bne.n	800af7e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800aef0:	4413      	add	r3, r2
 800aef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d142      	bne.n	800af7e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800aefe:	2b00      	cmp	r3, #0
 800af00:	db3d      	blt.n	800af7e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af06:	4b59      	ldr	r3, [pc, #356]	@ (800b06c <tcp_receive+0x270>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d137      	bne.n	800af7e <tcp_receive+0x182>
              found_dupack = 1;
 800af0e:	2301      	movs	r3, #1
 800af10:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af18:	2bff      	cmp	r3, #255	@ 0xff
 800af1a:	d007      	beq.n	800af2c <tcp_receive+0x130>
                ++pcb->dupacks;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af22:	3301      	adds	r3, #1
 800af24:	b2da      	uxtb	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af32:	2b03      	cmp	r3, #3
 800af34:	d91b      	bls.n	800af6e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af40:	4413      	add	r3, r2
 800af42:	b29a      	uxth	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d30a      	bcc.n	800af64 <tcp_receive+0x168>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af58:	4413      	add	r3, r2
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800af62:	e004      	b.n	800af6e <tcp_receive+0x172>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af6a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af74:	2b02      	cmp	r3, #2
 800af76:	d902      	bls.n	800af7e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f002 fb3f 	bl	800d5fc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800af7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af80:	2b00      	cmp	r3, #0
 800af82:	f040 8161 	bne.w	800b248 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af8e:	e15b      	b.n	800b248 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af90:	4b36      	ldr	r3, [pc, #216]	@ (800b06c <tcp_receive+0x270>)
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	3b01      	subs	r3, #1
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f2c0 814e 	blt.w	800b23e <tcp_receive+0x442>
 800afa2:	4b32      	ldr	r3, [pc, #200]	@ (800b06c <tcp_receive+0x270>)
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	2b00      	cmp	r3, #0
 800afae:	f300 8146 	bgt.w	800b23e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	8b5b      	ldrh	r3, [r3, #26]
 800afb6:	f003 0304 	and.w	r3, r3, #4
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d010      	beq.n	800afe0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	8b5b      	ldrh	r3, [r3, #26]
 800afc2:	f023 0304 	bic.w	r3, r3, #4
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800afee:	10db      	asrs	r3, r3, #3
 800aff0:	b21b      	sxth	r3, r3
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800affa:	b29b      	uxth	r3, r3
 800affc:	4413      	add	r3, r2
 800affe:	b29b      	uxth	r3, r3
 800b000:	b21a      	sxth	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b008:	4b18      	ldr	r3, [pc, #96]	@ (800b06c <tcp_receive+0x270>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	b29a      	uxth	r2, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b012:	b29b      	uxth	r3, r3
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800b020:	4b12      	ldr	r3, [pc, #72]	@ (800b06c <tcp_receive+0x270>)
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	7d1b      	ldrb	r3, [r3, #20]
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	f240 8097 	bls.w	800b160 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b03e:	429a      	cmp	r2, r3
 800b040:	d245      	bcs.n	800b0ce <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	8b5b      	ldrh	r3, [r3, #26]
 800b046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d014      	beq.n	800b078 <tcp_receive+0x27c>
 800b04e:	2301      	movs	r3, #1
 800b050:	e013      	b.n	800b07a <tcp_receive+0x27e>
 800b052:	bf00      	nop
 800b054:	08014640 	.word	0x08014640
 800b058:	08014970 	.word	0x08014970
 800b05c:	0801468c 	.word	0x0801468c
 800b060:	0801498c 	.word	0x0801498c
 800b064:	200084b4 	.word	0x200084b4
 800b068:	200084a8 	.word	0x200084a8
 800b06c:	200084ac 	.word	0x200084ac
 800b070:	20008498 	.word	0x20008498
 800b074:	200084b2 	.word	0x200084b2
 800b078:	2302      	movs	r3, #2
 800b07a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b07e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b082:	b29a      	uxth	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b088:	fb12 f303 	smulbb	r3, r2, r3
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b090:	4293      	cmp	r3, r2
 800b092:	bf28      	it	cs
 800b094:	4613      	movcs	r3, r2
 800b096:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b09e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b0a0:	4413      	add	r3, r2
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d309      	bcc.n	800b0c2 <tcp_receive+0x2c6>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b0b4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b0b6:	4413      	add	r3, r2
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b0c0:	e04e      	b.n	800b160 <tcp_receive+0x364>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b0cc:	e048      	b.n	800b160 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b0d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b0d6:	4413      	add	r3, r2
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d309      	bcc.n	800b0f8 <tcp_receive+0x2fc>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b0ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b0ec:	4413      	add	r3, r2
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b0f6:	e004      	b.n	800b102 <tcp_receive+0x306>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b10e:	429a      	cmp	r2, r3
 800b110:	d326      	bcc.n	800b160 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	b29a      	uxth	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b132:	4413      	add	r3, r2
 800b134:	b29a      	uxth	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d30a      	bcc.n	800b156 <tcp_receive+0x35a>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b14a:	4413      	add	r3, r2
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b154:	e004      	b.n	800b160 <tcp_receive+0x364>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b15c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b168:	4a98      	ldr	r2, [pc, #608]	@ (800b3cc <tcp_receive+0x5d0>)
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7ff fdca 	bl	800ad04 <tcp_free_acked_segments>
 800b170:	4602      	mov	r2, r0
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b17e:	4a94      	ldr	r2, [pc, #592]	@ (800b3d0 <tcp_receive+0x5d4>)
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7ff fdbf 	bl	800ad04 <tcp_free_acked_segments>
 800b186:	4602      	mov	r2, r0
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b190:	2b00      	cmp	r3, #0
 800b192:	d104      	bne.n	800b19e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b19a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b19c:	e002      	b.n	800b1a4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d103      	bne.n	800b1ba <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b1c0:	4b84      	ldr	r3, [pc, #528]	@ (800b3d4 <tcp_receive+0x5d8>)
 800b1c2:	881b      	ldrh	r3, [r3, #0]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	8b5b      	ldrh	r3, [r3, #26]
 800b1d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d035      	beq.n	800b246 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d118      	bne.n	800b214 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00c      	beq.n	800b204 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fa ffda 	bl	80061b0 <lwip_htonl>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b200:	2b00      	cmp	r3, #0
 800b202:	dc20      	bgt.n	800b246 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	8b5b      	ldrh	r3, [r3, #26]
 800b208:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b212:	e018      	b.n	800b246 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	4618      	mov	r0, r3
 800b222:	f7fa ffc5 	bl	80061b0 <lwip_htonl>
 800b226:	4603      	mov	r3, r0
 800b228:	1ae3      	subs	r3, r4, r3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	dc0b      	bgt.n	800b246 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	8b5b      	ldrh	r3, [r3, #26]
 800b232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b236:	b29a      	uxth	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b23c:	e003      	b.n	800b246 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f002 fbc8 	bl	800d9d4 <tcp_send_empty_ack>
 800b244:	e000      	b.n	800b248 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b246:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d05b      	beq.n	800b308 <tcp_receive+0x50c>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b254:	4b60      	ldr	r3, [pc, #384]	@ (800b3d8 <tcp_receive+0x5dc>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	da54      	bge.n	800b308 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b25e:	4b5f      	ldr	r3, [pc, #380]	@ (800b3dc <tcp_receive+0x5e0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	b29a      	uxth	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b268:	b29b      	uxth	r3, r3
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b272:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b27c:	10db      	asrs	r3, r3, #3
 800b27e:	b21b      	sxth	r3, r3
 800b280:	b29b      	uxth	r3, r3
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	b29b      	uxth	r3, r3
 800b286:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b290:	b29a      	uxth	r2, r3
 800b292:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b296:	4413      	add	r3, r2
 800b298:	b29b      	uxth	r3, r3
 800b29a:	b21a      	sxth	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800b2a0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	da05      	bge.n	800b2b4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b2a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b2ac:	425b      	negs	r3, r3
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b2b4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b2be:	109b      	asrs	r3, r3, #2
 800b2c0:	b21b      	sxth	r3, r3
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b2d8:	4413      	add	r3, r2
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	b21a      	sxth	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b2e8:	10db      	asrs	r3, r3, #3
 800b2ea:	b21b      	sxth	r3, r3
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	4413      	add	r3, r2
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	b21a      	sxth	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b308:	4b35      	ldr	r3, [pc, #212]	@ (800b3e0 <tcp_receive+0x5e4>)
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 84df 	beq.w	800bcd0 <tcp_receive+0xed4>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	7d1b      	ldrb	r3, [r3, #20]
 800b316:	2b06      	cmp	r3, #6
 800b318:	f200 84da 	bhi.w	800bcd0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b320:	4b30      	ldr	r3, [pc, #192]	@ (800b3e4 <tcp_receive+0x5e8>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	3b01      	subs	r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f2c0 808f 	blt.w	800b44c <tcp_receive+0x650>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b332:	4b2b      	ldr	r3, [pc, #172]	@ (800b3e0 <tcp_receive+0x5e4>)
 800b334:	881b      	ldrh	r3, [r3, #0]
 800b336:	4619      	mov	r1, r3
 800b338:	4b2a      	ldr	r3, [pc, #168]	@ (800b3e4 <tcp_receive+0x5e8>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	440b      	add	r3, r1
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	3301      	adds	r3, #1
 800b342:	2b00      	cmp	r3, #0
 800b344:	f300 8082 	bgt.w	800b44c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b348:	4b27      	ldr	r3, [pc, #156]	@ (800b3e8 <tcp_receive+0x5ec>)
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b352:	4b24      	ldr	r3, [pc, #144]	@ (800b3e4 <tcp_receive+0x5e8>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b35a:	4b23      	ldr	r3, [pc, #140]	@ (800b3e8 <tcp_receive+0x5ec>)
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d106      	bne.n	800b370 <tcp_receive+0x574>
 800b362:	4b22      	ldr	r3, [pc, #136]	@ (800b3ec <tcp_receive+0x5f0>)
 800b364:	f240 5294 	movw	r2, #1428	@ 0x594
 800b368:	4921      	ldr	r1, [pc, #132]	@ (800b3f0 <tcp_receive+0x5f4>)
 800b36a:	4822      	ldr	r0, [pc, #136]	@ (800b3f4 <tcp_receive+0x5f8>)
 800b36c:	f006 ff04 	bl	8012178 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b372:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b376:	4293      	cmp	r3, r2
 800b378:	d906      	bls.n	800b388 <tcp_receive+0x58c>
 800b37a:	4b1c      	ldr	r3, [pc, #112]	@ (800b3ec <tcp_receive+0x5f0>)
 800b37c:	f240 5295 	movw	r2, #1429	@ 0x595
 800b380:	491d      	ldr	r1, [pc, #116]	@ (800b3f8 <tcp_receive+0x5fc>)
 800b382:	481c      	ldr	r0, [pc, #112]	@ (800b3f4 <tcp_receive+0x5f8>)
 800b384:	f006 fef8 	bl	8012178 <iprintf>
      off = (u16_t)off32;
 800b388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b38e:	4b16      	ldr	r3, [pc, #88]	@ (800b3e8 <tcp_receive+0x5ec>)
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	891b      	ldrh	r3, [r3, #8]
 800b394:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b398:	429a      	cmp	r2, r3
 800b39a:	d906      	bls.n	800b3aa <tcp_receive+0x5ae>
 800b39c:	4b13      	ldr	r3, [pc, #76]	@ (800b3ec <tcp_receive+0x5f0>)
 800b39e:	f240 5297 	movw	r2, #1431	@ 0x597
 800b3a2:	4916      	ldr	r1, [pc, #88]	@ (800b3fc <tcp_receive+0x600>)
 800b3a4:	4813      	ldr	r0, [pc, #76]	@ (800b3f4 <tcp_receive+0x5f8>)
 800b3a6:	f006 fee7 	bl	8012178 <iprintf>
      inseg.len -= off;
 800b3aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e8 <tcp_receive+0x5ec>)
 800b3ac:	891a      	ldrh	r2, [r3, #8]
 800b3ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e8 <tcp_receive+0x5ec>)
 800b3b8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b3ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b3e8 <tcp_receive+0x5ec>)
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	891a      	ldrh	r2, [r3, #8]
 800b3c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b3c4:	1ad3      	subs	r3, r2, r3
 800b3c6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b3c8:	e02a      	b.n	800b420 <tcp_receive+0x624>
 800b3ca:	bf00      	nop
 800b3cc:	080149a8 	.word	0x080149a8
 800b3d0:	080149b0 	.word	0x080149b0
 800b3d4:	200084b0 	.word	0x200084b0
 800b3d8:	200084ac 	.word	0x200084ac
 800b3dc:	20008470 	.word	0x20008470
 800b3e0:	200084b2 	.word	0x200084b2
 800b3e4:	200084a8 	.word	0x200084a8
 800b3e8:	20008488 	.word	0x20008488
 800b3ec:	08014640 	.word	0x08014640
 800b3f0:	080149b8 	.word	0x080149b8
 800b3f4:	0801468c 	.word	0x0801468c
 800b3f8:	080149c8 	.word	0x080149c8
 800b3fc:	080149d8 	.word	0x080149d8
        off -= p->len;
 800b400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b402:	895b      	ldrh	r3, [r3, #10]
 800b404:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b410:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b412:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b416:	2200      	movs	r2, #0
 800b418:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b41a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b422:	895b      	ldrh	r3, [r3, #10]
 800b424:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b428:	429a      	cmp	r2, r3
 800b42a:	d8e9      	bhi.n	800b400 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b42c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b430:	4619      	mov	r1, r3
 800b432:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b434:	f7fc f97e 	bl	8007734 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b43c:	4a90      	ldr	r2, [pc, #576]	@ (800b680 <tcp_receive+0x884>)
 800b43e:	6013      	str	r3, [r2, #0]
 800b440:	4b90      	ldr	r3, [pc, #576]	@ (800b684 <tcp_receive+0x888>)
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	4a8e      	ldr	r2, [pc, #568]	@ (800b680 <tcp_receive+0x884>)
 800b446:	6812      	ldr	r2, [r2, #0]
 800b448:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b44a:	e00d      	b.n	800b468 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b44c:	4b8c      	ldr	r3, [pc, #560]	@ (800b680 <tcp_receive+0x884>)
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	2b00      	cmp	r3, #0
 800b458:	da06      	bge.n	800b468 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	8b5b      	ldrh	r3, [r3, #26]
 800b45e:	f043 0302 	orr.w	r3, r3, #2
 800b462:	b29a      	uxth	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b468:	4b85      	ldr	r3, [pc, #532]	@ (800b680 <tcp_receive+0x884>)
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	f2c0 8427 	blt.w	800bcc6 <tcp_receive+0xeca>
 800b478:	4b81      	ldr	r3, [pc, #516]	@ (800b680 <tcp_receive+0x884>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b480:	6879      	ldr	r1, [r7, #4]
 800b482:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b484:	440b      	add	r3, r1
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	3301      	adds	r3, #1
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f300 841b 	bgt.w	800bcc6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b494:	4b7a      	ldr	r3, [pc, #488]	@ (800b680 <tcp_receive+0x884>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	429a      	cmp	r2, r3
 800b49a:	f040 8298 	bne.w	800b9ce <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b49e:	4b79      	ldr	r3, [pc, #484]	@ (800b684 <tcp_receive+0x888>)
 800b4a0:	891c      	ldrh	r4, [r3, #8]
 800b4a2:	4b78      	ldr	r3, [pc, #480]	@ (800b684 <tcp_receive+0x888>)
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	899b      	ldrh	r3, [r3, #12]
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fa fe6a 	bl	8006184 <lwip_htons>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	f003 0303 	and.w	r3, r3, #3
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <tcp_receive+0x6c4>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e000      	b.n	800b4c2 <tcp_receive+0x6c6>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4423      	add	r3, r4
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	4b70      	ldr	r3, [pc, #448]	@ (800b688 <tcp_receive+0x88c>)
 800b4c8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b4ce:	4b6e      	ldr	r3, [pc, #440]	@ (800b688 <tcp_receive+0x88c>)
 800b4d0:	881b      	ldrh	r3, [r3, #0]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d274      	bcs.n	800b5c0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b4d6:	4b6b      	ldr	r3, [pc, #428]	@ (800b684 <tcp_receive+0x888>)
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	899b      	ldrh	r3, [r3, #12]
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fa fe50 	bl	8006184 <lwip_htons>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	f003 0301 	and.w	r3, r3, #1
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d01e      	beq.n	800b52e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b4f0:	4b64      	ldr	r3, [pc, #400]	@ (800b684 <tcp_receive+0x888>)
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	899b      	ldrh	r3, [r3, #12]
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	b21b      	sxth	r3, r3
 800b4fa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b4fe:	b21c      	sxth	r4, r3
 800b500:	4b60      	ldr	r3, [pc, #384]	@ (800b684 <tcp_receive+0x888>)
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	899b      	ldrh	r3, [r3, #12]
 800b506:	b29b      	uxth	r3, r3
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fa fe3b 	bl	8006184 <lwip_htons>
 800b50e:	4603      	mov	r3, r0
 800b510:	b2db      	uxtb	r3, r3
 800b512:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b516:	b29b      	uxth	r3, r3
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fa fe33 	bl	8006184 <lwip_htons>
 800b51e:	4603      	mov	r3, r0
 800b520:	b21b      	sxth	r3, r3
 800b522:	4323      	orrs	r3, r4
 800b524:	b21a      	sxth	r2, r3
 800b526:	4b57      	ldr	r3, [pc, #348]	@ (800b684 <tcp_receive+0x888>)
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	b292      	uxth	r2, r2
 800b52c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b532:	4b54      	ldr	r3, [pc, #336]	@ (800b684 <tcp_receive+0x888>)
 800b534:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b536:	4b53      	ldr	r3, [pc, #332]	@ (800b684 <tcp_receive+0x888>)
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	899b      	ldrh	r3, [r3, #12]
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fa fe20 	bl	8006184 <lwip_htons>
 800b544:	4603      	mov	r3, r0
 800b546:	b2db      	uxtb	r3, r3
 800b548:	f003 0302 	and.w	r3, r3, #2
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d005      	beq.n	800b55c <tcp_receive+0x760>
            inseg.len -= 1;
 800b550:	4b4c      	ldr	r3, [pc, #304]	@ (800b684 <tcp_receive+0x888>)
 800b552:	891b      	ldrh	r3, [r3, #8]
 800b554:	3b01      	subs	r3, #1
 800b556:	b29a      	uxth	r2, r3
 800b558:	4b4a      	ldr	r3, [pc, #296]	@ (800b684 <tcp_receive+0x888>)
 800b55a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b55c:	4b49      	ldr	r3, [pc, #292]	@ (800b684 <tcp_receive+0x888>)
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	4a48      	ldr	r2, [pc, #288]	@ (800b684 <tcp_receive+0x888>)
 800b562:	8912      	ldrh	r2, [r2, #8]
 800b564:	4611      	mov	r1, r2
 800b566:	4618      	mov	r0, r3
 800b568:	f7fb ffe4 	bl	8007534 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b56c:	4b45      	ldr	r3, [pc, #276]	@ (800b684 <tcp_receive+0x888>)
 800b56e:	891c      	ldrh	r4, [r3, #8]
 800b570:	4b44      	ldr	r3, [pc, #272]	@ (800b684 <tcp_receive+0x888>)
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	899b      	ldrh	r3, [r3, #12]
 800b576:	b29b      	uxth	r3, r3
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fa fe03 	bl	8006184 <lwip_htons>
 800b57e:	4603      	mov	r3, r0
 800b580:	b2db      	uxtb	r3, r3
 800b582:	f003 0303 	and.w	r3, r3, #3
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <tcp_receive+0x792>
 800b58a:	2301      	movs	r3, #1
 800b58c:	e000      	b.n	800b590 <tcp_receive+0x794>
 800b58e:	2300      	movs	r3, #0
 800b590:	4423      	add	r3, r4
 800b592:	b29a      	uxth	r2, r3
 800b594:	4b3c      	ldr	r3, [pc, #240]	@ (800b688 <tcp_receive+0x88c>)
 800b596:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b598:	4b3b      	ldr	r3, [pc, #236]	@ (800b688 <tcp_receive+0x88c>)
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	461a      	mov	r2, r3
 800b59e:	4b38      	ldr	r3, [pc, #224]	@ (800b680 <tcp_receive+0x884>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	441a      	add	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a8:	6879      	ldr	r1, [r7, #4]
 800b5aa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b5ac:	440b      	add	r3, r1
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d006      	beq.n	800b5c0 <tcp_receive+0x7c4>
 800b5b2:	4b36      	ldr	r3, [pc, #216]	@ (800b68c <tcp_receive+0x890>)
 800b5b4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b5b8:	4935      	ldr	r1, [pc, #212]	@ (800b690 <tcp_receive+0x894>)
 800b5ba:	4836      	ldr	r0, [pc, #216]	@ (800b694 <tcp_receive+0x898>)
 800b5bc:	f006 fddc 	bl	8012178 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 80e6 	beq.w	800b796 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b5ca:	4b2e      	ldr	r3, [pc, #184]	@ (800b684 <tcp_receive+0x888>)
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	899b      	ldrh	r3, [r3, #12]
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fa fdd6 	bl	8006184 <lwip_htons>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d010      	beq.n	800b606 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b5e4:	e00a      	b.n	800b5fc <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5ea:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f7fd fd51 	bl	800909e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1f0      	bne.n	800b5e6 <tcp_receive+0x7ea>
 800b604:	e0c7      	b.n	800b796 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b60c:	e051      	b.n	800b6b2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	899b      	ldrh	r3, [r3, #12]
 800b614:	b29b      	uxth	r3, r3
 800b616:	4618      	mov	r0, r3
 800b618:	f7fa fdb4 	bl	8006184 <lwip_htons>
 800b61c:	4603      	mov	r3, r0
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	2b00      	cmp	r3, #0
 800b626:	d03c      	beq.n	800b6a2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b628:	4b16      	ldr	r3, [pc, #88]	@ (800b684 <tcp_receive+0x888>)
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	899b      	ldrh	r3, [r3, #12]
 800b62e:	b29b      	uxth	r3, r3
 800b630:	4618      	mov	r0, r3
 800b632:	f7fa fda7 	bl	8006184 <lwip_htons>
 800b636:	4603      	mov	r3, r0
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d12f      	bne.n	800b6a2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b642:	4b10      	ldr	r3, [pc, #64]	@ (800b684 <tcp_receive+0x888>)
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	899b      	ldrh	r3, [r3, #12]
 800b648:	b29c      	uxth	r4, r3
 800b64a:	2001      	movs	r0, #1
 800b64c:	f7fa fd9a 	bl	8006184 <lwip_htons>
 800b650:	4603      	mov	r3, r0
 800b652:	461a      	mov	r2, r3
 800b654:	4b0b      	ldr	r3, [pc, #44]	@ (800b684 <tcp_receive+0x888>)
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	4322      	orrs	r2, r4
 800b65a:	b292      	uxth	r2, r2
 800b65c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b65e:	4b09      	ldr	r3, [pc, #36]	@ (800b684 <tcp_receive+0x888>)
 800b660:	891c      	ldrh	r4, [r3, #8]
 800b662:	4b08      	ldr	r3, [pc, #32]	@ (800b684 <tcp_receive+0x888>)
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	899b      	ldrh	r3, [r3, #12]
 800b668:	b29b      	uxth	r3, r3
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fa fd8a 	bl	8006184 <lwip_htons>
 800b670:	4603      	mov	r3, r0
 800b672:	b2db      	uxtb	r3, r3
 800b674:	f003 0303 	and.w	r3, r3, #3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00d      	beq.n	800b698 <tcp_receive+0x89c>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e00c      	b.n	800b69a <tcp_receive+0x89e>
 800b680:	200084a8 	.word	0x200084a8
 800b684:	20008488 	.word	0x20008488
 800b688:	200084b2 	.word	0x200084b2
 800b68c:	08014640 	.word	0x08014640
 800b690:	080149e8 	.word	0x080149e8
 800b694:	0801468c 	.word	0x0801468c
 800b698:	2300      	movs	r3, #0
 800b69a:	4423      	add	r3, r4
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	4b98      	ldr	r3, [pc, #608]	@ (800b900 <tcp_receive+0xb04>)
 800b6a0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b6a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b6ac:	6938      	ldr	r0, [r7, #16]
 800b6ae:	f7fd fcf6 	bl	800909e <tcp_seg_free>
            while (next &&
 800b6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00e      	beq.n	800b6d6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b6b8:	4b91      	ldr	r3, [pc, #580]	@ (800b900 <tcp_receive+0xb04>)
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	461a      	mov	r2, r3
 800b6be:	4b91      	ldr	r3, [pc, #580]	@ (800b904 <tcp_receive+0xb08>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	441a      	add	r2, r3
 800b6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6cc:	8909      	ldrh	r1, [r1, #8]
 800b6ce:	440b      	add	r3, r1
 800b6d0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	da9b      	bge.n	800b60e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b6d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d059      	beq.n	800b790 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b6dc:	4b88      	ldr	r3, [pc, #544]	@ (800b900 <tcp_receive+0xb04>)
 800b6de:	881b      	ldrh	r3, [r3, #0]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	4b88      	ldr	r3, [pc, #544]	@ (800b904 <tcp_receive+0xb08>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	441a      	add	r2, r3
 800b6e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	dd4d      	ble.n	800b790 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b6f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	4b81      	ldr	r3, [pc, #516]	@ (800b904 <tcp_receive+0xb08>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	b29b      	uxth	r3, r3
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	b29a      	uxth	r2, r3
 800b706:	4b80      	ldr	r3, [pc, #512]	@ (800b908 <tcp_receive+0xb0c>)
 800b708:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b70a:	4b7f      	ldr	r3, [pc, #508]	@ (800b908 <tcp_receive+0xb0c>)
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	899b      	ldrh	r3, [r3, #12]
 800b710:	b29b      	uxth	r3, r3
 800b712:	4618      	mov	r0, r3
 800b714:	f7fa fd36 	bl	8006184 <lwip_htons>
 800b718:	4603      	mov	r3, r0
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	f003 0302 	and.w	r3, r3, #2
 800b720:	2b00      	cmp	r3, #0
 800b722:	d005      	beq.n	800b730 <tcp_receive+0x934>
                inseg.len -= 1;
 800b724:	4b78      	ldr	r3, [pc, #480]	@ (800b908 <tcp_receive+0xb0c>)
 800b726:	891b      	ldrh	r3, [r3, #8]
 800b728:	3b01      	subs	r3, #1
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	4b76      	ldr	r3, [pc, #472]	@ (800b908 <tcp_receive+0xb0c>)
 800b72e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b730:	4b75      	ldr	r3, [pc, #468]	@ (800b908 <tcp_receive+0xb0c>)
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	4a74      	ldr	r2, [pc, #464]	@ (800b908 <tcp_receive+0xb0c>)
 800b736:	8912      	ldrh	r2, [r2, #8]
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fb fefa 	bl	8007534 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b740:	4b71      	ldr	r3, [pc, #452]	@ (800b908 <tcp_receive+0xb0c>)
 800b742:	891c      	ldrh	r4, [r3, #8]
 800b744:	4b70      	ldr	r3, [pc, #448]	@ (800b908 <tcp_receive+0xb0c>)
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	899b      	ldrh	r3, [r3, #12]
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fa fd19 	bl	8006184 <lwip_htons>
 800b752:	4603      	mov	r3, r0
 800b754:	b2db      	uxtb	r3, r3
 800b756:	f003 0303 	and.w	r3, r3, #3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <tcp_receive+0x966>
 800b75e:	2301      	movs	r3, #1
 800b760:	e000      	b.n	800b764 <tcp_receive+0x968>
 800b762:	2300      	movs	r3, #0
 800b764:	4423      	add	r3, r4
 800b766:	b29a      	uxth	r2, r3
 800b768:	4b65      	ldr	r3, [pc, #404]	@ (800b900 <tcp_receive+0xb04>)
 800b76a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b76c:	4b64      	ldr	r3, [pc, #400]	@ (800b900 <tcp_receive+0xb04>)
 800b76e:	881b      	ldrh	r3, [r3, #0]
 800b770:	461a      	mov	r2, r3
 800b772:	4b64      	ldr	r3, [pc, #400]	@ (800b904 <tcp_receive+0xb08>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	441a      	add	r2, r3
 800b778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d006      	beq.n	800b790 <tcp_receive+0x994>
 800b782:	4b62      	ldr	r3, [pc, #392]	@ (800b90c <tcp_receive+0xb10>)
 800b784:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b788:	4961      	ldr	r1, [pc, #388]	@ (800b910 <tcp_receive+0xb14>)
 800b78a:	4862      	ldr	r0, [pc, #392]	@ (800b914 <tcp_receive+0xb18>)
 800b78c:	f006 fcf4 	bl	8012178 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b794:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b796:	4b5a      	ldr	r3, [pc, #360]	@ (800b900 <tcp_receive+0xb04>)
 800b798:	881b      	ldrh	r3, [r3, #0]
 800b79a:	461a      	mov	r2, r3
 800b79c:	4b59      	ldr	r3, [pc, #356]	@ (800b904 <tcp_receive+0xb08>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	441a      	add	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b7aa:	4b55      	ldr	r3, [pc, #340]	@ (800b900 <tcp_receive+0xb04>)
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d206      	bcs.n	800b7c0 <tcp_receive+0x9c4>
 800b7b2:	4b56      	ldr	r3, [pc, #344]	@ (800b90c <tcp_receive+0xb10>)
 800b7b4:	f240 6207 	movw	r2, #1543	@ 0x607
 800b7b8:	4957      	ldr	r1, [pc, #348]	@ (800b918 <tcp_receive+0xb1c>)
 800b7ba:	4856      	ldr	r0, [pc, #344]	@ (800b914 <tcp_receive+0xb18>)
 800b7bc:	f006 fcdc 	bl	8012178 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b7c4:	4b4e      	ldr	r3, [pc, #312]	@ (800b900 <tcp_receive+0xb04>)
 800b7c6:	881b      	ldrh	r3, [r3, #0]
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7fc ff3d 	bl	8008650 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b7d6:	4b4c      	ldr	r3, [pc, #304]	@ (800b908 <tcp_receive+0xb0c>)
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	891b      	ldrh	r3, [r3, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d006      	beq.n	800b7ee <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b7e0:	4b49      	ldr	r3, [pc, #292]	@ (800b908 <tcp_receive+0xb0c>)
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	4a4d      	ldr	r2, [pc, #308]	@ (800b91c <tcp_receive+0xb20>)
 800b7e6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b7e8:	4b47      	ldr	r3, [pc, #284]	@ (800b908 <tcp_receive+0xb0c>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b7ee:	4b46      	ldr	r3, [pc, #280]	@ (800b908 <tcp_receive+0xb0c>)
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	899b      	ldrh	r3, [r3, #12]
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fa fcc4 	bl	8006184 <lwip_htons>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 80b8 	beq.w	800b97a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b80a:	4b45      	ldr	r3, [pc, #276]	@ (800b920 <tcp_receive+0xb24>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	f043 0320 	orr.w	r3, r3, #32
 800b812:	b2da      	uxtb	r2, r3
 800b814:	4b42      	ldr	r3, [pc, #264]	@ (800b920 <tcp_receive+0xb24>)
 800b816:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b818:	e0af      	b.n	800b97a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b81e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	4a36      	ldr	r2, [pc, #216]	@ (800b904 <tcp_receive+0xb08>)
 800b82a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	891b      	ldrh	r3, [r3, #8]
 800b830:	461c      	mov	r4, r3
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	899b      	ldrh	r3, [r3, #12]
 800b838:	b29b      	uxth	r3, r3
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fa fca2 	bl	8006184 <lwip_htons>
 800b840:	4603      	mov	r3, r0
 800b842:	b2db      	uxtb	r3, r3
 800b844:	f003 0303 	and.w	r3, r3, #3
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <tcp_receive+0xa54>
 800b84c:	2301      	movs	r3, #1
 800b84e:	e000      	b.n	800b852 <tcp_receive+0xa56>
 800b850:	2300      	movs	r3, #0
 800b852:	191a      	adds	r2, r3, r4
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b858:	441a      	add	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b862:	461c      	mov	r4, r3
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	891b      	ldrh	r3, [r3, #8]
 800b868:	461d      	mov	r5, r3
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	899b      	ldrh	r3, [r3, #12]
 800b870:	b29b      	uxth	r3, r3
 800b872:	4618      	mov	r0, r3
 800b874:	f7fa fc86 	bl	8006184 <lwip_htons>
 800b878:	4603      	mov	r3, r0
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	f003 0303 	and.w	r3, r3, #3
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <tcp_receive+0xa8c>
 800b884:	2301      	movs	r3, #1
 800b886:	e000      	b.n	800b88a <tcp_receive+0xa8e>
 800b888:	2300      	movs	r3, #0
 800b88a:	442b      	add	r3, r5
 800b88c:	429c      	cmp	r4, r3
 800b88e:	d206      	bcs.n	800b89e <tcp_receive+0xaa2>
 800b890:	4b1e      	ldr	r3, [pc, #120]	@ (800b90c <tcp_receive+0xb10>)
 800b892:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b896:	4923      	ldr	r1, [pc, #140]	@ (800b924 <tcp_receive+0xb28>)
 800b898:	481e      	ldr	r0, [pc, #120]	@ (800b914 <tcp_receive+0xb18>)
 800b89a:	f006 fc6d 	bl	8012178 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	891b      	ldrh	r3, [r3, #8]
 800b8a2:	461c      	mov	r4, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	899b      	ldrh	r3, [r3, #12]
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fa fc69 	bl	8006184 <lwip_htons>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	f003 0303 	and.w	r3, r3, #3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d001      	beq.n	800b8c2 <tcp_receive+0xac6>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e000      	b.n	800b8c4 <tcp_receive+0xac8>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	1919      	adds	r1, r3, r4
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b8ca:	b28b      	uxth	r3, r1
 800b8cc:	1ad3      	subs	r3, r2, r3
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7fc febb 	bl	8008650 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	891b      	ldrh	r3, [r3, #8]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d028      	beq.n	800b936 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b8e4:	4b0d      	ldr	r3, [pc, #52]	@ (800b91c <tcp_receive+0xb20>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d01d      	beq.n	800b928 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b8ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b91c <tcp_receive+0xb20>)
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	f7fc f864 	bl	80079c4 <pbuf_cat>
 800b8fc:	e018      	b.n	800b930 <tcp_receive+0xb34>
 800b8fe:	bf00      	nop
 800b900:	200084b2 	.word	0x200084b2
 800b904:	200084a8 	.word	0x200084a8
 800b908:	20008488 	.word	0x20008488
 800b90c:	08014640 	.word	0x08014640
 800b910:	08014a20 	.word	0x08014a20
 800b914:	0801468c 	.word	0x0801468c
 800b918:	08014a5c 	.word	0x08014a5c
 800b91c:	200084b8 	.word	0x200084b8
 800b920:	200084b5 	.word	0x200084b5
 800b924:	08014a7c 	.word	0x08014a7c
            } else {
              recv_data = cseg->p;
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	4a70      	ldr	r2, [pc, #448]	@ (800baf0 <tcp_receive+0xcf4>)
 800b92e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	2200      	movs	r2, #0
 800b934:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	899b      	ldrh	r3, [r3, #12]
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fa fc20 	bl	8006184 <lwip_htons>
 800b944:	4603      	mov	r3, r0
 800b946:	b2db      	uxtb	r3, r3
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00d      	beq.n	800b96c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b950:	4b68      	ldr	r3, [pc, #416]	@ (800baf4 <tcp_receive+0xcf8>)
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	f043 0320 	orr.w	r3, r3, #32
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	4b66      	ldr	r3, [pc, #408]	@ (800baf4 <tcp_receive+0xcf8>)
 800b95c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	7d1b      	ldrb	r3, [r3, #20]
 800b962:	2b04      	cmp	r3, #4
 800b964:	d102      	bne.n	800b96c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2207      	movs	r2, #7
 800b96a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b974:	68b8      	ldr	r0, [r7, #8]
 800b976:	f7fd fb92 	bl	800909e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d008      	beq.n	800b994 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	685a      	ldr	r2, [r3, #4]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b98e:	429a      	cmp	r2, r3
 800b990:	f43f af43 	beq.w	800b81a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	8b5b      	ldrh	r3, [r3, #26]
 800b998:	f003 0301 	and.w	r3, r3, #1
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00e      	beq.n	800b9be <tcp_receive+0xbc2>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	8b5b      	ldrh	r3, [r3, #26]
 800b9a4:	f023 0301 	bic.w	r3, r3, #1
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	835a      	strh	r2, [r3, #26]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	8b5b      	ldrh	r3, [r3, #26]
 800b9b2:	f043 0302 	orr.w	r3, r3, #2
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b9bc:	e187      	b.n	800bcce <tcp_receive+0xed2>
        tcp_ack(pcb);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	8b5b      	ldrh	r3, [r3, #26]
 800b9c2:	f043 0301 	orr.w	r3, r3, #1
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b9cc:	e17f      	b.n	800bcce <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d106      	bne.n	800b9e4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b9d6:	4848      	ldr	r0, [pc, #288]	@ (800baf8 <tcp_receive+0xcfc>)
 800b9d8:	f7fd fb7a 	bl	80090d0 <tcp_seg_copy>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	675a      	str	r2, [r3, #116]	@ 0x74
 800b9e2:	e16c      	b.n	800bcbe <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9ee:	e156      	b.n	800bc9e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	685a      	ldr	r2, [r3, #4]
 800b9f6:	4b41      	ldr	r3, [pc, #260]	@ (800bafc <tcp_receive+0xd00>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d11d      	bne.n	800ba3a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b9fe:	4b3e      	ldr	r3, [pc, #248]	@ (800baf8 <tcp_receive+0xcfc>)
 800ba00:	891a      	ldrh	r2, [r3, #8]
 800ba02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba04:	891b      	ldrh	r3, [r3, #8]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	f240 814e 	bls.w	800bca8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba0c:	483a      	ldr	r0, [pc, #232]	@ (800baf8 <tcp_receive+0xcfc>)
 800ba0e:	f7fd fb5f 	bl	80090d0 <tcp_seg_copy>
 800ba12:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 8148 	beq.w	800bcac <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ba22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	601a      	str	r2, [r3, #0]
 800ba28:	e002      	b.n	800ba30 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ba30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba32:	6978      	ldr	r0, [r7, #20]
 800ba34:	f7ff f8de 	bl	800abf4 <tcp_oos_insert_segment>
                }
                break;
 800ba38:	e138      	b.n	800bcac <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ba3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d117      	bne.n	800ba70 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ba40:	4b2e      	ldr	r3, [pc, #184]	@ (800bafc <tcp_receive+0xd00>)
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	da57      	bge.n	800bb00 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba50:	4829      	ldr	r0, [pc, #164]	@ (800baf8 <tcp_receive+0xcfc>)
 800ba52:	f7fd fb3d 	bl	80090d0 <tcp_seg_copy>
 800ba56:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 8128 	beq.w	800bcb0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ba66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba68:	69b8      	ldr	r0, [r7, #24]
 800ba6a:	f7ff f8c3 	bl	800abf4 <tcp_oos_insert_segment>
                  }
                  break;
 800ba6e:	e11f      	b.n	800bcb0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ba70:	4b22      	ldr	r3, [pc, #136]	@ (800bafc <tcp_receive+0xd00>)
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	db3e      	blt.n	800bb00 <tcp_receive+0xd04>
 800ba82:	4b1e      	ldr	r3, [pc, #120]	@ (800bafc <tcp_receive+0xd00>)
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	3301      	adds	r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dc35      	bgt.n	800bb00 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba94:	4818      	ldr	r0, [pc, #96]	@ (800baf8 <tcp_receive+0xcfc>)
 800ba96:	f7fd fb1b 	bl	80090d0 <tcp_seg_copy>
 800ba9a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 8108 	beq.w	800bcb4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800baa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800baac:	8912      	ldrh	r2, [r2, #8]
 800baae:	441a      	add	r2, r3
 800bab0:	4b12      	ldr	r3, [pc, #72]	@ (800bafc <tcp_receive+0xd00>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dd12      	ble.n	800bae0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800baba:	4b10      	ldr	r3, [pc, #64]	@ (800bafc <tcp_receive+0xd00>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	b29a      	uxth	r2, r3
 800bac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	b29a      	uxth	r2, r3
 800bacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bace:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bad6:	891b      	ldrh	r3, [r3, #8]
 800bad8:	4619      	mov	r1, r3
 800bada:	4610      	mov	r0, r2
 800badc:	f7fb fd2a 	bl	8007534 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bae2:	69fa      	ldr	r2, [r7, #28]
 800bae4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bae6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bae8:	69f8      	ldr	r0, [r7, #28]
 800baea:	f7ff f883 	bl	800abf4 <tcp_oos_insert_segment>
                  }
                  break;
 800baee:	e0e1      	b.n	800bcb4 <tcp_receive+0xeb8>
 800baf0:	200084b8 	.word	0x200084b8
 800baf4:	200084b5 	.word	0x200084b5
 800baf8:	20008488 	.word	0x20008488
 800bafc:	200084a8 	.word	0x200084a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb02:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f040 80c5 	bne.w	800bc98 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bb0e:	4b7f      	ldr	r3, [pc, #508]	@ (800bd0c <tcp_receive+0xf10>)
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f340 80bc 	ble.w	800bc98 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bb20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	899b      	ldrh	r3, [r3, #12]
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fa fb2b 	bl	8006184 <lwip_htons>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	f003 0301 	and.w	r3, r3, #1
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f040 80be 	bne.w	800bcb8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bb3c:	4874      	ldr	r0, [pc, #464]	@ (800bd10 <tcp_receive+0xf14>)
 800bb3e:	f7fd fac7 	bl	80090d0 <tcp_seg_copy>
 800bb42:	4602      	mov	r2, r0
 800bb44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb46:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f000 80b5 	beq.w	800bcbc <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb5a:	8912      	ldrh	r2, [r2, #8]
 800bb5c:	441a      	add	r2, r3
 800bb5e:	4b6b      	ldr	r3, [pc, #428]	@ (800bd0c <tcp_receive+0xf10>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	dd12      	ble.n	800bb8e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bb68:	4b68      	ldr	r3, [pc, #416]	@ (800bd0c <tcp_receive+0xf10>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb80:	685a      	ldr	r2, [r3, #4]
 800bb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb84:	891b      	ldrh	r3, [r3, #8]
 800bb86:	4619      	mov	r1, r3
 800bb88:	4610      	mov	r0, r2
 800bb8a:	f7fb fcd3 	bl	8007534 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bb8e:	4b61      	ldr	r3, [pc, #388]	@ (800bd14 <tcp_receive+0xf18>)
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	461a      	mov	r2, r3
 800bb94:	4b5d      	ldr	r3, [pc, #372]	@ (800bd0c <tcp_receive+0xf10>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	441a      	add	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb9e:	6879      	ldr	r1, [r7, #4]
 800bba0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bba2:	440b      	add	r3, r1
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f340 8088 	ble.w	800bcbc <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	899b      	ldrh	r3, [r3, #12]
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fa fae4 	bl	8006184 <lwip_htons>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	f003 0301 	and.w	r3, r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d021      	beq.n	800bc0c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bbc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	899b      	ldrh	r3, [r3, #12]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	b21b      	sxth	r3, r3
 800bbd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bbd8:	b21c      	sxth	r4, r3
 800bbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	899b      	ldrh	r3, [r3, #12]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fa facd 	bl	8006184 <lwip_htons>
 800bbea:	4603      	mov	r3, r0
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fa fac5 	bl	8006184 <lwip_htons>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	b21b      	sxth	r3, r3
 800bbfe:	4323      	orrs	r3, r4
 800bc00:	b21a      	sxth	r2, r3
 800bc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	b292      	uxth	r2, r2
 800bc0a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc16:	4413      	add	r3, r2
 800bc18:	b299      	uxth	r1, r3
 800bc1a:	4b3c      	ldr	r3, [pc, #240]	@ (800bd0c <tcp_receive+0xf10>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	1a8a      	subs	r2, r1, r2
 800bc26:	b292      	uxth	r2, r2
 800bc28:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	685a      	ldr	r2, [r3, #4]
 800bc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	891b      	ldrh	r3, [r3, #8]
 800bc36:	4619      	mov	r1, r3
 800bc38:	4610      	mov	r0, r2
 800bc3a:	f7fb fc7b 	bl	8007534 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	891c      	ldrh	r4, [r3, #8]
 800bc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	899b      	ldrh	r3, [r3, #12]
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fa fa98 	bl	8006184 <lwip_htons>
 800bc54:	4603      	mov	r3, r0
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	f003 0303 	and.w	r3, r3, #3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d001      	beq.n	800bc64 <tcp_receive+0xe68>
 800bc60:	2301      	movs	r3, #1
 800bc62:	e000      	b.n	800bc66 <tcp_receive+0xe6a>
 800bc64:	2300      	movs	r3, #0
 800bc66:	4423      	add	r3, r4
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	4b2a      	ldr	r3, [pc, #168]	@ (800bd14 <tcp_receive+0xf18>)
 800bc6c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bc6e:	4b29      	ldr	r3, [pc, #164]	@ (800bd14 <tcp_receive+0xf18>)
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	4b25      	ldr	r3, [pc, #148]	@ (800bd0c <tcp_receive+0xf10>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	441a      	add	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc7e:	6879      	ldr	r1, [r7, #4]
 800bc80:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bc82:	440b      	add	r3, r1
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d019      	beq.n	800bcbc <tcp_receive+0xec0>
 800bc88:	4b23      	ldr	r3, [pc, #140]	@ (800bd18 <tcp_receive+0xf1c>)
 800bc8a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800bc8e:	4923      	ldr	r1, [pc, #140]	@ (800bd1c <tcp_receive+0xf20>)
 800bc90:	4823      	ldr	r0, [pc, #140]	@ (800bd20 <tcp_receive+0xf24>)
 800bc92:	f006 fa71 	bl	8012178 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bc96:	e011      	b.n	800bcbc <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f47f aea5 	bne.w	800b9f0 <tcp_receive+0xbf4>
 800bca6:	e00a      	b.n	800bcbe <tcp_receive+0xec2>
                break;
 800bca8:	bf00      	nop
 800bcaa:	e008      	b.n	800bcbe <tcp_receive+0xec2>
                break;
 800bcac:	bf00      	nop
 800bcae:	e006      	b.n	800bcbe <tcp_receive+0xec2>
                  break;
 800bcb0:	bf00      	nop
 800bcb2:	e004      	b.n	800bcbe <tcp_receive+0xec2>
                  break;
 800bcb4:	bf00      	nop
 800bcb6:	e002      	b.n	800bcbe <tcp_receive+0xec2>
                  break;
 800bcb8:	bf00      	nop
 800bcba:	e000      	b.n	800bcbe <tcp_receive+0xec2>
                break;
 800bcbc:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f001 fe88 	bl	800d9d4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bcc4:	e003      	b.n	800bcce <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f001 fe84 	bl	800d9d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bccc:	e01a      	b.n	800bd04 <tcp_receive+0xf08>
 800bcce:	e019      	b.n	800bd04 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bcd0:	4b0e      	ldr	r3, [pc, #56]	@ (800bd0c <tcp_receive+0xf10>)
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd8:	1ad3      	subs	r3, r2, r3
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	db0a      	blt.n	800bcf4 <tcp_receive+0xef8>
 800bcde:	4b0b      	ldr	r3, [pc, #44]	@ (800bd0c <tcp_receive+0xf10>)
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce6:	6879      	ldr	r1, [r7, #4]
 800bce8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bcea:	440b      	add	r3, r1
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	3301      	adds	r3, #1
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	dd07      	ble.n	800bd04 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	8b5b      	ldrh	r3, [r3, #26]
 800bcf8:	f043 0302 	orr.w	r3, r3, #2
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bd02:	e7ff      	b.n	800bd04 <tcp_receive+0xf08>
 800bd04:	bf00      	nop
 800bd06:	3750      	adds	r7, #80	@ 0x50
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bdb0      	pop	{r4, r5, r7, pc}
 800bd0c:	200084a8 	.word	0x200084a8
 800bd10:	20008488 	.word	0x20008488
 800bd14:	200084b2 	.word	0x200084b2
 800bd18:	08014640 	.word	0x08014640
 800bd1c:	080149e8 	.word	0x080149e8
 800bd20:	0801468c 	.word	0x0801468c

0800bd24 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bd2a:	4b15      	ldr	r3, [pc, #84]	@ (800bd80 <tcp_get_next_optbyte+0x5c>)
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	b291      	uxth	r1, r2
 800bd32:	4a13      	ldr	r2, [pc, #76]	@ (800bd80 <tcp_get_next_optbyte+0x5c>)
 800bd34:	8011      	strh	r1, [r2, #0]
 800bd36:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bd38:	4b12      	ldr	r3, [pc, #72]	@ (800bd84 <tcp_get_next_optbyte+0x60>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d004      	beq.n	800bd4a <tcp_get_next_optbyte+0x26>
 800bd40:	4b11      	ldr	r3, [pc, #68]	@ (800bd88 <tcp_get_next_optbyte+0x64>)
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	88fa      	ldrh	r2, [r7, #6]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d208      	bcs.n	800bd5c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bd4a:	4b10      	ldr	r3, [pc, #64]	@ (800bd8c <tcp_get_next_optbyte+0x68>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	3314      	adds	r3, #20
 800bd50:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bd52:	88fb      	ldrh	r3, [r7, #6]
 800bd54:	683a      	ldr	r2, [r7, #0]
 800bd56:	4413      	add	r3, r2
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	e00b      	b.n	800bd74 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bd5c:	88fb      	ldrh	r3, [r7, #6]
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	4b09      	ldr	r3, [pc, #36]	@ (800bd88 <tcp_get_next_optbyte+0x64>)
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bd6a:	4b06      	ldr	r3, [pc, #24]	@ (800bd84 <tcp_get_next_optbyte+0x60>)
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	797b      	ldrb	r3, [r7, #5]
 800bd70:	4413      	add	r3, r2
 800bd72:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	200084a4 	.word	0x200084a4
 800bd84:	200084a0 	.word	0x200084a0
 800bd88:	2000849e 	.word	0x2000849e
 800bd8c:	20008498 	.word	0x20008498

0800bd90 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d106      	bne.n	800bdac <tcp_parseopt+0x1c>
 800bd9e:	4b32      	ldr	r3, [pc, #200]	@ (800be68 <tcp_parseopt+0xd8>)
 800bda0:	f240 727d 	movw	r2, #1917	@ 0x77d
 800bda4:	4931      	ldr	r1, [pc, #196]	@ (800be6c <tcp_parseopt+0xdc>)
 800bda6:	4832      	ldr	r0, [pc, #200]	@ (800be70 <tcp_parseopt+0xe0>)
 800bda8:	f006 f9e6 	bl	8012178 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bdac:	4b31      	ldr	r3, [pc, #196]	@ (800be74 <tcp_parseopt+0xe4>)
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d056      	beq.n	800be62 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bdb4:	4b30      	ldr	r3, [pc, #192]	@ (800be78 <tcp_parseopt+0xe8>)
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	801a      	strh	r2, [r3, #0]
 800bdba:	e046      	b.n	800be4a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800bdbc:	f7ff ffb2 	bl	800bd24 <tcp_get_next_optbyte>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d006      	beq.n	800bdd8 <tcp_parseopt+0x48>
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	dc2a      	bgt.n	800be24 <tcp_parseopt+0x94>
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d042      	beq.n	800be58 <tcp_parseopt+0xc8>
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d038      	beq.n	800be48 <tcp_parseopt+0xb8>
 800bdd6:	e025      	b.n	800be24 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bdd8:	f7ff ffa4 	bl	800bd24 <tcp_get_next_optbyte>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b04      	cmp	r3, #4
 800bde0:	d13c      	bne.n	800be5c <tcp_parseopt+0xcc>
 800bde2:	4b25      	ldr	r3, [pc, #148]	@ (800be78 <tcp_parseopt+0xe8>)
 800bde4:	881b      	ldrh	r3, [r3, #0]
 800bde6:	3301      	adds	r3, #1
 800bde8:	4a22      	ldr	r2, [pc, #136]	@ (800be74 <tcp_parseopt+0xe4>)
 800bdea:	8812      	ldrh	r2, [r2, #0]
 800bdec:	4293      	cmp	r3, r2
 800bdee:	da35      	bge.n	800be5c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bdf0:	f7ff ff98 	bl	800bd24 <tcp_get_next_optbyte>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	021b      	lsls	r3, r3, #8
 800bdf8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bdfa:	f7ff ff93 	bl	800bd24 <tcp_get_next_optbyte>
 800bdfe:	4603      	mov	r3, r0
 800be00:	461a      	mov	r2, r3
 800be02:	89bb      	ldrh	r3, [r7, #12]
 800be04:	4313      	orrs	r3, r2
 800be06:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800be08:	89bb      	ldrh	r3, [r7, #12]
 800be0a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800be0e:	d804      	bhi.n	800be1a <tcp_parseopt+0x8a>
 800be10:	89bb      	ldrh	r3, [r7, #12]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <tcp_parseopt+0x8a>
 800be16:	89ba      	ldrh	r2, [r7, #12]
 800be18:	e001      	b.n	800be1e <tcp_parseopt+0x8e>
 800be1a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800be22:	e012      	b.n	800be4a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800be24:	f7ff ff7e 	bl	800bd24 <tcp_get_next_optbyte>
 800be28:	4603      	mov	r3, r0
 800be2a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800be2c:	7afb      	ldrb	r3, [r7, #11]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d916      	bls.n	800be60 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800be32:	7afb      	ldrb	r3, [r7, #11]
 800be34:	b29a      	uxth	r2, r3
 800be36:	4b10      	ldr	r3, [pc, #64]	@ (800be78 <tcp_parseopt+0xe8>)
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	4413      	add	r3, r2
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	3b02      	subs	r3, #2
 800be40:	b29a      	uxth	r2, r3
 800be42:	4b0d      	ldr	r3, [pc, #52]	@ (800be78 <tcp_parseopt+0xe8>)
 800be44:	801a      	strh	r2, [r3, #0]
 800be46:	e000      	b.n	800be4a <tcp_parseopt+0xba>
          break;
 800be48:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800be4a:	4b0b      	ldr	r3, [pc, #44]	@ (800be78 <tcp_parseopt+0xe8>)
 800be4c:	881a      	ldrh	r2, [r3, #0]
 800be4e:	4b09      	ldr	r3, [pc, #36]	@ (800be74 <tcp_parseopt+0xe4>)
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	429a      	cmp	r2, r3
 800be54:	d3b2      	bcc.n	800bdbc <tcp_parseopt+0x2c>
 800be56:	e004      	b.n	800be62 <tcp_parseopt+0xd2>
          return;
 800be58:	bf00      	nop
 800be5a:	e002      	b.n	800be62 <tcp_parseopt+0xd2>
            return;
 800be5c:	bf00      	nop
 800be5e:	e000      	b.n	800be62 <tcp_parseopt+0xd2>
            return;
 800be60:	bf00      	nop
      }
    }
  }
}
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	08014640 	.word	0x08014640
 800be6c:	08014aa4 	.word	0x08014aa4
 800be70:	0801468c 	.word	0x0801468c
 800be74:	2000849c 	.word	0x2000849c
 800be78:	200084a4 	.word	0x200084a4

0800be7c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800be7c:	b480      	push	{r7}
 800be7e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800be80:	4b05      	ldr	r3, [pc, #20]	@ (800be98 <tcp_trigger_input_pcb_close+0x1c>)
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	f043 0310 	orr.w	r3, r3, #16
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	4b03      	ldr	r3, [pc, #12]	@ (800be98 <tcp_trigger_input_pcb_close+0x1c>)
 800be8c:	701a      	strb	r2, [r3, #0]
}
 800be8e:	bf00      	nop
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	200084b5 	.word	0x200084b5

0800be9c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00a      	beq.n	800bec4 <tcp_route+0x28>
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	7a1b      	ldrb	r3, [r3, #8]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d006      	beq.n	800bec4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	7a1b      	ldrb	r3, [r3, #8]
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fb f960 	bl	8007180 <netif_get_by_index>
 800bec0:	4603      	mov	r3, r0
 800bec2:	e003      	b.n	800becc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f003 fad3 	bl	800f470 <ip4_route>
 800beca:	4603      	mov	r3, r0
  }
}
 800becc:	4618      	mov	r0, r3
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bed4:	b590      	push	{r4, r7, lr}
 800bed6:	b087      	sub	sp, #28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	603b      	str	r3, [r7, #0]
 800bee0:	4613      	mov	r3, r2
 800bee2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d105      	bne.n	800bef6 <tcp_create_segment+0x22>
 800beea:	4b43      	ldr	r3, [pc, #268]	@ (800bff8 <tcp_create_segment+0x124>)
 800beec:	22a3      	movs	r2, #163	@ 0xa3
 800beee:	4943      	ldr	r1, [pc, #268]	@ (800bffc <tcp_create_segment+0x128>)
 800bef0:	4843      	ldr	r0, [pc, #268]	@ (800c000 <tcp_create_segment+0x12c>)
 800bef2:	f006 f941 	bl	8012178 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d105      	bne.n	800bf08 <tcp_create_segment+0x34>
 800befc:	4b3e      	ldr	r3, [pc, #248]	@ (800bff8 <tcp_create_segment+0x124>)
 800befe:	22a4      	movs	r2, #164	@ 0xa4
 800bf00:	4940      	ldr	r1, [pc, #256]	@ (800c004 <tcp_create_segment+0x130>)
 800bf02:	483f      	ldr	r0, [pc, #252]	@ (800c000 <tcp_create_segment+0x12c>)
 800bf04:	f006 f938 	bl	8012178 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bf08:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	f003 0304 	and.w	r3, r3, #4
 800bf14:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bf16:	2003      	movs	r0, #3
 800bf18:	f7fa fdac 	bl	8006a74 <memp_malloc>
 800bf1c:	6138      	str	r0, [r7, #16]
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d104      	bne.n	800bf2e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bf24:	68b8      	ldr	r0, [r7, #8]
 800bf26:	f7fb fc8b 	bl	8007840 <pbuf_free>
    return NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	e060      	b.n	800bff0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bf34:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	68ba      	ldr	r2, [r7, #8]
 800bf40:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	891a      	ldrh	r2, [r3, #8]
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d205      	bcs.n	800bf5a <tcp_create_segment+0x86>
 800bf4e:	4b2a      	ldr	r3, [pc, #168]	@ (800bff8 <tcp_create_segment+0x124>)
 800bf50:	22b0      	movs	r2, #176	@ 0xb0
 800bf52:	492d      	ldr	r1, [pc, #180]	@ (800c008 <tcp_create_segment+0x134>)
 800bf54:	482a      	ldr	r0, [pc, #168]	@ (800c000 <tcp_create_segment+0x12c>)
 800bf56:	f006 f90f 	bl	8012178 <iprintf>
  seg->len = p->tot_len - optlen;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	891a      	ldrh	r2, [r3, #8]
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bf6a:	2114      	movs	r1, #20
 800bf6c:	68b8      	ldr	r0, [r7, #8]
 800bf6e:	f7fb fbd1 	bl	8007714 <pbuf_add_header>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d004      	beq.n	800bf82 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bf78:	6938      	ldr	r0, [r7, #16]
 800bf7a:	f7fd f890 	bl	800909e <tcp_seg_free>
    return NULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	e036      	b.n	800bff0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	685a      	ldr	r2, [r3, #4]
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	8ada      	ldrh	r2, [r3, #22]
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	68dc      	ldr	r4, [r3, #12]
 800bf94:	4610      	mov	r0, r2
 800bf96:	f7fa f8f5 	bl	8006184 <lwip_htons>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	8b1a      	ldrh	r2, [r3, #24]
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	68dc      	ldr	r4, [r3, #12]
 800bfa6:	4610      	mov	r0, r2
 800bfa8:	f7fa f8ec 	bl	8006184 <lwip_htons>
 800bfac:	4603      	mov	r3, r0
 800bfae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	68dc      	ldr	r4, [r3, #12]
 800bfb4:	6838      	ldr	r0, [r7, #0]
 800bfb6:	f7fa f8fb 	bl	80061b0 <lwip_htonl>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
 800bfc0:	089b      	lsrs	r3, r3, #2
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	3305      	adds	r3, #5
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	031b      	lsls	r3, r3, #12
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	79fb      	ldrb	r3, [r7, #7]
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	68dc      	ldr	r4, [r3, #12]
 800bfd8:	4610      	mov	r0, r2
 800bfda:	f7fa f8d3 	bl	8006184 <lwip_htons>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	749a      	strb	r2, [r3, #18]
 800bfea:	2200      	movs	r2, #0
 800bfec:	74da      	strb	r2, [r3, #19]
  return seg;
 800bfee:	693b      	ldr	r3, [r7, #16]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	371c      	adds	r7, #28
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd90      	pop	{r4, r7, pc}
 800bff8:	08014ac0 	.word	0x08014ac0
 800bffc:	08014af4 	.word	0x08014af4
 800c000:	08014b14 	.word	0x08014b14
 800c004:	08014b3c 	.word	0x08014b3c
 800c008:	08014b60 	.word	0x08014b60

0800c00c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af00      	add	r7, sp, #0
 800c012:	607b      	str	r3, [r7, #4]
 800c014:	4603      	mov	r3, r0
 800c016:	73fb      	strb	r3, [r7, #15]
 800c018:	460b      	mov	r3, r1
 800c01a:	81bb      	strh	r3, [r7, #12]
 800c01c:	4613      	mov	r3, r2
 800c01e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c020:	89bb      	ldrh	r3, [r7, #12]
 800c022:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d105      	bne.n	800c036 <tcp_pbuf_prealloc+0x2a>
 800c02a:	4b30      	ldr	r3, [pc, #192]	@ (800c0ec <tcp_pbuf_prealloc+0xe0>)
 800c02c:	22e8      	movs	r2, #232	@ 0xe8
 800c02e:	4930      	ldr	r1, [pc, #192]	@ (800c0f0 <tcp_pbuf_prealloc+0xe4>)
 800c030:	4830      	ldr	r0, [pc, #192]	@ (800c0f4 <tcp_pbuf_prealloc+0xe8>)
 800c032:	f006 f8a1 	bl	8012178 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c036:	6a3b      	ldr	r3, [r7, #32]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d105      	bne.n	800c048 <tcp_pbuf_prealloc+0x3c>
 800c03c:	4b2b      	ldr	r3, [pc, #172]	@ (800c0ec <tcp_pbuf_prealloc+0xe0>)
 800c03e:	22e9      	movs	r2, #233	@ 0xe9
 800c040:	492d      	ldr	r1, [pc, #180]	@ (800c0f8 <tcp_pbuf_prealloc+0xec>)
 800c042:	482c      	ldr	r0, [pc, #176]	@ (800c0f4 <tcp_pbuf_prealloc+0xe8>)
 800c044:	f006 f898 	bl	8012178 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c048:	89ba      	ldrh	r2, [r7, #12]
 800c04a:	897b      	ldrh	r3, [r7, #10]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d221      	bcs.n	800c094 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c050:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c054:	f003 0302 	and.w	r3, r3, #2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d111      	bne.n	800c080 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	8b5b      	ldrh	r3, [r3, #26]
 800c060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c064:	2b00      	cmp	r3, #0
 800c066:	d115      	bne.n	800c094 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c068:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d007      	beq.n	800c080 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c070:	6a3b      	ldr	r3, [r7, #32]
 800c072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800c074:	2b00      	cmp	r3, #0
 800c076:	d103      	bne.n	800c080 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d009      	beq.n	800c094 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c080:	89bb      	ldrh	r3, [r7, #12]
 800c082:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800c086:	f023 0203 	bic.w	r2, r3, #3
 800c08a:	897b      	ldrh	r3, [r7, #10]
 800c08c:	4293      	cmp	r3, r2
 800c08e:	bf28      	it	cs
 800c090:	4613      	movcs	r3, r2
 800c092:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c094:	8af9      	ldrh	r1, [r7, #22]
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fb f8eb 	bl	8007278 <pbuf_alloc>
 800c0a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d101      	bne.n	800c0ae <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	e019      	b.n	800c0e2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d006      	beq.n	800c0c4 <tcp_pbuf_prealloc+0xb8>
 800c0b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c0ec <tcp_pbuf_prealloc+0xe0>)
 800c0b8:	f240 120b 	movw	r2, #267	@ 0x10b
 800c0bc:	490f      	ldr	r1, [pc, #60]	@ (800c0fc <tcp_pbuf_prealloc+0xf0>)
 800c0be:	480d      	ldr	r0, [pc, #52]	@ (800c0f4 <tcp_pbuf_prealloc+0xe8>)
 800c0c0:	f006 f85a 	bl	8012178 <iprintf>
  *oversize = p->len - length;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	895a      	ldrh	r2, [r3, #10]
 800c0c8:	89bb      	ldrh	r3, [r7, #12]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	89ba      	ldrh	r2, [r7, #12]
 800c0d6:	811a      	strh	r2, [r3, #8]
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	891a      	ldrh	r2, [r3, #8]
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	815a      	strh	r2, [r3, #10]
  return p;
 800c0e0:	693b      	ldr	r3, [r7, #16]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3718      	adds	r7, #24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	08014ac0 	.word	0x08014ac0
 800c0f0:	08014b78 	.word	0x08014b78
 800c0f4:	08014b14 	.word	0x08014b14
 800c0f8:	08014b9c 	.word	0x08014b9c
 800c0fc:	08014bbc 	.word	0x08014bbc

0800c100 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	460b      	mov	r3, r1
 800c10a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d106      	bne.n	800c120 <tcp_write_checks+0x20>
 800c112:	4b33      	ldr	r3, [pc, #204]	@ (800c1e0 <tcp_write_checks+0xe0>)
 800c114:	f240 1233 	movw	r2, #307	@ 0x133
 800c118:	4932      	ldr	r1, [pc, #200]	@ (800c1e4 <tcp_write_checks+0xe4>)
 800c11a:	4833      	ldr	r0, [pc, #204]	@ (800c1e8 <tcp_write_checks+0xe8>)
 800c11c:	f006 f82c 	bl	8012178 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	7d1b      	ldrb	r3, [r3, #20]
 800c124:	2b04      	cmp	r3, #4
 800c126:	d00e      	beq.n	800c146 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c12c:	2b07      	cmp	r3, #7
 800c12e:	d00a      	beq.n	800c146 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c134:	2b02      	cmp	r3, #2
 800c136:	d006      	beq.n	800c146 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	d002      	beq.n	800c146 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c140:	f06f 030a 	mvn.w	r3, #10
 800c144:	e048      	b.n	800c1d8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c146:	887b      	ldrh	r3, [r7, #2]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <tcp_write_checks+0x50>
    return ERR_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	e043      	b.n	800c1d8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c156:	887a      	ldrh	r2, [r7, #2]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d909      	bls.n	800c170 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	8b5b      	ldrh	r3, [r3, #26]
 800c160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c164:	b29a      	uxth	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c16a:	f04f 33ff 	mov.w	r3, #4294967295
 800c16e:	e033      	b.n	800c1d8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c176:	2b08      	cmp	r3, #8
 800c178:	d909      	bls.n	800c18e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	8b5b      	ldrh	r3, [r3, #26]
 800c17e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c182:	b29a      	uxth	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c188:	f04f 33ff 	mov.w	r3, #4294967295
 800c18c:	e024      	b.n	800c1d8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00f      	beq.n	800c1b8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d11a      	bne.n	800c1d6 <tcp_write_checks+0xd6>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d116      	bne.n	800c1d6 <tcp_write_checks+0xd6>
 800c1a8:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e0 <tcp_write_checks+0xe0>)
 800c1aa:	f240 1255 	movw	r2, #341	@ 0x155
 800c1ae:	490f      	ldr	r1, [pc, #60]	@ (800c1ec <tcp_write_checks+0xec>)
 800c1b0:	480d      	ldr	r0, [pc, #52]	@ (800c1e8 <tcp_write_checks+0xe8>)
 800c1b2:	f005 ffe1 	bl	8012178 <iprintf>
 800c1b6:	e00e      	b.n	800c1d6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d103      	bne.n	800c1c8 <tcp_write_checks+0xc8>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d006      	beq.n	800c1d6 <tcp_write_checks+0xd6>
 800c1c8:	4b05      	ldr	r3, [pc, #20]	@ (800c1e0 <tcp_write_checks+0xe0>)
 800c1ca:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800c1ce:	4908      	ldr	r1, [pc, #32]	@ (800c1f0 <tcp_write_checks+0xf0>)
 800c1d0:	4805      	ldr	r0, [pc, #20]	@ (800c1e8 <tcp_write_checks+0xe8>)
 800c1d2:	f005 ffd1 	bl	8012178 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	08014ac0 	.word	0x08014ac0
 800c1e4:	08014bd0 	.word	0x08014bd0
 800c1e8:	08014b14 	.word	0x08014b14
 800c1ec:	08014bf0 	.word	0x08014bf0
 800c1f0:	08014c2c 	.word	0x08014c2c

0800c1f4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c1f4:	b590      	push	{r4, r7, lr}
 800c1f6:	b09b      	sub	sp, #108	@ 0x6c
 800c1f8:	af04      	add	r7, sp, #16
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	4611      	mov	r1, r2
 800c200:	461a      	mov	r2, r3
 800c202:	460b      	mov	r3, r1
 800c204:	80fb      	strh	r3, [r7, #6]
 800c206:	4613      	mov	r3, r2
 800c208:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c20a:	2300      	movs	r3, #0
 800c20c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c20e:	2300      	movs	r3, #0
 800c210:	653b      	str	r3, [r7, #80]	@ 0x50
 800c212:	2300      	movs	r3, #0
 800c214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c216:	2300      	movs	r3, #0
 800c218:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c21a:	2300      	movs	r3, #0
 800c21c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c21e:	2300      	movs	r3, #0
 800c220:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d109      	bne.n	800c250 <tcp_write+0x5c>
 800c23c:	4ba4      	ldr	r3, [pc, #656]	@ (800c4d0 <tcp_write+0x2dc>)
 800c23e:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800c242:	49a4      	ldr	r1, [pc, #656]	@ (800c4d4 <tcp_write+0x2e0>)
 800c244:	48a4      	ldr	r0, [pc, #656]	@ (800c4d8 <tcp_write+0x2e4>)
 800c246:	f005 ff97 	bl	8012178 <iprintf>
 800c24a:	f06f 030f 	mvn.w	r3, #15
 800c24e:	e32a      	b.n	800c8a6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c256:	085b      	lsrs	r3, r3, #1
 800c258:	b29a      	uxth	r2, r3
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c25e:	4293      	cmp	r3, r2
 800c260:	bf28      	it	cs
 800c262:	4613      	movcs	r3, r2
 800c264:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <tcp_write+0x7e>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c270:	e000      	b.n	800c274 <tcp_write+0x80>
 800c272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c274:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d109      	bne.n	800c290 <tcp_write+0x9c>
 800c27c:	4b94      	ldr	r3, [pc, #592]	@ (800c4d0 <tcp_write+0x2dc>)
 800c27e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800c282:	4996      	ldr	r1, [pc, #600]	@ (800c4dc <tcp_write+0x2e8>)
 800c284:	4894      	ldr	r0, [pc, #592]	@ (800c4d8 <tcp_write+0x2e4>)
 800c286:	f005 ff77 	bl	8012178 <iprintf>
 800c28a:	f06f 030f 	mvn.w	r3, #15
 800c28e:	e30a      	b.n	800c8a6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c290:	88fb      	ldrh	r3, [r7, #6]
 800c292:	4619      	mov	r1, r3
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f7ff ff33 	bl	800c100 <tcp_write_checks>
 800c29a:	4603      	mov	r3, r0
 800c29c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800c2a0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d002      	beq.n	800c2ae <tcp_write+0xba>
    return err;
 800c2a8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c2ac:	e2fb      	b.n	800c8a6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c2b4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 80f6 	beq.w	800c4b4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2cc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2ce:	e002      	b.n	800c2d6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c2d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c2d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1f8      	bne.n	800c2d0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c2de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2e0:	7a9b      	ldrb	r3, [r3, #10]
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	f003 0304 	and.w	r3, r3, #4
 800c2ea:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c2ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c2ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2f0:	891b      	ldrh	r3, [r3, #8]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	8c3b      	ldrh	r3, [r7, #32]
 800c2f6:	440b      	add	r3, r1
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	da06      	bge.n	800c30a <tcp_write+0x116>
 800c2fc:	4b74      	ldr	r3, [pc, #464]	@ (800c4d0 <tcp_write+0x2dc>)
 800c2fe:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c302:	4977      	ldr	r1, [pc, #476]	@ (800c4e0 <tcp_write+0x2ec>)
 800c304:	4874      	ldr	r0, [pc, #464]	@ (800c4d8 <tcp_write+0x2e4>)
 800c306:	f005 ff37 	bl	8012178 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c30a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c30c:	891a      	ldrh	r2, [r3, #8]
 800c30e:	8c3b      	ldrh	r3, [r7, #32]
 800c310:	4413      	add	r3, r2
 800c312:	b29b      	uxth	r3, r3
 800c314:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c320:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c322:	8a7b      	ldrh	r3, [r7, #18]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d026      	beq.n	800c376 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c328:	8a7b      	ldrh	r3, [r7, #18]
 800c32a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d206      	bcs.n	800c33e <tcp_write+0x14a>
 800c330:	4b67      	ldr	r3, [pc, #412]	@ (800c4d0 <tcp_write+0x2dc>)
 800c332:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800c336:	496b      	ldr	r1, [pc, #428]	@ (800c4e4 <tcp_write+0x2f0>)
 800c338:	4867      	ldr	r0, [pc, #412]	@ (800c4d8 <tcp_write+0x2e4>)
 800c33a:	f005 ff1d 	bl	8012178 <iprintf>
      seg = last_unsent;
 800c33e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c340:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c342:	8a7b      	ldrh	r3, [r7, #18]
 800c344:	88fa      	ldrh	r2, [r7, #6]
 800c346:	4293      	cmp	r3, r2
 800c348:	bf28      	it	cs
 800c34a:	4613      	movcs	r3, r2
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c350:	4293      	cmp	r3, r2
 800c352:	bf28      	it	cs
 800c354:	4613      	movcs	r3, r2
 800c356:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800c358:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c35c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c35e:	4413      	add	r3, r2
 800c360:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800c364:	8a7a      	ldrh	r2, [r7, #18]
 800c366:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c36e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c370:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c376:	8a7b      	ldrh	r3, [r7, #18]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00b      	beq.n	800c394 <tcp_write+0x1a0>
 800c37c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c380:	88fb      	ldrh	r3, [r7, #6]
 800c382:	429a      	cmp	r2, r3
 800c384:	d006      	beq.n	800c394 <tcp_write+0x1a0>
 800c386:	4b52      	ldr	r3, [pc, #328]	@ (800c4d0 <tcp_write+0x2dc>)
 800c388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c38c:	4956      	ldr	r1, [pc, #344]	@ (800c4e8 <tcp_write+0x2f4>)
 800c38e:	4852      	ldr	r0, [pc, #328]	@ (800c4d8 <tcp_write+0x2e4>)
 800c390:	f005 fef2 	bl	8012178 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c394:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c398:	88fb      	ldrh	r3, [r7, #6]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	f080 8167 	bcs.w	800c66e <tcp_write+0x47a>
 800c3a0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f000 8163 	beq.w	800c66e <tcp_write+0x47a>
 800c3a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3aa:	891b      	ldrh	r3, [r3, #8]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f000 815e 	beq.w	800c66e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c3b2:	88fa      	ldrh	r2, [r7, #6]
 800c3b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c3b8:	1ad2      	subs	r2, r2, r3
 800c3ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	bfa8      	it	ge
 800c3c0:	4613      	movge	r3, r2
 800c3c2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c3c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3c6:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c3c8:	797b      	ldrb	r3, [r7, #5]
 800c3ca:	f003 0301 	and.w	r3, r3, #1
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d027      	beq.n	800c422 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c3d2:	f107 0012 	add.w	r0, r7, #18
 800c3d6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c3d8:	8bf9      	ldrh	r1, [r7, #30]
 800c3da:	2301      	movs	r3, #1
 800c3dc:	9302      	str	r3, [sp, #8]
 800c3de:	797b      	ldrb	r3, [r7, #5]
 800c3e0:	9301      	str	r3, [sp, #4]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	f7ff fe0f 	bl	800c00c <tcp_pbuf_prealloc>
 800c3ee:	6578      	str	r0, [r7, #84]	@ 0x54
 800c3f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 8225 	beq.w	800c842 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c3f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3fa:	6858      	ldr	r0, [r3, #4]
 800c3fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	4413      	add	r3, r2
 800c404:	8bfa      	ldrh	r2, [r7, #30]
 800c406:	4619      	mov	r1, r3
 800c408:	f006 f80d 	bl	8012426 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c40c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c40e:	f7fb fa9f 	bl	8007950 <pbuf_clen>
 800c412:	4603      	mov	r3, r0
 800c414:	461a      	mov	r2, r3
 800c416:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c41a:	4413      	add	r3, r2
 800c41c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c420:	e041      	b.n	800c4a6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	637b      	str	r3, [r7, #52]	@ 0x34
 800c428:	e002      	b.n	800c430 <tcp_write+0x23c>
 800c42a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1f8      	bne.n	800c42a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c43a:	7b1b      	ldrb	r3, [r3, #12]
 800c43c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d115      	bne.n	800c470 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c44a:	8952      	ldrh	r2, [r2, #10]
 800c44c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	429a      	cmp	r2, r3
 800c452:	d10d      	bne.n	800c470 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c454:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d006      	beq.n	800c46a <tcp_write+0x276>
 800c45c:	4b1c      	ldr	r3, [pc, #112]	@ (800c4d0 <tcp_write+0x2dc>)
 800c45e:	f240 2231 	movw	r2, #561	@ 0x231
 800c462:	4922      	ldr	r1, [pc, #136]	@ (800c4ec <tcp_write+0x2f8>)
 800c464:	481c      	ldr	r0, [pc, #112]	@ (800c4d8 <tcp_write+0x2e4>)
 800c466:	f005 fe87 	bl	8012178 <iprintf>
          extendlen = seglen;
 800c46a:	8bfb      	ldrh	r3, [r7, #30]
 800c46c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c46e:	e01a      	b.n	800c4a6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c470:	8bfb      	ldrh	r3, [r7, #30]
 800c472:	2201      	movs	r2, #1
 800c474:	4619      	mov	r1, r3
 800c476:	2000      	movs	r0, #0
 800c478:	f7fa fefe 	bl	8007278 <pbuf_alloc>
 800c47c:	6578      	str	r0, [r7, #84]	@ 0x54
 800c47e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 81e0 	beq.w	800c846 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c486:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	441a      	add	r2, r3
 800c48e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c490:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c492:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c494:	f7fb fa5c 	bl	8007950 <pbuf_clen>
 800c498:	4603      	mov	r3, r0
 800c49a:	461a      	mov	r2, r3
 800c49c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c4a0:	4413      	add	r3, r2
 800c4a2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c4a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c4aa:	8bfb      	ldrh	r3, [r7, #30]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c4b2:	e0dc      	b.n	800c66e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 80d7 	beq.w	800c66e <tcp_write+0x47a>
 800c4c0:	4b03      	ldr	r3, [pc, #12]	@ (800c4d0 <tcp_write+0x2dc>)
 800c4c2:	f240 224a 	movw	r2, #586	@ 0x24a
 800c4c6:	490a      	ldr	r1, [pc, #40]	@ (800c4f0 <tcp_write+0x2fc>)
 800c4c8:	4803      	ldr	r0, [pc, #12]	@ (800c4d8 <tcp_write+0x2e4>)
 800c4ca:	f005 fe55 	bl	8012178 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c4ce:	e0ce      	b.n	800c66e <tcp_write+0x47a>
 800c4d0:	08014ac0 	.word	0x08014ac0
 800c4d4:	08014c60 	.word	0x08014c60
 800c4d8:	08014b14 	.word	0x08014b14
 800c4dc:	08014c78 	.word	0x08014c78
 800c4e0:	08014cac 	.word	0x08014cac
 800c4e4:	08014cc4 	.word	0x08014cc4
 800c4e8:	08014ce4 	.word	0x08014ce4
 800c4ec:	08014d04 	.word	0x08014d04
 800c4f0:	08014d30 	.word	0x08014d30
    struct pbuf *p;
    u16_t left = len - pos;
 800c4f4:	88fa      	ldrh	r2, [r7, #6]
 800c4f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c4fe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c502:	b29b      	uxth	r3, r3
 800c504:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c50a:	8b7a      	ldrh	r2, [r7, #26]
 800c50c:	8bbb      	ldrh	r3, [r7, #28]
 800c50e:	4293      	cmp	r3, r2
 800c510:	bf28      	it	cs
 800c512:	4613      	movcs	r3, r2
 800c514:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c516:	797b      	ldrb	r3, [r7, #5]
 800c518:	f003 0301 	and.w	r3, r3, #1
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d036      	beq.n	800c58e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c520:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c524:	b29a      	uxth	r2, r3
 800c526:	8b3b      	ldrh	r3, [r7, #24]
 800c528:	4413      	add	r3, r2
 800c52a:	b299      	uxth	r1, r3
 800c52c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c52e:	2b00      	cmp	r3, #0
 800c530:	bf0c      	ite	eq
 800c532:	2301      	moveq	r3, #1
 800c534:	2300      	movne	r3, #0
 800c536:	b2db      	uxtb	r3, r3
 800c538:	f107 0012 	add.w	r0, r7, #18
 800c53c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c53e:	9302      	str	r3, [sp, #8]
 800c540:	797b      	ldrb	r3, [r7, #5]
 800c542:	9301      	str	r3, [sp, #4]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	4603      	mov	r3, r0
 800c54a:	2036      	movs	r0, #54	@ 0x36
 800c54c:	f7ff fd5e 	bl	800c00c <tcp_pbuf_prealloc>
 800c550:	6338      	str	r0, [r7, #48]	@ 0x30
 800c552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 8178 	beq.w	800c84a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55c:	895b      	ldrh	r3, [r3, #10]
 800c55e:	8b3a      	ldrh	r2, [r7, #24]
 800c560:	429a      	cmp	r2, r3
 800c562:	d906      	bls.n	800c572 <tcp_write+0x37e>
 800c564:	4b8c      	ldr	r3, [pc, #560]	@ (800c798 <tcp_write+0x5a4>)
 800c566:	f240 2266 	movw	r2, #614	@ 0x266
 800c56a:	498c      	ldr	r1, [pc, #560]	@ (800c79c <tcp_write+0x5a8>)
 800c56c:	488c      	ldr	r0, [pc, #560]	@ (800c7a0 <tcp_write+0x5ac>)
 800c56e:	f005 fe03 	bl	8012178 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c574:	685a      	ldr	r2, [r3, #4]
 800c576:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c57a:	18d0      	adds	r0, r2, r3
 800c57c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	4413      	add	r3, r2
 800c584:	8b3a      	ldrh	r2, [r7, #24]
 800c586:	4619      	mov	r1, r3
 800c588:	f005 ff4d 	bl	8012426 <memcpy>
 800c58c:	e02f      	b.n	800c5ee <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c58e:	8a7b      	ldrh	r3, [r7, #18]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d006      	beq.n	800c5a2 <tcp_write+0x3ae>
 800c594:	4b80      	ldr	r3, [pc, #512]	@ (800c798 <tcp_write+0x5a4>)
 800c596:	f240 2271 	movw	r2, #625	@ 0x271
 800c59a:	4982      	ldr	r1, [pc, #520]	@ (800c7a4 <tcp_write+0x5b0>)
 800c59c:	4880      	ldr	r0, [pc, #512]	@ (800c7a0 <tcp_write+0x5ac>)
 800c59e:	f005 fdeb 	bl	8012178 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c5a2:	8b3b      	ldrh	r3, [r7, #24]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	2036      	movs	r0, #54	@ 0x36
 800c5aa:	f7fa fe65 	bl	8007278 <pbuf_alloc>
 800c5ae:	6178      	str	r0, [r7, #20]
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 814b 	beq.w	800c84e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c5b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	441a      	add	r2, r3
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c5c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	2036      	movs	r0, #54	@ 0x36
 800c5d2:	f7fa fe51 	bl	8007278 <pbuf_alloc>
 800c5d6:	6338      	str	r0, [r7, #48]	@ 0x30
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d103      	bne.n	800c5e6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c5de:	6978      	ldr	r0, [r7, #20]
 800c5e0:	f7fb f92e 	bl	8007840 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c5e4:	e136      	b.n	800c854 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c5e6:	6979      	ldr	r1, [r7, #20]
 800c5e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5ea:	f7fb f9eb 	bl	80079c4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c5ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5f0:	f7fb f9ae 	bl	8007950 <pbuf_clen>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c5fc:	4413      	add	r3, r2
 800c5fe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c602:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c606:	2b09      	cmp	r3, #9
 800c608:	d903      	bls.n	800c612 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c60a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c60c:	f7fb f918 	bl	8007840 <pbuf_free>
      goto memerr;
 800c610:	e120      	b.n	800c854 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c616:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c61a:	441a      	add	r2, r3
 800c61c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c620:	9300      	str	r3, [sp, #0]
 800c622:	4613      	mov	r3, r2
 800c624:	2200      	movs	r2, #0
 800c626:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f7ff fc53 	bl	800bed4 <tcp_create_segment>
 800c62e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 810d 	beq.w	800c852 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d102      	bne.n	800c644 <tcp_write+0x450>
      queue = seg;
 800c63e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c640:	647b      	str	r3, [r7, #68]	@ 0x44
 800c642:	e00c      	b.n	800c65e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c646:	2b00      	cmp	r3, #0
 800c648:	d106      	bne.n	800c658 <tcp_write+0x464>
 800c64a:	4b53      	ldr	r3, [pc, #332]	@ (800c798 <tcp_write+0x5a4>)
 800c64c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c650:	4955      	ldr	r1, [pc, #340]	@ (800c7a8 <tcp_write+0x5b4>)
 800c652:	4853      	ldr	r0, [pc, #332]	@ (800c7a0 <tcp_write+0x5ac>)
 800c654:	f005 fd90 	bl	8012178 <iprintf>
      prev_seg->next = seg;
 800c658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c65a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c65c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c65e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c660:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c662:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c666:	8b3b      	ldrh	r3, [r7, #24]
 800c668:	4413      	add	r3, r2
 800c66a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800c66e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c672:	88fb      	ldrh	r3, [r7, #6]
 800c674:	429a      	cmp	r2, r3
 800c676:	f4ff af3d 	bcc.w	800c4f4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c67a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d02c      	beq.n	800c6da <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c686:	e01e      	b.n	800c6c6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c68a:	891a      	ldrh	r2, [r3, #8]
 800c68c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c68e:	4413      	add	r3, r2
 800c690:	b29a      	uxth	r2, r3
 800c692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c694:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d110      	bne.n	800c6c0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6a4:	8952      	ldrh	r2, [r2, #10]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c6aa:	68b9      	ldr	r1, [r7, #8]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f005 feba 	bl	8012426 <memcpy>
        p->len += oversize_used;
 800c6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b4:	895a      	ldrh	r2, [r3, #10]
 800c6b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c6b8:	4413      	add	r3, r2
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6be:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1dd      	bne.n	800c688 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c6cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6ce:	891a      	ldrh	r2, [r3, #8]
 800c6d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c6d2:	4413      	add	r3, r2
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6d8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c6da:	8a7a      	ldrh	r2, [r7, #18]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c6e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d018      	beq.n	800c71a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c6e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d106      	bne.n	800c6fc <tcp_write+0x508>
 800c6ee:	4b2a      	ldr	r3, [pc, #168]	@ (800c798 <tcp_write+0x5a4>)
 800c6f0:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800c6f4:	492d      	ldr	r1, [pc, #180]	@ (800c7ac <tcp_write+0x5b8>)
 800c6f6:	482a      	ldr	r0, [pc, #168]	@ (800c7a0 <tcp_write+0x5ac>)
 800c6f8:	f005 fd3e 	bl	8012178 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c6fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c702:	4618      	mov	r0, r3
 800c704:	f7fb f95e 	bl	80079c4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c70a:	891a      	ldrh	r2, [r3, #8]
 800c70c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c70e:	891b      	ldrh	r3, [r3, #8]
 800c710:	4413      	add	r3, r2
 800c712:	b29a      	uxth	r2, r3
 800c714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c716:	811a      	strh	r2, [r3, #8]
 800c718:	e037      	b.n	800c78a <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c71a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d034      	beq.n	800c78a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c722:	2b00      	cmp	r3, #0
 800c724:	d003      	beq.n	800c72e <tcp_write+0x53a>
 800c726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d106      	bne.n	800c73c <tcp_write+0x548>
 800c72e:	4b1a      	ldr	r3, [pc, #104]	@ (800c798 <tcp_write+0x5a4>)
 800c730:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800c734:	491e      	ldr	r1, [pc, #120]	@ (800c7b0 <tcp_write+0x5bc>)
 800c736:	481a      	ldr	r0, [pc, #104]	@ (800c7a0 <tcp_write+0x5ac>)
 800c738:	f005 fd1e 	bl	8012178 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c73c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c742:	e009      	b.n	800c758 <tcp_write+0x564>
      p->tot_len += extendlen;
 800c744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c746:	891a      	ldrh	r2, [r3, #8]
 800c748:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c74a:	4413      	add	r3, r2
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c750:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1f1      	bne.n	800c744 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c762:	891a      	ldrh	r2, [r3, #8]
 800c764:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c766:	4413      	add	r3, r2
 800c768:	b29a      	uxth	r2, r3
 800c76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c770:	895a      	ldrh	r2, [r3, #10]
 800c772:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c774:	4413      	add	r3, r2
 800c776:	b29a      	uxth	r2, r3
 800c778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c77a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c77c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c77e:	891a      	ldrh	r2, [r3, #8]
 800c780:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c782:	4413      	add	r3, r2
 800c784:	b29a      	uxth	r2, r3
 800c786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c788:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c78a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d111      	bne.n	800c7b4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c794:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c796:	e010      	b.n	800c7ba <tcp_write+0x5c6>
 800c798:	08014ac0 	.word	0x08014ac0
 800c79c:	08014d60 	.word	0x08014d60
 800c7a0:	08014b14 	.word	0x08014b14
 800c7a4:	08014da0 	.word	0x08014da0
 800c7a8:	08014db0 	.word	0x08014db0
 800c7ac:	08014dc4 	.word	0x08014dc4
 800c7b0:	08014dfc 	.word	0x08014dfc
  } else {
    last_unsent->next = queue;
 800c7b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7b8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c7be:	88fb      	ldrh	r3, [r7, #6]
 800c7c0:	441a      	add	r2, r3
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c7cc:	88fb      	ldrh	r3, [r7, #6]
 800c7ce:	1ad3      	subs	r3, r2, r3
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c7de:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00e      	beq.n	800c80a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10a      	bne.n	800c80a <tcp_write+0x616>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d106      	bne.n	800c80a <tcp_write+0x616>
 800c7fc:	4b2c      	ldr	r3, [pc, #176]	@ (800c8b0 <tcp_write+0x6bc>)
 800c7fe:	f240 3212 	movw	r2, #786	@ 0x312
 800c802:	492c      	ldr	r1, [pc, #176]	@ (800c8b4 <tcp_write+0x6c0>)
 800c804:	482c      	ldr	r0, [pc, #176]	@ (800c8b8 <tcp_write+0x6c4>)
 800c806:	f005 fcb7 	bl	8012178 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c80a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d016      	beq.n	800c83e <tcp_write+0x64a>
 800c810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d012      	beq.n	800c83e <tcp_write+0x64a>
 800c818:	797b      	ldrb	r3, [r7, #5]
 800c81a:	f003 0302 	and.w	r3, r3, #2
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10d      	bne.n	800c83e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	899b      	ldrh	r3, [r3, #12]
 800c828:	b29c      	uxth	r4, r3
 800c82a:	2008      	movs	r0, #8
 800c82c:	f7f9 fcaa 	bl	8006184 <lwip_htons>
 800c830:	4603      	mov	r3, r0
 800c832:	461a      	mov	r2, r3
 800c834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c836:	68db      	ldr	r3, [r3, #12]
 800c838:	4322      	orrs	r2, r4
 800c83a:	b292      	uxth	r2, r2
 800c83c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	e031      	b.n	800c8a6 <tcp_write+0x6b2>
          goto memerr;
 800c842:	bf00      	nop
 800c844:	e006      	b.n	800c854 <tcp_write+0x660>
            goto memerr;
 800c846:	bf00      	nop
 800c848:	e004      	b.n	800c854 <tcp_write+0x660>
        goto memerr;
 800c84a:	bf00      	nop
 800c84c:	e002      	b.n	800c854 <tcp_write+0x660>
        goto memerr;
 800c84e:	bf00      	nop
 800c850:	e000      	b.n	800c854 <tcp_write+0x660>
      goto memerr;
 800c852:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	8b5b      	ldrh	r3, [r3, #26]
 800c858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c864:	2b00      	cmp	r3, #0
 800c866:	d002      	beq.n	800c86e <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c868:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c86a:	f7fa ffe9 	bl	8007840 <pbuf_free>
  }
  if (queue != NULL) {
 800c86e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c870:	2b00      	cmp	r3, #0
 800c872:	d002      	beq.n	800c87a <tcp_write+0x686>
    tcp_segs_free(queue);
 800c874:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c876:	f7fc fbfd 	bl	8009074 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00e      	beq.n	800c8a2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10a      	bne.n	800c8a2 <tcp_write+0x6ae>
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c890:	2b00      	cmp	r3, #0
 800c892:	d106      	bne.n	800c8a2 <tcp_write+0x6ae>
 800c894:	4b06      	ldr	r3, [pc, #24]	@ (800c8b0 <tcp_write+0x6bc>)
 800c896:	f240 3227 	movw	r2, #807	@ 0x327
 800c89a:	4906      	ldr	r1, [pc, #24]	@ (800c8b4 <tcp_write+0x6c0>)
 800c89c:	4806      	ldr	r0, [pc, #24]	@ (800c8b8 <tcp_write+0x6c4>)
 800c89e:	f005 fc6b 	bl	8012178 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c8a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	375c      	adds	r7, #92	@ 0x5c
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd90      	pop	{r4, r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	08014ac0 	.word	0x08014ac0
 800c8b4:	08014e34 	.word	0x08014e34
 800c8b8:	08014b14 	.word	0x08014b14

0800c8bc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c8bc:	b590      	push	{r4, r7, lr}
 800c8be:	b08b      	sub	sp, #44	@ 0x2c
 800c8c0:	af02      	add	r7, sp, #8
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	61fb      	str	r3, [r7, #28]
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <tcp_split_unsent_seg+0x2c>
 800c8da:	4b95      	ldr	r3, [pc, #596]	@ (800cb30 <tcp_split_unsent_seg+0x274>)
 800c8dc:	f240 324b 	movw	r2, #843	@ 0x34b
 800c8e0:	4994      	ldr	r1, [pc, #592]	@ (800cb34 <tcp_split_unsent_seg+0x278>)
 800c8e2:	4895      	ldr	r0, [pc, #596]	@ (800cb38 <tcp_split_unsent_seg+0x27c>)
 800c8e4:	f005 fc48 	bl	8012178 <iprintf>

  useg = pcb->unsent;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d102      	bne.n	800c8fa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f8:	e116      	b.n	800cb28 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c8fa:	887b      	ldrh	r3, [r7, #2]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d109      	bne.n	800c914 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c900:	4b8b      	ldr	r3, [pc, #556]	@ (800cb30 <tcp_split_unsent_seg+0x274>)
 800c902:	f240 3253 	movw	r2, #851	@ 0x353
 800c906:	498d      	ldr	r1, [pc, #564]	@ (800cb3c <tcp_split_unsent_seg+0x280>)
 800c908:	488b      	ldr	r0, [pc, #556]	@ (800cb38 <tcp_split_unsent_seg+0x27c>)
 800c90a:	f005 fc35 	bl	8012178 <iprintf>
    return ERR_VAL;
 800c90e:	f06f 0305 	mvn.w	r3, #5
 800c912:	e109      	b.n	800cb28 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	891b      	ldrh	r3, [r3, #8]
 800c918:	887a      	ldrh	r2, [r7, #2]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d301      	bcc.n	800c922 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	e102      	b.n	800cb28 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c926:	887a      	ldrh	r2, [r7, #2]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d906      	bls.n	800c93a <tcp_split_unsent_seg+0x7e>
 800c92c:	4b80      	ldr	r3, [pc, #512]	@ (800cb30 <tcp_split_unsent_seg+0x274>)
 800c92e:	f240 325b 	movw	r2, #859	@ 0x35b
 800c932:	4983      	ldr	r1, [pc, #524]	@ (800cb40 <tcp_split_unsent_seg+0x284>)
 800c934:	4880      	ldr	r0, [pc, #512]	@ (800cb38 <tcp_split_unsent_seg+0x27c>)
 800c936:	f005 fc1f 	bl	8012178 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	891b      	ldrh	r3, [r3, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d106      	bne.n	800c950 <tcp_split_unsent_seg+0x94>
 800c942:	4b7b      	ldr	r3, [pc, #492]	@ (800cb30 <tcp_split_unsent_seg+0x274>)
 800c944:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c948:	497e      	ldr	r1, [pc, #504]	@ (800cb44 <tcp_split_unsent_seg+0x288>)
 800c94a:	487b      	ldr	r0, [pc, #492]	@ (800cb38 <tcp_split_unsent_seg+0x27c>)
 800c94c:	f005 fc14 	bl	8012178 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	7a9b      	ldrb	r3, [r3, #10]
 800c954:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	f003 0304 	and.w	r3, r3, #4
 800c960:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	891a      	ldrh	r2, [r3, #8]
 800c966:	887b      	ldrh	r3, [r7, #2]
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c96c:	7bbb      	ldrb	r3, [r7, #14]
 800c96e:	b29a      	uxth	r2, r3
 800c970:	89bb      	ldrh	r3, [r7, #12]
 800c972:	4413      	add	r3, r2
 800c974:	b29b      	uxth	r3, r3
 800c976:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c97a:	4619      	mov	r1, r3
 800c97c:	2036      	movs	r0, #54	@ 0x36
 800c97e:	f7fa fc7b 	bl	8007278 <pbuf_alloc>
 800c982:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	2b00      	cmp	r3, #0
 800c988:	f000 80b7 	beq.w	800cafa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	891a      	ldrh	r2, [r3, #8]
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	891b      	ldrh	r3, [r3, #8]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	b29a      	uxth	r2, r3
 800c99a:	887b      	ldrh	r3, [r7, #2]
 800c99c:	4413      	add	r3, r2
 800c99e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	6858      	ldr	r0, [r3, #4]
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	7bbb      	ldrb	r3, [r7, #14]
 800c9aa:	18d1      	adds	r1, r2, r3
 800c9ac:	897b      	ldrh	r3, [r7, #10]
 800c9ae:	89ba      	ldrh	r2, [r7, #12]
 800c9b0:	f7fb f930 	bl	8007c14 <pbuf_copy_partial>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	89bb      	ldrh	r3, [r7, #12]
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	f040 809f 	bne.w	800cafe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	899b      	ldrh	r3, [r3, #12]
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7f9 fbdb 	bl	8006184 <lwip_htons>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9d6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c9d8:	2300      	movs	r3, #0
 800c9da:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c9dc:	7efb      	ldrb	r3, [r7, #27]
 800c9de:	f003 0308 	and.w	r3, r3, #8
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d007      	beq.n	800c9f6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c9e6:	7efb      	ldrb	r3, [r7, #27]
 800c9e8:	f023 0308 	bic.w	r3, r3, #8
 800c9ec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c9ee:	7ebb      	ldrb	r3, [r7, #26]
 800c9f0:	f043 0308 	orr.w	r3, r3, #8
 800c9f4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c9f6:	7efb      	ldrb	r3, [r7, #27]
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d007      	beq.n	800ca10 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ca00:	7efb      	ldrb	r3, [r7, #27]
 800ca02:	f023 0301 	bic.w	r3, r3, #1
 800ca06:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ca08:	7ebb      	ldrb	r3, [r7, #26]
 800ca0a:	f043 0301 	orr.w	r3, r3, #1
 800ca0e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7f9 fbca 	bl	80061b0 <lwip_htonl>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	887b      	ldrh	r3, [r7, #2]
 800ca20:	18d1      	adds	r1, r2, r3
 800ca22:	7eba      	ldrb	r2, [r7, #26]
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	6939      	ldr	r1, [r7, #16]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7ff fa51 	bl	800bed4 <tcp_create_segment>
 800ca32:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d063      	beq.n	800cb02 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fa ff86 	bl	8007950 <pbuf_clen>
 800ca44:	4603      	mov	r3, r0
 800ca46:	461a      	mov	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ca4e:	1a9b      	subs	r3, r3, r2
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	6858      	ldr	r0, [r3, #4]
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	891a      	ldrh	r2, [r3, #8]
 800ca62:	89bb      	ldrh	r3, [r7, #12]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	4619      	mov	r1, r3
 800ca6a:	f7fa fd63 	bl	8007534 <pbuf_realloc>
  useg->len -= remainder;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	891a      	ldrh	r2, [r3, #8]
 800ca72:	89bb      	ldrh	r3, [r7, #12]
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	899b      	ldrh	r3, [r3, #12]
 800ca82:	b29c      	uxth	r4, r3
 800ca84:	7efb      	ldrb	r3, [r7, #27]
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7f9 fb7b 	bl	8006184 <lwip_htons>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	461a      	mov	r2, r3
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	4322      	orrs	r2, r4
 800ca98:	b292      	uxth	r2, r2
 800ca9a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fa ff55 	bl	8007950 <pbuf_clen>
 800caa6:	4603      	mov	r3, r0
 800caa8:	461a      	mov	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cab0:	4413      	add	r3, r2
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fa ff46 	bl	8007950 <pbuf_clen>
 800cac4:	4603      	mov	r3, r0
 800cac6:	461a      	mov	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cace:	4413      	add	r3, r2
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	69fa      	ldr	r2, [r7, #28]
 800cae4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d103      	bne.n	800caf6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800caf6:	2300      	movs	r3, #0
 800caf8:	e016      	b.n	800cb28 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cafa:	bf00      	nop
 800cafc:	e002      	b.n	800cb04 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cafe:	bf00      	nop
 800cb00:	e000      	b.n	800cb04 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cb02:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d006      	beq.n	800cb18 <tcp_split_unsent_seg+0x25c>
 800cb0a:	4b09      	ldr	r3, [pc, #36]	@ (800cb30 <tcp_split_unsent_seg+0x274>)
 800cb0c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800cb10:	490d      	ldr	r1, [pc, #52]	@ (800cb48 <tcp_split_unsent_seg+0x28c>)
 800cb12:	4809      	ldr	r0, [pc, #36]	@ (800cb38 <tcp_split_unsent_seg+0x27c>)
 800cb14:	f005 fb30 	bl	8012178 <iprintf>
  if (p != NULL) {
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d002      	beq.n	800cb24 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cb1e:	6938      	ldr	r0, [r7, #16]
 800cb20:	f7fa fe8e 	bl	8007840 <pbuf_free>
  }

  return ERR_MEM;
 800cb24:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3724      	adds	r7, #36	@ 0x24
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd90      	pop	{r4, r7, pc}
 800cb30:	08014ac0 	.word	0x08014ac0
 800cb34:	08014e54 	.word	0x08014e54
 800cb38:	08014b14 	.word	0x08014b14
 800cb3c:	08014e78 	.word	0x08014e78
 800cb40:	08014e9c 	.word	0x08014e9c
 800cb44:	08014eac 	.word	0x08014eac
 800cb48:	08014ebc 	.word	0x08014ebc

0800cb4c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cb4c:	b590      	push	{r4, r7, lr}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d106      	bne.n	800cb68 <tcp_send_fin+0x1c>
 800cb5a:	4b21      	ldr	r3, [pc, #132]	@ (800cbe0 <tcp_send_fin+0x94>)
 800cb5c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800cb60:	4920      	ldr	r1, [pc, #128]	@ (800cbe4 <tcp_send_fin+0x98>)
 800cb62:	4821      	ldr	r0, [pc, #132]	@ (800cbe8 <tcp_send_fin+0x9c>)
 800cb64:	f005 fb08 	bl	8012178 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d02e      	beq.n	800cbce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb74:	60fb      	str	r3, [r7, #12]
 800cb76:	e002      	b.n	800cb7e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1f8      	bne.n	800cb78 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	899b      	ldrh	r3, [r3, #12]
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7f9 faf8 	bl	8006184 <lwip_htons>
 800cb94:	4603      	mov	r3, r0
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	f003 0307 	and.w	r3, r3, #7
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d116      	bne.n	800cbce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	899b      	ldrh	r3, [r3, #12]
 800cba6:	b29c      	uxth	r4, r3
 800cba8:	2001      	movs	r0, #1
 800cbaa:	f7f9 faeb 	bl	8006184 <lwip_htons>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	4322      	orrs	r2, r4
 800cbb8:	b292      	uxth	r2, r2
 800cbba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	8b5b      	ldrh	r3, [r3, #26]
 800cbc0:	f043 0320 	orr.w	r3, r3, #32
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	e004      	b.n	800cbd8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cbce:	2101      	movs	r1, #1
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f80b 	bl	800cbec <tcp_enqueue_flags>
 800cbd6:	4603      	mov	r3, r0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3714      	adds	r7, #20
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd90      	pop	{r4, r7, pc}
 800cbe0:	08014ac0 	.word	0x08014ac0
 800cbe4:	08014ec8 	.word	0x08014ec8
 800cbe8:	08014b14 	.word	0x08014b14

0800cbec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b08a      	sub	sp, #40	@ 0x28
 800cbf0:	af02      	add	r7, sp, #8
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cc00:	78fb      	ldrb	r3, [r7, #3]
 800cc02:	f003 0303 	and.w	r3, r3, #3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d106      	bne.n	800cc18 <tcp_enqueue_flags+0x2c>
 800cc0a:	4b67      	ldr	r3, [pc, #412]	@ (800cda8 <tcp_enqueue_flags+0x1bc>)
 800cc0c:	f240 4211 	movw	r2, #1041	@ 0x411
 800cc10:	4966      	ldr	r1, [pc, #408]	@ (800cdac <tcp_enqueue_flags+0x1c0>)
 800cc12:	4867      	ldr	r0, [pc, #412]	@ (800cdb0 <tcp_enqueue_flags+0x1c4>)
 800cc14:	f005 fab0 	bl	8012178 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d106      	bne.n	800cc2c <tcp_enqueue_flags+0x40>
 800cc1e:	4b62      	ldr	r3, [pc, #392]	@ (800cda8 <tcp_enqueue_flags+0x1bc>)
 800cc20:	f240 4213 	movw	r2, #1043	@ 0x413
 800cc24:	4963      	ldr	r1, [pc, #396]	@ (800cdb4 <tcp_enqueue_flags+0x1c8>)
 800cc26:	4862      	ldr	r0, [pc, #392]	@ (800cdb0 <tcp_enqueue_flags+0x1c4>)
 800cc28:	f005 faa6 	bl	8012178 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cc2c:	78fb      	ldrb	r3, [r7, #3]
 800cc2e:	f003 0302 	and.w	r3, r3, #2
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d001      	beq.n	800cc3a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cc36:	2301      	movs	r3, #1
 800cc38:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cc3a:	7ffb      	ldrb	r3, [r7, #31]
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	f003 0304 	and.w	r3, r3, #4
 800cc44:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cc4e:	4619      	mov	r1, r3
 800cc50:	2036      	movs	r0, #54	@ 0x36
 800cc52:	f7fa fb11 	bl	8007278 <pbuf_alloc>
 800cc56:	6138      	str	r0, [r7, #16]
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d109      	bne.n	800cc72 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	8b5b      	ldrh	r3, [r3, #26]
 800cc62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cc6c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc70:	e095      	b.n	800cd9e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	895a      	ldrh	r2, [r3, #10]
 800cc76:	7dfb      	ldrb	r3, [r7, #23]
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d206      	bcs.n	800cc8c <tcp_enqueue_flags+0xa0>
 800cc7e:	4b4a      	ldr	r3, [pc, #296]	@ (800cda8 <tcp_enqueue_flags+0x1bc>)
 800cc80:	f240 4239 	movw	r2, #1081	@ 0x439
 800cc84:	494c      	ldr	r1, [pc, #304]	@ (800cdb8 <tcp_enqueue_flags+0x1cc>)
 800cc86:	484a      	ldr	r0, [pc, #296]	@ (800cdb0 <tcp_enqueue_flags+0x1c4>)
 800cc88:	f005 fa76 	bl	8012178 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800cc90:	78fa      	ldrb	r2, [r7, #3]
 800cc92:	7ffb      	ldrb	r3, [r7, #31]
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	460b      	mov	r3, r1
 800cc98:	6939      	ldr	r1, [r7, #16]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f7ff f91a 	bl	800bed4 <tcp_create_segment>
 800cca0:	60f8      	str	r0, [r7, #12]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d109      	bne.n	800ccbc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	8b5b      	ldrh	r3, [r3, #26]
 800ccac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ccb6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccba:	e070      	b.n	800cd9e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	f003 0303 	and.w	r3, r3, #3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d006      	beq.n	800ccd6 <tcp_enqueue_flags+0xea>
 800ccc8:	4b37      	ldr	r3, [pc, #220]	@ (800cda8 <tcp_enqueue_flags+0x1bc>)
 800ccca:	f240 4242 	movw	r2, #1090	@ 0x442
 800ccce:	493b      	ldr	r1, [pc, #236]	@ (800cdbc <tcp_enqueue_flags+0x1d0>)
 800ccd0:	4837      	ldr	r0, [pc, #220]	@ (800cdb0 <tcp_enqueue_flags+0x1c4>)
 800ccd2:	f005 fa51 	bl	8012178 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	891b      	ldrh	r3, [r3, #8]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d006      	beq.n	800ccec <tcp_enqueue_flags+0x100>
 800ccde:	4b32      	ldr	r3, [pc, #200]	@ (800cda8 <tcp_enqueue_flags+0x1bc>)
 800cce0:	f240 4243 	movw	r2, #1091	@ 0x443
 800cce4:	4936      	ldr	r1, [pc, #216]	@ (800cdc0 <tcp_enqueue_flags+0x1d4>)
 800cce6:	4832      	ldr	r0, [pc, #200]	@ (800cdb0 <tcp_enqueue_flags+0x1c4>)
 800cce8:	f005 fa46 	bl	8012178 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d103      	bne.n	800ccfc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ccfa:	e00d      	b.n	800cd18 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd00:	61bb      	str	r3, [r7, #24]
 800cd02:	e002      	b.n	800cd0a <tcp_enqueue_flags+0x11e>
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	61bb      	str	r3, [r7, #24]
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1f8      	bne.n	800cd04 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cd20:	78fb      	ldrb	r3, [r7, #3]
 800cd22:	f003 0302 	and.w	r3, r3, #2
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d104      	bne.n	800cd34 <tcp_enqueue_flags+0x148>
 800cd2a:	78fb      	ldrb	r3, [r7, #3]
 800cd2c:	f003 0301 	and.w	r3, r3, #1
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d004      	beq.n	800cd3e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd38:	1c5a      	adds	r2, r3, #1
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cd3e:	78fb      	ldrb	r3, [r7, #3]
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d006      	beq.n	800cd56 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	8b5b      	ldrh	r3, [r3, #26]
 800cd4c:	f043 0320 	orr.w	r3, r3, #32
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fa fdf8 	bl	8007950 <pbuf_clen>
 800cd60:	4603      	mov	r3, r0
 800cd62:	461a      	mov	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cd6a:	4413      	add	r3, r2
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00e      	beq.n	800cd9c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10a      	bne.n	800cd9c <tcp_enqueue_flags+0x1b0>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d106      	bne.n	800cd9c <tcp_enqueue_flags+0x1b0>
 800cd8e:	4b06      	ldr	r3, [pc, #24]	@ (800cda8 <tcp_enqueue_flags+0x1bc>)
 800cd90:	f240 4265 	movw	r2, #1125	@ 0x465
 800cd94:	490b      	ldr	r1, [pc, #44]	@ (800cdc4 <tcp_enqueue_flags+0x1d8>)
 800cd96:	4806      	ldr	r0, [pc, #24]	@ (800cdb0 <tcp_enqueue_flags+0x1c4>)
 800cd98:	f005 f9ee 	bl	8012178 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3720      	adds	r7, #32
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	08014ac0 	.word	0x08014ac0
 800cdac:	08014ee4 	.word	0x08014ee4
 800cdb0:	08014b14 	.word	0x08014b14
 800cdb4:	08014f3c 	.word	0x08014f3c
 800cdb8:	08014f5c 	.word	0x08014f5c
 800cdbc:	08014f98 	.word	0x08014f98
 800cdc0:	08014fb0 	.word	0x08014fb0
 800cdc4:	08014fdc 	.word	0x08014fdc

0800cdc8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cdc8:	b5b0      	push	{r4, r5, r7, lr}
 800cdca:	b08a      	sub	sp, #40	@ 0x28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d106      	bne.n	800cde4 <tcp_output+0x1c>
 800cdd6:	4b8a      	ldr	r3, [pc, #552]	@ (800d000 <tcp_output+0x238>)
 800cdd8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800cddc:	4989      	ldr	r1, [pc, #548]	@ (800d004 <tcp_output+0x23c>)
 800cdde:	488a      	ldr	r0, [pc, #552]	@ (800d008 <tcp_output+0x240>)
 800cde0:	f005 f9ca 	bl	8012178 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	7d1b      	ldrb	r3, [r3, #20]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d106      	bne.n	800cdfa <tcp_output+0x32>
 800cdec:	4b84      	ldr	r3, [pc, #528]	@ (800d000 <tcp_output+0x238>)
 800cdee:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800cdf2:	4986      	ldr	r1, [pc, #536]	@ (800d00c <tcp_output+0x244>)
 800cdf4:	4884      	ldr	r0, [pc, #528]	@ (800d008 <tcp_output+0x240>)
 800cdf6:	f005 f9bf 	bl	8012178 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cdfa:	4b85      	ldr	r3, [pc, #532]	@ (800d010 <tcp_output+0x248>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d101      	bne.n	800ce08 <tcp_output+0x40>
    return ERR_OK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	e1ce      	b.n	800d1a6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ce14:	4293      	cmp	r3, r2
 800ce16:	bf28      	it	cs
 800ce18:	4613      	movcs	r3, r2
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce22:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800ce24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d10b      	bne.n	800ce42 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	8b5b      	ldrh	r3, [r3, #26]
 800ce2e:	f003 0302 	and.w	r3, r3, #2
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	f000 81aa 	beq.w	800d18c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 fdcb 	bl	800d9d4 <tcp_send_empty_ack>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	e1b1      	b.n	800d1a6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ce42:	6879      	ldr	r1, [r7, #4]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	3304      	adds	r3, #4
 800ce48:	461a      	mov	r2, r3
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f7ff f826 	bl	800be9c <tcp_route>
 800ce50:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d102      	bne.n	800ce5e <tcp_output+0x96>
    return ERR_RTE;
 800ce58:	f06f 0303 	mvn.w	r3, #3
 800ce5c:	e1a3      	b.n	800d1a6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d003      	beq.n	800ce6c <tcp_output+0xa4>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d111      	bne.n	800ce90 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d002      	beq.n	800ce78 <tcp_output+0xb0>
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	3304      	adds	r3, #4
 800ce76:	e000      	b.n	800ce7a <tcp_output+0xb2>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d102      	bne.n	800ce88 <tcp_output+0xc0>
      return ERR_RTE;
 800ce82:	f06f 0303 	mvn.w	r3, #3
 800ce86:	e18e      	b.n	800d1a6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ce90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7f9 f98a 	bl	80061b0 <lwip_htonl>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cea6:	8912      	ldrh	r2, [r2, #8]
 800cea8:	4413      	add	r3, r2
 800ceaa:	69ba      	ldr	r2, [r7, #24]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d227      	bcs.n	800cf00 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d114      	bne.n	800cee8 <tcp_output+0x120>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d110      	bne.n	800cee8 <tcp_output+0x120>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10b      	bne.n	800cee8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	8b5b      	ldrh	r3, [r3, #26]
 800ceec:	f003 0302 	and.w	r3, r3, #2
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f000 814d 	beq.w	800d190 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 fd6c 	bl	800d9d4 <tcp_send_empty_ack>
 800cefc:	4603      	mov	r3, r0
 800cefe:	e152      	b.n	800d1a6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf0c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cf0e:	6a3b      	ldr	r3, [r7, #32]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f000 811c 	beq.w	800d14e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800cf16:	e002      	b.n	800cf1e <tcp_output+0x156>
 800cf18:	6a3b      	ldr	r3, [r7, #32]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	623b      	str	r3, [r7, #32]
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1f8      	bne.n	800cf18 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cf26:	e112      	b.n	800d14e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800cf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2a:	68db      	ldr	r3, [r3, #12]
 800cf2c:	899b      	ldrh	r3, [r3, #12]
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7f9 f927 	bl	8006184 <lwip_htons>
 800cf36:	4603      	mov	r3, r0
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	f003 0304 	and.w	r3, r3, #4
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d006      	beq.n	800cf50 <tcp_output+0x188>
 800cf42:	4b2f      	ldr	r3, [pc, #188]	@ (800d000 <tcp_output+0x238>)
 800cf44:	f240 5236 	movw	r2, #1334	@ 0x536
 800cf48:	4932      	ldr	r1, [pc, #200]	@ (800d014 <tcp_output+0x24c>)
 800cf4a:	482f      	ldr	r0, [pc, #188]	@ (800d008 <tcp_output+0x240>)
 800cf4c:	f005 f914 	bl	8012178 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d01f      	beq.n	800cf98 <tcp_output+0x1d0>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	8b5b      	ldrh	r3, [r3, #26]
 800cf5c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d119      	bne.n	800cf98 <tcp_output+0x1d0>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00b      	beq.n	800cf84 <tcp_output+0x1bc>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d110      	bne.n	800cf98 <tcp_output+0x1d0>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf7a:	891a      	ldrh	r2, [r3, #8]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d209      	bcs.n	800cf98 <tcp_output+0x1d0>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d004      	beq.n	800cf98 <tcp_output+0x1d0>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cf94:	2b08      	cmp	r3, #8
 800cf96:	d901      	bls.n	800cf9c <tcp_output+0x1d4>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	e000      	b.n	800cf9e <tcp_output+0x1d6>
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d106      	bne.n	800cfb0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	8b5b      	ldrh	r3, [r3, #26]
 800cfa6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f000 80e4 	beq.w	800d178 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	7d1b      	ldrb	r3, [r3, #20]
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d00d      	beq.n	800cfd4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	899b      	ldrh	r3, [r3, #12]
 800cfbe:	b29c      	uxth	r4, r3
 800cfc0:	2010      	movs	r0, #16
 800cfc2:	f7f9 f8df 	bl	8006184 <lwip_htons>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	461a      	mov	r2, r3
 800cfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	4322      	orrs	r2, r4
 800cfd0:	b292      	uxth	r2, r2
 800cfd2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cfd4:	697a      	ldr	r2, [r7, #20]
 800cfd6:	6879      	ldr	r1, [r7, #4]
 800cfd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cfda:	f000 f909 	bl	800d1f0 <tcp_output_segment>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cfe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d016      	beq.n	800d018 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	8b5b      	ldrh	r3, [r3, #26]
 800cfee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	835a      	strh	r2, [r3, #26]
      return err;
 800cff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cffc:	e0d3      	b.n	800d1a6 <tcp_output+0x3de>
 800cffe:	bf00      	nop
 800d000:	08014ac0 	.word	0x08014ac0
 800d004:	08015004 	.word	0x08015004
 800d008:	08014b14 	.word	0x08014b14
 800d00c:	0801501c 	.word	0x0801501c
 800d010:	200084bc 	.word	0x200084bc
 800d014:	08015044 	.word	0x08015044
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	7d1b      	ldrb	r3, [r3, #20]
 800d024:	2b02      	cmp	r3, #2
 800d026:	d006      	beq.n	800d036 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	8b5b      	ldrh	r3, [r3, #26]
 800d02c:	f023 0303 	bic.w	r3, r3, #3
 800d030:	b29a      	uxth	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7f9 f8b7 	bl	80061b0 <lwip_htonl>
 800d042:	4604      	mov	r4, r0
 800d044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d046:	891b      	ldrh	r3, [r3, #8]
 800d048:	461d      	mov	r5, r3
 800d04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	899b      	ldrh	r3, [r3, #12]
 800d050:	b29b      	uxth	r3, r3
 800d052:	4618      	mov	r0, r3
 800d054:	f7f9 f896 	bl	8006184 <lwip_htons>
 800d058:	4603      	mov	r3, r0
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	f003 0303 	and.w	r3, r3, #3
 800d060:	2b00      	cmp	r3, #0
 800d062:	d001      	beq.n	800d068 <tcp_output+0x2a0>
 800d064:	2301      	movs	r3, #1
 800d066:	e000      	b.n	800d06a <tcp_output+0x2a2>
 800d068:	2300      	movs	r3, #0
 800d06a:	442b      	add	r3, r5
 800d06c:	4423      	add	r3, r4
 800d06e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	2b00      	cmp	r3, #0
 800d07a:	da02      	bge.n	800d082 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d084:	891b      	ldrh	r3, [r3, #8]
 800d086:	461c      	mov	r4, r3
 800d088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	899b      	ldrh	r3, [r3, #12]
 800d08e:	b29b      	uxth	r3, r3
 800d090:	4618      	mov	r0, r3
 800d092:	f7f9 f877 	bl	8006184 <lwip_htons>
 800d096:	4603      	mov	r3, r0
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	f003 0303 	and.w	r3, r3, #3
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <tcp_output+0x2de>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e000      	b.n	800d0a8 <tcp_output+0x2e0>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	4423      	add	r3, r4
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d049      	beq.n	800d142 <tcp_output+0x37a>
      seg->next = NULL;
 800d0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d105      	bne.n	800d0c8 <tcp_output+0x300>
        pcb->unacked = seg;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0c0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c4:	623b      	str	r3, [r7, #32]
 800d0c6:	e03f      	b.n	800d148 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7f9 f86e 	bl	80061b0 <lwip_htonl>
 800d0d4:	4604      	mov	r4, r0
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7f9 f867 	bl	80061b0 <lwip_htonl>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	1ae3      	subs	r3, r4, r3
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	da24      	bge.n	800d134 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	3370      	adds	r3, #112	@ 0x70
 800d0ee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d0f0:	e002      	b.n	800d0f8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d011      	beq.n	800d124 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68db      	ldr	r3, [r3, #12]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	4618      	mov	r0, r3
 800d10a:	f7f9 f851 	bl	80061b0 <lwip_htonl>
 800d10e:	4604      	mov	r4, r0
 800d110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	4618      	mov	r0, r3
 800d118:	f7f9 f84a 	bl	80061b0 <lwip_htonl>
 800d11c:	4603      	mov	r3, r0
 800d11e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d120:	2b00      	cmp	r3, #0
 800d122:	dbe6      	blt.n	800d0f2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d130:	601a      	str	r2, [r3, #0]
 800d132:	e009      	b.n	800d148 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d134:	6a3b      	ldr	r3, [r7, #32]
 800d136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d138:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	623b      	str	r3, [r7, #32]
 800d140:	e002      	b.n	800d148 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d142:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d144:	f7fb ffab 	bl	800909e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d14c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800d14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d150:	2b00      	cmp	r3, #0
 800d152:	d012      	beq.n	800d17a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7f9 f828 	bl	80061b0 <lwip_htonl>
 800d160:	4602      	mov	r2, r0
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d166:	1ad3      	subs	r3, r2, r3
 800d168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d16a:	8912      	ldrh	r2, [r2, #8]
 800d16c:	4413      	add	r3, r2
  while (seg != NULL &&
 800d16e:	69ba      	ldr	r2, [r7, #24]
 800d170:	429a      	cmp	r2, r3
 800d172:	f4bf aed9 	bcs.w	800cf28 <tcp_output+0x160>
 800d176:	e000      	b.n	800d17a <tcp_output+0x3b2>
      break;
 800d178:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d108      	bne.n	800d194 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800d18a:	e004      	b.n	800d196 <tcp_output+0x3ce>
    goto output_done;
 800d18c:	bf00      	nop
 800d18e:	e002      	b.n	800d196 <tcp_output+0x3ce>
    goto output_done;
 800d190:	bf00      	nop
 800d192:	e000      	b.n	800d196 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d194:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	8b5b      	ldrh	r3, [r3, #26]
 800d19a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3728      	adds	r7, #40	@ 0x28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bdb0      	pop	{r4, r5, r7, pc}
 800d1ae:	bf00      	nop

0800d1b0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d106      	bne.n	800d1cc <tcp_output_segment_busy+0x1c>
 800d1be:	4b09      	ldr	r3, [pc, #36]	@ (800d1e4 <tcp_output_segment_busy+0x34>)
 800d1c0:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d1c4:	4908      	ldr	r1, [pc, #32]	@ (800d1e8 <tcp_output_segment_busy+0x38>)
 800d1c6:	4809      	ldr	r0, [pc, #36]	@ (800d1ec <tcp_output_segment_busy+0x3c>)
 800d1c8:	f004 ffd6 	bl	8012178 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	7b9b      	ldrb	r3, [r3, #14]
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d001      	beq.n	800d1da <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e000      	b.n	800d1dc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d1da:	2300      	movs	r3, #0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3708      	adds	r7, #8
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	08014ac0 	.word	0x08014ac0
 800d1e8:	0801505c 	.word	0x0801505c
 800d1ec:	08014b14 	.word	0x08014b14

0800d1f0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d1f0:	b5b0      	push	{r4, r5, r7, lr}
 800d1f2:	b08c      	sub	sp, #48	@ 0x30
 800d1f4:	af04      	add	r7, sp, #16
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d106      	bne.n	800d210 <tcp_output_segment+0x20>
 800d202:	4b64      	ldr	r3, [pc, #400]	@ (800d394 <tcp_output_segment+0x1a4>)
 800d204:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800d208:	4963      	ldr	r1, [pc, #396]	@ (800d398 <tcp_output_segment+0x1a8>)
 800d20a:	4864      	ldr	r0, [pc, #400]	@ (800d39c <tcp_output_segment+0x1ac>)
 800d20c:	f004 ffb4 	bl	8012178 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d106      	bne.n	800d224 <tcp_output_segment+0x34>
 800d216:	4b5f      	ldr	r3, [pc, #380]	@ (800d394 <tcp_output_segment+0x1a4>)
 800d218:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800d21c:	4960      	ldr	r1, [pc, #384]	@ (800d3a0 <tcp_output_segment+0x1b0>)
 800d21e:	485f      	ldr	r0, [pc, #380]	@ (800d39c <tcp_output_segment+0x1ac>)
 800d220:	f004 ffaa 	bl	8012178 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d106      	bne.n	800d238 <tcp_output_segment+0x48>
 800d22a:	4b5a      	ldr	r3, [pc, #360]	@ (800d394 <tcp_output_segment+0x1a4>)
 800d22c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d230:	495c      	ldr	r1, [pc, #368]	@ (800d3a4 <tcp_output_segment+0x1b4>)
 800d232:	485a      	ldr	r0, [pc, #360]	@ (800d39c <tcp_output_segment+0x1ac>)
 800d234:	f004 ffa0 	bl	8012178 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f7ff ffb9 	bl	800d1b0 <tcp_output_segment_busy>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d001      	beq.n	800d248 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d244:	2300      	movs	r3, #0
 800d246:	e0a1      	b.n	800d38c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	68dc      	ldr	r4, [r3, #12]
 800d250:	4610      	mov	r0, r2
 800d252:	f7f8 ffad 	bl	80061b0 <lwip_htonl>
 800d256:	4603      	mov	r3, r0
 800d258:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	68dc      	ldr	r4, [r3, #12]
 800d262:	4610      	mov	r0, r2
 800d264:	f7f8 ff8e 	bl	8006184 <lwip_htons>
 800d268:	4603      	mov	r3, r0
 800d26a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d270:	68ba      	ldr	r2, [r7, #8]
 800d272:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d274:	441a      	add	r2, r3
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	3314      	adds	r3, #20
 800d280:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	7a9b      	ldrb	r3, [r3, #10]
 800d286:	f003 0301 	and.w	r3, r3, #1
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d015      	beq.n	800d2ba <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	3304      	adds	r3, #4
 800d292:	461a      	mov	r2, r3
 800d294:	6879      	ldr	r1, [r7, #4]
 800d296:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d29a:	f7fc fa39 	bl	8009710 <tcp_eff_send_mss_netif>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d2a2:	8b7b      	ldrh	r3, [r7, #26]
 800d2a4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7f8 ff81 	bl	80061b0 <lwip_htonl>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	da02      	bge.n	800d2ca <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d10c      	bne.n	800d2ec <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d2d2:	4b35      	ldr	r3, [pc, #212]	@ (800d3a8 <tcp_output_segment+0x1b8>)
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7f8 ff65 	bl	80061b0 <lwip_htonl>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	68da      	ldr	r2, [r3, #12]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	1ad3      	subs	r3, r2, r3
 800d2f8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	8959      	ldrh	r1, [r3, #10]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	8b3a      	ldrh	r2, [r7, #24]
 800d306:	1a8a      	subs	r2, r1, r2
 800d308:	b292      	uxth	r2, r2
 800d30a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	8919      	ldrh	r1, [r3, #8]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	8b3a      	ldrh	r2, [r7, #24]
 800d318:	1a8a      	subs	r2, r1, r2
 800d31a:	b292      	uxth	r2, r2
 800d31c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	68d2      	ldr	r2, [r2, #12]
 800d326:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	741a      	strb	r2, [r3, #16]
 800d330:	2200      	movs	r2, #0
 800d332:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	68da      	ldr	r2, [r3, #12]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	7a9b      	ldrb	r3, [r3, #10]
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <tcp_output_segment+0x158>
 800d344:	2318      	movs	r3, #24
 800d346:	e000      	b.n	800d34a <tcp_output_segment+0x15a>
 800d348:	2314      	movs	r3, #20
 800d34a:	4413      	add	r3, r2
 800d34c:	69fa      	ldr	r2, [r7, #28]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d006      	beq.n	800d360 <tcp_output_segment+0x170>
 800d352:	4b10      	ldr	r3, [pc, #64]	@ (800d394 <tcp_output_segment+0x1a4>)
 800d354:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d358:	4914      	ldr	r1, [pc, #80]	@ (800d3ac <tcp_output_segment+0x1bc>)
 800d35a:	4810      	ldr	r0, [pc, #64]	@ (800d39c <tcp_output_segment+0x1ac>)
 800d35c:	f004 ff0c 	bl	8012178 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6858      	ldr	r0, [r3, #4]
 800d364:	68b9      	ldr	r1, [r7, #8]
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	1d1c      	adds	r4, r3, #4
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	7add      	ldrb	r5, [r3, #11]
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	7a9b      	ldrb	r3, [r3, #10]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	9202      	str	r2, [sp, #8]
 800d376:	2206      	movs	r2, #6
 800d378:	9201      	str	r2, [sp, #4]
 800d37a:	9300      	str	r3, [sp, #0]
 800d37c:	462b      	mov	r3, r5
 800d37e:	4622      	mov	r2, r4
 800d380:	f002 fa34 	bl	800f7ec <ip4_output_if>
 800d384:	4603      	mov	r3, r0
 800d386:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d388:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3720      	adds	r7, #32
 800d390:	46bd      	mov	sp, r7
 800d392:	bdb0      	pop	{r4, r5, r7, pc}
 800d394:	08014ac0 	.word	0x08014ac0
 800d398:	08015084 	.word	0x08015084
 800d39c:	08014b14 	.word	0x08014b14
 800d3a0:	080150a4 	.word	0x080150a4
 800d3a4:	080150c4 	.word	0x080150c4
 800d3a8:	20008470 	.word	0x20008470
 800d3ac:	080150e8 	.word	0x080150e8

0800d3b0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d3b0:	b5b0      	push	{r4, r5, r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d106      	bne.n	800d3cc <tcp_rexmit_rto_prepare+0x1c>
 800d3be:	4b31      	ldr	r3, [pc, #196]	@ (800d484 <tcp_rexmit_rto_prepare+0xd4>)
 800d3c0:	f240 6263 	movw	r2, #1635	@ 0x663
 800d3c4:	4930      	ldr	r1, [pc, #192]	@ (800d488 <tcp_rexmit_rto_prepare+0xd8>)
 800d3c6:	4831      	ldr	r0, [pc, #196]	@ (800d48c <tcp_rexmit_rto_prepare+0xdc>)
 800d3c8:	f004 fed6 	bl	8012178 <iprintf>

  if (pcb->unacked == NULL) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d102      	bne.n	800d3da <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d3d4:	f06f 0305 	mvn.w	r3, #5
 800d3d8:	e050      	b.n	800d47c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	e00b      	b.n	800d3fa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f7ff fee4 	bl	800d1b0 <tcp_output_segment_busy>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d002      	beq.n	800d3f4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d3ee:	f06f 0305 	mvn.w	r3, #5
 800d3f2:	e043      	b.n	800d47c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1ef      	bne.n	800d3e2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f7ff fed4 	bl	800d1b0 <tcp_output_segment_busy>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d002      	beq.n	800d414 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d40e:	f06f 0305 	mvn.w	r3, #5
 800d412:	e033      	b.n	800d47c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	8b5b      	ldrh	r3, [r3, #26]
 800d42e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d432:	b29a      	uxth	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	4618      	mov	r0, r3
 800d440:	f7f8 feb6 	bl	80061b0 <lwip_htonl>
 800d444:	4604      	mov	r4, r0
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	891b      	ldrh	r3, [r3, #8]
 800d44a:	461d      	mov	r5, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	899b      	ldrh	r3, [r3, #12]
 800d452:	b29b      	uxth	r3, r3
 800d454:	4618      	mov	r0, r3
 800d456:	f7f8 fe95 	bl	8006184 <lwip_htons>
 800d45a:	4603      	mov	r3, r0
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	f003 0303 	and.w	r3, r3, #3
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <tcp_rexmit_rto_prepare+0xba>
 800d466:	2301      	movs	r3, #1
 800d468:	e000      	b.n	800d46c <tcp_rexmit_rto_prepare+0xbc>
 800d46a:	2300      	movs	r3, #0
 800d46c:	442b      	add	r3, r5
 800d46e:	18e2      	adds	r2, r4, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bdb0      	pop	{r4, r5, r7, pc}
 800d484:	08014ac0 	.word	0x08014ac0
 800d488:	080150fc 	.word	0x080150fc
 800d48c:	08014b14 	.word	0x08014b14

0800d490 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d106      	bne.n	800d4ac <tcp_rexmit_rto_commit+0x1c>
 800d49e:	4b0d      	ldr	r3, [pc, #52]	@ (800d4d4 <tcp_rexmit_rto_commit+0x44>)
 800d4a0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d4a4:	490c      	ldr	r1, [pc, #48]	@ (800d4d8 <tcp_rexmit_rto_commit+0x48>)
 800d4a6:	480d      	ldr	r0, [pc, #52]	@ (800d4dc <tcp_rexmit_rto_commit+0x4c>)
 800d4a8:	f004 fe66 	bl	8012178 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d4b2:	2bff      	cmp	r3, #255	@ 0xff
 800d4b4:	d007      	beq.n	800d4c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d4bc:	3301      	adds	r3, #1
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f7ff fc7e 	bl	800cdc8 <tcp_output>
}
 800d4cc:	bf00      	nop
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	08014ac0 	.word	0x08014ac0
 800d4d8:	08015120 	.word	0x08015120
 800d4dc:	08014b14 	.word	0x08014b14

0800d4e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d106      	bne.n	800d4fc <tcp_rexmit_rto+0x1c>
 800d4ee:	4b0a      	ldr	r3, [pc, #40]	@ (800d518 <tcp_rexmit_rto+0x38>)
 800d4f0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d4f4:	4909      	ldr	r1, [pc, #36]	@ (800d51c <tcp_rexmit_rto+0x3c>)
 800d4f6:	480a      	ldr	r0, [pc, #40]	@ (800d520 <tcp_rexmit_rto+0x40>)
 800d4f8:	f004 fe3e 	bl	8012178 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f7ff ff57 	bl	800d3b0 <tcp_rexmit_rto_prepare>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d102      	bne.n	800d50e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f7ff ffc1 	bl	800d490 <tcp_rexmit_rto_commit>
  }
}
 800d50e:	bf00      	nop
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	08014ac0 	.word	0x08014ac0
 800d51c:	08015144 	.word	0x08015144
 800d520:	08014b14 	.word	0x08014b14

0800d524 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d524:	b590      	push	{r4, r7, lr}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d106      	bne.n	800d540 <tcp_rexmit+0x1c>
 800d532:	4b2f      	ldr	r3, [pc, #188]	@ (800d5f0 <tcp_rexmit+0xcc>)
 800d534:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d538:	492e      	ldr	r1, [pc, #184]	@ (800d5f4 <tcp_rexmit+0xd0>)
 800d53a:	482f      	ldr	r0, [pc, #188]	@ (800d5f8 <tcp_rexmit+0xd4>)
 800d53c:	f004 fe1c 	bl	8012178 <iprintf>

  if (pcb->unacked == NULL) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d544:	2b00      	cmp	r3, #0
 800d546:	d102      	bne.n	800d54e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d548:	f06f 0305 	mvn.w	r3, #5
 800d54c:	e04c      	b.n	800d5e8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d552:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d554:	68b8      	ldr	r0, [r7, #8]
 800d556:	f7ff fe2b 	bl	800d1b0 <tcp_output_segment_busy>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d002      	beq.n	800d566 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d560:	f06f 0305 	mvn.w	r3, #5
 800d564:	e040      	b.n	800d5e8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	336c      	adds	r3, #108	@ 0x6c
 800d572:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d574:	e002      	b.n	800d57c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d011      	beq.n	800d5a8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7f8 fe0f 	bl	80061b0 <lwip_htonl>
 800d592:	4604      	mov	r4, r0
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7f8 fe08 	bl	80061b0 <lwip_htonl>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	dbe6      	blt.n	800d576 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	68ba      	ldr	r2, [r7, #8]
 800d5b4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d103      	bne.n	800d5c6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d5cc:	2bff      	cmp	r3, #255	@ 0xff
 800d5ce:	d007      	beq.n	800d5e0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	b2da      	uxtb	r2, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d5e6:	2300      	movs	r3, #0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3714      	adds	r7, #20
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd90      	pop	{r4, r7, pc}
 800d5f0:	08014ac0 	.word	0x08014ac0
 800d5f4:	08015160 	.word	0x08015160
 800d5f8:	08014b14 	.word	0x08014b14

0800d5fc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d106      	bne.n	800d618 <tcp_rexmit_fast+0x1c>
 800d60a:	4b2a      	ldr	r3, [pc, #168]	@ (800d6b4 <tcp_rexmit_fast+0xb8>)
 800d60c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d610:	4929      	ldr	r1, [pc, #164]	@ (800d6b8 <tcp_rexmit_fast+0xbc>)
 800d612:	482a      	ldr	r0, [pc, #168]	@ (800d6bc <tcp_rexmit_fast+0xc0>)
 800d614:	f004 fdb0 	bl	8012178 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d044      	beq.n	800d6aa <tcp_rexmit_fast+0xae>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	8b5b      	ldrh	r3, [r3, #26]
 800d624:	f003 0304 	and.w	r3, r3, #4
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d13e      	bne.n	800d6aa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f7ff ff79 	bl	800d524 <tcp_rexmit>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d138      	bne.n	800d6aa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d644:	4293      	cmp	r3, r2
 800d646:	bf28      	it	cs
 800d648:	4613      	movcs	r3, r2
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	0fda      	lsrs	r2, r3, #31
 800d64e:	4413      	add	r3, r2
 800d650:	105b      	asrs	r3, r3, #1
 800d652:	b29a      	uxth	r2, r3
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d660:	461a      	mov	r2, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d666:	005b      	lsls	r3, r3, #1
 800d668:	429a      	cmp	r2, r3
 800d66a:	d206      	bcs.n	800d67a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d670:	005b      	lsls	r3, r3, #1
 800d672:	b29a      	uxth	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d684:	4619      	mov	r1, r3
 800d686:	0049      	lsls	r1, r1, #1
 800d688:	440b      	add	r3, r1
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	4413      	add	r3, r2
 800d68e:	b29a      	uxth	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	8b5b      	ldrh	r3, [r3, #26]
 800d69a:	f043 0304 	orr.w	r3, r3, #4
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d6aa:	bf00      	nop
 800d6ac:	3708      	adds	r7, #8
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	08014ac0 	.word	0x08014ac0
 800d6b8:	08015178 	.word	0x08015178
 800d6bc:	08014b14 	.word	0x08014b14

0800d6c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	607b      	str	r3, [r7, #4]
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	817b      	strh	r3, [r7, #10]
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d6d2:	897a      	ldrh	r2, [r7, #10]
 800d6d4:	893b      	ldrh	r3, [r7, #8]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	3314      	adds	r3, #20
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	2022      	movs	r0, #34	@ 0x22
 800d6e6:	f7f9 fdc7 	bl	8007278 <pbuf_alloc>
 800d6ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d04d      	beq.n	800d78e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d6f2:	897b      	ldrh	r3, [r7, #10]
 800d6f4:	3313      	adds	r3, #19
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	8952      	ldrh	r2, [r2, #10]
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	db06      	blt.n	800d70c <tcp_output_alloc_header_common+0x4c>
 800d6fe:	4b26      	ldr	r3, [pc, #152]	@ (800d798 <tcp_output_alloc_header_common+0xd8>)
 800d700:	f240 7223 	movw	r2, #1827	@ 0x723
 800d704:	4925      	ldr	r1, [pc, #148]	@ (800d79c <tcp_output_alloc_header_common+0xdc>)
 800d706:	4826      	ldr	r0, [pc, #152]	@ (800d7a0 <tcp_output_alloc_header_common+0xe0>)
 800d708:	f004 fd36 	bl	8012178 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d712:	8c3b      	ldrh	r3, [r7, #32]
 800d714:	4618      	mov	r0, r3
 800d716:	f7f8 fd35 	bl	8006184 <lwip_htons>
 800d71a:	4603      	mov	r3, r0
 800d71c:	461a      	mov	r2, r3
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d722:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d724:	4618      	mov	r0, r3
 800d726:	f7f8 fd2d 	bl	8006184 <lwip_htons>
 800d72a:	4603      	mov	r3, r0
 800d72c:	461a      	mov	r2, r3
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f7f8 fd39 	bl	80061b0 <lwip_htonl>
 800d73e:	4602      	mov	r2, r0
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d744:	897b      	ldrh	r3, [r7, #10]
 800d746:	089b      	lsrs	r3, r3, #2
 800d748:	b29b      	uxth	r3, r3
 800d74a:	3305      	adds	r3, #5
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	031b      	lsls	r3, r3, #12
 800d750:	b29a      	uxth	r2, r3
 800d752:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d756:	b29b      	uxth	r3, r3
 800d758:	4313      	orrs	r3, r2
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7f8 fd11 	bl	8006184 <lwip_htons>
 800d762:	4603      	mov	r3, r0
 800d764:	461a      	mov	r2, r3
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d76a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7f8 fd09 	bl	8006184 <lwip_htons>
 800d772:	4603      	mov	r3, r0
 800d774:	461a      	mov	r2, r3
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	2200      	movs	r2, #0
 800d77e:	741a      	strb	r2, [r3, #16]
 800d780:	2200      	movs	r2, #0
 800d782:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	2200      	movs	r2, #0
 800d788:	749a      	strb	r2, [r3, #18]
 800d78a:	2200      	movs	r2, #0
 800d78c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d78e:	697b      	ldr	r3, [r7, #20]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3718      	adds	r7, #24
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	08014ac0 	.word	0x08014ac0
 800d79c:	08015198 	.word	0x08015198
 800d7a0:	08014b14 	.word	0x08014b14

0800d7a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d7a4:	b5b0      	push	{r4, r5, r7, lr}
 800d7a6:	b08a      	sub	sp, #40	@ 0x28
 800d7a8:	af04      	add	r7, sp, #16
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	607b      	str	r3, [r7, #4]
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	817b      	strh	r3, [r7, #10]
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d106      	bne.n	800d7ca <tcp_output_alloc_header+0x26>
 800d7bc:	4b15      	ldr	r3, [pc, #84]	@ (800d814 <tcp_output_alloc_header+0x70>)
 800d7be:	f240 7242 	movw	r2, #1858	@ 0x742
 800d7c2:	4915      	ldr	r1, [pc, #84]	@ (800d818 <tcp_output_alloc_header+0x74>)
 800d7c4:	4815      	ldr	r0, [pc, #84]	@ (800d81c <tcp_output_alloc_header+0x78>)
 800d7c6:	f004 fcd7 	bl	8012178 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	8adb      	ldrh	r3, [r3, #22]
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	8b12      	ldrh	r2, [r2, #24]
 800d7d6:	68f9      	ldr	r1, [r7, #12]
 800d7d8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d7da:	893d      	ldrh	r5, [r7, #8]
 800d7dc:	897c      	ldrh	r4, [r7, #10]
 800d7de:	9103      	str	r1, [sp, #12]
 800d7e0:	2110      	movs	r1, #16
 800d7e2:	9102      	str	r1, [sp, #8]
 800d7e4:	9201      	str	r2, [sp, #4]
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	462a      	mov	r2, r5
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	f7ff ff67 	bl	800d6c0 <tcp_output_alloc_header_common>
 800d7f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d006      	beq.n	800d808 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7fe:	68fa      	ldr	r2, [r7, #12]
 800d800:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d802:	441a      	add	r2, r3
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d808:	697b      	ldr	r3, [r7, #20]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3718      	adds	r7, #24
 800d80e:	46bd      	mov	sp, r7
 800d810:	bdb0      	pop	{r4, r5, r7, pc}
 800d812:	bf00      	nop
 800d814:	08014ac0 	.word	0x08014ac0
 800d818:	080151c8 	.word	0x080151c8
 800d81c:	08014b14 	.word	0x08014b14

0800d820 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b088      	sub	sp, #32
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	4611      	mov	r1, r2
 800d82c:	461a      	mov	r2, r3
 800d82e:	460b      	mov	r3, r1
 800d830:	71fb      	strb	r3, [r7, #7]
 800d832:	4613      	mov	r3, r2
 800d834:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d836:	2300      	movs	r3, #0
 800d838:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d106      	bne.n	800d84e <tcp_output_fill_options+0x2e>
 800d840:	4b12      	ldr	r3, [pc, #72]	@ (800d88c <tcp_output_fill_options+0x6c>)
 800d842:	f240 7256 	movw	r2, #1878	@ 0x756
 800d846:	4912      	ldr	r1, [pc, #72]	@ (800d890 <tcp_output_fill_options+0x70>)
 800d848:	4812      	ldr	r0, [pc, #72]	@ (800d894 <tcp_output_fill_options+0x74>)
 800d84a:	f004 fc95 	bl	8012178 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	3314      	adds	r3, #20
 800d858:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d85a:	8bfb      	ldrh	r3, [r7, #30]
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	461a      	mov	r2, r3
 800d860:	79fb      	ldrb	r3, [r7, #7]
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	f003 0304 	and.w	r3, r3, #4
 800d868:	4413      	add	r3, r2
 800d86a:	3314      	adds	r3, #20
 800d86c:	69ba      	ldr	r2, [r7, #24]
 800d86e:	4413      	add	r3, r2
 800d870:	697a      	ldr	r2, [r7, #20]
 800d872:	429a      	cmp	r2, r3
 800d874:	d006      	beq.n	800d884 <tcp_output_fill_options+0x64>
 800d876:	4b05      	ldr	r3, [pc, #20]	@ (800d88c <tcp_output_fill_options+0x6c>)
 800d878:	f240 7275 	movw	r2, #1909	@ 0x775
 800d87c:	4906      	ldr	r1, [pc, #24]	@ (800d898 <tcp_output_fill_options+0x78>)
 800d87e:	4805      	ldr	r0, [pc, #20]	@ (800d894 <tcp_output_fill_options+0x74>)
 800d880:	f004 fc7a 	bl	8012178 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d884:	bf00      	nop
 800d886:	3720      	adds	r7, #32
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	08014ac0 	.word	0x08014ac0
 800d890:	080151f0 	.word	0x080151f0
 800d894:	08014b14 	.word	0x08014b14
 800d898:	080150e8 	.word	0x080150e8

0800d89c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b08a      	sub	sp, #40	@ 0x28
 800d8a0:	af04      	add	r7, sp, #16
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
 800d8a8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d106      	bne.n	800d8be <tcp_output_control_segment+0x22>
 800d8b0:	4b1c      	ldr	r3, [pc, #112]	@ (800d924 <tcp_output_control_segment+0x88>)
 800d8b2:	f240 7287 	movw	r2, #1927	@ 0x787
 800d8b6:	491c      	ldr	r1, [pc, #112]	@ (800d928 <tcp_output_control_segment+0x8c>)
 800d8b8:	481c      	ldr	r0, [pc, #112]	@ (800d92c <tcp_output_control_segment+0x90>)
 800d8ba:	f004 fc5d 	bl	8012178 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d8be:	683a      	ldr	r2, [r7, #0]
 800d8c0:	6879      	ldr	r1, [r7, #4]
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f7fe faea 	bl	800be9c <tcp_route>
 800d8c8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d102      	bne.n	800d8d6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d8d0:	23fc      	movs	r3, #252	@ 0xfc
 800d8d2:	75fb      	strb	r3, [r7, #23]
 800d8d4:	e01c      	b.n	800d910 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d006      	beq.n	800d8ea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	7adb      	ldrb	r3, [r3, #11]
 800d8e0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	7a9b      	ldrb	r3, [r3, #10]
 800d8e6:	757b      	strb	r3, [r7, #21]
 800d8e8:	e003      	b.n	800d8f2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d8ea:	23ff      	movs	r3, #255	@ 0xff
 800d8ec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d8f2:	7dba      	ldrb	r2, [r7, #22]
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	9302      	str	r3, [sp, #8]
 800d8f8:	2306      	movs	r3, #6
 800d8fa:	9301      	str	r3, [sp, #4]
 800d8fc:	7d7b      	ldrb	r3, [r7, #21]
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	4613      	mov	r3, r2
 800d902:	683a      	ldr	r2, [r7, #0]
 800d904:	6879      	ldr	r1, [r7, #4]
 800d906:	68b8      	ldr	r0, [r7, #8]
 800d908:	f001 ff70 	bl	800f7ec <ip4_output_if>
 800d90c:	4603      	mov	r3, r0
 800d90e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d910:	68b8      	ldr	r0, [r7, #8]
 800d912:	f7f9 ff95 	bl	8007840 <pbuf_free>
  return err;
 800d916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3718      	adds	r7, #24
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	08014ac0 	.word	0x08014ac0
 800d928:	08015218 	.word	0x08015218
 800d92c:	08014b14 	.word	0x08014b14

0800d930 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d930:	b590      	push	{r4, r7, lr}
 800d932:	b08b      	sub	sp, #44	@ 0x2c
 800d934:	af04      	add	r7, sp, #16
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
 800d93c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d106      	bne.n	800d952 <tcp_rst+0x22>
 800d944:	4b1f      	ldr	r3, [pc, #124]	@ (800d9c4 <tcp_rst+0x94>)
 800d946:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d94a:	491f      	ldr	r1, [pc, #124]	@ (800d9c8 <tcp_rst+0x98>)
 800d94c:	481f      	ldr	r0, [pc, #124]	@ (800d9cc <tcp_rst+0x9c>)
 800d94e:	f004 fc13 	bl	8012178 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d954:	2b00      	cmp	r3, #0
 800d956:	d106      	bne.n	800d966 <tcp_rst+0x36>
 800d958:	4b1a      	ldr	r3, [pc, #104]	@ (800d9c4 <tcp_rst+0x94>)
 800d95a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d95e:	491c      	ldr	r1, [pc, #112]	@ (800d9d0 <tcp_rst+0xa0>)
 800d960:	481a      	ldr	r0, [pc, #104]	@ (800d9cc <tcp_rst+0x9c>)
 800d962:	f004 fc09 	bl	8012178 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d966:	2300      	movs	r3, #0
 800d968:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d96a:	f246 0308 	movw	r3, #24584	@ 0x6008
 800d96e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d970:	7dfb      	ldrb	r3, [r7, #23]
 800d972:	b29c      	uxth	r4, r3
 800d974:	68b8      	ldr	r0, [r7, #8]
 800d976:	f7f8 fc1b 	bl	80061b0 <lwip_htonl>
 800d97a:	4602      	mov	r2, r0
 800d97c:	8abb      	ldrh	r3, [r7, #20]
 800d97e:	9303      	str	r3, [sp, #12]
 800d980:	2314      	movs	r3, #20
 800d982:	9302      	str	r3, [sp, #8]
 800d984:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d986:	9301      	str	r3, [sp, #4]
 800d988:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	4613      	mov	r3, r2
 800d98e:	2200      	movs	r2, #0
 800d990:	4621      	mov	r1, r4
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7ff fe94 	bl	800d6c0 <tcp_output_alloc_header_common>
 800d998:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00c      	beq.n	800d9ba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d9a0:	7dfb      	ldrb	r3, [r7, #23]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	6939      	ldr	r1, [r7, #16]
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f7ff ff3a 	bl	800d820 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ae:	683a      	ldr	r2, [r7, #0]
 800d9b0:	6939      	ldr	r1, [r7, #16]
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f7ff ff72 	bl	800d89c <tcp_output_control_segment>
 800d9b8:	e000      	b.n	800d9bc <tcp_rst+0x8c>
    return;
 800d9ba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d9bc:	371c      	adds	r7, #28
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd90      	pop	{r4, r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	08014ac0 	.word	0x08014ac0
 800d9c8:	08015244 	.word	0x08015244
 800d9cc:	08014b14 	.word	0x08014b14
 800d9d0:	08015260 	.word	0x08015260

0800d9d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d9d4:	b590      	push	{r4, r7, lr}
 800d9d6:	b087      	sub	sp, #28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d106      	bne.n	800d9f8 <tcp_send_empty_ack+0x24>
 800d9ea:	4b28      	ldr	r3, [pc, #160]	@ (800da8c <tcp_send_empty_ack+0xb8>)
 800d9ec:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d9f0:	4927      	ldr	r1, [pc, #156]	@ (800da90 <tcp_send_empty_ack+0xbc>)
 800d9f2:	4828      	ldr	r0, [pc, #160]	@ (800da94 <tcp_send_empty_ack+0xc0>)
 800d9f4:	f004 fbc0 	bl	8012178 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d9f8:	7dfb      	ldrb	r3, [r7, #23]
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f003 0304 	and.w	r3, r3, #4
 800da02:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800da04:	7d7b      	ldrb	r3, [r7, #21]
 800da06:	b29c      	uxth	r4, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7f8 fbcf 	bl	80061b0 <lwip_htonl>
 800da12:	4603      	mov	r3, r0
 800da14:	2200      	movs	r2, #0
 800da16:	4621      	mov	r1, r4
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7ff fec3 	bl	800d7a4 <tcp_output_alloc_header>
 800da1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d109      	bne.n	800da3a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	8b5b      	ldrh	r3, [r3, #26]
 800da2a:	f043 0303 	orr.w	r3, r3, #3
 800da2e:	b29a      	uxth	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800da34:	f06f 0301 	mvn.w	r3, #1
 800da38:	e023      	b.n	800da82 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800da3a:	7dbb      	ldrb	r3, [r7, #22]
 800da3c:	7dfa      	ldrb	r2, [r7, #23]
 800da3e:	6939      	ldr	r1, [r7, #16]
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7ff feed 	bl	800d820 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	3304      	adds	r3, #4
 800da4c:	6939      	ldr	r1, [r7, #16]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7ff ff24 	bl	800d89c <tcp_output_control_segment>
 800da54:	4603      	mov	r3, r0
 800da56:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800da58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d007      	beq.n	800da70 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	8b5b      	ldrh	r3, [r3, #26]
 800da64:	f043 0303 	orr.w	r3, r3, #3
 800da68:	b29a      	uxth	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	835a      	strh	r2, [r3, #26]
 800da6e:	e006      	b.n	800da7e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	8b5b      	ldrh	r3, [r3, #26]
 800da74:	f023 0303 	bic.w	r3, r3, #3
 800da78:	b29a      	uxth	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800da7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da82:	4618      	mov	r0, r3
 800da84:	371c      	adds	r7, #28
 800da86:	46bd      	mov	sp, r7
 800da88:	bd90      	pop	{r4, r7, pc}
 800da8a:	bf00      	nop
 800da8c:	08014ac0 	.word	0x08014ac0
 800da90:	0801527c 	.word	0x0801527c
 800da94:	08014b14 	.word	0x08014b14

0800da98 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800da98:	b590      	push	{r4, r7, lr}
 800da9a:	b087      	sub	sp, #28
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800daa0:	2300      	movs	r3, #0
 800daa2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d106      	bne.n	800dab8 <tcp_keepalive+0x20>
 800daaa:	4b18      	ldr	r3, [pc, #96]	@ (800db0c <tcp_keepalive+0x74>)
 800daac:	f640 0224 	movw	r2, #2084	@ 0x824
 800dab0:	4917      	ldr	r1, [pc, #92]	@ (800db10 <tcp_keepalive+0x78>)
 800dab2:	4818      	ldr	r0, [pc, #96]	@ (800db14 <tcp_keepalive+0x7c>)
 800dab4:	f004 fb60 	bl	8012178 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dab8:	7dfb      	ldrb	r3, [r7, #23]
 800daba:	b29c      	uxth	r4, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dac0:	3b01      	subs	r3, #1
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7f8 fb74 	bl	80061b0 <lwip_htonl>
 800dac8:	4603      	mov	r3, r0
 800daca:	2200      	movs	r2, #0
 800dacc:	4621      	mov	r1, r4
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7ff fe68 	bl	800d7a4 <tcp_output_alloc_header>
 800dad4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d102      	bne.n	800dae2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dadc:	f04f 33ff 	mov.w	r3, #4294967295
 800dae0:	e010      	b.n	800db04 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dae2:	7dfb      	ldrb	r3, [r7, #23]
 800dae4:	2200      	movs	r2, #0
 800dae6:	6939      	ldr	r1, [r7, #16]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7ff fe99 	bl	800d820 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	3304      	adds	r3, #4
 800daf4:	6939      	ldr	r1, [r7, #16]
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7ff fed0 	bl	800d89c <tcp_output_control_segment>
 800dafc:	4603      	mov	r3, r0
 800dafe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800db00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db04:	4618      	mov	r0, r3
 800db06:	371c      	adds	r7, #28
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd90      	pop	{r4, r7, pc}
 800db0c:	08014ac0 	.word	0x08014ac0
 800db10:	0801529c 	.word	0x0801529c
 800db14:	08014b14 	.word	0x08014b14

0800db18 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800db18:	b590      	push	{r4, r7, lr}
 800db1a:	b08b      	sub	sp, #44	@ 0x2c
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800db20:	2300      	movs	r3, #0
 800db22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d106      	bne.n	800db3a <tcp_zero_window_probe+0x22>
 800db2c:	4b4c      	ldr	r3, [pc, #304]	@ (800dc60 <tcp_zero_window_probe+0x148>)
 800db2e:	f640 024f 	movw	r2, #2127	@ 0x84f
 800db32:	494c      	ldr	r1, [pc, #304]	@ (800dc64 <tcp_zero_window_probe+0x14c>)
 800db34:	484c      	ldr	r0, [pc, #304]	@ (800dc68 <tcp_zero_window_probe+0x150>)
 800db36:	f004 fb1f 	bl	8012178 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db3e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800db40:	6a3b      	ldr	r3, [r7, #32]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d101      	bne.n	800db4a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	e086      	b.n	800dc58 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800db50:	2bff      	cmp	r3, #255	@ 0xff
 800db52:	d007      	beq.n	800db64 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800db5a:	3301      	adds	r3, #1
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	899b      	ldrh	r3, [r3, #12]
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7f8 fb09 	bl	8006184 <lwip_htons>
 800db72:	4603      	mov	r3, r0
 800db74:	b2db      	uxtb	r3, r3
 800db76:	f003 0301 	and.w	r3, r3, #1
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d005      	beq.n	800db8a <tcp_zero_window_probe+0x72>
 800db7e:	6a3b      	ldr	r3, [r7, #32]
 800db80:	891b      	ldrh	r3, [r3, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d101      	bne.n	800db8a <tcp_zero_window_probe+0x72>
 800db86:	2301      	movs	r3, #1
 800db88:	e000      	b.n	800db8c <tcp_zero_window_probe+0x74>
 800db8a:	2300      	movs	r3, #0
 800db8c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800db8e:	7ffb      	ldrb	r3, [r7, #31]
 800db90:	2b00      	cmp	r3, #0
 800db92:	bf0c      	ite	eq
 800db94:	2301      	moveq	r3, #1
 800db96:	2300      	movne	r3, #0
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800db9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dba0:	b299      	uxth	r1, r3
 800dba2:	6a3b      	ldr	r3, [r7, #32]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	8bba      	ldrh	r2, [r7, #28]
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7ff fdfa 	bl	800d7a4 <tcp_output_alloc_header>
 800dbb0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d102      	bne.n	800dbbe <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbbc:	e04c      	b.n	800dc58 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dbc4:	7ffb      	ldrb	r3, [r7, #31]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d011      	beq.n	800dbee <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	899b      	ldrh	r3, [r3, #12]
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	b21b      	sxth	r3, r3
 800dbd2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dbd6:	b21c      	sxth	r4, r3
 800dbd8:	2011      	movs	r0, #17
 800dbda:	f7f8 fad3 	bl	8006184 <lwip_htons>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	b21b      	sxth	r3, r3
 800dbe2:	4323      	orrs	r3, r4
 800dbe4:	b21b      	sxth	r3, r3
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	819a      	strh	r2, [r3, #12]
 800dbec:	e010      	b.n	800dc10 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	3314      	adds	r3, #20
 800dbf4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	6858      	ldr	r0, [r3, #4]
 800dbfa:	6a3b      	ldr	r3, [r7, #32]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	891a      	ldrh	r2, [r3, #8]
 800dc00:	6a3b      	ldr	r3, [r7, #32]
 800dc02:	891b      	ldrh	r3, [r3, #8]
 800dc04:	1ad3      	subs	r3, r2, r3
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	2201      	movs	r2, #1
 800dc0a:	6939      	ldr	r1, [r7, #16]
 800dc0c:	f7fa f802 	bl	8007c14 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dc10:	6a3b      	ldr	r3, [r7, #32]
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7f8 faca 	bl	80061b0 <lwip_htonl>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	3301      	adds	r3, #1
 800dc20:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	da02      	bge.n	800dc34 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc38:	2200      	movs	r2, #0
 800dc3a:	69b9      	ldr	r1, [r7, #24]
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7ff fdef 	bl	800d820 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	3304      	adds	r3, #4
 800dc48:	69b9      	ldr	r1, [r7, #24]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff fe26 	bl	800d89c <tcp_output_control_segment>
 800dc50:	4603      	mov	r3, r0
 800dc52:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dc54:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	372c      	adds	r7, #44	@ 0x2c
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd90      	pop	{r4, r7, pc}
 800dc60:	08014ac0 	.word	0x08014ac0
 800dc64:	080152b8 	.word	0x080152b8
 800dc68:	08014b14 	.word	0x08014b14

0800dc6c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800dc74:	f7fa f8bc 	bl	8007df0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dc78:	4b0a      	ldr	r3, [pc, #40]	@ (800dca4 <tcpip_tcp_timer+0x38>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d103      	bne.n	800dc88 <tcpip_tcp_timer+0x1c>
 800dc80:	4b09      	ldr	r3, [pc, #36]	@ (800dca8 <tcpip_tcp_timer+0x3c>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d005      	beq.n	800dc94 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dc88:	2200      	movs	r2, #0
 800dc8a:	4908      	ldr	r1, [pc, #32]	@ (800dcac <tcpip_tcp_timer+0x40>)
 800dc8c:	20fa      	movs	r0, #250	@ 0xfa
 800dc8e:	f000 f8f3 	bl	800de78 <sys_timeout>
 800dc92:	e003      	b.n	800dc9c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dc94:	4b06      	ldr	r3, [pc, #24]	@ (800dcb0 <tcpip_tcp_timer+0x44>)
 800dc96:	2200      	movs	r2, #0
 800dc98:	601a      	str	r2, [r3, #0]
  }
}
 800dc9a:	bf00      	nop
 800dc9c:	bf00      	nop
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	2000847c 	.word	0x2000847c
 800dca8:	20008480 	.word	0x20008480
 800dcac:	0800dc6d 	.word	0x0800dc6d
 800dcb0:	200084c8 	.word	0x200084c8

0800dcb4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dcb8:	4b0a      	ldr	r3, [pc, #40]	@ (800dce4 <tcp_timer_needed+0x30>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d10f      	bne.n	800dce0 <tcp_timer_needed+0x2c>
 800dcc0:	4b09      	ldr	r3, [pc, #36]	@ (800dce8 <tcp_timer_needed+0x34>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d103      	bne.n	800dcd0 <tcp_timer_needed+0x1c>
 800dcc8:	4b08      	ldr	r3, [pc, #32]	@ (800dcec <tcp_timer_needed+0x38>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d007      	beq.n	800dce0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dcd0:	4b04      	ldr	r3, [pc, #16]	@ (800dce4 <tcp_timer_needed+0x30>)
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	4905      	ldr	r1, [pc, #20]	@ (800dcf0 <tcp_timer_needed+0x3c>)
 800dcda:	20fa      	movs	r0, #250	@ 0xfa
 800dcdc:	f000 f8cc 	bl	800de78 <sys_timeout>
  }
}
 800dce0:	bf00      	nop
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	200084c8 	.word	0x200084c8
 800dce8:	2000847c 	.word	0x2000847c
 800dcec:	20008480 	.word	0x20008480
 800dcf0:	0800dc6d 	.word	0x0800dc6d

0800dcf4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dd00:	2006      	movs	r0, #6
 800dd02:	f7f8 feb7 	bl	8006a74 <memp_malloc>
 800dd06:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d109      	bne.n	800dd22 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d151      	bne.n	800ddb8 <sys_timeout_abs+0xc4>
 800dd14:	4b2a      	ldr	r3, [pc, #168]	@ (800ddc0 <sys_timeout_abs+0xcc>)
 800dd16:	22be      	movs	r2, #190	@ 0xbe
 800dd18:	492a      	ldr	r1, [pc, #168]	@ (800ddc4 <sys_timeout_abs+0xd0>)
 800dd1a:	482b      	ldr	r0, [pc, #172]	@ (800ddc8 <sys_timeout_abs+0xd4>)
 800dd1c:	f004 fa2c 	bl	8012178 <iprintf>
    return;
 800dd20:	e04a      	b.n	800ddb8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	2200      	movs	r2, #0
 800dd26:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	68ba      	ldr	r2, [r7, #8]
 800dd2c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dd3a:	4b24      	ldr	r3, [pc, #144]	@ (800ddcc <sys_timeout_abs+0xd8>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d103      	bne.n	800dd4a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dd42:	4a22      	ldr	r2, [pc, #136]	@ (800ddcc <sys_timeout_abs+0xd8>)
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	6013      	str	r3, [r2, #0]
    return;
 800dd48:	e037      	b.n	800ddba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	685a      	ldr	r2, [r3, #4]
 800dd4e:	4b1f      	ldr	r3, [pc, #124]	@ (800ddcc <sys_timeout_abs+0xd8>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	0fdb      	lsrs	r3, r3, #31
 800dd58:	f003 0301 	and.w	r3, r3, #1
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d007      	beq.n	800dd72 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800dd62:	4b1a      	ldr	r3, [pc, #104]	@ (800ddcc <sys_timeout_abs+0xd8>)
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800dd6a:	4a18      	ldr	r2, [pc, #96]	@ (800ddcc <sys_timeout_abs+0xd8>)
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	6013      	str	r3, [r2, #0]
 800dd70:	e023      	b.n	800ddba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800dd72:	4b16      	ldr	r3, [pc, #88]	@ (800ddcc <sys_timeout_abs+0xd8>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	617b      	str	r3, [r7, #20]
 800dd78:	e01a      	b.n	800ddb0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00b      	beq.n	800dd9a <sys_timeout_abs+0xa6>
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	685a      	ldr	r2, [r3, #4]
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	0fdb      	lsrs	r3, r3, #31
 800dd90:	f003 0301 	and.w	r3, r3, #1
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d007      	beq.n	800ddaa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	601a      	str	r2, [r3, #0]
        break;
 800dda8:	e007      	b.n	800ddba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	617b      	str	r3, [r7, #20]
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d1e1      	bne.n	800dd7a <sys_timeout_abs+0x86>
 800ddb6:	e000      	b.n	800ddba <sys_timeout_abs+0xc6>
    return;
 800ddb8:	bf00      	nop
      }
    }
  }
}
 800ddba:	3718      	adds	r7, #24
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	080152dc 	.word	0x080152dc
 800ddc4:	08015310 	.word	0x08015310
 800ddc8:	08015350 	.word	0x08015350
 800ddcc:	200084c0 	.word	0x200084c0

0800ddd0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b086      	sub	sp, #24
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	4798      	blx	r3

  now = sys_now();
 800dde2:	f7f7 ffcf 	bl	8005d84 <sys_now>
 800dde6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	4b0f      	ldr	r3, [pc, #60]	@ (800de2c <lwip_cyclic_timer+0x5c>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ddf4:	68fa      	ldr	r2, [r7, #12]
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	0fdb      	lsrs	r3, r3, #31
 800ddfc:	f003 0301 	and.w	r3, r3, #1
 800de00:	b2db      	uxtb	r3, r3
 800de02:	2b00      	cmp	r3, #0
 800de04:	d009      	beq.n	800de1a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	4413      	add	r3, r2
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	4907      	ldr	r1, [pc, #28]	@ (800de30 <lwip_cyclic_timer+0x60>)
 800de12:	4618      	mov	r0, r3
 800de14:	f7ff ff6e 	bl	800dcf4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800de18:	e004      	b.n	800de24 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	4904      	ldr	r1, [pc, #16]	@ (800de30 <lwip_cyclic_timer+0x60>)
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f7ff ff68 	bl	800dcf4 <sys_timeout_abs>
}
 800de24:	bf00      	nop
 800de26:	3718      	adds	r7, #24
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	200084c4 	.word	0x200084c4
 800de30:	0800ddd1 	.word	0x0800ddd1

0800de34 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800de3a:	2301      	movs	r3, #1
 800de3c:	607b      	str	r3, [r7, #4]
 800de3e:	e00e      	b.n	800de5e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800de40:	4a0b      	ldr	r2, [pc, #44]	@ (800de70 <sys_timeouts_init+0x3c>)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	00db      	lsls	r3, r3, #3
 800de4c:	4a08      	ldr	r2, [pc, #32]	@ (800de70 <sys_timeouts_init+0x3c>)
 800de4e:	4413      	add	r3, r2
 800de50:	461a      	mov	r2, r3
 800de52:	4908      	ldr	r1, [pc, #32]	@ (800de74 <sys_timeouts_init+0x40>)
 800de54:	f000 f810 	bl	800de78 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	3301      	adds	r3, #1
 800de5c:	607b      	str	r3, [r7, #4]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2b02      	cmp	r3, #2
 800de62:	d9ed      	bls.n	800de40 <sys_timeouts_init+0xc>
  }
}
 800de64:	bf00      	nop
 800de66:	bf00      	nop
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	0801601c 	.word	0x0801601c
 800de74:	0800ddd1 	.word	0x0800ddd1

0800de78 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b086      	sub	sp, #24
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de8a:	d306      	bcc.n	800de9a <sys_timeout+0x22>
 800de8c:	4b0a      	ldr	r3, [pc, #40]	@ (800deb8 <sys_timeout+0x40>)
 800de8e:	f240 1229 	movw	r2, #297	@ 0x129
 800de92:	490a      	ldr	r1, [pc, #40]	@ (800debc <sys_timeout+0x44>)
 800de94:	480a      	ldr	r0, [pc, #40]	@ (800dec0 <sys_timeout+0x48>)
 800de96:	f004 f96f 	bl	8012178 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800de9a:	f7f7 ff73 	bl	8005d84 <sys_now>
 800de9e:	4602      	mov	r2, r0
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	4413      	add	r3, r2
 800dea4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	68b9      	ldr	r1, [r7, #8]
 800deaa:	6978      	ldr	r0, [r7, #20]
 800deac:	f7ff ff22 	bl	800dcf4 <sys_timeout_abs>
#endif
}
 800deb0:	bf00      	nop
 800deb2:	3718      	adds	r7, #24
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	080152dc 	.word	0x080152dc
 800debc:	08015378 	.word	0x08015378
 800dec0:	08015350 	.word	0x08015350

0800dec4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800deca:	f7f7 ff5b 	bl	8005d84 <sys_now>
 800dece:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ded0:	4b1a      	ldr	r3, [pc, #104]	@ (800df3c <sys_check_timeouts+0x78>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d001      	beq.n	800dede <sys_check_timeouts+0x1a>
 800deda:	f7f9 f977 	bl	80071cc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800dede:	4b18      	ldr	r3, [pc, #96]	@ (800df40 <sys_check_timeouts+0x7c>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d022      	beq.n	800df30 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	0fdb      	lsrs	r3, r3, #31
 800def4:	f003 0301 	and.w	r3, r3, #1
 800def8:	b2db      	uxtb	r3, r3
 800defa:	2b00      	cmp	r3, #0
 800defc:	d11a      	bne.n	800df34 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4a0f      	ldr	r2, [pc, #60]	@ (800df40 <sys_check_timeouts+0x7c>)
 800df04:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	689b      	ldr	r3, [r3, #8]
 800df0a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	4a0b      	ldr	r2, [pc, #44]	@ (800df44 <sys_check_timeouts+0x80>)
 800df18:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800df1a:	68b9      	ldr	r1, [r7, #8]
 800df1c:	2006      	movs	r0, #6
 800df1e:	f7f8 fe19 	bl	8006b54 <memp_free>
    if (handler != NULL) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d0d3      	beq.n	800ded0 <sys_check_timeouts+0xc>
      handler(arg);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6838      	ldr	r0, [r7, #0]
 800df2c:	4798      	blx	r3
  do {
 800df2e:	e7cf      	b.n	800ded0 <sys_check_timeouts+0xc>
      return;
 800df30:	bf00      	nop
 800df32:	e000      	b.n	800df36 <sys_check_timeouts+0x72>
      return;
 800df34:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	2000846d 	.word	0x2000846d
 800df40:	200084c0 	.word	0x200084c0
 800df44:	200084c4 	.word	0x200084c4

0800df48 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800df4c:	f004 f802 	bl	8011f54 <rand>
 800df50:	4603      	mov	r3, r0
 800df52:	b29b      	uxth	r3, r3
 800df54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800df58:	b29b      	uxth	r3, r3
 800df5a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800df5e:	b29a      	uxth	r2, r3
 800df60:	4b01      	ldr	r3, [pc, #4]	@ (800df68 <udp_init+0x20>)
 800df62:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800df64:	bf00      	nop
 800df66:	bd80      	pop	{r7, pc}
 800df68:	20000028 	.word	0x20000028

0800df6c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	4613      	mov	r3, r2
 800df78:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d105      	bne.n	800df8c <udp_input_local_match+0x20>
 800df80:	4b27      	ldr	r3, [pc, #156]	@ (800e020 <udp_input_local_match+0xb4>)
 800df82:	2287      	movs	r2, #135	@ 0x87
 800df84:	4927      	ldr	r1, [pc, #156]	@ (800e024 <udp_input_local_match+0xb8>)
 800df86:	4828      	ldr	r0, [pc, #160]	@ (800e028 <udp_input_local_match+0xbc>)
 800df88:	f004 f8f6 	bl	8012178 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d105      	bne.n	800df9e <udp_input_local_match+0x32>
 800df92:	4b23      	ldr	r3, [pc, #140]	@ (800e020 <udp_input_local_match+0xb4>)
 800df94:	2288      	movs	r2, #136	@ 0x88
 800df96:	4925      	ldr	r1, [pc, #148]	@ (800e02c <udp_input_local_match+0xc0>)
 800df98:	4823      	ldr	r0, [pc, #140]	@ (800e028 <udp_input_local_match+0xbc>)
 800df9a:	f004 f8ed 	bl	8012178 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	7a1b      	ldrb	r3, [r3, #8]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00b      	beq.n	800dfbe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	7a1a      	ldrb	r2, [r3, #8]
 800dfaa:	4b21      	ldr	r3, [pc, #132]	@ (800e030 <udp_input_local_match+0xc4>)
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d001      	beq.n	800dfbe <udp_input_local_match+0x52>
    return 0;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	e02b      	b.n	800e016 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800dfbe:	79fb      	ldrb	r3, [r7, #7]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d018      	beq.n	800dff6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d013      	beq.n	800dff2 <udp_input_local_match+0x86>
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00f      	beq.n	800dff2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dfd2:	4b17      	ldr	r3, [pc, #92]	@ (800e030 <udp_input_local_match+0xc4>)
 800dfd4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfda:	d00a      	beq.n	800dff2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	4b13      	ldr	r3, [pc, #76]	@ (800e030 <udp_input_local_match+0xc4>)
 800dfe2:	695b      	ldr	r3, [r3, #20]
 800dfe4:	405a      	eors	r2, r3
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	3308      	adds	r3, #8
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d110      	bne.n	800e014 <udp_input_local_match+0xa8>
          return 1;
 800dff2:	2301      	movs	r3, #1
 800dff4:	e00f      	b.n	800e016 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d009      	beq.n	800e010 <udp_input_local_match+0xa4>
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d005      	beq.n	800e010 <udp_input_local_match+0xa4>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	4b09      	ldr	r3, [pc, #36]	@ (800e030 <udp_input_local_match+0xc4>)
 800e00a:	695b      	ldr	r3, [r3, #20]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d101      	bne.n	800e014 <udp_input_local_match+0xa8>
        return 1;
 800e010:	2301      	movs	r3, #1
 800e012:	e000      	b.n	800e016 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	080153c4 	.word	0x080153c4
 800e024:	080153f4 	.word	0x080153f4
 800e028:	08015418 	.word	0x08015418
 800e02c:	08015440 	.word	0x08015440
 800e030:	20004f00 	.word	0x20004f00

0800e034 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e034:	b590      	push	{r4, r7, lr}
 800e036:	b08d      	sub	sp, #52	@ 0x34
 800e038:	af02      	add	r7, sp, #8
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d105      	bne.n	800e054 <udp_input+0x20>
 800e048:	4b7c      	ldr	r3, [pc, #496]	@ (800e23c <udp_input+0x208>)
 800e04a:	22cf      	movs	r2, #207	@ 0xcf
 800e04c:	497c      	ldr	r1, [pc, #496]	@ (800e240 <udp_input+0x20c>)
 800e04e:	487d      	ldr	r0, [pc, #500]	@ (800e244 <udp_input+0x210>)
 800e050:	f004 f892 	bl	8012178 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d105      	bne.n	800e066 <udp_input+0x32>
 800e05a:	4b78      	ldr	r3, [pc, #480]	@ (800e23c <udp_input+0x208>)
 800e05c:	22d0      	movs	r2, #208	@ 0xd0
 800e05e:	497a      	ldr	r1, [pc, #488]	@ (800e248 <udp_input+0x214>)
 800e060:	4878      	ldr	r0, [pc, #480]	@ (800e244 <udp_input+0x210>)
 800e062:	f004 f889 	bl	8012178 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	895b      	ldrh	r3, [r3, #10]
 800e06a:	2b07      	cmp	r3, #7
 800e06c:	d803      	bhi.n	800e076 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f7f9 fbe6 	bl	8007840 <pbuf_free>
    goto end;
 800e074:	e0de      	b.n	800e234 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e07c:	4b73      	ldr	r3, [pc, #460]	@ (800e24c <udp_input+0x218>)
 800e07e:	695b      	ldr	r3, [r3, #20]
 800e080:	4a72      	ldr	r2, [pc, #456]	@ (800e24c <udp_input+0x218>)
 800e082:	6812      	ldr	r2, [r2, #0]
 800e084:	4611      	mov	r1, r2
 800e086:	4618      	mov	r0, r3
 800e088:	f001 fc88 	bl	800f99c <ip4_addr_isbroadcast_u32>
 800e08c:	4603      	mov	r3, r0
 800e08e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	881b      	ldrh	r3, [r3, #0]
 800e094:	b29b      	uxth	r3, r3
 800e096:	4618      	mov	r0, r3
 800e098:	f7f8 f874 	bl	8006184 <lwip_htons>
 800e09c:	4603      	mov	r3, r0
 800e09e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	885b      	ldrh	r3, [r3, #2]
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7f8 f86c 	bl	8006184 <lwip_htons>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0bc:	4b64      	ldr	r3, [pc, #400]	@ (800e250 <udp_input+0x21c>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0c2:	e054      	b.n	800e16e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c6:	8a5b      	ldrh	r3, [r3, #18]
 800e0c8:	89fa      	ldrh	r2, [r7, #14]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d14a      	bne.n	800e164 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e0ce:	7cfb      	ldrb	r3, [r7, #19]
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	6839      	ldr	r1, [r7, #0]
 800e0d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0d6:	f7ff ff49 	bl	800df6c <udp_input_local_match>
 800e0da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d041      	beq.n	800e164 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e2:	7c1b      	ldrb	r3, [r3, #16]
 800e0e4:	f003 0304 	and.w	r3, r3, #4
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d11d      	bne.n	800e128 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d102      	bne.n	800e0f8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f4:	61fb      	str	r3, [r7, #28]
 800e0f6:	e017      	b.n	800e128 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e0f8:	7cfb      	ldrb	r3, [r7, #19]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d014      	beq.n	800e128 <udp_input+0xf4>
 800e0fe:	4b53      	ldr	r3, [pc, #332]	@ (800e24c <udp_input+0x218>)
 800e100:	695b      	ldr	r3, [r3, #20]
 800e102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e106:	d10f      	bne.n	800e128 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	3304      	adds	r3, #4
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	429a      	cmp	r2, r3
 800e114:	d008      	beq.n	800e128 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	3304      	adds	r3, #4
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	429a      	cmp	r2, r3
 800e122:	d101      	bne.n	800e128 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e126:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12a:	8a9b      	ldrh	r3, [r3, #20]
 800e12c:	8a3a      	ldrh	r2, [r7, #16]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d118      	bne.n	800e164 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e134:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e136:	2b00      	cmp	r3, #0
 800e138:	d005      	beq.n	800e146 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13c:	685a      	ldr	r2, [r3, #4]
 800e13e:	4b43      	ldr	r3, [pc, #268]	@ (800e24c <udp_input+0x218>)
 800e140:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e142:	429a      	cmp	r2, r3
 800e144:	d10e      	bne.n	800e164 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e146:	6a3b      	ldr	r3, [r7, #32]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d014      	beq.n	800e176 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14e:	68da      	ldr	r2, [r3, #12]
 800e150:	6a3b      	ldr	r3, [r7, #32]
 800e152:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e154:	4b3e      	ldr	r3, [pc, #248]	@ (800e250 <udp_input+0x21c>)
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e15c:	4a3c      	ldr	r2, [pc, #240]	@ (800e250 <udp_input+0x21c>)
 800e15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e160:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e162:	e008      	b.n	800e176 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e166:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1a7      	bne.n	800e0c4 <udp_input+0x90>
 800e174:	e000      	b.n	800e178 <udp_input+0x144>
        break;
 800e176:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d101      	bne.n	800e182 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e184:	2b00      	cmp	r3, #0
 800e186:	d002      	beq.n	800e18e <udp_input+0x15a>
    for_us = 1;
 800e188:	2301      	movs	r3, #1
 800e18a:	76fb      	strb	r3, [r7, #27]
 800e18c:	e00a      	b.n	800e1a4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	3304      	adds	r3, #4
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	4b2d      	ldr	r3, [pc, #180]	@ (800e24c <udp_input+0x218>)
 800e196:	695b      	ldr	r3, [r3, #20]
 800e198:	429a      	cmp	r2, r3
 800e19a:	bf0c      	ite	eq
 800e19c:	2301      	moveq	r3, #1
 800e19e:	2300      	movne	r3, #0
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e1a4:	7efb      	ldrb	r3, [r7, #27]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d041      	beq.n	800e22e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e1aa:	2108      	movs	r1, #8
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7f9 fac1 	bl	8007734 <pbuf_remove_header>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00a      	beq.n	800e1ce <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e1b8:	4b20      	ldr	r3, [pc, #128]	@ (800e23c <udp_input+0x208>)
 800e1ba:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e1be:	4925      	ldr	r1, [pc, #148]	@ (800e254 <udp_input+0x220>)
 800e1c0:	4820      	ldr	r0, [pc, #128]	@ (800e244 <udp_input+0x210>)
 800e1c2:	f003 ffd9 	bl	8012178 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f7f9 fb3a 	bl	8007840 <pbuf_free>
      goto end;
 800e1cc:	e032      	b.n	800e234 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d012      	beq.n	800e1fa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00a      	beq.n	800e1f2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1de:	699c      	ldr	r4, [r3, #24]
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e2:	69d8      	ldr	r0, [r3, #28]
 800e1e4:	8a3b      	ldrh	r3, [r7, #16]
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	4b1b      	ldr	r3, [pc, #108]	@ (800e258 <udp_input+0x224>)
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e1ee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e1f0:	e021      	b.n	800e236 <udp_input+0x202>
        pbuf_free(p);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f7f9 fb24 	bl	8007840 <pbuf_free>
        goto end;
 800e1f8:	e01c      	b.n	800e234 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e1fa:	7cfb      	ldrb	r3, [r7, #19]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d112      	bne.n	800e226 <udp_input+0x1f2>
 800e200:	4b12      	ldr	r3, [pc, #72]	@ (800e24c <udp_input+0x218>)
 800e202:	695b      	ldr	r3, [r3, #20]
 800e204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e208:	2be0      	cmp	r3, #224	@ 0xe0
 800e20a:	d00c      	beq.n	800e226 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e20c:	4b0f      	ldr	r3, [pc, #60]	@ (800e24c <udp_input+0x218>)
 800e20e:	899b      	ldrh	r3, [r3, #12]
 800e210:	3308      	adds	r3, #8
 800e212:	b29b      	uxth	r3, r3
 800e214:	b21b      	sxth	r3, r3
 800e216:	4619      	mov	r1, r3
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7f9 fafe 	bl	800781a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e21e:	2103      	movs	r1, #3
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f001 f89b 	bl	800f35c <icmp_dest_unreach>
      pbuf_free(p);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7f9 fb0a 	bl	8007840 <pbuf_free>
  return;
 800e22c:	e003      	b.n	800e236 <udp_input+0x202>
    pbuf_free(p);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f7f9 fb06 	bl	8007840 <pbuf_free>
  return;
 800e234:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e236:	372c      	adds	r7, #44	@ 0x2c
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd90      	pop	{r4, r7, pc}
 800e23c:	080153c4 	.word	0x080153c4
 800e240:	08015468 	.word	0x08015468
 800e244:	08015418 	.word	0x08015418
 800e248:	08015480 	.word	0x08015480
 800e24c:	20004f00 	.word	0x20004f00
 800e250:	200084cc 	.word	0x200084cc
 800e254:	0801549c 	.word	0x0801549c
 800e258:	20004f10 	.word	0x20004f10

0800e25c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b085      	sub	sp, #20
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d01e      	beq.n	800e2aa <udp_netif_ip_addr_changed+0x4e>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d01a      	beq.n	800e2aa <udp_netif_ip_addr_changed+0x4e>
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d017      	beq.n	800e2aa <udp_netif_ip_addr_changed+0x4e>
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d013      	beq.n	800e2aa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e282:	4b0d      	ldr	r3, [pc, #52]	@ (800e2b8 <udp_netif_ip_addr_changed+0x5c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	60fb      	str	r3, [r7, #12]
 800e288:	e00c      	b.n	800e2a4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	429a      	cmp	r2, r3
 800e294:	d103      	bne.n	800e29e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	60fb      	str	r3, [r7, #12]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d1ef      	bne.n	800e28a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e2aa:	bf00      	nop
 800e2ac:	3714      	adds	r7, #20
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop
 800e2b8:	200084cc 	.word	0x200084cc

0800e2bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e2c4:	4915      	ldr	r1, [pc, #84]	@ (800e31c <etharp_free_entry+0x60>)
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	005b      	lsls	r3, r3, #1
 800e2cc:	4413      	add	r3, r2
 800e2ce:	00db      	lsls	r3, r3, #3
 800e2d0:	440b      	add	r3, r1
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d013      	beq.n	800e300 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e2d8:	4910      	ldr	r1, [pc, #64]	@ (800e31c <etharp_free_entry+0x60>)
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	4613      	mov	r3, r2
 800e2de:	005b      	lsls	r3, r3, #1
 800e2e0:	4413      	add	r3, r2
 800e2e2:	00db      	lsls	r3, r3, #3
 800e2e4:	440b      	add	r3, r1
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7f9 faa9 	bl	8007840 <pbuf_free>
    arp_table[i].q = NULL;
 800e2ee:	490b      	ldr	r1, [pc, #44]	@ (800e31c <etharp_free_entry+0x60>)
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	005b      	lsls	r3, r3, #1
 800e2f6:	4413      	add	r3, r2
 800e2f8:	00db      	lsls	r3, r3, #3
 800e2fa:	440b      	add	r3, r1
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e300:	4906      	ldr	r1, [pc, #24]	@ (800e31c <etharp_free_entry+0x60>)
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	4613      	mov	r3, r2
 800e306:	005b      	lsls	r3, r3, #1
 800e308:	4413      	add	r3, r2
 800e30a:	00db      	lsls	r3, r3, #3
 800e30c:	440b      	add	r3, r1
 800e30e:	3314      	adds	r3, #20
 800e310:	2200      	movs	r2, #0
 800e312:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e314:	bf00      	nop
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	200084d0 	.word	0x200084d0

0800e320 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e326:	2300      	movs	r3, #0
 800e328:	607b      	str	r3, [r7, #4]
 800e32a:	e096      	b.n	800e45a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e32c:	494f      	ldr	r1, [pc, #316]	@ (800e46c <etharp_tmr+0x14c>)
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	4613      	mov	r3, r2
 800e332:	005b      	lsls	r3, r3, #1
 800e334:	4413      	add	r3, r2
 800e336:	00db      	lsls	r3, r3, #3
 800e338:	440b      	add	r3, r1
 800e33a:	3314      	adds	r3, #20
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e340:	78fb      	ldrb	r3, [r7, #3]
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 8086 	beq.w	800e454 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e348:	4948      	ldr	r1, [pc, #288]	@ (800e46c <etharp_tmr+0x14c>)
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	4613      	mov	r3, r2
 800e34e:	005b      	lsls	r3, r3, #1
 800e350:	4413      	add	r3, r2
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	440b      	add	r3, r1
 800e356:	3312      	adds	r3, #18
 800e358:	881b      	ldrh	r3, [r3, #0]
 800e35a:	3301      	adds	r3, #1
 800e35c:	b298      	uxth	r0, r3
 800e35e:	4943      	ldr	r1, [pc, #268]	@ (800e46c <etharp_tmr+0x14c>)
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	4613      	mov	r3, r2
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	4413      	add	r3, r2
 800e368:	00db      	lsls	r3, r3, #3
 800e36a:	440b      	add	r3, r1
 800e36c:	3312      	adds	r3, #18
 800e36e:	4602      	mov	r2, r0
 800e370:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e372:	493e      	ldr	r1, [pc, #248]	@ (800e46c <etharp_tmr+0x14c>)
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	4613      	mov	r3, r2
 800e378:	005b      	lsls	r3, r3, #1
 800e37a:	4413      	add	r3, r2
 800e37c:	00db      	lsls	r3, r3, #3
 800e37e:	440b      	add	r3, r1
 800e380:	3312      	adds	r3, #18
 800e382:	881b      	ldrh	r3, [r3, #0]
 800e384:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e388:	d215      	bcs.n	800e3b6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e38a:	4938      	ldr	r1, [pc, #224]	@ (800e46c <etharp_tmr+0x14c>)
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	4613      	mov	r3, r2
 800e390:	005b      	lsls	r3, r3, #1
 800e392:	4413      	add	r3, r2
 800e394:	00db      	lsls	r3, r3, #3
 800e396:	440b      	add	r3, r1
 800e398:	3314      	adds	r3, #20
 800e39a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d10e      	bne.n	800e3be <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e3a0:	4932      	ldr	r1, [pc, #200]	@ (800e46c <etharp_tmr+0x14c>)
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	4613      	mov	r3, r2
 800e3a6:	005b      	lsls	r3, r3, #1
 800e3a8:	4413      	add	r3, r2
 800e3aa:	00db      	lsls	r3, r3, #3
 800e3ac:	440b      	add	r3, r1
 800e3ae:	3312      	adds	r3, #18
 800e3b0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e3b2:	2b04      	cmp	r3, #4
 800e3b4:	d903      	bls.n	800e3be <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f7ff ff80 	bl	800e2bc <etharp_free_entry>
 800e3bc:	e04a      	b.n	800e454 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e3be:	492b      	ldr	r1, [pc, #172]	@ (800e46c <etharp_tmr+0x14c>)
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	005b      	lsls	r3, r3, #1
 800e3c6:	4413      	add	r3, r2
 800e3c8:	00db      	lsls	r3, r3, #3
 800e3ca:	440b      	add	r3, r1
 800e3cc:	3314      	adds	r3, #20
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	2b03      	cmp	r3, #3
 800e3d2:	d10a      	bne.n	800e3ea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e3d4:	4925      	ldr	r1, [pc, #148]	@ (800e46c <etharp_tmr+0x14c>)
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	4613      	mov	r3, r2
 800e3da:	005b      	lsls	r3, r3, #1
 800e3dc:	4413      	add	r3, r2
 800e3de:	00db      	lsls	r3, r3, #3
 800e3e0:	440b      	add	r3, r1
 800e3e2:	3314      	adds	r3, #20
 800e3e4:	2204      	movs	r2, #4
 800e3e6:	701a      	strb	r2, [r3, #0]
 800e3e8:	e034      	b.n	800e454 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e3ea:	4920      	ldr	r1, [pc, #128]	@ (800e46c <etharp_tmr+0x14c>)
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	005b      	lsls	r3, r3, #1
 800e3f2:	4413      	add	r3, r2
 800e3f4:	00db      	lsls	r3, r3, #3
 800e3f6:	440b      	add	r3, r1
 800e3f8:	3314      	adds	r3, #20
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2b04      	cmp	r3, #4
 800e3fe:	d10a      	bne.n	800e416 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e400:	491a      	ldr	r1, [pc, #104]	@ (800e46c <etharp_tmr+0x14c>)
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	4613      	mov	r3, r2
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	4413      	add	r3, r2
 800e40a:	00db      	lsls	r3, r3, #3
 800e40c:	440b      	add	r3, r1
 800e40e:	3314      	adds	r3, #20
 800e410:	2202      	movs	r2, #2
 800e412:	701a      	strb	r2, [r3, #0]
 800e414:	e01e      	b.n	800e454 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e416:	4915      	ldr	r1, [pc, #84]	@ (800e46c <etharp_tmr+0x14c>)
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	4613      	mov	r3, r2
 800e41c:	005b      	lsls	r3, r3, #1
 800e41e:	4413      	add	r3, r2
 800e420:	00db      	lsls	r3, r3, #3
 800e422:	440b      	add	r3, r1
 800e424:	3314      	adds	r3, #20
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	2b01      	cmp	r3, #1
 800e42a:	d113      	bne.n	800e454 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e42c:	490f      	ldr	r1, [pc, #60]	@ (800e46c <etharp_tmr+0x14c>)
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	4613      	mov	r3, r2
 800e432:	005b      	lsls	r3, r3, #1
 800e434:	4413      	add	r3, r2
 800e436:	00db      	lsls	r3, r3, #3
 800e438:	440b      	add	r3, r1
 800e43a:	3308      	adds	r3, #8
 800e43c:	6818      	ldr	r0, [r3, #0]
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	4613      	mov	r3, r2
 800e442:	005b      	lsls	r3, r3, #1
 800e444:	4413      	add	r3, r2
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	4a08      	ldr	r2, [pc, #32]	@ (800e46c <etharp_tmr+0x14c>)
 800e44a:	4413      	add	r3, r2
 800e44c:	3304      	adds	r3, #4
 800e44e:	4619      	mov	r1, r3
 800e450:	f000 fe6e 	bl	800f130 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	3301      	adds	r3, #1
 800e458:	607b      	str	r3, [r7, #4]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2b09      	cmp	r3, #9
 800e45e:	f77f af65 	ble.w	800e32c <etharp_tmr+0xc>
      }
    }
  }
}
 800e462:	bf00      	nop
 800e464:	bf00      	nop
 800e466:	3708      	adds	r7, #8
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	200084d0 	.word	0x200084d0

0800e470 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b08a      	sub	sp, #40	@ 0x28
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	460b      	mov	r3, r1
 800e47a:	607a      	str	r2, [r7, #4]
 800e47c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e47e:	230a      	movs	r3, #10
 800e480:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e482:	230a      	movs	r3, #10
 800e484:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e486:	230a      	movs	r3, #10
 800e488:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800e48a:	2300      	movs	r3, #0
 800e48c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e48e:	230a      	movs	r3, #10
 800e490:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	83bb      	strh	r3, [r7, #28]
 800e496:	2300      	movs	r3, #0
 800e498:	837b      	strh	r3, [r7, #26]
 800e49a:	2300      	movs	r3, #0
 800e49c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e49e:	2300      	movs	r3, #0
 800e4a0:	843b      	strh	r3, [r7, #32]
 800e4a2:	e0ae      	b.n	800e602 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e4a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4a8:	49a6      	ldr	r1, [pc, #664]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	005b      	lsls	r3, r3, #1
 800e4ae:	4413      	add	r3, r2
 800e4b0:	00db      	lsls	r3, r3, #3
 800e4b2:	440b      	add	r3, r1
 800e4b4:	3314      	adds	r3, #20
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e4ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e4be:	2b0a      	cmp	r3, #10
 800e4c0:	d105      	bne.n	800e4ce <etharp_find_entry+0x5e>
 800e4c2:	7dfb      	ldrb	r3, [r7, #23]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d102      	bne.n	800e4ce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e4c8:	8c3b      	ldrh	r3, [r7, #32]
 800e4ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e4cc:	e095      	b.n	800e5fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	f000 8092 	beq.w	800e5fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d009      	beq.n	800e4f0 <etharp_find_entry+0x80>
 800e4dc:	7dfb      	ldrb	r3, [r7, #23]
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d806      	bhi.n	800e4f0 <etharp_find_entry+0x80>
 800e4e2:	4b99      	ldr	r3, [pc, #612]	@ (800e748 <etharp_find_entry+0x2d8>)
 800e4e4:	f240 1223 	movw	r2, #291	@ 0x123
 800e4e8:	4998      	ldr	r1, [pc, #608]	@ (800e74c <etharp_find_entry+0x2dc>)
 800e4ea:	4899      	ldr	r0, [pc, #612]	@ (800e750 <etharp_find_entry+0x2e0>)
 800e4ec:	f003 fe44 	bl	8012178 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d020      	beq.n	800e538 <etharp_find_entry+0xc8>
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6819      	ldr	r1, [r3, #0]
 800e4fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4fe:	4891      	ldr	r0, [pc, #580]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e500:	4613      	mov	r3, r2
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	4413      	add	r3, r2
 800e506:	00db      	lsls	r3, r3, #3
 800e508:	4403      	add	r3, r0
 800e50a:	3304      	adds	r3, #4
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	4299      	cmp	r1, r3
 800e510:	d112      	bne.n	800e538 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00c      	beq.n	800e532 <etharp_find_entry+0xc2>
 800e518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e51c:	4989      	ldr	r1, [pc, #548]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e51e:	4613      	mov	r3, r2
 800e520:	005b      	lsls	r3, r3, #1
 800e522:	4413      	add	r3, r2
 800e524:	00db      	lsls	r3, r3, #3
 800e526:	440b      	add	r3, r1
 800e528:	3308      	adds	r3, #8
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d102      	bne.n	800e538 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e532:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e536:	e100      	b.n	800e73a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e538:	7dfb      	ldrb	r3, [r7, #23]
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d140      	bne.n	800e5c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e53e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e542:	4980      	ldr	r1, [pc, #512]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e544:	4613      	mov	r3, r2
 800e546:	005b      	lsls	r3, r3, #1
 800e548:	4413      	add	r3, r2
 800e54a:	00db      	lsls	r3, r3, #3
 800e54c:	440b      	add	r3, r1
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d01a      	beq.n	800e58a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e554:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e558:	497a      	ldr	r1, [pc, #488]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e55a:	4613      	mov	r3, r2
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	4413      	add	r3, r2
 800e560:	00db      	lsls	r3, r3, #3
 800e562:	440b      	add	r3, r1
 800e564:	3312      	adds	r3, #18
 800e566:	881b      	ldrh	r3, [r3, #0]
 800e568:	8bba      	ldrh	r2, [r7, #28]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d845      	bhi.n	800e5fa <etharp_find_entry+0x18a>
            old_queue = i;
 800e56e:	8c3b      	ldrh	r3, [r7, #32]
 800e570:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e572:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e576:	4973      	ldr	r1, [pc, #460]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e578:	4613      	mov	r3, r2
 800e57a:	005b      	lsls	r3, r3, #1
 800e57c:	4413      	add	r3, r2
 800e57e:	00db      	lsls	r3, r3, #3
 800e580:	440b      	add	r3, r1
 800e582:	3312      	adds	r3, #18
 800e584:	881b      	ldrh	r3, [r3, #0]
 800e586:	83bb      	strh	r3, [r7, #28]
 800e588:	e037      	b.n	800e5fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e58a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e58e:	496d      	ldr	r1, [pc, #436]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e590:	4613      	mov	r3, r2
 800e592:	005b      	lsls	r3, r3, #1
 800e594:	4413      	add	r3, r2
 800e596:	00db      	lsls	r3, r3, #3
 800e598:	440b      	add	r3, r1
 800e59a:	3312      	adds	r3, #18
 800e59c:	881b      	ldrh	r3, [r3, #0]
 800e59e:	8b7a      	ldrh	r2, [r7, #26]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d82a      	bhi.n	800e5fa <etharp_find_entry+0x18a>
            old_pending = i;
 800e5a4:	8c3b      	ldrh	r3, [r7, #32]
 800e5a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800e5a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5ac:	4965      	ldr	r1, [pc, #404]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	005b      	lsls	r3, r3, #1
 800e5b2:	4413      	add	r3, r2
 800e5b4:	00db      	lsls	r3, r3, #3
 800e5b6:	440b      	add	r3, r1
 800e5b8:	3312      	adds	r3, #18
 800e5ba:	881b      	ldrh	r3, [r3, #0]
 800e5bc:	837b      	strh	r3, [r7, #26]
 800e5be:	e01c      	b.n	800e5fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e5c0:	7dfb      	ldrb	r3, [r7, #23]
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d919      	bls.n	800e5fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e5c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5ca:	495e      	ldr	r1, [pc, #376]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	005b      	lsls	r3, r3, #1
 800e5d0:	4413      	add	r3, r2
 800e5d2:	00db      	lsls	r3, r3, #3
 800e5d4:	440b      	add	r3, r1
 800e5d6:	3312      	adds	r3, #18
 800e5d8:	881b      	ldrh	r3, [r3, #0]
 800e5da:	8b3a      	ldrh	r2, [r7, #24]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d80c      	bhi.n	800e5fa <etharp_find_entry+0x18a>
            old_stable = i;
 800e5e0:	8c3b      	ldrh	r3, [r7, #32]
 800e5e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800e5e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5e8:	4956      	ldr	r1, [pc, #344]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	005b      	lsls	r3, r3, #1
 800e5ee:	4413      	add	r3, r2
 800e5f0:	00db      	lsls	r3, r3, #3
 800e5f2:	440b      	add	r3, r1
 800e5f4:	3312      	adds	r3, #18
 800e5f6:	881b      	ldrh	r3, [r3, #0]
 800e5f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e5fa:	8c3b      	ldrh	r3, [r7, #32]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	843b      	strh	r3, [r7, #32]
 800e602:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e606:	2b09      	cmp	r3, #9
 800e608:	f77f af4c 	ble.w	800e4a4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e60c:	7afb      	ldrb	r3, [r7, #11]
 800e60e:	f003 0302 	and.w	r3, r3, #2
 800e612:	2b00      	cmp	r3, #0
 800e614:	d108      	bne.n	800e628 <etharp_find_entry+0x1b8>
 800e616:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e61a:	2b0a      	cmp	r3, #10
 800e61c:	d107      	bne.n	800e62e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e61e:	7afb      	ldrb	r3, [r7, #11]
 800e620:	f003 0301 	and.w	r3, r3, #1
 800e624:	2b00      	cmp	r3, #0
 800e626:	d102      	bne.n	800e62e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e628:	f04f 33ff 	mov.w	r3, #4294967295
 800e62c:	e085      	b.n	800e73a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e62e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e632:	2b09      	cmp	r3, #9
 800e634:	dc02      	bgt.n	800e63c <etharp_find_entry+0x1cc>
    i = empty;
 800e636:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e638:	843b      	strh	r3, [r7, #32]
 800e63a:	e039      	b.n	800e6b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e63c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e640:	2b09      	cmp	r3, #9
 800e642:	dc14      	bgt.n	800e66e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e644:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e646:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e648:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e64c:	493d      	ldr	r1, [pc, #244]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e64e:	4613      	mov	r3, r2
 800e650:	005b      	lsls	r3, r3, #1
 800e652:	4413      	add	r3, r2
 800e654:	00db      	lsls	r3, r3, #3
 800e656:	440b      	add	r3, r1
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d018      	beq.n	800e690 <etharp_find_entry+0x220>
 800e65e:	4b3a      	ldr	r3, [pc, #232]	@ (800e748 <etharp_find_entry+0x2d8>)
 800e660:	f240 126d 	movw	r2, #365	@ 0x16d
 800e664:	493b      	ldr	r1, [pc, #236]	@ (800e754 <etharp_find_entry+0x2e4>)
 800e666:	483a      	ldr	r0, [pc, #232]	@ (800e750 <etharp_find_entry+0x2e0>)
 800e668:	f003 fd86 	bl	8012178 <iprintf>
 800e66c:	e010      	b.n	800e690 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e66e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e672:	2b09      	cmp	r3, #9
 800e674:	dc02      	bgt.n	800e67c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e676:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e678:	843b      	strh	r3, [r7, #32]
 800e67a:	e009      	b.n	800e690 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e67c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e680:	2b09      	cmp	r3, #9
 800e682:	dc02      	bgt.n	800e68a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e684:	8bfb      	ldrh	r3, [r7, #30]
 800e686:	843b      	strh	r3, [r7, #32]
 800e688:	e002      	b.n	800e690 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e68a:	f04f 33ff 	mov.w	r3, #4294967295
 800e68e:	e054      	b.n	800e73a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e690:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e694:	2b09      	cmp	r3, #9
 800e696:	dd06      	ble.n	800e6a6 <etharp_find_entry+0x236>
 800e698:	4b2b      	ldr	r3, [pc, #172]	@ (800e748 <etharp_find_entry+0x2d8>)
 800e69a:	f240 127f 	movw	r2, #383	@ 0x17f
 800e69e:	492e      	ldr	r1, [pc, #184]	@ (800e758 <etharp_find_entry+0x2e8>)
 800e6a0:	482b      	ldr	r0, [pc, #172]	@ (800e750 <etharp_find_entry+0x2e0>)
 800e6a2:	f003 fd69 	bl	8012178 <iprintf>
    etharp_free_entry(i);
 800e6a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff fe06 	bl	800e2bc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e6b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e6b4:	2b09      	cmp	r3, #9
 800e6b6:	dd06      	ble.n	800e6c6 <etharp_find_entry+0x256>
 800e6b8:	4b23      	ldr	r3, [pc, #140]	@ (800e748 <etharp_find_entry+0x2d8>)
 800e6ba:	f240 1283 	movw	r2, #387	@ 0x183
 800e6be:	4926      	ldr	r1, [pc, #152]	@ (800e758 <etharp_find_entry+0x2e8>)
 800e6c0:	4823      	ldr	r0, [pc, #140]	@ (800e750 <etharp_find_entry+0x2e0>)
 800e6c2:	f003 fd59 	bl	8012178 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e6c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6ca:	491e      	ldr	r1, [pc, #120]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e6cc:	4613      	mov	r3, r2
 800e6ce:	005b      	lsls	r3, r3, #1
 800e6d0:	4413      	add	r3, r2
 800e6d2:	00db      	lsls	r3, r3, #3
 800e6d4:	440b      	add	r3, r1
 800e6d6:	3314      	adds	r3, #20
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d006      	beq.n	800e6ec <etharp_find_entry+0x27c>
 800e6de:	4b1a      	ldr	r3, [pc, #104]	@ (800e748 <etharp_find_entry+0x2d8>)
 800e6e0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800e6e4:	491d      	ldr	r1, [pc, #116]	@ (800e75c <etharp_find_entry+0x2ec>)
 800e6e6:	481a      	ldr	r0, [pc, #104]	@ (800e750 <etharp_find_entry+0x2e0>)
 800e6e8:	f003 fd46 	bl	8012178 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00b      	beq.n	800e70a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e6f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6819      	ldr	r1, [r3, #0]
 800e6fa:	4812      	ldr	r0, [pc, #72]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	005b      	lsls	r3, r3, #1
 800e700:	4413      	add	r3, r2
 800e702:	00db      	lsls	r3, r3, #3
 800e704:	4403      	add	r3, r0
 800e706:	3304      	adds	r3, #4
 800e708:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e70a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e70e:	490d      	ldr	r1, [pc, #52]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e710:	4613      	mov	r3, r2
 800e712:	005b      	lsls	r3, r3, #1
 800e714:	4413      	add	r3, r2
 800e716:	00db      	lsls	r3, r3, #3
 800e718:	440b      	add	r3, r1
 800e71a:	3312      	adds	r3, #18
 800e71c:	2200      	movs	r2, #0
 800e71e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e724:	4907      	ldr	r1, [pc, #28]	@ (800e744 <etharp_find_entry+0x2d4>)
 800e726:	4613      	mov	r3, r2
 800e728:	005b      	lsls	r3, r3, #1
 800e72a:	4413      	add	r3, r2
 800e72c:	00db      	lsls	r3, r3, #3
 800e72e:	440b      	add	r3, r1
 800e730:	3308      	adds	r3, #8
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e736:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3728      	adds	r7, #40	@ 0x28
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	200084d0 	.word	0x200084d0
 800e748:	08015728 	.word	0x08015728
 800e74c:	08015760 	.word	0x08015760
 800e750:	080157a0 	.word	0x080157a0
 800e754:	080157c8 	.word	0x080157c8
 800e758:	080157e0 	.word	0x080157e0
 800e75c:	080157f4 	.word	0x080157f4

0800e760 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b088      	sub	sp, #32
 800e764:	af02      	add	r7, sp, #8
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e774:	2b06      	cmp	r3, #6
 800e776:	d006      	beq.n	800e786 <etharp_update_arp_entry+0x26>
 800e778:	4b48      	ldr	r3, [pc, #288]	@ (800e89c <etharp_update_arp_entry+0x13c>)
 800e77a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800e77e:	4948      	ldr	r1, [pc, #288]	@ (800e8a0 <etharp_update_arp_entry+0x140>)
 800e780:	4848      	ldr	r0, [pc, #288]	@ (800e8a4 <etharp_update_arp_entry+0x144>)
 800e782:	f003 fcf9 	bl	8012178 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d012      	beq.n	800e7b2 <etharp_update_arp_entry+0x52>
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d00e      	beq.n	800e7b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	68f9      	ldr	r1, [r7, #12]
 800e79a:	4618      	mov	r0, r3
 800e79c:	f001 f8fe 	bl	800f99c <ip4_addr_isbroadcast_u32>
 800e7a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d105      	bne.n	800e7b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e7ae:	2be0      	cmp	r3, #224	@ 0xe0
 800e7b0:	d102      	bne.n	800e7b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e7b2:	f06f 030f 	mvn.w	r3, #15
 800e7b6:	e06c      	b.n	800e892 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e7b8:	78fb      	ldrb	r3, [r7, #3]
 800e7ba:	68fa      	ldr	r2, [r7, #12]
 800e7bc:	4619      	mov	r1, r3
 800e7be:	68b8      	ldr	r0, [r7, #8]
 800e7c0:	f7ff fe56 	bl	800e470 <etharp_find_entry>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e7c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	da02      	bge.n	800e7d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e7d0:	8afb      	ldrh	r3, [r7, #22]
 800e7d2:	b25b      	sxtb	r3, r3
 800e7d4:	e05d      	b.n	800e892 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e7d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e7da:	4933      	ldr	r1, [pc, #204]	@ (800e8a8 <etharp_update_arp_entry+0x148>)
 800e7dc:	4613      	mov	r3, r2
 800e7de:	005b      	lsls	r3, r3, #1
 800e7e0:	4413      	add	r3, r2
 800e7e2:	00db      	lsls	r3, r3, #3
 800e7e4:	440b      	add	r3, r1
 800e7e6:	3314      	adds	r3, #20
 800e7e8:	2202      	movs	r2, #2
 800e7ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e7ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e7f0:	492d      	ldr	r1, [pc, #180]	@ (800e8a8 <etharp_update_arp_entry+0x148>)
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	005b      	lsls	r3, r3, #1
 800e7f6:	4413      	add	r3, r2
 800e7f8:	00db      	lsls	r3, r3, #3
 800e7fa:	440b      	add	r3, r1
 800e7fc:	3308      	adds	r3, #8
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e802:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e806:	4613      	mov	r3, r2
 800e808:	005b      	lsls	r3, r3, #1
 800e80a:	4413      	add	r3, r2
 800e80c:	00db      	lsls	r3, r3, #3
 800e80e:	3308      	adds	r3, #8
 800e810:	4a25      	ldr	r2, [pc, #148]	@ (800e8a8 <etharp_update_arp_entry+0x148>)
 800e812:	4413      	add	r3, r2
 800e814:	3304      	adds	r3, #4
 800e816:	2206      	movs	r2, #6
 800e818:	6879      	ldr	r1, [r7, #4]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f003 fe03 	bl	8012426 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e820:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e824:	4920      	ldr	r1, [pc, #128]	@ (800e8a8 <etharp_update_arp_entry+0x148>)
 800e826:	4613      	mov	r3, r2
 800e828:	005b      	lsls	r3, r3, #1
 800e82a:	4413      	add	r3, r2
 800e82c:	00db      	lsls	r3, r3, #3
 800e82e:	440b      	add	r3, r1
 800e830:	3312      	adds	r3, #18
 800e832:	2200      	movs	r2, #0
 800e834:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e836:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e83a:	491b      	ldr	r1, [pc, #108]	@ (800e8a8 <etharp_update_arp_entry+0x148>)
 800e83c:	4613      	mov	r3, r2
 800e83e:	005b      	lsls	r3, r3, #1
 800e840:	4413      	add	r3, r2
 800e842:	00db      	lsls	r3, r3, #3
 800e844:	440b      	add	r3, r1
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d021      	beq.n	800e890 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e84c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e850:	4915      	ldr	r1, [pc, #84]	@ (800e8a8 <etharp_update_arp_entry+0x148>)
 800e852:	4613      	mov	r3, r2
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	4413      	add	r3, r2
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	440b      	add	r3, r1
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e860:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e864:	4910      	ldr	r1, [pc, #64]	@ (800e8a8 <etharp_update_arp_entry+0x148>)
 800e866:	4613      	mov	r3, r2
 800e868:	005b      	lsls	r3, r3, #1
 800e86a:	4413      	add	r3, r2
 800e86c:	00db      	lsls	r3, r3, #3
 800e86e:	440b      	add	r3, r1
 800e870:	2200      	movs	r2, #0
 800e872:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e87a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6939      	ldr	r1, [r7, #16]
 800e884:	68f8      	ldr	r0, [r7, #12]
 800e886:	f001 ff97 	bl	80107b8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e88a:	6938      	ldr	r0, [r7, #16]
 800e88c:	f7f8 ffd8 	bl	8007840 <pbuf_free>
  }
  return ERR_OK;
 800e890:	2300      	movs	r3, #0
}
 800e892:	4618      	mov	r0, r3
 800e894:	3718      	adds	r7, #24
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	08015728 	.word	0x08015728
 800e8a0:	08015820 	.word	0x08015820
 800e8a4:	080157a0 	.word	0x080157a0
 800e8a8:	200084d0 	.word	0x200084d0

0800e8ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	60fb      	str	r3, [r7, #12]
 800e8b8:	e01e      	b.n	800e8f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e8ba:	4913      	ldr	r1, [pc, #76]	@ (800e908 <etharp_cleanup_netif+0x5c>)
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	4413      	add	r3, r2
 800e8c4:	00db      	lsls	r3, r3, #3
 800e8c6:	440b      	add	r3, r1
 800e8c8:	3314      	adds	r3, #20
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e8ce:	7afb      	ldrb	r3, [r7, #11]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00e      	beq.n	800e8f2 <etharp_cleanup_netif+0x46>
 800e8d4:	490c      	ldr	r1, [pc, #48]	@ (800e908 <etharp_cleanup_netif+0x5c>)
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	4613      	mov	r3, r2
 800e8da:	005b      	lsls	r3, r3, #1
 800e8dc:	4413      	add	r3, r2
 800e8de:	00db      	lsls	r3, r3, #3
 800e8e0:	440b      	add	r3, r1
 800e8e2:	3308      	adds	r3, #8
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d102      	bne.n	800e8f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f7ff fce5 	bl	800e2bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	60fb      	str	r3, [r7, #12]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2b09      	cmp	r3, #9
 800e8fc:	dddd      	ble.n	800e8ba <etharp_cleanup_netif+0xe>
    }
  }
}
 800e8fe:	bf00      	nop
 800e900:	bf00      	nop
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	200084d0 	.word	0x200084d0

0800e90c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e90c:	b5b0      	push	{r4, r5, r7, lr}
 800e90e:	b08a      	sub	sp, #40	@ 0x28
 800e910:	af04      	add	r7, sp, #16
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d107      	bne.n	800e92c <etharp_input+0x20>
 800e91c:	4b3d      	ldr	r3, [pc, #244]	@ (800ea14 <etharp_input+0x108>)
 800e91e:	f240 228a 	movw	r2, #650	@ 0x28a
 800e922:	493d      	ldr	r1, [pc, #244]	@ (800ea18 <etharp_input+0x10c>)
 800e924:	483d      	ldr	r0, [pc, #244]	@ (800ea1c <etharp_input+0x110>)
 800e926:	f003 fc27 	bl	8012178 <iprintf>
 800e92a:	e06f      	b.n	800ea0c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	881b      	ldrh	r3, [r3, #0]
 800e936:	b29b      	uxth	r3, r3
 800e938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e93c:	d10c      	bne.n	800e958 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e942:	2b06      	cmp	r3, #6
 800e944:	d108      	bne.n	800e958 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e94a:	2b04      	cmp	r3, #4
 800e94c:	d104      	bne.n	800e958 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	885b      	ldrh	r3, [r3, #2]
 800e952:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e954:	2b08      	cmp	r3, #8
 800e956:	d003      	beq.n	800e960 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f7f8 ff71 	bl	8007840 <pbuf_free>
    return;
 800e95e:	e055      	b.n	800ea0c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	330e      	adds	r3, #14
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	3318      	adds	r3, #24
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	3304      	adds	r3, #4
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d102      	bne.n	800e980 <etharp_input+0x74>
    for_us = 0;
 800e97a:	2300      	movs	r3, #0
 800e97c:	75fb      	strb	r3, [r7, #23]
 800e97e:	e009      	b.n	800e994 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e980:	68ba      	ldr	r2, [r7, #8]
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	3304      	adds	r3, #4
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	429a      	cmp	r2, r3
 800e98a:	bf0c      	ite	eq
 800e98c:	2301      	moveq	r3, #1
 800e98e:	2300      	movne	r3, #0
 800e990:	b2db      	uxtb	r3, r3
 800e992:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	f103 0208 	add.w	r2, r3, #8
 800e99a:	7dfb      	ldrb	r3, [r7, #23]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d001      	beq.n	800e9a4 <etharp_input+0x98>
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	e000      	b.n	800e9a6 <etharp_input+0x9a>
 800e9a4:	2302      	movs	r3, #2
 800e9a6:	f107 010c 	add.w	r1, r7, #12
 800e9aa:	6838      	ldr	r0, [r7, #0]
 800e9ac:	f7ff fed8 	bl	800e760 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	88db      	ldrh	r3, [r3, #6]
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9ba:	d003      	beq.n	800e9c4 <etharp_input+0xb8>
 800e9bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9c0:	d01e      	beq.n	800ea00 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e9c2:	e020      	b.n	800ea06 <etharp_input+0xfa>
      if (for_us) {
 800e9c4:	7dfb      	ldrb	r3, [r7, #23]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d01c      	beq.n	800ea04 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e9e0:	693a      	ldr	r2, [r7, #16]
 800e9e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e9e4:	2102      	movs	r1, #2
 800e9e6:	9103      	str	r1, [sp, #12]
 800e9e8:	f107 010c 	add.w	r1, r7, #12
 800e9ec:	9102      	str	r1, [sp, #8]
 800e9ee:	9201      	str	r2, [sp, #4]
 800e9f0:	9300      	str	r3, [sp, #0]
 800e9f2:	462b      	mov	r3, r5
 800e9f4:	4622      	mov	r2, r4
 800e9f6:	4601      	mov	r1, r0
 800e9f8:	6838      	ldr	r0, [r7, #0]
 800e9fa:	f000 faeb 	bl	800efd4 <etharp_raw>
      break;
 800e9fe:	e001      	b.n	800ea04 <etharp_input+0xf8>
      break;
 800ea00:	bf00      	nop
 800ea02:	e000      	b.n	800ea06 <etharp_input+0xfa>
      break;
 800ea04:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7f8 ff1a 	bl	8007840 <pbuf_free>
}
 800ea0c:	3718      	adds	r7, #24
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bdb0      	pop	{r4, r5, r7, pc}
 800ea12:	bf00      	nop
 800ea14:	08015728 	.word	0x08015728
 800ea18:	08015878 	.word	0x08015878
 800ea1c:	080157a0 	.word	0x080157a0

0800ea20 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	af02      	add	r7, sp, #8
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ea2e:	79fa      	ldrb	r2, [r7, #7]
 800ea30:	4944      	ldr	r1, [pc, #272]	@ (800eb44 <etharp_output_to_arp_index+0x124>)
 800ea32:	4613      	mov	r3, r2
 800ea34:	005b      	lsls	r3, r3, #1
 800ea36:	4413      	add	r3, r2
 800ea38:	00db      	lsls	r3, r3, #3
 800ea3a:	440b      	add	r3, r1
 800ea3c:	3314      	adds	r3, #20
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d806      	bhi.n	800ea52 <etharp_output_to_arp_index+0x32>
 800ea44:	4b40      	ldr	r3, [pc, #256]	@ (800eb48 <etharp_output_to_arp_index+0x128>)
 800ea46:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ea4a:	4940      	ldr	r1, [pc, #256]	@ (800eb4c <etharp_output_to_arp_index+0x12c>)
 800ea4c:	4840      	ldr	r0, [pc, #256]	@ (800eb50 <etharp_output_to_arp_index+0x130>)
 800ea4e:	f003 fb93 	bl	8012178 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ea52:	79fa      	ldrb	r2, [r7, #7]
 800ea54:	493b      	ldr	r1, [pc, #236]	@ (800eb44 <etharp_output_to_arp_index+0x124>)
 800ea56:	4613      	mov	r3, r2
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	4413      	add	r3, r2
 800ea5c:	00db      	lsls	r3, r3, #3
 800ea5e:	440b      	add	r3, r1
 800ea60:	3314      	adds	r3, #20
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	d153      	bne.n	800eb10 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ea68:	79fa      	ldrb	r2, [r7, #7]
 800ea6a:	4936      	ldr	r1, [pc, #216]	@ (800eb44 <etharp_output_to_arp_index+0x124>)
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	005b      	lsls	r3, r3, #1
 800ea70:	4413      	add	r3, r2
 800ea72:	00db      	lsls	r3, r3, #3
 800ea74:	440b      	add	r3, r1
 800ea76:	3312      	adds	r3, #18
 800ea78:	881b      	ldrh	r3, [r3, #0]
 800ea7a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800ea7e:	d919      	bls.n	800eab4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ea80:	79fa      	ldrb	r2, [r7, #7]
 800ea82:	4613      	mov	r3, r2
 800ea84:	005b      	lsls	r3, r3, #1
 800ea86:	4413      	add	r3, r2
 800ea88:	00db      	lsls	r3, r3, #3
 800ea8a:	4a2e      	ldr	r2, [pc, #184]	@ (800eb44 <etharp_output_to_arp_index+0x124>)
 800ea8c:	4413      	add	r3, r2
 800ea8e:	3304      	adds	r3, #4
 800ea90:	4619      	mov	r1, r3
 800ea92:	68f8      	ldr	r0, [r7, #12]
 800ea94:	f000 fb4c 	bl	800f130 <etharp_request>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d138      	bne.n	800eb10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ea9e:	79fa      	ldrb	r2, [r7, #7]
 800eaa0:	4928      	ldr	r1, [pc, #160]	@ (800eb44 <etharp_output_to_arp_index+0x124>)
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	4413      	add	r3, r2
 800eaa8:	00db      	lsls	r3, r3, #3
 800eaaa:	440b      	add	r3, r1
 800eaac:	3314      	adds	r3, #20
 800eaae:	2203      	movs	r2, #3
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	e02d      	b.n	800eb10 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800eab4:	79fa      	ldrb	r2, [r7, #7]
 800eab6:	4923      	ldr	r1, [pc, #140]	@ (800eb44 <etharp_output_to_arp_index+0x124>)
 800eab8:	4613      	mov	r3, r2
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	4413      	add	r3, r2
 800eabe:	00db      	lsls	r3, r3, #3
 800eac0:	440b      	add	r3, r1
 800eac2:	3312      	adds	r3, #18
 800eac4:	881b      	ldrh	r3, [r3, #0]
 800eac6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800eaca:	d321      	bcc.n	800eb10 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800eacc:	79fa      	ldrb	r2, [r7, #7]
 800eace:	4613      	mov	r3, r2
 800ead0:	005b      	lsls	r3, r3, #1
 800ead2:	4413      	add	r3, r2
 800ead4:	00db      	lsls	r3, r3, #3
 800ead6:	4a1b      	ldr	r2, [pc, #108]	@ (800eb44 <etharp_output_to_arp_index+0x124>)
 800ead8:	4413      	add	r3, r2
 800eada:	1d19      	adds	r1, r3, #4
 800eadc:	79fa      	ldrb	r2, [r7, #7]
 800eade:	4613      	mov	r3, r2
 800eae0:	005b      	lsls	r3, r3, #1
 800eae2:	4413      	add	r3, r2
 800eae4:	00db      	lsls	r3, r3, #3
 800eae6:	3308      	adds	r3, #8
 800eae8:	4a16      	ldr	r2, [pc, #88]	@ (800eb44 <etharp_output_to_arp_index+0x124>)
 800eaea:	4413      	add	r3, r2
 800eaec:	3304      	adds	r3, #4
 800eaee:	461a      	mov	r2, r3
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f000 fafb 	bl	800f0ec <etharp_request_dst>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d109      	bne.n	800eb10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eafc:	79fa      	ldrb	r2, [r7, #7]
 800eafe:	4911      	ldr	r1, [pc, #68]	@ (800eb44 <etharp_output_to_arp_index+0x124>)
 800eb00:	4613      	mov	r3, r2
 800eb02:	005b      	lsls	r3, r3, #1
 800eb04:	4413      	add	r3, r2
 800eb06:	00db      	lsls	r3, r3, #3
 800eb08:	440b      	add	r3, r1
 800eb0a:	3314      	adds	r3, #20
 800eb0c:	2203      	movs	r2, #3
 800eb0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800eb16:	79fa      	ldrb	r2, [r7, #7]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	005b      	lsls	r3, r3, #1
 800eb1c:	4413      	add	r3, r2
 800eb1e:	00db      	lsls	r3, r3, #3
 800eb20:	3308      	adds	r3, #8
 800eb22:	4a08      	ldr	r2, [pc, #32]	@ (800eb44 <etharp_output_to_arp_index+0x124>)
 800eb24:	4413      	add	r3, r2
 800eb26:	3304      	adds	r3, #4
 800eb28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eb2c:	9200      	str	r2, [sp, #0]
 800eb2e:	460a      	mov	r2, r1
 800eb30:	68b9      	ldr	r1, [r7, #8]
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f001 fe40 	bl	80107b8 <ethernet_output>
 800eb38:	4603      	mov	r3, r0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3710      	adds	r7, #16
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	200084d0 	.word	0x200084d0
 800eb48:	08015728 	.word	0x08015728
 800eb4c:	08015898 	.word	0x08015898
 800eb50:	080157a0 	.word	0x080157a0

0800eb54 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b08a      	sub	sp, #40	@ 0x28
 800eb58:	af02      	add	r7, sp, #8
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d106      	bne.n	800eb78 <etharp_output+0x24>
 800eb6a:	4b73      	ldr	r3, [pc, #460]	@ (800ed38 <etharp_output+0x1e4>)
 800eb6c:	f240 321e 	movw	r2, #798	@ 0x31e
 800eb70:	4972      	ldr	r1, [pc, #456]	@ (800ed3c <etharp_output+0x1e8>)
 800eb72:	4873      	ldr	r0, [pc, #460]	@ (800ed40 <etharp_output+0x1ec>)
 800eb74:	f003 fb00 	bl	8012178 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d106      	bne.n	800eb8c <etharp_output+0x38>
 800eb7e:	4b6e      	ldr	r3, [pc, #440]	@ (800ed38 <etharp_output+0x1e4>)
 800eb80:	f240 321f 	movw	r2, #799	@ 0x31f
 800eb84:	496f      	ldr	r1, [pc, #444]	@ (800ed44 <etharp_output+0x1f0>)
 800eb86:	486e      	ldr	r0, [pc, #440]	@ (800ed40 <etharp_output+0x1ec>)
 800eb88:	f003 faf6 	bl	8012178 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d106      	bne.n	800eba0 <etharp_output+0x4c>
 800eb92:	4b69      	ldr	r3, [pc, #420]	@ (800ed38 <etharp_output+0x1e4>)
 800eb94:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800eb98:	496b      	ldr	r1, [pc, #428]	@ (800ed48 <etharp_output+0x1f4>)
 800eb9a:	4869      	ldr	r0, [pc, #420]	@ (800ed40 <etharp_output+0x1ec>)
 800eb9c:	f003 faec 	bl	8012178 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	68f9      	ldr	r1, [r7, #12]
 800eba6:	4618      	mov	r0, r3
 800eba8:	f000 fef8 	bl	800f99c <ip4_addr_isbroadcast_u32>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d002      	beq.n	800ebb8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ebb2:	4b66      	ldr	r3, [pc, #408]	@ (800ed4c <etharp_output+0x1f8>)
 800ebb4:	61fb      	str	r3, [r7, #28]
 800ebb6:	e0af      	b.n	800ed18 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ebc0:	2be0      	cmp	r3, #224	@ 0xe0
 800ebc2:	d118      	bne.n	800ebf6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ebcc:	235e      	movs	r3, #94	@ 0x5e
 800ebce:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	3302      	adds	r3, #2
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	3303      	adds	r3, #3
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ebee:	f107 0310 	add.w	r3, r7, #16
 800ebf2:	61fb      	str	r3, [r7, #28]
 800ebf4:	e090      	b.n	800ed18 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	405a      	eors	r2, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	3308      	adds	r3, #8
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4013      	ands	r3, r2
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d012      	beq.n	800ec34 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ec14:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d00b      	beq.n	800ec34 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	330c      	adds	r3, #12
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d003      	beq.n	800ec2e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	330c      	adds	r3, #12
 800ec2a:	61bb      	str	r3, [r7, #24]
 800ec2c:	e002      	b.n	800ec34 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ec2e:	f06f 0303 	mvn.w	r3, #3
 800ec32:	e07d      	b.n	800ed30 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ec34:	4b46      	ldr	r3, [pc, #280]	@ (800ed50 <etharp_output+0x1fc>)
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	4619      	mov	r1, r3
 800ec3a:	4a46      	ldr	r2, [pc, #280]	@ (800ed54 <etharp_output+0x200>)
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	005b      	lsls	r3, r3, #1
 800ec40:	440b      	add	r3, r1
 800ec42:	00db      	lsls	r3, r3, #3
 800ec44:	4413      	add	r3, r2
 800ec46:	3314      	adds	r3, #20
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d925      	bls.n	800ec9a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ec4e:	4b40      	ldr	r3, [pc, #256]	@ (800ed50 <etharp_output+0x1fc>)
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	4619      	mov	r1, r3
 800ec54:	4a3f      	ldr	r2, [pc, #252]	@ (800ed54 <etharp_output+0x200>)
 800ec56:	460b      	mov	r3, r1
 800ec58:	005b      	lsls	r3, r3, #1
 800ec5a:	440b      	add	r3, r1
 800ec5c:	00db      	lsls	r3, r3, #3
 800ec5e:	4413      	add	r3, r2
 800ec60:	3308      	adds	r3, #8
 800ec62:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d117      	bne.n	800ec9a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	4b38      	ldr	r3, [pc, #224]	@ (800ed50 <etharp_output+0x1fc>)
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	4618      	mov	r0, r3
 800ec74:	4937      	ldr	r1, [pc, #220]	@ (800ed54 <etharp_output+0x200>)
 800ec76:	4603      	mov	r3, r0
 800ec78:	005b      	lsls	r3, r3, #1
 800ec7a:	4403      	add	r3, r0
 800ec7c:	00db      	lsls	r3, r3, #3
 800ec7e:	440b      	add	r3, r1
 800ec80:	3304      	adds	r3, #4
 800ec82:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d108      	bne.n	800ec9a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ec88:	4b31      	ldr	r3, [pc, #196]	@ (800ed50 <etharp_output+0x1fc>)
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	68b9      	ldr	r1, [r7, #8]
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f7ff fec5 	bl	800ea20 <etharp_output_to_arp_index>
 800ec96:	4603      	mov	r3, r0
 800ec98:	e04a      	b.n	800ed30 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	75fb      	strb	r3, [r7, #23]
 800ec9e:	e031      	b.n	800ed04 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800eca0:	7dfa      	ldrb	r2, [r7, #23]
 800eca2:	492c      	ldr	r1, [pc, #176]	@ (800ed54 <etharp_output+0x200>)
 800eca4:	4613      	mov	r3, r2
 800eca6:	005b      	lsls	r3, r3, #1
 800eca8:	4413      	add	r3, r2
 800ecaa:	00db      	lsls	r3, r3, #3
 800ecac:	440b      	add	r3, r1
 800ecae:	3314      	adds	r3, #20
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d923      	bls.n	800ecfe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ecb6:	7dfa      	ldrb	r2, [r7, #23]
 800ecb8:	4926      	ldr	r1, [pc, #152]	@ (800ed54 <etharp_output+0x200>)
 800ecba:	4613      	mov	r3, r2
 800ecbc:	005b      	lsls	r3, r3, #1
 800ecbe:	4413      	add	r3, r2
 800ecc0:	00db      	lsls	r3, r3, #3
 800ecc2:	440b      	add	r3, r1
 800ecc4:	3308      	adds	r3, #8
 800ecc6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d117      	bne.n	800ecfe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	6819      	ldr	r1, [r3, #0]
 800ecd2:	7dfa      	ldrb	r2, [r7, #23]
 800ecd4:	481f      	ldr	r0, [pc, #124]	@ (800ed54 <etharp_output+0x200>)
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	005b      	lsls	r3, r3, #1
 800ecda:	4413      	add	r3, r2
 800ecdc:	00db      	lsls	r3, r3, #3
 800ecde:	4403      	add	r3, r0
 800ece0:	3304      	adds	r3, #4
 800ece2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ece4:	4299      	cmp	r1, r3
 800ece6:	d10a      	bne.n	800ecfe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ece8:	4a19      	ldr	r2, [pc, #100]	@ (800ed50 <etharp_output+0x1fc>)
 800ecea:	7dfb      	ldrb	r3, [r7, #23]
 800ecec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ecee:	7dfb      	ldrb	r3, [r7, #23]
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	68b9      	ldr	r1, [r7, #8]
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f7ff fe93 	bl	800ea20 <etharp_output_to_arp_index>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	e018      	b.n	800ed30 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ecfe:	7dfb      	ldrb	r3, [r7, #23]
 800ed00:	3301      	adds	r3, #1
 800ed02:	75fb      	strb	r3, [r7, #23]
 800ed04:	7dfb      	ldrb	r3, [r7, #23]
 800ed06:	2b09      	cmp	r3, #9
 800ed08:	d9ca      	bls.n	800eca0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ed0a:	68ba      	ldr	r2, [r7, #8]
 800ed0c:	69b9      	ldr	r1, [r7, #24]
 800ed0e:	68f8      	ldr	r0, [r7, #12]
 800ed10:	f000 f822 	bl	800ed58 <etharp_query>
 800ed14:	4603      	mov	r3, r0
 800ed16:	e00b      	b.n	800ed30 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ed1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ed22:	9300      	str	r3, [sp, #0]
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	68b9      	ldr	r1, [r7, #8]
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f001 fd45 	bl	80107b8 <ethernet_output>
 800ed2e:	4603      	mov	r3, r0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3720      	adds	r7, #32
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	08015728 	.word	0x08015728
 800ed3c:	08015878 	.word	0x08015878
 800ed40:	080157a0 	.word	0x080157a0
 800ed44:	080158c8 	.word	0x080158c8
 800ed48:	08015868 	.word	0x08015868
 800ed4c:	08016038 	.word	0x08016038
 800ed50:	200085c0 	.word	0x200085c0
 800ed54:	200084d0 	.word	0x200084d0

0800ed58 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b08c      	sub	sp, #48	@ 0x30
 800ed5c:	af02      	add	r7, sp, #8
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	3326      	adds	r3, #38	@ 0x26
 800ed68:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ed6a:	23ff      	movs	r3, #255	@ 0xff
 800ed6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800ed70:	2300      	movs	r3, #0
 800ed72:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	68f9      	ldr	r1, [r7, #12]
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f000 fe0e 	bl	800f99c <ip4_addr_isbroadcast_u32>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10c      	bne.n	800eda0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ed8e:	2be0      	cmp	r3, #224	@ 0xe0
 800ed90:	d006      	beq.n	800eda0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d003      	beq.n	800eda0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d102      	bne.n	800eda6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eda0:	f06f 030f 	mvn.w	r3, #15
 800eda4:	e101      	b.n	800efaa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800eda6:	68fa      	ldr	r2, [r7, #12]
 800eda8:	2101      	movs	r1, #1
 800edaa:	68b8      	ldr	r0, [r7, #8]
 800edac:	f7ff fb60 	bl	800e470 <etharp_find_entry>
 800edb0:	4603      	mov	r3, r0
 800edb2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800edb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	da02      	bge.n	800edc2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800edbc:	8a7b      	ldrh	r3, [r7, #18]
 800edbe:	b25b      	sxtb	r3, r3
 800edc0:	e0f3      	b.n	800efaa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800edc2:	8a7b      	ldrh	r3, [r7, #18]
 800edc4:	2b7e      	cmp	r3, #126	@ 0x7e
 800edc6:	d906      	bls.n	800edd6 <etharp_query+0x7e>
 800edc8:	4b7a      	ldr	r3, [pc, #488]	@ (800efb4 <etharp_query+0x25c>)
 800edca:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800edce:	497a      	ldr	r1, [pc, #488]	@ (800efb8 <etharp_query+0x260>)
 800edd0:	487a      	ldr	r0, [pc, #488]	@ (800efbc <etharp_query+0x264>)
 800edd2:	f003 f9d1 	bl	8012178 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800edd6:	8a7b      	ldrh	r3, [r7, #18]
 800edd8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800edda:	7c7a      	ldrb	r2, [r7, #17]
 800eddc:	4978      	ldr	r1, [pc, #480]	@ (800efc0 <etharp_query+0x268>)
 800edde:	4613      	mov	r3, r2
 800ede0:	005b      	lsls	r3, r3, #1
 800ede2:	4413      	add	r3, r2
 800ede4:	00db      	lsls	r3, r3, #3
 800ede6:	440b      	add	r3, r1
 800ede8:	3314      	adds	r3, #20
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d115      	bne.n	800ee1c <etharp_query+0xc4>
    is_new_entry = 1;
 800edf0:	2301      	movs	r3, #1
 800edf2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800edf4:	7c7a      	ldrb	r2, [r7, #17]
 800edf6:	4972      	ldr	r1, [pc, #456]	@ (800efc0 <etharp_query+0x268>)
 800edf8:	4613      	mov	r3, r2
 800edfa:	005b      	lsls	r3, r3, #1
 800edfc:	4413      	add	r3, r2
 800edfe:	00db      	lsls	r3, r3, #3
 800ee00:	440b      	add	r3, r1
 800ee02:	3314      	adds	r3, #20
 800ee04:	2201      	movs	r2, #1
 800ee06:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ee08:	7c7a      	ldrb	r2, [r7, #17]
 800ee0a:	496d      	ldr	r1, [pc, #436]	@ (800efc0 <etharp_query+0x268>)
 800ee0c:	4613      	mov	r3, r2
 800ee0e:	005b      	lsls	r3, r3, #1
 800ee10:	4413      	add	r3, r2
 800ee12:	00db      	lsls	r3, r3, #3
 800ee14:	440b      	add	r3, r1
 800ee16:	3308      	adds	r3, #8
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ee1c:	7c7a      	ldrb	r2, [r7, #17]
 800ee1e:	4968      	ldr	r1, [pc, #416]	@ (800efc0 <etharp_query+0x268>)
 800ee20:	4613      	mov	r3, r2
 800ee22:	005b      	lsls	r3, r3, #1
 800ee24:	4413      	add	r3, r2
 800ee26:	00db      	lsls	r3, r3, #3
 800ee28:	440b      	add	r3, r1
 800ee2a:	3314      	adds	r3, #20
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d011      	beq.n	800ee56 <etharp_query+0xfe>
 800ee32:	7c7a      	ldrb	r2, [r7, #17]
 800ee34:	4962      	ldr	r1, [pc, #392]	@ (800efc0 <etharp_query+0x268>)
 800ee36:	4613      	mov	r3, r2
 800ee38:	005b      	lsls	r3, r3, #1
 800ee3a:	4413      	add	r3, r2
 800ee3c:	00db      	lsls	r3, r3, #3
 800ee3e:	440b      	add	r3, r1
 800ee40:	3314      	adds	r3, #20
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d806      	bhi.n	800ee56 <etharp_query+0xfe>
 800ee48:	4b5a      	ldr	r3, [pc, #360]	@ (800efb4 <etharp_query+0x25c>)
 800ee4a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800ee4e:	495d      	ldr	r1, [pc, #372]	@ (800efc4 <etharp_query+0x26c>)
 800ee50:	485a      	ldr	r0, [pc, #360]	@ (800efbc <etharp_query+0x264>)
 800ee52:	f003 f991 	bl	8012178 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ee56:	6a3b      	ldr	r3, [r7, #32]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d102      	bne.n	800ee62 <etharp_query+0x10a>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d10c      	bne.n	800ee7c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ee62:	68b9      	ldr	r1, [r7, #8]
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f000 f963 	bl	800f130 <etharp_request>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d102      	bne.n	800ee7c <etharp_query+0x124>
      return result;
 800ee76:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ee7a:	e096      	b.n	800efaa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d106      	bne.n	800ee90 <etharp_query+0x138>
 800ee82:	4b4c      	ldr	r3, [pc, #304]	@ (800efb4 <etharp_query+0x25c>)
 800ee84:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800ee88:	494f      	ldr	r1, [pc, #316]	@ (800efc8 <etharp_query+0x270>)
 800ee8a:	484c      	ldr	r0, [pc, #304]	@ (800efbc <etharp_query+0x264>)
 800ee8c:	f003 f974 	bl	8012178 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ee90:	7c7a      	ldrb	r2, [r7, #17]
 800ee92:	494b      	ldr	r1, [pc, #300]	@ (800efc0 <etharp_query+0x268>)
 800ee94:	4613      	mov	r3, r2
 800ee96:	005b      	lsls	r3, r3, #1
 800ee98:	4413      	add	r3, r2
 800ee9a:	00db      	lsls	r3, r3, #3
 800ee9c:	440b      	add	r3, r1
 800ee9e:	3314      	adds	r3, #20
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d917      	bls.n	800eed6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800eea6:	4a49      	ldr	r2, [pc, #292]	@ (800efcc <etharp_query+0x274>)
 800eea8:	7c7b      	ldrb	r3, [r7, #17]
 800eeaa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800eeac:	7c7a      	ldrb	r2, [r7, #17]
 800eeae:	4613      	mov	r3, r2
 800eeb0:	005b      	lsls	r3, r3, #1
 800eeb2:	4413      	add	r3, r2
 800eeb4:	00db      	lsls	r3, r3, #3
 800eeb6:	3308      	adds	r3, #8
 800eeb8:	4a41      	ldr	r2, [pc, #260]	@ (800efc0 <etharp_query+0x268>)
 800eeba:	4413      	add	r3, r2
 800eebc:	3304      	adds	r3, #4
 800eebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eec2:	9200      	str	r2, [sp, #0]
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	6879      	ldr	r1, [r7, #4]
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f001 fc75 	bl	80107b8 <ethernet_output>
 800eece:	4603      	mov	r3, r0
 800eed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eed4:	e067      	b.n	800efa6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eed6:	7c7a      	ldrb	r2, [r7, #17]
 800eed8:	4939      	ldr	r1, [pc, #228]	@ (800efc0 <etharp_query+0x268>)
 800eeda:	4613      	mov	r3, r2
 800eedc:	005b      	lsls	r3, r3, #1
 800eede:	4413      	add	r3, r2
 800eee0:	00db      	lsls	r3, r3, #3
 800eee2:	440b      	add	r3, r1
 800eee4:	3314      	adds	r3, #20
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d15c      	bne.n	800efa6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800eeec:	2300      	movs	r3, #0
 800eeee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800eef4:	e01c      	b.n	800ef30 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	895a      	ldrh	r2, [r3, #10]
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	891b      	ldrh	r3, [r3, #8]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d10a      	bne.n	800ef18 <etharp_query+0x1c0>
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d006      	beq.n	800ef18 <etharp_query+0x1c0>
 800ef0a:	4b2a      	ldr	r3, [pc, #168]	@ (800efb4 <etharp_query+0x25c>)
 800ef0c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800ef10:	492f      	ldr	r1, [pc, #188]	@ (800efd0 <etharp_query+0x278>)
 800ef12:	482a      	ldr	r0, [pc, #168]	@ (800efbc <etharp_query+0x264>)
 800ef14:	f003 f930 	bl	8012178 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	7b1b      	ldrb	r3, [r3, #12]
 800ef1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d002      	beq.n	800ef2a <etharp_query+0x1d2>
        copy_needed = 1;
 800ef24:	2301      	movs	r3, #1
 800ef26:	61bb      	str	r3, [r7, #24]
        break;
 800ef28:	e005      	b.n	800ef36 <etharp_query+0x1de>
      }
      p = p->next;
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d1df      	bne.n	800eef6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d007      	beq.n	800ef4c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800ef42:	200e      	movs	r0, #14
 800ef44:	f7f8 fed8 	bl	8007cf8 <pbuf_clone>
 800ef48:	61f8      	str	r0, [r7, #28]
 800ef4a:	e004      	b.n	800ef56 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ef50:	69f8      	ldr	r0, [r7, #28]
 800ef52:	f7f8 fd15 	bl	8007980 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ef56:	69fb      	ldr	r3, [r7, #28]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d021      	beq.n	800efa0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ef5c:	7c7a      	ldrb	r2, [r7, #17]
 800ef5e:	4918      	ldr	r1, [pc, #96]	@ (800efc0 <etharp_query+0x268>)
 800ef60:	4613      	mov	r3, r2
 800ef62:	005b      	lsls	r3, r3, #1
 800ef64:	4413      	add	r3, r2
 800ef66:	00db      	lsls	r3, r3, #3
 800ef68:	440b      	add	r3, r1
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00a      	beq.n	800ef86 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ef70:	7c7a      	ldrb	r2, [r7, #17]
 800ef72:	4913      	ldr	r1, [pc, #76]	@ (800efc0 <etharp_query+0x268>)
 800ef74:	4613      	mov	r3, r2
 800ef76:	005b      	lsls	r3, r3, #1
 800ef78:	4413      	add	r3, r2
 800ef7a:	00db      	lsls	r3, r3, #3
 800ef7c:	440b      	add	r3, r1
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7f8 fc5d 	bl	8007840 <pbuf_free>
      }
      arp_table[i].q = p;
 800ef86:	7c7a      	ldrb	r2, [r7, #17]
 800ef88:	490d      	ldr	r1, [pc, #52]	@ (800efc0 <etharp_query+0x268>)
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	005b      	lsls	r3, r3, #1
 800ef8e:	4413      	add	r3, r2
 800ef90:	00db      	lsls	r3, r3, #3
 800ef92:	440b      	add	r3, r1
 800ef94:	69fa      	ldr	r2, [r7, #28]
 800ef96:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ef9e:	e002      	b.n	800efa6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800efa0:	23ff      	movs	r3, #255	@ 0xff
 800efa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800efa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3728      	adds	r7, #40	@ 0x28
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	08015728 	.word	0x08015728
 800efb8:	080158d4 	.word	0x080158d4
 800efbc:	080157a0 	.word	0x080157a0
 800efc0:	200084d0 	.word	0x200084d0
 800efc4:	080158e4 	.word	0x080158e4
 800efc8:	080158c8 	.word	0x080158c8
 800efcc:	200085c0 	.word	0x200085c0
 800efd0:	0801590c 	.word	0x0801590c

0800efd4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b08a      	sub	sp, #40	@ 0x28
 800efd8:	af02      	add	r7, sp, #8
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	607a      	str	r2, [r7, #4]
 800efe0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800efe2:	2300      	movs	r3, #0
 800efe4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d106      	bne.n	800effa <etharp_raw+0x26>
 800efec:	4b3a      	ldr	r3, [pc, #232]	@ (800f0d8 <etharp_raw+0x104>)
 800efee:	f240 4257 	movw	r2, #1111	@ 0x457
 800eff2:	493a      	ldr	r1, [pc, #232]	@ (800f0dc <etharp_raw+0x108>)
 800eff4:	483a      	ldr	r0, [pc, #232]	@ (800f0e0 <etharp_raw+0x10c>)
 800eff6:	f003 f8bf 	bl	8012178 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800effa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800effe:	211c      	movs	r1, #28
 800f000:	200e      	movs	r0, #14
 800f002:	f7f8 f939 	bl	8007278 <pbuf_alloc>
 800f006:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d102      	bne.n	800f014 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f00e:	f04f 33ff 	mov.w	r3, #4294967295
 800f012:	e05d      	b.n	800f0d0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	895b      	ldrh	r3, [r3, #10]
 800f018:	2b1b      	cmp	r3, #27
 800f01a:	d806      	bhi.n	800f02a <etharp_raw+0x56>
 800f01c:	4b2e      	ldr	r3, [pc, #184]	@ (800f0d8 <etharp_raw+0x104>)
 800f01e:	f240 4262 	movw	r2, #1122	@ 0x462
 800f022:	4930      	ldr	r1, [pc, #192]	@ (800f0e4 <etharp_raw+0x110>)
 800f024:	482e      	ldr	r0, [pc, #184]	@ (800f0e0 <etharp_raw+0x10c>)
 800f026:	f003 f8a7 	bl	8012178 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f030:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f032:	4618      	mov	r0, r3
 800f034:	f7f7 f8a6 	bl	8006184 <lwip_htons>
 800f038:	4603      	mov	r3, r0
 800f03a:	461a      	mov	r2, r3
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f046:	2b06      	cmp	r3, #6
 800f048:	d006      	beq.n	800f058 <etharp_raw+0x84>
 800f04a:	4b23      	ldr	r3, [pc, #140]	@ (800f0d8 <etharp_raw+0x104>)
 800f04c:	f240 4269 	movw	r2, #1129	@ 0x469
 800f050:	4925      	ldr	r1, [pc, #148]	@ (800f0e8 <etharp_raw+0x114>)
 800f052:	4823      	ldr	r0, [pc, #140]	@ (800f0e0 <etharp_raw+0x10c>)
 800f054:	f003 f890 	bl	8012178 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	3308      	adds	r3, #8
 800f05c:	2206      	movs	r2, #6
 800f05e:	6839      	ldr	r1, [r7, #0]
 800f060:	4618      	mov	r0, r3
 800f062:	f003 f9e0 	bl	8012426 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	3312      	adds	r3, #18
 800f06a:	2206      	movs	r2, #6
 800f06c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f06e:	4618      	mov	r0, r3
 800f070:	f003 f9d9 	bl	8012426 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	330e      	adds	r3, #14
 800f078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f07a:	6812      	ldr	r2, [r2, #0]
 800f07c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	3318      	adds	r3, #24
 800f082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f084:	6812      	ldr	r2, [r2, #0]
 800f086:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	2200      	movs	r2, #0
 800f08c:	701a      	strb	r2, [r3, #0]
 800f08e:	2200      	movs	r2, #0
 800f090:	f042 0201 	orr.w	r2, r2, #1
 800f094:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	2200      	movs	r2, #0
 800f09a:	f042 0208 	orr.w	r2, r2, #8
 800f09e:	709a      	strb	r2, [r3, #2]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	2206      	movs	r2, #6
 800f0a8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	2204      	movs	r2, #4
 800f0ae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f0b0:	f640 0306 	movw	r3, #2054	@ 0x806
 800f0b4:	9300      	str	r3, [sp, #0]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	68ba      	ldr	r2, [r7, #8]
 800f0ba:	69b9      	ldr	r1, [r7, #24]
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f001 fb7b 	bl	80107b8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f0c2:	69b8      	ldr	r0, [r7, #24]
 800f0c4:	f7f8 fbbc 	bl	8007840 <pbuf_free>
  p = NULL;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f0cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3720      	adds	r7, #32
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	08015728 	.word	0x08015728
 800f0dc:	08015878 	.word	0x08015878
 800f0e0:	080157a0 	.word	0x080157a0
 800f0e4:	08015928 	.word	0x08015928
 800f0e8:	0801595c 	.word	0x0801595c

0800f0ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b088      	sub	sp, #32
 800f0f0:	af04      	add	r7, sp, #16
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f108:	2201      	movs	r2, #1
 800f10a:	9203      	str	r2, [sp, #12]
 800f10c:	68ba      	ldr	r2, [r7, #8]
 800f10e:	9202      	str	r2, [sp, #8]
 800f110:	4a06      	ldr	r2, [pc, #24]	@ (800f12c <etharp_request_dst+0x40>)
 800f112:	9201      	str	r2, [sp, #4]
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	4603      	mov	r3, r0
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	f7ff ff5a 	bl	800efd4 <etharp_raw>
 800f120:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	08016040 	.word	0x08016040

0800f130 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f13a:	4a05      	ldr	r2, [pc, #20]	@ (800f150 <etharp_request+0x20>)
 800f13c:	6839      	ldr	r1, [r7, #0]
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f7ff ffd4 	bl	800f0ec <etharp_request_dst>
 800f144:	4603      	mov	r3, r0
}
 800f146:	4618      	mov	r0, r3
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	08016038 	.word	0x08016038

0800f154 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b08e      	sub	sp, #56	@ 0x38
 800f158:	af04      	add	r7, sp, #16
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f15e:	4b79      	ldr	r3, [pc, #484]	@ (800f344 <icmp_input+0x1f0>)
 800f160:	689b      	ldr	r3, [r3, #8]
 800f162:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	f003 030f 	and.w	r3, r3, #15
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	b2db      	uxtb	r3, r3
 800f172:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800f174:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f176:	2b13      	cmp	r3, #19
 800f178:	f240 80cd 	bls.w	800f316 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	895b      	ldrh	r3, [r3, #10]
 800f180:	2b03      	cmp	r3, #3
 800f182:	f240 80ca 	bls.w	800f31a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f190:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f194:	2b00      	cmp	r3, #0
 800f196:	f000 80b7 	beq.w	800f308 <icmp_input+0x1b4>
 800f19a:	2b08      	cmp	r3, #8
 800f19c:	f040 80b7 	bne.w	800f30e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f1a0:	4b69      	ldr	r3, [pc, #420]	@ (800f348 <icmp_input+0x1f4>)
 800f1a2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f1a4:	4b67      	ldr	r3, [pc, #412]	@ (800f344 <icmp_input+0x1f0>)
 800f1a6:	695b      	ldr	r3, [r3, #20]
 800f1a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f1ac:	2be0      	cmp	r3, #224	@ 0xe0
 800f1ae:	f000 80bb 	beq.w	800f328 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f1b2:	4b64      	ldr	r3, [pc, #400]	@ (800f344 <icmp_input+0x1f0>)
 800f1b4:	695b      	ldr	r3, [r3, #20]
 800f1b6:	4a63      	ldr	r2, [pc, #396]	@ (800f344 <icmp_input+0x1f0>)
 800f1b8:	6812      	ldr	r2, [r2, #0]
 800f1ba:	4611      	mov	r1, r2
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f000 fbed 	bl	800f99c <ip4_addr_isbroadcast_u32>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	f040 80b1 	bne.w	800f32c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	891b      	ldrh	r3, [r3, #8]
 800f1ce:	2b07      	cmp	r3, #7
 800f1d0:	f240 80a5 	bls.w	800f31e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f1d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f1d6:	330e      	adds	r3, #14
 800f1d8:	4619      	mov	r1, r3
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f7f8 fa9a 	bl	8007714 <pbuf_add_header>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d04b      	beq.n	800f27e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	891a      	ldrh	r2, [r3, #8]
 800f1ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f1ec:	4413      	add	r3, r2
 800f1ee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	891b      	ldrh	r3, [r3, #8]
 800f1f4:	8b7a      	ldrh	r2, [r7, #26]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	f0c0 809a 	bcc.w	800f330 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f1fc:	8b7b      	ldrh	r3, [r7, #26]
 800f1fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f202:	4619      	mov	r1, r3
 800f204:	200e      	movs	r0, #14
 800f206:	f7f8 f837 	bl	8007278 <pbuf_alloc>
 800f20a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f000 8090 	beq.w	800f334 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	895b      	ldrh	r3, [r3, #10]
 800f218:	461a      	mov	r2, r3
 800f21a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f21c:	3308      	adds	r3, #8
 800f21e:	429a      	cmp	r2, r3
 800f220:	d203      	bcs.n	800f22a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f222:	6978      	ldr	r0, [r7, #20]
 800f224:	f7f8 fb0c 	bl	8007840 <pbuf_free>
          goto icmperr;
 800f228:	e085      	b.n	800f336 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f232:	4618      	mov	r0, r3
 800f234:	f003 f8f7 	bl	8012426 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f238:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f23a:	4619      	mov	r1, r3
 800f23c:	6978      	ldr	r0, [r7, #20]
 800f23e:	f7f8 fa79 	bl	8007734 <pbuf_remove_header>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d009      	beq.n	800f25c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f248:	4b40      	ldr	r3, [pc, #256]	@ (800f34c <icmp_input+0x1f8>)
 800f24a:	22b6      	movs	r2, #182	@ 0xb6
 800f24c:	4940      	ldr	r1, [pc, #256]	@ (800f350 <icmp_input+0x1fc>)
 800f24e:	4841      	ldr	r0, [pc, #260]	@ (800f354 <icmp_input+0x200>)
 800f250:	f002 ff92 	bl	8012178 <iprintf>
          pbuf_free(r);
 800f254:	6978      	ldr	r0, [r7, #20]
 800f256:	f7f8 faf3 	bl	8007840 <pbuf_free>
          goto icmperr;
 800f25a:	e06c      	b.n	800f336 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f25c:	6879      	ldr	r1, [r7, #4]
 800f25e:	6978      	ldr	r0, [r7, #20]
 800f260:	f7f8 fc06 	bl	8007a70 <pbuf_copy>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d003      	beq.n	800f272 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f26a:	6978      	ldr	r0, [r7, #20]
 800f26c:	f7f8 fae8 	bl	8007840 <pbuf_free>
          goto icmperr;
 800f270:	e061      	b.n	800f336 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7f8 fae4 	bl	8007840 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	607b      	str	r3, [r7, #4]
 800f27c:	e00f      	b.n	800f29e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f27e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f280:	330e      	adds	r3, #14
 800f282:	4619      	mov	r1, r3
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7f8 fa55 	bl	8007734 <pbuf_remove_header>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d006      	beq.n	800f29e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f290:	4b2e      	ldr	r3, [pc, #184]	@ (800f34c <icmp_input+0x1f8>)
 800f292:	22c7      	movs	r2, #199	@ 0xc7
 800f294:	4930      	ldr	r1, [pc, #192]	@ (800f358 <icmp_input+0x204>)
 800f296:	482f      	ldr	r0, [pc, #188]	@ (800f354 <icmp_input+0x200>)
 800f298:	f002 ff6e 	bl	8012178 <iprintf>
          goto icmperr;
 800f29c:	e04b      	b.n	800f336 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f2a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7f8 fa33 	bl	8007714 <pbuf_add_header>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d12b      	bne.n	800f30c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f2ba:	69fb      	ldr	r3, [r7, #28]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f2c2:	4b20      	ldr	r3, [pc, #128]	@ (800f344 <icmp_input+0x1f0>)
 800f2c4:	691a      	ldr	r2, [r3, #16]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	709a      	strb	r2, [r3, #2]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	22ff      	movs	r2, #255	@ 0xff
 800f2de:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	729a      	strb	r2, [r3, #10]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	9302      	str	r3, [sp, #8]
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	9301      	str	r3, [sp, #4]
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	9300      	str	r3, [sp, #0]
 800f2f6:	23ff      	movs	r3, #255	@ 0xff
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	69f9      	ldr	r1, [r7, #28]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 fa75 	bl	800f7ec <ip4_output_if>
 800f302:	4603      	mov	r3, r0
 800f304:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f306:	e001      	b.n	800f30c <icmp_input+0x1b8>
      break;
 800f308:	bf00      	nop
 800f30a:	e000      	b.n	800f30e <icmp_input+0x1ba>
      break;
 800f30c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f7f8 fa96 	bl	8007840 <pbuf_free>
  return;
 800f314:	e013      	b.n	800f33e <icmp_input+0x1ea>
    goto lenerr;
 800f316:	bf00      	nop
 800f318:	e002      	b.n	800f320 <icmp_input+0x1cc>
    goto lenerr;
 800f31a:	bf00      	nop
 800f31c:	e000      	b.n	800f320 <icmp_input+0x1cc>
        goto lenerr;
 800f31e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f7f8 fa8d 	bl	8007840 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f326:	e00a      	b.n	800f33e <icmp_input+0x1ea>
        goto icmperr;
 800f328:	bf00      	nop
 800f32a:	e004      	b.n	800f336 <icmp_input+0x1e2>
        goto icmperr;
 800f32c:	bf00      	nop
 800f32e:	e002      	b.n	800f336 <icmp_input+0x1e2>
          goto icmperr;
 800f330:	bf00      	nop
 800f332:	e000      	b.n	800f336 <icmp_input+0x1e2>
          goto icmperr;
 800f334:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f7f8 fa82 	bl	8007840 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f33c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f33e:	3728      	adds	r7, #40	@ 0x28
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	20004f00 	.word	0x20004f00
 800f348:	20004f14 	.word	0x20004f14
 800f34c:	080159a0 	.word	0x080159a0
 800f350:	080159d8 	.word	0x080159d8
 800f354:	08015a10 	.word	0x08015a10
 800f358:	08015a38 	.word	0x08015a38

0800f35c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	460b      	mov	r3, r1
 800f366:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f368:	78fb      	ldrb	r3, [r7, #3]
 800f36a:	461a      	mov	r2, r3
 800f36c:	2103      	movs	r1, #3
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 f814 	bl	800f39c <icmp_send_response>
}
 800f374:	bf00      	nop
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	460b      	mov	r3, r1
 800f386:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f388:	78fb      	ldrb	r3, [r7, #3]
 800f38a:	461a      	mov	r2, r3
 800f38c:	210b      	movs	r1, #11
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 f804 	bl	800f39c <icmp_send_response>
}
 800f394:	bf00      	nop
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b08c      	sub	sp, #48	@ 0x30
 800f3a0:	af04      	add	r7, sp, #16
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	70fb      	strb	r3, [r7, #3]
 800f3a8:	4613      	mov	r3, r2
 800f3aa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f3ac:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f3b0:	2124      	movs	r1, #36	@ 0x24
 800f3b2:	2022      	movs	r0, #34	@ 0x22
 800f3b4:	f7f7 ff60 	bl	8007278 <pbuf_alloc>
 800f3b8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d04c      	beq.n	800f45a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	895b      	ldrh	r3, [r3, #10]
 800f3c4:	2b23      	cmp	r3, #35	@ 0x23
 800f3c6:	d806      	bhi.n	800f3d6 <icmp_send_response+0x3a>
 800f3c8:	4b26      	ldr	r3, [pc, #152]	@ (800f464 <icmp_send_response+0xc8>)
 800f3ca:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800f3ce:	4926      	ldr	r1, [pc, #152]	@ (800f468 <icmp_send_response+0xcc>)
 800f3d0:	4826      	ldr	r0, [pc, #152]	@ (800f46c <icmp_send_response+0xd0>)
 800f3d2:	f002 fed1 	bl	8012178 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	78fa      	ldrb	r2, [r7, #3]
 800f3e6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	78ba      	ldrb	r2, [r7, #2]
 800f3ec:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	711a      	strb	r2, [r3, #4]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	719a      	strb	r2, [r3, #6]
 800f3fe:	2200      	movs	r2, #0
 800f400:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	f103 0008 	add.w	r0, r3, #8
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	221c      	movs	r2, #28
 800f410:	4619      	mov	r1, r3
 800f412:	f003 f808 	bl	8012426 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f416:	69bb      	ldr	r3, [r7, #24]
 800f418:	68db      	ldr	r3, [r3, #12]
 800f41a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f41c:	f107 030c 	add.w	r3, r7, #12
 800f420:	4618      	mov	r0, r3
 800f422:	f000 f825 	bl	800f470 <ip4_route>
 800f426:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d011      	beq.n	800f452 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	2200      	movs	r2, #0
 800f432:	709a      	strb	r2, [r3, #2]
 800f434:	2200      	movs	r2, #0
 800f436:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f438:	f107 020c 	add.w	r2, r7, #12
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	9302      	str	r3, [sp, #8]
 800f440:	2301      	movs	r3, #1
 800f442:	9301      	str	r3, [sp, #4]
 800f444:	2300      	movs	r3, #0
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	23ff      	movs	r3, #255	@ 0xff
 800f44a:	2100      	movs	r1, #0
 800f44c:	69f8      	ldr	r0, [r7, #28]
 800f44e:	f000 f9cd 	bl	800f7ec <ip4_output_if>
  }
  pbuf_free(q);
 800f452:	69f8      	ldr	r0, [r7, #28]
 800f454:	f7f8 f9f4 	bl	8007840 <pbuf_free>
 800f458:	e000      	b.n	800f45c <icmp_send_response+0xc0>
    return;
 800f45a:	bf00      	nop
}
 800f45c:	3720      	adds	r7, #32
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	080159a0 	.word	0x080159a0
 800f468:	08015a6c 	.word	0x08015a6c
 800f46c:	08015a10 	.word	0x08015a10

0800f470 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f478:	4b33      	ldr	r3, [pc, #204]	@ (800f548 <ip4_route+0xd8>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	60fb      	str	r3, [r7, #12]
 800f47e:	e036      	b.n	800f4ee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f486:	f003 0301 	and.w	r3, r3, #1
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d02b      	beq.n	800f4e8 <ip4_route+0x78>
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f496:	089b      	lsrs	r3, r3, #2
 800f498:	f003 0301 	and.w	r3, r3, #1
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d022      	beq.n	800f4e8 <ip4_route+0x78>
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	3304      	adds	r3, #4
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d01d      	beq.n	800f4e8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	3304      	adds	r3, #4
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	405a      	eors	r2, r3
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	3308      	adds	r3, #8
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4013      	ands	r3, r2
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d101      	bne.n	800f4c8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	e038      	b.n	800f53a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f4ce:	f003 0302 	and.w	r3, r3, #2
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d108      	bne.n	800f4e8 <ip4_route+0x78>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	330c      	adds	r3, #12
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d101      	bne.n	800f4e8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	e028      	b.n	800f53a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	60fb      	str	r3, [r7, #12]
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d1c5      	bne.n	800f480 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f4f4:	4b15      	ldr	r3, [pc, #84]	@ (800f54c <ip4_route+0xdc>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d01a      	beq.n	800f532 <ip4_route+0xc2>
 800f4fc:	4b13      	ldr	r3, [pc, #76]	@ (800f54c <ip4_route+0xdc>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f504:	f003 0301 	and.w	r3, r3, #1
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d012      	beq.n	800f532 <ip4_route+0xc2>
 800f50c:	4b0f      	ldr	r3, [pc, #60]	@ (800f54c <ip4_route+0xdc>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f514:	f003 0304 	and.w	r3, r3, #4
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00a      	beq.n	800f532 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f51c:	4b0b      	ldr	r3, [pc, #44]	@ (800f54c <ip4_route+0xdc>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	3304      	adds	r3, #4
 800f522:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f524:	2b00      	cmp	r3, #0
 800f526:	d004      	beq.n	800f532 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f530:	d101      	bne.n	800f536 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f532:	2300      	movs	r3, #0
 800f534:	e001      	b.n	800f53a <ip4_route+0xca>
  }

  return netif_default;
 800f536:	4b05      	ldr	r3, [pc, #20]	@ (800f54c <ip4_route+0xdc>)
 800f538:	681b      	ldr	r3, [r3, #0]
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3714      	adds	r7, #20
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr
 800f546:	bf00      	nop
 800f548:	20008464 	.word	0x20008464
 800f54c:	20008468 	.word	0x20008468

0800f550 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f55e:	f003 0301 	and.w	r3, r3, #1
 800f562:	b2db      	uxtb	r3, r3
 800f564:	2b00      	cmp	r3, #0
 800f566:	d016      	beq.n	800f596 <ip4_input_accept+0x46>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	3304      	adds	r3, #4
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d011      	beq.n	800f596 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f572:	4b0b      	ldr	r3, [pc, #44]	@ (800f5a0 <ip4_input_accept+0x50>)
 800f574:	695a      	ldr	r2, [r3, #20]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	3304      	adds	r3, #4
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d008      	beq.n	800f592 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f580:	4b07      	ldr	r3, [pc, #28]	@ (800f5a0 <ip4_input_accept+0x50>)
 800f582:	695b      	ldr	r3, [r3, #20]
 800f584:	6879      	ldr	r1, [r7, #4]
 800f586:	4618      	mov	r0, r3
 800f588:	f000 fa08 	bl	800f99c <ip4_addr_isbroadcast_u32>
 800f58c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f592:	2301      	movs	r3, #1
 800f594:	e000      	b.n	800f598 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f596:	2300      	movs	r3, #0
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3708      	adds	r7, #8
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	20004f00 	.word	0x20004f00

0800f5a4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b086      	sub	sp, #24
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	091b      	lsrs	r3, r3, #4
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	2b04      	cmp	r3, #4
 800f5be:	d004      	beq.n	800f5ca <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7f8 f93d 	bl	8007840 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	e107      	b.n	800f7da <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	f003 030f 	and.w	r3, r3, #15
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	885b      	ldrh	r3, [r3, #2]
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7f6 fdcf 	bl	8006184 <lwip_htons>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	891b      	ldrh	r3, [r3, #8]
 800f5ee:	89ba      	ldrh	r2, [r7, #12]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d204      	bcs.n	800f5fe <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f5f4:	89bb      	ldrh	r3, [r7, #12]
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f7f7 ff9b 	bl	8007534 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	895b      	ldrh	r3, [r3, #10]
 800f602:	89fa      	ldrh	r2, [r7, #14]
 800f604:	429a      	cmp	r2, r3
 800f606:	d807      	bhi.n	800f618 <ip4_input+0x74>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	891b      	ldrh	r3, [r3, #8]
 800f60c:	89ba      	ldrh	r2, [r7, #12]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d802      	bhi.n	800f618 <ip4_input+0x74>
 800f612:	89fb      	ldrh	r3, [r7, #14]
 800f614:	2b13      	cmp	r3, #19
 800f616:	d804      	bhi.n	800f622 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7f8 f911 	bl	8007840 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f61e:	2300      	movs	r3, #0
 800f620:	e0db      	b.n	800f7da <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	4a6f      	ldr	r2, [pc, #444]	@ (800f7e4 <ip4_input+0x240>)
 800f628:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	4a6d      	ldr	r2, [pc, #436]	@ (800f7e4 <ip4_input+0x240>)
 800f630:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f632:	4b6c      	ldr	r3, [pc, #432]	@ (800f7e4 <ip4_input+0x240>)
 800f634:	695b      	ldr	r3, [r3, #20]
 800f636:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f63a:	2be0      	cmp	r3, #224	@ 0xe0
 800f63c:	d112      	bne.n	800f664 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f644:	f003 0301 	and.w	r3, r3, #1
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d007      	beq.n	800f65e <ip4_input+0xba>
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	3304      	adds	r3, #4
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d002      	beq.n	800f65e <ip4_input+0xba>
      netif = inp;
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	613b      	str	r3, [r7, #16]
 800f65c:	e02a      	b.n	800f6b4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f65e:	2300      	movs	r3, #0
 800f660:	613b      	str	r3, [r7, #16]
 800f662:	e027      	b.n	800f6b4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f664:	6838      	ldr	r0, [r7, #0]
 800f666:	f7ff ff73 	bl	800f550 <ip4_input_accept>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d002      	beq.n	800f676 <ip4_input+0xd2>
      netif = inp;
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	613b      	str	r3, [r7, #16]
 800f674:	e01e      	b.n	800f6b4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f676:	2300      	movs	r3, #0
 800f678:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f67a:	4b5a      	ldr	r3, [pc, #360]	@ (800f7e4 <ip4_input+0x240>)
 800f67c:	695b      	ldr	r3, [r3, #20]
 800f67e:	b2db      	uxtb	r3, r3
 800f680:	2b7f      	cmp	r3, #127	@ 0x7f
 800f682:	d017      	beq.n	800f6b4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f684:	4b58      	ldr	r3, [pc, #352]	@ (800f7e8 <ip4_input+0x244>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	613b      	str	r3, [r7, #16]
 800f68a:	e00e      	b.n	800f6aa <ip4_input+0x106>
          if (netif == inp) {
 800f68c:	693a      	ldr	r2, [r7, #16]
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	429a      	cmp	r2, r3
 800f692:	d006      	beq.n	800f6a2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f694:	6938      	ldr	r0, [r7, #16]
 800f696:	f7ff ff5b 	bl	800f550 <ip4_input_accept>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d108      	bne.n	800f6b2 <ip4_input+0x10e>
 800f6a0:	e000      	b.n	800f6a4 <ip4_input+0x100>
            continue;
 800f6a2:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	613b      	str	r3, [r7, #16]
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1ed      	bne.n	800f68c <ip4_input+0xe8>
 800f6b0:	e000      	b.n	800f6b4 <ip4_input+0x110>
            break;
 800f6b2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f6b4:	4b4b      	ldr	r3, [pc, #300]	@ (800f7e4 <ip4_input+0x240>)
 800f6b6:	691b      	ldr	r3, [r3, #16]
 800f6b8:	6839      	ldr	r1, [r7, #0]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f000 f96e 	bl	800f99c <ip4_addr_isbroadcast_u32>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d105      	bne.n	800f6d2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f6c6:	4b47      	ldr	r3, [pc, #284]	@ (800f7e4 <ip4_input+0x240>)
 800f6c8:	691b      	ldr	r3, [r3, #16]
 800f6ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f6ce:	2be0      	cmp	r3, #224	@ 0xe0
 800f6d0:	d104      	bne.n	800f6dc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7f8 f8b4 	bl	8007840 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	e07e      	b.n	800f7da <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d104      	bne.n	800f6ec <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f7f8 f8ac 	bl	8007840 <pbuf_free>
    return ERR_OK;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	e076      	b.n	800f7da <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	88db      	ldrh	r3, [r3, #6]
 800f6f0:	b29b      	uxth	r3, r3
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800f6f8:	4013      	ands	r3, r2
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00b      	beq.n	800f716 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 fc92 	bl	8010028 <ip4_reass>
 800f704:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d101      	bne.n	800f710 <ip4_input+0x16c>
      return ERR_OK;
 800f70c:	2300      	movs	r3, #0
 800f70e:	e064      	b.n	800f7da <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f716:	4a33      	ldr	r2, [pc, #204]	@ (800f7e4 <ip4_input+0x240>)
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f71c:	4a31      	ldr	r2, [pc, #196]	@ (800f7e4 <ip4_input+0x240>)
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f722:	4a30      	ldr	r2, [pc, #192]	@ (800f7e4 <ip4_input+0x240>)
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	f003 030f 	and.w	r3, r3, #15
 800f730:	b2db      	uxtb	r3, r3
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	b2db      	uxtb	r3, r3
 800f736:	461a      	mov	r2, r3
 800f738:	4b2a      	ldr	r3, [pc, #168]	@ (800f7e4 <ip4_input+0x240>)
 800f73a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f73c:	89fb      	ldrh	r3, [r7, #14]
 800f73e:	4619      	mov	r1, r3
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7f7 fff7 	bl	8007734 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	7a5b      	ldrb	r3, [r3, #9]
 800f74a:	2b11      	cmp	r3, #17
 800f74c:	d006      	beq.n	800f75c <ip4_input+0x1b8>
 800f74e:	2b11      	cmp	r3, #17
 800f750:	dc13      	bgt.n	800f77a <ip4_input+0x1d6>
 800f752:	2b01      	cmp	r3, #1
 800f754:	d00c      	beq.n	800f770 <ip4_input+0x1cc>
 800f756:	2b06      	cmp	r3, #6
 800f758:	d005      	beq.n	800f766 <ip4_input+0x1c2>
 800f75a:	e00e      	b.n	800f77a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f75c:	6839      	ldr	r1, [r7, #0]
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f7fe fc68 	bl	800e034 <udp_input>
        break;
 800f764:	e026      	b.n	800f7b4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f766:	6839      	ldr	r1, [r7, #0]
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7fa f88f 	bl	800988c <tcp_input>
        break;
 800f76e:	e021      	b.n	800f7b4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f770:	6839      	ldr	r1, [r7, #0]
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f7ff fcee 	bl	800f154 <icmp_input>
        break;
 800f778:	e01c      	b.n	800f7b4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f77a:	4b1a      	ldr	r3, [pc, #104]	@ (800f7e4 <ip4_input+0x240>)
 800f77c:	695b      	ldr	r3, [r3, #20]
 800f77e:	6939      	ldr	r1, [r7, #16]
 800f780:	4618      	mov	r0, r3
 800f782:	f000 f90b 	bl	800f99c <ip4_addr_isbroadcast_u32>
 800f786:	4603      	mov	r3, r0
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d10f      	bne.n	800f7ac <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f78c:	4b15      	ldr	r3, [pc, #84]	@ (800f7e4 <ip4_input+0x240>)
 800f78e:	695b      	ldr	r3, [r3, #20]
 800f790:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f794:	2be0      	cmp	r3, #224	@ 0xe0
 800f796:	d009      	beq.n	800f7ac <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f798:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f79c:	4619      	mov	r1, r3
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7f8 f83b 	bl	800781a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f7a4:	2102      	movs	r1, #2
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f7ff fdd8 	bl	800f35c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f7f8 f847 	bl	8007840 <pbuf_free>
        break;
 800f7b2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f7b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f7e4 <ip4_input+0x240>)
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f7ba:	4b0a      	ldr	r3, [pc, #40]	@ (800f7e4 <ip4_input+0x240>)
 800f7bc:	2200      	movs	r2, #0
 800f7be:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f7c0:	4b08      	ldr	r3, [pc, #32]	@ (800f7e4 <ip4_input+0x240>)
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f7c6:	4b07      	ldr	r3, [pc, #28]	@ (800f7e4 <ip4_input+0x240>)
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f7cc:	4b05      	ldr	r3, [pc, #20]	@ (800f7e4 <ip4_input+0x240>)
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f7d2:	4b04      	ldr	r3, [pc, #16]	@ (800f7e4 <ip4_input+0x240>)
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3718      	adds	r7, #24
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	20004f00 	.word	0x20004f00
 800f7e8:	20008464 	.word	0x20008464

0800f7ec <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b08a      	sub	sp, #40	@ 0x28
 800f7f0:	af04      	add	r7, sp, #16
 800f7f2:	60f8      	str	r0, [r7, #12]
 800f7f4:	60b9      	str	r1, [r7, #8]
 800f7f6:	607a      	str	r2, [r7, #4]
 800f7f8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d009      	beq.n	800f818 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d003      	beq.n	800f812 <ip4_output_if+0x26>
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d102      	bne.n	800f818 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f814:	3304      	adds	r3, #4
 800f816:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f818:	78fa      	ldrb	r2, [r7, #3]
 800f81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81c:	9302      	str	r3, [sp, #8]
 800f81e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f822:	9301      	str	r3, [sp, #4]
 800f824:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	4613      	mov	r3, r2
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	6979      	ldr	r1, [r7, #20]
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f000 f805 	bl	800f840 <ip4_output_if_src>
 800f836:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3718      	adds	r7, #24
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b088      	sub	sp, #32
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	60b9      	str	r1, [r7, #8]
 800f84a:	607a      	str	r2, [r7, #4]
 800f84c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	7b9b      	ldrb	r3, [r3, #14]
 800f852:	2b01      	cmp	r3, #1
 800f854:	d006      	beq.n	800f864 <ip4_output_if_src+0x24>
 800f856:	4b4b      	ldr	r3, [pc, #300]	@ (800f984 <ip4_output_if_src+0x144>)
 800f858:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800f85c:	494a      	ldr	r1, [pc, #296]	@ (800f988 <ip4_output_if_src+0x148>)
 800f85e:	484b      	ldr	r0, [pc, #300]	@ (800f98c <ip4_output_if_src+0x14c>)
 800f860:	f002 fc8a 	bl	8012178 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d060      	beq.n	800f92c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f86a:	2314      	movs	r3, #20
 800f86c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f86e:	2114      	movs	r1, #20
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f7f7 ff4f 	bl	8007714 <pbuf_add_header>
 800f876:	4603      	mov	r3, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d002      	beq.n	800f882 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f87c:	f06f 0301 	mvn.w	r3, #1
 800f880:	e07c      	b.n	800f97c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	895b      	ldrh	r3, [r3, #10]
 800f88c:	2b13      	cmp	r3, #19
 800f88e:	d806      	bhi.n	800f89e <ip4_output_if_src+0x5e>
 800f890:	4b3c      	ldr	r3, [pc, #240]	@ (800f984 <ip4_output_if_src+0x144>)
 800f892:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800f896:	493e      	ldr	r1, [pc, #248]	@ (800f990 <ip4_output_if_src+0x150>)
 800f898:	483c      	ldr	r0, [pc, #240]	@ (800f98c <ip4_output_if_src+0x14c>)
 800f89a:	f002 fc6d 	bl	8012178 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f89e:	69fb      	ldr	r3, [r7, #28]
 800f8a0:	78fa      	ldrb	r2, [r7, #3]
 800f8a2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f8aa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f8b4:	8b7b      	ldrh	r3, [r7, #26]
 800f8b6:	089b      	lsrs	r3, r3, #2
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8c0:	b2da      	uxtb	r2, r3
 800f8c2:	69fb      	ldr	r3, [r7, #28]
 800f8c4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f8c6:	69fb      	ldr	r3, [r7, #28]
 800f8c8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f8cc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	891b      	ldrh	r3, [r3, #8]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7f6 fc56 	bl	8006184 <lwip_htons>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	461a      	mov	r2, r3
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f8e0:	69fb      	ldr	r3, [r7, #28]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	719a      	strb	r2, [r3, #6]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f8ea:	4b2a      	ldr	r3, [pc, #168]	@ (800f994 <ip4_output_if_src+0x154>)
 800f8ec:	881b      	ldrh	r3, [r3, #0]
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7f6 fc48 	bl	8006184 <lwip_htons>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f8fc:	4b25      	ldr	r3, [pc, #148]	@ (800f994 <ip4_output_if_src+0x154>)
 800f8fe:	881b      	ldrh	r3, [r3, #0]
 800f900:	3301      	adds	r3, #1
 800f902:	b29a      	uxth	r2, r3
 800f904:	4b23      	ldr	r3, [pc, #140]	@ (800f994 <ip4_output_if_src+0x154>)
 800f906:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d104      	bne.n	800f918 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f90e:	4b22      	ldr	r3, [pc, #136]	@ (800f998 <ip4_output_if_src+0x158>)
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	60da      	str	r2, [r3, #12]
 800f916:	e003      	b.n	800f920 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	2200      	movs	r2, #0
 800f924:	729a      	strb	r2, [r3, #10]
 800f926:	2200      	movs	r2, #0
 800f928:	72da      	strb	r2, [r3, #11]
 800f92a:	e00f      	b.n	800f94c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	895b      	ldrh	r3, [r3, #10]
 800f930:	2b13      	cmp	r3, #19
 800f932:	d802      	bhi.n	800f93a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f934:	f06f 0301 	mvn.w	r3, #1
 800f938:	e020      	b.n	800f97c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	691b      	ldr	r3, [r3, #16]
 800f944:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f946:	f107 0314 	add.w	r3, r7, #20
 800f94a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f94e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00c      	beq.n	800f96e <ip4_output_if_src+0x12e>
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	891a      	ldrh	r2, [r3, #8]
 800f958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f95a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d906      	bls.n	800f96e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f960:	687a      	ldr	r2, [r7, #4]
 800f962:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f000 fd53 	bl	8010410 <ip4_frag>
 800f96a:	4603      	mov	r3, r0
 800f96c:	e006      	b.n	800f97c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f970:	695b      	ldr	r3, [r3, #20]
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	68f9      	ldr	r1, [r7, #12]
 800f976:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f978:	4798      	blx	r3
 800f97a:	4603      	mov	r3, r0
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3720      	adds	r7, #32
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}
 800f984:	08015a98 	.word	0x08015a98
 800f988:	08015acc 	.word	0x08015acc
 800f98c:	08015ad8 	.word	0x08015ad8
 800f990:	08015b00 	.word	0x08015b00
 800f994:	200085c2 	.word	0x200085c2
 800f998:	08016034 	.word	0x08016034

0800f99c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b085      	sub	sp, #20
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9b0:	d002      	beq.n	800f9b8 <ip4_addr_isbroadcast_u32+0x1c>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d101      	bne.n	800f9bc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e02a      	b.n	800fa12 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f9c2:	f003 0302 	and.w	r3, r3, #2
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d101      	bne.n	800f9ce <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	e021      	b.n	800fa12 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	3304      	adds	r3, #4
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d101      	bne.n	800f9de <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	e019      	b.n	800fa12 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	3304      	adds	r3, #4
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	405a      	eors	r2, r3
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	3308      	adds	r3, #8
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4013      	ands	r3, r2
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d10d      	bne.n	800fa10 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	3308      	adds	r3, #8
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	43da      	mvns	r2, r3
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	3308      	adds	r3, #8
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d101      	bne.n	800fa10 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e000      	b.n	800fa12 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fa10:	2300      	movs	r3, #0
  }
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3714      	adds	r7, #20
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr
	...

0800fa20 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fa26:	2300      	movs	r3, #0
 800fa28:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fa2a:	4b12      	ldr	r3, [pc, #72]	@ (800fa74 <ip_reass_tmr+0x54>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fa30:	e018      	b.n	800fa64 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	7fdb      	ldrb	r3, [r3, #31]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00b      	beq.n	800fa52 <ip_reass_tmr+0x32>
      r->timer--;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	7fdb      	ldrb	r3, [r3, #31]
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	b2da      	uxtb	r2, r3
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	60fb      	str	r3, [r7, #12]
 800fa50:	e008      	b.n	800fa64 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fa5c:	68b9      	ldr	r1, [r7, #8]
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 f80a 	bl	800fa78 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d1e3      	bne.n	800fa32 <ip_reass_tmr+0x12>
    }
  }
}
 800fa6a:	bf00      	nop
 800fa6c:	bf00      	nop
 800fa6e:	3710      	adds	r7, #16
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	200085c4 	.word	0x200085c4

0800fa78 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b088      	sub	sp, #32
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fa82:	2300      	movs	r3, #0
 800fa84:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d105      	bne.n	800fa9a <ip_reass_free_complete_datagram+0x22>
 800fa8e:	4b45      	ldr	r3, [pc, #276]	@ (800fba4 <ip_reass_free_complete_datagram+0x12c>)
 800fa90:	22ab      	movs	r2, #171	@ 0xab
 800fa92:	4945      	ldr	r1, [pc, #276]	@ (800fba8 <ip_reass_free_complete_datagram+0x130>)
 800fa94:	4845      	ldr	r0, [pc, #276]	@ (800fbac <ip_reass_free_complete_datagram+0x134>)
 800fa96:	f002 fb6f 	bl	8012178 <iprintf>
  if (prev != NULL) {
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00a      	beq.n	800fab6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d005      	beq.n	800fab6 <ip_reass_free_complete_datagram+0x3e>
 800faaa:	4b3e      	ldr	r3, [pc, #248]	@ (800fba4 <ip_reass_free_complete_datagram+0x12c>)
 800faac:	22ad      	movs	r2, #173	@ 0xad
 800faae:	4940      	ldr	r1, [pc, #256]	@ (800fbb0 <ip_reass_free_complete_datagram+0x138>)
 800fab0:	483e      	ldr	r0, [pc, #248]	@ (800fbac <ip_reass_free_complete_datagram+0x134>)
 800fab2:	f002 fb61 	bl	8012178 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	685b      	ldr	r3, [r3, #4]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	889b      	ldrh	r3, [r3, #4]
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d12a      	bne.n	800fb1e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fad6:	69bb      	ldr	r3, [r7, #24]
 800fad8:	6858      	ldr	r0, [r3, #4]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	3308      	adds	r3, #8
 800fade:	2214      	movs	r2, #20
 800fae0:	4619      	mov	r1, r3
 800fae2:	f002 fca0 	bl	8012426 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fae6:	2101      	movs	r1, #1
 800fae8:	69b8      	ldr	r0, [r7, #24]
 800faea:	f7ff fc47 	bl	800f37c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800faee:	69b8      	ldr	r0, [r7, #24]
 800faf0:	f7f7 ff2e 	bl	8007950 <pbuf_clen>
 800faf4:	4603      	mov	r3, r0
 800faf6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800faf8:	8bfa      	ldrh	r2, [r7, #30]
 800fafa:	8a7b      	ldrh	r3, [r7, #18]
 800fafc:	4413      	add	r3, r2
 800fafe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb02:	db05      	blt.n	800fb10 <ip_reass_free_complete_datagram+0x98>
 800fb04:	4b27      	ldr	r3, [pc, #156]	@ (800fba4 <ip_reass_free_complete_datagram+0x12c>)
 800fb06:	22bc      	movs	r2, #188	@ 0xbc
 800fb08:	492a      	ldr	r1, [pc, #168]	@ (800fbb4 <ip_reass_free_complete_datagram+0x13c>)
 800fb0a:	4828      	ldr	r0, [pc, #160]	@ (800fbac <ip_reass_free_complete_datagram+0x134>)
 800fb0c:	f002 fb34 	bl	8012178 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fb10:	8bfa      	ldrh	r2, [r7, #30]
 800fb12:	8a7b      	ldrh	r3, [r7, #18]
 800fb14:	4413      	add	r3, r2
 800fb16:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fb18:	69b8      	ldr	r0, [r7, #24]
 800fb1a:	f7f7 fe91 	bl	8007840 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fb24:	e01f      	b.n	800fb66 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fb2c:	69bb      	ldr	r3, [r7, #24]
 800fb2e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800fb36:	68f8      	ldr	r0, [r7, #12]
 800fb38:	f7f7 ff0a 	bl	8007950 <pbuf_clen>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fb40:	8bfa      	ldrh	r2, [r7, #30]
 800fb42:	8a7b      	ldrh	r3, [r7, #18]
 800fb44:	4413      	add	r3, r2
 800fb46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb4a:	db05      	blt.n	800fb58 <ip_reass_free_complete_datagram+0xe0>
 800fb4c:	4b15      	ldr	r3, [pc, #84]	@ (800fba4 <ip_reass_free_complete_datagram+0x12c>)
 800fb4e:	22cc      	movs	r2, #204	@ 0xcc
 800fb50:	4918      	ldr	r1, [pc, #96]	@ (800fbb4 <ip_reass_free_complete_datagram+0x13c>)
 800fb52:	4816      	ldr	r0, [pc, #88]	@ (800fbac <ip_reass_free_complete_datagram+0x134>)
 800fb54:	f002 fb10 	bl	8012178 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fb58:	8bfa      	ldrh	r2, [r7, #30]
 800fb5a:	8a7b      	ldrh	r3, [r7, #18]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f7f7 fe6d 	bl	8007840 <pbuf_free>
  while (p != NULL) {
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1dc      	bne.n	800fb26 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800fb6c:	6839      	ldr	r1, [r7, #0]
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 f8c2 	bl	800fcf8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800fb74:	4b10      	ldr	r3, [pc, #64]	@ (800fbb8 <ip_reass_free_complete_datagram+0x140>)
 800fb76:	881b      	ldrh	r3, [r3, #0]
 800fb78:	8bfa      	ldrh	r2, [r7, #30]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d905      	bls.n	800fb8a <ip_reass_free_complete_datagram+0x112>
 800fb7e:	4b09      	ldr	r3, [pc, #36]	@ (800fba4 <ip_reass_free_complete_datagram+0x12c>)
 800fb80:	22d2      	movs	r2, #210	@ 0xd2
 800fb82:	490e      	ldr	r1, [pc, #56]	@ (800fbbc <ip_reass_free_complete_datagram+0x144>)
 800fb84:	4809      	ldr	r0, [pc, #36]	@ (800fbac <ip_reass_free_complete_datagram+0x134>)
 800fb86:	f002 faf7 	bl	8012178 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fb8a:	4b0b      	ldr	r3, [pc, #44]	@ (800fbb8 <ip_reass_free_complete_datagram+0x140>)
 800fb8c:	881a      	ldrh	r2, [r3, #0]
 800fb8e:	8bfb      	ldrh	r3, [r7, #30]
 800fb90:	1ad3      	subs	r3, r2, r3
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	4b08      	ldr	r3, [pc, #32]	@ (800fbb8 <ip_reass_free_complete_datagram+0x140>)
 800fb96:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800fb98:	8bfb      	ldrh	r3, [r7, #30]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3720      	adds	r7, #32
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	08015b30 	.word	0x08015b30
 800fba8:	08015b6c 	.word	0x08015b6c
 800fbac:	08015b78 	.word	0x08015b78
 800fbb0:	08015ba0 	.word	0x08015ba0
 800fbb4:	08015bb4 	.word	0x08015bb4
 800fbb8:	200085c8 	.word	0x200085c8
 800fbbc:	08015bd4 	.word	0x08015bd4

0800fbc0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b08a      	sub	sp, #40	@ 0x28
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800fbde:	4b28      	ldr	r3, [pc, #160]	@ (800fc80 <ip_reass_remove_oldest_datagram+0xc0>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800fbe4:	e030      	b.n	800fc48 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe8:	695a      	ldr	r2, [r3, #20]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d10c      	bne.n	800fc0c <ip_reass_remove_oldest_datagram+0x4c>
 800fbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf4:	699a      	ldr	r2, [r3, #24]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	691b      	ldr	r3, [r3, #16]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d106      	bne.n	800fc0c <ip_reass_remove_oldest_datagram+0x4c>
 800fbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc00:	899a      	ldrh	r2, [r3, #12]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	889b      	ldrh	r3, [r3, #4]
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d014      	beq.n	800fc36 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800fc12:	6a3b      	ldr	r3, [r7, #32]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d104      	bne.n	800fc22 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800fc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc1a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	61bb      	str	r3, [r7, #24]
 800fc20:	e009      	b.n	800fc36 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800fc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc24:	7fda      	ldrb	r2, [r3, #31]
 800fc26:	6a3b      	ldr	r3, [r7, #32]
 800fc28:	7fdb      	ldrb	r3, [r3, #31]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d803      	bhi.n	800fc36 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800fc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc30:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800fc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d001      	beq.n	800fc42 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800fc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc40:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800fc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800fc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d1cb      	bne.n	800fbe6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d008      	beq.n	800fc66 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fc54:	69b9      	ldr	r1, [r7, #24]
 800fc56:	6a38      	ldr	r0, [r7, #32]
 800fc58:	f7ff ff0e 	bl	800fa78 <ip_reass_free_complete_datagram>
 800fc5c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800fc5e:	697a      	ldr	r2, [r7, #20]
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	4413      	add	r3, r2
 800fc64:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fc66:	697a      	ldr	r2, [r7, #20]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	da02      	bge.n	800fc74 <ip_reass_remove_oldest_datagram+0xb4>
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	dcac      	bgt.n	800fbce <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800fc74:	697b      	ldr	r3, [r7, #20]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3728      	adds	r7, #40	@ 0x28
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	200085c4 	.word	0x200085c4

0800fc84 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b084      	sub	sp, #16
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fc8e:	2004      	movs	r0, #4
 800fc90:	f7f6 fef0 	bl	8006a74 <memp_malloc>
 800fc94:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d110      	bne.n	800fcbe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fc9c:	6839      	ldr	r1, [r7, #0]
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f7ff ff8e 	bl	800fbc0 <ip_reass_remove_oldest_datagram>
 800fca4:	4602      	mov	r2, r0
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	dc03      	bgt.n	800fcb4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fcac:	2004      	movs	r0, #4
 800fcae:	f7f6 fee1 	bl	8006a74 <memp_malloc>
 800fcb2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d101      	bne.n	800fcbe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	e016      	b.n	800fcec <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fcbe:	2220      	movs	r2, #32
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	68f8      	ldr	r0, [r7, #12]
 800fcc4:	f002 fb0d 	bl	80122e2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	220f      	movs	r2, #15
 800fccc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fcce:	4b09      	ldr	r3, [pc, #36]	@ (800fcf4 <ip_reass_enqueue_new_datagram+0x70>)
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800fcd6:	4a07      	ldr	r2, [pc, #28]	@ (800fcf4 <ip_reass_enqueue_new_datagram+0x70>)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	3308      	adds	r3, #8
 800fce0:	2214      	movs	r2, #20
 800fce2:	6879      	ldr	r1, [r7, #4]
 800fce4:	4618      	mov	r0, r3
 800fce6:	f002 fb9e 	bl	8012426 <memcpy>
  return ipr;
 800fcea:	68fb      	ldr	r3, [r7, #12]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	200085c4 	.word	0x200085c4

0800fcf8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fd02:	4b10      	ldr	r3, [pc, #64]	@ (800fd44 <ip_reass_dequeue_datagram+0x4c>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d104      	bne.n	800fd16 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a0c      	ldr	r2, [pc, #48]	@ (800fd44 <ip_reass_dequeue_datagram+0x4c>)
 800fd12:	6013      	str	r3, [r2, #0]
 800fd14:	e00d      	b.n	800fd32 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d106      	bne.n	800fd2a <ip_reass_dequeue_datagram+0x32>
 800fd1c:	4b0a      	ldr	r3, [pc, #40]	@ (800fd48 <ip_reass_dequeue_datagram+0x50>)
 800fd1e:	f240 1245 	movw	r2, #325	@ 0x145
 800fd22:	490a      	ldr	r1, [pc, #40]	@ (800fd4c <ip_reass_dequeue_datagram+0x54>)
 800fd24:	480a      	ldr	r0, [pc, #40]	@ (800fd50 <ip_reass_dequeue_datagram+0x58>)
 800fd26:	f002 fa27 	bl	8012178 <iprintf>
    prev->next = ipr->next;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800fd32:	6879      	ldr	r1, [r7, #4]
 800fd34:	2004      	movs	r0, #4
 800fd36:	f7f6 ff0d 	bl	8006b54 <memp_free>
}
 800fd3a:	bf00      	nop
 800fd3c:	3708      	adds	r7, #8
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	bf00      	nop
 800fd44:	200085c4 	.word	0x200085c4
 800fd48:	08015b30 	.word	0x08015b30
 800fd4c:	08015bf8 	.word	0x08015bf8
 800fd50:	08015b78 	.word	0x08015b78

0800fd54 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b08c      	sub	sp, #48	@ 0x30
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fd60:	2300      	movs	r3, #0
 800fd62:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fd64:	2301      	movs	r3, #1
 800fd66:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	885b      	ldrh	r3, [r3, #2]
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7f6 fa05 	bl	8006184 <lwip_htons>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	f003 030f 	and.w	r3, r3, #15
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fd8c:	7e7b      	ldrb	r3, [r7, #25]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	8b7a      	ldrh	r2, [r7, #26]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d202      	bcs.n	800fd9c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fd96:	f04f 33ff 	mov.w	r3, #4294967295
 800fd9a:	e135      	b.n	8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fd9c:	7e7b      	ldrb	r3, [r7, #25]
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	8b7a      	ldrh	r2, [r7, #26]
 800fda2:	1ad3      	subs	r3, r2, r3
 800fda4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	88db      	ldrh	r3, [r3, #6]
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7f6 f9e9 	bl	8006184 <lwip_htons>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	00db      	lsls	r3, r3, #3
 800fdbc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800fdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	701a      	strb	r2, [r3, #0]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	705a      	strb	r2, [r3, #1]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	709a      	strb	r2, [r3, #2]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fdd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdd8:	8afa      	ldrh	r2, [r7, #22]
 800fdda:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fddc:	8afa      	ldrh	r2, [r7, #22]
 800fdde:	8b7b      	ldrh	r3, [r7, #26]
 800fde0:	4413      	add	r3, r2
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fde6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdea:	88db      	ldrh	r3, [r3, #6]
 800fdec:	b29b      	uxth	r3, r3
 800fdee:	8afa      	ldrh	r2, [r7, #22]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d902      	bls.n	800fdfa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fdf4:	f04f 33ff 	mov.w	r3, #4294967295
 800fdf8:	e106      	b.n	8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe00:	e068      	b.n	800fed4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fe02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fe08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe0a:	889b      	ldrh	r3, [r3, #4]
 800fe0c:	b29a      	uxth	r2, r3
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	889b      	ldrh	r3, [r3, #4]
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d235      	bcs.n	800fe84 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800fe18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe1c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fe1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d020      	beq.n	800fe66 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fe24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe26:	889b      	ldrh	r3, [r3, #4]
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe2c:	88db      	ldrh	r3, [r3, #6]
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d307      	bcc.n	800fe44 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fe34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe36:	88db      	ldrh	r3, [r3, #6]
 800fe38:	b29a      	uxth	r2, r3
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	889b      	ldrh	r3, [r3, #4]
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d902      	bls.n	800fe4a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fe44:	f04f 33ff 	mov.w	r3, #4294967295
 800fe48:	e0de      	b.n	8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fe4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe4c:	68ba      	ldr	r2, [r7, #8]
 800fe4e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fe50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe52:	88db      	ldrh	r3, [r3, #6]
 800fe54:	b29a      	uxth	r2, r3
 800fe56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe58:	889b      	ldrh	r3, [r3, #4]
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d03d      	beq.n	800fedc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fe64:	e03a      	b.n	800fedc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fe66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe68:	88db      	ldrh	r3, [r3, #6]
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	889b      	ldrh	r3, [r3, #4]
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d902      	bls.n	800fe7c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fe76:	f04f 33ff 	mov.w	r3, #4294967295
 800fe7a:	e0c5      	b.n	8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	605a      	str	r2, [r3, #4]
      break;
 800fe82:	e02b      	b.n	800fedc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fe84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe86:	889b      	ldrh	r3, [r3, #4]
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	889b      	ldrh	r3, [r3, #4]
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d102      	bne.n	800fe9a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fe94:	f04f 33ff 	mov.w	r3, #4294967295
 800fe98:	e0b6      	b.n	8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fe9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe9c:	889b      	ldrh	r3, [r3, #4]
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	88db      	ldrh	r3, [r3, #6]
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d202      	bcs.n	800feb0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800feaa:	f04f 33ff 	mov.w	r3, #4294967295
 800feae:	e0ab      	b.n	8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800feb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d009      	beq.n	800feca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800feb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb8:	88db      	ldrh	r3, [r3, #6]
 800feba:	b29a      	uxth	r2, r3
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	889b      	ldrh	r3, [r3, #4]
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d001      	beq.n	800feca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fec6:	2300      	movs	r3, #0
 800fec8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800fed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d193      	bne.n	800fe02 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800feda:	e000      	b.n	800fede <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fedc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d12d      	bne.n	800ff40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d01c      	beq.n	800ff24 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800feea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feec:	88db      	ldrh	r3, [r3, #6]
 800feee:	b29a      	uxth	r2, r3
 800fef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef2:	889b      	ldrh	r3, [r3, #4]
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d906      	bls.n	800ff08 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fefa:	4b45      	ldr	r3, [pc, #276]	@ (8010010 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fefc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800ff00:	4944      	ldr	r1, [pc, #272]	@ (8010014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ff02:	4845      	ldr	r0, [pc, #276]	@ (8010018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ff04:	f002 f938 	bl	8012178 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ff08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff0a:	68ba      	ldr	r2, [r7, #8]
 800ff0c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ff0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff10:	88db      	ldrh	r3, [r3, #6]
 800ff12:	b29a      	uxth	r2, r3
 800ff14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff16:	889b      	ldrh	r3, [r3, #4]
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d010      	beq.n	800ff40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	623b      	str	r3, [r7, #32]
 800ff22:	e00d      	b.n	800ff40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d006      	beq.n	800ff3a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ff2c:	4b38      	ldr	r3, [pc, #224]	@ (8010010 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ff2e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800ff32:	493a      	ldr	r1, [pc, #232]	@ (801001c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ff34:	4838      	ldr	r0, [pc, #224]	@ (8010018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ff36:	f002 f91f 	bl	8012178 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	68ba      	ldr	r2, [r7, #8]
 800ff3e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d105      	bne.n	800ff52 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	7f9b      	ldrb	r3, [r3, #30]
 800ff4a:	f003 0301 	and.w	r3, r3, #1
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d059      	beq.n	8010006 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ff52:	6a3b      	ldr	r3, [r7, #32]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d04f      	beq.n	800fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d006      	beq.n	800ff6e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	889b      	ldrh	r3, [r3, #4]
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d002      	beq.n	800ff74 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	623b      	str	r3, [r7, #32]
 800ff72:	e041      	b.n	800fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ff74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff76:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800ff78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ff7e:	e012      	b.n	800ffa6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ff80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800ff86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff88:	88db      	ldrh	r3, [r3, #6]
 800ff8a:	b29a      	uxth	r2, r3
 800ff8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff8e:	889b      	ldrh	r3, [r3, #4]
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d002      	beq.n	800ff9c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ff96:	2300      	movs	r3, #0
 800ff98:	623b      	str	r3, [r7, #32]
            break;
 800ff9a:	e007      	b.n	800ffac <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ff9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff9e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800ffa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d1e9      	bne.n	800ff80 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ffac:	6a3b      	ldr	r3, [r7, #32]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d022      	beq.n	800fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d106      	bne.n	800ffc8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ffba:	4b15      	ldr	r3, [pc, #84]	@ (8010010 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ffbc:	f240 12df 	movw	r2, #479	@ 0x1df
 800ffc0:	4917      	ldr	r1, [pc, #92]	@ (8010020 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ffc2:	4815      	ldr	r0, [pc, #84]	@ (8010018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ffc4:	f002 f8d8 	bl	8012178 <iprintf>
          LWIP_ASSERT("sanity check",
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d106      	bne.n	800ffe2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ffd4:	4b0e      	ldr	r3, [pc, #56]	@ (8010010 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ffd6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ffda:	4911      	ldr	r1, [pc, #68]	@ (8010020 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ffdc:	480e      	ldr	r0, [pc, #56]	@ (8010018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ffde:	f002 f8cb 	bl	8012178 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ffe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d006      	beq.n	800fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ffea:	4b09      	ldr	r3, [pc, #36]	@ (8010010 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ffec:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800fff0:	490c      	ldr	r1, [pc, #48]	@ (8010024 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fff2:	4809      	ldr	r0, [pc, #36]	@ (8010018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fff4:	f002 f8c0 	bl	8012178 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fff8:	6a3b      	ldr	r3, [r7, #32]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	bf14      	ite	ne
 800fffe:	2301      	movne	r3, #1
 8010000:	2300      	moveq	r3, #0
 8010002:	b2db      	uxtb	r3, r3
 8010004:	e000      	b.n	8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010006:	2300      	movs	r3, #0
}
 8010008:	4618      	mov	r0, r3
 801000a:	3730      	adds	r7, #48	@ 0x30
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	08015b30 	.word	0x08015b30
 8010014:	08015c14 	.word	0x08015c14
 8010018:	08015b78 	.word	0x08015b78
 801001c:	08015c34 	.word	0x08015c34
 8010020:	08015c6c 	.word	0x08015c6c
 8010024:	08015c7c 	.word	0x08015c7c

08010028 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b08e      	sub	sp, #56	@ 0x38
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	f003 030f 	and.w	r3, r3, #15
 801003e:	b2db      	uxtb	r3, r3
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	b2db      	uxtb	r3, r3
 8010044:	2b14      	cmp	r3, #20
 8010046:	f040 8171 	bne.w	801032c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801004a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801004c:	88db      	ldrh	r3, [r3, #6]
 801004e:	b29b      	uxth	r3, r3
 8010050:	4618      	mov	r0, r3
 8010052:	f7f6 f897 	bl	8006184 <lwip_htons>
 8010056:	4603      	mov	r3, r0
 8010058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801005c:	b29b      	uxth	r3, r3
 801005e:	00db      	lsls	r3, r3, #3
 8010060:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010064:	885b      	ldrh	r3, [r3, #2]
 8010066:	b29b      	uxth	r3, r3
 8010068:	4618      	mov	r0, r3
 801006a:	f7f6 f88b 	bl	8006184 <lwip_htons>
 801006e:	4603      	mov	r3, r0
 8010070:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	f003 030f 	and.w	r3, r3, #15
 801007a:	b2db      	uxtb	r3, r3
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8010082:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010086:	b29b      	uxth	r3, r3
 8010088:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801008a:	429a      	cmp	r2, r3
 801008c:	f0c0 8150 	bcc.w	8010330 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010090:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010094:	b29b      	uxth	r3, r3
 8010096:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010098:	1ad3      	subs	r3, r2, r3
 801009a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f7f7 fc57 	bl	8007950 <pbuf_clen>
 80100a2:	4603      	mov	r3, r0
 80100a4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80100a6:	4b8c      	ldr	r3, [pc, #560]	@ (80102d8 <ip4_reass+0x2b0>)
 80100a8:	881b      	ldrh	r3, [r3, #0]
 80100aa:	461a      	mov	r2, r3
 80100ac:	8c3b      	ldrh	r3, [r7, #32]
 80100ae:	4413      	add	r3, r2
 80100b0:	2b0a      	cmp	r3, #10
 80100b2:	dd10      	ble.n	80100d6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80100b4:	8c3b      	ldrh	r3, [r7, #32]
 80100b6:	4619      	mov	r1, r3
 80100b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100ba:	f7ff fd81 	bl	800fbc0 <ip_reass_remove_oldest_datagram>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	f000 8137 	beq.w	8010334 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80100c6:	4b84      	ldr	r3, [pc, #528]	@ (80102d8 <ip4_reass+0x2b0>)
 80100c8:	881b      	ldrh	r3, [r3, #0]
 80100ca:	461a      	mov	r2, r3
 80100cc:	8c3b      	ldrh	r3, [r7, #32]
 80100ce:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80100d0:	2b0a      	cmp	r3, #10
 80100d2:	f300 812f 	bgt.w	8010334 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80100d6:	4b81      	ldr	r3, [pc, #516]	@ (80102dc <ip4_reass+0x2b4>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	633b      	str	r3, [r7, #48]	@ 0x30
 80100dc:	e015      	b.n	801010a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80100de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e0:	695a      	ldr	r2, [r3, #20]
 80100e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d10c      	bne.n	8010104 <ip4_reass+0xdc>
 80100ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ec:	699a      	ldr	r2, [r3, #24]
 80100ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100f0:	691b      	ldr	r3, [r3, #16]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d106      	bne.n	8010104 <ip4_reass+0xdc>
 80100f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100f8:	899a      	ldrh	r2, [r3, #12]
 80100fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100fc:	889b      	ldrh	r3, [r3, #4]
 80100fe:	b29b      	uxth	r3, r3
 8010100:	429a      	cmp	r2, r3
 8010102:	d006      	beq.n	8010112 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	633b      	str	r3, [r7, #48]	@ 0x30
 801010a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801010c:	2b00      	cmp	r3, #0
 801010e:	d1e6      	bne.n	80100de <ip4_reass+0xb6>
 8010110:	e000      	b.n	8010114 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010112:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010116:	2b00      	cmp	r3, #0
 8010118:	d109      	bne.n	801012e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801011a:	8c3b      	ldrh	r3, [r7, #32]
 801011c:	4619      	mov	r1, r3
 801011e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010120:	f7ff fdb0 	bl	800fc84 <ip_reass_enqueue_new_datagram>
 8010124:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010128:	2b00      	cmp	r3, #0
 801012a:	d11c      	bne.n	8010166 <ip4_reass+0x13e>
      goto nullreturn;
 801012c:	e105      	b.n	801033a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801012e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010130:	88db      	ldrh	r3, [r3, #6]
 8010132:	b29b      	uxth	r3, r3
 8010134:	4618      	mov	r0, r3
 8010136:	f7f6 f825 	bl	8006184 <lwip_htons>
 801013a:	4603      	mov	r3, r0
 801013c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010140:	2b00      	cmp	r3, #0
 8010142:	d110      	bne.n	8010166 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010146:	89db      	ldrh	r3, [r3, #14]
 8010148:	4618      	mov	r0, r3
 801014a:	f7f6 f81b 	bl	8006184 <lwip_htons>
 801014e:	4603      	mov	r3, r0
 8010150:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010154:	2b00      	cmp	r3, #0
 8010156:	d006      	beq.n	8010166 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801015a:	3308      	adds	r3, #8
 801015c:	2214      	movs	r2, #20
 801015e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010160:	4618      	mov	r0, r3
 8010162:	f002 f960 	bl	8012426 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010168:	88db      	ldrh	r3, [r3, #6]
 801016a:	b29b      	uxth	r3, r3
 801016c:	f003 0320 	and.w	r3, r3, #32
 8010170:	2b00      	cmp	r3, #0
 8010172:	bf0c      	ite	eq
 8010174:	2301      	moveq	r3, #1
 8010176:	2300      	movne	r3, #0
 8010178:	b2db      	uxtb	r3, r3
 801017a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00e      	beq.n	80101a0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010182:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010184:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010186:	4413      	add	r3, r2
 8010188:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801018a:	8b7a      	ldrh	r2, [r7, #26]
 801018c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801018e:	429a      	cmp	r2, r3
 8010190:	f0c0 80a0 	bcc.w	80102d4 <ip4_reass+0x2ac>
 8010194:	8b7b      	ldrh	r3, [r7, #26]
 8010196:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801019a:	4293      	cmp	r3, r2
 801019c:	f200 809a 	bhi.w	80102d4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80101a0:	69fa      	ldr	r2, [r7, #28]
 80101a2:	6879      	ldr	r1, [r7, #4]
 80101a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80101a6:	f7ff fdd5 	bl	800fd54 <ip_reass_chain_frag_into_datagram_and_validate>
 80101aa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b2:	f000 809b 	beq.w	80102ec <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80101b6:	4b48      	ldr	r3, [pc, #288]	@ (80102d8 <ip4_reass+0x2b0>)
 80101b8:	881a      	ldrh	r2, [r3, #0]
 80101ba:	8c3b      	ldrh	r3, [r7, #32]
 80101bc:	4413      	add	r3, r2
 80101be:	b29a      	uxth	r2, r3
 80101c0:	4b45      	ldr	r3, [pc, #276]	@ (80102d8 <ip4_reass+0x2b0>)
 80101c2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d00d      	beq.n	80101e6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80101ca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80101cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80101ce:	4413      	add	r3, r2
 80101d0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80101d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d4:	8a7a      	ldrh	r2, [r7, #18]
 80101d6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80101d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101da:	7f9b      	ldrb	r3, [r3, #30]
 80101dc:	f043 0301 	orr.w	r3, r3, #1
 80101e0:	b2da      	uxtb	r2, r3
 80101e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	2b01      	cmp	r3, #1
 80101ea:	d171      	bne.n	80102d0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80101ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ee:	8b9b      	ldrh	r3, [r3, #28]
 80101f0:	3314      	adds	r3, #20
 80101f2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80101f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80101fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010208:	3308      	adds	r3, #8
 801020a:	2214      	movs	r2, #20
 801020c:	4619      	mov	r1, r3
 801020e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010210:	f002 f909 	bl	8012426 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010214:	8a3b      	ldrh	r3, [r7, #16]
 8010216:	4618      	mov	r0, r3
 8010218:	f7f5 ffb4 	bl	8006184 <lwip_htons>
 801021c:	4603      	mov	r3, r0
 801021e:	461a      	mov	r2, r3
 8010220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010222:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010226:	2200      	movs	r2, #0
 8010228:	719a      	strb	r2, [r3, #6]
 801022a:	2200      	movs	r2, #0
 801022c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801022e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010230:	2200      	movs	r2, #0
 8010232:	729a      	strb	r2, [r3, #10]
 8010234:	2200      	movs	r2, #0
 8010236:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801023e:	e00d      	b.n	801025c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010246:	2114      	movs	r1, #20
 8010248:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801024a:	f7f7 fa73 	bl	8007734 <pbuf_remove_header>
      pbuf_cat(p, r);
 801024e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7f7 fbb7 	bl	80079c4 <pbuf_cat>
      r = iprh->next_pbuf;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801025c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801025e:	2b00      	cmp	r3, #0
 8010260:	d1ee      	bne.n	8010240 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010262:	4b1e      	ldr	r3, [pc, #120]	@ (80102dc <ip4_reass+0x2b4>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010268:	429a      	cmp	r2, r3
 801026a:	d102      	bne.n	8010272 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801026c:	2300      	movs	r3, #0
 801026e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010270:	e010      	b.n	8010294 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010272:	4b1a      	ldr	r3, [pc, #104]	@ (80102dc <ip4_reass+0x2b4>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010278:	e007      	b.n	801028a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801027a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010280:	429a      	cmp	r2, r3
 8010282:	d006      	beq.n	8010292 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801028a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801028c:	2b00      	cmp	r3, #0
 801028e:	d1f4      	bne.n	801027a <ip4_reass+0x252>
 8010290:	e000      	b.n	8010294 <ip4_reass+0x26c>
          break;
 8010292:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010294:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010296:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010298:	f7ff fd2e 	bl	800fcf8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f7f7 fb57 	bl	8007950 <pbuf_clen>
 80102a2:	4603      	mov	r3, r0
 80102a4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80102a6:	4b0c      	ldr	r3, [pc, #48]	@ (80102d8 <ip4_reass+0x2b0>)
 80102a8:	881b      	ldrh	r3, [r3, #0]
 80102aa:	8c3a      	ldrh	r2, [r7, #32]
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d906      	bls.n	80102be <ip4_reass+0x296>
 80102b0:	4b0b      	ldr	r3, [pc, #44]	@ (80102e0 <ip4_reass+0x2b8>)
 80102b2:	f240 229b 	movw	r2, #667	@ 0x29b
 80102b6:	490b      	ldr	r1, [pc, #44]	@ (80102e4 <ip4_reass+0x2bc>)
 80102b8:	480b      	ldr	r0, [pc, #44]	@ (80102e8 <ip4_reass+0x2c0>)
 80102ba:	f001 ff5d 	bl	8012178 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80102be:	4b06      	ldr	r3, [pc, #24]	@ (80102d8 <ip4_reass+0x2b0>)
 80102c0:	881a      	ldrh	r2, [r3, #0]
 80102c2:	8c3b      	ldrh	r3, [r7, #32]
 80102c4:	1ad3      	subs	r3, r2, r3
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	4b03      	ldr	r3, [pc, #12]	@ (80102d8 <ip4_reass+0x2b0>)
 80102ca:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	e038      	b.n	8010342 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80102d0:	2300      	movs	r3, #0
 80102d2:	e036      	b.n	8010342 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80102d4:	bf00      	nop
 80102d6:	e00a      	b.n	80102ee <ip4_reass+0x2c6>
 80102d8:	200085c8 	.word	0x200085c8
 80102dc:	200085c4 	.word	0x200085c4
 80102e0:	08015b30 	.word	0x08015b30
 80102e4:	08015ca0 	.word	0x08015ca0
 80102e8:	08015b78 	.word	0x08015b78
    goto nullreturn_ipr;
 80102ec:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80102ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d106      	bne.n	8010302 <ip4_reass+0x2da>
 80102f4:	4b15      	ldr	r3, [pc, #84]	@ (801034c <ip4_reass+0x324>)
 80102f6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80102fa:	4915      	ldr	r1, [pc, #84]	@ (8010350 <ip4_reass+0x328>)
 80102fc:	4815      	ldr	r0, [pc, #84]	@ (8010354 <ip4_reass+0x32c>)
 80102fe:	f001 ff3b 	bl	8012178 <iprintf>
  if (ipr->p == NULL) {
 8010302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d116      	bne.n	8010338 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801030a:	4b13      	ldr	r3, [pc, #76]	@ (8010358 <ip4_reass+0x330>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010310:	429a      	cmp	r2, r3
 8010312:	d006      	beq.n	8010322 <ip4_reass+0x2fa>
 8010314:	4b0d      	ldr	r3, [pc, #52]	@ (801034c <ip4_reass+0x324>)
 8010316:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801031a:	4910      	ldr	r1, [pc, #64]	@ (801035c <ip4_reass+0x334>)
 801031c:	480d      	ldr	r0, [pc, #52]	@ (8010354 <ip4_reass+0x32c>)
 801031e:	f001 ff2b 	bl	8012178 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010322:	2100      	movs	r1, #0
 8010324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010326:	f7ff fce7 	bl	800fcf8 <ip_reass_dequeue_datagram>
 801032a:	e006      	b.n	801033a <ip4_reass+0x312>
    goto nullreturn;
 801032c:	bf00      	nop
 801032e:	e004      	b.n	801033a <ip4_reass+0x312>
    goto nullreturn;
 8010330:	bf00      	nop
 8010332:	e002      	b.n	801033a <ip4_reass+0x312>
      goto nullreturn;
 8010334:	bf00      	nop
 8010336:	e000      	b.n	801033a <ip4_reass+0x312>
  }

nullreturn:
 8010338:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7f7 fa80 	bl	8007840 <pbuf_free>
  return NULL;
 8010340:	2300      	movs	r3, #0
}
 8010342:	4618      	mov	r0, r3
 8010344:	3738      	adds	r7, #56	@ 0x38
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	08015b30 	.word	0x08015b30
 8010350:	08015cbc 	.word	0x08015cbc
 8010354:	08015b78 	.word	0x08015b78
 8010358:	200085c4 	.word	0x200085c4
 801035c:	08015cc8 	.word	0x08015cc8

08010360 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010364:	2005      	movs	r0, #5
 8010366:	f7f6 fb85 	bl	8006a74 <memp_malloc>
 801036a:	4603      	mov	r3, r0
}
 801036c:	4618      	mov	r0, r3
 801036e:	bd80      	pop	{r7, pc}

08010370 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d106      	bne.n	801038c <ip_frag_free_pbuf_custom_ref+0x1c>
 801037e:	4b07      	ldr	r3, [pc, #28]	@ (801039c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010380:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8010384:	4906      	ldr	r1, [pc, #24]	@ (80103a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010386:	4807      	ldr	r0, [pc, #28]	@ (80103a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010388:	f001 fef6 	bl	8012178 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801038c:	6879      	ldr	r1, [r7, #4]
 801038e:	2005      	movs	r0, #5
 8010390:	f7f6 fbe0 	bl	8006b54 <memp_free>
}
 8010394:	bf00      	nop
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	08015b30 	.word	0x08015b30
 80103a0:	08015ce8 	.word	0x08015ce8
 80103a4:	08015b78 	.word	0x08015b78

080103a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d106      	bne.n	80103c8 <ipfrag_free_pbuf_custom+0x20>
 80103ba:	4b11      	ldr	r3, [pc, #68]	@ (8010400 <ipfrag_free_pbuf_custom+0x58>)
 80103bc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80103c0:	4910      	ldr	r1, [pc, #64]	@ (8010404 <ipfrag_free_pbuf_custom+0x5c>)
 80103c2:	4811      	ldr	r0, [pc, #68]	@ (8010408 <ipfrag_free_pbuf_custom+0x60>)
 80103c4:	f001 fed8 	bl	8012178 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d006      	beq.n	80103de <ipfrag_free_pbuf_custom+0x36>
 80103d0:	4b0b      	ldr	r3, [pc, #44]	@ (8010400 <ipfrag_free_pbuf_custom+0x58>)
 80103d2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80103d6:	490d      	ldr	r1, [pc, #52]	@ (801040c <ipfrag_free_pbuf_custom+0x64>)
 80103d8:	480b      	ldr	r0, [pc, #44]	@ (8010408 <ipfrag_free_pbuf_custom+0x60>)
 80103da:	f001 fecd 	bl	8012178 <iprintf>
  if (pcr->original != NULL) {
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	695b      	ldr	r3, [r3, #20]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d004      	beq.n	80103f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	695b      	ldr	r3, [r3, #20]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7f7 fa28 	bl	8007840 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80103f0:	68f8      	ldr	r0, [r7, #12]
 80103f2:	f7ff ffbd 	bl	8010370 <ip_frag_free_pbuf_custom_ref>
}
 80103f6:	bf00      	nop
 80103f8:	3710      	adds	r7, #16
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	08015b30 	.word	0x08015b30
 8010404:	08015cf4 	.word	0x08015cf4
 8010408:	08015b78 	.word	0x08015b78
 801040c:	08015d00 	.word	0x08015d00

08010410 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b094      	sub	sp, #80	@ 0x50
 8010414:	af02      	add	r7, sp, #8
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801041c:	2300      	movs	r3, #0
 801041e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010426:	3b14      	subs	r3, #20
 8010428:	2b00      	cmp	r3, #0
 801042a:	da00      	bge.n	801042e <ip4_frag+0x1e>
 801042c:	3307      	adds	r3, #7
 801042e:	10db      	asrs	r3, r3, #3
 8010430:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010432:	2314      	movs	r3, #20
 8010434:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	685b      	ldr	r3, [r3, #4]
 801043a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801043c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801043e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	f003 030f 	and.w	r3, r3, #15
 8010448:	b2db      	uxtb	r3, r3
 801044a:	009b      	lsls	r3, r3, #2
 801044c:	b2db      	uxtb	r3, r3
 801044e:	2b14      	cmp	r3, #20
 8010450:	d002      	beq.n	8010458 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010452:	f06f 0305 	mvn.w	r3, #5
 8010456:	e110      	b.n	801067a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	895b      	ldrh	r3, [r3, #10]
 801045c:	2b13      	cmp	r3, #19
 801045e:	d809      	bhi.n	8010474 <ip4_frag+0x64>
 8010460:	4b88      	ldr	r3, [pc, #544]	@ (8010684 <ip4_frag+0x274>)
 8010462:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8010466:	4988      	ldr	r1, [pc, #544]	@ (8010688 <ip4_frag+0x278>)
 8010468:	4888      	ldr	r0, [pc, #544]	@ (801068c <ip4_frag+0x27c>)
 801046a:	f001 fe85 	bl	8012178 <iprintf>
 801046e:	f06f 0305 	mvn.w	r3, #5
 8010472:	e102      	b.n	801067a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010476:	88db      	ldrh	r3, [r3, #6]
 8010478:	b29b      	uxth	r3, r3
 801047a:	4618      	mov	r0, r3
 801047c:	f7f5 fe82 	bl	8006184 <lwip_htons>
 8010480:	4603      	mov	r3, r0
 8010482:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8010484:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010486:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801048a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801048e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010494:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	891b      	ldrh	r3, [r3, #8]
 801049a:	3b14      	subs	r3, #20
 801049c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80104a0:	e0e1      	b.n	8010666 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80104a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80104a4:	00db      	lsls	r3, r3, #3
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80104ac:	4293      	cmp	r3, r2
 80104ae:	bf28      	it	cs
 80104b0:	4613      	movcs	r3, r2
 80104b2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80104b4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80104b8:	2114      	movs	r1, #20
 80104ba:	200e      	movs	r0, #14
 80104bc:	f7f6 fedc 	bl	8007278 <pbuf_alloc>
 80104c0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80104c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f000 80d5 	beq.w	8010674 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80104ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104cc:	895b      	ldrh	r3, [r3, #10]
 80104ce:	2b13      	cmp	r3, #19
 80104d0:	d806      	bhi.n	80104e0 <ip4_frag+0xd0>
 80104d2:	4b6c      	ldr	r3, [pc, #432]	@ (8010684 <ip4_frag+0x274>)
 80104d4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80104d8:	496d      	ldr	r1, [pc, #436]	@ (8010690 <ip4_frag+0x280>)
 80104da:	486c      	ldr	r0, [pc, #432]	@ (801068c <ip4_frag+0x27c>)
 80104dc:	f001 fe4c 	bl	8012178 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80104e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	2214      	movs	r2, #20
 80104e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80104e8:	4618      	mov	r0, r3
 80104ea:	f001 ff9c 	bl	8012426 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80104ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80104f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80104f6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80104fa:	e064      	b.n	80105c6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	895a      	ldrh	r2, [r3, #10]
 8010500:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010502:	1ad3      	subs	r3, r2, r3
 8010504:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	895b      	ldrh	r3, [r3, #10]
 801050a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801050c:	429a      	cmp	r2, r3
 801050e:	d906      	bls.n	801051e <ip4_frag+0x10e>
 8010510:	4b5c      	ldr	r3, [pc, #368]	@ (8010684 <ip4_frag+0x274>)
 8010512:	f240 322d 	movw	r2, #813	@ 0x32d
 8010516:	495f      	ldr	r1, [pc, #380]	@ (8010694 <ip4_frag+0x284>)
 8010518:	485c      	ldr	r0, [pc, #368]	@ (801068c <ip4_frag+0x27c>)
 801051a:	f001 fe2d 	bl	8012178 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801051e:	8bfa      	ldrh	r2, [r7, #30]
 8010520:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010524:	4293      	cmp	r3, r2
 8010526:	bf28      	it	cs
 8010528:	4613      	movcs	r3, r2
 801052a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801052e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010532:	2b00      	cmp	r3, #0
 8010534:	d105      	bne.n	8010542 <ip4_frag+0x132>
        poff = 0;
 8010536:	2300      	movs	r3, #0
 8010538:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	60fb      	str	r3, [r7, #12]
        continue;
 8010540:	e041      	b.n	80105c6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010542:	f7ff ff0d 	bl	8010360 <ip_frag_alloc_pbuf_custom_ref>
 8010546:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d103      	bne.n	8010556 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801054e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010550:	f7f7 f976 	bl	8007840 <pbuf_free>
        goto memerr;
 8010554:	e08f      	b.n	8010676 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010556:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801055c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801055e:	4413      	add	r3, r2
 8010560:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8010564:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010568:	9201      	str	r2, [sp, #4]
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	4603      	mov	r3, r0
 801056e:	2241      	movs	r2, #65	@ 0x41
 8010570:	2000      	movs	r0, #0
 8010572:	f7f6 ffab 	bl	80074cc <pbuf_alloced_custom>
 8010576:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d106      	bne.n	801058c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801057e:	69b8      	ldr	r0, [r7, #24]
 8010580:	f7ff fef6 	bl	8010370 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010584:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010586:	f7f7 f95b 	bl	8007840 <pbuf_free>
        goto memerr;
 801058a:	e074      	b.n	8010676 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801058c:	68f8      	ldr	r0, [r7, #12]
 801058e:	f7f7 f9f7 	bl	8007980 <pbuf_ref>
      pcr->original = p;
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	68fa      	ldr	r2, [r7, #12]
 8010596:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010598:	69bb      	ldr	r3, [r7, #24]
 801059a:	4a3f      	ldr	r2, [pc, #252]	@ (8010698 <ip4_frag+0x288>)
 801059c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801059e:	6979      	ldr	r1, [r7, #20]
 80105a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80105a2:	f7f7 fa0f 	bl	80079c4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80105a6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80105aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80105ae:	1ad3      	subs	r3, r2, r3
 80105b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80105b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d004      	beq.n	80105c6 <ip4_frag+0x1b6>
        poff = 0;
 80105bc:	2300      	movs	r3, #0
 80105be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80105c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d196      	bne.n	80104fc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80105ce:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80105d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80105d4:	4413      	add	r3, r2
 80105d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80105dc:	f1a3 0213 	sub.w	r2, r3, #19
 80105e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80105e4:	429a      	cmp	r2, r3
 80105e6:	bfcc      	ite	gt
 80105e8:	2301      	movgt	r3, #1
 80105ea:	2300      	movle	r3, #0
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80105f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80105f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80105f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80105fa:	6a3b      	ldr	r3, [r7, #32]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d002      	beq.n	8010606 <ip4_frag+0x1f6>
 8010600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010602:	2b00      	cmp	r3, #0
 8010604:	d003      	beq.n	801060e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010606:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010608:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801060c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801060e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010610:	4618      	mov	r0, r3
 8010612:	f7f5 fdb7 	bl	8006184 <lwip_htons>
 8010616:	4603      	mov	r3, r0
 8010618:	461a      	mov	r2, r3
 801061a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801061c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801061e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010620:	3314      	adds	r3, #20
 8010622:	b29b      	uxth	r3, r3
 8010624:	4618      	mov	r0, r3
 8010626:	f7f5 fdad 	bl	8006184 <lwip_htons>
 801062a:	4603      	mov	r3, r0
 801062c:	461a      	mov	r2, r3
 801062e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010630:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010634:	2200      	movs	r2, #0
 8010636:	729a      	strb	r2, [r3, #10]
 8010638:	2200      	movs	r2, #0
 801063a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	695b      	ldr	r3, [r3, #20]
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010644:	68b8      	ldr	r0, [r7, #8]
 8010646:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010648:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801064a:	f7f7 f8f9 	bl	8007840 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801064e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010652:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801065a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801065e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010660:	4413      	add	r3, r2
 8010662:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8010666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801066a:	2b00      	cmp	r3, #0
 801066c:	f47f af19 	bne.w	80104a2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010670:	2300      	movs	r3, #0
 8010672:	e002      	b.n	801067a <ip4_frag+0x26a>
      goto memerr;
 8010674:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010676:	f04f 33ff 	mov.w	r3, #4294967295
}
 801067a:	4618      	mov	r0, r3
 801067c:	3748      	adds	r7, #72	@ 0x48
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	08015b30 	.word	0x08015b30
 8010688:	08015d0c 	.word	0x08015d0c
 801068c:	08015b78 	.word	0x08015b78
 8010690:	08015d28 	.word	0x08015d28
 8010694:	08015d48 	.word	0x08015d48
 8010698:	080103a9 	.word	0x080103a9

0801069c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b086      	sub	sp, #24
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80106a6:	230e      	movs	r3, #14
 80106a8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	895b      	ldrh	r3, [r3, #10]
 80106ae:	2b0e      	cmp	r3, #14
 80106b0:	d96e      	bls.n	8010790 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	7bdb      	ldrb	r3, [r3, #15]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d106      	bne.n	80106c8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80106c0:	3301      	adds	r3, #1
 80106c2:	b2da      	uxtb	r2, r3
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	7b1a      	ldrb	r2, [r3, #12]
 80106d2:	7b5b      	ldrb	r3, [r3, #13]
 80106d4:	021b      	lsls	r3, r3, #8
 80106d6:	4313      	orrs	r3, r2
 80106d8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	f003 0301 	and.w	r3, r3, #1
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d023      	beq.n	801072e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	d10f      	bne.n	801070e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	785b      	ldrb	r3, [r3, #1]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d11b      	bne.n	801072e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80106fa:	2b5e      	cmp	r3, #94	@ 0x5e
 80106fc:	d117      	bne.n	801072e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	7b5b      	ldrb	r3, [r3, #13]
 8010702:	f043 0310 	orr.w	r3, r3, #16
 8010706:	b2da      	uxtb	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	735a      	strb	r2, [r3, #13]
 801070c:	e00f      	b.n	801072e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	2206      	movs	r2, #6
 8010712:	4928      	ldr	r1, [pc, #160]	@ (80107b4 <ethernet_input+0x118>)
 8010714:	4618      	mov	r0, r3
 8010716:	f001 fdba 	bl	801228e <memcmp>
 801071a:	4603      	mov	r3, r0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d106      	bne.n	801072e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	7b5b      	ldrb	r3, [r3, #13]
 8010724:	f043 0308 	orr.w	r3, r3, #8
 8010728:	b2da      	uxtb	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801072e:	89fb      	ldrh	r3, [r7, #14]
 8010730:	2b08      	cmp	r3, #8
 8010732:	d003      	beq.n	801073c <ethernet_input+0xa0>
 8010734:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8010738:	d014      	beq.n	8010764 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801073a:	e032      	b.n	80107a2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010742:	f003 0308 	and.w	r3, r3, #8
 8010746:	2b00      	cmp	r3, #0
 8010748:	d024      	beq.n	8010794 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801074a:	8afb      	ldrh	r3, [r7, #22]
 801074c:	4619      	mov	r1, r3
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f7f6 fff0 	bl	8007734 <pbuf_remove_header>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d11e      	bne.n	8010798 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801075a:	6839      	ldr	r1, [r7, #0]
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f7fe ff21 	bl	800f5a4 <ip4_input>
      break;
 8010762:	e013      	b.n	801078c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801076a:	f003 0308 	and.w	r3, r3, #8
 801076e:	2b00      	cmp	r3, #0
 8010770:	d014      	beq.n	801079c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010772:	8afb      	ldrh	r3, [r7, #22]
 8010774:	4619      	mov	r1, r3
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f7f6 ffdc 	bl	8007734 <pbuf_remove_header>
 801077c:	4603      	mov	r3, r0
 801077e:	2b00      	cmp	r3, #0
 8010780:	d10e      	bne.n	80107a0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010782:	6839      	ldr	r1, [r7, #0]
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f7fe f8c1 	bl	800e90c <etharp_input>
      break;
 801078a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801078c:	2300      	movs	r3, #0
 801078e:	e00c      	b.n	80107aa <ethernet_input+0x10e>
    goto free_and_return;
 8010790:	bf00      	nop
 8010792:	e006      	b.n	80107a2 <ethernet_input+0x106>
        goto free_and_return;
 8010794:	bf00      	nop
 8010796:	e004      	b.n	80107a2 <ethernet_input+0x106>
        goto free_and_return;
 8010798:	bf00      	nop
 801079a:	e002      	b.n	80107a2 <ethernet_input+0x106>
        goto free_and_return;
 801079c:	bf00      	nop
 801079e:	e000      	b.n	80107a2 <ethernet_input+0x106>
        goto free_and_return;
 80107a0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f7f7 f84c 	bl	8007840 <pbuf_free>
  return ERR_OK;
 80107a8:	2300      	movs	r3, #0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3718      	adds	r7, #24
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	08016038 	.word	0x08016038

080107b8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b086      	sub	sp, #24
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	607a      	str	r2, [r7, #4]
 80107c4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80107c6:	8c3b      	ldrh	r3, [r7, #32]
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7f5 fcdb 	bl	8006184 <lwip_htons>
 80107ce:	4603      	mov	r3, r0
 80107d0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80107d2:	210e      	movs	r1, #14
 80107d4:	68b8      	ldr	r0, [r7, #8]
 80107d6:	f7f6 ff9d 	bl	8007714 <pbuf_add_header>
 80107da:	4603      	mov	r3, r0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d125      	bne.n	801082c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	8afa      	ldrh	r2, [r7, #22]
 80107ea:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	2206      	movs	r2, #6
 80107f0:	6839      	ldr	r1, [r7, #0]
 80107f2:	4618      	mov	r0, r3
 80107f4:	f001 fe17 	bl	8012426 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	3306      	adds	r3, #6
 80107fc:	2206      	movs	r2, #6
 80107fe:	6879      	ldr	r1, [r7, #4]
 8010800:	4618      	mov	r0, r3
 8010802:	f001 fe10 	bl	8012426 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801080c:	2b06      	cmp	r3, #6
 801080e:	d006      	beq.n	801081e <ethernet_output+0x66>
 8010810:	4b0a      	ldr	r3, [pc, #40]	@ (801083c <ethernet_output+0x84>)
 8010812:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8010816:	490a      	ldr	r1, [pc, #40]	@ (8010840 <ethernet_output+0x88>)
 8010818:	480a      	ldr	r0, [pc, #40]	@ (8010844 <ethernet_output+0x8c>)
 801081a:	f001 fcad 	bl	8012178 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	699b      	ldr	r3, [r3, #24]
 8010822:	68b9      	ldr	r1, [r7, #8]
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	4798      	blx	r3
 8010828:	4603      	mov	r3, r0
 801082a:	e002      	b.n	8010832 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801082c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801082e:	f06f 0301 	mvn.w	r3, #1
}
 8010832:	4618      	mov	r0, r3
 8010834:	3718      	adds	r7, #24
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
 801083a:	bf00      	nop
 801083c:	08015d58 	.word	0x08015d58
 8010840:	08015d90 	.word	0x08015d90
 8010844:	08015dc4 	.word	0x08015dc4

08010848 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b086      	sub	sp, #24
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8010852:	2300      	movs	r3, #0
 8010854:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	881b      	ldrh	r3, [r3, #0]
 801085a:	2b05      	cmp	r3, #5
 801085c:	d16a      	bne.n	8010934 <eMBFuncReadCoils+0xec>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	3301      	adds	r3, #1
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	021b      	lsls	r3, r3, #8
 8010866:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	3302      	adds	r3, #2
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	461a      	mov	r2, r3
 8010870:	8abb      	ldrh	r3, [r7, #20]
 8010872:	4313      	orrs	r3, r2
 8010874:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8010876:	8abb      	ldrh	r3, [r7, #20]
 8010878:	3301      	adds	r3, #1
 801087a:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	3303      	adds	r3, #3
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	021b      	lsls	r3, r3, #8
 8010884:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	3304      	adds	r3, #4
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	461a      	mov	r2, r3
 801088e:	8a7b      	ldrh	r3, [r7, #18]
 8010890:	4313      	orrs	r3, r2
 8010892:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8010894:	8a7b      	ldrh	r3, [r7, #18]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d049      	beq.n	801092e <eMBFuncReadCoils+0xe6>
 801089a:	8a7b      	ldrh	r3, [r7, #18]
 801089c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80108a0:	d245      	bcs.n	801092e <eMBFuncReadCoils+0xe6>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	2200      	movs	r2, #0
 80108aa:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	1c5a      	adds	r2, r3, #1
 80108b0:	60fa      	str	r2, [r7, #12]
 80108b2:	2201      	movs	r2, #1
 80108b4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	881b      	ldrh	r3, [r3, #0]
 80108ba:	3301      	adds	r3, #1
 80108bc:	b29a      	uxth	r2, r3
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 80108c2:	8a7b      	ldrh	r3, [r7, #18]
 80108c4:	f003 0307 	and.w	r3, r3, #7
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d006      	beq.n	80108da <eMBFuncReadCoils+0x92>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80108cc:	8a7b      	ldrh	r3, [r7, #18]
 80108ce:	08db      	lsrs	r3, r3, #3
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	3301      	adds	r3, #1
 80108d6:	75fb      	strb	r3, [r7, #23]
 80108d8:	e003      	b.n	80108e2 <eMBFuncReadCoils+0x9a>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80108da:	8a7b      	ldrh	r3, [r7, #18]
 80108dc:	08db      	lsrs	r3, r3, #3
 80108de:	b29b      	uxth	r3, r3
 80108e0:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	1c5a      	adds	r2, r3, #1
 80108e6:	60fa      	str	r2, [r7, #12]
 80108e8:	7dfa      	ldrb	r2, [r7, #23]
 80108ea:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	881b      	ldrh	r3, [r3, #0]
 80108f0:	3301      	adds	r3, #1
 80108f2:	b29a      	uxth	r2, r3
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80108f8:	8a7a      	ldrh	r2, [r7, #18]
 80108fa:	8ab9      	ldrh	r1, [r7, #20]
 80108fc:	2300      	movs	r3, #0
 80108fe:	68f8      	ldr	r0, [r7, #12]
 8010900:	f000 fe14 	bl	801152c <eMBRegCoilsCB>
 8010904:	4603      	mov	r3, r0
 8010906:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8010908:	7afb      	ldrb	r3, [r7, #11]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d006      	beq.n	801091c <eMBFuncReadCoils+0xd4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 801090e:	7afb      	ldrb	r3, [r7, #11]
 8010910:	4618      	mov	r0, r3
 8010912:	f000 fb77 	bl	8011004 <prveMBError2Exception>
 8010916:	4603      	mov	r3, r0
 8010918:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 801091a:	e00d      	b.n	8010938 <eMBFuncReadCoils+0xf0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	881a      	ldrh	r2, [r3, #0]
 8010920:	7dfb      	ldrb	r3, [r7, #23]
 8010922:	b29b      	uxth	r3, r3
 8010924:	4413      	add	r3, r2
 8010926:	b29a      	uxth	r2, r3
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 801092c:	e004      	b.n	8010938 <eMBFuncReadCoils+0xf0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801092e:	2303      	movs	r3, #3
 8010930:	75bb      	strb	r3, [r7, #22]
 8010932:	e001      	b.n	8010938 <eMBFuncReadCoils+0xf0>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010934:	2303      	movs	r3, #3
 8010936:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8010938:	7dbb      	ldrb	r3, [r7, #22]
}
 801093a:	4618      	mov	r0, r3
 801093c:	3718      	adds	r7, #24
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}

08010942 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8010942:	b580      	push	{r7, lr}
 8010944:	b084      	sub	sp, #16
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 801094c:	2300      	movs	r3, #0
 801094e:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	881b      	ldrh	r3, [r3, #0]
 8010954:	2b05      	cmp	r3, #5
 8010956:	d13f      	bne.n	80109d8 <eMBFuncWriteCoil+0x96>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	3301      	adds	r3, #1
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	021b      	lsls	r3, r3, #8
 8010960:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	3302      	adds	r3, #2
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	461a      	mov	r2, r3
 801096a:	89bb      	ldrh	r3, [r7, #12]
 801096c:	4313      	orrs	r3, r2
 801096e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8010970:	89bb      	ldrh	r3, [r7, #12]
 8010972:	3301      	adds	r3, #1
 8010974:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	3304      	adds	r3, #4
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d128      	bne.n	80109d2 <eMBFuncWriteCoil+0x90>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	3303      	adds	r3, #3
 8010984:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8010986:	2bff      	cmp	r3, #255	@ 0xff
 8010988:	d004      	beq.n	8010994 <eMBFuncWriteCoil+0x52>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	3303      	adds	r3, #3
 801098e:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8010990:	2b00      	cmp	r3, #0
 8010992:	d11e      	bne.n	80109d2 <eMBFuncWriteCoil+0x90>
        {
            ucBuf[1] = 0;
 8010994:	2300      	movs	r3, #0
 8010996:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	3303      	adds	r3, #3
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	2bff      	cmp	r3, #255	@ 0xff
 80109a0:	d102      	bne.n	80109a8 <eMBFuncWriteCoil+0x66>
            {
                ucBuf[0] = 1;
 80109a2:	2301      	movs	r3, #1
 80109a4:	723b      	strb	r3, [r7, #8]
 80109a6:	e001      	b.n	80109ac <eMBFuncWriteCoil+0x6a>
            }
            else
            {
                ucBuf[0] = 0;
 80109a8:	2300      	movs	r3, #0
 80109aa:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 80109ac:	89b9      	ldrh	r1, [r7, #12]
 80109ae:	f107 0008 	add.w	r0, r7, #8
 80109b2:	2301      	movs	r3, #1
 80109b4:	2201      	movs	r2, #1
 80109b6:	f000 fdb9 	bl	801152c <eMBRegCoilsCB>
 80109ba:	4603      	mov	r3, r0
 80109bc:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80109be:	7afb      	ldrb	r3, [r7, #11]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d00b      	beq.n	80109dc <eMBFuncWriteCoil+0x9a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80109c4:	7afb      	ldrb	r3, [r7, #11]
 80109c6:	4618      	mov	r0, r3
 80109c8:	f000 fb1c 	bl	8011004 <prveMBError2Exception>
 80109cc:	4603      	mov	r3, r0
 80109ce:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 80109d0:	e004      	b.n	80109dc <eMBFuncWriteCoil+0x9a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80109d2:	2303      	movs	r3, #3
 80109d4:	73fb      	strb	r3, [r7, #15]
 80109d6:	e001      	b.n	80109dc <eMBFuncWriteCoil+0x9a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80109d8:	2303      	movs	r3, #3
 80109da:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80109dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b084      	sub	sp, #16
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
 80109ee:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 80109f0:	2300      	movs	r3, #0
 80109f2:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	881b      	ldrh	r3, [r3, #0]
 80109f8:	2b05      	cmp	r3, #5
 80109fa:	d952      	bls.n	8010aa2 <eMBFuncWriteMultipleCoils+0xbc>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	3301      	adds	r3, #1
 8010a00:	781b      	ldrb	r3, [r3, #0]
 8010a02:	021b      	lsls	r3, r3, #8
 8010a04:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	3302      	adds	r3, #2
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	89bb      	ldrh	r3, [r7, #12]
 8010a10:	4313      	orrs	r3, r2
 8010a12:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8010a14:	89bb      	ldrh	r3, [r7, #12]
 8010a16:	3301      	adds	r3, #1
 8010a18:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	3303      	adds	r3, #3
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	021b      	lsls	r3, r3, #8
 8010a22:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	3304      	adds	r3, #4
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	897b      	ldrh	r3, [r7, #10]
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	795b      	ldrb	r3, [r3, #5]
 8010a36:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8010a38:	897b      	ldrh	r3, [r7, #10]
 8010a3a:	f003 0307 	and.w	r3, r3, #7
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d006      	beq.n	8010a50 <eMBFuncWriteMultipleCoils+0x6a>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8010a42:	897b      	ldrh	r3, [r7, #10]
 8010a44:	08db      	lsrs	r3, r3, #3
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	73fb      	strb	r3, [r7, #15]
 8010a4e:	e003      	b.n	8010a58 <eMBFuncWriteMultipleCoils+0x72>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8010a50:	897b      	ldrh	r3, [r7, #10]
 8010a52:	08db      	lsrs	r3, r3, #3
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8010a58:	897b      	ldrh	r3, [r7, #10]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d01e      	beq.n	8010a9c <eMBFuncWriteMultipleCoils+0xb6>
 8010a5e:	897b      	ldrh	r3, [r7, #10]
 8010a60:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 8010a64:	d81a      	bhi.n	8010a9c <eMBFuncWriteMultipleCoils+0xb6>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8010a66:	7bfa      	ldrb	r2, [r7, #15]
 8010a68:	7a7b      	ldrb	r3, [r7, #9]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d116      	bne.n	8010a9c <eMBFuncWriteMultipleCoils+0xb6>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	1d98      	adds	r0, r3, #6
 8010a72:	897a      	ldrh	r2, [r7, #10]
 8010a74:	89b9      	ldrh	r1, [r7, #12]
 8010a76:	2301      	movs	r3, #1
 8010a78:	f000 fd58 	bl	801152c <eMBRegCoilsCB>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8010a80:	7a3b      	ldrb	r3, [r7, #8]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d006      	beq.n	8010a94 <eMBFuncWriteMultipleCoils+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8010a86:	7a3b      	ldrb	r3, [r7, #8]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f000 fabb 	bl	8011004 <prveMBError2Exception>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8010a92:	e008      	b.n	8010aa6 <eMBFuncWriteMultipleCoils+0xc0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	2205      	movs	r2, #5
 8010a98:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8010a9a:	e004      	b.n	8010aa6 <eMBFuncWriteMultipleCoils+0xc0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010a9c:	2303      	movs	r3, #3
 8010a9e:	73bb      	strb	r3, [r7, #14]
 8010aa0:	e001      	b.n	8010aa6 <eMBFuncWriteMultipleCoils+0xc0>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010aa2:	2303      	movs	r3, #3
 8010aa4:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8010aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3710      	adds	r7, #16
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b086      	sub	sp, #24
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8010aba:	2300      	movs	r3, #0
 8010abc:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	881b      	ldrh	r3, [r3, #0]
 8010ac2:	2b05      	cmp	r3, #5
 8010ac4:	d16a      	bne.n	8010b9c <eMBFuncReadDiscreteInputs+0xec>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	021b      	lsls	r3, r3, #8
 8010ace:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	3302      	adds	r3, #2
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	8abb      	ldrh	r3, [r7, #20]
 8010ada:	4313      	orrs	r3, r2
 8010adc:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8010ade:	8abb      	ldrh	r3, [r7, #20]
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	3303      	adds	r3, #3
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	021b      	lsls	r3, r3, #8
 8010aec:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	3304      	adds	r3, #4
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	461a      	mov	r2, r3
 8010af6:	8a7b      	ldrh	r3, [r7, #18]
 8010af8:	4313      	orrs	r3, r2
 8010afa:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8010afc:	8a7b      	ldrh	r3, [r7, #18]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d049      	beq.n	8010b96 <eMBFuncReadDiscreteInputs+0xe6>
 8010b02:	8a7b      	ldrh	r3, [r7, #18]
 8010b04:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8010b08:	d245      	bcs.n	8010b96 <eMBFuncReadDiscreteInputs+0xe6>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	2200      	movs	r2, #0
 8010b12:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	1c5a      	adds	r2, r3, #1
 8010b18:	60fa      	str	r2, [r7, #12]
 8010b1a:	2202      	movs	r2, #2
 8010b1c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	881b      	ldrh	r3, [r3, #0]
 8010b22:	3301      	adds	r3, #1
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8010b2a:	8a7b      	ldrh	r3, [r7, #18]
 8010b2c:	f003 0307 	and.w	r3, r3, #7
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d006      	beq.n	8010b42 <eMBFuncReadDiscreteInputs+0x92>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8010b34:	8a7b      	ldrh	r3, [r7, #18]
 8010b36:	08db      	lsrs	r3, r3, #3
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	75fb      	strb	r3, [r7, #23]
 8010b40:	e003      	b.n	8010b4a <eMBFuncReadDiscreteInputs+0x9a>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8010b42:	8a7b      	ldrh	r3, [r7, #18]
 8010b44:	08db      	lsrs	r3, r3, #3
 8010b46:	b29b      	uxth	r3, r3
 8010b48:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	1c5a      	adds	r2, r3, #1
 8010b4e:	60fa      	str	r2, [r7, #12]
 8010b50:	7dfa      	ldrb	r2, [r7, #23]
 8010b52:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	881b      	ldrh	r3, [r3, #0]
 8010b58:	3301      	adds	r3, #1
 8010b5a:	b29a      	uxth	r2, r3
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8010b60:	8a7a      	ldrh	r2, [r7, #18]
 8010b62:	8abb      	ldrh	r3, [r7, #20]
 8010b64:	4619      	mov	r1, r3
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f000 fdf4 	bl	8011754 <eMBRegDiscreteCB>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8010b70:	7afb      	ldrb	r3, [r7, #11]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d006      	beq.n	8010b84 <eMBFuncReadDiscreteInputs+0xd4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8010b76:	7afb      	ldrb	r3, [r7, #11]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f000 fa43 	bl	8011004 <prveMBError2Exception>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8010b82:	e00d      	b.n	8010ba0 <eMBFuncReadDiscreteInputs+0xf0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	881a      	ldrh	r2, [r3, #0]
 8010b88:	7dfb      	ldrb	r3, [r7, #23]
 8010b8a:	b29b      	uxth	r3, r3
 8010b8c:	4413      	add	r3, r2
 8010b8e:	b29a      	uxth	r2, r3
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8010b94:	e004      	b.n	8010ba0 <eMBFuncReadDiscreteInputs+0xf0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010b96:	2303      	movs	r3, #3
 8010b98:	75bb      	strb	r3, [r7, #22]
 8010b9a:	e001      	b.n	8010ba0 <eMBFuncReadDiscreteInputs+0xf0>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010b9c:	2303      	movs	r3, #3
 8010b9e:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8010ba0:	7dbb      	ldrb	r3, [r7, #22]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3718      	adds	r7, #24
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b084      	sub	sp, #16
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
 8010bb2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	881b      	ldrh	r3, [r3, #0]
 8010bbc:	2b05      	cmp	r3, #5
 8010bbe:	d121      	bne.n	8010c04 <eMBFuncWriteHoldingRegister+0x5a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	021b      	lsls	r3, r3, #8
 8010bc8:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	3302      	adds	r3, #2
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	89bb      	ldrh	r3, [r7, #12]
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8010bd8:	89bb      	ldrh	r3, [r7, #12]
 8010bda:	3301      	adds	r3, #1
 8010bdc:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	1cd8      	adds	r0, r3, #3
 8010be2:	89b9      	ldrh	r1, [r7, #12]
 8010be4:	2301      	movs	r3, #1
 8010be6:	2201      	movs	r2, #1
 8010be8:	f000 fbfc 	bl	80113e4 <eMBRegHoldingCB>
 8010bec:	4603      	mov	r3, r0
 8010bee:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8010bf0:	7afb      	ldrb	r3, [r7, #11]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d008      	beq.n	8010c08 <eMBFuncWriteHoldingRegister+0x5e>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8010bf6:	7afb      	ldrb	r3, [r7, #11]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f000 fa03 	bl	8011004 <prveMBError2Exception>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	73fb      	strb	r3, [r7, #15]
 8010c02:	e001      	b.n	8010c08 <eMBFuncWriteHoldingRegister+0x5e>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010c04:	2303      	movs	r3, #3
 8010c06:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8010c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3710      	adds	r7, #16
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b084      	sub	sp, #16
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
 8010c1a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	881b      	ldrh	r3, [r3, #0]
 8010c24:	2b05      	cmp	r3, #5
 8010c26:	d944      	bls.n	8010cb2 <eMBFuncWriteMultipleHoldingRegister+0xa0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	021b      	lsls	r3, r3, #8
 8010c30:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	3302      	adds	r3, #2
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	461a      	mov	r2, r3
 8010c3a:	89bb      	ldrh	r3, [r7, #12]
 8010c3c:	4313      	orrs	r3, r2
 8010c3e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8010c40:	89bb      	ldrh	r3, [r7, #12]
 8010c42:	3301      	adds	r3, #1
 8010c44:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	3303      	adds	r3, #3
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	021b      	lsls	r3, r3, #8
 8010c4e:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	3304      	adds	r3, #4
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	461a      	mov	r2, r3
 8010c58:	897b      	ldrh	r3, [r7, #10]
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	795b      	ldrb	r3, [r3, #5]
 8010c62:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8010c64:	897b      	ldrh	r3, [r7, #10]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d020      	beq.n	8010cac <eMBFuncWriteMultipleHoldingRegister+0x9a>
 8010c6a:	897b      	ldrh	r3, [r7, #10]
 8010c6c:	2b78      	cmp	r3, #120	@ 0x78
 8010c6e:	d81d      	bhi.n	8010cac <eMBFuncWriteMultipleHoldingRegister+0x9a>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8010c70:	897b      	ldrh	r3, [r7, #10]
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	005b      	lsls	r3, r3, #1
 8010c76:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8010c78:	7a7a      	ldrb	r2, [r7, #9]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d116      	bne.n	8010cac <eMBFuncWriteMultipleHoldingRegister+0x9a>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	1d98      	adds	r0, r3, #6
 8010c82:	897a      	ldrh	r2, [r7, #10]
 8010c84:	89b9      	ldrh	r1, [r7, #12]
 8010c86:	2301      	movs	r3, #1
 8010c88:	f000 fbac 	bl	80113e4 <eMBRegHoldingCB>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8010c90:	7a3b      	ldrb	r3, [r7, #8]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d006      	beq.n	8010ca4 <eMBFuncWriteMultipleHoldingRegister+0x92>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8010c96:	7a3b      	ldrb	r3, [r7, #8]
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f000 f9b3 	bl	8011004 <prveMBError2Exception>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8010ca2:	e008      	b.n	8010cb6 <eMBFuncWriteMultipleHoldingRegister+0xa4>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	2205      	movs	r2, #5
 8010ca8:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8010caa:	e004      	b.n	8010cb6 <eMBFuncWriteMultipleHoldingRegister+0xa4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010cac:	2303      	movs	r3, #3
 8010cae:	73fb      	strb	r3, [r7, #15]
 8010cb0:	e001      	b.n	8010cb6 <eMBFuncWriteMultipleHoldingRegister+0xa4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010cb2:	2303      	movs	r3, #3
 8010cb4:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8010cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3710      	adds	r7, #16
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b086      	sub	sp, #24
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	881b      	ldrh	r3, [r3, #0]
 8010cd2:	2b05      	cmp	r3, #5
 8010cd4:	d15d      	bne.n	8010d92 <eMBFuncReadHoldingRegister+0xd2>
    {
        usRegAddress  = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	3301      	adds	r3, #1
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	021b      	lsls	r3, r3, #8
 8010cde:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	3302      	adds	r3, #2
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	8abb      	ldrh	r3, [r7, #20]
 8010cea:	4313      	orrs	r3, r2
 8010cec:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8010cee:	8abb      	ldrh	r3, [r7, #20]
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	82bb      	strh	r3, [r7, #20]

        usRegCount  = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	3303      	adds	r3, #3
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	021b      	lsls	r3, r3, #8
 8010cfc:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	3304      	adds	r3, #4
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	461a      	mov	r2, r3
 8010d06:	8a7b      	ldrh	r3, [r7, #18]
 8010d08:	4313      	orrs	r3, r2
 8010d0a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8010d0c:	8a7b      	ldrh	r3, [r7, #18]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d03c      	beq.n	8010d8c <eMBFuncReadHoldingRegister+0xcc>
 8010d12:	8a7b      	ldrh	r3, [r7, #18]
 8010d14:	2b7d      	cmp	r3, #125	@ 0x7d
 8010d16:	d839      	bhi.n	8010d8c <eMBFuncReadHoldingRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	1c5a      	adds	r2, r3, #1
 8010d26:	60fa      	str	r2, [r7, #12]
 8010d28:	2203      	movs	r2, #3
 8010d2a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	881b      	ldrh	r3, [r3, #0]
 8010d30:	3301      	adds	r3, #1
 8010d32:	b29a      	uxth	r2, r3
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8010d38:	8a7b      	ldrh	r3, [r7, #18]
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	1c59      	adds	r1, r3, #1
 8010d40:	60f9      	str	r1, [r7, #12]
 8010d42:	0052      	lsls	r2, r2, #1
 8010d44:	b2d2      	uxtb	r2, r2
 8010d46:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	881b      	ldrh	r3, [r3, #0]
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8010d54:	8a7a      	ldrh	r2, [r7, #18]
 8010d56:	8ab9      	ldrh	r1, [r7, #20]
 8010d58:	2300      	movs	r3, #0
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f000 fb42 	bl	80113e4 <eMBRegHoldingCB>
 8010d60:	4603      	mov	r3, r0
 8010d62:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8010d64:	7afb      	ldrb	r3, [r7, #11]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d006      	beq.n	8010d78 <eMBFuncReadHoldingRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8010d6a:	7afb      	ldrb	r3, [r7, #11]
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f000 f949 	bl	8011004 <prveMBError2Exception>
 8010d72:	4603      	mov	r3, r0
 8010d74:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8010d76:	e00e      	b.n	8010d96 <eMBFuncReadHoldingRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	881a      	ldrh	r2, [r3, #0]
 8010d7c:	8a7b      	ldrh	r3, [r7, #18]
 8010d7e:	005b      	lsls	r3, r3, #1
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	4413      	add	r3, r2
 8010d84:	b29a      	uxth	r2, r3
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8010d8a:	e004      	b.n	8010d96 <eMBFuncReadHoldingRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010d8c:	2303      	movs	r3, #3
 8010d8e:	75fb      	strb	r3, [r7, #23]
 8010d90:	e001      	b.n	8010d96 <eMBFuncReadHoldingRegister+0xd6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010d92:	2303      	movs	r3, #3
 8010d94:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8010d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3718      	adds	r7, #24
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b086      	sub	sp, #24
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8010daa:	2300      	movs	r3, #0
 8010dac:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	881b      	ldrh	r3, [r3, #0]
 8010db2:	2b09      	cmp	r3, #9
 8010db4:	f240 8095 	bls.w	8010ee2 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	3301      	adds	r3, #1
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	021b      	lsls	r3, r3, #8
 8010dc0:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	3302      	adds	r3, #2
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	461a      	mov	r2, r3
 8010dca:	8abb      	ldrh	r3, [r7, #20]
 8010dcc:	4313      	orrs	r3, r2
 8010dce:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8010dd0:	8abb      	ldrh	r3, [r7, #20]
 8010dd2:	3301      	adds	r3, #1
 8010dd4:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	3303      	adds	r3, #3
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	021b      	lsls	r3, r3, #8
 8010dde:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	3304      	adds	r3, #4
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	461a      	mov	r2, r3
 8010de8:	8a7b      	ldrh	r3, [r7, #18]
 8010dea:	4313      	orrs	r3, r2
 8010dec:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	3305      	adds	r3, #5
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	021b      	lsls	r3, r3, #8
 8010df6:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	3306      	adds	r3, #6
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	461a      	mov	r2, r3
 8010e00:	8a3b      	ldrh	r3, [r7, #16]
 8010e02:	4313      	orrs	r3, r2
 8010e04:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8010e06:	8a3b      	ldrh	r3, [r7, #16]
 8010e08:	3301      	adds	r3, #1
 8010e0a:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	3307      	adds	r3, #7
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	021b      	lsls	r3, r3, #8
 8010e14:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	3308      	adds	r3, #8
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	89fb      	ldrh	r3, [r7, #14]
 8010e20:	4313      	orrs	r3, r2
 8010e22:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	7a5b      	ldrb	r3, [r3, #9]
 8010e28:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8010e2a:	8a7b      	ldrh	r3, [r7, #18]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d056      	beq.n	8010ede <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 8010e30:	8a7b      	ldrh	r3, [r7, #18]
 8010e32:	2b7d      	cmp	r3, #125	@ 0x7d
 8010e34:	d853      	bhi.n	8010ede <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 8010e36:	89fb      	ldrh	r3, [r7, #14]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d050      	beq.n	8010ede <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8010e3c:	89fb      	ldrh	r3, [r7, #14]
 8010e3e:	2b79      	cmp	r3, #121	@ 0x79
 8010e40:	d84d      	bhi.n	8010ede <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8010e42:	89fb      	ldrh	r3, [r7, #14]
 8010e44:	005a      	lsls	r2, r3, #1
 8010e46:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d148      	bne.n	8010ede <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f103 000a 	add.w	r0, r3, #10
 8010e52:	89fa      	ldrh	r2, [r7, #14]
 8010e54:	8a39      	ldrh	r1, [r7, #16]
 8010e56:	2301      	movs	r3, #1
 8010e58:	f000 fac4 	bl	80113e4 <eMBRegHoldingCB>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8010e60:	7dbb      	ldrb	r3, [r7, #22]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d131      	bne.n	8010eca <eMBFuncReadWriteMultipleHoldingRegister+0x12a>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	1c5a      	adds	r2, r3, #1
 8010e74:	60ba      	str	r2, [r7, #8]
 8010e76:	2217      	movs	r2, #23
 8010e78:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	881b      	ldrh	r3, [r3, #0]
 8010e7e:	3301      	adds	r3, #1
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8010e86:	8a7b      	ldrh	r3, [r7, #18]
 8010e88:	b2da      	uxtb	r2, r3
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	1c59      	adds	r1, r3, #1
 8010e8e:	60b9      	str	r1, [r7, #8]
 8010e90:	0052      	lsls	r2, r2, #1
 8010e92:	b2d2      	uxtb	r2, r2
 8010e94:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	881b      	ldrh	r3, [r3, #0]
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	b29a      	uxth	r2, r3
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8010ea2:	8a7a      	ldrh	r2, [r7, #18]
 8010ea4:	8ab9      	ldrh	r1, [r7, #20]
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	68b8      	ldr	r0, [r7, #8]
 8010eaa:	f000 fa9b 	bl	80113e4 <eMBRegHoldingCB>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8010eb2:	7dbb      	ldrb	r3, [r7, #22]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d108      	bne.n	8010eca <eMBFuncReadWriteMultipleHoldingRegister+0x12a>
                {
                    *usLen += 2 * usRegReadCount;
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	881a      	ldrh	r2, [r3, #0]
 8010ebc:	8a7b      	ldrh	r3, [r7, #18]
 8010ebe:	005b      	lsls	r3, r3, #1
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	4413      	add	r3, r2
 8010ec4:	b29a      	uxth	r2, r3
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8010eca:	7dbb      	ldrb	r3, [r7, #22]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d008      	beq.n	8010ee2 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8010ed0:	7dbb      	ldrb	r3, [r7, #22]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f000 f896 	bl	8011004 <prveMBError2Exception>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8010edc:	e001      	b.n	8010ee2 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010ede:	2303      	movs	r3, #3
 8010ee0:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	3718      	adds	r7, #24
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b086      	sub	sp, #24
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	881b      	ldrh	r3, [r3, #0]
 8010efe:	2b05      	cmp	r3, #5
 8010f00:	d15d      	bne.n	8010fbe <eMBFuncReadInputRegister+0xd2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	3301      	adds	r3, #1
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	021b      	lsls	r3, r3, #8
 8010f0a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	3302      	adds	r3, #2
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	461a      	mov	r2, r3
 8010f14:	8abb      	ldrh	r3, [r7, #20]
 8010f16:	4313      	orrs	r3, r2
 8010f18:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8010f1a:	8abb      	ldrh	r3, [r7, #20]
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	3303      	adds	r3, #3
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	021b      	lsls	r3, r3, #8
 8010f28:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	3304      	adds	r3, #4
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	461a      	mov	r2, r3
 8010f32:	8a7b      	ldrh	r3, [r7, #18]
 8010f34:	4313      	orrs	r3, r2
 8010f36:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8010f38:	8a7b      	ldrh	r3, [r7, #18]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d03c      	beq.n	8010fb8 <eMBFuncReadInputRegister+0xcc>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8010f3e:	8a7b      	ldrh	r3, [r7, #18]
 8010f40:	2b7c      	cmp	r3, #124	@ 0x7c
 8010f42:	d839      	bhi.n	8010fb8 <eMBFuncReadInputRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	1c5a      	adds	r2, r3, #1
 8010f52:	60fa      	str	r2, [r7, #12]
 8010f54:	2204      	movs	r2, #4
 8010f56:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	881b      	ldrh	r3, [r3, #0]
 8010f5c:	3301      	adds	r3, #1
 8010f5e:	b29a      	uxth	r2, r3
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8010f64:	8a7b      	ldrh	r3, [r7, #18]
 8010f66:	b2da      	uxtb	r2, r3
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	1c59      	adds	r1, r3, #1
 8010f6c:	60f9      	str	r1, [r7, #12]
 8010f6e:	0052      	lsls	r2, r2, #1
 8010f70:	b2d2      	uxtb	r2, r2
 8010f72:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	881b      	ldrh	r3, [r3, #0]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	b29a      	uxth	r2, r3
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8010f80:	8a7a      	ldrh	r2, [r7, #18]
 8010f82:	8abb      	ldrh	r3, [r7, #20]
 8010f84:	4619      	mov	r1, r3
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f000 fba6 	bl	80116d8 <eMBRegInputCB>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8010f90:	7afb      	ldrb	r3, [r7, #11]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d006      	beq.n	8010fa4 <eMBFuncReadInputRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8010f96:	7afb      	ldrb	r3, [r7, #11]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f000 f833 	bl	8011004 <prveMBError2Exception>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8010fa2:	e00e      	b.n	8010fc2 <eMBFuncReadInputRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	881a      	ldrh	r2, [r3, #0]
 8010fa8:	8a7b      	ldrh	r3, [r7, #18]
 8010faa:	005b      	lsls	r3, r3, #1
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	4413      	add	r3, r2
 8010fb0:	b29a      	uxth	r2, r3
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8010fb6:	e004      	b.n	8010fc2 <eMBFuncReadInputRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010fb8:	2303      	movs	r3, #3
 8010fba:	75fb      	strb	r3, [r7, #23]
 8010fbc:	e001      	b.n	8010fc2 <eMBFuncReadInputRegister+0xd6>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010fbe:	2303      	movs	r3, #3
 8010fc0:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8010fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3718      	adds	r7, #24
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	3301      	adds	r3, #1
 8010fda:	4a08      	ldr	r2, [pc, #32]	@ (8010ffc <eMBFuncReportSlaveID+0x30>)
 8010fdc:	8812      	ldrh	r2, [r2, #0]
 8010fde:	4908      	ldr	r1, [pc, #32]	@ (8011000 <eMBFuncReportSlaveID+0x34>)
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f001 fa20 	bl	8012426 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8010fe6:	4b05      	ldr	r3, [pc, #20]	@ (8010ffc <eMBFuncReportSlaveID+0x30>)
 8010fe8:	881b      	ldrh	r3, [r3, #0]
 8010fea:	3301      	adds	r3, #1
 8010fec:	b29a      	uxth	r2, r3
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8010ff2:	2300      	movs	r3, #0
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	200085ec 	.word	0x200085ec
 8011000:	200085cc 	.word	0x200085cc

08011004 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8011004:	b480      	push	{r7}
 8011006:	b085      	sub	sp, #20
 8011008:	af00      	add	r7, sp, #0
 801100a:	4603      	mov	r3, r0
 801100c:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 801100e:	79fb      	ldrb	r3, [r7, #7]
 8011010:	2b07      	cmp	r3, #7
 8011012:	d00c      	beq.n	801102e <prveMBError2Exception+0x2a>
 8011014:	2b07      	cmp	r3, #7
 8011016:	dc0d      	bgt.n	8011034 <prveMBError2Exception+0x30>
 8011018:	2b00      	cmp	r3, #0
 801101a:	d002      	beq.n	8011022 <prveMBError2Exception+0x1e>
 801101c:	2b01      	cmp	r3, #1
 801101e:	d003      	beq.n	8011028 <prveMBError2Exception+0x24>
 8011020:	e008      	b.n	8011034 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8011022:	2300      	movs	r3, #0
 8011024:	73fb      	strb	r3, [r7, #15]
            break;
 8011026:	e008      	b.n	801103a <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8011028:	2302      	movs	r3, #2
 801102a:	73fb      	strb	r3, [r7, #15]
            break;
 801102c:	e005      	b.n	801103a <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 801102e:	2306      	movs	r3, #6
 8011030:	73fb      	strb	r3, [r7, #15]
            break;
 8011032:	e002      	b.n	801103a <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8011034:	2304      	movs	r3, #4
 8011036:	73fb      	strb	r3, [r7, #15]
            break;
 8011038:	bf00      	nop
    }

    return eStatus;
 801103a:	7bfb      	ldrb	r3, [r7, #15]
}
 801103c:	4618      	mov	r0, r3
 801103e:	3714      	adds	r7, #20
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	4603      	mov	r3, r0
 8011050:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8011052:	2300      	movs	r3, #0
 8011054:	73fb      	strb	r3, [r7, #15]

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 8011056:	88fb      	ldrh	r3, [r7, #6]
 8011058:	4618      	mov	r0, r3
 801105a:	f000 fed5 	bl	8011e08 <eMBTCPDoInit>
 801105e:	4603      	mov	r3, r0
 8011060:	73fb      	strb	r3, [r7, #15]
 8011062:	7bfb      	ldrb	r3, [r7, #15]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d003      	beq.n	8011070 <eMBTCPInit+0x28>
    {
        eMBState = STATE_DISABLED;
 8011068:	4b14      	ldr	r3, [pc, #80]	@ (80110bc <eMBTCPInit+0x74>)
 801106a:	2201      	movs	r2, #1
 801106c:	701a      	strb	r2, [r3, #0]
 801106e:	e01f      	b.n	80110b0 <eMBTCPInit+0x68>
    }
    else if( !xMBPortEventInit(  ) )
 8011070:	f000 fbe0 	bl	8011834 <xMBPortEventInit>
 8011074:	4603      	mov	r3, r0
 8011076:	2b00      	cmp	r3, #0
 8011078:	d102      	bne.n	8011080 <eMBTCPInit+0x38>
    {
        /* Port dependent event module initalization failed. */
        eStatus = MB_EPORTERR;
 801107a:	2303      	movs	r3, #3
 801107c:	73fb      	strb	r3, [r7, #15]
 801107e:	e017      	b.n	80110b0 <eMBTCPInit+0x68>
    }
    else
    {
        pvMBFrameStartCur = eMBTCPStart;
 8011080:	4b0f      	ldr	r3, [pc, #60]	@ (80110c0 <eMBTCPInit+0x78>)
 8011082:	4a10      	ldr	r2, [pc, #64]	@ (80110c4 <eMBTCPInit+0x7c>)
 8011084:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8011086:	4b10      	ldr	r3, [pc, #64]	@ (80110c8 <eMBTCPInit+0x80>)
 8011088:	4a10      	ldr	r2, [pc, #64]	@ (80110cc <eMBTCPInit+0x84>)
 801108a:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 801108c:	4b10      	ldr	r3, [pc, #64]	@ (80110d0 <eMBTCPInit+0x88>)
 801108e:	4a11      	ldr	r2, [pc, #68]	@ (80110d4 <eMBTCPInit+0x8c>)
 8011090:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8011092:	4b11      	ldr	r3, [pc, #68]	@ (80110d8 <eMBTCPInit+0x90>)
 8011094:	4a11      	ldr	r2, [pc, #68]	@ (80110dc <eMBTCPInit+0x94>)
 8011096:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 8011098:	4b11      	ldr	r3, [pc, #68]	@ (80110e0 <eMBTCPInit+0x98>)
 801109a:	2200      	movs	r2, #0
 801109c:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 801109e:	4b11      	ldr	r3, [pc, #68]	@ (80110e4 <eMBTCPInit+0x9c>)
 80110a0:	22ff      	movs	r2, #255	@ 0xff
 80110a2:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 80110a4:	4b10      	ldr	r3, [pc, #64]	@ (80110e8 <eMBTCPInit+0xa0>)
 80110a6:	2202      	movs	r2, #2
 80110a8:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 80110aa:	4b04      	ldr	r3, [pc, #16]	@ (80110bc <eMBTCPInit+0x74>)
 80110ac:	2201      	movs	r2, #1
 80110ae:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80110b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3710      	adds	r7, #16
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
 80110ba:	bf00      	nop
 80110bc:	2000002a 	.word	0x2000002a
 80110c0:	200085f4 	.word	0x200085f4
 80110c4:	08011e33 	.word	0x08011e33
 80110c8:	200085f8 	.word	0x200085f8
 80110cc:	08011e41 	.word	0x08011e41
 80110d0:	200085fc 	.word	0x200085fc
 80110d4:	08011e4d 	.word	0x08011e4d
 80110d8:	200085f0 	.word	0x200085f0
 80110dc:	08011ebd 	.word	0x08011ebd
 80110e0:	20008600 	.word	0x20008600
 80110e4:	200085ee 	.word	0x200085ee
 80110e8:	200085ef 	.word	0x200085ef

080110ec <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80110f2:	2300      	movs	r3, #0
 80110f4:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 80110f6:	4b09      	ldr	r3, [pc, #36]	@ (801111c <eMBEnable+0x30>)
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d106      	bne.n	801110c <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80110fe:	4b08      	ldr	r3, [pc, #32]	@ (8011120 <eMBEnable+0x34>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8011104:	4b05      	ldr	r3, [pc, #20]	@ (801111c <eMBEnable+0x30>)
 8011106:	2200      	movs	r2, #0
 8011108:	701a      	strb	r2, [r3, #0]
 801110a:	e001      	b.n	8011110 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 801110c:	2306      	movs	r3, #6
 801110e:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8011110:	79fb      	ldrb	r3, [r7, #7]
}
 8011112:	4618      	mov	r0, r3
 8011114:	3708      	adds	r7, #8
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	2000002a 	.word	0x2000002a
 8011120:	200085f4 	.word	0x200085f4

08011124 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8011124:	b590      	push	{r4, r7, lr}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 801112a:	2300      	movs	r3, #0
 801112c:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 801112e:	4b50      	ldr	r3, [pc, #320]	@ (8011270 <eMBPoll+0x14c>)
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d001      	beq.n	801113a <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8011136:	2306      	movs	r3, #6
 8011138:	e095      	b.n	8011266 <eMBPoll+0x142>

    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 801113a:	1cbb      	adds	r3, r7, #2
 801113c:	4618      	mov	r0, r3
 801113e:	f000 fbc1 	bl	80118c4 <xMBPortEventGet>
 8011142:	4603      	mov	r3, r0
 8011144:	2b01      	cmp	r3, #1
 8011146:	f040 808d 	bne.w	8011264 <eMBPoll+0x140>
    {
        switch ( eEvent )
 801114a:	78bb      	ldrb	r3, [r7, #2]
 801114c:	2b03      	cmp	r3, #3
 801114e:	f200 8089 	bhi.w	8011264 <eMBPoll+0x140>
 8011152:	a201      	add	r2, pc, #4	@ (adr r2, 8011158 <eMBPoll+0x34>)
 8011154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011158:	08011265 	.word	0x08011265
 801115c:	08011169 	.word	0x08011169
 8011160:	0801119b 	.word	0x0801119b
 8011164:	08011265 	.word	0x08011265
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8011168:	4b42      	ldr	r3, [pc, #264]	@ (8011274 <eMBPoll+0x150>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4a42      	ldr	r2, [pc, #264]	@ (8011278 <eMBPoll+0x154>)
 801116e:	4943      	ldr	r1, [pc, #268]	@ (801127c <eMBPoll+0x158>)
 8011170:	4843      	ldr	r0, [pc, #268]	@ (8011280 <eMBPoll+0x15c>)
 8011172:	4798      	blx	r3
 8011174:	4603      	mov	r3, r0
 8011176:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8011178:	78fb      	ldrb	r3, [r7, #3]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d16f      	bne.n	801125e <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 801117e:	4b40      	ldr	r3, [pc, #256]	@ (8011280 <eMBPoll+0x15c>)
 8011180:	781a      	ldrb	r2, [r3, #0]
 8011182:	4b40      	ldr	r3, [pc, #256]	@ (8011284 <eMBPoll+0x160>)
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	429a      	cmp	r2, r3
 8011188:	d003      	beq.n	8011192 <eMBPoll+0x6e>
 801118a:	4b3d      	ldr	r3, [pc, #244]	@ (8011280 <eMBPoll+0x15c>)
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d165      	bne.n	801125e <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8011192:	2002      	movs	r0, #2
 8011194:	f000 fb64 	bl	8011860 <xMBPortEventPost>
                }
            }
            break;
 8011198:	e061      	b.n	801125e <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 801119a:	4b38      	ldr	r3, [pc, #224]	@ (801127c <eMBPoll+0x158>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	781a      	ldrb	r2, [r3, #0]
 80111a0:	4b39      	ldr	r3, [pc, #228]	@ (8011288 <eMBPoll+0x164>)
 80111a2:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80111a4:	4b39      	ldr	r3, [pc, #228]	@ (801128c <eMBPoll+0x168>)
 80111a6:	2201      	movs	r2, #1
 80111a8:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80111aa:	2300      	movs	r3, #0
 80111ac:	607b      	str	r3, [r7, #4]
 80111ae:	e01f      	b.n	80111f0 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80111b0:	4a37      	ldr	r2, [pc, #220]	@ (8011290 <eMBPoll+0x16c>)
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d01d      	beq.n	80111f8 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80111bc:	4a34      	ldr	r2, [pc, #208]	@ (8011290 <eMBPoll+0x16c>)
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80111c4:	4b30      	ldr	r3, [pc, #192]	@ (8011288 <eMBPoll+0x164>)
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d10e      	bne.n	80111ea <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80111cc:	4a30      	ldr	r2, [pc, #192]	@ (8011290 <eMBPoll+0x16c>)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	00db      	lsls	r3, r3, #3
 80111d2:	4413      	add	r3, r2
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	4a29      	ldr	r2, [pc, #164]	@ (801127c <eMBPoll+0x158>)
 80111d8:	6812      	ldr	r2, [r2, #0]
 80111da:	4927      	ldr	r1, [pc, #156]	@ (8011278 <eMBPoll+0x154>)
 80111dc:	4610      	mov	r0, r2
 80111de:	4798      	blx	r3
 80111e0:	4603      	mov	r3, r0
 80111e2:	461a      	mov	r2, r3
 80111e4:	4b29      	ldr	r3, [pc, #164]	@ (801128c <eMBPoll+0x168>)
 80111e6:	701a      	strb	r2, [r3, #0]
                    break;
 80111e8:	e007      	b.n	80111fa <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	3301      	adds	r3, #1
 80111ee:	607b      	str	r3, [r7, #4]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2b0f      	cmp	r3, #15
 80111f4:	dddc      	ble.n	80111b0 <eMBPoll+0x8c>
 80111f6:	e000      	b.n	80111fa <eMBPoll+0xd6>
                    break;
 80111f8:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80111fa:	4b21      	ldr	r3, [pc, #132]	@ (8011280 <eMBPoll+0x15c>)
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d02f      	beq.n	8011262 <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 8011202:	4b22      	ldr	r3, [pc, #136]	@ (801128c <eMBPoll+0x168>)
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d01d      	beq.n	8011246 <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 801120a:	4b1b      	ldr	r3, [pc, #108]	@ (8011278 <eMBPoll+0x154>)
 801120c:	2200      	movs	r2, #0
 801120e:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8011210:	4b1d      	ldr	r3, [pc, #116]	@ (8011288 <eMBPoll+0x164>)
 8011212:	781a      	ldrb	r2, [r3, #0]
 8011214:	4b19      	ldr	r3, [pc, #100]	@ (801127c <eMBPoll+0x158>)
 8011216:	6819      	ldr	r1, [r3, #0]
 8011218:	4b17      	ldr	r3, [pc, #92]	@ (8011278 <eMBPoll+0x154>)
 801121a:	881b      	ldrh	r3, [r3, #0]
 801121c:	1c58      	adds	r0, r3, #1
 801121e:	b284      	uxth	r4, r0
 8011220:	4815      	ldr	r0, [pc, #84]	@ (8011278 <eMBPoll+0x154>)
 8011222:	8004      	strh	r4, [r0, #0]
 8011224:	440b      	add	r3, r1
 8011226:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801122a:	b2d2      	uxtb	r2, r2
 801122c:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 801122e:	4b13      	ldr	r3, [pc, #76]	@ (801127c <eMBPoll+0x158>)
 8011230:	681a      	ldr	r2, [r3, #0]
 8011232:	4b11      	ldr	r3, [pc, #68]	@ (8011278 <eMBPoll+0x154>)
 8011234:	881b      	ldrh	r3, [r3, #0]
 8011236:	1c59      	adds	r1, r3, #1
 8011238:	b288      	uxth	r0, r1
 801123a:	490f      	ldr	r1, [pc, #60]	@ (8011278 <eMBPoll+0x154>)
 801123c:	8008      	strh	r0, [r1, #0]
 801123e:	4413      	add	r3, r2
 8011240:	4a12      	ldr	r2, [pc, #72]	@ (801128c <eMBPoll+0x168>)
 8011242:	7812      	ldrb	r2, [r2, #0]
 8011244:	701a      	strb	r2, [r3, #0]
                if ( ( eMBCurrentMode == MB_RTU ) && MB_RTU_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_RTU_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }
#endif
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8011246:	4b13      	ldr	r3, [pc, #76]	@ (8011294 <eMBPoll+0x170>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4a0e      	ldr	r2, [pc, #56]	@ (8011284 <eMBPoll+0x160>)
 801124c:	7810      	ldrb	r0, [r2, #0]
 801124e:	4a0b      	ldr	r2, [pc, #44]	@ (801127c <eMBPoll+0x158>)
 8011250:	6811      	ldr	r1, [r2, #0]
 8011252:	4a09      	ldr	r2, [pc, #36]	@ (8011278 <eMBPoll+0x154>)
 8011254:	8812      	ldrh	r2, [r2, #0]
 8011256:	4798      	blx	r3
 8011258:	4603      	mov	r3, r0
 801125a:	70fb      	strb	r3, [r7, #3]
            }
            break;
 801125c:	e001      	b.n	8011262 <eMBPoll+0x13e>
            break;
 801125e:	bf00      	nop
 8011260:	e000      	b.n	8011264 <eMBPoll+0x140>
            break;
 8011262:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return eStatus;
 8011264:	78fb      	ldrb	r3, [r7, #3]
}
 8011266:	4618      	mov	r0, r3
 8011268:	370c      	adds	r7, #12
 801126a:	46bd      	mov	sp, r7
 801126c:	bd90      	pop	{r4, r7, pc}
 801126e:	bf00      	nop
 8011270:	2000002a 	.word	0x2000002a
 8011274:	200085fc 	.word	0x200085fc
 8011278:	2000860c 	.word	0x2000860c
 801127c:	20008608 	.word	0x20008608
 8011280:	20008604 	.word	0x20008604
 8011284:	200085ee 	.word	0x200085ee
 8011288:	2000860e 	.word	0x2000860e
 801128c:	2000860f 	.word	0x2000860f
 8011290:	2000002c 	.word	0x2000002c
 8011294:	200085f0 	.word	0x200085f0

08011298 <Modbus_UpdateCounter>:
static UCHAR  ucCoils[REG_COIL_NCOILS];
static USHORT usInputRegs[REG_INPUT_NREGS];
static UCHAR  ucDiscreteInputs[REG_DISC_NDISCRETES];

/* ---- Helpers ---- */
static void Modbus_UpdateCounter(void) {
 8011298:	b480      	push	{r7}
 801129a:	af00      	add	r7, sp, #0
    usHoldingRegs[0]++;
 801129c:	4b05      	ldr	r3, [pc, #20]	@ (80112b4 <Modbus_UpdateCounter+0x1c>)
 801129e:	881b      	ldrh	r3, [r3, #0]
 80112a0:	3301      	adds	r3, #1
 80112a2:	b29a      	uxth	r2, r3
 80112a4:	4b03      	ldr	r3, [pc, #12]	@ (80112b4 <Modbus_UpdateCounter+0x1c>)
 80112a6:	801a      	strh	r2, [r3, #0]
}
 80112a8:	bf00      	nop
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr
 80112b2:	bf00      	nop
 80112b4:	20008610 	.word	0x20008610

080112b8 <apply_led_from_coil>:

static void apply_led_from_coil(USHORT coilIndex, UCHAR val) {
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b084      	sub	sp, #16
 80112bc:	af00      	add	r7, sp, #0
 80112be:	4603      	mov	r3, r0
 80112c0:	460a      	mov	r2, r1
 80112c2:	80fb      	strh	r3, [r7, #6]
 80112c4:	4613      	mov	r3, r2
 80112c6:	717b      	strb	r3, [r7, #5]
    if (coilIndex < 4) {
 80112c8:	88fb      	ldrh	r3, [r7, #6]
 80112ca:	2b03      	cmp	r3, #3
 80112cc:	d834      	bhi.n	8011338 <apply_led_from_coil+0x80>
        /* Local bridge LEDs */
        GPIO_PinState state = (val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80112ce:	797b      	ldrb	r3, [r7, #5]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	bf14      	ite	ne
 80112d4:	2301      	movne	r3, #1
 80112d6:	2300      	moveq	r3, #0
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	73fb      	strb	r3, [r7, #15]
        switch (coilIndex) {
 80112dc:	88fb      	ldrh	r3, [r7, #6]
 80112de:	2b03      	cmp	r3, #3
 80112e0:	d837      	bhi.n	8011352 <apply_led_from_coil+0x9a>
 80112e2:	a201      	add	r2, pc, #4	@ (adr r2, 80112e8 <apply_led_from_coil+0x30>)
 80112e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112e8:	080112f9 	.word	0x080112f9
 80112ec:	08011309 	.word	0x08011309
 80112f0:	08011319 	.word	0x08011319
 80112f4:	08011329 	.word	0x08011329
            case 0: HAL_GPIO_WritePin(LED_PORT, LED_GREEN_PIN, state); break;
 80112f8:	7bfb      	ldrb	r3, [r7, #15]
 80112fa:	461a      	mov	r2, r3
 80112fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011300:	4816      	ldr	r0, [pc, #88]	@ (801135c <apply_led_from_coil+0xa4>)
 8011302:	f7f2 fb57 	bl	80039b4 <HAL_GPIO_WritePin>
 8011306:	e024      	b.n	8011352 <apply_led_from_coil+0x9a>
            case 1: HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, state); break;
 8011308:	7bfb      	ldrb	r3, [r7, #15]
 801130a:	461a      	mov	r2, r3
 801130c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011310:	4812      	ldr	r0, [pc, #72]	@ (801135c <apply_led_from_coil+0xa4>)
 8011312:	f7f2 fb4f 	bl	80039b4 <HAL_GPIO_WritePin>
 8011316:	e01c      	b.n	8011352 <apply_led_from_coil+0x9a>
            case 2: HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, state); break;
 8011318:	7bfb      	ldrb	r3, [r7, #15]
 801131a:	461a      	mov	r2, r3
 801131c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8011320:	480e      	ldr	r0, [pc, #56]	@ (801135c <apply_led_from_coil+0xa4>)
 8011322:	f7f2 fb47 	bl	80039b4 <HAL_GPIO_WritePin>
 8011326:	e014      	b.n	8011352 <apply_led_from_coil+0x9a>
            case 3: HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, state); break;
 8011328:	7bfb      	ldrb	r3, [r7, #15]
 801132a:	461a      	mov	r2, r3
 801132c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011330:	480a      	ldr	r0, [pc, #40]	@ (801135c <apply_led_from_coil+0xa4>)
 8011332:	f7f2 fb3f 	bl	80039b4 <HAL_GPIO_WritePin>
 8011336:	e00c      	b.n	8011352 <apply_led_from_coil+0x9a>
        }
    }
    else if (coilIndex >= 4 && coilIndex < 8) {
 8011338:	88fb      	ldrh	r3, [r7, #6]
 801133a:	2b03      	cmp	r3, #3
 801133c:	d909      	bls.n	8011352 <apply_led_from_coil+0x9a>
 801133e:	88fb      	ldrh	r3, [r7, #6]
 8011340:	2b07      	cmp	r3, #7
 8011342:	d806      	bhi.n	8011352 <apply_led_from_coil+0x9a>
        /* Forward SPI LED control */
        SPI_HandleModbusCoilWrite(coilIndex, val);
 8011344:	797a      	ldrb	r2, [r7, #5]
 8011346:	88fb      	ldrh	r3, [r7, #6]
 8011348:	4611      	mov	r1, r2
 801134a:	4618      	mov	r0, r3
 801134c:	f7ef fd62 	bl	8000e14 <SPI_HandleModbusCoilWrite>
    }
}
 8011350:	e7ff      	b.n	8011352 <apply_led_from_coil+0x9a>
 8011352:	bf00      	nop
 8011354:	3710      	adds	r7, #16
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
 801135a:	bf00      	nop
 801135c:	40020c00 	.word	0x40020c00

08011360 <Modbus_InitCallbacks>:

void Modbus_InitCallbacks(void) {
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
    memset(usHoldingRegs, 0, sizeof(usHoldingRegs));
 8011366:	2204      	movs	r2, #4
 8011368:	2100      	movs	r1, #0
 801136a:	481a      	ldr	r0, [pc, #104]	@ (80113d4 <Modbus_InitCallbacks+0x74>)
 801136c:	f000 ffb9 	bl	80122e2 <memset>
    memset(ucCoils, 0, sizeof(ucCoils));
 8011370:	2208      	movs	r2, #8
 8011372:	2100      	movs	r1, #0
 8011374:	4818      	ldr	r0, [pc, #96]	@ (80113d8 <Modbus_InitCallbacks+0x78>)
 8011376:	f000 ffb4 	bl	80122e2 <memset>
    memset(usInputRegs, 0, sizeof(usInputRegs));
 801137a:	2204      	movs	r2, #4
 801137c:	2100      	movs	r1, #0
 801137e:	4817      	ldr	r0, [pc, #92]	@ (80113dc <Modbus_InitCallbacks+0x7c>)
 8011380:	f000 ffaf 	bl	80122e2 <memset>
    memset(ucDiscreteInputs, 0, sizeof(ucDiscreteInputs));
 8011384:	2204      	movs	r2, #4
 8011386:	2100      	movs	r1, #0
 8011388:	4815      	ldr	r0, [pc, #84]	@ (80113e0 <Modbus_InitCallbacks+0x80>)
 801138a:	f000 ffaa 	bl	80122e2 <memset>

    /* Init local LEDs OFF */
    for (USHORT i = 0; i < 4; i++) {
 801138e:	2300      	movs	r3, #0
 8011390:	80fb      	strh	r3, [r7, #6]
 8011392:	e007      	b.n	80113a4 <Modbus_InitCallbacks+0x44>
        apply_led_from_coil(i, 0);
 8011394:	88fb      	ldrh	r3, [r7, #6]
 8011396:	2100      	movs	r1, #0
 8011398:	4618      	mov	r0, r3
 801139a:	f7ff ff8d 	bl	80112b8 <apply_led_from_coil>
    for (USHORT i = 0; i < 4; i++) {
 801139e:	88fb      	ldrh	r3, [r7, #6]
 80113a0:	3301      	adds	r3, #1
 80113a2:	80fb      	strh	r3, [r7, #6]
 80113a4:	88fb      	ldrh	r3, [r7, #6]
 80113a6:	2b03      	cmp	r3, #3
 80113a8:	d9f4      	bls.n	8011394 <Modbus_InitCallbacks+0x34>
    }

    /* Init SPI */
    SPI_Protocol_Init();
 80113aa:	f7ef fc71 	bl	8000c90 <SPI_Protocol_Init>

    /* Init SPI LEDs OFF */
    for (USHORT i = 4; i < 8; i++) {
 80113ae:	2304      	movs	r3, #4
 80113b0:	80bb      	strh	r3, [r7, #4]
 80113b2:	e007      	b.n	80113c4 <Modbus_InitCallbacks+0x64>
        apply_led_from_coil(i, 0);
 80113b4:	88bb      	ldrh	r3, [r7, #4]
 80113b6:	2100      	movs	r1, #0
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7ff ff7d 	bl	80112b8 <apply_led_from_coil>
    for (USHORT i = 4; i < 8; i++) {
 80113be:	88bb      	ldrh	r3, [r7, #4]
 80113c0:	3301      	adds	r3, #1
 80113c2:	80bb      	strh	r3, [r7, #4]
 80113c4:	88bb      	ldrh	r3, [r7, #4]
 80113c6:	2b07      	cmp	r3, #7
 80113c8:	d9f4      	bls.n	80113b4 <Modbus_InitCallbacks+0x54>
    }
}
 80113ca:	bf00      	nop
 80113cc:	bf00      	nop
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}
 80113d4:	20008610 	.word	0x20008610
 80113d8:	20008614 	.word	0x20008614
 80113dc:	2000861c 	.word	0x2000861c
 80113e0:	20008620 	.word	0x20008620

080113e4 <eMBRegHoldingCB>:

/* ----------------------------------------------------------------
 * Holding registers callback
 * ----------------------------------------------------------------*/
eMBErrorCode eMBRegHoldingCB(UCHAR *pucBuffer, USHORT usAddress,
                             USHORT usNRegs, eMBRegisterMode eMode) {
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b08a      	sub	sp, #40	@ 0x28
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	4608      	mov	r0, r1
 80113ee:	4611      	mov	r1, r2
 80113f0:	461a      	mov	r2, r3
 80113f2:	4603      	mov	r3, r0
 80113f4:	817b      	strh	r3, [r7, #10]
 80113f6:	460b      	mov	r3, r1
 80113f8:	813b      	strh	r3, [r7, #8]
 80113fa:	4613      	mov	r3, r2
 80113fc:	71fb      	strb	r3, [r7, #7]
    if ((usAddress < REG_HOLDING_START) ||
 80113fe:	897b      	ldrh	r3, [r7, #10]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d004      	beq.n	801140e <eMBRegHoldingCB+0x2a>
        (usAddress + usNRegs - 1) > (REG_HOLDING_START + REG_HOLDING_NREGS - 1)) {
 8011404:	897a      	ldrh	r2, [r7, #10]
 8011406:	893b      	ldrh	r3, [r7, #8]
 8011408:	4413      	add	r3, r2
    if ((usAddress < REG_HOLDING_START) ||
 801140a:	2b03      	cmp	r3, #3
 801140c:	dd01      	ble.n	8011412 <eMBRegHoldingCB+0x2e>
        return MB_ENOREG;
 801140e:	2301      	movs	r3, #1
 8011410:	e084      	b.n	801151c <eMBRegHoldingCB+0x138>
    }

    USHORT iRegIndex = (USHORT)(usAddress - REG_HOLDING_START);
 8011412:	897b      	ldrh	r3, [r7, #10]
 8011414:	3b01      	subs	r3, #1
 8011416:	83fb      	strh	r3, [r7, #30]

    if (eMode == MB_REG_READ) {
 8011418:	79fb      	ldrb	r3, [r7, #7]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d126      	bne.n	801146c <eMBRegHoldingCB+0x88>
        for (USHORT i = 0; i < usNRegs; i++) {
 801141e:	2300      	movs	r3, #0
 8011420:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011422:	e01e      	b.n	8011462 <eMBRegHoldingCB+0x7e>
            USHORT val = usHoldingRegs[iRegIndex + i];
 8011424:	8bfa      	ldrh	r2, [r7, #30]
 8011426:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011428:	4413      	add	r3, r2
 801142a:	4a3e      	ldr	r2, [pc, #248]	@ (8011524 <eMBRegHoldingCB+0x140>)
 801142c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011430:	82fb      	strh	r3, [r7, #22]

            if ((iRegIndex + i) == 0) {
 8011432:	8bfa      	ldrh	r2, [r7, #30]
 8011434:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011436:	4413      	add	r3, r2
 8011438:	2b00      	cmp	r3, #0
 801143a:	d101      	bne.n	8011440 <eMBRegHoldingCB+0x5c>
                Modbus_UpdateCounter(); // auto increment counter
 801143c:	f7ff ff2c 	bl	8011298 <Modbus_UpdateCounter>
            }

            *pucBuffer++ = (UCHAR)(val >> 8);
 8011440:	8afb      	ldrh	r3, [r7, #22]
 8011442:	0a1b      	lsrs	r3, r3, #8
 8011444:	b299      	uxth	r1, r3
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	1c5a      	adds	r2, r3, #1
 801144a:	60fa      	str	r2, [r7, #12]
 801144c:	b2ca      	uxtb	r2, r1
 801144e:	701a      	strb	r2, [r3, #0]
            *pucBuffer++ = (UCHAR)(val & 0xFF);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	1c5a      	adds	r2, r3, #1
 8011454:	60fa      	str	r2, [r7, #12]
 8011456:	8afa      	ldrh	r2, [r7, #22]
 8011458:	b2d2      	uxtb	r2, r2
 801145a:	701a      	strb	r2, [r3, #0]
        for (USHORT i = 0; i < usNRegs; i++) {
 801145c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801145e:	3301      	adds	r3, #1
 8011460:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011462:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011464:	893b      	ldrh	r3, [r7, #8]
 8011466:	429a      	cmp	r2, r3
 8011468:	d3dc      	bcc.n	8011424 <eMBRegHoldingCB+0x40>
 801146a:	e056      	b.n	801151a <eMBRegHoldingCB+0x136>
        }
    }
    else if (eMode == MB_REG_WRITE) {
 801146c:	79fb      	ldrb	r3, [r7, #7]
 801146e:	2b01      	cmp	r3, #1
 8011470:	d151      	bne.n	8011516 <eMBRegHoldingCB+0x132>
        for (USHORT i = 0; i < usNRegs; i++) {
 8011472:	2300      	movs	r3, #0
 8011474:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011476:	e049      	b.n	801150c <eMBRegHoldingCB+0x128>
            USHORT hi = (USHORT)(*pucBuffer++);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	1c5a      	adds	r2, r3, #1
 801147c:	60fa      	str	r2, [r7, #12]
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	83bb      	strh	r3, [r7, #28]
            USHORT lo = (USHORT)(*pucBuffer++);
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	1c5a      	adds	r2, r3, #1
 8011486:	60fa      	str	r2, [r7, #12]
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	837b      	strh	r3, [r7, #26]
            USHORT val = (USHORT)((hi << 8) | lo);
 801148c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011490:	021b      	lsls	r3, r3, #8
 8011492:	b21a      	sxth	r2, r3
 8011494:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011498:	4313      	orrs	r3, r2
 801149a:	b21b      	sxth	r3, r3
 801149c:	833b      	strh	r3, [r7, #24]

            usHoldingRegs[iRegIndex + i] = val;
 801149e:	8bfa      	ldrh	r2, [r7, #30]
 80114a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80114a2:	4413      	add	r3, r2
 80114a4:	491f      	ldr	r1, [pc, #124]	@ (8011524 <eMBRegHoldingCB+0x140>)
 80114a6:	8b3a      	ldrh	r2, [r7, #24]
 80114a8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

            /* Special commands in register 1 */
            if ((iRegIndex + i) == 1) {
 80114ac:	8bfa      	ldrh	r2, [r7, #30]
 80114ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80114b0:	4413      	add	r3, r2
 80114b2:	2b01      	cmp	r3, #1
 80114b4:	d127      	bne.n	8011506 <eMBRegHoldingCB+0x122>
                if (val == CMD_SPI_ALL_OFF) {
 80114b6:	8b3b      	ldrh	r3, [r7, #24]
 80114b8:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 80114bc:	d10f      	bne.n	80114de <eMBRegHoldingCB+0xfa>
                    SPI_TurnOffAllLEDs();
 80114be:	f7ef fce3 	bl	8000e88 <SPI_TurnOffAllLEDs>
                    for (USHORT j = 4; j < 8; j++) ucCoils[j] = 0;
 80114c2:	2304      	movs	r3, #4
 80114c4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80114c6:	e006      	b.n	80114d6 <eMBRegHoldingCB+0xf2>
 80114c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114ca:	4a17      	ldr	r2, [pc, #92]	@ (8011528 <eMBRegHoldingCB+0x144>)
 80114cc:	2100      	movs	r1, #0
 80114ce:	54d1      	strb	r1, [r2, r3]
 80114d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114d2:	3301      	adds	r3, #1
 80114d4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80114d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114d8:	2b07      	cmp	r3, #7
 80114da:	d9f5      	bls.n	80114c8 <eMBRegHoldingCB+0xe4>
 80114dc:	e013      	b.n	8011506 <eMBRegHoldingCB+0x122>
                }
                else if (val == CMD_SPI_ALL_ON) {
 80114de:	8b3b      	ldrh	r3, [r7, #24]
 80114e0:	f64a 2201 	movw	r2, #43521	@ 0xaa01
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d10e      	bne.n	8011506 <eMBRegHoldingCB+0x122>
                    SPI_TurnOnAllLEDs();
 80114e8:	f7ef fcd6 	bl	8000e98 <SPI_TurnOnAllLEDs>
                    for (USHORT j = 4; j < 8; j++) ucCoils[j] = 1;
 80114ec:	2304      	movs	r3, #4
 80114ee:	843b      	strh	r3, [r7, #32]
 80114f0:	e006      	b.n	8011500 <eMBRegHoldingCB+0x11c>
 80114f2:	8c3b      	ldrh	r3, [r7, #32]
 80114f4:	4a0c      	ldr	r2, [pc, #48]	@ (8011528 <eMBRegHoldingCB+0x144>)
 80114f6:	2101      	movs	r1, #1
 80114f8:	54d1      	strb	r1, [r2, r3]
 80114fa:	8c3b      	ldrh	r3, [r7, #32]
 80114fc:	3301      	adds	r3, #1
 80114fe:	843b      	strh	r3, [r7, #32]
 8011500:	8c3b      	ldrh	r3, [r7, #32]
 8011502:	2b07      	cmp	r3, #7
 8011504:	d9f5      	bls.n	80114f2 <eMBRegHoldingCB+0x10e>
        for (USHORT i = 0; i < usNRegs; i++) {
 8011506:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011508:	3301      	adds	r3, #1
 801150a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801150c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801150e:	893b      	ldrh	r3, [r7, #8]
 8011510:	429a      	cmp	r2, r3
 8011512:	d3b1      	bcc.n	8011478 <eMBRegHoldingCB+0x94>
 8011514:	e001      	b.n	801151a <eMBRegHoldingCB+0x136>
                }
            }
        }
    }
    else {
        return MB_ENOREG;
 8011516:	2301      	movs	r3, #1
 8011518:	e000      	b.n	801151c <eMBRegHoldingCB+0x138>
    }

    return MB_ENOERR;
 801151a:	2300      	movs	r3, #0
}
 801151c:	4618      	mov	r0, r3
 801151e:	3728      	adds	r7, #40	@ 0x28
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	20008610 	.word	0x20008610
 8011528:	20008614 	.word	0x20008614

0801152c <eMBRegCoilsCB>:

/* ----------------------------------------------------------------
 * Coils callback (8 coils: 0-3 local, 4-7 SPI)
 * ----------------------------------------------------------------*/
eMBErrorCode eMBRegCoilsCB(UCHAR *pucBuffer, USHORT usAddress,
                           USHORT usNCoils, eMBRegisterMode eMode) {
 801152c:	b580      	push	{r7, lr}
 801152e:	b08c      	sub	sp, #48	@ 0x30
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	4608      	mov	r0, r1
 8011536:	4611      	mov	r1, r2
 8011538:	461a      	mov	r2, r3
 801153a:	4603      	mov	r3, r0
 801153c:	817b      	strh	r3, [r7, #10]
 801153e:	460b      	mov	r3, r1
 8011540:	813b      	strh	r3, [r7, #8]
 8011542:	4613      	mov	r3, r2
 8011544:	71fb      	strb	r3, [r7, #7]
    if ((usAddress < REG_COIL_START) ||
 8011546:	897b      	ldrh	r3, [r7, #10]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d004      	beq.n	8011556 <eMBRegCoilsCB+0x2a>
        (usAddress + usNCoils - 1) > (REG_COIL_START + REG_COIL_NCOILS - 1)) {
 801154c:	897a      	ldrh	r2, [r7, #10]
 801154e:	893b      	ldrh	r3, [r7, #8]
 8011550:	4413      	add	r3, r2
    if ((usAddress < REG_COIL_START) ||
 8011552:	2b09      	cmp	r3, #9
 8011554:	dd01      	ble.n	801155a <eMBRegCoilsCB+0x2e>
        return MB_ENOREG;
 8011556:	2301      	movs	r3, #1
 8011558:	e0b8      	b.n	80116cc <eMBRegCoilsCB+0x1a0>
    }

    USHORT iCoilIndex = (USHORT)(usAddress - REG_COIL_START);
 801155a:	897b      	ldrh	r3, [r7, #10]
 801155c:	3b01      	subs	r3, #1
 801155e:	83fb      	strh	r3, [r7, #30]

    if (eMode == MB_REG_READ) {
 8011560:	79fb      	ldrb	r3, [r7, #7]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d166      	bne.n	8011634 <eMBRegCoilsCB+0x108>
        /* Refresh SPI coil states */
        if (iCoilIndex < 8 && (iCoilIndex + usNCoils) > 4) {
 8011566:	8bfb      	ldrh	r3, [r7, #30]
 8011568:	2b07      	cmp	r3, #7
 801156a:	d81d      	bhi.n	80115a8 <eMBRegCoilsCB+0x7c>
 801156c:	8bfa      	ldrh	r2, [r7, #30]
 801156e:	893b      	ldrh	r3, [r7, #8]
 8011570:	4413      	add	r3, r2
 8011572:	2b04      	cmp	r3, #4
 8011574:	dd18      	ble.n	80115a8 <eMBRegCoilsCB+0x7c>
            uint8_t g, o, r, b;
            if (SPI_GetLEDStatus(&g, &o, &r, &b) == SPI_RESULT_OK) {
 8011576:	f107 0311 	add.w	r3, r7, #17
 801157a:	f107 0212 	add.w	r2, r7, #18
 801157e:	f107 0113 	add.w	r1, r7, #19
 8011582:	f107 0014 	add.w	r0, r7, #20
 8011586:	f7ef fbef 	bl	8000d68 <SPI_GetLEDStatus>
 801158a:	4603      	mov	r3, r0
 801158c:	2b00      	cmp	r3, #0
 801158e:	d10b      	bne.n	80115a8 <eMBRegCoilsCB+0x7c>
                ucCoils[4] = g;
 8011590:	7d3a      	ldrb	r2, [r7, #20]
 8011592:	4b50      	ldr	r3, [pc, #320]	@ (80116d4 <eMBRegCoilsCB+0x1a8>)
 8011594:	711a      	strb	r2, [r3, #4]
                ucCoils[5] = o;
 8011596:	7cfa      	ldrb	r2, [r7, #19]
 8011598:	4b4e      	ldr	r3, [pc, #312]	@ (80116d4 <eMBRegCoilsCB+0x1a8>)
 801159a:	715a      	strb	r2, [r3, #5]
                ucCoils[6] = r;
 801159c:	7cba      	ldrb	r2, [r7, #18]
 801159e:	4b4d      	ldr	r3, [pc, #308]	@ (80116d4 <eMBRegCoilsCB+0x1a8>)
 80115a0:	719a      	strb	r2, [r3, #6]
                ucCoils[7] = b;
 80115a2:	7c7a      	ldrb	r2, [r7, #17]
 80115a4:	4b4b      	ldr	r3, [pc, #300]	@ (80116d4 <eMBRegCoilsCB+0x1a8>)
 80115a6:	71da      	strb	r2, [r3, #7]
            }
        }

        /* Pack bits into buffer */
        UCHAR currentByte = 0;
 80115a8:	2300      	movs	r3, #0
 80115aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        UCHAR bitPos = 0;
 80115ae:	2300      	movs	r3, #0
 80115b0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        UCHAR *pOut = pucBuffer;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	62bb      	str	r3, [r7, #40]	@ 0x28

        for (USHORT i = 0; i < usNCoils; i++) {
 80115b8:	2300      	movs	r3, #0
 80115ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80115bc:	e02b      	b.n	8011616 <eMBRegCoilsCB+0xea>
            UCHAR val = (ucCoils[iCoilIndex + i] & 0x01) ? 1 : 0;
 80115be:	8bfa      	ldrh	r2, [r7, #30]
 80115c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80115c2:	4413      	add	r3, r2
 80115c4:	4a43      	ldr	r2, [pc, #268]	@ (80116d4 <eMBRegCoilsCB+0x1a8>)
 80115c6:	5cd3      	ldrb	r3, [r2, r3]
 80115c8:	f003 0301 	and.w	r3, r3, #1
 80115cc:	757b      	strb	r3, [r7, #21]
            currentByte |= (val << bitPos);
 80115ce:	7d7a      	ldrb	r2, [r7, #21]
 80115d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80115d4:	fa02 f303 	lsl.w	r3, r2, r3
 80115d8:	b25a      	sxtb	r2, r3
 80115da:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80115de:	4313      	orrs	r3, r2
 80115e0:	b25b      	sxtb	r3, r3
 80115e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            bitPos++;
 80115e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80115ea:	3301      	adds	r3, #1
 80115ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            if (bitPos == 8) {
 80115f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80115f4:	2b08      	cmp	r3, #8
 80115f6:	d10b      	bne.n	8011610 <eMBRegCoilsCB+0xe4>
                *pOut++ = currentByte;
 80115f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115fa:	1c5a      	adds	r2, r3, #1
 80115fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80115fe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8011602:	701a      	strb	r2, [r3, #0]
                currentByte = 0;
 8011604:	2300      	movs	r3, #0
 8011606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                bitPos = 0;
 801160a:	2300      	movs	r3, #0
 801160c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        for (USHORT i = 0; i < usNCoils; i++) {
 8011610:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011612:	3301      	adds	r3, #1
 8011614:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011616:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011618:	893b      	ldrh	r3, [r7, #8]
 801161a:	429a      	cmp	r2, r3
 801161c:	d3cf      	bcc.n	80115be <eMBRegCoilsCB+0x92>
            }
        }
        if (bitPos != 0) {
 801161e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011622:	2b00      	cmp	r3, #0
 8011624:	d051      	beq.n	80116ca <eMBRegCoilsCB+0x19e>
            *pOut++ = currentByte;
 8011626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011628:	1c5a      	adds	r2, r3, #1
 801162a:	62ba      	str	r2, [r7, #40]	@ 0x28
 801162c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8011630:	701a      	strb	r2, [r3, #0]
 8011632:	e04a      	b.n	80116ca <eMBRegCoilsCB+0x19e>
        }
    }
    else if (eMode == MB_REG_WRITE) {
 8011634:	79fb      	ldrb	r3, [r7, #7]
 8011636:	2b01      	cmp	r3, #1
 8011638:	d145      	bne.n	80116c6 <eMBRegCoilsCB+0x19a>
        /* Unpack and apply */
        UCHAR *pIn = pucBuffer;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	61bb      	str	r3, [r7, #24]
        USHORT byteIndex = 0;
 801163e:	2300      	movs	r3, #0
 8011640:	84bb      	strh	r3, [r7, #36]	@ 0x24
        UCHAR bitIndex = 0;
 8011642:	2300      	movs	r3, #0
 8011644:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        for (USHORT i = 0; i < usNCoils; i++) {
 8011648:	2300      	movs	r3, #0
 801164a:	843b      	strh	r3, [r7, #32]
 801164c:	e036      	b.n	80116bc <eMBRegCoilsCB+0x190>
            UCHAR byte = pIn[byteIndex];
 801164e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011650:	69ba      	ldr	r2, [r7, #24]
 8011652:	4413      	add	r3, r2
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	75fb      	strb	r3, [r7, #23]
            UCHAR bit = (byte >> bitIndex) & 0x01;
 8011658:	7dfa      	ldrb	r2, [r7, #23]
 801165a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801165e:	fa42 f303 	asr.w	r3, r2, r3
 8011662:	b2db      	uxtb	r3, r3
 8011664:	f003 0301 	and.w	r3, r3, #1
 8011668:	75bb      	strb	r3, [r7, #22]

            ucCoils[iCoilIndex + i] = bit ? 1 : 0;
 801166a:	7dbb      	ldrb	r3, [r7, #22]
 801166c:	2b00      	cmp	r3, #0
 801166e:	bf14      	ite	ne
 8011670:	2301      	movne	r3, #1
 8011672:	2300      	moveq	r3, #0
 8011674:	b2d9      	uxtb	r1, r3
 8011676:	8bfa      	ldrh	r2, [r7, #30]
 8011678:	8c3b      	ldrh	r3, [r7, #32]
 801167a:	4413      	add	r3, r2
 801167c:	4a15      	ldr	r2, [pc, #84]	@ (80116d4 <eMBRegCoilsCB+0x1a8>)
 801167e:	54d1      	strb	r1, [r2, r3]
            apply_led_from_coil(iCoilIndex + i, ucCoils[iCoilIndex + i]);
 8011680:	8bfa      	ldrh	r2, [r7, #30]
 8011682:	8c3b      	ldrh	r3, [r7, #32]
 8011684:	4413      	add	r3, r2
 8011686:	b298      	uxth	r0, r3
 8011688:	8bfa      	ldrh	r2, [r7, #30]
 801168a:	8c3b      	ldrh	r3, [r7, #32]
 801168c:	4413      	add	r3, r2
 801168e:	4a11      	ldr	r2, [pc, #68]	@ (80116d4 <eMBRegCoilsCB+0x1a8>)
 8011690:	5cd3      	ldrb	r3, [r2, r3]
 8011692:	4619      	mov	r1, r3
 8011694:	f7ff fe10 	bl	80112b8 <apply_led_from_coil>

            bitIndex++;
 8011698:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801169c:	3301      	adds	r3, #1
 801169e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if (bitIndex == 8) {
 80116a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80116a6:	2b08      	cmp	r3, #8
 80116a8:	d105      	bne.n	80116b6 <eMBRegCoilsCB+0x18a>
                bitIndex = 0;
 80116aa:	2300      	movs	r3, #0
 80116ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                byteIndex++;
 80116b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80116b2:	3301      	adds	r3, #1
 80116b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
        for (USHORT i = 0; i < usNCoils; i++) {
 80116b6:	8c3b      	ldrh	r3, [r7, #32]
 80116b8:	3301      	adds	r3, #1
 80116ba:	843b      	strh	r3, [r7, #32]
 80116bc:	8c3a      	ldrh	r2, [r7, #32]
 80116be:	893b      	ldrh	r3, [r7, #8]
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d3c4      	bcc.n	801164e <eMBRegCoilsCB+0x122>
 80116c4:	e001      	b.n	80116ca <eMBRegCoilsCB+0x19e>
            }
        }
    }
    else {
        return MB_ENOREG;
 80116c6:	2301      	movs	r3, #1
 80116c8:	e000      	b.n	80116cc <eMBRegCoilsCB+0x1a0>
    }

    return MB_ENOERR;
 80116ca:	2300      	movs	r3, #0
}
 80116cc:	4618      	mov	r0, r3
 80116ce:	3730      	adds	r7, #48	@ 0x30
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	20008614 	.word	0x20008614

080116d8 <eMBRegInputCB>:

/* ----------------------------------------------------------------
 * Input registers callback
 * ----------------------------------------------------------------*/
eMBErrorCode eMBRegInputCB(UCHAR *pucBuffer, USHORT usAddress, USHORT usNRegs) {
 80116d8:	b480      	push	{r7}
 80116da:	b085      	sub	sp, #20
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	460b      	mov	r3, r1
 80116e2:	807b      	strh	r3, [r7, #2]
 80116e4:	4613      	mov	r3, r2
 80116e6:	803b      	strh	r3, [r7, #0]
    if ((usAddress < REG_INPUT_START) ||
 80116e8:	887b      	ldrh	r3, [r7, #2]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d004      	beq.n	80116f8 <eMBRegInputCB+0x20>
        (usAddress + usNRegs - 1) > (REG_INPUT_START + REG_INPUT_NREGS - 1)) {
 80116ee:	887a      	ldrh	r2, [r7, #2]
 80116f0:	883b      	ldrh	r3, [r7, #0]
 80116f2:	4413      	add	r3, r2
    if ((usAddress < REG_INPUT_START) ||
 80116f4:	2b03      	cmp	r3, #3
 80116f6:	dd01      	ble.n	80116fc <eMBRegInputCB+0x24>
        return MB_ENOREG;
 80116f8:	2301      	movs	r3, #1
 80116fa:	e022      	b.n	8011742 <eMBRegInputCB+0x6a>
    }

    USHORT iRegIndex = (USHORT)(usAddress - REG_INPUT_START);
 80116fc:	887b      	ldrh	r3, [r7, #2]
 80116fe:	3b01      	subs	r3, #1
 8011700:	81bb      	strh	r3, [r7, #12]

    for (USHORT i = 0; i < usNRegs; i++) {
 8011702:	2300      	movs	r3, #0
 8011704:	81fb      	strh	r3, [r7, #14]
 8011706:	e017      	b.n	8011738 <eMBRegInputCB+0x60>
        USHORT val = usInputRegs[iRegIndex + i];
 8011708:	89ba      	ldrh	r2, [r7, #12]
 801170a:	89fb      	ldrh	r3, [r7, #14]
 801170c:	4413      	add	r3, r2
 801170e:	4a10      	ldr	r2, [pc, #64]	@ (8011750 <eMBRegInputCB+0x78>)
 8011710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011714:	817b      	strh	r3, [r7, #10]
        *pucBuffer++ = (UCHAR)(val >> 8);
 8011716:	897b      	ldrh	r3, [r7, #10]
 8011718:	0a1b      	lsrs	r3, r3, #8
 801171a:	b299      	uxth	r1, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	1c5a      	adds	r2, r3, #1
 8011720:	607a      	str	r2, [r7, #4]
 8011722:	b2ca      	uxtb	r2, r1
 8011724:	701a      	strb	r2, [r3, #0]
        *pucBuffer++ = (UCHAR)(val & 0xFF);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	1c5a      	adds	r2, r3, #1
 801172a:	607a      	str	r2, [r7, #4]
 801172c:	897a      	ldrh	r2, [r7, #10]
 801172e:	b2d2      	uxtb	r2, r2
 8011730:	701a      	strb	r2, [r3, #0]
    for (USHORT i = 0; i < usNRegs; i++) {
 8011732:	89fb      	ldrh	r3, [r7, #14]
 8011734:	3301      	adds	r3, #1
 8011736:	81fb      	strh	r3, [r7, #14]
 8011738:	89fa      	ldrh	r2, [r7, #14]
 801173a:	883b      	ldrh	r3, [r7, #0]
 801173c:	429a      	cmp	r2, r3
 801173e:	d3e3      	bcc.n	8011708 <eMBRegInputCB+0x30>
    }

    return MB_ENOERR;
 8011740:	2300      	movs	r3, #0
}
 8011742:	4618      	mov	r0, r3
 8011744:	3714      	adds	r7, #20
 8011746:	46bd      	mov	sp, r7
 8011748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174c:	4770      	bx	lr
 801174e:	bf00      	nop
 8011750:	2000861c 	.word	0x2000861c

08011754 <eMBRegDiscreteCB>:

/* ----------------------------------------------------------------
 * Discrete inputs callback
 * ----------------------------------------------------------------*/
eMBErrorCode eMBRegDiscreteCB(UCHAR *pucBuffer, USHORT usAddress, USHORT usNDiscrete) {
 8011754:	b480      	push	{r7}
 8011756:	b087      	sub	sp, #28
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	460b      	mov	r3, r1
 801175e:	807b      	strh	r3, [r7, #2]
 8011760:	4613      	mov	r3, r2
 8011762:	803b      	strh	r3, [r7, #0]
    if ((usAddress < REG_DISC_START) ||
 8011764:	887b      	ldrh	r3, [r7, #2]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d004      	beq.n	8011774 <eMBRegDiscreteCB+0x20>
        (usAddress + usNDiscrete - 1) > (REG_DISC_START + REG_DISC_NDISCRETES - 1)) {
 801176a:	887a      	ldrh	r2, [r7, #2]
 801176c:	883b      	ldrh	r3, [r7, #0]
 801176e:	4413      	add	r3, r2
    if ((usAddress < REG_DISC_START) ||
 8011770:	2b05      	cmp	r3, #5
 8011772:	dd01      	ble.n	8011778 <eMBRegDiscreteCB+0x24>
        return MB_ENOREG;
 8011774:	2301      	movs	r3, #1
 8011776:	e03c      	b.n	80117f2 <eMBRegDiscreteCB+0x9e>
    }

    USHORT iDiscIndex = (USHORT)(usAddress - REG_DISC_START);
 8011778:	887b      	ldrh	r3, [r7, #2]
 801177a:	3b01      	subs	r3, #1
 801177c:	81bb      	strh	r3, [r7, #12]
    UCHAR currentByte = 0;
 801177e:	2300      	movs	r3, #0
 8011780:	75fb      	strb	r3, [r7, #23]
    UCHAR bitPos = 0;
 8011782:	2300      	movs	r3, #0
 8011784:	75bb      	strb	r3, [r7, #22]
    UCHAR *pOut = pucBuffer;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	613b      	str	r3, [r7, #16]

    for (USHORT i = 0; i < usNDiscrete; i++) {
 801178a:	2300      	movs	r3, #0
 801178c:	81fb      	strh	r3, [r7, #14]
 801178e:	e023      	b.n	80117d8 <eMBRegDiscreteCB+0x84>
        UCHAR val = (ucDiscreteInputs[iDiscIndex + i] & 0x01) ? 1 : 0;
 8011790:	89ba      	ldrh	r2, [r7, #12]
 8011792:	89fb      	ldrh	r3, [r7, #14]
 8011794:	4413      	add	r3, r2
 8011796:	4a1a      	ldr	r2, [pc, #104]	@ (8011800 <eMBRegDiscreteCB+0xac>)
 8011798:	5cd3      	ldrb	r3, [r2, r3]
 801179a:	f003 0301 	and.w	r3, r3, #1
 801179e:	72fb      	strb	r3, [r7, #11]
        currentByte |= (val << bitPos);
 80117a0:	7afa      	ldrb	r2, [r7, #11]
 80117a2:	7dbb      	ldrb	r3, [r7, #22]
 80117a4:	fa02 f303 	lsl.w	r3, r2, r3
 80117a8:	b25a      	sxtb	r2, r3
 80117aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80117ae:	4313      	orrs	r3, r2
 80117b0:	b25b      	sxtb	r3, r3
 80117b2:	75fb      	strb	r3, [r7, #23]
        bitPos++;
 80117b4:	7dbb      	ldrb	r3, [r7, #22]
 80117b6:	3301      	adds	r3, #1
 80117b8:	75bb      	strb	r3, [r7, #22]
        if (bitPos == 8) {
 80117ba:	7dbb      	ldrb	r3, [r7, #22]
 80117bc:	2b08      	cmp	r3, #8
 80117be:	d108      	bne.n	80117d2 <eMBRegDiscreteCB+0x7e>
            *pOut++ = currentByte;
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	1c5a      	adds	r2, r3, #1
 80117c4:	613a      	str	r2, [r7, #16]
 80117c6:	7dfa      	ldrb	r2, [r7, #23]
 80117c8:	701a      	strb	r2, [r3, #0]
            currentByte = 0;
 80117ca:	2300      	movs	r3, #0
 80117cc:	75fb      	strb	r3, [r7, #23]
            bitPos = 0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	75bb      	strb	r3, [r7, #22]
    for (USHORT i = 0; i < usNDiscrete; i++) {
 80117d2:	89fb      	ldrh	r3, [r7, #14]
 80117d4:	3301      	adds	r3, #1
 80117d6:	81fb      	strh	r3, [r7, #14]
 80117d8:	89fa      	ldrh	r2, [r7, #14]
 80117da:	883b      	ldrh	r3, [r7, #0]
 80117dc:	429a      	cmp	r2, r3
 80117de:	d3d7      	bcc.n	8011790 <eMBRegDiscreteCB+0x3c>
        }
    }

    if (bitPos != 0) {
 80117e0:	7dbb      	ldrb	r3, [r7, #22]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d004      	beq.n	80117f0 <eMBRegDiscreteCB+0x9c>
        *pOut++ = currentByte;
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	1c5a      	adds	r2, r3, #1
 80117ea:	613a      	str	r2, [r7, #16]
 80117ec:	7dfa      	ldrb	r2, [r7, #23]
 80117ee:	701a      	strb	r2, [r3, #0]
    }

    return MB_ENOERR;
 80117f0:	2300      	movs	r3, #0
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	371c      	adds	r7, #28
 80117f6:	46bd      	mov	sp, r7
 80117f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fc:	4770      	bx	lr
 80117fe:	bf00      	nop
 8011800:	20008620 	.word	0x20008620

08011804 <Modbus_SetHolding>:

/* ----------------------------------------------------------------
 * Simple getters/setters for app logic
 * ----------------------------------------------------------------*/
USHORT Modbus_GetHolding(USHORT index) { return (index < REG_HOLDING_NREGS) ? usHoldingRegs[index] : 0; }
void   Modbus_SetHolding(USHORT index, USHORT value) { if (index < REG_HOLDING_NREGS) usHoldingRegs[index] = value; }
 8011804:	b480      	push	{r7}
 8011806:	b083      	sub	sp, #12
 8011808:	af00      	add	r7, sp, #0
 801180a:	4603      	mov	r3, r0
 801180c:	460a      	mov	r2, r1
 801180e:	80fb      	strh	r3, [r7, #6]
 8011810:	4613      	mov	r3, r2
 8011812:	80bb      	strh	r3, [r7, #4]
 8011814:	88fb      	ldrh	r3, [r7, #6]
 8011816:	2b01      	cmp	r3, #1
 8011818:	d804      	bhi.n	8011824 <Modbus_SetHolding+0x20>
 801181a:	88fb      	ldrh	r3, [r7, #6]
 801181c:	4904      	ldr	r1, [pc, #16]	@ (8011830 <Modbus_SetHolding+0x2c>)
 801181e:	88ba      	ldrh	r2, [r7, #4]
 8011820:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8011824:	bf00      	nop
 8011826:	370c      	adds	r7, #12
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr
 8011830:	20008610 	.word	0x20008610

08011834 <xMBPortEventInit>:
static volatile BOOL         s_event_pending = FALSE;
static volatile eMBEventType s_event_queued  = EV_READY;

/* ----------------------- TCP functions ---------------------- */
BOOL xMBPortEventInit(void)
{
 8011834:	b480      	push	{r7}
 8011836:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8011838:	b672      	cpsid	i
}
 801183a:	bf00      	nop
    __disable_irq();
    s_event_pending = FALSE;
 801183c:	4b06      	ldr	r3, [pc, #24]	@ (8011858 <xMBPortEventInit+0x24>)
 801183e:	2200      	movs	r2, #0
 8011840:	701a      	strb	r2, [r3, #0]
    s_event_queued  = EV_READY;
 8011842:	4b06      	ldr	r3, [pc, #24]	@ (801185c <xMBPortEventInit+0x28>)
 8011844:	2200      	movs	r2, #0
 8011846:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8011848:	b662      	cpsie	i
}
 801184a:	bf00      	nop
    __enable_irq();
    return TRUE;
 801184c:	2301      	movs	r3, #1
}
 801184e:	4618      	mov	r0, r3
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr
 8011858:	20008630 	.word	0x20008630
 801185c:	20008631 	.word	0x20008631

08011860 <xMBPortEventPost>:

BOOL xMBPortEventPost(eMBEventType eEvent)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b086      	sub	sp, #24
 8011864:	af02      	add	r7, sp, #8
 8011866:	4603      	mov	r3, r0
 8011868:	71fb      	strb	r3, [r7, #7]
    DEBUG_PRINTF("%s -> post event=%d\r\n", __func__, eEvent);
 801186a:	79fb      	ldrb	r3, [r7, #7]
 801186c:	9300      	str	r3, [sp, #0]
 801186e:	4b0f      	ldr	r3, [pc, #60]	@ (80118ac <xMBPortEventPost+0x4c>)
 8011870:	4a0f      	ldr	r2, [pc, #60]	@ (80118b0 <xMBPortEventPost+0x50>)
 8011872:	2140      	movs	r1, #64	@ 0x40
 8011874:	480f      	ldr	r0, [pc, #60]	@ (80118b4 <xMBPortEventPost+0x54>)
 8011876:	f000 fc91 	bl	801219c <sniprintf>
 801187a:	60f8      	str	r0, [r7, #12]
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	b29a      	uxth	r2, r3
 8011880:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011884:	490b      	ldr	r1, [pc, #44]	@ (80118b4 <xMBPortEventPost+0x54>)
 8011886:	480c      	ldr	r0, [pc, #48]	@ (80118b8 <xMBPortEventPost+0x58>)
 8011888:	f7f3 fbc4 	bl	8005014 <HAL_UART_Transmit>
  __ASM volatile ("cpsid i" : : : "memory");
 801188c:	b672      	cpsid	i
}
 801188e:	bf00      	nop
    __disable_irq();
    s_event_queued  = eEvent;
 8011890:	4a0a      	ldr	r2, [pc, #40]	@ (80118bc <xMBPortEventPost+0x5c>)
 8011892:	79fb      	ldrb	r3, [r7, #7]
 8011894:	7013      	strb	r3, [r2, #0]
    s_event_pending = TRUE;
 8011896:	4b0a      	ldr	r3, [pc, #40]	@ (80118c0 <xMBPortEventPost+0x60>)
 8011898:	2201      	movs	r2, #1
 801189a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 801189c:	b662      	cpsie	i
}
 801189e:	bf00      	nop
    __enable_irq();

    return TRUE;
 80118a0:	2301      	movs	r3, #1
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3710      	adds	r7, #16
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	08016048 	.word	0x08016048
 80118b0:	08015dec 	.word	0x08015dec
 80118b4:	20000254 	.word	0x20000254
 80118b8:	2000020c 	.word	0x2000020c
 80118bc:	20008631 	.word	0x20008631
 80118c0:	20008630 	.word	0x20008630

080118c4 <xMBPortEventGet>:

BOOL xMBPortEventGet(eMBEventType *eEvent)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
    if (!eEvent) return FALSE;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d101      	bne.n	80118d6 <xMBPortEventGet+0x12>
 80118d2:	2300      	movs	r3, #0
 80118d4:	e025      	b.n	8011922 <xMBPortEventGet+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 80118d6:	b672      	cpsid	i
}
 80118d8:	bf00      	nop

    __disable_irq();
    if (s_event_pending) {
 80118da:	4b14      	ldr	r3, [pc, #80]	@ (801192c <xMBPortEventGet+0x68>)
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d01b      	beq.n	801191c <xMBPortEventGet+0x58>
        *eEvent        = s_event_queued;
 80118e4:	4b12      	ldr	r3, [pc, #72]	@ (8011930 <xMBPortEventGet+0x6c>)
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	701a      	strb	r2, [r3, #0]
        s_event_pending = FALSE;
 80118ee:	4b0f      	ldr	r3, [pc, #60]	@ (801192c <xMBPortEventGet+0x68>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80118f4:	b662      	cpsie	i
}
 80118f6:	bf00      	nop
        __enable_irq();

        DEBUG_PRINTF(" -> got event=%d\r\n", *eEvent);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	4a0d      	ldr	r2, [pc, #52]	@ (8011934 <xMBPortEventGet+0x70>)
 80118fe:	2140      	movs	r1, #64	@ 0x40
 8011900:	480d      	ldr	r0, [pc, #52]	@ (8011938 <xMBPortEventGet+0x74>)
 8011902:	f000 fc4b 	bl	801219c <sniprintf>
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	b29a      	uxth	r2, r3
 801190c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011910:	4909      	ldr	r1, [pc, #36]	@ (8011938 <xMBPortEventGet+0x74>)
 8011912:	480a      	ldr	r0, [pc, #40]	@ (801193c <xMBPortEventGet+0x78>)
 8011914:	f7f3 fb7e 	bl	8005014 <HAL_UART_Transmit>
        return TRUE;
 8011918:	2301      	movs	r3, #1
 801191a:	e002      	b.n	8011922 <xMBPortEventGet+0x5e>
  __ASM volatile ("cpsie i" : : : "memory");
 801191c:	b662      	cpsie	i
}
 801191e:	bf00      	nop
    }
    __enable_irq();
    return FALSE;
 8011920:	2300      	movs	r3, #0
}
 8011922:	4618      	mov	r0, r3
 8011924:	3710      	adds	r7, #16
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	20008630 	.word	0x20008630
 8011930:	20008631 	.word	0x20008631
 8011934:	08015e04 	.word	0x08015e04
 8011938:	20000254 	.word	0x20000254
 801193c:	2000020c 	.word	0x2000020c

08011940 <xMBTCPPortInit>:

/* ----------------------- TCP functions ---------------------- */
BOOL xMBTCPPortInit(USHORT usTCPPort)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b084      	sub	sp, #16
 8011944:	af00      	add	r7, sp, #0
 8011946:	4603      	mov	r3, r0
 8011948:	80fb      	strh	r3, [r7, #6]
    DEBUG_PRINTF("%s\r\n", __func__);
 801194a:	4b24      	ldr	r3, [pc, #144]	@ (80119dc <xMBTCPPortInit+0x9c>)
 801194c:	4a24      	ldr	r2, [pc, #144]	@ (80119e0 <xMBTCPPortInit+0xa0>)
 801194e:	2140      	movs	r1, #64	@ 0x40
 8011950:	4824      	ldr	r0, [pc, #144]	@ (80119e4 <xMBTCPPortInit+0xa4>)
 8011952:	f000 fc23 	bl	801219c <sniprintf>
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	b29a      	uxth	r2, r3
 801195c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011960:	4920      	ldr	r1, [pc, #128]	@ (80119e4 <xMBTCPPortInit+0xa4>)
 8011962:	4821      	ldr	r0, [pc, #132]	@ (80119e8 <xMBTCPPortInit+0xa8>)
 8011964:	f7f3 fb56 	bl	8005014 <HAL_UART_Transmit>
    mb_listener = tcp_new();
 8011968:	f7f7 fd86 	bl	8009478 <tcp_new>
 801196c:	4603      	mov	r3, r0
 801196e:	4a1f      	ldr	r2, [pc, #124]	@ (80119ec <xMBTCPPortInit+0xac>)
 8011970:	6013      	str	r3, [r2, #0]
    if (!mb_listener) return FALSE;
 8011972:	4b1e      	ldr	r3, [pc, #120]	@ (80119ec <xMBTCPPortInit+0xac>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d101      	bne.n	801197e <xMBTCPPortInit+0x3e>
 801197a:	2300      	movs	r3, #0
 801197c:	e02a      	b.n	80119d4 <xMBTCPPortInit+0x94>

    if (tcp_bind(mb_listener, IP_ADDR_ANY, usTCPPort) != ERR_OK)
 801197e:	4b1b      	ldr	r3, [pc, #108]	@ (80119ec <xMBTCPPortInit+0xac>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	88fa      	ldrh	r2, [r7, #6]
 8011984:	491a      	ldr	r1, [pc, #104]	@ (80119f0 <xMBTCPPortInit+0xb0>)
 8011986:	4618      	mov	r0, r3
 8011988:	f7f6 fcee 	bl	8008368 <tcp_bind>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	d001      	beq.n	8011996 <xMBTCPPortInit+0x56>
        return FALSE;
 8011992:	2300      	movs	r3, #0
 8011994:	e01e      	b.n	80119d4 <xMBTCPPortInit+0x94>

    mb_listener = tcp_listen(mb_listener);
 8011996:	4b15      	ldr	r3, [pc, #84]	@ (80119ec <xMBTCPPortInit+0xac>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	21ff      	movs	r1, #255	@ 0xff
 801199c:	4618      	mov	r0, r3
 801199e:	f7f6 fd9b 	bl	80084d8 <tcp_listen_with_backlog>
 80119a2:	4603      	mov	r3, r0
 80119a4:	4a11      	ldr	r2, [pc, #68]	@ (80119ec <xMBTCPPortInit+0xac>)
 80119a6:	6013      	str	r3, [r2, #0]
    tcp_accept(mb_listener, mb_accept);
 80119a8:	4b10      	ldr	r3, [pc, #64]	@ (80119ec <xMBTCPPortInit+0xac>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	4911      	ldr	r1, [pc, #68]	@ (80119f4 <xMBTCPPortInit+0xb4>)
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7f7 fd8c 	bl	80094cc <tcp_accept>

    DEBUG_PRINTF(" -> listening on TCP port %u\r\n", (unsigned)usTCPPort);
 80119b4:	88fb      	ldrh	r3, [r7, #6]
 80119b6:	4a10      	ldr	r2, [pc, #64]	@ (80119f8 <xMBTCPPortInit+0xb8>)
 80119b8:	2140      	movs	r1, #64	@ 0x40
 80119ba:	480a      	ldr	r0, [pc, #40]	@ (80119e4 <xMBTCPPortInit+0xa4>)
 80119bc:	f000 fbee 	bl	801219c <sniprintf>
 80119c0:	60b8      	str	r0, [r7, #8]
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	b29a      	uxth	r2, r3
 80119c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80119ca:	4906      	ldr	r1, [pc, #24]	@ (80119e4 <xMBTCPPortInit+0xa4>)
 80119cc:	4806      	ldr	r0, [pc, #24]	@ (80119e8 <xMBTCPPortInit+0xa8>)
 80119ce:	f7f3 fb21 	bl	8005014 <HAL_UART_Transmit>
    return TRUE;
 80119d2:	2301      	movs	r3, #1
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3710      	adds	r7, #16
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	0801605c 	.word	0x0801605c
 80119e0:	08015e18 	.word	0x08015e18
 80119e4:	20000254 	.word	0x20000254
 80119e8:	2000020c 	.word	0x2000020c
 80119ec:	20008624 	.word	0x20008624
 80119f0:	08016034 	.word	0x08016034
 80119f4:	08011bc5 	.word	0x08011bc5
 80119f8:	08015e20 	.word	0x08015e20

080119fc <vMBTCPPortDisable>:
        mb_listener = NULL;
    }
}

void vMBTCPPortDisable(void)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
    DEBUG_PRINTF("%s\r\n", __func__);
 8011a02:	4b15      	ldr	r3, [pc, #84]	@ (8011a58 <vMBTCPPortDisable+0x5c>)
 8011a04:	4a15      	ldr	r2, [pc, #84]	@ (8011a5c <vMBTCPPortDisable+0x60>)
 8011a06:	2140      	movs	r1, #64	@ 0x40
 8011a08:	4815      	ldr	r0, [pc, #84]	@ (8011a60 <vMBTCPPortDisable+0x64>)
 8011a0a:	f000 fbc7 	bl	801219c <sniprintf>
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	b29a      	uxth	r2, r3
 8011a14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011a18:	4911      	ldr	r1, [pc, #68]	@ (8011a60 <vMBTCPPortDisable+0x64>)
 8011a1a:	4812      	ldr	r0, [pc, #72]	@ (8011a64 <vMBTCPPortDisable+0x68>)
 8011a1c:	f7f3 fafa 	bl	8005014 <HAL_UART_Transmit>
    if (mb_client) {
 8011a20:	4b11      	ldr	r3, [pc, #68]	@ (8011a68 <vMBTCPPortDisable+0x6c>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d007      	beq.n	8011a38 <vMBTCPPortDisable+0x3c>
        tcp_close(mb_client);
 8011a28:	4b0f      	ldr	r3, [pc, #60]	@ (8011a68 <vMBTCPPortDisable+0x6c>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7f6 fba5 	bl	800817c <tcp_close>
        mb_client = NULL;
 8011a32:	4b0d      	ldr	r3, [pc, #52]	@ (8011a68 <vMBTCPPortDisable+0x6c>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	601a      	str	r2, [r3, #0]
    }
    if (rx_pbuf) {
 8011a38:	4b0c      	ldr	r3, [pc, #48]	@ (8011a6c <vMBTCPPortDisable+0x70>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d007      	beq.n	8011a50 <vMBTCPPortDisable+0x54>
        pbuf_free(rx_pbuf);
 8011a40:	4b0a      	ldr	r3, [pc, #40]	@ (8011a6c <vMBTCPPortDisable+0x70>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7f5 fefb 	bl	8007840 <pbuf_free>
        rx_pbuf = NULL;
 8011a4a:	4b08      	ldr	r3, [pc, #32]	@ (8011a6c <vMBTCPPortDisable+0x70>)
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	601a      	str	r2, [r3, #0]
    }
}
 8011a50:	bf00      	nop
 8011a52:	3708      	adds	r7, #8
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}
 8011a58:	0801606c 	.word	0x0801606c
 8011a5c:	08015e18 	.word	0x08015e18
 8011a60:	20000254 	.word	0x20000254
 8011a64:	2000020c 	.word	0x2000020c
 8011a68:	20008628 	.word	0x20008628
 8011a6c:	2000862c 	.word	0x2000862c

08011a70 <xMBTCPPortGetRequest>:

BOOL xMBTCPPortGetRequest(UCHAR **ppucMBTCPFrame, USHORT *pusLength)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b084      	sub	sp, #16
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8011af4 <xMBTCPPortGetRequest+0x84>)
 8011a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8011af8 <xMBTCPPortGetRequest+0x88>)
 8011a7e:	2140      	movs	r1, #64	@ 0x40
 8011a80:	481e      	ldr	r0, [pc, #120]	@ (8011afc <xMBTCPPortGetRequest+0x8c>)
 8011a82:	f000 fb8b 	bl	801219c <sniprintf>
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011a90:	491a      	ldr	r1, [pc, #104]	@ (8011afc <xMBTCPPortGetRequest+0x8c>)
 8011a92:	481b      	ldr	r0, [pc, #108]	@ (8011b00 <xMBTCPPortGetRequest+0x90>)
 8011a94:	f7f3 fabe 	bl	8005014 <HAL_UART_Transmit>
    if (!rx_pbuf) return FALSE;
 8011a98:	4b1a      	ldr	r3, [pc, #104]	@ (8011b04 <xMBTCPPortGetRequest+0x94>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d101      	bne.n	8011aa4 <xMBTCPPortGetRequest+0x34>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	e022      	b.n	8011aea <xMBTCPPortGetRequest+0x7a>

    *ppucMBTCPFrame = rx_pbuf->payload;
 8011aa4:	4b17      	ldr	r3, [pc, #92]	@ (8011b04 <xMBTCPPortGetRequest+0x94>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	685a      	ldr	r2, [r3, #4]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	601a      	str	r2, [r3, #0]
    *pusLength      = rx_pbuf->len;
 8011aae:	4b15      	ldr	r3, [pc, #84]	@ (8011b04 <xMBTCPPortGetRequest+0x94>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	895a      	ldrh	r2, [r3, #10]
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	801a      	strh	r2, [r3, #0]

    DEBUG_PRINTF(" -> handing out %u bytes\r\n", (unsigned)*pusLength);
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	881b      	ldrh	r3, [r3, #0]
 8011abc:	4a12      	ldr	r2, [pc, #72]	@ (8011b08 <xMBTCPPortGetRequest+0x98>)
 8011abe:	2140      	movs	r1, #64	@ 0x40
 8011ac0:	480e      	ldr	r0, [pc, #56]	@ (8011afc <xMBTCPPortGetRequest+0x8c>)
 8011ac2:	f000 fb6b 	bl	801219c <sniprintf>
 8011ac6:	60b8      	str	r0, [r7, #8]
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	b29a      	uxth	r2, r3
 8011acc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011ad0:	490a      	ldr	r1, [pc, #40]	@ (8011afc <xMBTCPPortGetRequest+0x8c>)
 8011ad2:	480b      	ldr	r0, [pc, #44]	@ (8011b00 <xMBTCPPortGetRequest+0x90>)
 8011ad4:	f7f3 fa9e 	bl	8005014 <HAL_UART_Transmit>

    pbuf_free(rx_pbuf);
 8011ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8011b04 <xMBTCPPortGetRequest+0x94>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7f5 feaf 	bl	8007840 <pbuf_free>
    rx_pbuf = NULL;
 8011ae2:	4b08      	ldr	r3, [pc, #32]	@ (8011b04 <xMBTCPPortGetRequest+0x94>)
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	601a      	str	r2, [r3, #0]
    return TRUE;
 8011ae8:	2301      	movs	r3, #1
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3710      	adds	r7, #16
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
 8011af2:	bf00      	nop
 8011af4:	08016080 	.word	0x08016080
 8011af8:	08015e18 	.word	0x08015e18
 8011afc:	20000254 	.word	0x20000254
 8011b00:	2000020c 	.word	0x2000020c
 8011b04:	2000862c 	.word	0x2000862c
 8011b08:	08015e40 	.word	0x08015e40

08011b0c <xMBTCPPortSendResponse>:

BOOL xMBTCPPortSendResponse(const UCHAR *pucMBTCPFrame, USHORT usLength)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b086      	sub	sp, #24
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	460b      	mov	r3, r1
 8011b16:	807b      	strh	r3, [r7, #2]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011b18:	4b23      	ldr	r3, [pc, #140]	@ (8011ba8 <xMBTCPPortSendResponse+0x9c>)
 8011b1a:	4a24      	ldr	r2, [pc, #144]	@ (8011bac <xMBTCPPortSendResponse+0xa0>)
 8011b1c:	2140      	movs	r1, #64	@ 0x40
 8011b1e:	4824      	ldr	r0, [pc, #144]	@ (8011bb0 <xMBTCPPortSendResponse+0xa4>)
 8011b20:	f000 fb3c 	bl	801219c <sniprintf>
 8011b24:	6178      	str	r0, [r7, #20]
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	b29a      	uxth	r2, r3
 8011b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011b2e:	4920      	ldr	r1, [pc, #128]	@ (8011bb0 <xMBTCPPortSendResponse+0xa4>)
 8011b30:	4820      	ldr	r0, [pc, #128]	@ (8011bb4 <xMBTCPPortSendResponse+0xa8>)
 8011b32:	f7f3 fa6f 	bl	8005014 <HAL_UART_Transmit>
    if (!mb_client) {
 8011b36:	4b20      	ldr	r3, [pc, #128]	@ (8011bb8 <xMBTCPPortSendResponse+0xac>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d10f      	bne.n	8011b5e <xMBTCPPortSendResponse+0x52>
        DEBUG_PRINTF(" -> no client\r\n");
 8011b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8011bbc <xMBTCPPortSendResponse+0xb0>)
 8011b40:	2140      	movs	r1, #64	@ 0x40
 8011b42:	481b      	ldr	r0, [pc, #108]	@ (8011bb0 <xMBTCPPortSendResponse+0xa4>)
 8011b44:	f000 fb2a 	bl	801219c <sniprintf>
 8011b48:	60f8      	str	r0, [r7, #12]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	b29a      	uxth	r2, r3
 8011b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011b52:	4917      	ldr	r1, [pc, #92]	@ (8011bb0 <xMBTCPPortSendResponse+0xa4>)
 8011b54:	4817      	ldr	r0, [pc, #92]	@ (8011bb4 <xMBTCPPortSendResponse+0xa8>)
 8011b56:	f7f3 fa5d 	bl	8005014 <HAL_UART_Transmit>
        return FALSE;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	e020      	b.n	8011ba0 <xMBTCPPortSendResponse+0x94>
    }

    if (tcp_write(mb_client, pucMBTCPFrame, usLength, TCP_WRITE_FLAG_COPY) != ERR_OK)
 8011b5e:	4b16      	ldr	r3, [pc, #88]	@ (8011bb8 <xMBTCPPortSendResponse+0xac>)
 8011b60:	6818      	ldr	r0, [r3, #0]
 8011b62:	887a      	ldrh	r2, [r7, #2]
 8011b64:	2301      	movs	r3, #1
 8011b66:	6879      	ldr	r1, [r7, #4]
 8011b68:	f7fa fb44 	bl	800c1f4 <tcp_write>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d001      	beq.n	8011b76 <xMBTCPPortSendResponse+0x6a>
        return FALSE;
 8011b72:	2300      	movs	r3, #0
 8011b74:	e014      	b.n	8011ba0 <xMBTCPPortSendResponse+0x94>

    tcp_output(mb_client);
 8011b76:	4b10      	ldr	r3, [pc, #64]	@ (8011bb8 <xMBTCPPortSendResponse+0xac>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7fb f924 	bl	800cdc8 <tcp_output>

    DEBUG_PRINTF(" -> sent %u bytes\r\n", (unsigned)usLength);
 8011b80:	887b      	ldrh	r3, [r7, #2]
 8011b82:	4a0f      	ldr	r2, [pc, #60]	@ (8011bc0 <xMBTCPPortSendResponse+0xb4>)
 8011b84:	2140      	movs	r1, #64	@ 0x40
 8011b86:	480a      	ldr	r0, [pc, #40]	@ (8011bb0 <xMBTCPPortSendResponse+0xa4>)
 8011b88:	f000 fb08 	bl	801219c <sniprintf>
 8011b8c:	6138      	str	r0, [r7, #16]
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011b96:	4906      	ldr	r1, [pc, #24]	@ (8011bb0 <xMBTCPPortSendResponse+0xa4>)
 8011b98:	4806      	ldr	r0, [pc, #24]	@ (8011bb4 <xMBTCPPortSendResponse+0xa8>)
 8011b9a:	f7f3 fa3b 	bl	8005014 <HAL_UART_Transmit>
    return TRUE;
 8011b9e:	2301      	movs	r3, #1
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3718      	adds	r7, #24
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	08016098 	.word	0x08016098
 8011bac:	08015e18 	.word	0x08015e18
 8011bb0:	20000254 	.word	0x20000254
 8011bb4:	2000020c 	.word	0x2000020c
 8011bb8:	20008628 	.word	0x20008628
 8011bbc:	08015e5c 	.word	0x08015e5c
 8011bc0:	08015e6c 	.word	0x08015e6c

08011bc4 <mb_accept>:

/* ----------------------- lwIP callbacks ---------------------- */
static err_t mb_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b086      	sub	sp, #24
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	60f8      	str	r0, [r7, #12]
 8011bcc:	60b9      	str	r1, [r7, #8]
 8011bce:	4613      	mov	r3, r2
 8011bd0:	71fb      	strb	r3, [r7, #7]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011bd2:	4b17      	ldr	r3, [pc, #92]	@ (8011c30 <mb_accept+0x6c>)
 8011bd4:	4a17      	ldr	r2, [pc, #92]	@ (8011c34 <mb_accept+0x70>)
 8011bd6:	2140      	movs	r1, #64	@ 0x40
 8011bd8:	4817      	ldr	r0, [pc, #92]	@ (8011c38 <mb_accept+0x74>)
 8011bda:	f000 fadf 	bl	801219c <sniprintf>
 8011bde:	6178      	str	r0, [r7, #20]
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	b29a      	uxth	r2, r3
 8011be4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011be8:	4913      	ldr	r1, [pc, #76]	@ (8011c38 <mb_accept+0x74>)
 8011bea:	4814      	ldr	r0, [pc, #80]	@ (8011c3c <mb_accept+0x78>)
 8011bec:	f7f3 fa12 	bl	8005014 <HAL_UART_Transmit>
    (void)arg; (void)err;

    mb_client = newpcb;
 8011bf0:	4a13      	ldr	r2, [pc, #76]	@ (8011c40 <mb_accept+0x7c>)
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	6013      	str	r3, [r2, #0]
    tcp_recv(mb_client, mb_recv);
 8011bf6:	4b12      	ldr	r3, [pc, #72]	@ (8011c40 <mb_accept+0x7c>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	4912      	ldr	r1, [pc, #72]	@ (8011c44 <mb_accept+0x80>)
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7f7 fc43 	bl	8009488 <tcp_recv>

    DEBUG_PRINTF(" -> client connected\r\n");
 8011c02:	4a11      	ldr	r2, [pc, #68]	@ (8011c48 <mb_accept+0x84>)
 8011c04:	2140      	movs	r1, #64	@ 0x40
 8011c06:	480c      	ldr	r0, [pc, #48]	@ (8011c38 <mb_accept+0x74>)
 8011c08:	f000 fac8 	bl	801219c <sniprintf>
 8011c0c:	6138      	str	r0, [r7, #16]
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	b29a      	uxth	r2, r3
 8011c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011c16:	4908      	ldr	r1, [pc, #32]	@ (8011c38 <mb_accept+0x74>)
 8011c18:	4808      	ldr	r0, [pc, #32]	@ (8011c3c <mb_accept+0x78>)
 8011c1a:	f7f3 f9fb 	bl	8005014 <HAL_UART_Transmit>

    xMBPortEventPost(EV_READY);
 8011c1e:	2000      	movs	r0, #0
 8011c20:	f7ff fe1e 	bl	8011860 <xMBPortEventPost>
    return ERR_OK;
 8011c24:	2300      	movs	r3, #0
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3718      	adds	r7, #24
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	080160b0 	.word	0x080160b0
 8011c34:	08015e18 	.word	0x08015e18
 8011c38:	20000254 	.word	0x20000254
 8011c3c:	2000020c 	.word	0x2000020c
 8011c40:	20008628 	.word	0x20008628
 8011c44:	08011c4d 	.word	0x08011c4d
 8011c48:	08015e80 	.word	0x08015e80

08011c4c <mb_recv>:

static err_t mb_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8011c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c4e:	b095      	sub	sp, #84	@ 0x54
 8011c50:	af08      	add	r7, sp, #32
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	607a      	str	r2, [r7, #4]
 8011c58:	70fb      	strb	r3, [r7, #3]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011c5a:	4b60      	ldr	r3, [pc, #384]	@ (8011ddc <mb_recv+0x190>)
 8011c5c:	4a60      	ldr	r2, [pc, #384]	@ (8011de0 <mb_recv+0x194>)
 8011c5e:	2140      	movs	r1, #64	@ 0x40
 8011c60:	4860      	ldr	r0, [pc, #384]	@ (8011de4 <mb_recv+0x198>)
 8011c62:	f000 fa9b 	bl	801219c <sniprintf>
 8011c66:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011c70:	495c      	ldr	r1, [pc, #368]	@ (8011de4 <mb_recv+0x198>)
 8011c72:	485d      	ldr	r0, [pc, #372]	@ (8011de8 <mb_recv+0x19c>)
 8011c74:	f7f3 f9ce 	bl	8005014 <HAL_UART_Transmit>
    (void)arg; (void)tpcb;

    if (!p) {
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d12f      	bne.n	8011cde <mb_recv+0x92>
        err_t cerr = tcp_close(tpcb);
 8011c7e:	68b8      	ldr	r0, [r7, #8]
 8011c80:	f7f6 fa7c 	bl	800817c <tcp_close>
 8011c84:	4603      	mov	r3, r0
 8011c86:	76fb      	strb	r3, [r7, #27]
        if (cerr != ERR_OK) {
 8011c88:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d013      	beq.n	8011cb8 <mb_recv+0x6c>
            tcp_abort(tpcb);
 8011c90:	68b8      	ldr	r0, [r7, #8]
 8011c92:	f7f6 fb5d 	bl	8008350 <tcp_abort>
            DEBUG_PRINTF(" -> remote closed, pcb aborted (err=%d)\r\n", cerr);
 8011c96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011c9a:	4a54      	ldr	r2, [pc, #336]	@ (8011dec <mb_recv+0x1a0>)
 8011c9c:	2140      	movs	r1, #64	@ 0x40
 8011c9e:	4851      	ldr	r0, [pc, #324]	@ (8011de4 <mb_recv+0x198>)
 8011ca0:	f000 fa7c 	bl	801219c <sniprintf>
 8011ca4:	6138      	str	r0, [r7, #16]
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	b29a      	uxth	r2, r3
 8011caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011cae:	494d      	ldr	r1, [pc, #308]	@ (8011de4 <mb_recv+0x198>)
 8011cb0:	484d      	ldr	r0, [pc, #308]	@ (8011de8 <mb_recv+0x19c>)
 8011cb2:	f7f3 f9af 	bl	8005014 <HAL_UART_Transmit>
 8011cb6:	e00d      	b.n	8011cd4 <mb_recv+0x88>
        } else {
            DEBUG_PRINTF(" -> remote closed, pcb closed\r\n");
 8011cb8:	4a4d      	ldr	r2, [pc, #308]	@ (8011df0 <mb_recv+0x1a4>)
 8011cba:	2140      	movs	r1, #64	@ 0x40
 8011cbc:	4849      	ldr	r0, [pc, #292]	@ (8011de4 <mb_recv+0x198>)
 8011cbe:	f000 fa6d 	bl	801219c <sniprintf>
 8011cc2:	6178      	str	r0, [r7, #20]
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011ccc:	4945      	ldr	r1, [pc, #276]	@ (8011de4 <mb_recv+0x198>)
 8011cce:	4846      	ldr	r0, [pc, #280]	@ (8011de8 <mb_recv+0x19c>)
 8011cd0:	f7f3 f9a0 	bl	8005014 <HAL_UART_Transmit>
        }
        mb_client = NULL;
 8011cd4:	4b47      	ldr	r3, [pc, #284]	@ (8011df4 <mb_recv+0x1a8>)
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	601a      	str	r2, [r3, #0]
        return ERR_OK;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	e07a      	b.n	8011dd4 <mb_recv+0x188>
    }

    if (err != ERR_OK) {
 8011cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d015      	beq.n	8011d12 <mb_recv+0xc6>
        pbuf_free(p);
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f7f5 fdaa 	bl	8007840 <pbuf_free>
        DEBUG_PRINTF(" -> error %d\r\n", (int)err);
 8011cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011cf0:	4a41      	ldr	r2, [pc, #260]	@ (8011df8 <mb_recv+0x1ac>)
 8011cf2:	2140      	movs	r1, #64	@ 0x40
 8011cf4:	483b      	ldr	r0, [pc, #236]	@ (8011de4 <mb_recv+0x198>)
 8011cf6:	f000 fa51 	bl	801219c <sniprintf>
 8011cfa:	61f8      	str	r0, [r7, #28]
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011d04:	4937      	ldr	r1, [pc, #220]	@ (8011de4 <mb_recv+0x198>)
 8011d06:	4838      	ldr	r0, [pc, #224]	@ (8011de8 <mb_recv+0x19c>)
 8011d08:	f7f3 f984 	bl	8005014 <HAL_UART_Transmit>
        return err;
 8011d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d10:	e060      	b.n	8011dd4 <mb_recv+0x188>
    }

    if (rx_pbuf) pbuf_free(rx_pbuf);
 8011d12:	4b3a      	ldr	r3, [pc, #232]	@ (8011dfc <mb_recv+0x1b0>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d004      	beq.n	8011d24 <mb_recv+0xd8>
 8011d1a:	4b38      	ldr	r3, [pc, #224]	@ (8011dfc <mb_recv+0x1b0>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7f5 fd8e 	bl	8007840 <pbuf_free>
    rx_pbuf = p;
 8011d24:	4a35      	ldr	r2, [pc, #212]	@ (8011dfc <mb_recv+0x1b0>)
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6013      	str	r3, [r2, #0]

    tcp_recved(tpcb, p->tot_len);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	891b      	ldrh	r3, [r3, #8]
 8011d2e:	4619      	mov	r1, r3
 8011d30:	68b8      	ldr	r0, [r7, #8]
 8011d32:	f7f6 fce7 	bl	8008704 <tcp_recved>

    DEBUG_PRINTF(" -> received %u bytes\r\n", (unsigned)p->tot_len);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	891b      	ldrh	r3, [r3, #8]
 8011d3a:	4a31      	ldr	r2, [pc, #196]	@ (8011e00 <mb_recv+0x1b4>)
 8011d3c:	2140      	movs	r1, #64	@ 0x40
 8011d3e:	4829      	ldr	r0, [pc, #164]	@ (8011de4 <mb_recv+0x198>)
 8011d40:	f000 fa2c 	bl	801219c <sniprintf>
 8011d44:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011d4e:	4925      	ldr	r1, [pc, #148]	@ (8011de4 <mb_recv+0x198>)
 8011d50:	4825      	ldr	r0, [pc, #148]	@ (8011de8 <mb_recv+0x19c>)
 8011d52:	f7f3 f95f 	bl	8005014 <HAL_UART_Transmit>
    if (p->len >= 8) {
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	895b      	ldrh	r3, [r3, #10]
 8011d5a:	2b07      	cmp	r3, #7
 8011d5c:	d936      	bls.n	8011dcc <mb_recv+0x180>
        uint8_t *b = (uint8_t*)p->payload;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	627b      	str	r3, [r7, #36]	@ 0x24
        DEBUG_PRINTF(" MBAP: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8011d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d66:	781b      	ldrb	r3, [r3, #0]
 8011d68:	469c      	mov	ip, r3
 8011d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d6c:	3301      	adds	r3, #1
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	461a      	mov	r2, r3
 8011d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d74:	3302      	adds	r3, #2
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	4619      	mov	r1, r3
 8011d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d7c:	3303      	adds	r3, #3
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	4618      	mov	r0, r3
 8011d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d84:	3304      	adds	r3, #4
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	461c      	mov	r4, r3
 8011d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d8c:	3305      	adds	r3, #5
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	461d      	mov	r5, r3
 8011d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d94:	3306      	adds	r3, #6
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	461e      	mov	r6, r3
 8011d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d9c:	3307      	adds	r3, #7
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	9306      	str	r3, [sp, #24]
 8011da2:	9605      	str	r6, [sp, #20]
 8011da4:	9504      	str	r5, [sp, #16]
 8011da6:	9403      	str	r4, [sp, #12]
 8011da8:	9002      	str	r0, [sp, #8]
 8011daa:	9101      	str	r1, [sp, #4]
 8011dac:	9200      	str	r2, [sp, #0]
 8011dae:	4663      	mov	r3, ip
 8011db0:	4a14      	ldr	r2, [pc, #80]	@ (8011e04 <mb_recv+0x1b8>)
 8011db2:	2140      	movs	r1, #64	@ 0x40
 8011db4:	480b      	ldr	r0, [pc, #44]	@ (8011de4 <mb_recv+0x198>)
 8011db6:	f000 f9f1 	bl	801219c <sniprintf>
 8011dba:	6238      	str	r0, [r7, #32]
 8011dbc:	6a3b      	ldr	r3, [r7, #32]
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011dc4:	4907      	ldr	r1, [pc, #28]	@ (8011de4 <mb_recv+0x198>)
 8011dc6:	4808      	ldr	r0, [pc, #32]	@ (8011de8 <mb_recv+0x19c>)
 8011dc8:	f7f3 f924 	bl	8005014 <HAL_UART_Transmit>
                     b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7]);
    }

    xMBPortEventPost(EV_FRAME_RECEIVED);
 8011dcc:	2001      	movs	r0, #1
 8011dce:	f7ff fd47 	bl	8011860 <xMBPortEventPost>
    return ERR_OK;
 8011dd2:	2300      	movs	r3, #0
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3734      	adds	r7, #52	@ 0x34
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ddc:	080160bc 	.word	0x080160bc
 8011de0:	08015e18 	.word	0x08015e18
 8011de4:	20000254 	.word	0x20000254
 8011de8:	2000020c 	.word	0x2000020c
 8011dec:	08015e98 	.word	0x08015e98
 8011df0:	08015ec4 	.word	0x08015ec4
 8011df4:	20008628 	.word	0x20008628
 8011df8:	08015ee4 	.word	0x08015ee4
 8011dfc:	2000862c 	.word	0x2000862c
 8011e00:	08015ef4 	.word	0x08015ef4
 8011e04:	08015f0c 	.word	0x08015f0c

08011e08 <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b084      	sub	sp, #16
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	4603      	mov	r3, r0
 8011e10:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8011e12:	2300      	movs	r3, #0
 8011e14:	73fb      	strb	r3, [r7, #15]

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8011e16:	88fb      	ldrh	r3, [r7, #6]
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7ff fd91 	bl	8011940 <xMBTCPPortInit>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d101      	bne.n	8011e28 <eMBTCPDoInit+0x20>
    {
        eStatus = MB_EPORTERR;
 8011e24:	2303      	movs	r3, #3
 8011e26:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8011e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <eMBTCPStart>:

void
eMBTCPStart( void )
{
 8011e32:	b480      	push	{r7}
 8011e34:	af00      	add	r7, sp, #0
}
 8011e36:	bf00      	nop
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr

08011e40 <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	af00      	add	r7, sp, #0
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8011e44:	f7ff fdda 	bl	80119fc <vMBTCPPortDisable>
}
 8011e48:	bf00      	nop
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b088      	sub	sp, #32
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	60b9      	str	r1, [r7, #8]
 8011e56:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_EIO;
 8011e58:	2305      	movs	r3, #5
 8011e5a:	77fb      	strb	r3, [r7, #31]
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8011e5c:	f107 0216 	add.w	r2, r7, #22
 8011e60:	f107 0318 	add.w	r3, r7, #24
 8011e64:	4611      	mov	r1, r2
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7ff fe02 	bl	8011a70 <xMBTCPPortGetRequest>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d01d      	beq.n	8011eae <eMBTCPReceive+0x62>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8011e72:	69bb      	ldr	r3, [r7, #24]
 8011e74:	3302      	adds	r3, #2
 8011e76:	781b      	ldrb	r3, [r3, #0]
 8011e78:	021b      	lsls	r3, r3, #8
 8011e7a:	83bb      	strh	r3, [r7, #28]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	3303      	adds	r3, #3
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	461a      	mov	r2, r3
 8011e84:	8bbb      	ldrh	r3, [r7, #28]
 8011e86:	4313      	orrs	r3, r2
 8011e88:	83bb      	strh	r3, [r7, #28]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8011e8a:	8bbb      	ldrh	r3, [r7, #28]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d110      	bne.n	8011eb2 <eMBTCPReceive+0x66>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8011e90:	69bb      	ldr	r3, [r7, #24]
 8011e92:	1dda      	adds	r2, r3, #7
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	601a      	str	r2, [r3, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8011e98:	8afb      	ldrh	r3, [r7, #22]
 8011e9a:	3b07      	subs	r3, #7
 8011e9c:	b29a      	uxth	r2, r3
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	801a      	strh	r2, [r3, #0]
            eStatus = MB_ENOERR;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	77fb      	strb	r3, [r7, #31]

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	22ff      	movs	r2, #255	@ 0xff
 8011eaa:	701a      	strb	r2, [r3, #0]
 8011eac:	e001      	b.n	8011eb2 <eMBTCPReceive+0x66>
        }
    }
    else
    {
        eStatus = MB_EIO;
 8011eae:	2305      	movs	r3, #5
 8011eb0:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8011eb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3720      	adds	r7, #32
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b086      	sub	sp, #24
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	6039      	str	r1, [r7, #0]
 8011ec6:	71fb      	strb	r3, [r7, #7]
 8011ec8:	4613      	mov	r3, r2
 8011eca:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	75fb      	strb	r3, [r7, #23]
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	3b07      	subs	r3, #7
 8011ed4:	613b      	str	r3, [r7, #16]
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8011ed6:	88bb      	ldrh	r3, [r7, #4]
 8011ed8:	3307      	adds	r3, #7
 8011eda:	81fb      	strh	r3, [r7, #14]
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8011edc:	88bb      	ldrh	r3, [r7, #4]
 8011ede:	3301      	adds	r3, #1
 8011ee0:	121a      	asrs	r2, r3, #8
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	3304      	adds	r3, #4
 8011ee6:	b2d2      	uxtb	r2, r2
 8011ee8:	701a      	strb	r2, [r3, #0]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8011eea:	88bb      	ldrh	r3, [r7, #4]
 8011eec:	b2da      	uxtb	r2, r3
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	3305      	adds	r3, #5
 8011ef2:	3201      	adds	r2, #1
 8011ef4:	b2d2      	uxtb	r2, r2
 8011ef6:	701a      	strb	r2, [r3, #0]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8011ef8:	89fb      	ldrh	r3, [r7, #14]
 8011efa:	4619      	mov	r1, r3
 8011efc:	6938      	ldr	r0, [r7, #16]
 8011efe:	f7ff fe05 	bl	8011b0c <xMBTCPPortSendResponse>
 8011f02:	4603      	mov	r3, r0
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d101      	bne.n	8011f0c <eMBTCPSend+0x50>
    {
        eStatus = MB_EIO;
 8011f08:	2305      	movs	r3, #5
 8011f0a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8011f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3718      	adds	r7, #24
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
	...

08011f18 <__assert_func>:
 8011f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f1a:	4614      	mov	r4, r2
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	4b09      	ldr	r3, [pc, #36]	@ (8011f44 <__assert_func+0x2c>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	4605      	mov	r5, r0
 8011f24:	68d8      	ldr	r0, [r3, #12]
 8011f26:	b14c      	cbz	r4, 8011f3c <__assert_func+0x24>
 8011f28:	4b07      	ldr	r3, [pc, #28]	@ (8011f48 <__assert_func+0x30>)
 8011f2a:	9100      	str	r1, [sp, #0]
 8011f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f30:	4906      	ldr	r1, [pc, #24]	@ (8011f4c <__assert_func+0x34>)
 8011f32:	462b      	mov	r3, r5
 8011f34:	f000 f8f0 	bl	8012118 <fiprintf>
 8011f38:	f000 fa83 	bl	8012442 <abort>
 8011f3c:	4b04      	ldr	r3, [pc, #16]	@ (8011f50 <__assert_func+0x38>)
 8011f3e:	461c      	mov	r4, r3
 8011f40:	e7f3      	b.n	8011f2a <__assert_func+0x12>
 8011f42:	bf00      	nop
 8011f44:	200000b8 	.word	0x200000b8
 8011f48:	080160c4 	.word	0x080160c4
 8011f4c:	080160d1 	.word	0x080160d1
 8011f50:	080160ff 	.word	0x080160ff

08011f54 <rand>:
 8011f54:	4b16      	ldr	r3, [pc, #88]	@ (8011fb0 <rand+0x5c>)
 8011f56:	b510      	push	{r4, lr}
 8011f58:	681c      	ldr	r4, [r3, #0]
 8011f5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011f5c:	b9b3      	cbnz	r3, 8011f8c <rand+0x38>
 8011f5e:	2018      	movs	r0, #24
 8011f60:	f000 fac0 	bl	80124e4 <malloc>
 8011f64:	4602      	mov	r2, r0
 8011f66:	6320      	str	r0, [r4, #48]	@ 0x30
 8011f68:	b920      	cbnz	r0, 8011f74 <rand+0x20>
 8011f6a:	4b12      	ldr	r3, [pc, #72]	@ (8011fb4 <rand+0x60>)
 8011f6c:	4812      	ldr	r0, [pc, #72]	@ (8011fb8 <rand+0x64>)
 8011f6e:	2152      	movs	r1, #82	@ 0x52
 8011f70:	f7ff ffd2 	bl	8011f18 <__assert_func>
 8011f74:	4911      	ldr	r1, [pc, #68]	@ (8011fbc <rand+0x68>)
 8011f76:	4b12      	ldr	r3, [pc, #72]	@ (8011fc0 <rand+0x6c>)
 8011f78:	e9c0 1300 	strd	r1, r3, [r0]
 8011f7c:	4b11      	ldr	r3, [pc, #68]	@ (8011fc4 <rand+0x70>)
 8011f7e:	6083      	str	r3, [r0, #8]
 8011f80:	230b      	movs	r3, #11
 8011f82:	8183      	strh	r3, [r0, #12]
 8011f84:	2100      	movs	r1, #0
 8011f86:	2001      	movs	r0, #1
 8011f88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011f8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011f8e:	480e      	ldr	r0, [pc, #56]	@ (8011fc8 <rand+0x74>)
 8011f90:	690b      	ldr	r3, [r1, #16]
 8011f92:	694c      	ldr	r4, [r1, #20]
 8011f94:	4a0d      	ldr	r2, [pc, #52]	@ (8011fcc <rand+0x78>)
 8011f96:	4358      	muls	r0, r3
 8011f98:	fb02 0004 	mla	r0, r2, r4, r0
 8011f9c:	fba3 3202 	umull	r3, r2, r3, r2
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	eb40 0002 	adc.w	r0, r0, r2
 8011fa6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011faa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011fae:	bd10      	pop	{r4, pc}
 8011fb0:	200000b8 	.word	0x200000b8
 8011fb4:	08016100 	.word	0x08016100
 8011fb8:	08016117 	.word	0x08016117
 8011fbc:	abcd330e 	.word	0xabcd330e
 8011fc0:	e66d1234 	.word	0xe66d1234
 8011fc4:	0005deec 	.word	0x0005deec
 8011fc8:	5851f42d 	.word	0x5851f42d
 8011fcc:	4c957f2d 	.word	0x4c957f2d

08011fd0 <std>:
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	b510      	push	{r4, lr}
 8011fd4:	4604      	mov	r4, r0
 8011fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8011fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011fde:	6083      	str	r3, [r0, #8]
 8011fe0:	8181      	strh	r1, [r0, #12]
 8011fe2:	6643      	str	r3, [r0, #100]	@ 0x64
 8011fe4:	81c2      	strh	r2, [r0, #14]
 8011fe6:	6183      	str	r3, [r0, #24]
 8011fe8:	4619      	mov	r1, r3
 8011fea:	2208      	movs	r2, #8
 8011fec:	305c      	adds	r0, #92	@ 0x5c
 8011fee:	f000 f978 	bl	80122e2 <memset>
 8011ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8012028 <std+0x58>)
 8011ff4:	6263      	str	r3, [r4, #36]	@ 0x24
 8011ff6:	4b0d      	ldr	r3, [pc, #52]	@ (801202c <std+0x5c>)
 8011ff8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8012030 <std+0x60>)
 8011ffc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8012034 <std+0x64>)
 8012000:	6323      	str	r3, [r4, #48]	@ 0x30
 8012002:	4b0d      	ldr	r3, [pc, #52]	@ (8012038 <std+0x68>)
 8012004:	6224      	str	r4, [r4, #32]
 8012006:	429c      	cmp	r4, r3
 8012008:	d006      	beq.n	8012018 <std+0x48>
 801200a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801200e:	4294      	cmp	r4, r2
 8012010:	d002      	beq.n	8012018 <std+0x48>
 8012012:	33d0      	adds	r3, #208	@ 0xd0
 8012014:	429c      	cmp	r4, r3
 8012016:	d105      	bne.n	8012024 <std+0x54>
 8012018:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801201c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012020:	f000 b9f6 	b.w	8012410 <__retarget_lock_init_recursive>
 8012024:	bd10      	pop	{r4, pc}
 8012026:	bf00      	nop
 8012028:	08012209 	.word	0x08012209
 801202c:	0801222b 	.word	0x0801222b
 8012030:	08012263 	.word	0x08012263
 8012034:	08012287 	.word	0x08012287
 8012038:	20008634 	.word	0x20008634

0801203c <stdio_exit_handler>:
 801203c:	4a02      	ldr	r2, [pc, #8]	@ (8012048 <stdio_exit_handler+0xc>)
 801203e:	4903      	ldr	r1, [pc, #12]	@ (801204c <stdio_exit_handler+0x10>)
 8012040:	4803      	ldr	r0, [pc, #12]	@ (8012050 <stdio_exit_handler+0x14>)
 8012042:	f000 b87b 	b.w	801213c <_fwalk_sglue>
 8012046:	bf00      	nop
 8012048:	200000ac 	.word	0x200000ac
 801204c:	08012fa5 	.word	0x08012fa5
 8012050:	200000bc 	.word	0x200000bc

08012054 <cleanup_stdio>:
 8012054:	6841      	ldr	r1, [r0, #4]
 8012056:	4b0c      	ldr	r3, [pc, #48]	@ (8012088 <cleanup_stdio+0x34>)
 8012058:	4299      	cmp	r1, r3
 801205a:	b510      	push	{r4, lr}
 801205c:	4604      	mov	r4, r0
 801205e:	d001      	beq.n	8012064 <cleanup_stdio+0x10>
 8012060:	f000 ffa0 	bl	8012fa4 <_fflush_r>
 8012064:	68a1      	ldr	r1, [r4, #8]
 8012066:	4b09      	ldr	r3, [pc, #36]	@ (801208c <cleanup_stdio+0x38>)
 8012068:	4299      	cmp	r1, r3
 801206a:	d002      	beq.n	8012072 <cleanup_stdio+0x1e>
 801206c:	4620      	mov	r0, r4
 801206e:	f000 ff99 	bl	8012fa4 <_fflush_r>
 8012072:	68e1      	ldr	r1, [r4, #12]
 8012074:	4b06      	ldr	r3, [pc, #24]	@ (8012090 <cleanup_stdio+0x3c>)
 8012076:	4299      	cmp	r1, r3
 8012078:	d004      	beq.n	8012084 <cleanup_stdio+0x30>
 801207a:	4620      	mov	r0, r4
 801207c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012080:	f000 bf90 	b.w	8012fa4 <_fflush_r>
 8012084:	bd10      	pop	{r4, pc}
 8012086:	bf00      	nop
 8012088:	20008634 	.word	0x20008634
 801208c:	2000869c 	.word	0x2000869c
 8012090:	20008704 	.word	0x20008704

08012094 <global_stdio_init.part.0>:
 8012094:	b510      	push	{r4, lr}
 8012096:	4b0b      	ldr	r3, [pc, #44]	@ (80120c4 <global_stdio_init.part.0+0x30>)
 8012098:	4c0b      	ldr	r4, [pc, #44]	@ (80120c8 <global_stdio_init.part.0+0x34>)
 801209a:	4a0c      	ldr	r2, [pc, #48]	@ (80120cc <global_stdio_init.part.0+0x38>)
 801209c:	601a      	str	r2, [r3, #0]
 801209e:	4620      	mov	r0, r4
 80120a0:	2200      	movs	r2, #0
 80120a2:	2104      	movs	r1, #4
 80120a4:	f7ff ff94 	bl	8011fd0 <std>
 80120a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80120ac:	2201      	movs	r2, #1
 80120ae:	2109      	movs	r1, #9
 80120b0:	f7ff ff8e 	bl	8011fd0 <std>
 80120b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80120b8:	2202      	movs	r2, #2
 80120ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120be:	2112      	movs	r1, #18
 80120c0:	f7ff bf86 	b.w	8011fd0 <std>
 80120c4:	2000876c 	.word	0x2000876c
 80120c8:	20008634 	.word	0x20008634
 80120cc:	0801203d 	.word	0x0801203d

080120d0 <__sfp_lock_acquire>:
 80120d0:	4801      	ldr	r0, [pc, #4]	@ (80120d8 <__sfp_lock_acquire+0x8>)
 80120d2:	f000 b99e 	b.w	8012412 <__retarget_lock_acquire_recursive>
 80120d6:	bf00      	nop
 80120d8:	20008775 	.word	0x20008775

080120dc <__sfp_lock_release>:
 80120dc:	4801      	ldr	r0, [pc, #4]	@ (80120e4 <__sfp_lock_release+0x8>)
 80120de:	f000 b999 	b.w	8012414 <__retarget_lock_release_recursive>
 80120e2:	bf00      	nop
 80120e4:	20008775 	.word	0x20008775

080120e8 <__sinit>:
 80120e8:	b510      	push	{r4, lr}
 80120ea:	4604      	mov	r4, r0
 80120ec:	f7ff fff0 	bl	80120d0 <__sfp_lock_acquire>
 80120f0:	6a23      	ldr	r3, [r4, #32]
 80120f2:	b11b      	cbz	r3, 80120fc <__sinit+0x14>
 80120f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120f8:	f7ff bff0 	b.w	80120dc <__sfp_lock_release>
 80120fc:	4b04      	ldr	r3, [pc, #16]	@ (8012110 <__sinit+0x28>)
 80120fe:	6223      	str	r3, [r4, #32]
 8012100:	4b04      	ldr	r3, [pc, #16]	@ (8012114 <__sinit+0x2c>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d1f5      	bne.n	80120f4 <__sinit+0xc>
 8012108:	f7ff ffc4 	bl	8012094 <global_stdio_init.part.0>
 801210c:	e7f2      	b.n	80120f4 <__sinit+0xc>
 801210e:	bf00      	nop
 8012110:	08012055 	.word	0x08012055
 8012114:	2000876c 	.word	0x2000876c

08012118 <fiprintf>:
 8012118:	b40e      	push	{r1, r2, r3}
 801211a:	b503      	push	{r0, r1, lr}
 801211c:	4601      	mov	r1, r0
 801211e:	ab03      	add	r3, sp, #12
 8012120:	4805      	ldr	r0, [pc, #20]	@ (8012138 <fiprintf+0x20>)
 8012122:	f853 2b04 	ldr.w	r2, [r3], #4
 8012126:	6800      	ldr	r0, [r0, #0]
 8012128:	9301      	str	r3, [sp, #4]
 801212a:	f000 fc13 	bl	8012954 <_vfiprintf_r>
 801212e:	b002      	add	sp, #8
 8012130:	f85d eb04 	ldr.w	lr, [sp], #4
 8012134:	b003      	add	sp, #12
 8012136:	4770      	bx	lr
 8012138:	200000b8 	.word	0x200000b8

0801213c <_fwalk_sglue>:
 801213c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012140:	4607      	mov	r7, r0
 8012142:	4688      	mov	r8, r1
 8012144:	4614      	mov	r4, r2
 8012146:	2600      	movs	r6, #0
 8012148:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801214c:	f1b9 0901 	subs.w	r9, r9, #1
 8012150:	d505      	bpl.n	801215e <_fwalk_sglue+0x22>
 8012152:	6824      	ldr	r4, [r4, #0]
 8012154:	2c00      	cmp	r4, #0
 8012156:	d1f7      	bne.n	8012148 <_fwalk_sglue+0xc>
 8012158:	4630      	mov	r0, r6
 801215a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801215e:	89ab      	ldrh	r3, [r5, #12]
 8012160:	2b01      	cmp	r3, #1
 8012162:	d907      	bls.n	8012174 <_fwalk_sglue+0x38>
 8012164:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012168:	3301      	adds	r3, #1
 801216a:	d003      	beq.n	8012174 <_fwalk_sglue+0x38>
 801216c:	4629      	mov	r1, r5
 801216e:	4638      	mov	r0, r7
 8012170:	47c0      	blx	r8
 8012172:	4306      	orrs	r6, r0
 8012174:	3568      	adds	r5, #104	@ 0x68
 8012176:	e7e9      	b.n	801214c <_fwalk_sglue+0x10>

08012178 <iprintf>:
 8012178:	b40f      	push	{r0, r1, r2, r3}
 801217a:	b507      	push	{r0, r1, r2, lr}
 801217c:	4906      	ldr	r1, [pc, #24]	@ (8012198 <iprintf+0x20>)
 801217e:	ab04      	add	r3, sp, #16
 8012180:	6808      	ldr	r0, [r1, #0]
 8012182:	f853 2b04 	ldr.w	r2, [r3], #4
 8012186:	6881      	ldr	r1, [r0, #8]
 8012188:	9301      	str	r3, [sp, #4]
 801218a:	f000 fbe3 	bl	8012954 <_vfiprintf_r>
 801218e:	b003      	add	sp, #12
 8012190:	f85d eb04 	ldr.w	lr, [sp], #4
 8012194:	b004      	add	sp, #16
 8012196:	4770      	bx	lr
 8012198:	200000b8 	.word	0x200000b8

0801219c <sniprintf>:
 801219c:	b40c      	push	{r2, r3}
 801219e:	b530      	push	{r4, r5, lr}
 80121a0:	4b18      	ldr	r3, [pc, #96]	@ (8012204 <sniprintf+0x68>)
 80121a2:	1e0c      	subs	r4, r1, #0
 80121a4:	681d      	ldr	r5, [r3, #0]
 80121a6:	b09d      	sub	sp, #116	@ 0x74
 80121a8:	da08      	bge.n	80121bc <sniprintf+0x20>
 80121aa:	238b      	movs	r3, #139	@ 0x8b
 80121ac:	602b      	str	r3, [r5, #0]
 80121ae:	f04f 30ff 	mov.w	r0, #4294967295
 80121b2:	b01d      	add	sp, #116	@ 0x74
 80121b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121b8:	b002      	add	sp, #8
 80121ba:	4770      	bx	lr
 80121bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80121c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80121c4:	f04f 0300 	mov.w	r3, #0
 80121c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80121ca:	bf14      	ite	ne
 80121cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80121d0:	4623      	moveq	r3, r4
 80121d2:	9304      	str	r3, [sp, #16]
 80121d4:	9307      	str	r3, [sp, #28]
 80121d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80121da:	9002      	str	r0, [sp, #8]
 80121dc:	9006      	str	r0, [sp, #24]
 80121de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80121e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80121e4:	ab21      	add	r3, sp, #132	@ 0x84
 80121e6:	a902      	add	r1, sp, #8
 80121e8:	4628      	mov	r0, r5
 80121ea:	9301      	str	r3, [sp, #4]
 80121ec:	f000 fa8c 	bl	8012708 <_svfiprintf_r>
 80121f0:	1c43      	adds	r3, r0, #1
 80121f2:	bfbc      	itt	lt
 80121f4:	238b      	movlt	r3, #139	@ 0x8b
 80121f6:	602b      	strlt	r3, [r5, #0]
 80121f8:	2c00      	cmp	r4, #0
 80121fa:	d0da      	beq.n	80121b2 <sniprintf+0x16>
 80121fc:	9b02      	ldr	r3, [sp, #8]
 80121fe:	2200      	movs	r2, #0
 8012200:	701a      	strb	r2, [r3, #0]
 8012202:	e7d6      	b.n	80121b2 <sniprintf+0x16>
 8012204:	200000b8 	.word	0x200000b8

08012208 <__sread>:
 8012208:	b510      	push	{r4, lr}
 801220a:	460c      	mov	r4, r1
 801220c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012210:	f000 f8b6 	bl	8012380 <_read_r>
 8012214:	2800      	cmp	r0, #0
 8012216:	bfab      	itete	ge
 8012218:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801221a:	89a3      	ldrhlt	r3, [r4, #12]
 801221c:	181b      	addge	r3, r3, r0
 801221e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012222:	bfac      	ite	ge
 8012224:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012226:	81a3      	strhlt	r3, [r4, #12]
 8012228:	bd10      	pop	{r4, pc}

0801222a <__swrite>:
 801222a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801222e:	461f      	mov	r7, r3
 8012230:	898b      	ldrh	r3, [r1, #12]
 8012232:	05db      	lsls	r3, r3, #23
 8012234:	4605      	mov	r5, r0
 8012236:	460c      	mov	r4, r1
 8012238:	4616      	mov	r6, r2
 801223a:	d505      	bpl.n	8012248 <__swrite+0x1e>
 801223c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012240:	2302      	movs	r3, #2
 8012242:	2200      	movs	r2, #0
 8012244:	f000 f88a 	bl	801235c <_lseek_r>
 8012248:	89a3      	ldrh	r3, [r4, #12]
 801224a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801224e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012252:	81a3      	strh	r3, [r4, #12]
 8012254:	4632      	mov	r2, r6
 8012256:	463b      	mov	r3, r7
 8012258:	4628      	mov	r0, r5
 801225a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801225e:	f000 b8a1 	b.w	80123a4 <_write_r>

08012262 <__sseek>:
 8012262:	b510      	push	{r4, lr}
 8012264:	460c      	mov	r4, r1
 8012266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801226a:	f000 f877 	bl	801235c <_lseek_r>
 801226e:	1c43      	adds	r3, r0, #1
 8012270:	89a3      	ldrh	r3, [r4, #12]
 8012272:	bf15      	itete	ne
 8012274:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012276:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801227a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801227e:	81a3      	strheq	r3, [r4, #12]
 8012280:	bf18      	it	ne
 8012282:	81a3      	strhne	r3, [r4, #12]
 8012284:	bd10      	pop	{r4, pc}

08012286 <__sclose>:
 8012286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801228a:	f000 b857 	b.w	801233c <_close_r>

0801228e <memcmp>:
 801228e:	b510      	push	{r4, lr}
 8012290:	3901      	subs	r1, #1
 8012292:	4402      	add	r2, r0
 8012294:	4290      	cmp	r0, r2
 8012296:	d101      	bne.n	801229c <memcmp+0xe>
 8012298:	2000      	movs	r0, #0
 801229a:	e005      	b.n	80122a8 <memcmp+0x1a>
 801229c:	7803      	ldrb	r3, [r0, #0]
 801229e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80122a2:	42a3      	cmp	r3, r4
 80122a4:	d001      	beq.n	80122aa <memcmp+0x1c>
 80122a6:	1b18      	subs	r0, r3, r4
 80122a8:	bd10      	pop	{r4, pc}
 80122aa:	3001      	adds	r0, #1
 80122ac:	e7f2      	b.n	8012294 <memcmp+0x6>

080122ae <memmove>:
 80122ae:	4288      	cmp	r0, r1
 80122b0:	b510      	push	{r4, lr}
 80122b2:	eb01 0402 	add.w	r4, r1, r2
 80122b6:	d902      	bls.n	80122be <memmove+0x10>
 80122b8:	4284      	cmp	r4, r0
 80122ba:	4623      	mov	r3, r4
 80122bc:	d807      	bhi.n	80122ce <memmove+0x20>
 80122be:	1e43      	subs	r3, r0, #1
 80122c0:	42a1      	cmp	r1, r4
 80122c2:	d008      	beq.n	80122d6 <memmove+0x28>
 80122c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122cc:	e7f8      	b.n	80122c0 <memmove+0x12>
 80122ce:	4402      	add	r2, r0
 80122d0:	4601      	mov	r1, r0
 80122d2:	428a      	cmp	r2, r1
 80122d4:	d100      	bne.n	80122d8 <memmove+0x2a>
 80122d6:	bd10      	pop	{r4, pc}
 80122d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122e0:	e7f7      	b.n	80122d2 <memmove+0x24>

080122e2 <memset>:
 80122e2:	4402      	add	r2, r0
 80122e4:	4603      	mov	r3, r0
 80122e6:	4293      	cmp	r3, r2
 80122e8:	d100      	bne.n	80122ec <memset+0xa>
 80122ea:	4770      	bx	lr
 80122ec:	f803 1b01 	strb.w	r1, [r3], #1
 80122f0:	e7f9      	b.n	80122e6 <memset+0x4>

080122f2 <strncmp>:
 80122f2:	b510      	push	{r4, lr}
 80122f4:	b16a      	cbz	r2, 8012312 <strncmp+0x20>
 80122f6:	3901      	subs	r1, #1
 80122f8:	1884      	adds	r4, r0, r2
 80122fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012302:	429a      	cmp	r2, r3
 8012304:	d103      	bne.n	801230e <strncmp+0x1c>
 8012306:	42a0      	cmp	r0, r4
 8012308:	d001      	beq.n	801230e <strncmp+0x1c>
 801230a:	2a00      	cmp	r2, #0
 801230c:	d1f5      	bne.n	80122fa <strncmp+0x8>
 801230e:	1ad0      	subs	r0, r2, r3
 8012310:	bd10      	pop	{r4, pc}
 8012312:	4610      	mov	r0, r2
 8012314:	e7fc      	b.n	8012310 <strncmp+0x1e>

08012316 <strncpy>:
 8012316:	b510      	push	{r4, lr}
 8012318:	3901      	subs	r1, #1
 801231a:	4603      	mov	r3, r0
 801231c:	b132      	cbz	r2, 801232c <strncpy+0x16>
 801231e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012322:	f803 4b01 	strb.w	r4, [r3], #1
 8012326:	3a01      	subs	r2, #1
 8012328:	2c00      	cmp	r4, #0
 801232a:	d1f7      	bne.n	801231c <strncpy+0x6>
 801232c:	441a      	add	r2, r3
 801232e:	2100      	movs	r1, #0
 8012330:	4293      	cmp	r3, r2
 8012332:	d100      	bne.n	8012336 <strncpy+0x20>
 8012334:	bd10      	pop	{r4, pc}
 8012336:	f803 1b01 	strb.w	r1, [r3], #1
 801233a:	e7f9      	b.n	8012330 <strncpy+0x1a>

0801233c <_close_r>:
 801233c:	b538      	push	{r3, r4, r5, lr}
 801233e:	4d06      	ldr	r5, [pc, #24]	@ (8012358 <_close_r+0x1c>)
 8012340:	2300      	movs	r3, #0
 8012342:	4604      	mov	r4, r0
 8012344:	4608      	mov	r0, r1
 8012346:	602b      	str	r3, [r5, #0]
 8012348:	f7ee ff76 	bl	8001238 <_close>
 801234c:	1c43      	adds	r3, r0, #1
 801234e:	d102      	bne.n	8012356 <_close_r+0x1a>
 8012350:	682b      	ldr	r3, [r5, #0]
 8012352:	b103      	cbz	r3, 8012356 <_close_r+0x1a>
 8012354:	6023      	str	r3, [r4, #0]
 8012356:	bd38      	pop	{r3, r4, r5, pc}
 8012358:	20008770 	.word	0x20008770

0801235c <_lseek_r>:
 801235c:	b538      	push	{r3, r4, r5, lr}
 801235e:	4d07      	ldr	r5, [pc, #28]	@ (801237c <_lseek_r+0x20>)
 8012360:	4604      	mov	r4, r0
 8012362:	4608      	mov	r0, r1
 8012364:	4611      	mov	r1, r2
 8012366:	2200      	movs	r2, #0
 8012368:	602a      	str	r2, [r5, #0]
 801236a:	461a      	mov	r2, r3
 801236c:	f7ee ff8b 	bl	8001286 <_lseek>
 8012370:	1c43      	adds	r3, r0, #1
 8012372:	d102      	bne.n	801237a <_lseek_r+0x1e>
 8012374:	682b      	ldr	r3, [r5, #0]
 8012376:	b103      	cbz	r3, 801237a <_lseek_r+0x1e>
 8012378:	6023      	str	r3, [r4, #0]
 801237a:	bd38      	pop	{r3, r4, r5, pc}
 801237c:	20008770 	.word	0x20008770

08012380 <_read_r>:
 8012380:	b538      	push	{r3, r4, r5, lr}
 8012382:	4d07      	ldr	r5, [pc, #28]	@ (80123a0 <_read_r+0x20>)
 8012384:	4604      	mov	r4, r0
 8012386:	4608      	mov	r0, r1
 8012388:	4611      	mov	r1, r2
 801238a:	2200      	movs	r2, #0
 801238c:	602a      	str	r2, [r5, #0]
 801238e:	461a      	mov	r2, r3
 8012390:	f7ee ff19 	bl	80011c6 <_read>
 8012394:	1c43      	adds	r3, r0, #1
 8012396:	d102      	bne.n	801239e <_read_r+0x1e>
 8012398:	682b      	ldr	r3, [r5, #0]
 801239a:	b103      	cbz	r3, 801239e <_read_r+0x1e>
 801239c:	6023      	str	r3, [r4, #0]
 801239e:	bd38      	pop	{r3, r4, r5, pc}
 80123a0:	20008770 	.word	0x20008770

080123a4 <_write_r>:
 80123a4:	b538      	push	{r3, r4, r5, lr}
 80123a6:	4d07      	ldr	r5, [pc, #28]	@ (80123c4 <_write_r+0x20>)
 80123a8:	4604      	mov	r4, r0
 80123aa:	4608      	mov	r0, r1
 80123ac:	4611      	mov	r1, r2
 80123ae:	2200      	movs	r2, #0
 80123b0:	602a      	str	r2, [r5, #0]
 80123b2:	461a      	mov	r2, r3
 80123b4:	f7ee ff24 	bl	8001200 <_write>
 80123b8:	1c43      	adds	r3, r0, #1
 80123ba:	d102      	bne.n	80123c2 <_write_r+0x1e>
 80123bc:	682b      	ldr	r3, [r5, #0]
 80123be:	b103      	cbz	r3, 80123c2 <_write_r+0x1e>
 80123c0:	6023      	str	r3, [r4, #0]
 80123c2:	bd38      	pop	{r3, r4, r5, pc}
 80123c4:	20008770 	.word	0x20008770

080123c8 <__libc_init_array>:
 80123c8:	b570      	push	{r4, r5, r6, lr}
 80123ca:	4d0d      	ldr	r5, [pc, #52]	@ (8012400 <__libc_init_array+0x38>)
 80123cc:	4c0d      	ldr	r4, [pc, #52]	@ (8012404 <__libc_init_array+0x3c>)
 80123ce:	1b64      	subs	r4, r4, r5
 80123d0:	10a4      	asrs	r4, r4, #2
 80123d2:	2600      	movs	r6, #0
 80123d4:	42a6      	cmp	r6, r4
 80123d6:	d109      	bne.n	80123ec <__libc_init_array+0x24>
 80123d8:	4d0b      	ldr	r5, [pc, #44]	@ (8012408 <__libc_init_array+0x40>)
 80123da:	4c0c      	ldr	r4, [pc, #48]	@ (801240c <__libc_init_array+0x44>)
 80123dc:	f000 ffac 	bl	8013338 <_init>
 80123e0:	1b64      	subs	r4, r4, r5
 80123e2:	10a4      	asrs	r4, r4, #2
 80123e4:	2600      	movs	r6, #0
 80123e6:	42a6      	cmp	r6, r4
 80123e8:	d105      	bne.n	80123f6 <__libc_init_array+0x2e>
 80123ea:	bd70      	pop	{r4, r5, r6, pc}
 80123ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80123f0:	4798      	blx	r3
 80123f2:	3601      	adds	r6, #1
 80123f4:	e7ee      	b.n	80123d4 <__libc_init_array+0xc>
 80123f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80123fa:	4798      	blx	r3
 80123fc:	3601      	adds	r6, #1
 80123fe:	e7f2      	b.n	80123e6 <__libc_init_array+0x1e>
 8012400:	080161ac 	.word	0x080161ac
 8012404:	080161ac 	.word	0x080161ac
 8012408:	080161ac 	.word	0x080161ac
 801240c:	080161b0 	.word	0x080161b0

08012410 <__retarget_lock_init_recursive>:
 8012410:	4770      	bx	lr

08012412 <__retarget_lock_acquire_recursive>:
 8012412:	4770      	bx	lr

08012414 <__retarget_lock_release_recursive>:
 8012414:	4770      	bx	lr

08012416 <strcpy>:
 8012416:	4603      	mov	r3, r0
 8012418:	f811 2b01 	ldrb.w	r2, [r1], #1
 801241c:	f803 2b01 	strb.w	r2, [r3], #1
 8012420:	2a00      	cmp	r2, #0
 8012422:	d1f9      	bne.n	8012418 <strcpy+0x2>
 8012424:	4770      	bx	lr

08012426 <memcpy>:
 8012426:	440a      	add	r2, r1
 8012428:	4291      	cmp	r1, r2
 801242a:	f100 33ff 	add.w	r3, r0, #4294967295
 801242e:	d100      	bne.n	8012432 <memcpy+0xc>
 8012430:	4770      	bx	lr
 8012432:	b510      	push	{r4, lr}
 8012434:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012438:	f803 4f01 	strb.w	r4, [r3, #1]!
 801243c:	4291      	cmp	r1, r2
 801243e:	d1f9      	bne.n	8012434 <memcpy+0xe>
 8012440:	bd10      	pop	{r4, pc}

08012442 <abort>:
 8012442:	b508      	push	{r3, lr}
 8012444:	2006      	movs	r0, #6
 8012446:	f000 fe91 	bl	801316c <raise>
 801244a:	2001      	movs	r0, #1
 801244c:	f7ee feb0 	bl	80011b0 <_exit>

08012450 <_free_r>:
 8012450:	b538      	push	{r3, r4, r5, lr}
 8012452:	4605      	mov	r5, r0
 8012454:	2900      	cmp	r1, #0
 8012456:	d041      	beq.n	80124dc <_free_r+0x8c>
 8012458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801245c:	1f0c      	subs	r4, r1, #4
 801245e:	2b00      	cmp	r3, #0
 8012460:	bfb8      	it	lt
 8012462:	18e4      	addlt	r4, r4, r3
 8012464:	f000 f8e8 	bl	8012638 <__malloc_lock>
 8012468:	4a1d      	ldr	r2, [pc, #116]	@ (80124e0 <_free_r+0x90>)
 801246a:	6813      	ldr	r3, [r2, #0]
 801246c:	b933      	cbnz	r3, 801247c <_free_r+0x2c>
 801246e:	6063      	str	r3, [r4, #4]
 8012470:	6014      	str	r4, [r2, #0]
 8012472:	4628      	mov	r0, r5
 8012474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012478:	f000 b8e4 	b.w	8012644 <__malloc_unlock>
 801247c:	42a3      	cmp	r3, r4
 801247e:	d908      	bls.n	8012492 <_free_r+0x42>
 8012480:	6820      	ldr	r0, [r4, #0]
 8012482:	1821      	adds	r1, r4, r0
 8012484:	428b      	cmp	r3, r1
 8012486:	bf01      	itttt	eq
 8012488:	6819      	ldreq	r1, [r3, #0]
 801248a:	685b      	ldreq	r3, [r3, #4]
 801248c:	1809      	addeq	r1, r1, r0
 801248e:	6021      	streq	r1, [r4, #0]
 8012490:	e7ed      	b.n	801246e <_free_r+0x1e>
 8012492:	461a      	mov	r2, r3
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	b10b      	cbz	r3, 801249c <_free_r+0x4c>
 8012498:	42a3      	cmp	r3, r4
 801249a:	d9fa      	bls.n	8012492 <_free_r+0x42>
 801249c:	6811      	ldr	r1, [r2, #0]
 801249e:	1850      	adds	r0, r2, r1
 80124a0:	42a0      	cmp	r0, r4
 80124a2:	d10b      	bne.n	80124bc <_free_r+0x6c>
 80124a4:	6820      	ldr	r0, [r4, #0]
 80124a6:	4401      	add	r1, r0
 80124a8:	1850      	adds	r0, r2, r1
 80124aa:	4283      	cmp	r3, r0
 80124ac:	6011      	str	r1, [r2, #0]
 80124ae:	d1e0      	bne.n	8012472 <_free_r+0x22>
 80124b0:	6818      	ldr	r0, [r3, #0]
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	6053      	str	r3, [r2, #4]
 80124b6:	4408      	add	r0, r1
 80124b8:	6010      	str	r0, [r2, #0]
 80124ba:	e7da      	b.n	8012472 <_free_r+0x22>
 80124bc:	d902      	bls.n	80124c4 <_free_r+0x74>
 80124be:	230c      	movs	r3, #12
 80124c0:	602b      	str	r3, [r5, #0]
 80124c2:	e7d6      	b.n	8012472 <_free_r+0x22>
 80124c4:	6820      	ldr	r0, [r4, #0]
 80124c6:	1821      	adds	r1, r4, r0
 80124c8:	428b      	cmp	r3, r1
 80124ca:	bf04      	itt	eq
 80124cc:	6819      	ldreq	r1, [r3, #0]
 80124ce:	685b      	ldreq	r3, [r3, #4]
 80124d0:	6063      	str	r3, [r4, #4]
 80124d2:	bf04      	itt	eq
 80124d4:	1809      	addeq	r1, r1, r0
 80124d6:	6021      	streq	r1, [r4, #0]
 80124d8:	6054      	str	r4, [r2, #4]
 80124da:	e7ca      	b.n	8012472 <_free_r+0x22>
 80124dc:	bd38      	pop	{r3, r4, r5, pc}
 80124de:	bf00      	nop
 80124e0:	2000877c 	.word	0x2000877c

080124e4 <malloc>:
 80124e4:	4b02      	ldr	r3, [pc, #8]	@ (80124f0 <malloc+0xc>)
 80124e6:	4601      	mov	r1, r0
 80124e8:	6818      	ldr	r0, [r3, #0]
 80124ea:	f000 b825 	b.w	8012538 <_malloc_r>
 80124ee:	bf00      	nop
 80124f0:	200000b8 	.word	0x200000b8

080124f4 <sbrk_aligned>:
 80124f4:	b570      	push	{r4, r5, r6, lr}
 80124f6:	4e0f      	ldr	r6, [pc, #60]	@ (8012534 <sbrk_aligned+0x40>)
 80124f8:	460c      	mov	r4, r1
 80124fa:	6831      	ldr	r1, [r6, #0]
 80124fc:	4605      	mov	r5, r0
 80124fe:	b911      	cbnz	r1, 8012506 <sbrk_aligned+0x12>
 8012500:	f000 fe50 	bl	80131a4 <_sbrk_r>
 8012504:	6030      	str	r0, [r6, #0]
 8012506:	4621      	mov	r1, r4
 8012508:	4628      	mov	r0, r5
 801250a:	f000 fe4b 	bl	80131a4 <_sbrk_r>
 801250e:	1c43      	adds	r3, r0, #1
 8012510:	d103      	bne.n	801251a <sbrk_aligned+0x26>
 8012512:	f04f 34ff 	mov.w	r4, #4294967295
 8012516:	4620      	mov	r0, r4
 8012518:	bd70      	pop	{r4, r5, r6, pc}
 801251a:	1cc4      	adds	r4, r0, #3
 801251c:	f024 0403 	bic.w	r4, r4, #3
 8012520:	42a0      	cmp	r0, r4
 8012522:	d0f8      	beq.n	8012516 <sbrk_aligned+0x22>
 8012524:	1a21      	subs	r1, r4, r0
 8012526:	4628      	mov	r0, r5
 8012528:	f000 fe3c 	bl	80131a4 <_sbrk_r>
 801252c:	3001      	adds	r0, #1
 801252e:	d1f2      	bne.n	8012516 <sbrk_aligned+0x22>
 8012530:	e7ef      	b.n	8012512 <sbrk_aligned+0x1e>
 8012532:	bf00      	nop
 8012534:	20008778 	.word	0x20008778

08012538 <_malloc_r>:
 8012538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801253c:	1ccd      	adds	r5, r1, #3
 801253e:	f025 0503 	bic.w	r5, r5, #3
 8012542:	3508      	adds	r5, #8
 8012544:	2d0c      	cmp	r5, #12
 8012546:	bf38      	it	cc
 8012548:	250c      	movcc	r5, #12
 801254a:	2d00      	cmp	r5, #0
 801254c:	4606      	mov	r6, r0
 801254e:	db01      	blt.n	8012554 <_malloc_r+0x1c>
 8012550:	42a9      	cmp	r1, r5
 8012552:	d904      	bls.n	801255e <_malloc_r+0x26>
 8012554:	230c      	movs	r3, #12
 8012556:	6033      	str	r3, [r6, #0]
 8012558:	2000      	movs	r0, #0
 801255a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801255e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012634 <_malloc_r+0xfc>
 8012562:	f000 f869 	bl	8012638 <__malloc_lock>
 8012566:	f8d8 3000 	ldr.w	r3, [r8]
 801256a:	461c      	mov	r4, r3
 801256c:	bb44      	cbnz	r4, 80125c0 <_malloc_r+0x88>
 801256e:	4629      	mov	r1, r5
 8012570:	4630      	mov	r0, r6
 8012572:	f7ff ffbf 	bl	80124f4 <sbrk_aligned>
 8012576:	1c43      	adds	r3, r0, #1
 8012578:	4604      	mov	r4, r0
 801257a:	d158      	bne.n	801262e <_malloc_r+0xf6>
 801257c:	f8d8 4000 	ldr.w	r4, [r8]
 8012580:	4627      	mov	r7, r4
 8012582:	2f00      	cmp	r7, #0
 8012584:	d143      	bne.n	801260e <_malloc_r+0xd6>
 8012586:	2c00      	cmp	r4, #0
 8012588:	d04b      	beq.n	8012622 <_malloc_r+0xea>
 801258a:	6823      	ldr	r3, [r4, #0]
 801258c:	4639      	mov	r1, r7
 801258e:	4630      	mov	r0, r6
 8012590:	eb04 0903 	add.w	r9, r4, r3
 8012594:	f000 fe06 	bl	80131a4 <_sbrk_r>
 8012598:	4581      	cmp	r9, r0
 801259a:	d142      	bne.n	8012622 <_malloc_r+0xea>
 801259c:	6821      	ldr	r1, [r4, #0]
 801259e:	1a6d      	subs	r5, r5, r1
 80125a0:	4629      	mov	r1, r5
 80125a2:	4630      	mov	r0, r6
 80125a4:	f7ff ffa6 	bl	80124f4 <sbrk_aligned>
 80125a8:	3001      	adds	r0, #1
 80125aa:	d03a      	beq.n	8012622 <_malloc_r+0xea>
 80125ac:	6823      	ldr	r3, [r4, #0]
 80125ae:	442b      	add	r3, r5
 80125b0:	6023      	str	r3, [r4, #0]
 80125b2:	f8d8 3000 	ldr.w	r3, [r8]
 80125b6:	685a      	ldr	r2, [r3, #4]
 80125b8:	bb62      	cbnz	r2, 8012614 <_malloc_r+0xdc>
 80125ba:	f8c8 7000 	str.w	r7, [r8]
 80125be:	e00f      	b.n	80125e0 <_malloc_r+0xa8>
 80125c0:	6822      	ldr	r2, [r4, #0]
 80125c2:	1b52      	subs	r2, r2, r5
 80125c4:	d420      	bmi.n	8012608 <_malloc_r+0xd0>
 80125c6:	2a0b      	cmp	r2, #11
 80125c8:	d917      	bls.n	80125fa <_malloc_r+0xc2>
 80125ca:	1961      	adds	r1, r4, r5
 80125cc:	42a3      	cmp	r3, r4
 80125ce:	6025      	str	r5, [r4, #0]
 80125d0:	bf18      	it	ne
 80125d2:	6059      	strne	r1, [r3, #4]
 80125d4:	6863      	ldr	r3, [r4, #4]
 80125d6:	bf08      	it	eq
 80125d8:	f8c8 1000 	streq.w	r1, [r8]
 80125dc:	5162      	str	r2, [r4, r5]
 80125de:	604b      	str	r3, [r1, #4]
 80125e0:	4630      	mov	r0, r6
 80125e2:	f000 f82f 	bl	8012644 <__malloc_unlock>
 80125e6:	f104 000b 	add.w	r0, r4, #11
 80125ea:	1d23      	adds	r3, r4, #4
 80125ec:	f020 0007 	bic.w	r0, r0, #7
 80125f0:	1ac2      	subs	r2, r0, r3
 80125f2:	bf1c      	itt	ne
 80125f4:	1a1b      	subne	r3, r3, r0
 80125f6:	50a3      	strne	r3, [r4, r2]
 80125f8:	e7af      	b.n	801255a <_malloc_r+0x22>
 80125fa:	6862      	ldr	r2, [r4, #4]
 80125fc:	42a3      	cmp	r3, r4
 80125fe:	bf0c      	ite	eq
 8012600:	f8c8 2000 	streq.w	r2, [r8]
 8012604:	605a      	strne	r2, [r3, #4]
 8012606:	e7eb      	b.n	80125e0 <_malloc_r+0xa8>
 8012608:	4623      	mov	r3, r4
 801260a:	6864      	ldr	r4, [r4, #4]
 801260c:	e7ae      	b.n	801256c <_malloc_r+0x34>
 801260e:	463c      	mov	r4, r7
 8012610:	687f      	ldr	r7, [r7, #4]
 8012612:	e7b6      	b.n	8012582 <_malloc_r+0x4a>
 8012614:	461a      	mov	r2, r3
 8012616:	685b      	ldr	r3, [r3, #4]
 8012618:	42a3      	cmp	r3, r4
 801261a:	d1fb      	bne.n	8012614 <_malloc_r+0xdc>
 801261c:	2300      	movs	r3, #0
 801261e:	6053      	str	r3, [r2, #4]
 8012620:	e7de      	b.n	80125e0 <_malloc_r+0xa8>
 8012622:	230c      	movs	r3, #12
 8012624:	6033      	str	r3, [r6, #0]
 8012626:	4630      	mov	r0, r6
 8012628:	f000 f80c 	bl	8012644 <__malloc_unlock>
 801262c:	e794      	b.n	8012558 <_malloc_r+0x20>
 801262e:	6005      	str	r5, [r0, #0]
 8012630:	e7d6      	b.n	80125e0 <_malloc_r+0xa8>
 8012632:	bf00      	nop
 8012634:	2000877c 	.word	0x2000877c

08012638 <__malloc_lock>:
 8012638:	4801      	ldr	r0, [pc, #4]	@ (8012640 <__malloc_lock+0x8>)
 801263a:	f7ff beea 	b.w	8012412 <__retarget_lock_acquire_recursive>
 801263e:	bf00      	nop
 8012640:	20008774 	.word	0x20008774

08012644 <__malloc_unlock>:
 8012644:	4801      	ldr	r0, [pc, #4]	@ (801264c <__malloc_unlock+0x8>)
 8012646:	f7ff bee5 	b.w	8012414 <__retarget_lock_release_recursive>
 801264a:	bf00      	nop
 801264c:	20008774 	.word	0x20008774

08012650 <__ssputs_r>:
 8012650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012654:	688e      	ldr	r6, [r1, #8]
 8012656:	461f      	mov	r7, r3
 8012658:	42be      	cmp	r6, r7
 801265a:	680b      	ldr	r3, [r1, #0]
 801265c:	4682      	mov	sl, r0
 801265e:	460c      	mov	r4, r1
 8012660:	4690      	mov	r8, r2
 8012662:	d82d      	bhi.n	80126c0 <__ssputs_r+0x70>
 8012664:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012668:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801266c:	d026      	beq.n	80126bc <__ssputs_r+0x6c>
 801266e:	6965      	ldr	r5, [r4, #20]
 8012670:	6909      	ldr	r1, [r1, #16]
 8012672:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012676:	eba3 0901 	sub.w	r9, r3, r1
 801267a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801267e:	1c7b      	adds	r3, r7, #1
 8012680:	444b      	add	r3, r9
 8012682:	106d      	asrs	r5, r5, #1
 8012684:	429d      	cmp	r5, r3
 8012686:	bf38      	it	cc
 8012688:	461d      	movcc	r5, r3
 801268a:	0553      	lsls	r3, r2, #21
 801268c:	d527      	bpl.n	80126de <__ssputs_r+0x8e>
 801268e:	4629      	mov	r1, r5
 8012690:	f7ff ff52 	bl	8012538 <_malloc_r>
 8012694:	4606      	mov	r6, r0
 8012696:	b360      	cbz	r0, 80126f2 <__ssputs_r+0xa2>
 8012698:	6921      	ldr	r1, [r4, #16]
 801269a:	464a      	mov	r2, r9
 801269c:	f7ff fec3 	bl	8012426 <memcpy>
 80126a0:	89a3      	ldrh	r3, [r4, #12]
 80126a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80126a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126aa:	81a3      	strh	r3, [r4, #12]
 80126ac:	6126      	str	r6, [r4, #16]
 80126ae:	6165      	str	r5, [r4, #20]
 80126b0:	444e      	add	r6, r9
 80126b2:	eba5 0509 	sub.w	r5, r5, r9
 80126b6:	6026      	str	r6, [r4, #0]
 80126b8:	60a5      	str	r5, [r4, #8]
 80126ba:	463e      	mov	r6, r7
 80126bc:	42be      	cmp	r6, r7
 80126be:	d900      	bls.n	80126c2 <__ssputs_r+0x72>
 80126c0:	463e      	mov	r6, r7
 80126c2:	6820      	ldr	r0, [r4, #0]
 80126c4:	4632      	mov	r2, r6
 80126c6:	4641      	mov	r1, r8
 80126c8:	f7ff fdf1 	bl	80122ae <memmove>
 80126cc:	68a3      	ldr	r3, [r4, #8]
 80126ce:	1b9b      	subs	r3, r3, r6
 80126d0:	60a3      	str	r3, [r4, #8]
 80126d2:	6823      	ldr	r3, [r4, #0]
 80126d4:	4433      	add	r3, r6
 80126d6:	6023      	str	r3, [r4, #0]
 80126d8:	2000      	movs	r0, #0
 80126da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126de:	462a      	mov	r2, r5
 80126e0:	f000 fd70 	bl	80131c4 <_realloc_r>
 80126e4:	4606      	mov	r6, r0
 80126e6:	2800      	cmp	r0, #0
 80126e8:	d1e0      	bne.n	80126ac <__ssputs_r+0x5c>
 80126ea:	6921      	ldr	r1, [r4, #16]
 80126ec:	4650      	mov	r0, sl
 80126ee:	f7ff feaf 	bl	8012450 <_free_r>
 80126f2:	230c      	movs	r3, #12
 80126f4:	f8ca 3000 	str.w	r3, [sl]
 80126f8:	89a3      	ldrh	r3, [r4, #12]
 80126fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126fe:	81a3      	strh	r3, [r4, #12]
 8012700:	f04f 30ff 	mov.w	r0, #4294967295
 8012704:	e7e9      	b.n	80126da <__ssputs_r+0x8a>
	...

08012708 <_svfiprintf_r>:
 8012708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270c:	4698      	mov	r8, r3
 801270e:	898b      	ldrh	r3, [r1, #12]
 8012710:	061b      	lsls	r3, r3, #24
 8012712:	b09d      	sub	sp, #116	@ 0x74
 8012714:	4607      	mov	r7, r0
 8012716:	460d      	mov	r5, r1
 8012718:	4614      	mov	r4, r2
 801271a:	d510      	bpl.n	801273e <_svfiprintf_r+0x36>
 801271c:	690b      	ldr	r3, [r1, #16]
 801271e:	b973      	cbnz	r3, 801273e <_svfiprintf_r+0x36>
 8012720:	2140      	movs	r1, #64	@ 0x40
 8012722:	f7ff ff09 	bl	8012538 <_malloc_r>
 8012726:	6028      	str	r0, [r5, #0]
 8012728:	6128      	str	r0, [r5, #16]
 801272a:	b930      	cbnz	r0, 801273a <_svfiprintf_r+0x32>
 801272c:	230c      	movs	r3, #12
 801272e:	603b      	str	r3, [r7, #0]
 8012730:	f04f 30ff 	mov.w	r0, #4294967295
 8012734:	b01d      	add	sp, #116	@ 0x74
 8012736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801273a:	2340      	movs	r3, #64	@ 0x40
 801273c:	616b      	str	r3, [r5, #20]
 801273e:	2300      	movs	r3, #0
 8012740:	9309      	str	r3, [sp, #36]	@ 0x24
 8012742:	2320      	movs	r3, #32
 8012744:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012748:	f8cd 800c 	str.w	r8, [sp, #12]
 801274c:	2330      	movs	r3, #48	@ 0x30
 801274e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80128ec <_svfiprintf_r+0x1e4>
 8012752:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012756:	f04f 0901 	mov.w	r9, #1
 801275a:	4623      	mov	r3, r4
 801275c:	469a      	mov	sl, r3
 801275e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012762:	b10a      	cbz	r2, 8012768 <_svfiprintf_r+0x60>
 8012764:	2a25      	cmp	r2, #37	@ 0x25
 8012766:	d1f9      	bne.n	801275c <_svfiprintf_r+0x54>
 8012768:	ebba 0b04 	subs.w	fp, sl, r4
 801276c:	d00b      	beq.n	8012786 <_svfiprintf_r+0x7e>
 801276e:	465b      	mov	r3, fp
 8012770:	4622      	mov	r2, r4
 8012772:	4629      	mov	r1, r5
 8012774:	4638      	mov	r0, r7
 8012776:	f7ff ff6b 	bl	8012650 <__ssputs_r>
 801277a:	3001      	adds	r0, #1
 801277c:	f000 80a7 	beq.w	80128ce <_svfiprintf_r+0x1c6>
 8012780:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012782:	445a      	add	r2, fp
 8012784:	9209      	str	r2, [sp, #36]	@ 0x24
 8012786:	f89a 3000 	ldrb.w	r3, [sl]
 801278a:	2b00      	cmp	r3, #0
 801278c:	f000 809f 	beq.w	80128ce <_svfiprintf_r+0x1c6>
 8012790:	2300      	movs	r3, #0
 8012792:	f04f 32ff 	mov.w	r2, #4294967295
 8012796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801279a:	f10a 0a01 	add.w	sl, sl, #1
 801279e:	9304      	str	r3, [sp, #16]
 80127a0:	9307      	str	r3, [sp, #28]
 80127a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80127a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80127a8:	4654      	mov	r4, sl
 80127aa:	2205      	movs	r2, #5
 80127ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127b0:	484e      	ldr	r0, [pc, #312]	@ (80128ec <_svfiprintf_r+0x1e4>)
 80127b2:	f7ed fd15 	bl	80001e0 <memchr>
 80127b6:	9a04      	ldr	r2, [sp, #16]
 80127b8:	b9d8      	cbnz	r0, 80127f2 <_svfiprintf_r+0xea>
 80127ba:	06d0      	lsls	r0, r2, #27
 80127bc:	bf44      	itt	mi
 80127be:	2320      	movmi	r3, #32
 80127c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127c4:	0711      	lsls	r1, r2, #28
 80127c6:	bf44      	itt	mi
 80127c8:	232b      	movmi	r3, #43	@ 0x2b
 80127ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127ce:	f89a 3000 	ldrb.w	r3, [sl]
 80127d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80127d4:	d015      	beq.n	8012802 <_svfiprintf_r+0xfa>
 80127d6:	9a07      	ldr	r2, [sp, #28]
 80127d8:	4654      	mov	r4, sl
 80127da:	2000      	movs	r0, #0
 80127dc:	f04f 0c0a 	mov.w	ip, #10
 80127e0:	4621      	mov	r1, r4
 80127e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127e6:	3b30      	subs	r3, #48	@ 0x30
 80127e8:	2b09      	cmp	r3, #9
 80127ea:	d94b      	bls.n	8012884 <_svfiprintf_r+0x17c>
 80127ec:	b1b0      	cbz	r0, 801281c <_svfiprintf_r+0x114>
 80127ee:	9207      	str	r2, [sp, #28]
 80127f0:	e014      	b.n	801281c <_svfiprintf_r+0x114>
 80127f2:	eba0 0308 	sub.w	r3, r0, r8
 80127f6:	fa09 f303 	lsl.w	r3, r9, r3
 80127fa:	4313      	orrs	r3, r2
 80127fc:	9304      	str	r3, [sp, #16]
 80127fe:	46a2      	mov	sl, r4
 8012800:	e7d2      	b.n	80127a8 <_svfiprintf_r+0xa0>
 8012802:	9b03      	ldr	r3, [sp, #12]
 8012804:	1d19      	adds	r1, r3, #4
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	9103      	str	r1, [sp, #12]
 801280a:	2b00      	cmp	r3, #0
 801280c:	bfbb      	ittet	lt
 801280e:	425b      	neglt	r3, r3
 8012810:	f042 0202 	orrlt.w	r2, r2, #2
 8012814:	9307      	strge	r3, [sp, #28]
 8012816:	9307      	strlt	r3, [sp, #28]
 8012818:	bfb8      	it	lt
 801281a:	9204      	strlt	r2, [sp, #16]
 801281c:	7823      	ldrb	r3, [r4, #0]
 801281e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012820:	d10a      	bne.n	8012838 <_svfiprintf_r+0x130>
 8012822:	7863      	ldrb	r3, [r4, #1]
 8012824:	2b2a      	cmp	r3, #42	@ 0x2a
 8012826:	d132      	bne.n	801288e <_svfiprintf_r+0x186>
 8012828:	9b03      	ldr	r3, [sp, #12]
 801282a:	1d1a      	adds	r2, r3, #4
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	9203      	str	r2, [sp, #12]
 8012830:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012834:	3402      	adds	r4, #2
 8012836:	9305      	str	r3, [sp, #20]
 8012838:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80128fc <_svfiprintf_r+0x1f4>
 801283c:	7821      	ldrb	r1, [r4, #0]
 801283e:	2203      	movs	r2, #3
 8012840:	4650      	mov	r0, sl
 8012842:	f7ed fccd 	bl	80001e0 <memchr>
 8012846:	b138      	cbz	r0, 8012858 <_svfiprintf_r+0x150>
 8012848:	9b04      	ldr	r3, [sp, #16]
 801284a:	eba0 000a 	sub.w	r0, r0, sl
 801284e:	2240      	movs	r2, #64	@ 0x40
 8012850:	4082      	lsls	r2, r0
 8012852:	4313      	orrs	r3, r2
 8012854:	3401      	adds	r4, #1
 8012856:	9304      	str	r3, [sp, #16]
 8012858:	f814 1b01 	ldrb.w	r1, [r4], #1
 801285c:	4824      	ldr	r0, [pc, #144]	@ (80128f0 <_svfiprintf_r+0x1e8>)
 801285e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012862:	2206      	movs	r2, #6
 8012864:	f7ed fcbc 	bl	80001e0 <memchr>
 8012868:	2800      	cmp	r0, #0
 801286a:	d036      	beq.n	80128da <_svfiprintf_r+0x1d2>
 801286c:	4b21      	ldr	r3, [pc, #132]	@ (80128f4 <_svfiprintf_r+0x1ec>)
 801286e:	bb1b      	cbnz	r3, 80128b8 <_svfiprintf_r+0x1b0>
 8012870:	9b03      	ldr	r3, [sp, #12]
 8012872:	3307      	adds	r3, #7
 8012874:	f023 0307 	bic.w	r3, r3, #7
 8012878:	3308      	adds	r3, #8
 801287a:	9303      	str	r3, [sp, #12]
 801287c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801287e:	4433      	add	r3, r6
 8012880:	9309      	str	r3, [sp, #36]	@ 0x24
 8012882:	e76a      	b.n	801275a <_svfiprintf_r+0x52>
 8012884:	fb0c 3202 	mla	r2, ip, r2, r3
 8012888:	460c      	mov	r4, r1
 801288a:	2001      	movs	r0, #1
 801288c:	e7a8      	b.n	80127e0 <_svfiprintf_r+0xd8>
 801288e:	2300      	movs	r3, #0
 8012890:	3401      	adds	r4, #1
 8012892:	9305      	str	r3, [sp, #20]
 8012894:	4619      	mov	r1, r3
 8012896:	f04f 0c0a 	mov.w	ip, #10
 801289a:	4620      	mov	r0, r4
 801289c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128a0:	3a30      	subs	r2, #48	@ 0x30
 80128a2:	2a09      	cmp	r2, #9
 80128a4:	d903      	bls.n	80128ae <_svfiprintf_r+0x1a6>
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d0c6      	beq.n	8012838 <_svfiprintf_r+0x130>
 80128aa:	9105      	str	r1, [sp, #20]
 80128ac:	e7c4      	b.n	8012838 <_svfiprintf_r+0x130>
 80128ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80128b2:	4604      	mov	r4, r0
 80128b4:	2301      	movs	r3, #1
 80128b6:	e7f0      	b.n	801289a <_svfiprintf_r+0x192>
 80128b8:	ab03      	add	r3, sp, #12
 80128ba:	9300      	str	r3, [sp, #0]
 80128bc:	462a      	mov	r2, r5
 80128be:	4b0e      	ldr	r3, [pc, #56]	@ (80128f8 <_svfiprintf_r+0x1f0>)
 80128c0:	a904      	add	r1, sp, #16
 80128c2:	4638      	mov	r0, r7
 80128c4:	f3af 8000 	nop.w
 80128c8:	1c42      	adds	r2, r0, #1
 80128ca:	4606      	mov	r6, r0
 80128cc:	d1d6      	bne.n	801287c <_svfiprintf_r+0x174>
 80128ce:	89ab      	ldrh	r3, [r5, #12]
 80128d0:	065b      	lsls	r3, r3, #25
 80128d2:	f53f af2d 	bmi.w	8012730 <_svfiprintf_r+0x28>
 80128d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128d8:	e72c      	b.n	8012734 <_svfiprintf_r+0x2c>
 80128da:	ab03      	add	r3, sp, #12
 80128dc:	9300      	str	r3, [sp, #0]
 80128de:	462a      	mov	r2, r5
 80128e0:	4b05      	ldr	r3, [pc, #20]	@ (80128f8 <_svfiprintf_r+0x1f0>)
 80128e2:	a904      	add	r1, sp, #16
 80128e4:	4638      	mov	r0, r7
 80128e6:	f000 f9bb 	bl	8012c60 <_printf_i>
 80128ea:	e7ed      	b.n	80128c8 <_svfiprintf_r+0x1c0>
 80128ec:	0801616f 	.word	0x0801616f
 80128f0:	08016179 	.word	0x08016179
 80128f4:	00000000 	.word	0x00000000
 80128f8:	08012651 	.word	0x08012651
 80128fc:	08016175 	.word	0x08016175

08012900 <__sfputc_r>:
 8012900:	6893      	ldr	r3, [r2, #8]
 8012902:	3b01      	subs	r3, #1
 8012904:	2b00      	cmp	r3, #0
 8012906:	b410      	push	{r4}
 8012908:	6093      	str	r3, [r2, #8]
 801290a:	da08      	bge.n	801291e <__sfputc_r+0x1e>
 801290c:	6994      	ldr	r4, [r2, #24]
 801290e:	42a3      	cmp	r3, r4
 8012910:	db01      	blt.n	8012916 <__sfputc_r+0x16>
 8012912:	290a      	cmp	r1, #10
 8012914:	d103      	bne.n	801291e <__sfputc_r+0x1e>
 8012916:	f85d 4b04 	ldr.w	r4, [sp], #4
 801291a:	f000 bb6b 	b.w	8012ff4 <__swbuf_r>
 801291e:	6813      	ldr	r3, [r2, #0]
 8012920:	1c58      	adds	r0, r3, #1
 8012922:	6010      	str	r0, [r2, #0]
 8012924:	7019      	strb	r1, [r3, #0]
 8012926:	4608      	mov	r0, r1
 8012928:	f85d 4b04 	ldr.w	r4, [sp], #4
 801292c:	4770      	bx	lr

0801292e <__sfputs_r>:
 801292e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012930:	4606      	mov	r6, r0
 8012932:	460f      	mov	r7, r1
 8012934:	4614      	mov	r4, r2
 8012936:	18d5      	adds	r5, r2, r3
 8012938:	42ac      	cmp	r4, r5
 801293a:	d101      	bne.n	8012940 <__sfputs_r+0x12>
 801293c:	2000      	movs	r0, #0
 801293e:	e007      	b.n	8012950 <__sfputs_r+0x22>
 8012940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012944:	463a      	mov	r2, r7
 8012946:	4630      	mov	r0, r6
 8012948:	f7ff ffda 	bl	8012900 <__sfputc_r>
 801294c:	1c43      	adds	r3, r0, #1
 801294e:	d1f3      	bne.n	8012938 <__sfputs_r+0xa>
 8012950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012954 <_vfiprintf_r>:
 8012954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012958:	460d      	mov	r5, r1
 801295a:	b09d      	sub	sp, #116	@ 0x74
 801295c:	4614      	mov	r4, r2
 801295e:	4698      	mov	r8, r3
 8012960:	4606      	mov	r6, r0
 8012962:	b118      	cbz	r0, 801296c <_vfiprintf_r+0x18>
 8012964:	6a03      	ldr	r3, [r0, #32]
 8012966:	b90b      	cbnz	r3, 801296c <_vfiprintf_r+0x18>
 8012968:	f7ff fbbe 	bl	80120e8 <__sinit>
 801296c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801296e:	07d9      	lsls	r1, r3, #31
 8012970:	d405      	bmi.n	801297e <_vfiprintf_r+0x2a>
 8012972:	89ab      	ldrh	r3, [r5, #12]
 8012974:	059a      	lsls	r2, r3, #22
 8012976:	d402      	bmi.n	801297e <_vfiprintf_r+0x2a>
 8012978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801297a:	f7ff fd4a 	bl	8012412 <__retarget_lock_acquire_recursive>
 801297e:	89ab      	ldrh	r3, [r5, #12]
 8012980:	071b      	lsls	r3, r3, #28
 8012982:	d501      	bpl.n	8012988 <_vfiprintf_r+0x34>
 8012984:	692b      	ldr	r3, [r5, #16]
 8012986:	b99b      	cbnz	r3, 80129b0 <_vfiprintf_r+0x5c>
 8012988:	4629      	mov	r1, r5
 801298a:	4630      	mov	r0, r6
 801298c:	f000 fb70 	bl	8013070 <__swsetup_r>
 8012990:	b170      	cbz	r0, 80129b0 <_vfiprintf_r+0x5c>
 8012992:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012994:	07dc      	lsls	r4, r3, #31
 8012996:	d504      	bpl.n	80129a2 <_vfiprintf_r+0x4e>
 8012998:	f04f 30ff 	mov.w	r0, #4294967295
 801299c:	b01d      	add	sp, #116	@ 0x74
 801299e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129a2:	89ab      	ldrh	r3, [r5, #12]
 80129a4:	0598      	lsls	r0, r3, #22
 80129a6:	d4f7      	bmi.n	8012998 <_vfiprintf_r+0x44>
 80129a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129aa:	f7ff fd33 	bl	8012414 <__retarget_lock_release_recursive>
 80129ae:	e7f3      	b.n	8012998 <_vfiprintf_r+0x44>
 80129b0:	2300      	movs	r3, #0
 80129b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80129b4:	2320      	movs	r3, #32
 80129b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80129ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80129be:	2330      	movs	r3, #48	@ 0x30
 80129c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012b70 <_vfiprintf_r+0x21c>
 80129c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80129c8:	f04f 0901 	mov.w	r9, #1
 80129cc:	4623      	mov	r3, r4
 80129ce:	469a      	mov	sl, r3
 80129d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129d4:	b10a      	cbz	r2, 80129da <_vfiprintf_r+0x86>
 80129d6:	2a25      	cmp	r2, #37	@ 0x25
 80129d8:	d1f9      	bne.n	80129ce <_vfiprintf_r+0x7a>
 80129da:	ebba 0b04 	subs.w	fp, sl, r4
 80129de:	d00b      	beq.n	80129f8 <_vfiprintf_r+0xa4>
 80129e0:	465b      	mov	r3, fp
 80129e2:	4622      	mov	r2, r4
 80129e4:	4629      	mov	r1, r5
 80129e6:	4630      	mov	r0, r6
 80129e8:	f7ff ffa1 	bl	801292e <__sfputs_r>
 80129ec:	3001      	adds	r0, #1
 80129ee:	f000 80a7 	beq.w	8012b40 <_vfiprintf_r+0x1ec>
 80129f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129f4:	445a      	add	r2, fp
 80129f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80129f8:	f89a 3000 	ldrb.w	r3, [sl]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	f000 809f 	beq.w	8012b40 <_vfiprintf_r+0x1ec>
 8012a02:	2300      	movs	r3, #0
 8012a04:	f04f 32ff 	mov.w	r2, #4294967295
 8012a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a0c:	f10a 0a01 	add.w	sl, sl, #1
 8012a10:	9304      	str	r3, [sp, #16]
 8012a12:	9307      	str	r3, [sp, #28]
 8012a14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a18:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a1a:	4654      	mov	r4, sl
 8012a1c:	2205      	movs	r2, #5
 8012a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a22:	4853      	ldr	r0, [pc, #332]	@ (8012b70 <_vfiprintf_r+0x21c>)
 8012a24:	f7ed fbdc 	bl	80001e0 <memchr>
 8012a28:	9a04      	ldr	r2, [sp, #16]
 8012a2a:	b9d8      	cbnz	r0, 8012a64 <_vfiprintf_r+0x110>
 8012a2c:	06d1      	lsls	r1, r2, #27
 8012a2e:	bf44      	itt	mi
 8012a30:	2320      	movmi	r3, #32
 8012a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a36:	0713      	lsls	r3, r2, #28
 8012a38:	bf44      	itt	mi
 8012a3a:	232b      	movmi	r3, #43	@ 0x2b
 8012a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a40:	f89a 3000 	ldrb.w	r3, [sl]
 8012a44:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a46:	d015      	beq.n	8012a74 <_vfiprintf_r+0x120>
 8012a48:	9a07      	ldr	r2, [sp, #28]
 8012a4a:	4654      	mov	r4, sl
 8012a4c:	2000      	movs	r0, #0
 8012a4e:	f04f 0c0a 	mov.w	ip, #10
 8012a52:	4621      	mov	r1, r4
 8012a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a58:	3b30      	subs	r3, #48	@ 0x30
 8012a5a:	2b09      	cmp	r3, #9
 8012a5c:	d94b      	bls.n	8012af6 <_vfiprintf_r+0x1a2>
 8012a5e:	b1b0      	cbz	r0, 8012a8e <_vfiprintf_r+0x13a>
 8012a60:	9207      	str	r2, [sp, #28]
 8012a62:	e014      	b.n	8012a8e <_vfiprintf_r+0x13a>
 8012a64:	eba0 0308 	sub.w	r3, r0, r8
 8012a68:	fa09 f303 	lsl.w	r3, r9, r3
 8012a6c:	4313      	orrs	r3, r2
 8012a6e:	9304      	str	r3, [sp, #16]
 8012a70:	46a2      	mov	sl, r4
 8012a72:	e7d2      	b.n	8012a1a <_vfiprintf_r+0xc6>
 8012a74:	9b03      	ldr	r3, [sp, #12]
 8012a76:	1d19      	adds	r1, r3, #4
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	9103      	str	r1, [sp, #12]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	bfbb      	ittet	lt
 8012a80:	425b      	neglt	r3, r3
 8012a82:	f042 0202 	orrlt.w	r2, r2, #2
 8012a86:	9307      	strge	r3, [sp, #28]
 8012a88:	9307      	strlt	r3, [sp, #28]
 8012a8a:	bfb8      	it	lt
 8012a8c:	9204      	strlt	r2, [sp, #16]
 8012a8e:	7823      	ldrb	r3, [r4, #0]
 8012a90:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a92:	d10a      	bne.n	8012aaa <_vfiprintf_r+0x156>
 8012a94:	7863      	ldrb	r3, [r4, #1]
 8012a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a98:	d132      	bne.n	8012b00 <_vfiprintf_r+0x1ac>
 8012a9a:	9b03      	ldr	r3, [sp, #12]
 8012a9c:	1d1a      	adds	r2, r3, #4
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	9203      	str	r2, [sp, #12]
 8012aa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012aa6:	3402      	adds	r4, #2
 8012aa8:	9305      	str	r3, [sp, #20]
 8012aaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012b80 <_vfiprintf_r+0x22c>
 8012aae:	7821      	ldrb	r1, [r4, #0]
 8012ab0:	2203      	movs	r2, #3
 8012ab2:	4650      	mov	r0, sl
 8012ab4:	f7ed fb94 	bl	80001e0 <memchr>
 8012ab8:	b138      	cbz	r0, 8012aca <_vfiprintf_r+0x176>
 8012aba:	9b04      	ldr	r3, [sp, #16]
 8012abc:	eba0 000a 	sub.w	r0, r0, sl
 8012ac0:	2240      	movs	r2, #64	@ 0x40
 8012ac2:	4082      	lsls	r2, r0
 8012ac4:	4313      	orrs	r3, r2
 8012ac6:	3401      	adds	r4, #1
 8012ac8:	9304      	str	r3, [sp, #16]
 8012aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ace:	4829      	ldr	r0, [pc, #164]	@ (8012b74 <_vfiprintf_r+0x220>)
 8012ad0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ad4:	2206      	movs	r2, #6
 8012ad6:	f7ed fb83 	bl	80001e0 <memchr>
 8012ada:	2800      	cmp	r0, #0
 8012adc:	d03f      	beq.n	8012b5e <_vfiprintf_r+0x20a>
 8012ade:	4b26      	ldr	r3, [pc, #152]	@ (8012b78 <_vfiprintf_r+0x224>)
 8012ae0:	bb1b      	cbnz	r3, 8012b2a <_vfiprintf_r+0x1d6>
 8012ae2:	9b03      	ldr	r3, [sp, #12]
 8012ae4:	3307      	adds	r3, #7
 8012ae6:	f023 0307 	bic.w	r3, r3, #7
 8012aea:	3308      	adds	r3, #8
 8012aec:	9303      	str	r3, [sp, #12]
 8012aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012af0:	443b      	add	r3, r7
 8012af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012af4:	e76a      	b.n	80129cc <_vfiprintf_r+0x78>
 8012af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012afa:	460c      	mov	r4, r1
 8012afc:	2001      	movs	r0, #1
 8012afe:	e7a8      	b.n	8012a52 <_vfiprintf_r+0xfe>
 8012b00:	2300      	movs	r3, #0
 8012b02:	3401      	adds	r4, #1
 8012b04:	9305      	str	r3, [sp, #20]
 8012b06:	4619      	mov	r1, r3
 8012b08:	f04f 0c0a 	mov.w	ip, #10
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b12:	3a30      	subs	r2, #48	@ 0x30
 8012b14:	2a09      	cmp	r2, #9
 8012b16:	d903      	bls.n	8012b20 <_vfiprintf_r+0x1cc>
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d0c6      	beq.n	8012aaa <_vfiprintf_r+0x156>
 8012b1c:	9105      	str	r1, [sp, #20]
 8012b1e:	e7c4      	b.n	8012aaa <_vfiprintf_r+0x156>
 8012b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b24:	4604      	mov	r4, r0
 8012b26:	2301      	movs	r3, #1
 8012b28:	e7f0      	b.n	8012b0c <_vfiprintf_r+0x1b8>
 8012b2a:	ab03      	add	r3, sp, #12
 8012b2c:	9300      	str	r3, [sp, #0]
 8012b2e:	462a      	mov	r2, r5
 8012b30:	4b12      	ldr	r3, [pc, #72]	@ (8012b7c <_vfiprintf_r+0x228>)
 8012b32:	a904      	add	r1, sp, #16
 8012b34:	4630      	mov	r0, r6
 8012b36:	f3af 8000 	nop.w
 8012b3a:	4607      	mov	r7, r0
 8012b3c:	1c78      	adds	r0, r7, #1
 8012b3e:	d1d6      	bne.n	8012aee <_vfiprintf_r+0x19a>
 8012b40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b42:	07d9      	lsls	r1, r3, #31
 8012b44:	d405      	bmi.n	8012b52 <_vfiprintf_r+0x1fe>
 8012b46:	89ab      	ldrh	r3, [r5, #12]
 8012b48:	059a      	lsls	r2, r3, #22
 8012b4a:	d402      	bmi.n	8012b52 <_vfiprintf_r+0x1fe>
 8012b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b4e:	f7ff fc61 	bl	8012414 <__retarget_lock_release_recursive>
 8012b52:	89ab      	ldrh	r3, [r5, #12]
 8012b54:	065b      	lsls	r3, r3, #25
 8012b56:	f53f af1f 	bmi.w	8012998 <_vfiprintf_r+0x44>
 8012b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b5c:	e71e      	b.n	801299c <_vfiprintf_r+0x48>
 8012b5e:	ab03      	add	r3, sp, #12
 8012b60:	9300      	str	r3, [sp, #0]
 8012b62:	462a      	mov	r2, r5
 8012b64:	4b05      	ldr	r3, [pc, #20]	@ (8012b7c <_vfiprintf_r+0x228>)
 8012b66:	a904      	add	r1, sp, #16
 8012b68:	4630      	mov	r0, r6
 8012b6a:	f000 f879 	bl	8012c60 <_printf_i>
 8012b6e:	e7e4      	b.n	8012b3a <_vfiprintf_r+0x1e6>
 8012b70:	0801616f 	.word	0x0801616f
 8012b74:	08016179 	.word	0x08016179
 8012b78:	00000000 	.word	0x00000000
 8012b7c:	0801292f 	.word	0x0801292f
 8012b80:	08016175 	.word	0x08016175

08012b84 <_printf_common>:
 8012b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b88:	4616      	mov	r6, r2
 8012b8a:	4698      	mov	r8, r3
 8012b8c:	688a      	ldr	r2, [r1, #8]
 8012b8e:	690b      	ldr	r3, [r1, #16]
 8012b90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012b94:	4293      	cmp	r3, r2
 8012b96:	bfb8      	it	lt
 8012b98:	4613      	movlt	r3, r2
 8012b9a:	6033      	str	r3, [r6, #0]
 8012b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012ba0:	4607      	mov	r7, r0
 8012ba2:	460c      	mov	r4, r1
 8012ba4:	b10a      	cbz	r2, 8012baa <_printf_common+0x26>
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	6033      	str	r3, [r6, #0]
 8012baa:	6823      	ldr	r3, [r4, #0]
 8012bac:	0699      	lsls	r1, r3, #26
 8012bae:	bf42      	ittt	mi
 8012bb0:	6833      	ldrmi	r3, [r6, #0]
 8012bb2:	3302      	addmi	r3, #2
 8012bb4:	6033      	strmi	r3, [r6, #0]
 8012bb6:	6825      	ldr	r5, [r4, #0]
 8012bb8:	f015 0506 	ands.w	r5, r5, #6
 8012bbc:	d106      	bne.n	8012bcc <_printf_common+0x48>
 8012bbe:	f104 0a19 	add.w	sl, r4, #25
 8012bc2:	68e3      	ldr	r3, [r4, #12]
 8012bc4:	6832      	ldr	r2, [r6, #0]
 8012bc6:	1a9b      	subs	r3, r3, r2
 8012bc8:	42ab      	cmp	r3, r5
 8012bca:	dc26      	bgt.n	8012c1a <_printf_common+0x96>
 8012bcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012bd0:	6822      	ldr	r2, [r4, #0]
 8012bd2:	3b00      	subs	r3, #0
 8012bd4:	bf18      	it	ne
 8012bd6:	2301      	movne	r3, #1
 8012bd8:	0692      	lsls	r2, r2, #26
 8012bda:	d42b      	bmi.n	8012c34 <_printf_common+0xb0>
 8012bdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012be0:	4641      	mov	r1, r8
 8012be2:	4638      	mov	r0, r7
 8012be4:	47c8      	blx	r9
 8012be6:	3001      	adds	r0, #1
 8012be8:	d01e      	beq.n	8012c28 <_printf_common+0xa4>
 8012bea:	6823      	ldr	r3, [r4, #0]
 8012bec:	6922      	ldr	r2, [r4, #16]
 8012bee:	f003 0306 	and.w	r3, r3, #6
 8012bf2:	2b04      	cmp	r3, #4
 8012bf4:	bf02      	ittt	eq
 8012bf6:	68e5      	ldreq	r5, [r4, #12]
 8012bf8:	6833      	ldreq	r3, [r6, #0]
 8012bfa:	1aed      	subeq	r5, r5, r3
 8012bfc:	68a3      	ldr	r3, [r4, #8]
 8012bfe:	bf0c      	ite	eq
 8012c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c04:	2500      	movne	r5, #0
 8012c06:	4293      	cmp	r3, r2
 8012c08:	bfc4      	itt	gt
 8012c0a:	1a9b      	subgt	r3, r3, r2
 8012c0c:	18ed      	addgt	r5, r5, r3
 8012c0e:	2600      	movs	r6, #0
 8012c10:	341a      	adds	r4, #26
 8012c12:	42b5      	cmp	r5, r6
 8012c14:	d11a      	bne.n	8012c4c <_printf_common+0xc8>
 8012c16:	2000      	movs	r0, #0
 8012c18:	e008      	b.n	8012c2c <_printf_common+0xa8>
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	4652      	mov	r2, sl
 8012c1e:	4641      	mov	r1, r8
 8012c20:	4638      	mov	r0, r7
 8012c22:	47c8      	blx	r9
 8012c24:	3001      	adds	r0, #1
 8012c26:	d103      	bne.n	8012c30 <_printf_common+0xac>
 8012c28:	f04f 30ff 	mov.w	r0, #4294967295
 8012c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c30:	3501      	adds	r5, #1
 8012c32:	e7c6      	b.n	8012bc2 <_printf_common+0x3e>
 8012c34:	18e1      	adds	r1, r4, r3
 8012c36:	1c5a      	adds	r2, r3, #1
 8012c38:	2030      	movs	r0, #48	@ 0x30
 8012c3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012c3e:	4422      	add	r2, r4
 8012c40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012c44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012c48:	3302      	adds	r3, #2
 8012c4a:	e7c7      	b.n	8012bdc <_printf_common+0x58>
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	4622      	mov	r2, r4
 8012c50:	4641      	mov	r1, r8
 8012c52:	4638      	mov	r0, r7
 8012c54:	47c8      	blx	r9
 8012c56:	3001      	adds	r0, #1
 8012c58:	d0e6      	beq.n	8012c28 <_printf_common+0xa4>
 8012c5a:	3601      	adds	r6, #1
 8012c5c:	e7d9      	b.n	8012c12 <_printf_common+0x8e>
	...

08012c60 <_printf_i>:
 8012c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c64:	7e0f      	ldrb	r7, [r1, #24]
 8012c66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012c68:	2f78      	cmp	r7, #120	@ 0x78
 8012c6a:	4691      	mov	r9, r2
 8012c6c:	4680      	mov	r8, r0
 8012c6e:	460c      	mov	r4, r1
 8012c70:	469a      	mov	sl, r3
 8012c72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012c76:	d807      	bhi.n	8012c88 <_printf_i+0x28>
 8012c78:	2f62      	cmp	r7, #98	@ 0x62
 8012c7a:	d80a      	bhi.n	8012c92 <_printf_i+0x32>
 8012c7c:	2f00      	cmp	r7, #0
 8012c7e:	f000 80d1 	beq.w	8012e24 <_printf_i+0x1c4>
 8012c82:	2f58      	cmp	r7, #88	@ 0x58
 8012c84:	f000 80b8 	beq.w	8012df8 <_printf_i+0x198>
 8012c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012c8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012c90:	e03a      	b.n	8012d08 <_printf_i+0xa8>
 8012c92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012c96:	2b15      	cmp	r3, #21
 8012c98:	d8f6      	bhi.n	8012c88 <_printf_i+0x28>
 8012c9a:	a101      	add	r1, pc, #4	@ (adr r1, 8012ca0 <_printf_i+0x40>)
 8012c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ca0:	08012cf9 	.word	0x08012cf9
 8012ca4:	08012d0d 	.word	0x08012d0d
 8012ca8:	08012c89 	.word	0x08012c89
 8012cac:	08012c89 	.word	0x08012c89
 8012cb0:	08012c89 	.word	0x08012c89
 8012cb4:	08012c89 	.word	0x08012c89
 8012cb8:	08012d0d 	.word	0x08012d0d
 8012cbc:	08012c89 	.word	0x08012c89
 8012cc0:	08012c89 	.word	0x08012c89
 8012cc4:	08012c89 	.word	0x08012c89
 8012cc8:	08012c89 	.word	0x08012c89
 8012ccc:	08012e0b 	.word	0x08012e0b
 8012cd0:	08012d37 	.word	0x08012d37
 8012cd4:	08012dc5 	.word	0x08012dc5
 8012cd8:	08012c89 	.word	0x08012c89
 8012cdc:	08012c89 	.word	0x08012c89
 8012ce0:	08012e2d 	.word	0x08012e2d
 8012ce4:	08012c89 	.word	0x08012c89
 8012ce8:	08012d37 	.word	0x08012d37
 8012cec:	08012c89 	.word	0x08012c89
 8012cf0:	08012c89 	.word	0x08012c89
 8012cf4:	08012dcd 	.word	0x08012dcd
 8012cf8:	6833      	ldr	r3, [r6, #0]
 8012cfa:	1d1a      	adds	r2, r3, #4
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	6032      	str	r2, [r6, #0]
 8012d00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012d08:	2301      	movs	r3, #1
 8012d0a:	e09c      	b.n	8012e46 <_printf_i+0x1e6>
 8012d0c:	6833      	ldr	r3, [r6, #0]
 8012d0e:	6820      	ldr	r0, [r4, #0]
 8012d10:	1d19      	adds	r1, r3, #4
 8012d12:	6031      	str	r1, [r6, #0]
 8012d14:	0606      	lsls	r6, r0, #24
 8012d16:	d501      	bpl.n	8012d1c <_printf_i+0xbc>
 8012d18:	681d      	ldr	r5, [r3, #0]
 8012d1a:	e003      	b.n	8012d24 <_printf_i+0xc4>
 8012d1c:	0645      	lsls	r5, r0, #25
 8012d1e:	d5fb      	bpl.n	8012d18 <_printf_i+0xb8>
 8012d20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012d24:	2d00      	cmp	r5, #0
 8012d26:	da03      	bge.n	8012d30 <_printf_i+0xd0>
 8012d28:	232d      	movs	r3, #45	@ 0x2d
 8012d2a:	426d      	negs	r5, r5
 8012d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d30:	4858      	ldr	r0, [pc, #352]	@ (8012e94 <_printf_i+0x234>)
 8012d32:	230a      	movs	r3, #10
 8012d34:	e011      	b.n	8012d5a <_printf_i+0xfa>
 8012d36:	6821      	ldr	r1, [r4, #0]
 8012d38:	6833      	ldr	r3, [r6, #0]
 8012d3a:	0608      	lsls	r0, r1, #24
 8012d3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012d40:	d402      	bmi.n	8012d48 <_printf_i+0xe8>
 8012d42:	0649      	lsls	r1, r1, #25
 8012d44:	bf48      	it	mi
 8012d46:	b2ad      	uxthmi	r5, r5
 8012d48:	2f6f      	cmp	r7, #111	@ 0x6f
 8012d4a:	4852      	ldr	r0, [pc, #328]	@ (8012e94 <_printf_i+0x234>)
 8012d4c:	6033      	str	r3, [r6, #0]
 8012d4e:	bf14      	ite	ne
 8012d50:	230a      	movne	r3, #10
 8012d52:	2308      	moveq	r3, #8
 8012d54:	2100      	movs	r1, #0
 8012d56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012d5a:	6866      	ldr	r6, [r4, #4]
 8012d5c:	60a6      	str	r6, [r4, #8]
 8012d5e:	2e00      	cmp	r6, #0
 8012d60:	db05      	blt.n	8012d6e <_printf_i+0x10e>
 8012d62:	6821      	ldr	r1, [r4, #0]
 8012d64:	432e      	orrs	r6, r5
 8012d66:	f021 0104 	bic.w	r1, r1, #4
 8012d6a:	6021      	str	r1, [r4, #0]
 8012d6c:	d04b      	beq.n	8012e06 <_printf_i+0x1a6>
 8012d6e:	4616      	mov	r6, r2
 8012d70:	fbb5 f1f3 	udiv	r1, r5, r3
 8012d74:	fb03 5711 	mls	r7, r3, r1, r5
 8012d78:	5dc7      	ldrb	r7, [r0, r7]
 8012d7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012d7e:	462f      	mov	r7, r5
 8012d80:	42bb      	cmp	r3, r7
 8012d82:	460d      	mov	r5, r1
 8012d84:	d9f4      	bls.n	8012d70 <_printf_i+0x110>
 8012d86:	2b08      	cmp	r3, #8
 8012d88:	d10b      	bne.n	8012da2 <_printf_i+0x142>
 8012d8a:	6823      	ldr	r3, [r4, #0]
 8012d8c:	07df      	lsls	r7, r3, #31
 8012d8e:	d508      	bpl.n	8012da2 <_printf_i+0x142>
 8012d90:	6923      	ldr	r3, [r4, #16]
 8012d92:	6861      	ldr	r1, [r4, #4]
 8012d94:	4299      	cmp	r1, r3
 8012d96:	bfde      	ittt	le
 8012d98:	2330      	movle	r3, #48	@ 0x30
 8012d9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012d9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012da2:	1b92      	subs	r2, r2, r6
 8012da4:	6122      	str	r2, [r4, #16]
 8012da6:	f8cd a000 	str.w	sl, [sp]
 8012daa:	464b      	mov	r3, r9
 8012dac:	aa03      	add	r2, sp, #12
 8012dae:	4621      	mov	r1, r4
 8012db0:	4640      	mov	r0, r8
 8012db2:	f7ff fee7 	bl	8012b84 <_printf_common>
 8012db6:	3001      	adds	r0, #1
 8012db8:	d14a      	bne.n	8012e50 <_printf_i+0x1f0>
 8012dba:	f04f 30ff 	mov.w	r0, #4294967295
 8012dbe:	b004      	add	sp, #16
 8012dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dc4:	6823      	ldr	r3, [r4, #0]
 8012dc6:	f043 0320 	orr.w	r3, r3, #32
 8012dca:	6023      	str	r3, [r4, #0]
 8012dcc:	4832      	ldr	r0, [pc, #200]	@ (8012e98 <_printf_i+0x238>)
 8012dce:	2778      	movs	r7, #120	@ 0x78
 8012dd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012dd4:	6823      	ldr	r3, [r4, #0]
 8012dd6:	6831      	ldr	r1, [r6, #0]
 8012dd8:	061f      	lsls	r7, r3, #24
 8012dda:	f851 5b04 	ldr.w	r5, [r1], #4
 8012dde:	d402      	bmi.n	8012de6 <_printf_i+0x186>
 8012de0:	065f      	lsls	r7, r3, #25
 8012de2:	bf48      	it	mi
 8012de4:	b2ad      	uxthmi	r5, r5
 8012de6:	6031      	str	r1, [r6, #0]
 8012de8:	07d9      	lsls	r1, r3, #31
 8012dea:	bf44      	itt	mi
 8012dec:	f043 0320 	orrmi.w	r3, r3, #32
 8012df0:	6023      	strmi	r3, [r4, #0]
 8012df2:	b11d      	cbz	r5, 8012dfc <_printf_i+0x19c>
 8012df4:	2310      	movs	r3, #16
 8012df6:	e7ad      	b.n	8012d54 <_printf_i+0xf4>
 8012df8:	4826      	ldr	r0, [pc, #152]	@ (8012e94 <_printf_i+0x234>)
 8012dfa:	e7e9      	b.n	8012dd0 <_printf_i+0x170>
 8012dfc:	6823      	ldr	r3, [r4, #0]
 8012dfe:	f023 0320 	bic.w	r3, r3, #32
 8012e02:	6023      	str	r3, [r4, #0]
 8012e04:	e7f6      	b.n	8012df4 <_printf_i+0x194>
 8012e06:	4616      	mov	r6, r2
 8012e08:	e7bd      	b.n	8012d86 <_printf_i+0x126>
 8012e0a:	6833      	ldr	r3, [r6, #0]
 8012e0c:	6825      	ldr	r5, [r4, #0]
 8012e0e:	6961      	ldr	r1, [r4, #20]
 8012e10:	1d18      	adds	r0, r3, #4
 8012e12:	6030      	str	r0, [r6, #0]
 8012e14:	062e      	lsls	r6, r5, #24
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	d501      	bpl.n	8012e1e <_printf_i+0x1be>
 8012e1a:	6019      	str	r1, [r3, #0]
 8012e1c:	e002      	b.n	8012e24 <_printf_i+0x1c4>
 8012e1e:	0668      	lsls	r0, r5, #25
 8012e20:	d5fb      	bpl.n	8012e1a <_printf_i+0x1ba>
 8012e22:	8019      	strh	r1, [r3, #0]
 8012e24:	2300      	movs	r3, #0
 8012e26:	6123      	str	r3, [r4, #16]
 8012e28:	4616      	mov	r6, r2
 8012e2a:	e7bc      	b.n	8012da6 <_printf_i+0x146>
 8012e2c:	6833      	ldr	r3, [r6, #0]
 8012e2e:	1d1a      	adds	r2, r3, #4
 8012e30:	6032      	str	r2, [r6, #0]
 8012e32:	681e      	ldr	r6, [r3, #0]
 8012e34:	6862      	ldr	r2, [r4, #4]
 8012e36:	2100      	movs	r1, #0
 8012e38:	4630      	mov	r0, r6
 8012e3a:	f7ed f9d1 	bl	80001e0 <memchr>
 8012e3e:	b108      	cbz	r0, 8012e44 <_printf_i+0x1e4>
 8012e40:	1b80      	subs	r0, r0, r6
 8012e42:	6060      	str	r0, [r4, #4]
 8012e44:	6863      	ldr	r3, [r4, #4]
 8012e46:	6123      	str	r3, [r4, #16]
 8012e48:	2300      	movs	r3, #0
 8012e4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e4e:	e7aa      	b.n	8012da6 <_printf_i+0x146>
 8012e50:	6923      	ldr	r3, [r4, #16]
 8012e52:	4632      	mov	r2, r6
 8012e54:	4649      	mov	r1, r9
 8012e56:	4640      	mov	r0, r8
 8012e58:	47d0      	blx	sl
 8012e5a:	3001      	adds	r0, #1
 8012e5c:	d0ad      	beq.n	8012dba <_printf_i+0x15a>
 8012e5e:	6823      	ldr	r3, [r4, #0]
 8012e60:	079b      	lsls	r3, r3, #30
 8012e62:	d413      	bmi.n	8012e8c <_printf_i+0x22c>
 8012e64:	68e0      	ldr	r0, [r4, #12]
 8012e66:	9b03      	ldr	r3, [sp, #12]
 8012e68:	4298      	cmp	r0, r3
 8012e6a:	bfb8      	it	lt
 8012e6c:	4618      	movlt	r0, r3
 8012e6e:	e7a6      	b.n	8012dbe <_printf_i+0x15e>
 8012e70:	2301      	movs	r3, #1
 8012e72:	4632      	mov	r2, r6
 8012e74:	4649      	mov	r1, r9
 8012e76:	4640      	mov	r0, r8
 8012e78:	47d0      	blx	sl
 8012e7a:	3001      	adds	r0, #1
 8012e7c:	d09d      	beq.n	8012dba <_printf_i+0x15a>
 8012e7e:	3501      	adds	r5, #1
 8012e80:	68e3      	ldr	r3, [r4, #12]
 8012e82:	9903      	ldr	r1, [sp, #12]
 8012e84:	1a5b      	subs	r3, r3, r1
 8012e86:	42ab      	cmp	r3, r5
 8012e88:	dcf2      	bgt.n	8012e70 <_printf_i+0x210>
 8012e8a:	e7eb      	b.n	8012e64 <_printf_i+0x204>
 8012e8c:	2500      	movs	r5, #0
 8012e8e:	f104 0619 	add.w	r6, r4, #25
 8012e92:	e7f5      	b.n	8012e80 <_printf_i+0x220>
 8012e94:	08016180 	.word	0x08016180
 8012e98:	08016191 	.word	0x08016191

08012e9c <__sflush_r>:
 8012e9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea4:	0716      	lsls	r6, r2, #28
 8012ea6:	4605      	mov	r5, r0
 8012ea8:	460c      	mov	r4, r1
 8012eaa:	d454      	bmi.n	8012f56 <__sflush_r+0xba>
 8012eac:	684b      	ldr	r3, [r1, #4]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	dc02      	bgt.n	8012eb8 <__sflush_r+0x1c>
 8012eb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	dd48      	ble.n	8012f4a <__sflush_r+0xae>
 8012eb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012eba:	2e00      	cmp	r6, #0
 8012ebc:	d045      	beq.n	8012f4a <__sflush_r+0xae>
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012ec4:	682f      	ldr	r7, [r5, #0]
 8012ec6:	6a21      	ldr	r1, [r4, #32]
 8012ec8:	602b      	str	r3, [r5, #0]
 8012eca:	d030      	beq.n	8012f2e <__sflush_r+0x92>
 8012ecc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012ece:	89a3      	ldrh	r3, [r4, #12]
 8012ed0:	0759      	lsls	r1, r3, #29
 8012ed2:	d505      	bpl.n	8012ee0 <__sflush_r+0x44>
 8012ed4:	6863      	ldr	r3, [r4, #4]
 8012ed6:	1ad2      	subs	r2, r2, r3
 8012ed8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012eda:	b10b      	cbz	r3, 8012ee0 <__sflush_r+0x44>
 8012edc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012ede:	1ad2      	subs	r2, r2, r3
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012ee4:	6a21      	ldr	r1, [r4, #32]
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	47b0      	blx	r6
 8012eea:	1c43      	adds	r3, r0, #1
 8012eec:	89a3      	ldrh	r3, [r4, #12]
 8012eee:	d106      	bne.n	8012efe <__sflush_r+0x62>
 8012ef0:	6829      	ldr	r1, [r5, #0]
 8012ef2:	291d      	cmp	r1, #29
 8012ef4:	d82b      	bhi.n	8012f4e <__sflush_r+0xb2>
 8012ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8012fa0 <__sflush_r+0x104>)
 8012ef8:	40ca      	lsrs	r2, r1
 8012efa:	07d6      	lsls	r6, r2, #31
 8012efc:	d527      	bpl.n	8012f4e <__sflush_r+0xb2>
 8012efe:	2200      	movs	r2, #0
 8012f00:	6062      	str	r2, [r4, #4]
 8012f02:	04d9      	lsls	r1, r3, #19
 8012f04:	6922      	ldr	r2, [r4, #16]
 8012f06:	6022      	str	r2, [r4, #0]
 8012f08:	d504      	bpl.n	8012f14 <__sflush_r+0x78>
 8012f0a:	1c42      	adds	r2, r0, #1
 8012f0c:	d101      	bne.n	8012f12 <__sflush_r+0x76>
 8012f0e:	682b      	ldr	r3, [r5, #0]
 8012f10:	b903      	cbnz	r3, 8012f14 <__sflush_r+0x78>
 8012f12:	6560      	str	r0, [r4, #84]	@ 0x54
 8012f14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f16:	602f      	str	r7, [r5, #0]
 8012f18:	b1b9      	cbz	r1, 8012f4a <__sflush_r+0xae>
 8012f1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f1e:	4299      	cmp	r1, r3
 8012f20:	d002      	beq.n	8012f28 <__sflush_r+0x8c>
 8012f22:	4628      	mov	r0, r5
 8012f24:	f7ff fa94 	bl	8012450 <_free_r>
 8012f28:	2300      	movs	r3, #0
 8012f2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f2c:	e00d      	b.n	8012f4a <__sflush_r+0xae>
 8012f2e:	2301      	movs	r3, #1
 8012f30:	4628      	mov	r0, r5
 8012f32:	47b0      	blx	r6
 8012f34:	4602      	mov	r2, r0
 8012f36:	1c50      	adds	r0, r2, #1
 8012f38:	d1c9      	bne.n	8012ece <__sflush_r+0x32>
 8012f3a:	682b      	ldr	r3, [r5, #0]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d0c6      	beq.n	8012ece <__sflush_r+0x32>
 8012f40:	2b1d      	cmp	r3, #29
 8012f42:	d001      	beq.n	8012f48 <__sflush_r+0xac>
 8012f44:	2b16      	cmp	r3, #22
 8012f46:	d11e      	bne.n	8012f86 <__sflush_r+0xea>
 8012f48:	602f      	str	r7, [r5, #0]
 8012f4a:	2000      	movs	r0, #0
 8012f4c:	e022      	b.n	8012f94 <__sflush_r+0xf8>
 8012f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f52:	b21b      	sxth	r3, r3
 8012f54:	e01b      	b.n	8012f8e <__sflush_r+0xf2>
 8012f56:	690f      	ldr	r7, [r1, #16]
 8012f58:	2f00      	cmp	r7, #0
 8012f5a:	d0f6      	beq.n	8012f4a <__sflush_r+0xae>
 8012f5c:	0793      	lsls	r3, r2, #30
 8012f5e:	680e      	ldr	r6, [r1, #0]
 8012f60:	bf08      	it	eq
 8012f62:	694b      	ldreq	r3, [r1, #20]
 8012f64:	600f      	str	r7, [r1, #0]
 8012f66:	bf18      	it	ne
 8012f68:	2300      	movne	r3, #0
 8012f6a:	eba6 0807 	sub.w	r8, r6, r7
 8012f6e:	608b      	str	r3, [r1, #8]
 8012f70:	f1b8 0f00 	cmp.w	r8, #0
 8012f74:	dde9      	ble.n	8012f4a <__sflush_r+0xae>
 8012f76:	6a21      	ldr	r1, [r4, #32]
 8012f78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012f7a:	4643      	mov	r3, r8
 8012f7c:	463a      	mov	r2, r7
 8012f7e:	4628      	mov	r0, r5
 8012f80:	47b0      	blx	r6
 8012f82:	2800      	cmp	r0, #0
 8012f84:	dc08      	bgt.n	8012f98 <__sflush_r+0xfc>
 8012f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f8e:	81a3      	strh	r3, [r4, #12]
 8012f90:	f04f 30ff 	mov.w	r0, #4294967295
 8012f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f98:	4407      	add	r7, r0
 8012f9a:	eba8 0800 	sub.w	r8, r8, r0
 8012f9e:	e7e7      	b.n	8012f70 <__sflush_r+0xd4>
 8012fa0:	20400001 	.word	0x20400001

08012fa4 <_fflush_r>:
 8012fa4:	b538      	push	{r3, r4, r5, lr}
 8012fa6:	690b      	ldr	r3, [r1, #16]
 8012fa8:	4605      	mov	r5, r0
 8012faa:	460c      	mov	r4, r1
 8012fac:	b913      	cbnz	r3, 8012fb4 <_fflush_r+0x10>
 8012fae:	2500      	movs	r5, #0
 8012fb0:	4628      	mov	r0, r5
 8012fb2:	bd38      	pop	{r3, r4, r5, pc}
 8012fb4:	b118      	cbz	r0, 8012fbe <_fflush_r+0x1a>
 8012fb6:	6a03      	ldr	r3, [r0, #32]
 8012fb8:	b90b      	cbnz	r3, 8012fbe <_fflush_r+0x1a>
 8012fba:	f7ff f895 	bl	80120e8 <__sinit>
 8012fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d0f3      	beq.n	8012fae <_fflush_r+0xa>
 8012fc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012fc8:	07d0      	lsls	r0, r2, #31
 8012fca:	d404      	bmi.n	8012fd6 <_fflush_r+0x32>
 8012fcc:	0599      	lsls	r1, r3, #22
 8012fce:	d402      	bmi.n	8012fd6 <_fflush_r+0x32>
 8012fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012fd2:	f7ff fa1e 	bl	8012412 <__retarget_lock_acquire_recursive>
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	4621      	mov	r1, r4
 8012fda:	f7ff ff5f 	bl	8012e9c <__sflush_r>
 8012fde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012fe0:	07da      	lsls	r2, r3, #31
 8012fe2:	4605      	mov	r5, r0
 8012fe4:	d4e4      	bmi.n	8012fb0 <_fflush_r+0xc>
 8012fe6:	89a3      	ldrh	r3, [r4, #12]
 8012fe8:	059b      	lsls	r3, r3, #22
 8012fea:	d4e1      	bmi.n	8012fb0 <_fflush_r+0xc>
 8012fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012fee:	f7ff fa11 	bl	8012414 <__retarget_lock_release_recursive>
 8012ff2:	e7dd      	b.n	8012fb0 <_fflush_r+0xc>

08012ff4 <__swbuf_r>:
 8012ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ff6:	460e      	mov	r6, r1
 8012ff8:	4614      	mov	r4, r2
 8012ffa:	4605      	mov	r5, r0
 8012ffc:	b118      	cbz	r0, 8013006 <__swbuf_r+0x12>
 8012ffe:	6a03      	ldr	r3, [r0, #32]
 8013000:	b90b      	cbnz	r3, 8013006 <__swbuf_r+0x12>
 8013002:	f7ff f871 	bl	80120e8 <__sinit>
 8013006:	69a3      	ldr	r3, [r4, #24]
 8013008:	60a3      	str	r3, [r4, #8]
 801300a:	89a3      	ldrh	r3, [r4, #12]
 801300c:	071a      	lsls	r2, r3, #28
 801300e:	d501      	bpl.n	8013014 <__swbuf_r+0x20>
 8013010:	6923      	ldr	r3, [r4, #16]
 8013012:	b943      	cbnz	r3, 8013026 <__swbuf_r+0x32>
 8013014:	4621      	mov	r1, r4
 8013016:	4628      	mov	r0, r5
 8013018:	f000 f82a 	bl	8013070 <__swsetup_r>
 801301c:	b118      	cbz	r0, 8013026 <__swbuf_r+0x32>
 801301e:	f04f 37ff 	mov.w	r7, #4294967295
 8013022:	4638      	mov	r0, r7
 8013024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013026:	6823      	ldr	r3, [r4, #0]
 8013028:	6922      	ldr	r2, [r4, #16]
 801302a:	1a98      	subs	r0, r3, r2
 801302c:	6963      	ldr	r3, [r4, #20]
 801302e:	b2f6      	uxtb	r6, r6
 8013030:	4283      	cmp	r3, r0
 8013032:	4637      	mov	r7, r6
 8013034:	dc05      	bgt.n	8013042 <__swbuf_r+0x4e>
 8013036:	4621      	mov	r1, r4
 8013038:	4628      	mov	r0, r5
 801303a:	f7ff ffb3 	bl	8012fa4 <_fflush_r>
 801303e:	2800      	cmp	r0, #0
 8013040:	d1ed      	bne.n	801301e <__swbuf_r+0x2a>
 8013042:	68a3      	ldr	r3, [r4, #8]
 8013044:	3b01      	subs	r3, #1
 8013046:	60a3      	str	r3, [r4, #8]
 8013048:	6823      	ldr	r3, [r4, #0]
 801304a:	1c5a      	adds	r2, r3, #1
 801304c:	6022      	str	r2, [r4, #0]
 801304e:	701e      	strb	r6, [r3, #0]
 8013050:	6962      	ldr	r2, [r4, #20]
 8013052:	1c43      	adds	r3, r0, #1
 8013054:	429a      	cmp	r2, r3
 8013056:	d004      	beq.n	8013062 <__swbuf_r+0x6e>
 8013058:	89a3      	ldrh	r3, [r4, #12]
 801305a:	07db      	lsls	r3, r3, #31
 801305c:	d5e1      	bpl.n	8013022 <__swbuf_r+0x2e>
 801305e:	2e0a      	cmp	r6, #10
 8013060:	d1df      	bne.n	8013022 <__swbuf_r+0x2e>
 8013062:	4621      	mov	r1, r4
 8013064:	4628      	mov	r0, r5
 8013066:	f7ff ff9d 	bl	8012fa4 <_fflush_r>
 801306a:	2800      	cmp	r0, #0
 801306c:	d0d9      	beq.n	8013022 <__swbuf_r+0x2e>
 801306e:	e7d6      	b.n	801301e <__swbuf_r+0x2a>

08013070 <__swsetup_r>:
 8013070:	b538      	push	{r3, r4, r5, lr}
 8013072:	4b29      	ldr	r3, [pc, #164]	@ (8013118 <__swsetup_r+0xa8>)
 8013074:	4605      	mov	r5, r0
 8013076:	6818      	ldr	r0, [r3, #0]
 8013078:	460c      	mov	r4, r1
 801307a:	b118      	cbz	r0, 8013084 <__swsetup_r+0x14>
 801307c:	6a03      	ldr	r3, [r0, #32]
 801307e:	b90b      	cbnz	r3, 8013084 <__swsetup_r+0x14>
 8013080:	f7ff f832 	bl	80120e8 <__sinit>
 8013084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013088:	0719      	lsls	r1, r3, #28
 801308a:	d422      	bmi.n	80130d2 <__swsetup_r+0x62>
 801308c:	06da      	lsls	r2, r3, #27
 801308e:	d407      	bmi.n	80130a0 <__swsetup_r+0x30>
 8013090:	2209      	movs	r2, #9
 8013092:	602a      	str	r2, [r5, #0]
 8013094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013098:	81a3      	strh	r3, [r4, #12]
 801309a:	f04f 30ff 	mov.w	r0, #4294967295
 801309e:	e033      	b.n	8013108 <__swsetup_r+0x98>
 80130a0:	0758      	lsls	r0, r3, #29
 80130a2:	d512      	bpl.n	80130ca <__swsetup_r+0x5a>
 80130a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80130a6:	b141      	cbz	r1, 80130ba <__swsetup_r+0x4a>
 80130a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80130ac:	4299      	cmp	r1, r3
 80130ae:	d002      	beq.n	80130b6 <__swsetup_r+0x46>
 80130b0:	4628      	mov	r0, r5
 80130b2:	f7ff f9cd 	bl	8012450 <_free_r>
 80130b6:	2300      	movs	r3, #0
 80130b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80130ba:	89a3      	ldrh	r3, [r4, #12]
 80130bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80130c0:	81a3      	strh	r3, [r4, #12]
 80130c2:	2300      	movs	r3, #0
 80130c4:	6063      	str	r3, [r4, #4]
 80130c6:	6923      	ldr	r3, [r4, #16]
 80130c8:	6023      	str	r3, [r4, #0]
 80130ca:	89a3      	ldrh	r3, [r4, #12]
 80130cc:	f043 0308 	orr.w	r3, r3, #8
 80130d0:	81a3      	strh	r3, [r4, #12]
 80130d2:	6923      	ldr	r3, [r4, #16]
 80130d4:	b94b      	cbnz	r3, 80130ea <__swsetup_r+0x7a>
 80130d6:	89a3      	ldrh	r3, [r4, #12]
 80130d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80130dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130e0:	d003      	beq.n	80130ea <__swsetup_r+0x7a>
 80130e2:	4621      	mov	r1, r4
 80130e4:	4628      	mov	r0, r5
 80130e6:	f000 f8c1 	bl	801326c <__smakebuf_r>
 80130ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130ee:	f013 0201 	ands.w	r2, r3, #1
 80130f2:	d00a      	beq.n	801310a <__swsetup_r+0x9a>
 80130f4:	2200      	movs	r2, #0
 80130f6:	60a2      	str	r2, [r4, #8]
 80130f8:	6962      	ldr	r2, [r4, #20]
 80130fa:	4252      	negs	r2, r2
 80130fc:	61a2      	str	r2, [r4, #24]
 80130fe:	6922      	ldr	r2, [r4, #16]
 8013100:	b942      	cbnz	r2, 8013114 <__swsetup_r+0xa4>
 8013102:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013106:	d1c5      	bne.n	8013094 <__swsetup_r+0x24>
 8013108:	bd38      	pop	{r3, r4, r5, pc}
 801310a:	0799      	lsls	r1, r3, #30
 801310c:	bf58      	it	pl
 801310e:	6962      	ldrpl	r2, [r4, #20]
 8013110:	60a2      	str	r2, [r4, #8]
 8013112:	e7f4      	b.n	80130fe <__swsetup_r+0x8e>
 8013114:	2000      	movs	r0, #0
 8013116:	e7f7      	b.n	8013108 <__swsetup_r+0x98>
 8013118:	200000b8 	.word	0x200000b8

0801311c <_raise_r>:
 801311c:	291f      	cmp	r1, #31
 801311e:	b538      	push	{r3, r4, r5, lr}
 8013120:	4605      	mov	r5, r0
 8013122:	460c      	mov	r4, r1
 8013124:	d904      	bls.n	8013130 <_raise_r+0x14>
 8013126:	2316      	movs	r3, #22
 8013128:	6003      	str	r3, [r0, #0]
 801312a:	f04f 30ff 	mov.w	r0, #4294967295
 801312e:	bd38      	pop	{r3, r4, r5, pc}
 8013130:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013132:	b112      	cbz	r2, 801313a <_raise_r+0x1e>
 8013134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013138:	b94b      	cbnz	r3, 801314e <_raise_r+0x32>
 801313a:	4628      	mov	r0, r5
 801313c:	f000 f830 	bl	80131a0 <_getpid_r>
 8013140:	4622      	mov	r2, r4
 8013142:	4601      	mov	r1, r0
 8013144:	4628      	mov	r0, r5
 8013146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801314a:	f000 b817 	b.w	801317c <_kill_r>
 801314e:	2b01      	cmp	r3, #1
 8013150:	d00a      	beq.n	8013168 <_raise_r+0x4c>
 8013152:	1c59      	adds	r1, r3, #1
 8013154:	d103      	bne.n	801315e <_raise_r+0x42>
 8013156:	2316      	movs	r3, #22
 8013158:	6003      	str	r3, [r0, #0]
 801315a:	2001      	movs	r0, #1
 801315c:	e7e7      	b.n	801312e <_raise_r+0x12>
 801315e:	2100      	movs	r1, #0
 8013160:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013164:	4620      	mov	r0, r4
 8013166:	4798      	blx	r3
 8013168:	2000      	movs	r0, #0
 801316a:	e7e0      	b.n	801312e <_raise_r+0x12>

0801316c <raise>:
 801316c:	4b02      	ldr	r3, [pc, #8]	@ (8013178 <raise+0xc>)
 801316e:	4601      	mov	r1, r0
 8013170:	6818      	ldr	r0, [r3, #0]
 8013172:	f7ff bfd3 	b.w	801311c <_raise_r>
 8013176:	bf00      	nop
 8013178:	200000b8 	.word	0x200000b8

0801317c <_kill_r>:
 801317c:	b538      	push	{r3, r4, r5, lr}
 801317e:	4d07      	ldr	r5, [pc, #28]	@ (801319c <_kill_r+0x20>)
 8013180:	2300      	movs	r3, #0
 8013182:	4604      	mov	r4, r0
 8013184:	4608      	mov	r0, r1
 8013186:	4611      	mov	r1, r2
 8013188:	602b      	str	r3, [r5, #0]
 801318a:	f7ed ffff 	bl	800118c <_kill>
 801318e:	1c43      	adds	r3, r0, #1
 8013190:	d102      	bne.n	8013198 <_kill_r+0x1c>
 8013192:	682b      	ldr	r3, [r5, #0]
 8013194:	b103      	cbz	r3, 8013198 <_kill_r+0x1c>
 8013196:	6023      	str	r3, [r4, #0]
 8013198:	bd38      	pop	{r3, r4, r5, pc}
 801319a:	bf00      	nop
 801319c:	20008770 	.word	0x20008770

080131a0 <_getpid_r>:
 80131a0:	f7ed bfec 	b.w	800117c <_getpid>

080131a4 <_sbrk_r>:
 80131a4:	b538      	push	{r3, r4, r5, lr}
 80131a6:	4d06      	ldr	r5, [pc, #24]	@ (80131c0 <_sbrk_r+0x1c>)
 80131a8:	2300      	movs	r3, #0
 80131aa:	4604      	mov	r4, r0
 80131ac:	4608      	mov	r0, r1
 80131ae:	602b      	str	r3, [r5, #0]
 80131b0:	f7ee f876 	bl	80012a0 <_sbrk>
 80131b4:	1c43      	adds	r3, r0, #1
 80131b6:	d102      	bne.n	80131be <_sbrk_r+0x1a>
 80131b8:	682b      	ldr	r3, [r5, #0]
 80131ba:	b103      	cbz	r3, 80131be <_sbrk_r+0x1a>
 80131bc:	6023      	str	r3, [r4, #0]
 80131be:	bd38      	pop	{r3, r4, r5, pc}
 80131c0:	20008770 	.word	0x20008770

080131c4 <_realloc_r>:
 80131c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131c8:	4607      	mov	r7, r0
 80131ca:	4614      	mov	r4, r2
 80131cc:	460d      	mov	r5, r1
 80131ce:	b921      	cbnz	r1, 80131da <_realloc_r+0x16>
 80131d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131d4:	4611      	mov	r1, r2
 80131d6:	f7ff b9af 	b.w	8012538 <_malloc_r>
 80131da:	b92a      	cbnz	r2, 80131e8 <_realloc_r+0x24>
 80131dc:	f7ff f938 	bl	8012450 <_free_r>
 80131e0:	4625      	mov	r5, r4
 80131e2:	4628      	mov	r0, r5
 80131e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131e8:	f000 f89e 	bl	8013328 <_malloc_usable_size_r>
 80131ec:	4284      	cmp	r4, r0
 80131ee:	4606      	mov	r6, r0
 80131f0:	d802      	bhi.n	80131f8 <_realloc_r+0x34>
 80131f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80131f6:	d8f4      	bhi.n	80131e2 <_realloc_r+0x1e>
 80131f8:	4621      	mov	r1, r4
 80131fa:	4638      	mov	r0, r7
 80131fc:	f7ff f99c 	bl	8012538 <_malloc_r>
 8013200:	4680      	mov	r8, r0
 8013202:	b908      	cbnz	r0, 8013208 <_realloc_r+0x44>
 8013204:	4645      	mov	r5, r8
 8013206:	e7ec      	b.n	80131e2 <_realloc_r+0x1e>
 8013208:	42b4      	cmp	r4, r6
 801320a:	4622      	mov	r2, r4
 801320c:	4629      	mov	r1, r5
 801320e:	bf28      	it	cs
 8013210:	4632      	movcs	r2, r6
 8013212:	f7ff f908 	bl	8012426 <memcpy>
 8013216:	4629      	mov	r1, r5
 8013218:	4638      	mov	r0, r7
 801321a:	f7ff f919 	bl	8012450 <_free_r>
 801321e:	e7f1      	b.n	8013204 <_realloc_r+0x40>

08013220 <__swhatbuf_r>:
 8013220:	b570      	push	{r4, r5, r6, lr}
 8013222:	460c      	mov	r4, r1
 8013224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013228:	2900      	cmp	r1, #0
 801322a:	b096      	sub	sp, #88	@ 0x58
 801322c:	4615      	mov	r5, r2
 801322e:	461e      	mov	r6, r3
 8013230:	da0d      	bge.n	801324e <__swhatbuf_r+0x2e>
 8013232:	89a3      	ldrh	r3, [r4, #12]
 8013234:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013238:	f04f 0100 	mov.w	r1, #0
 801323c:	bf14      	ite	ne
 801323e:	2340      	movne	r3, #64	@ 0x40
 8013240:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013244:	2000      	movs	r0, #0
 8013246:	6031      	str	r1, [r6, #0]
 8013248:	602b      	str	r3, [r5, #0]
 801324a:	b016      	add	sp, #88	@ 0x58
 801324c:	bd70      	pop	{r4, r5, r6, pc}
 801324e:	466a      	mov	r2, sp
 8013250:	f000 f848 	bl	80132e4 <_fstat_r>
 8013254:	2800      	cmp	r0, #0
 8013256:	dbec      	blt.n	8013232 <__swhatbuf_r+0x12>
 8013258:	9901      	ldr	r1, [sp, #4]
 801325a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801325e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013262:	4259      	negs	r1, r3
 8013264:	4159      	adcs	r1, r3
 8013266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801326a:	e7eb      	b.n	8013244 <__swhatbuf_r+0x24>

0801326c <__smakebuf_r>:
 801326c:	898b      	ldrh	r3, [r1, #12]
 801326e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013270:	079d      	lsls	r5, r3, #30
 8013272:	4606      	mov	r6, r0
 8013274:	460c      	mov	r4, r1
 8013276:	d507      	bpl.n	8013288 <__smakebuf_r+0x1c>
 8013278:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801327c:	6023      	str	r3, [r4, #0]
 801327e:	6123      	str	r3, [r4, #16]
 8013280:	2301      	movs	r3, #1
 8013282:	6163      	str	r3, [r4, #20]
 8013284:	b003      	add	sp, #12
 8013286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013288:	ab01      	add	r3, sp, #4
 801328a:	466a      	mov	r2, sp
 801328c:	f7ff ffc8 	bl	8013220 <__swhatbuf_r>
 8013290:	9f00      	ldr	r7, [sp, #0]
 8013292:	4605      	mov	r5, r0
 8013294:	4639      	mov	r1, r7
 8013296:	4630      	mov	r0, r6
 8013298:	f7ff f94e 	bl	8012538 <_malloc_r>
 801329c:	b948      	cbnz	r0, 80132b2 <__smakebuf_r+0x46>
 801329e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132a2:	059a      	lsls	r2, r3, #22
 80132a4:	d4ee      	bmi.n	8013284 <__smakebuf_r+0x18>
 80132a6:	f023 0303 	bic.w	r3, r3, #3
 80132aa:	f043 0302 	orr.w	r3, r3, #2
 80132ae:	81a3      	strh	r3, [r4, #12]
 80132b0:	e7e2      	b.n	8013278 <__smakebuf_r+0xc>
 80132b2:	89a3      	ldrh	r3, [r4, #12]
 80132b4:	6020      	str	r0, [r4, #0]
 80132b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132ba:	81a3      	strh	r3, [r4, #12]
 80132bc:	9b01      	ldr	r3, [sp, #4]
 80132be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80132c2:	b15b      	cbz	r3, 80132dc <__smakebuf_r+0x70>
 80132c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132c8:	4630      	mov	r0, r6
 80132ca:	f000 f81d 	bl	8013308 <_isatty_r>
 80132ce:	b128      	cbz	r0, 80132dc <__smakebuf_r+0x70>
 80132d0:	89a3      	ldrh	r3, [r4, #12]
 80132d2:	f023 0303 	bic.w	r3, r3, #3
 80132d6:	f043 0301 	orr.w	r3, r3, #1
 80132da:	81a3      	strh	r3, [r4, #12]
 80132dc:	89a3      	ldrh	r3, [r4, #12]
 80132de:	431d      	orrs	r5, r3
 80132e0:	81a5      	strh	r5, [r4, #12]
 80132e2:	e7cf      	b.n	8013284 <__smakebuf_r+0x18>

080132e4 <_fstat_r>:
 80132e4:	b538      	push	{r3, r4, r5, lr}
 80132e6:	4d07      	ldr	r5, [pc, #28]	@ (8013304 <_fstat_r+0x20>)
 80132e8:	2300      	movs	r3, #0
 80132ea:	4604      	mov	r4, r0
 80132ec:	4608      	mov	r0, r1
 80132ee:	4611      	mov	r1, r2
 80132f0:	602b      	str	r3, [r5, #0]
 80132f2:	f7ed ffad 	bl	8001250 <_fstat>
 80132f6:	1c43      	adds	r3, r0, #1
 80132f8:	d102      	bne.n	8013300 <_fstat_r+0x1c>
 80132fa:	682b      	ldr	r3, [r5, #0]
 80132fc:	b103      	cbz	r3, 8013300 <_fstat_r+0x1c>
 80132fe:	6023      	str	r3, [r4, #0]
 8013300:	bd38      	pop	{r3, r4, r5, pc}
 8013302:	bf00      	nop
 8013304:	20008770 	.word	0x20008770

08013308 <_isatty_r>:
 8013308:	b538      	push	{r3, r4, r5, lr}
 801330a:	4d06      	ldr	r5, [pc, #24]	@ (8013324 <_isatty_r+0x1c>)
 801330c:	2300      	movs	r3, #0
 801330e:	4604      	mov	r4, r0
 8013310:	4608      	mov	r0, r1
 8013312:	602b      	str	r3, [r5, #0]
 8013314:	f7ed ffac 	bl	8001270 <_isatty>
 8013318:	1c43      	adds	r3, r0, #1
 801331a:	d102      	bne.n	8013322 <_isatty_r+0x1a>
 801331c:	682b      	ldr	r3, [r5, #0]
 801331e:	b103      	cbz	r3, 8013322 <_isatty_r+0x1a>
 8013320:	6023      	str	r3, [r4, #0]
 8013322:	bd38      	pop	{r3, r4, r5, pc}
 8013324:	20008770 	.word	0x20008770

08013328 <_malloc_usable_size_r>:
 8013328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801332c:	1f18      	subs	r0, r3, #4
 801332e:	2b00      	cmp	r3, #0
 8013330:	bfbc      	itt	lt
 8013332:	580b      	ldrlt	r3, [r1, r0]
 8013334:	18c0      	addlt	r0, r0, r3
 8013336:	4770      	bx	lr

08013338 <_init>:
 8013338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801333a:	bf00      	nop
 801333c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801333e:	bc08      	pop	{r3}
 8013340:	469e      	mov	lr, r3
 8013342:	4770      	bx	lr

08013344 <_fini>:
 8013344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013346:	bf00      	nop
 8013348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801334a:	bc08      	pop	{r3}
 801334c:	469e      	mov	lr, r3
 801334e:	4770      	bx	lr


STM32F407-MODBUS-OVER-ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011294  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f78  08011424  08011424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801439c  0801439c  0001608c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801439c  0801439c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143a4  080143a4  0001608c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080143a4  080143a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080143a8  080143a8  000153a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080143ac  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001608c  2**0
                  CONTENTS
 10 .bss          000084f0  2000008c  2000008c  0001608c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000857c  2000857c  0001608c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001608c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e17f  00000000  00000000  000160bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005517  00000000  00000000  0003423b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  00039758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111e  00000000  00000000  0003acc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d2fc  00000000  00000000  0003bdde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002475a  00000000  00000000  000690da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc991  00000000  00000000  0008d834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016a1c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f5c  00000000  00000000  0016a208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00170164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801140c 	.word	0x0801140c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0801140c 	.word	0x0801140c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fc18 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f818 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f8a8 	bl	80006fc <MX_GPIO_Init>
  MX_UART5_Init();
 80005ac:	f000 f87c 	bl	80006a8 <MX_UART5_Init>
  MX_LWIP_Init();
 80005b0:	f003 fd40 	bl	8004034 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  netif_set_up(&gnetif);       // bring interface up
 80005b4:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <main+0x34>)
 80005b6:	f004 ff8d 	bl	80054d4 <netif_set_up>
  dhcp_start(&gnetif);
 80005ba:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <main+0x34>)
 80005bc:	f00c f926 	bl	800c80c <dhcp_start>
  HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c6:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <main+0x38>)
 80005c8:	f002 f96c 	bl	80028a4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <main+0x30>
 80005d0:	200000f8 	.word	0x200000f8
 80005d4:	40020c00 	.word	0x40020c00

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	@ 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f010 f86d 	bl	80106c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <SystemClock_Config+0xc8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a26      	ldr	r2, [pc, #152]	@ (80006a0 <SystemClock_Config+0xc8>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <SystemClock_Config+0xc8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a20      	ldr	r2, [pc, #128]	@ (80006a4 <SystemClock_Config+0xcc>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <SystemClock_Config+0xcc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800064c:	2340      	movs	r3, #64	@ 0x40
 800064e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f002 f95f 	bl	8002920 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000668:	f000 f8c0 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000674:	2380      	movs	r3, #128	@ 0x80
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2101      	movs	r1, #1
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fbc2 	bl	8002e10 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000692:	f000 f8ab 	bl	80007ec <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	@ 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_UART5_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <MX_UART5_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80006b2:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_UART5_Init+0x4c>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_UART5_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_UART5_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_UART5_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_UART5_Init+0x4c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_UART5_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_UART5_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_UART5_Init+0x4c>)
 80006e0:	f002 fd76 	bl	80031d0 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80006ea:	f000 f87f 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000a8 	.word	0x200000a8
 80006f8:	40005000 	.word	0x40005000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	@ 0x28
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b32      	ldr	r3, [pc, #200]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a31      	ldr	r2, [pc, #196]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a2a      	ldr	r2, [pc, #168]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a23      	ldr	r2, [pc, #140]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a1c      	ldr	r2, [pc, #112]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_GPIO_Init+0xe4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000788:	4816      	ldr	r0, [pc, #88]	@ (80007e4 <MX_GPIO_Init+0xe8>)
 800078a:	f002 f88b 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800078e:	2301      	movs	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000792:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4811      	ldr	r0, [pc, #68]	@ (80007e8 <MX_GPIO_Init+0xec>)
 80007a4:	f001 fee2 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007a8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <MX_GPIO_Init+0xe8>)
 80007c2:	f001 fed3 	bl	800256c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2006      	movs	r0, #6
 80007cc:	f000 fc73 	bl	80010b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007d0:	2006      	movs	r0, #6
 80007d2:	f000 fc8c 	bl	80010ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	@ 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020c00 	.word	0x40020c00
 80007e8:	40020000 	.word	0x40020000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <Error_Handler+0x8>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	@ (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800080c:	6453      	str	r3, [r2, #68]	@ 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	@ 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a2c      	ldr	r2, [pc, #176]	@ (8000918 <HAL_UART_MspInit+0xd0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d152      	bne.n	8000910 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b2b      	ldr	r3, [pc, #172]	@ (800091c <HAL_UART_MspInit+0xd4>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a2a      	ldr	r2, [pc, #168]	@ (800091c <HAL_UART_MspInit+0xd4>)
 8000874:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
 800087a:	4b28      	ldr	r3, [pc, #160]	@ (800091c <HAL_UART_MspInit+0xd4>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b24      	ldr	r3, [pc, #144]	@ (800091c <HAL_UART_MspInit+0xd4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a23      	ldr	r2, [pc, #140]	@ (800091c <HAL_UART_MspInit+0xd4>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b21      	ldr	r3, [pc, #132]	@ (800091c <HAL_UART_MspInit+0xd4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <HAL_UART_MspInit+0xd4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a1c      	ldr	r2, [pc, #112]	@ (800091c <HAL_UART_MspInit+0xd4>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <HAL_UART_MspInit+0xd4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80008d0:	2308      	movs	r3, #8
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4811      	ldr	r0, [pc, #68]	@ (8000920 <HAL_UART_MspInit+0xd8>)
 80008dc:	f001 fe46 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008e0:	2304      	movs	r3, #4
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80008f0:	2308      	movs	r3, #8
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	480a      	ldr	r0, [pc, #40]	@ (8000924 <HAL_UART_MspInit+0xdc>)
 80008fc:	f001 fe36 	bl	800256c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2035      	movs	r0, #53	@ 0x35
 8000906:	f000 fbd6 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800090a:	2035      	movs	r0, #53	@ 0x35
 800090c:	f000 fbef 	bl	80010ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	@ 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40005000 	.word	0x40005000
 800091c:	40023800 	.word	0x40023800
 8000920:	40020800 	.word	0x40020800
 8000924:	40020c00 	.word	0x40020c00

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 fa7b 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}

08000986 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800098a:	2001      	movs	r0, #1
 800098c:	f001 ffa4 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <UART5_IRQHandler+0x10>)
 800099a:	f002 fc69 	bl	8003270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000a8 	.word	0x200000a8

080009a8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <ETH_IRQHandler+0x10>)
 80009ae:	f000 feef 	bl	8001790 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20004c08 	.word	0x20004c08

080009bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return 1;
 80009c0:	2301      	movs	r3, #1
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <_kill>:

int _kill(int pid, int sig)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <_kill+0x20>)
 80009d8:	2216      	movs	r2, #22
 80009da:	601a      	str	r2, [r3, #0]
  return -1;
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	2000856c 	.word	0x2000856c

080009f0 <_exit>:

void _exit (int status)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ffe5 	bl	80009cc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a02:	bf00      	nop
 8000a04:	e7fd      	b.n	8000a02 <_exit+0x12>

08000a06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e00a      	b.n	8000a2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a18:	f3af 8000 	nop.w
 8000a1c:	4601      	mov	r1, r0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	60ba      	str	r2, [r7, #8]
 8000a24:	b2ca      	uxtb	r2, r1
 8000a26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	dbf0      	blt.n	8000a18 <_read+0x12>
  }

  return len;
 8000a36:	687b      	ldr	r3, [r7, #4]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	e009      	b.n	8000a66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	60ba      	str	r2, [r7, #8]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3301      	adds	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dbf1      	blt.n	8000a52 <_write+0x12>
  }
  return len;
 8000a6e:	687b      	ldr	r3, [r7, #4]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_close>:

int _close(int file)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_isatty>:

int _isatty(int file)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ab8:	2301      	movs	r3, #1
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	@ (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d205      	bcs.n	8000b1c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <_sbrk+0x6c>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a06      	ldr	r2, [pc, #24]	@ (8000b44 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	371c      	adds	r7, #28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	20020000 	.word	0x20020000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	200000f0 	.word	0x200000f0
 8000b48:	20008580 	.word	0x20008580
 8000b4c:	2000856c 	.word	0x2000856c

08000b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b78:	f7ff ffea 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b7c:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b7e:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b80:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b94:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f00f fddf 	bl	8010764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba6:	f7ff fcf9 	bl	800059c <main>
  bx  lr    
 8000baa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000bb8:	080143ac 	.word	0x080143ac
  ldr r2, =_sbss
 8000bbc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000bc0:	2000857c 	.word	0x2000857c

08000bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC_IRQHandler>

08000bc6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00b      	beq.n	8000bee <LAN8742_RegisterBusIO+0x28>
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d007      	beq.n	8000bee <LAN8742_RegisterBusIO+0x28>
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <LAN8742_RegisterBusIO+0x28>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e014      	b.n	8000c1e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	691a      	ldr	r2, [r3, #16]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d139      	bne.n	8000cba <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2220      	movs	r2, #32
 8000c58:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	e01c      	b.n	8000c9a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	f107 020c 	add.w	r2, r7, #12
 8000c68:	2112      	movs	r1, #18
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	4798      	blx	r3
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da03      	bge.n	8000c7c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000c74:	f06f 0304 	mvn.w	r3, #4
 8000c78:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000c7a:	e00b      	b.n	8000c94 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d105      	bne.n	8000c94 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
         break;
 8000c92:	e005      	b.n	8000ca0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3301      	adds	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	2b1f      	cmp	r3, #31
 8000c9e:	d9df      	bls.n	8000c60 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b1f      	cmp	r3, #31
 8000ca6:	d902      	bls.n	8000cae <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ca8:	f06f 0302 	mvn.w	r3, #2
 8000cac:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000cba:	693b      	ldr	r3, [r7, #16]
 }
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	6810      	ldr	r0, [r2, #0]
 8000cd8:	f107 020c 	add.w	r2, r7, #12
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4798      	blx	r3
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da02      	bge.n	8000cec <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ce6:	f06f 0304 	mvn.w	r3, #4
 8000cea:	e06e      	b.n	8000dca <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	6810      	ldr	r0, [r2, #0]
 8000cf4:	f107 020c 	add.w	r2, r7, #12
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4798      	blx	r3
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	da02      	bge.n	8000d08 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d02:	f06f 0304 	mvn.w	r3, #4
 8000d06:	e060      	b.n	8000dca <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e059      	b.n	8000dca <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6810      	ldr	r0, [r2, #0]
 8000d1e:	f107 020c 	add.w	r2, r7, #12
 8000d22:	2100      	movs	r1, #0
 8000d24:	4798      	blx	r3
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da02      	bge.n	8000d32 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d2c:	f06f 0304 	mvn.w	r3, #4
 8000d30:	e04b      	b.n	8000dca <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d11b      	bne.n	8000d74 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <LAN8742_GetLinkState+0x90>
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d50:	2302      	movs	r3, #2
 8000d52:	e03a      	b.n	8000dca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e033      	b.n	8000dca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	e02c      	b.n	8000dca <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d70:	2305      	movs	r3, #5
 8000d72:	e02a      	b.n	8000dca <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	6810      	ldr	r0, [r2, #0]
 8000d7c:	f107 020c 	add.w	r2, r7, #12
 8000d80:	211f      	movs	r1, #31
 8000d82:	4798      	blx	r3
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	da02      	bge.n	8000d90 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000d8a:	f06f 0304 	mvn.w	r3, #4
 8000d8e:	e01c      	b.n	8000dca <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	e015      	b.n	8000dca <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f003 031c 	and.w	r3, r3, #28
 8000da4:	2b18      	cmp	r3, #24
 8000da6:	d101      	bne.n	8000dac <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000da8:	2302      	movs	r3, #2
 8000daa:	e00e      	b.n	8000dca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 031c 	and.w	r3, r3, #28
 8000db2:	2b08      	cmp	r3, #8
 8000db4:	d101      	bne.n	8000dba <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e007      	b.n	8000dca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f003 031c 	and.w	r3, r3, #28
 8000dc0:	2b14      	cmp	r3, #20
 8000dc2:	d101      	bne.n	8000dc8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e000      	b.n	8000dca <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000dc8:	2305      	movs	r3, #5
    }
  }
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f94f 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	200f      	movs	r0, #15
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fcf6 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f967 	bl	800110a <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f92f 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	200000f4 	.word	0x200000f4

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200000f4 	.word	0x200000f4

08000eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_Delay+0x44>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ede:	bf00      	nop
 8000ee0:	f7ff ffde 	bl	8000ea0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	@ (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	@ (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	@ (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	@ 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	@ 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	@ (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff3e 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff8e 	bl	8000ff4 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff31 	bl	8000f64 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff feb6 	bl	8000ea0 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d008      	beq.n	8001154 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e052      	b.n	80011fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0216 	bic.w	r2, r2, #22
 8001162:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001172:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	2b00      	cmp	r3, #0
 800117a:	d103      	bne.n	8001184 <HAL_DMA_Abort+0x62>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0208 	bic.w	r2, r2, #8
 8001192:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a4:	e013      	b.n	80011ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011a6:	f7ff fe7b 	bl	8000ea0 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d90c      	bls.n	80011ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2220      	movs	r2, #32
 80011b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2203      	movs	r2, #3
 80011be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e015      	b.n	80011fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e4      	bne.n	80011a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e0:	223f      	movs	r2, #63	@ 0x3f
 80011e2:	409a      	lsls	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d004      	beq.n	8001220 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2280      	movs	r2, #128	@ 0x80
 800121a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e00c      	b.n	800123a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2205      	movs	r2, #5
 8001224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e08a      	b.n	8001370 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001260:	2b00      	cmp	r3, #0
 8001262:	d106      	bne.n	8001272 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2220      	movs	r2, #32
 8001268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f003 f895 	bl	800439c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b40      	ldr	r3, [pc, #256]	@ (8001378 <HAL_ETH_Init+0x130>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a3f      	ldr	r2, [pc, #252]	@ (8001378 <HAL_ETH_Init+0x130>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b3d      	ldr	r3, [pc, #244]	@ (8001378 <HAL_ETH_Init+0x130>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800128e:	4b3b      	ldr	r3, [pc, #236]	@ (800137c <HAL_ETH_Init+0x134>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a3a      	ldr	r2, [pc, #232]	@ (800137c <HAL_ETH_Init+0x134>)
 8001294:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001298:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800129a:	4b38      	ldr	r3, [pc, #224]	@ (800137c <HAL_ETH_Init+0x134>)
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	4936      	ldr	r1, [pc, #216]	@ (800137c <HAL_ETH_Init+0x134>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012a8:	4b34      	ldr	r3, [pc, #208]	@ (800137c <HAL_ETH_Init+0x134>)
 80012aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c4:	f7ff fdec 	bl	8000ea0 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012ca:	e011      	b.n	80012f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012cc:	f7ff fde8 	bl	8000ea0 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012da:	d909      	bls.n	80012f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2204      	movs	r2, #4
 80012e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	22e0      	movs	r2, #224	@ 0xe0
 80012e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e03f      	b.n	8001370 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1e4      	bne.n	80012cc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 fe74 	bl	8001ff0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 ff1f 	bl	800214c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 ff75 	bl	80021fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	461a      	mov	r2, r3
 800131a:	2100      	movs	r1, #0
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fedd 	bl	80020dc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001330:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001342:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001346:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800135a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2210      	movs	r2, #16
 800136a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800

08001380 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800138e:	2b10      	cmp	r3, #16
 8001390:	d161      	bne.n	8001456 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2220      	movs	r2, #32
 8001396:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2204      	movs	r2, #4
 80013a4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f96d 	bl	8001686 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff fd7f 	bl	8000eb8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013d8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013f0:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fc98 	bl	8001d28 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0208 	orr.w	r2, r2, #8
 8001406:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff fd51 	bl	8000eb8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0204 	orr.w	r2, r2, #4
 800142c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001440:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001444:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001448:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2240      	movs	r2, #64	@ 0x40
 800144e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
  }
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800146e:	2b40      	cmp	r3, #64	@ 0x40
 8001470:	d170      	bne.n	8001554 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2220      	movs	r2, #32
 8001476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 800148c:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001490:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001494:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80014a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014ac:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	f023 0302 	bic.w	r3, r3, #2
 80014c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014c4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0204 	bic.w	r2, r2, #4
 80014d4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff fcea 	bl	8000eb8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fc1b 	bl	8001d28 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0208 	bic.w	r2, r2, #8
 8001500:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800150a:	2001      	movs	r0, #1
 800150c:	f7ff fcd4 	bl	8000eb8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e00e      	b.n	800153c <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	3212      	adds	r2, #18
 8001524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001528:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d9ed      	bls.n	800151e <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2210      	movs	r2, #16
 800154c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	e000      	b.n	8001556 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
  }
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d109      	bne.n	8001584 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e07c      	b.n	800167e <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800158a:	2b40      	cmp	r3, #64	@ 0x40
 800158c:	d176      	bne.n	800167c <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800158e:	2200      	movs	r2, #0
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 fea2 	bl	80022dc <ETH_Prepare_Tx_Descriptors>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a4:	f043 0202 	orr.w	r2, r3, #2
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e065      	b.n	800167e <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80015b2:	f3bf 8f4f 	dsb	sy
}
 80015b6:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3206      	adds	r2, #6
 80015c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c4:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d904      	bls.n	80015e2 <HAL_ETH_Transmit+0x84>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015dc:	1f1a      	subs	r2, r3, #4
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3106      	adds	r1, #6
 80015ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015f6:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80015f8:	f7ff fc52 	bl	8000ea0 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015fe:	e037      	b.n	8001670 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d011      	beq.n	8001636 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001618:	f043 0208 	orr.w	r2, r3, #8
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e023      	b.n	800167e <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d018      	beq.n	8001670 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800163e:	f7ff fc2f 	bl	8000ea0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	d302      	bcc.n	8001654 <HAL_ETH_Transmit+0xf6>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10d      	bne.n	8001670 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165a:	f043 0204 	orr.w	r2, r3, #4
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800166a:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e006      	b.n	800167e <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	dbc3      	blt.n	8001600 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	e000      	b.n	800167e <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
  }
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b088      	sub	sp, #32
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001692:	2301      	movs	r3, #1
 8001694:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800169a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	3212      	adds	r2, #18
 80016a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a6:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016ac:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80016ae:	e044      	b.n	800173a <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d112      	bne.n	80016de <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4618      	mov	r0, r3
 80016be:	f002 fff5 	bl	80046ac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	74fb      	strb	r3, [r7, #19]
 80016cc:	e007      	b.n	80016de <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	461a      	mov	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	461a      	mov	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80016de:	7cfb      	ldrb	r3, [r7, #19]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d02a      	beq.n	800173a <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d108      	bne.n	80016fe <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6053      	str	r3, [r2, #4]
 80016fc:	e005      	b.n	800170a <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3301      	adds	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d902      	bls.n	8001728 <ETH_UpdateDescriptor+0xa2>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b04      	subs	r3, #4
 8001726:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	3212      	adds	r2, #18
 800172e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001732:	617b      	str	r3, [r7, #20]
      desccount--;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	3b01      	subs	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <ETH_UpdateDescriptor+0xc0>
 8001740:	7cfb      	ldrb	r3, [r7, #19]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1b4      	bne.n	80016b0 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	429a      	cmp	r2, r3
 800174e:	d01a      	beq.n	8001786 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	3303      	adds	r3, #3
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800175a:	f3bf 8f5f 	dmb	sy
}
 800175e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6919      	ldr	r1, [r3, #16]
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	18ca      	adds	r2, r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001778:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001786:	bf00      	nop
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800179e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80017b8:	4b4b      	ldr	r3, [pc, #300]	@ (80018e8 <HAL_ETH_IRQHandler+0x158>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00e      	beq.n	80017e6 <HAL_ETH_IRQHandler+0x56>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017da:	461a      	mov	r2, r3
 80017dc:	4b43      	ldr	r3, [pc, #268]	@ (80018ec <HAL_ETH_IRQHandler+0x15c>)
 80017de:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f891 	bl	8001908 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00f      	beq.n	8001810 <HAL_ETH_IRQHandler+0x80>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00a      	beq.n	8001810 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001802:	461a      	mov	r2, r3
 8001804:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001808:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f872 	bl	80018f4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d042      	beq.n	80018a0 <HAL_ETH_IRQHandler+0x110>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d03d      	beq.n	80018a0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800182a:	f043 0208 	orr.w	r2, r3, #8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01a      	beq.n	8001874 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <HAL_ETH_IRQHandler+0x160>)
 800184a:	4013      	ands	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001864:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001868:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	22e0      	movs	r2, #224	@ 0xe0
 800186e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001872:	e012      	b.n	800189a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001882:	4013      	ands	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001892:	461a      	mov	r2, r3
 8001894:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001898:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f83e 	bl	800191c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00e      	beq.n	80018c8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f838 	bl	8001930 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_ETH_IRQHandler+0x158>)
 80018d4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018d8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f832 	bl	8001944 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40013c00 	.word	0x40013c00
 80018ec:	00010040 	.word	0x00010040
 80018f0:	007e2000 	.word	0x007e2000

080018f4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 031c 	and.w	r3, r3, #28
 8001974:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	02db      	lsls	r3, r3, #11
 800197a:	b29b      	uxth	r3, r3
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f023 0302 	bic.w	r3, r3, #2
 8001996:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80019a8:	f7ff fa7a 	bl	8000ea0 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019ae:	e00d      	b.n	80019cc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80019b0:	f7ff fa76 	bl	8000ea0 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019be:	d301      	bcc.n	80019c4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e010      	b.n	80019e6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1ec      	bne.n	80019b0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 031c 	and.w	r3, r3, #28
 8001a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	02db      	lsls	r3, r3, #11
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	019b      	lsls	r3, r3, #6
 8001a1c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a48:	f7ff fa2a 	bl	8000ea0 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a4e:	e00d      	b.n	8001a6c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001a50:	f7ff fa26 	bl	8000ea0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a5e:	d301      	bcc.n	8001a64 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e009      	b.n	8001a78 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ec      	bne.n	8001a50 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0e6      	b.n	8001c62 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bf0c      	ite	eq
 8001b52:	2301      	moveq	r3, #1
 8001b54:	2300      	movne	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf14      	ite	ne
 8001b86:	2301      	movne	r3, #1
 8001b88:	2300      	moveq	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	bf14      	ite	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	2300      	moveq	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	bf0c      	ite	eq
 8001bfe:	2301      	moveq	r3, #1
 8001c00:	2300      	movne	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf14      	ite	ne
 8001c52:	2301      	movne	r3, #1
 8001c54:	2300      	moveq	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00b      	b.n	8001c9a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c88:	2b10      	cmp	r3, #16
 8001c8a:	d105      	bne.n	8001c98 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f870 	bl	8001d74 <ETH_SetMACConfig>

    return HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e000      	b.n	8001c9a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 031c 	bic.w	r3, r3, #28
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001cbc:	f001 fa54 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8001cc0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d804      	bhi.n	8001cd4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	e019      	b.n	8001d08 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4a11      	ldr	r2, [pc, #68]	@ (8001d1c <HAL_ETH_SetMDIOClockRange+0x78>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d204      	bcs.n	8001ce6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f043 030c 	orr.w	r3, r3, #12
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e010      	b.n	8001d08 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d90c      	bls.n	8001d08 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8001d24 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d804      	bhi.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	e003      	b.n	8001d08 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	02160ebf 	.word	0x02160ebf
 8001d1c:	03938700 	.word	0x03938700
 8001d20:	05f5e0ff 	.word	0x05f5e0ff
 8001d24:	08f0d17f 	.word	0x08f0d17f

08001d28 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d4a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff f8ad 	bl	8000eb8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d68:	6193      	str	r3, [r2, #24]
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <ETH_SetMACConfig+0x164>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	7b9b      	ldrb	r3, [r3, #14]
 8001d92:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	7c12      	ldrb	r2, [r2, #16]
 8001d98:	2a00      	cmp	r2, #0
 8001d9a:	d102      	bne.n	8001da2 <ETH_SetMACConfig+0x2e>
 8001d9c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001da0:	e000      	b.n	8001da4 <ETH_SetMACConfig+0x30>
 8001da2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001da4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	7c52      	ldrb	r2, [r2, #17]
 8001daa:	2a00      	cmp	r2, #0
 8001dac:	d102      	bne.n	8001db4 <ETH_SetMACConfig+0x40>
 8001dae:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001db2:	e000      	b.n	8001db6 <ETH_SetMACConfig+0x42>
 8001db4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001db6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001dbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	7fdb      	ldrb	r3, [r3, #31]
 8001dc2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001dc4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	7f92      	ldrb	r2, [r2, #30]
 8001dd0:	2a00      	cmp	r2, #0
 8001dd2:	d102      	bne.n	8001dda <ETH_SetMACConfig+0x66>
 8001dd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dd8:	e000      	b.n	8001ddc <ETH_SetMACConfig+0x68>
 8001dda:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ddc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	7f1b      	ldrb	r3, [r3, #28]
 8001de2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001de4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	791b      	ldrb	r3, [r3, #4]
 8001df0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001df2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001dfa:	2a00      	cmp	r2, #0
 8001dfc:	d102      	bne.n	8001e04 <ETH_SetMACConfig+0x90>
 8001dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e02:	e000      	b.n	8001e06 <ETH_SetMACConfig+0x92>
 8001e04:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	7bdb      	ldrb	r3, [r3, #15]
 8001e0c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e0e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e1c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7ff f83e 	bl	8000eb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001e52:	4013      	ands	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e5a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	d101      	bne.n	8001e6a <ETH_SetMACConfig+0xf6>
 8001e66:	2280      	movs	r2, #128	@ 0x80
 8001e68:	e000      	b.n	8001e6c <ETH_SetMACConfig+0xf8>
 8001e6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e6c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001e7a:	2a01      	cmp	r2, #1
 8001e7c:	d101      	bne.n	8001e82 <ETH_SetMACConfig+0x10e>
 8001e7e:	2208      	movs	r2, #8
 8001e80:	e000      	b.n	8001e84 <ETH_SetMACConfig+0x110>
 8001e82:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e84:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001e8c:	2a01      	cmp	r2, #1
 8001e8e:	d101      	bne.n	8001e94 <ETH_SetMACConfig+0x120>
 8001e90:	2204      	movs	r2, #4
 8001e92:	e000      	b.n	8001e96 <ETH_SetMACConfig+0x122>
 8001e94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001e9e:	2a01      	cmp	r2, #1
 8001ea0:	d101      	bne.n	8001ea6 <ETH_SetMACConfig+0x132>
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	e000      	b.n	8001ea8 <ETH_SetMACConfig+0x134>
 8001ea6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f7fe fff9 	bl	8000eb8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	fd20810f 	.word	0xfd20810f

08001edc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8001fec <ETH_SetDMAConfig+0x110>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	7b1b      	ldrb	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <ETH_SetDMAConfig+0x2c>
 8001f02:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f06:	e000      	b.n	8001f0a <ETH_SetDMAConfig+0x2e>
 8001f08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	7b5b      	ldrb	r3, [r3, #13]
 8001f0e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f10:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	7f52      	ldrb	r2, [r2, #29]
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d102      	bne.n	8001f20 <ETH_SetDMAConfig+0x44>
 8001f1a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f1e:	e000      	b.n	8001f22 <ETH_SetDMAConfig+0x46>
 8001f20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	7b9b      	ldrb	r3, [r3, #14]
 8001f28:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f2a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	7f1b      	ldrb	r3, [r3, #28]
 8001f36:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	7f9b      	ldrb	r3, [r3, #30]
 8001f3e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f40:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f4e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f50:	4313      	orrs	r3, r2
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f60:	461a      	mov	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f7fe ffa0 	bl	8000eb8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f80:	461a      	mov	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	791b      	ldrb	r3, [r3, #4]
 8001f8a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f90:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f96:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f9c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fa4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001fa6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fb4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fbe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fc2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7fe ff71 	bl	8000eb8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	f8de3f23 	.word	0xf8de3f23

08001ff0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0a6      	sub	sp, #152	@ 0x98
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002004:	2300      	movs	r3, #0
 8002006:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002020:	2301      	movs	r3, #1
 8002022:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002032:	2300      	movs	r3, #0
 8002034:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800203c:	2300      	movs	r3, #0
 800203e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002058:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800205c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800205e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002062:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800206a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fe7f 	bl	8001d74 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002076:	2301      	movs	r3, #1
 8002078:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800207a:	2301      	movs	r3, #1
 800207c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800207e:	2301      	movs	r3, #1
 8002080:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002084:	2301      	movs	r3, #1
 8002086:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002098:	2300      	movs	r3, #0
 800209a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800209c:	2301      	movs	r3, #1
 800209e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020a2:	2301      	movs	r3, #1
 80020a4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020aa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020b0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020b6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	4619      	mov	r1, r3
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff05 	bl	8001edc <ETH_SetDMAConfig>
}
 80020d2:	bf00      	nop
 80020d4:	3798      	adds	r7, #152	@ 0x98
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3305      	adds	r3, #5
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	3204      	adds	r2, #4
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <ETH_MACAddressConfig+0x68>)
 80020fe:	4413      	add	r3, r2
 8002100:	461a      	mov	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3303      	adds	r3, #3
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	061a      	lsls	r2, r3, #24
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3302      	adds	r3, #2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3301      	adds	r3, #1
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	4313      	orrs	r3, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <ETH_MACAddressConfig+0x6c>)
 800212e:	4413      	add	r3, r2
 8002130:	461a      	mov	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	6013      	str	r3, [r2, #0]
}
 8002136:	bf00      	nop
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40028040 	.word	0x40028040
 8002148:	40028044 	.word	0x40028044

0800214c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e03e      	b.n	80021d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68d9      	ldr	r1, [r3, #12]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2200      	movs	r2, #0
 8002176:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	3206      	adds	r2, #6
 800218c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d80c      	bhi.n	80021bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	e004      	b.n	80021c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	461a      	mov	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3301      	adds	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d9bd      	bls.n	800215a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021f0:	611a      	str	r2, [r3, #16]
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	e048      	b.n	800229e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6919      	ldr	r1, [r3, #16]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002248:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	3212      	adds	r2, #18
 800226a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d80c      	bhi.n	800228e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6919      	ldr	r1, [r3, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	e004      	b.n	8002298 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	461a      	mov	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3301      	adds	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d9b3      	bls.n	800220c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ce:	60da      	str	r2, [r3, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80022dc:	b480      	push	{r7}
 80022de:	b091      	sub	sp, #68	@ 0x44
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3318      	adds	r3, #24
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800231a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800231e:	d007      	beq.n	8002330 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002324:	3304      	adds	r3, #4
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002330:	2302      	movs	r3, #2
 8002332:	e115      	b.n	8002560 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002336:	3301      	adds	r3, #1
 8002338:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800233a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002342:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800234c:	f023 031f 	bic.w	r3, r3, #31
 8002350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002352:	6852      	ldr	r2, [r2, #4]
 8002354:	431a      	orrs	r2, r3
 8002356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002358:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	431a      	orrs	r2, r3
 8002374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002376:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	431a      	orrs	r2, r3
 8002392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002394:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80023a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80023aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80023ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80023ba:	e084      	b.n	80024c6 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80023d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e005      	b.n	80023e8 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80023e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ea:	3301      	adds	r3, #1
 80023ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d902      	bls.n	80023fa <ETH_Prepare_Tx_Descriptors+0x11e>
 80023f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f6:	3b04      	subs	r3, #4
 80023f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002402:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800240c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002410:	d007      	beq.n	8002422 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002416:	3304      	adds	r3, #4
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d029      	beq.n	8002476 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800242a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002430:	2300      	movs	r3, #0
 8002432:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002434:	e019      	b.n	800246a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8002436:	f3bf 8f5f 	dmb	sy
}
 800243a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800243c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800244a:	3301      	adds	r3, #1
 800244c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800244e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002450:	2b03      	cmp	r3, #3
 8002452:	d902      	bls.n	800245a <ETH_Prepare_Tx_Descriptors+0x17e>
 8002454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002456:	3b04      	subs	r3, #4
 8002458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800245e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002466:	3301      	adds	r3, #1
 8002468:	63bb      	str	r3, [r7, #56]	@ 0x38
 800246a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800246c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800246e:	429a      	cmp	r2, r3
 8002470:	d3e1      	bcc.n	8002436 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002472:	2302      	movs	r3, #2
 8002474:	e074      	b.n	8002560 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002484:	3301      	adds	r3, #1
 8002486:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800248e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002496:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80024a0:	f023 031f 	bic.w	r3, r3, #31
 80024a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024a6:	6852      	ldr	r2, [r2, #4]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ac:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80024ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b0:	3301      	adds	r3, #1
 80024b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80024b4:	f3bf 8f5f 	dmb	sy
}
 80024b8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80024c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f47f af76 	bne.w	80023bc <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e005      	b.n	80024f0 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	6a3a      	ldr	r2, [r7, #32]
 8002500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002504:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002506:	f3bf 8f5f 	dmb	sy
}
 800250a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800250c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002516:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800251c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800251e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002520:	3304      	adds	r3, #4
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800252c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800252e:	f3ef 8310 	mrs	r3, PRIMASK
 8002532:	613b      	str	r3, [r7, #16]
  return(result);
 8002534:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	2301      	movs	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f383 8810 	msr	PRIMASK, r3
}
 8002542:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254a:	4413      	add	r3, r2
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f383 8810 	msr	PRIMASK, r3
}
 800255c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3744      	adds	r7, #68	@ 0x44
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	@ 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e16b      	b.n	8002860 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002588:	2201      	movs	r2, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	f040 815a 	bne.w	800285a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d005      	beq.n	80025be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d130      	bne.n	8002620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 0201 	and.w	r2, r3, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b03      	cmp	r3, #3
 800262a:	d017      	beq.n	800265c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d123      	bne.n	80026b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	08da      	lsrs	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3208      	adds	r2, #8
 8002670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	220f      	movs	r2, #15
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	08da      	lsrs	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3208      	adds	r2, #8
 80026aa:	69b9      	ldr	r1, [r7, #24]
 80026ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0203 	and.w	r2, r3, #3
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80b4 	beq.w	800285a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4b60      	ldr	r3, [pc, #384]	@ (8002878 <HAL_GPIO_Init+0x30c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	4a5f      	ldr	r2, [pc, #380]	@ (8002878 <HAL_GPIO_Init+0x30c>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002700:	6453      	str	r3, [r2, #68]	@ 0x44
 8002702:	4b5d      	ldr	r3, [pc, #372]	@ (8002878 <HAL_GPIO_Init+0x30c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800270e:	4a5b      	ldr	r2, [pc, #364]	@ (800287c <HAL_GPIO_Init+0x310>)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	220f      	movs	r2, #15
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a52      	ldr	r2, [pc, #328]	@ (8002880 <HAL_GPIO_Init+0x314>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d02b      	beq.n	8002792 <HAL_GPIO_Init+0x226>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a51      	ldr	r2, [pc, #324]	@ (8002884 <HAL_GPIO_Init+0x318>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d025      	beq.n	800278e <HAL_GPIO_Init+0x222>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a50      	ldr	r2, [pc, #320]	@ (8002888 <HAL_GPIO_Init+0x31c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <HAL_GPIO_Init+0x21e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4f      	ldr	r2, [pc, #316]	@ (800288c <HAL_GPIO_Init+0x320>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d019      	beq.n	8002786 <HAL_GPIO_Init+0x21a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4e      	ldr	r2, [pc, #312]	@ (8002890 <HAL_GPIO_Init+0x324>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_GPIO_Init+0x216>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4d      	ldr	r2, [pc, #308]	@ (8002894 <HAL_GPIO_Init+0x328>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00d      	beq.n	800277e <HAL_GPIO_Init+0x212>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4c      	ldr	r2, [pc, #304]	@ (8002898 <HAL_GPIO_Init+0x32c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x20e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4b      	ldr	r2, [pc, #300]	@ (800289c <HAL_GPIO_Init+0x330>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_GPIO_Init+0x20a>
 8002772:	2307      	movs	r3, #7
 8002774:	e00e      	b.n	8002794 <HAL_GPIO_Init+0x228>
 8002776:	2308      	movs	r3, #8
 8002778:	e00c      	b.n	8002794 <HAL_GPIO_Init+0x228>
 800277a:	2306      	movs	r3, #6
 800277c:	e00a      	b.n	8002794 <HAL_GPIO_Init+0x228>
 800277e:	2305      	movs	r3, #5
 8002780:	e008      	b.n	8002794 <HAL_GPIO_Init+0x228>
 8002782:	2304      	movs	r3, #4
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x228>
 8002786:	2303      	movs	r3, #3
 8002788:	e004      	b.n	8002794 <HAL_GPIO_Init+0x228>
 800278a:	2302      	movs	r3, #2
 800278c:	e002      	b.n	8002794 <HAL_GPIO_Init+0x228>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x228>
 8002792:	2300      	movs	r3, #0
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f002 0203 	and.w	r2, r2, #3
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	4093      	lsls	r3, r2
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a4:	4935      	ldr	r1, [pc, #212]	@ (800287c <HAL_GPIO_Init+0x310>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b2:	4b3b      	ldr	r3, [pc, #236]	@ (80028a0 <HAL_GPIO_Init+0x334>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d6:	4a32      	ldr	r2, [pc, #200]	@ (80028a0 <HAL_GPIO_Init+0x334>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027dc:	4b30      	ldr	r3, [pc, #192]	@ (80028a0 <HAL_GPIO_Init+0x334>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002800:	4a27      	ldr	r2, [pc, #156]	@ (80028a0 <HAL_GPIO_Init+0x334>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002806:	4b26      	ldr	r3, [pc, #152]	@ (80028a0 <HAL_GPIO_Init+0x334>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282a:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <HAL_GPIO_Init+0x334>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002830:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <HAL_GPIO_Init+0x334>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002854:	4a12      	ldr	r2, [pc, #72]	@ (80028a0 <HAL_GPIO_Init+0x334>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3301      	adds	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b0f      	cmp	r3, #15
 8002864:	f67f ae90 	bls.w	8002588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40013800 	.word	0x40013800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400
 8002888:	40020800 	.word	0x40020800
 800288c:	40020c00 	.word	0x40020c00
 8002890:	40021000 	.word	0x40021000
 8002894:	40021400 	.word	0x40021400
 8002898:	40021800 	.word	0x40021800
 800289c:	40021c00 	.word	0x40021c00
 80028a0:	40013c00 	.word	0x40013c00

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
 80028b0:	4613      	mov	r3, r2
 80028b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c0:	e003      	b.n	80028ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	041a      	lsls	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	619a      	str	r2, [r3, #24]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f806 	bl	8002908 <HAL_GPIO_EXTI_Callback>
  }
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e267      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d075      	beq.n	8002a2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800293e:	4b88      	ldr	r3, [pc, #544]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b04      	cmp	r3, #4
 8002948:	d00c      	beq.n	8002964 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294a:	4b85      	ldr	r3, [pc, #532]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002952:	2b08      	cmp	r3, #8
 8002954:	d112      	bne.n	800297c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002956:	4b82      	ldr	r3, [pc, #520]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002962:	d10b      	bne.n	800297c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	4b7e      	ldr	r3, [pc, #504]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d05b      	beq.n	8002a28 <HAL_RCC_OscConfig+0x108>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d157      	bne.n	8002a28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e242      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002984:	d106      	bne.n	8002994 <HAL_RCC_OscConfig+0x74>
 8002986:	4b76      	ldr	r3, [pc, #472]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a75      	ldr	r2, [pc, #468]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e01d      	b.n	80029d0 <HAL_RCC_OscConfig+0xb0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x98>
 800299e:	4b70      	ldr	r3, [pc, #448]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 80029a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0xb0>
 80029b8:	4b69      	ldr	r3, [pc, #420]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a68      	ldr	r2, [pc, #416]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 80029be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b66      	ldr	r3, [pc, #408]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a65      	ldr	r2, [pc, #404]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 80029ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d013      	beq.n	8002a00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fa62 	bl	8000ea0 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e0:	f7fe fa5e 	bl	8000ea0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	@ 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e207      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0xc0>
 80029fe:	e014      	b.n	8002a2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe fa4e 	bl	8000ea0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a08:	f7fe fa4a 	bl	8000ea0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	@ 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e1f3      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	4b51      	ldr	r3, [pc, #324]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0xe8>
 8002a26:	e000      	b.n	8002a2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d063      	beq.n	8002afe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a36:	4b4a      	ldr	r3, [pc, #296]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a42:	4b47      	ldr	r3, [pc, #284]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d11c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4e:	4b44      	ldr	r3, [pc, #272]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d116      	bne.n	8002a88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5a:	4b41      	ldr	r3, [pc, #260]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_RCC_OscConfig+0x152>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e1c7      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a72:	4b3b      	ldr	r3, [pc, #236]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4937      	ldr	r1, [pc, #220]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	e03a      	b.n	8002afe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d020      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a90:	4b34      	ldr	r3, [pc, #208]	@ (8002b64 <HAL_RCC_OscConfig+0x244>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fa03 	bl	8000ea0 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9e:	f7fe f9ff 	bl	8000ea0 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1a8      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abc:	4b28      	ldr	r3, [pc, #160]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4925      	ldr	r1, [pc, #148]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]
 8002ad0:	e015      	b.n	8002afe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad2:	4b24      	ldr	r3, [pc, #144]	@ (8002b64 <HAL_RCC_OscConfig+0x244>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe f9e2 	bl	8000ea0 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae0:	f7fe f9de 	bl	8000ea0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e187      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d036      	beq.n	8002b78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b12:	4b15      	ldr	r3, [pc, #84]	@ (8002b68 <HAL_RCC_OscConfig+0x248>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe f9c2 	bl	8000ea0 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b20:	f7fe f9be 	bl	8000ea0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e167      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_RCC_OscConfig+0x240>)
 8002b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x200>
 8002b3e:	e01b      	b.n	8002b78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b40:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <HAL_RCC_OscConfig+0x248>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b46:	f7fe f9ab 	bl	8000ea0 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4c:	e00e      	b.n	8002b6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4e:	f7fe f9a7 	bl	8000ea0 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d907      	bls.n	8002b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e150      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
 8002b60:	40023800 	.word	0x40023800
 8002b64:	42470000 	.word	0x42470000
 8002b68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	4b88      	ldr	r3, [pc, #544]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ea      	bne.n	8002b4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8097 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8a:	4b81      	ldr	r3, [pc, #516]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	4a7c      	ldr	r2, [pc, #496]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba6:	4b7a      	ldr	r3, [pc, #488]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	4b77      	ldr	r3, [pc, #476]	@ (8002d94 <HAL_RCC_OscConfig+0x474>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d118      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc2:	4b74      	ldr	r3, [pc, #464]	@ (8002d94 <HAL_RCC_OscConfig+0x474>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a73      	ldr	r2, [pc, #460]	@ (8002d94 <HAL_RCC_OscConfig+0x474>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bce:	f7fe f967 	bl	8000ea0 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd6:	f7fe f963 	bl	8000ea0 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e10c      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	4b6a      	ldr	r3, [pc, #424]	@ (8002d94 <HAL_RCC_OscConfig+0x474>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x2ea>
 8002bfc:	4b64      	ldr	r3, [pc, #400]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c00:	4a63      	ldr	r2, [pc, #396]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c08:	e01c      	b.n	8002c44 <HAL_RCC_OscConfig+0x324>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x30c>
 8002c12:	4b5f      	ldr	r3, [pc, #380]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	4a5e      	ldr	r2, [pc, #376]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c22:	4a5b      	ldr	r2, [pc, #364]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0x324>
 8002c2c:	4b58      	ldr	r3, [pc, #352]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c30:	4a57      	ldr	r2, [pc, #348]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c38:	4b55      	ldr	r3, [pc, #340]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3c:	4a54      	ldr	r2, [pc, #336]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	f023 0304 	bic.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d015      	beq.n	8002c78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fe f928 	bl	8000ea0 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fe f924 	bl	8000ea0 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e0cb      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	4b49      	ldr	r3, [pc, #292]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0ee      	beq.n	8002c54 <HAL_RCC_OscConfig+0x334>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c78:	f7fe f912 	bl	8000ea0 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f7fe f90e 	bl	8000ea0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0b5      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c96:	4b3e      	ldr	r3, [pc, #248]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ee      	bne.n	8002c80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca8:	4b39      	ldr	r3, [pc, #228]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	4a38      	ldr	r2, [pc, #224]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80a1 	beq.w	8002e00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cbe:	4b34      	ldr	r3, [pc, #208]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d05c      	beq.n	8002d84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d141      	bne.n	8002d56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	4b31      	ldr	r3, [pc, #196]	@ (8002d98 <HAL_RCC_OscConfig+0x478>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7fe f8e2 	bl	8000ea0 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe f8de 	bl	8000ea0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e087      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	4b27      	ldr	r3, [pc, #156]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	019b      	lsls	r3, r3, #6
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	3b01      	subs	r3, #1
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	491b      	ldr	r1, [pc, #108]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d28:	4b1b      	ldr	r3, [pc, #108]	@ (8002d98 <HAL_RCC_OscConfig+0x478>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe f8b7 	bl	8000ea0 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fe f8b3 	bl	8000ea0 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e05c      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d48:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x416>
 8002d54:	e054      	b.n	8002e00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b10      	ldr	r3, [pc, #64]	@ (8002d98 <HAL_RCC_OscConfig+0x478>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe f8a0 	bl	8000ea0 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe f89c 	bl	8000ea0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e045      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <HAL_RCC_OscConfig+0x470>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x444>
 8002d82:	e03d      	b.n	8002e00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e038      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40007000 	.word	0x40007000
 8002d98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e0c <HAL_RCC_OscConfig+0x4ec>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d028      	beq.n	8002dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d121      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d11a      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dcc:	4013      	ands	r3, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d111      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	3b01      	subs	r3, #1
 8002de6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800

08002e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0cc      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e24:	4b68      	ldr	r3, [pc, #416]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d90c      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b65      	ldr	r3, [pc, #404]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b63      	ldr	r3, [pc, #396]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0b8      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d020      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e64:	4b59      	ldr	r3, [pc, #356]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a58      	ldr	r2, [pc, #352]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e7c:	4b53      	ldr	r3, [pc, #332]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a52      	ldr	r2, [pc, #328]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e88:	4b50      	ldr	r3, [pc, #320]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	494d      	ldr	r1, [pc, #308]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d044      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	4b47      	ldr	r3, [pc, #284]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d119      	bne.n	8002eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e07f      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d003      	beq.n	8002ece <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ece:	4b3f      	ldr	r3, [pc, #252]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e06f      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ede:	4b3b      	ldr	r3, [pc, #236]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e067      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eee:	4b37      	ldr	r3, [pc, #220]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f023 0203 	bic.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4934      	ldr	r1, [pc, #208]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f00:	f7fd ffce 	bl	8000ea0 <HAL_GetTick>
 8002f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f08:	f7fd ffca 	bl	8000ea0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e04f      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 020c 	and.w	r2, r3, #12
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d1eb      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f30:	4b25      	ldr	r3, [pc, #148]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d20c      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b22      	ldr	r3, [pc, #136]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b20      	ldr	r3, [pc, #128]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e032      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f64:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4916      	ldr	r1, [pc, #88]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f82:	4b12      	ldr	r3, [pc, #72]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	490e      	ldr	r1, [pc, #56]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f96:	f000 f821 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fcc <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	490a      	ldr	r1, [pc, #40]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	5ccb      	ldrb	r3, [r1, r3]
 8002faa:	fa22 f303 	lsr.w	r3, r2, r3
 8002fae:	4a09      	ldr	r2, [pc, #36]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fb2:	4b09      	ldr	r3, [pc, #36]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd ff2e 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023c00 	.word	0x40023c00
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	080141a4 	.word	0x080141a4
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	20000004 	.word	0x20000004

08002fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe0:	b090      	sub	sp, #64	@ 0x40
 8002fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ff4:	4b59      	ldr	r3, [pc, #356]	@ (800315c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d00d      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x40>
 8003000:	2b08      	cmp	r3, #8
 8003002:	f200 80a1 	bhi.w	8003148 <HAL_RCC_GetSysClockFreq+0x16c>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x34>
 800300a:	2b04      	cmp	r3, #4
 800300c:	d003      	beq.n	8003016 <HAL_RCC_GetSysClockFreq+0x3a>
 800300e:	e09b      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003010:	4b53      	ldr	r3, [pc, #332]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x184>)
 8003012:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003014:	e09b      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003016:	4b53      	ldr	r3, [pc, #332]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x188>)
 8003018:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800301a:	e098      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800301c:	4b4f      	ldr	r3, [pc, #316]	@ (800315c <HAL_RCC_GetSysClockFreq+0x180>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003024:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003026:	4b4d      	ldr	r3, [pc, #308]	@ (800315c <HAL_RCC_GetSysClockFreq+0x180>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d028      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003032:	4b4a      	ldr	r3, [pc, #296]	@ (800315c <HAL_RCC_GetSysClockFreq+0x180>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	2200      	movs	r2, #0
 800303a:	623b      	str	r3, [r7, #32]
 800303c:	627a      	str	r2, [r7, #36]	@ 0x24
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003044:	2100      	movs	r1, #0
 8003046:	4b47      	ldr	r3, [pc, #284]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x188>)
 8003048:	fb03 f201 	mul.w	r2, r3, r1
 800304c:	2300      	movs	r3, #0
 800304e:	fb00 f303 	mul.w	r3, r0, r3
 8003052:	4413      	add	r3, r2
 8003054:	4a43      	ldr	r2, [pc, #268]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x188>)
 8003056:	fba0 1202 	umull	r1, r2, r0, r2
 800305a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800305c:	460a      	mov	r2, r1
 800305e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003062:	4413      	add	r3, r2
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003068:	2200      	movs	r2, #0
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	61fa      	str	r2, [r7, #28]
 800306e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003072:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003076:	f7fd f8fb 	bl	8000270 <__aeabi_uldivmod>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4613      	mov	r3, r2
 8003080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003082:	e053      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003084:	4b35      	ldr	r3, [pc, #212]	@ (800315c <HAL_RCC_GetSysClockFreq+0x180>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	099b      	lsrs	r3, r3, #6
 800308a:	2200      	movs	r2, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	617a      	str	r2, [r7, #20]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003096:	f04f 0b00 	mov.w	fp, #0
 800309a:	4652      	mov	r2, sl
 800309c:	465b      	mov	r3, fp
 800309e:	f04f 0000 	mov.w	r0, #0
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	0159      	lsls	r1, r3, #5
 80030a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ac:	0150      	lsls	r0, r2, #5
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	ebb2 080a 	subs.w	r8, r2, sl
 80030b6:	eb63 090b 	sbc.w	r9, r3, fp
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030ce:	ebb2 0408 	subs.w	r4, r2, r8
 80030d2:	eb63 0509 	sbc.w	r5, r3, r9
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	00eb      	lsls	r3, r5, #3
 80030e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e4:	00e2      	lsls	r2, r4, #3
 80030e6:	4614      	mov	r4, r2
 80030e8:	461d      	mov	r5, r3
 80030ea:	eb14 030a 	adds.w	r3, r4, sl
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	eb45 030b 	adc.w	r3, r5, fp
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003102:	4629      	mov	r1, r5
 8003104:	028b      	lsls	r3, r1, #10
 8003106:	4621      	mov	r1, r4
 8003108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800310c:	4621      	mov	r1, r4
 800310e:	028a      	lsls	r2, r1, #10
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003116:	2200      	movs	r2, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	60fa      	str	r2, [r7, #12]
 800311c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003120:	f7fd f8a6 	bl	8000270 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4613      	mov	r3, r2
 800312a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800312c:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <HAL_RCC_GetSysClockFreq+0x180>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800313c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800313e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x184>)
 800314a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003150:	4618      	mov	r0, r3
 8003152:	3740      	adds	r7, #64	@ 0x40
 8003154:	46bd      	mov	sp, r7
 8003156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	00f42400 	.word	0x00f42400
 8003164:	017d7840 	.word	0x017d7840

08003168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b03      	ldr	r3, [pc, #12]	@ (800317c <HAL_RCC_GetHCLKFreq+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003184:	f7ff fff0 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	@ (80031a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0a9b      	lsrs	r3, r3, #10
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	@ (80031a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40023800 	.word	0x40023800
 80031a4:	080141b4 	.word	0x080141b4

080031a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031ac:	f7ff ffdc 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0b5b      	lsrs	r3, r3, #13
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	@ (80031cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	080141b4 	.word	0x080141b4

080031d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e042      	b.n	8003268 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd fb26 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2224      	movs	r2, #36	@ 0x24
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fc99 	bl	8003b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b0ba      	sub	sp, #232	@ 0xe8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003296:	2300      	movs	r3, #0
 8003298:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800329c:	2300      	movs	r3, #0
 800329e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80032ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_UART_IRQHandler+0x66>
 80032c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fb7e 	bl	80039d0 <UART_Receive_IT>
      return;
 80032d4:	e273      	b.n	80037be <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80de 	beq.w	800349c <HAL_UART_IRQHandler+0x22c>
 80032e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d106      	bne.n	80032fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80d1 	beq.w	800349c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <HAL_UART_IRQHandler+0xae>
 8003306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800330a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800331e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <HAL_UART_IRQHandler+0xd2>
 800332a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f043 0202 	orr.w	r2, r3, #2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_UART_IRQHandler+0xf6>
 800334e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335e:	f043 0204 	orr.w	r2, r3, #4
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d011      	beq.n	8003396 <HAL_UART_IRQHandler+0x126>
 8003372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d105      	bne.n	800338a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800337e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f043 0208 	orr.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 820a 	beq.w	80037b4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_UART_IRQHandler+0x14e>
 80033ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fb09 	bl	80039d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c8:	2b40      	cmp	r3, #64	@ 0x40
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d103      	bne.n	80033ea <HAL_UART_IRQHandler+0x17a>
 80033e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d04f      	beq.n	800348a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fa14 	bl	8003818 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fa:	2b40      	cmp	r3, #64	@ 0x40
 80033fc:	d141      	bne.n	8003482 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3314      	adds	r3, #20
 8003404:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003414:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800341c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3314      	adds	r3, #20
 8003426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800342a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800342e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003436:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1d9      	bne.n	80033fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d013      	beq.n	800347a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003456:	4a8a      	ldr	r2, [pc, #552]	@ (8003680 <HAL_UART_IRQHandler+0x410>)
 8003458:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fecf 	bl	8001202 <HAL_DMA_Abort_IT>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d016      	beq.n	8003498 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003474:	4610      	mov	r0, r2
 8003476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003478:	e00e      	b.n	8003498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f9b6 	bl	80037ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003480:	e00a      	b.n	8003498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f9b2 	bl	80037ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003488:	e006      	b.n	8003498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f9ae 	bl	80037ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003496:	e18d      	b.n	80037b4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003498:	bf00      	nop
    return;
 800349a:	e18b      	b.n	80037b4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	f040 8167 	bne.w	8003774 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8160 	beq.w	8003774 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80034b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8159 	beq.w	8003774 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e2:	2b40      	cmp	r3, #64	@ 0x40
 80034e4:	f040 80ce 	bne.w	8003684 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80a9 	beq.w	8003650 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003506:	429a      	cmp	r2, r3
 8003508:	f080 80a2 	bcs.w	8003650 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003512:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800351e:	f000 8088 	beq.w	8003632 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003538:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800353c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003540:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	330c      	adds	r3, #12
 800354a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800354e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800355a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003566:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1d9      	bne.n	8003522 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3314      	adds	r3, #20
 8003574:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800357e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3314      	adds	r3, #20
 800358e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003592:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003596:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800359a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80035a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e1      	bne.n	800356e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3314      	adds	r3, #20
 80035b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035b4:	e853 3f00 	ldrex	r3, [r3]
 80035b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80035ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3314      	adds	r3, #20
 80035ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80035d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80035dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e3      	bne.n	80035aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003602:	f023 0310 	bic.w	r3, r3, #16
 8003606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	330c      	adds	r3, #12
 8003610:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003614:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003616:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800361a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e3      	bne.n	80035f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fd78 	bl	8001122 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003640:	b29b      	uxth	r3, r3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	4619      	mov	r1, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f8d9 	bl	8003800 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800364e:	e0b3      	b.n	80037b8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003654:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003658:	429a      	cmp	r2, r3
 800365a:	f040 80ad 	bne.w	80037b8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003668:	f040 80a6 	bne.w	80037b8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f8c1 	bl	8003800 <HAL_UARTEx_RxEventCallback>
      return;
 800367e:	e09b      	b.n	80037b8 <HAL_UART_IRQHandler+0x548>
 8003680:	080038df 	.word	0x080038df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800368c:	b29b      	uxth	r3, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 808e 	beq.w	80037bc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80036a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8089 	beq.w	80037bc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80036d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e3      	bne.n	80036aa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	623b      	str	r3, [r7, #32]
   return(result);
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3314      	adds	r3, #20
 8003702:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003706:	633a      	str	r2, [r7, #48]	@ 0x30
 8003708:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800370c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e3      	bne.n	80036e2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	60fb      	str	r3, [r7, #12]
   return(result);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0310 	bic.w	r3, r3, #16
 800373e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800374c:	61fa      	str	r2, [r7, #28]
 800374e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	69b9      	ldr	r1, [r7, #24]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	617b      	str	r3, [r7, #20]
   return(result);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e3      	bne.n	8003728 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003766:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800376a:	4619      	mov	r1, r3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f847 	bl	8003800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003772:	e023      	b.n	80037bc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_UART_IRQHandler+0x524>
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8b7 	bl	8003900 <UART_Transmit_IT>
    return;
 8003792:	e014      	b.n	80037be <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00e      	beq.n	80037be <HAL_UART_IRQHandler+0x54e>
 80037a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8f7 	bl	80039a0 <UART_EndTransmit_IT>
    return;
 80037b2:	e004      	b.n	80037be <HAL_UART_IRQHandler+0x54e>
    return;
 80037b4:	bf00      	nop
 80037b6:	e002      	b.n	80037be <HAL_UART_IRQHandler+0x54e>
      return;
 80037b8:	bf00      	nop
 80037ba:	e000      	b.n	80037be <HAL_UART_IRQHandler+0x54e>
      return;
 80037bc:	bf00      	nop
  }
}
 80037be:	37e8      	adds	r7, #232	@ 0xe8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003818:	b480      	push	{r7}
 800381a:	b095      	sub	sp, #84	@ 0x54
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	330c      	adds	r3, #12
 800383e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003840:	643a      	str	r2, [r7, #64]	@ 0x40
 8003842:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e5      	bne.n	8003820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3314      	adds	r3, #20
 800385a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	61fb      	str	r3, [r7, #28]
   return(result);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3314      	adds	r3, #20
 8003872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003874:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003876:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800387a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e5      	bne.n	8003854 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	2b01      	cmp	r3, #1
 800388e:	d119      	bne.n	80038c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f023 0310 	bic.w	r3, r3, #16
 80038a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038b0:	61ba      	str	r2, [r7, #24]
 80038b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6979      	ldr	r1, [r7, #20]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	613b      	str	r3, [r7, #16]
   return(result);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e5      	bne.n	8003890 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038d2:	bf00      	nop
 80038d4:	3754      	adds	r7, #84	@ 0x54
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff ff7a 	bl	80037ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b21      	cmp	r3, #33	@ 0x21
 8003912:	d13e      	bne.n	8003992 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391c:	d114      	bne.n	8003948 <UART_Transmit_IT+0x48>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d110      	bne.n	8003948 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800393a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	1c9a      	adds	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]
 8003946:	e008      	b.n	800395a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	1c59      	adds	r1, r3, #1
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6211      	str	r1, [r2, #32]
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29b      	uxth	r3, r3
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4619      	mov	r1, r3
 8003968:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10f      	bne.n	800398e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800397c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800398c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff feff 	bl	80037c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08c      	sub	sp, #48	@ 0x30
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b22      	cmp	r3, #34	@ 0x22
 80039ea:	f040 80aa 	bne.w	8003b42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f6:	d115      	bne.n	8003a24 <UART_Receive_IT+0x54>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d111      	bne.n	8003a24 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	1c9a      	adds	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a22:	e024      	b.n	8003a6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a32:	d007      	beq.n	8003a44 <UART_Receive_IT+0x74>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <UART_Receive_IT+0x82>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	e008      	b.n	8003a64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d15d      	bne.n	8003b3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0220 	bic.w	r2, r2, #32
 8003a90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695a      	ldr	r2, [r3, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0201 	bic.w	r2, r2, #1
 8003ab0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d135      	bne.n	8003b34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f023 0310 	bic.w	r3, r3, #16
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aee:	623a      	str	r2, [r7, #32]
 8003af0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	69f9      	ldr	r1, [r7, #28]
 8003af4:	6a3a      	ldr	r2, [r7, #32]
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e5      	bne.n	8003ace <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d10a      	bne.n	8003b26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fe67 	bl	8003800 <HAL_UARTEx_RxEventCallback>
 8003b32:	e002      	b.n	8003b3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff fe4f 	bl	80037d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e002      	b.n	8003b44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3730      	adds	r7, #48	@ 0x30
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b50:	b0c0      	sub	sp, #256	@ 0x100
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	68d9      	ldr	r1, [r3, #12]
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	ea40 0301 	orr.w	r3, r0, r1
 8003b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ba4:	f021 010c 	bic.w	r1, r1, #12
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc6:	6999      	ldr	r1, [r3, #24]
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	ea40 0301 	orr.w	r3, r0, r1
 8003bd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b8f      	ldr	r3, [pc, #572]	@ (8003e18 <UART_SetConfig+0x2cc>)
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d005      	beq.n	8003bec <UART_SetConfig+0xa0>
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b8d      	ldr	r3, [pc, #564]	@ (8003e1c <UART_SetConfig+0x2d0>)
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d104      	bne.n	8003bf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bec:	f7ff fadc 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 8003bf0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bf4:	e003      	b.n	8003bfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bf6:	f7ff fac3 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8003bfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c08:	f040 810c 	bne.w	8003e24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c1e:	4622      	mov	r2, r4
 8003c20:	462b      	mov	r3, r5
 8003c22:	1891      	adds	r1, r2, r2
 8003c24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c26:	415b      	adcs	r3, r3
 8003c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c2e:	4621      	mov	r1, r4
 8003c30:	eb12 0801 	adds.w	r8, r2, r1
 8003c34:	4629      	mov	r1, r5
 8003c36:	eb43 0901 	adc.w	r9, r3, r1
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c4e:	4690      	mov	r8, r2
 8003c50:	4699      	mov	r9, r3
 8003c52:	4623      	mov	r3, r4
 8003c54:	eb18 0303 	adds.w	r3, r8, r3
 8003c58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c5c:	462b      	mov	r3, r5
 8003c5e:	eb49 0303 	adc.w	r3, r9, r3
 8003c62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	18db      	adds	r3, r3, r3
 8003c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c80:	4613      	mov	r3, r2
 8003c82:	eb42 0303 	adc.w	r3, r2, r3
 8003c86:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c90:	f7fc faee 	bl	8000270 <__aeabi_uldivmod>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4b61      	ldr	r3, [pc, #388]	@ (8003e20 <UART_SetConfig+0x2d4>)
 8003c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	011c      	lsls	r4, r3, #4
 8003ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003cb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	1891      	adds	r1, r2, r2
 8003cba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003cbc:	415b      	adcs	r3, r3
 8003cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	eb12 0a01 	adds.w	sl, r2, r1
 8003cca:	4649      	mov	r1, r9
 8003ccc:	eb43 0b01 	adc.w	fp, r3, r1
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ce4:	4692      	mov	sl, r2
 8003ce6:	469b      	mov	fp, r3
 8003ce8:	4643      	mov	r3, r8
 8003cea:	eb1a 0303 	adds.w	r3, sl, r3
 8003cee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8003cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d10:	460b      	mov	r3, r1
 8003d12:	18db      	adds	r3, r3, r3
 8003d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d16:	4613      	mov	r3, r2
 8003d18:	eb42 0303 	adc.w	r3, r2, r3
 8003d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d26:	f7fc faa3 	bl	8000270 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4b3b      	ldr	r3, [pc, #236]	@ (8003e20 <UART_SetConfig+0x2d4>)
 8003d32:	fba3 2301 	umull	r2, r3, r3, r1
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2264      	movs	r2, #100	@ 0x64
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	1acb      	subs	r3, r1, r3
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d46:	4b36      	ldr	r3, [pc, #216]	@ (8003e20 <UART_SetConfig+0x2d4>)
 8003d48:	fba3 2302 	umull	r2, r3, r3, r2
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d54:	441c      	add	r4, r3
 8003d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d68:	4642      	mov	r2, r8
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	1891      	adds	r1, r2, r2
 8003d6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d70:	415b      	adcs	r3, r3
 8003d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d78:	4641      	mov	r1, r8
 8003d7a:	1851      	adds	r1, r2, r1
 8003d7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d7e:	4649      	mov	r1, r9
 8003d80:	414b      	adcs	r3, r1
 8003d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d90:	4659      	mov	r1, fp
 8003d92:	00cb      	lsls	r3, r1, #3
 8003d94:	4651      	mov	r1, sl
 8003d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d9a:	4651      	mov	r1, sl
 8003d9c:	00ca      	lsls	r2, r1, #3
 8003d9e:	4610      	mov	r0, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	4642      	mov	r2, r8
 8003da6:	189b      	adds	r3, r3, r2
 8003da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dac:	464b      	mov	r3, r9
 8003dae:	460a      	mov	r2, r1
 8003db0:	eb42 0303 	adc.w	r3, r2, r3
 8003db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dcc:	460b      	mov	r3, r1
 8003dce:	18db      	adds	r3, r3, r3
 8003dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	eb42 0303 	adc.w	r3, r2, r3
 8003dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003de2:	f7fc fa45 	bl	8000270 <__aeabi_uldivmod>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4b0d      	ldr	r3, [pc, #52]	@ (8003e20 <UART_SetConfig+0x2d4>)
 8003dec:	fba3 1302 	umull	r1, r3, r3, r2
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	2164      	movs	r1, #100	@ 0x64
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	3332      	adds	r3, #50	@ 0x32
 8003dfe:	4a08      	ldr	r2, [pc, #32]	@ (8003e20 <UART_SetConfig+0x2d4>)
 8003e00:	fba2 2303 	umull	r2, r3, r2, r3
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	f003 0207 	and.w	r2, r3, #7
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4422      	add	r2, r4
 8003e12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e14:	e106      	b.n	8004024 <UART_SetConfig+0x4d8>
 8003e16:	bf00      	nop
 8003e18:	40011000 	.word	0x40011000
 8003e1c:	40011400 	.word	0x40011400
 8003e20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e36:	4642      	mov	r2, r8
 8003e38:	464b      	mov	r3, r9
 8003e3a:	1891      	adds	r1, r2, r2
 8003e3c:	6239      	str	r1, [r7, #32]
 8003e3e:	415b      	adcs	r3, r3
 8003e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e46:	4641      	mov	r1, r8
 8003e48:	1854      	adds	r4, r2, r1
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	eb43 0501 	adc.w	r5, r3, r1
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	00eb      	lsls	r3, r5, #3
 8003e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e5e:	00e2      	lsls	r2, r4, #3
 8003e60:	4614      	mov	r4, r2
 8003e62:	461d      	mov	r5, r3
 8003e64:	4643      	mov	r3, r8
 8003e66:	18e3      	adds	r3, r4, r3
 8003e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	eb45 0303 	adc.w	r3, r5, r3
 8003e72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e92:	4629      	mov	r1, r5
 8003e94:	008b      	lsls	r3, r1, #2
 8003e96:	4621      	mov	r1, r4
 8003e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	008a      	lsls	r2, r1, #2
 8003ea0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ea4:	f7fc f9e4 	bl	8000270 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4b60      	ldr	r3, [pc, #384]	@ (8004030 <UART_SetConfig+0x4e4>)
 8003eae:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	011c      	lsls	r4, r3, #4
 8003eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ec0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ec4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ec8:	4642      	mov	r2, r8
 8003eca:	464b      	mov	r3, r9
 8003ecc:	1891      	adds	r1, r2, r2
 8003ece:	61b9      	str	r1, [r7, #24]
 8003ed0:	415b      	adcs	r3, r3
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ed8:	4641      	mov	r1, r8
 8003eda:	1851      	adds	r1, r2, r1
 8003edc:	6139      	str	r1, [r7, #16]
 8003ede:	4649      	mov	r1, r9
 8003ee0:	414b      	adcs	r3, r1
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ef0:	4659      	mov	r1, fp
 8003ef2:	00cb      	lsls	r3, r1, #3
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003efa:	4651      	mov	r1, sl
 8003efc:	00ca      	lsls	r2, r1, #3
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	4642      	mov	r2, r8
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	460a      	mov	r2, r1
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f30:	4649      	mov	r1, r9
 8003f32:	008b      	lsls	r3, r1, #2
 8003f34:	4641      	mov	r1, r8
 8003f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f3a:	4641      	mov	r1, r8
 8003f3c:	008a      	lsls	r2, r1, #2
 8003f3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f42:	f7fc f995 	bl	8000270 <__aeabi_uldivmod>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4b38      	ldr	r3, [pc, #224]	@ (8004030 <UART_SetConfig+0x4e4>)
 8003f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	2264      	movs	r2, #100	@ 0x64
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	1acb      	subs	r3, r1, r3
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	3332      	adds	r3, #50	@ 0x32
 8003f60:	4a33      	ldr	r2, [pc, #204]	@ (8004030 <UART_SetConfig+0x4e4>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f6c:	441c      	add	r4, r3
 8003f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f72:	2200      	movs	r2, #0
 8003f74:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f76:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	1891      	adds	r1, r2, r2
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	415b      	adcs	r3, r3
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	1851      	adds	r1, r2, r1
 8003f90:	6039      	str	r1, [r7, #0]
 8003f92:	4649      	mov	r1, r9
 8003f94:	414b      	adcs	r3, r1
 8003f96:	607b      	str	r3, [r7, #4]
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fa4:	4659      	mov	r1, fp
 8003fa6:	00cb      	lsls	r3, r1, #3
 8003fa8:	4651      	mov	r1, sl
 8003faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fae:	4651      	mov	r1, sl
 8003fb0:	00ca      	lsls	r2, r1, #3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4642      	mov	r2, r8
 8003fba:	189b      	adds	r3, r3, r2
 8003fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	460a      	mov	r2, r1
 8003fc2:	eb42 0303 	adc.w	r3, r2, r3
 8003fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fe0:	4649      	mov	r1, r9
 8003fe2:	008b      	lsls	r3, r1, #2
 8003fe4:	4641      	mov	r1, r8
 8003fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fea:	4641      	mov	r1, r8
 8003fec:	008a      	lsls	r2, r1, #2
 8003fee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ff2:	f7fc f93d 	bl	8000270 <__aeabi_uldivmod>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <UART_SetConfig+0x4e4>)
 8003ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	2164      	movs	r1, #100	@ 0x64
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	3332      	adds	r3, #50	@ 0x32
 800400e:	4a08      	ldr	r2, [pc, #32]	@ (8004030 <UART_SetConfig+0x4e4>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	f003 020f 	and.w	r2, r3, #15
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4422      	add	r2, r4
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800402a:	46bd      	mov	sp, r7
 800402c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004030:	51eb851f 	.word	0x51eb851f

08004034 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800403a:	f000 fb96 	bl	800476a <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800403e:	4b12      	ldr	r3, [pc, #72]	@ (8004088 <MX_LWIP_Init+0x54>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004044:	4b11      	ldr	r3, [pc, #68]	@ (800408c <MX_LWIP_Init+0x58>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800404a:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <MX_LWIP_Init+0x5c>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004050:	4b10      	ldr	r3, [pc, #64]	@ (8004094 <MX_LWIP_Init+0x60>)
 8004052:	9302      	str	r3, [sp, #8]
 8004054:	4b10      	ldr	r3, [pc, #64]	@ (8004098 <MX_LWIP_Init+0x64>)
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	2300      	movs	r3, #0
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4b0c      	ldr	r3, [pc, #48]	@ (8004090 <MX_LWIP_Init+0x5c>)
 800405e:	4a0b      	ldr	r2, [pc, #44]	@ (800408c <MX_LWIP_Init+0x58>)
 8004060:	4909      	ldr	r1, [pc, #36]	@ (8004088 <MX_LWIP_Init+0x54>)
 8004062:	480e      	ldr	r0, [pc, #56]	@ (800409c <MX_LWIP_Init+0x68>)
 8004064:	f001 f86c 	bl	8005140 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004068:	480c      	ldr	r0, [pc, #48]	@ (800409c <MX_LWIP_Init+0x68>)
 800406a:	f001 fa23 	bl	80054b4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800406e:	480b      	ldr	r0, [pc, #44]	@ (800409c <MX_LWIP_Init+0x68>)
 8004070:	f001 fa30 	bl	80054d4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004074:	490a      	ldr	r1, [pc, #40]	@ (80040a0 <MX_LWIP_Init+0x6c>)
 8004076:	4809      	ldr	r0, [pc, #36]	@ (800409c <MX_LWIP_Init+0x68>)
 8004078:	f001 fb32 	bl	80056e0 <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800407c:	4807      	ldr	r0, [pc, #28]	@ (800409c <MX_LWIP_Init+0x68>)
 800407e:	f008 fbc5 	bl	800c80c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004082:	bf00      	nop
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000130 	.word	0x20000130
 800408c:	20000134 	.word	0x20000134
 8004090:	20000138 	.word	0x20000138
 8004094:	08010251 	.word	0x08010251
 8004098:	080042fd 	.word	0x080042fd
 800409c:	200000f8 	.word	0x200000f8
 80040a0:	080040a5 	.word	0x080040a5

080040a4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80040c4:	4b44      	ldr	r3, [pc, #272]	@ (80041d8 <low_level_init+0x120>)
 80040c6:	4a45      	ldr	r2, [pc, #276]	@ (80041dc <low_level_init+0x124>)
 80040c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80040ca:	2300      	movs	r3, #0
 80040cc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80040ce:	2380      	movs	r3, #128	@ 0x80
 80040d0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80040d2:	23e1      	movs	r3, #225	@ 0xe1
 80040d4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80040d6:	2300      	movs	r3, #0
 80040d8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80040da:	2300      	movs	r3, #0
 80040dc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80040de:	2300      	movs	r3, #0
 80040e0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80040e2:	4a3d      	ldr	r2, [pc, #244]	@ (80041d8 <low_level_init+0x120>)
 80040e4:	f107 0308 	add.w	r3, r7, #8
 80040e8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80040ea:	4b3b      	ldr	r3, [pc, #236]	@ (80041d8 <low_level_init+0x120>)
 80040ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80040f0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80040f2:	4b39      	ldr	r3, [pc, #228]	@ (80041d8 <low_level_init+0x120>)
 80040f4:	4a3a      	ldr	r2, [pc, #232]	@ (80041e0 <low_level_init+0x128>)
 80040f6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80040f8:	4b37      	ldr	r3, [pc, #220]	@ (80041d8 <low_level_init+0x120>)
 80040fa:	4a3a      	ldr	r2, [pc, #232]	@ (80041e4 <low_level_init+0x12c>)
 80040fc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80040fe:	4b36      	ldr	r3, [pc, #216]	@ (80041d8 <low_level_init+0x120>)
 8004100:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004104:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004106:	4834      	ldr	r0, [pc, #208]	@ (80041d8 <low_level_init+0x120>)
 8004108:	f7fd f89e 	bl	8001248 <HAL_ETH_Init>
 800410c:	4603      	mov	r3, r0
 800410e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004110:	2238      	movs	r2, #56	@ 0x38
 8004112:	2100      	movs	r1, #0
 8004114:	4834      	ldr	r0, [pc, #208]	@ (80041e8 <low_level_init+0x130>)
 8004116:	f00c fad6 	bl	80106c6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800411a:	4b33      	ldr	r3, [pc, #204]	@ (80041e8 <low_level_init+0x130>)
 800411c:	2221      	movs	r2, #33	@ 0x21
 800411e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004120:	4b31      	ldr	r3, [pc, #196]	@ (80041e8 <low_level_init+0x130>)
 8004122:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004126:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004128:	4b2f      	ldr	r3, [pc, #188]	@ (80041e8 <low_level_init+0x130>)
 800412a:	2200      	movs	r2, #0
 800412c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800412e:	482f      	ldr	r0, [pc, #188]	@ (80041ec <low_level_init+0x134>)
 8004130:	f000 fece 	bl	8004ed0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2206      	movs	r2, #6
 8004138:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800413c:	4b26      	ldr	r3, [pc, #152]	@ (80041d8 <low_level_init+0x120>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	781a      	ldrb	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004148:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <low_level_init+0x120>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	785a      	ldrb	r2, [r3, #1]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004154:	4b20      	ldr	r3, [pc, #128]	@ (80041d8 <low_level_init+0x120>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	789a      	ldrb	r2, [r3, #2]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004160:	4b1d      	ldr	r3, [pc, #116]	@ (80041d8 <low_level_init+0x120>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	78da      	ldrb	r2, [r3, #3]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800416c:	4b1a      	ldr	r3, [pc, #104]	@ (80041d8 <low_level_init+0x120>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	791a      	ldrb	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004178:	4b17      	ldr	r3, [pc, #92]	@ (80041d8 <low_level_init+0x120>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	795a      	ldrb	r2, [r3, #5]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800418a:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004192:	f043 030a 	orr.w	r3, r3, #10
 8004196:	b2da      	uxtb	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800419e:	4914      	ldr	r1, [pc, #80]	@ (80041f0 <low_level_init+0x138>)
 80041a0:	4814      	ldr	r0, [pc, #80]	@ (80041f4 <low_level_init+0x13c>)
 80041a2:	f7fc fd10 	bl	8000bc6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80041a6:	4813      	ldr	r0, [pc, #76]	@ (80041f4 <low_level_init+0x13c>)
 80041a8:	f7fc fd3f 	bl	8000c2a <LAN8742_Init>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d006      	beq.n	80041c0 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f001 fa64 	bl	8005680 <netif_set_link_down>
    netif_set_down(netif);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f001 f9f7 	bl	80055ac <netif_set_down>
 80041be:	e008      	b.n	80041d2 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d103      	bne.n	80041ce <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f9e4 	bl	8004594 <ethernet_link_check_state>
 80041cc:	e001      	b.n	80041d2 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80041ce:	f7fc fb0d 	bl	80007ec <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20004c08 	.word	0x20004c08
 80041dc:	40028000 	.word	0x40028000
 80041e0:	20004b68 	.word	0x20004b68
 80041e4:	20004ac8 	.word	0x20004ac8
 80041e8:	20004cb8 	.word	0x20004cb8
 80041ec:	080141bc 	.word	0x080141bc
 80041f0:	2000000c 	.word	0x2000000c
 80041f4:	20004cf0 	.word	0x20004cf0

080041f8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b092      	sub	sp, #72	@ 0x48
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004210:	f107 030c 	add.w	r3, r7, #12
 8004214:	2230      	movs	r2, #48	@ 0x30
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f00c fa54 	bl	80106c6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800421e:	f107 030c 	add.w	r3, r7, #12
 8004222:	2230      	movs	r2, #48	@ 0x30
 8004224:	2100      	movs	r1, #0
 8004226:	4618      	mov	r0, r3
 8004228:	f00c fa4d 	bl	80106c6 <memset>

  for(q = p; q != NULL; q = q->next)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004230:	e045      	b.n	80042be <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004234:	2b03      	cmp	r3, #3
 8004236:	d902      	bls.n	800423e <low_level_output+0x46>
      return ERR_IF;
 8004238:	f06f 030b 	mvn.w	r3, #11
 800423c:	e055      	b.n	80042ea <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800423e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004244:	4613      	mov	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	3348      	adds	r3, #72	@ 0x48
 800424e:	443b      	add	r3, r7
 8004250:	3b3c      	subs	r3, #60	@ 0x3c
 8004252:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004256:	895b      	ldrh	r3, [r3, #10]
 8004258:	4619      	mov	r1, r3
 800425a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800425c:	4613      	mov	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	3348      	adds	r3, #72	@ 0x48
 8004266:	443b      	add	r3, r7
 8004268:	3b38      	subs	r3, #56	@ 0x38
 800426a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800426c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800426e:	2b00      	cmp	r3, #0
 8004270:	d011      	beq.n	8004296 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004274:	1e5a      	subs	r2, r3, #1
 8004276:	f107 000c 	add.w	r0, r7, #12
 800427a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800427c:	460b      	mov	r3, r1
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	440b      	add	r3, r1
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	18c1      	adds	r1, r0, r3
 8004286:	4613      	mov	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	3348      	adds	r3, #72	@ 0x48
 8004290:	443b      	add	r3, r7
 8004292:	3b34      	subs	r3, #52	@ 0x34
 8004294:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800429e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042a0:	4613      	mov	r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	3348      	adds	r3, #72	@ 0x48
 80042aa:	443b      	add	r3, r7
 80042ac:	3b34      	subs	r3, #52	@ 0x34
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80042b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b4:	3301      	adds	r3, #1
 80042b6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80042b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80042be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1b6      	bne.n	8004232 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	891b      	ldrh	r3, [r3, #8]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <low_level_output+0xfc>)
 80042cc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80042ce:	4a09      	ldr	r2, [pc, #36]	@ (80042f4 <low_level_output+0xfc>)
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80042d6:	4a07      	ldr	r2, [pc, #28]	@ (80042f4 <low_level_output+0xfc>)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80042dc:	2214      	movs	r2, #20
 80042de:	4905      	ldr	r1, [pc, #20]	@ (80042f4 <low_level_output+0xfc>)
 80042e0:	4805      	ldr	r0, [pc, #20]	@ (80042f8 <low_level_output+0x100>)
 80042e2:	f7fd f93c 	bl	800155e <HAL_ETH_Transmit>

  return errval;
 80042e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3748      	adds	r7, #72	@ 0x48
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20004cb8 	.word	0x20004cb8
 80042f8:	20004c08 	.word	0x20004c08

080042fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <ethernetif_init+0x1c>
 800430a:	4b0e      	ldr	r3, [pc, #56]	@ (8004344 <ethernetif_init+0x48>)
 800430c:	f240 126f 	movw	r2, #367	@ 0x16f
 8004310:	490d      	ldr	r1, [pc, #52]	@ (8004348 <ethernetif_init+0x4c>)
 8004312:	480e      	ldr	r0, [pc, #56]	@ (800434c <ethernetif_init+0x50>)
 8004314:	f00c f972 	bl	80105fc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2273      	movs	r2, #115	@ 0x73
 800431c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2274      	movs	r2, #116	@ 0x74
 8004324:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <ethernetif_init+0x54>)
 800432c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a08      	ldr	r2, [pc, #32]	@ (8004354 <ethernetif_init+0x58>)
 8004332:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff febf 	bl	80040b8 <low_level_init>

  return ERR_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	08011424 	.word	0x08011424
 8004348:	08011440 	.word	0x08011440
 800434c:	08011450 	.word	0x08011450
 8004350:	0800e6cd 	.word	0x0800e6cd
 8004354:	080041f9 	.word	0x080041f9

08004358 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004364:	68f9      	ldr	r1, [r7, #12]
 8004366:	4807      	ldr	r0, [pc, #28]	@ (8004384 <pbuf_free_custom+0x2c>)
 8004368:	f000 fe94 	bl	8005094 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800436c:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <pbuf_free_custom+0x30>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d102      	bne.n	800437a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004374:	4b04      	ldr	r3, [pc, #16]	@ (8004388 <pbuf_free_custom+0x30>)
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
  }
}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	080141bc 	.word	0x080141bc
 8004388:	20004ac4 	.word	0x20004ac4

0800438c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004390:	f7fc fd86 	bl	8000ea0 <HAL_GetTick>
 8004394:	4603      	mov	r3, r0
}
 8004396:	4618      	mov	r0, r3
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08e      	sub	sp, #56	@ 0x38
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a4a      	ldr	r2, [pc, #296]	@ (80044e4 <HAL_ETH_MspInit+0x148>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	f040 808d 	bne.w	80044da <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80043c0:	2300      	movs	r3, #0
 80043c2:	623b      	str	r3, [r7, #32]
 80043c4:	4b48      	ldr	r3, [pc, #288]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 80043c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c8:	4a47      	ldr	r2, [pc, #284]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 80043ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d0:	4b45      	ldr	r3, [pc, #276]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 80043d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	4b41      	ldr	r3, [pc, #260]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 80043e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e4:	4a40      	ldr	r2, [pc, #256]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 80043e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ec:	4b3e      	ldr	r3, [pc, #248]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 80043ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043f4:	61fb      	str	r3, [r7, #28]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	2300      	movs	r3, #0
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	4b3a      	ldr	r3, [pc, #232]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	4a39      	ldr	r2, [pc, #228]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 8004402:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004406:	6313      	str	r3, [r2, #48]	@ 0x30
 8004408:	4b37      	ldr	r3, [pc, #220]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	4b33      	ldr	r3, [pc, #204]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441c:	4a32      	ldr	r2, [pc, #200]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 800441e:	f043 0304 	orr.w	r3, r3, #4
 8004422:	6313      	str	r3, [r2, #48]	@ 0x30
 8004424:	4b30      	ldr	r3, [pc, #192]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	4b2c      	ldr	r3, [pc, #176]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 8004436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004438:	4a2b      	ldr	r2, [pc, #172]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004440:	4b29      	ldr	r3, [pc, #164]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 8004442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	4b25      	ldr	r3, [pc, #148]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	4a24      	ldr	r2, [pc, #144]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 8004456:	f043 0302 	orr.w	r3, r3, #2
 800445a:	6313      	str	r3, [r2, #48]	@ 0x30
 800445c:	4b22      	ldr	r3, [pc, #136]	@ (80044e8 <HAL_ETH_MspInit+0x14c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004468:	2332      	movs	r3, #50	@ 0x32
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446c:	2302      	movs	r3, #2
 800446e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	2300      	movs	r3, #0
 8004472:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004474:	2303      	movs	r3, #3
 8004476:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004478:	230b      	movs	r3, #11
 800447a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800447c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004480:	4619      	mov	r1, r3
 8004482:	481a      	ldr	r0, [pc, #104]	@ (80044ec <HAL_ETH_MspInit+0x150>)
 8004484:	f7fe f872 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004488:	2386      	movs	r3, #134	@ 0x86
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448c:	2302      	movs	r3, #2
 800448e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004490:	2300      	movs	r3, #0
 8004492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004494:	2303      	movs	r3, #3
 8004496:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004498:	230b      	movs	r3, #11
 800449a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800449c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044a0:	4619      	mov	r1, r3
 80044a2:	4813      	ldr	r0, [pc, #76]	@ (80044f0 <HAL_ETH_MspInit+0x154>)
 80044a4:	f7fe f862 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80044a8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	2302      	movs	r3, #2
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b6:	2303      	movs	r3, #3
 80044b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044ba:	230b      	movs	r3, #11
 80044bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044c2:	4619      	mov	r1, r3
 80044c4:	480b      	ldr	r0, [pc, #44]	@ (80044f4 <HAL_ETH_MspInit+0x158>)
 80044c6:	f7fe f851 	bl	800256c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80044ca:	2200      	movs	r2, #0
 80044cc:	2100      	movs	r1, #0
 80044ce:	203d      	movs	r0, #61	@ 0x3d
 80044d0:	f7fc fdf1 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80044d4:	203d      	movs	r0, #61	@ 0x3d
 80044d6:	f7fc fe0a 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80044da:	bf00      	nop
 80044dc:	3738      	adds	r7, #56	@ 0x38
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40028000 	.word	0x40028000
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40020800 	.word	0x40020800
 80044f0:	40020000 	.word	0x40020000
 80044f4:	40020400 	.word	0x40020400

080044f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80044fc:	4802      	ldr	r0, [pc, #8]	@ (8004508 <ETH_PHY_IO_Init+0x10>)
 80044fe:	f7fd fbd1 	bl	8001ca4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20004c08 	.word	0x20004c08

0800450c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return 0;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	68f9      	ldr	r1, [r7, #12]
 800452e:	4807      	ldr	r0, [pc, #28]	@ (800454c <ETH_PHY_IO_ReadReg+0x30>)
 8004530:	f7fd fa12 	bl	8001958 <HAL_ETH_ReadPHYRegister>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800453a:	f04f 33ff 	mov.w	r3, #4294967295
 800453e:	e000      	b.n	8004542 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20004c08 	.word	0x20004c08

08004550 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	4807      	ldr	r0, [pc, #28]	@ (8004580 <ETH_PHY_IO_WriteReg+0x30>)
 8004564:	f7fd fa43 	bl	80019ee <HAL_ETH_WritePHYRegister>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800456e:	f04f 33ff 	mov.w	r3, #4294967295
 8004572:	e000      	b.n	8004576 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20004c08 	.word	0x20004c08

08004584 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004588:	f7fc fc8a 	bl	8000ea0 <HAL_GetTick>
 800458c:	4603      	mov	r3, r0
}
 800458e:	4618      	mov	r0, r3
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b0a0      	sub	sp, #128	@ 0x80
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	2264      	movs	r2, #100	@ 0x64
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f00c f88e 	bl	80106c6 <memset>
  int32_t PHYLinkState = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045b2:	2300      	movs	r3, #0
 80045b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045b6:	2300      	movs	r3, #0
 80045b8:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80045ba:	483a      	ldr	r0, [pc, #232]	@ (80046a4 <ethernet_link_check_state+0x110>)
 80045bc:	f7fc fb82 	bl	8000cc4 <LAN8742_GetLinkState>
 80045c0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80045c8:	089b      	lsrs	r3, r3, #2
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00c      	beq.n	80045ee <ethernet_link_check_state+0x5a>
 80045d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	dc09      	bgt.n	80045ee <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 80045da:	4833      	ldr	r0, [pc, #204]	@ (80046a8 <ethernet_link_check_state+0x114>)
 80045dc:	f7fc ff40 	bl	8001460 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 ffe3 	bl	80055ac <netif_set_down>
    netif_set_link_down(netif);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 f84a 	bl	8005680 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80045ec:	e055      	b.n	800469a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d14e      	bne.n	800469a <ethernet_link_check_state+0x106>
 80045fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045fe:	2b01      	cmp	r3, #1
 8004600:	dd4b      	ble.n	800469a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004602:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004604:	3b02      	subs	r3, #2
 8004606:	2b03      	cmp	r3, #3
 8004608:	d82a      	bhi.n	8004660 <ethernet_link_check_state+0xcc>
 800460a:	a201      	add	r2, pc, #4	@ (adr r2, 8004610 <ethernet_link_check_state+0x7c>)
 800460c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004610:	08004621 	.word	0x08004621
 8004614:	08004633 	.word	0x08004633
 8004618:	08004643 	.word	0x08004643
 800461c:	08004653 	.word	0x08004653
      duplex = ETH_FULLDUPLEX_MODE;
 8004620:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004624:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004626:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800462a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800462c:	2301      	movs	r3, #1
 800462e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004630:	e017      	b.n	8004662 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004632:	2300      	movs	r3, #0
 8004634:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004636:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800463a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800463c:	2301      	movs	r3, #1
 800463e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004640:	e00f      	b.n	8004662 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004642:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004646:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004648:	2300      	movs	r3, #0
 800464a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800464c:	2301      	movs	r3, #1
 800464e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004650:	e007      	b.n	8004662 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004652:	2300      	movs	r3, #0
 8004654:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004656:	2300      	movs	r3, #0
 8004658:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800465a:	2301      	movs	r3, #1
 800465c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800465e:	e000      	b.n	8004662 <ethernet_link_check_state+0xce>
      break;
 8004660:	bf00      	nop
    if(linkchanged)
 8004662:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d018      	beq.n	800469a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004668:	f107 030c 	add.w	r3, r7, #12
 800466c:	4619      	mov	r1, r3
 800466e:	480e      	ldr	r0, [pc, #56]	@ (80046a8 <ethernet_link_check_state+0x114>)
 8004670:	f7fd fa06 	bl	8001a80 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004674:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8004678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800467a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800467c:	f107 030c 	add.w	r3, r7, #12
 8004680:	4619      	mov	r1, r3
 8004682:	4809      	ldr	r0, [pc, #36]	@ (80046a8 <ethernet_link_check_state+0x114>)
 8004684:	f7fd faf3 	bl	8001c6e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004688:	4807      	ldr	r0, [pc, #28]	@ (80046a8 <ethernet_link_check_state+0x114>)
 800468a:	f7fc fe79 	bl	8001380 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 ff20 	bl	80054d4 <netif_set_up>
      netif_set_link_up(netif);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 ffbb 	bl	8005610 <netif_set_link_up>
}
 800469a:	bf00      	nop
 800469c:	3780      	adds	r7, #128	@ 0x80
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20004cf0 	.word	0x20004cf0
 80046a8:	20004c08 	.word	0x20004c08

080046ac <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80046b4:	4812      	ldr	r0, [pc, #72]	@ (8004700 <HAL_ETH_RxAllocateCallback+0x54>)
 80046b6:	f000 fc7f 	bl	8004fb8 <memp_malloc_pool>
 80046ba:	60f8      	str	r0, [r7, #12]
  if (p)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d014      	beq.n	80046ec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f103 0220 	add.w	r2, r3, #32
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004704 <HAL_ETH_RxAllocateCallback+0x58>)
 80046d0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80046da:	9201      	str	r2, [sp, #4]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2241      	movs	r2, #65	@ 0x41
 80046e2:	2100      	movs	r1, #0
 80046e4:	2000      	movs	r0, #0
 80046e6:	f001 f9a1 	bl	8005a2c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80046ea:	e005      	b.n	80046f8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80046ec:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <HAL_ETH_RxAllocateCallback+0x5c>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	080141bc 	.word	0x080141bc
 8004704:	08004359 	.word	0x08004359
 8004708:	20004ac4 	.word	0x20004ac4

0800470c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	b21a      	sxth	r2, r3
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	0a1b      	lsrs	r3, r3, #8
 8004722:	b29b      	uxth	r3, r3
 8004724:	b21b      	sxth	r3, r3
 8004726:	4313      	orrs	r3, r2
 8004728:	b21b      	sxth	r3, r3
 800472a:	b29b      	uxth	r3, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	061a      	lsls	r2, r3, #24
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0a1b      	lsrs	r3, r3, #8
 8004752:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	0e1b      	lsrs	r3, r3, #24
 800475c:	4313      	orrs	r3, r2
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004774:	f000 f8d4 	bl	8004920 <mem_init>
  memp_init();
 8004778:	f000 fbda 	bl	8004f30 <memp_init>
  pbuf_init();
  netif_init();
 800477c:	f000 fcd8 	bl	8005130 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004780:	f007 f80c 	bl	800b79c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004784:	f001 fdaa 	bl	80062dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004788:	f006 ffc0 	bl	800b70c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800479e:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <ptr_to_mem+0x20>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	88fb      	ldrh	r3, [r7, #6]
 80047a4:	4413      	add	r3, r2
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	2000537c 	.word	0x2000537c

080047b8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80047c0:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <mem_to_ptr+0x20>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	b29b      	uxth	r3, r3
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	2000537c 	.word	0x2000537c

080047dc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80047dc:	b590      	push	{r4, r7, lr}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80047e4:	4b45      	ldr	r3, [pc, #276]	@ (80048fc <plug_holes+0x120>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d206      	bcs.n	80047fc <plug_holes+0x20>
 80047ee:	4b44      	ldr	r3, [pc, #272]	@ (8004900 <plug_holes+0x124>)
 80047f0:	f240 12df 	movw	r2, #479	@ 0x1df
 80047f4:	4943      	ldr	r1, [pc, #268]	@ (8004904 <plug_holes+0x128>)
 80047f6:	4844      	ldr	r0, [pc, #272]	@ (8004908 <plug_holes+0x12c>)
 80047f8:	f00b ff00 	bl	80105fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80047fc:	4b43      	ldr	r3, [pc, #268]	@ (800490c <plug_holes+0x130>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d306      	bcc.n	8004814 <plug_holes+0x38>
 8004806:	4b3e      	ldr	r3, [pc, #248]	@ (8004900 <plug_holes+0x124>)
 8004808:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800480c:	4940      	ldr	r1, [pc, #256]	@ (8004910 <plug_holes+0x134>)
 800480e:	483e      	ldr	r0, [pc, #248]	@ (8004908 <plug_holes+0x12c>)
 8004810:	f00b fef4 	bl	80105fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	791b      	ldrb	r3, [r3, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d006      	beq.n	800482a <plug_holes+0x4e>
 800481c:	4b38      	ldr	r3, [pc, #224]	@ (8004900 <plug_holes+0x124>)
 800481e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8004822:	493c      	ldr	r1, [pc, #240]	@ (8004914 <plug_holes+0x138>)
 8004824:	4838      	ldr	r0, [pc, #224]	@ (8004908 <plug_holes+0x12c>)
 8004826:	f00b fee9 	bl	80105fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004832:	d906      	bls.n	8004842 <plug_holes+0x66>
 8004834:	4b32      	ldr	r3, [pc, #200]	@ (8004900 <plug_holes+0x124>)
 8004836:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800483a:	4937      	ldr	r1, [pc, #220]	@ (8004918 <plug_holes+0x13c>)
 800483c:	4832      	ldr	r0, [pc, #200]	@ (8004908 <plug_holes+0x12c>)
 800483e:	f00b fedd 	bl	80105fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff ffa4 	bl	8004794 <ptr_to_mem>
 800484c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	429a      	cmp	r2, r3
 8004854:	d024      	beq.n	80048a0 <plug_holes+0xc4>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	791b      	ldrb	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d120      	bne.n	80048a0 <plug_holes+0xc4>
 800485e:	4b2b      	ldr	r3, [pc, #172]	@ (800490c <plug_holes+0x130>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	429a      	cmp	r2, r3
 8004866:	d01b      	beq.n	80048a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004868:	4b2c      	ldr	r3, [pc, #176]	@ (800491c <plug_holes+0x140>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	429a      	cmp	r2, r3
 8004870:	d102      	bne.n	8004878 <plug_holes+0x9c>
      lfree = mem;
 8004872:	4a2a      	ldr	r2, [pc, #168]	@ (800491c <plug_holes+0x140>)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	881a      	ldrh	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004888:	d00a      	beq.n	80048a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff ff80 	bl	8004794 <ptr_to_mem>
 8004894:	4604      	mov	r4, r0
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff ff8e 	bl	80047b8 <mem_to_ptr>
 800489c:	4603      	mov	r3, r0
 800489e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	885b      	ldrh	r3, [r3, #2]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff ff75 	bl	8004794 <ptr_to_mem>
 80048aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d01f      	beq.n	80048f4 <plug_holes+0x118>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	791b      	ldrb	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11b      	bne.n	80048f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80048bc:	4b17      	ldr	r3, [pc, #92]	@ (800491c <plug_holes+0x140>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d102      	bne.n	80048cc <plug_holes+0xf0>
      lfree = pmem;
 80048c6:	4a15      	ldr	r2, [pc, #84]	@ (800491c <plug_holes+0x140>)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	881a      	ldrh	r2, [r3, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80048dc:	d00a      	beq.n	80048f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff ff56 	bl	8004794 <ptr_to_mem>
 80048e8:	4604      	mov	r4, r0
 80048ea:	68b8      	ldr	r0, [r7, #8]
 80048ec:	f7ff ff64 	bl	80047b8 <mem_to_ptr>
 80048f0:	4603      	mov	r3, r0
 80048f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd90      	pop	{r4, r7, pc}
 80048fc:	2000537c 	.word	0x2000537c
 8004900:	08011478 	.word	0x08011478
 8004904:	080114a8 	.word	0x080114a8
 8004908:	080114c0 	.word	0x080114c0
 800490c:	20005380 	.word	0x20005380
 8004910:	080114e8 	.word	0x080114e8
 8004914:	08011504 	.word	0x08011504
 8004918:	08011520 	.word	0x08011520
 800491c:	20005384 	.word	0x20005384

08004920 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004926:	4b18      	ldr	r3, [pc, #96]	@ (8004988 <mem_init+0x68>)
 8004928:	3303      	adds	r3, #3
 800492a:	f023 0303 	bic.w	r3, r3, #3
 800492e:	461a      	mov	r2, r3
 8004930:	4b16      	ldr	r3, [pc, #88]	@ (800498c <mem_init+0x6c>)
 8004932:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004934:	4b15      	ldr	r3, [pc, #84]	@ (800498c <mem_init+0x6c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004940:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800494e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8004952:	f7ff ff1f 	bl	8004794 <ptr_to_mem>
 8004956:	4603      	mov	r3, r0
 8004958:	4a0d      	ldr	r2, [pc, #52]	@ (8004990 <mem_init+0x70>)
 800495a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800495c:	4b0c      	ldr	r3, [pc, #48]	@ (8004990 <mem_init+0x70>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2201      	movs	r2, #1
 8004962:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004964:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <mem_init+0x70>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800496c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800496e:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <mem_init+0x70>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004976:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004978:	4b04      	ldr	r3, [pc, #16]	@ (800498c <mem_init+0x6c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a05      	ldr	r2, [pc, #20]	@ (8004994 <mem_init+0x74>)
 800497e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20004d28 	.word	0x20004d28
 800498c:	2000537c 	.word	0x2000537c
 8004990:	20005380 	.word	0x20005380
 8004994:	20005384 	.word	0x20005384

08004998 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff09 	bl	80047b8 <mem_to_ptr>
 80049a6:	4603      	mov	r3, r0
 80049a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fef0 	bl	8004794 <ptr_to_mem>
 80049b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	885b      	ldrh	r3, [r3, #2]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff feea 	bl	8004794 <ptr_to_mem>
 80049c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80049ca:	d818      	bhi.n	80049fe <mem_link_valid+0x66>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	885b      	ldrh	r3, [r3, #2]
 80049d0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80049d4:	d813      	bhi.n	80049fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80049da:	8afa      	ldrh	r2, [r7, #22]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d004      	beq.n	80049ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	8afa      	ldrh	r2, [r7, #22]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d109      	bne.n	80049fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80049ea:	4b08      	ldr	r3, [pc, #32]	@ (8004a0c <mem_link_valid+0x74>)
 80049ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d006      	beq.n	8004a02 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	885b      	ldrh	r3, [r3, #2]
 80049f8:	8afa      	ldrh	r2, [r7, #22]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d001      	beq.n	8004a02 <mem_link_valid+0x6a>
    return 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <mem_link_valid+0x6c>
  }
  return 1;
 8004a02:	2301      	movs	r3, #1
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20005380 	.word	0x20005380

08004a10 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d04c      	beq.n	8004ab8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004a28:	4b25      	ldr	r3, [pc, #148]	@ (8004ac0 <mem_free+0xb0>)
 8004a2a:	f240 2273 	movw	r2, #627	@ 0x273
 8004a2e:	4925      	ldr	r1, [pc, #148]	@ (8004ac4 <mem_free+0xb4>)
 8004a30:	4825      	ldr	r0, [pc, #148]	@ (8004ac8 <mem_free+0xb8>)
 8004a32:	f00b fde3 	bl	80105fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a36:	e040      	b.n	8004aba <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3b08      	subs	r3, #8
 8004a3c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004a3e:	4b23      	ldr	r3, [pc, #140]	@ (8004acc <mem_free+0xbc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d306      	bcc.n	8004a56 <mem_free+0x46>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f103 020c 	add.w	r2, r3, #12
 8004a4e:	4b20      	ldr	r3, [pc, #128]	@ (8004ad0 <mem_free+0xc0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d907      	bls.n	8004a66 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004a56:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac0 <mem_free+0xb0>)
 8004a58:	f240 227f 	movw	r2, #639	@ 0x27f
 8004a5c:	491d      	ldr	r1, [pc, #116]	@ (8004ad4 <mem_free+0xc4>)
 8004a5e:	481a      	ldr	r0, [pc, #104]	@ (8004ac8 <mem_free+0xb8>)
 8004a60:	f00b fdcc 	bl	80105fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a64:	e029      	b.n	8004aba <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	791b      	ldrb	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004a6e:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <mem_free+0xb0>)
 8004a70:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8004a74:	4918      	ldr	r1, [pc, #96]	@ (8004ad8 <mem_free+0xc8>)
 8004a76:	4814      	ldr	r0, [pc, #80]	@ (8004ac8 <mem_free+0xb8>)
 8004a78:	f00b fdc0 	bl	80105fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a7c:	e01d      	b.n	8004aba <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f7ff ff8a 	bl	8004998 <mem_link_valid>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d107      	bne.n	8004a9a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac0 <mem_free+0xb0>)
 8004a8c:	f240 2295 	movw	r2, #661	@ 0x295
 8004a90:	4912      	ldr	r1, [pc, #72]	@ (8004adc <mem_free+0xcc>)
 8004a92:	480d      	ldr	r0, [pc, #52]	@ (8004ac8 <mem_free+0xb8>)
 8004a94:	f00b fdb2 	bl	80105fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a98:	e00f      	b.n	8004aba <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae0 <mem_free+0xd0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d202      	bcs.n	8004ab0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae0 <mem_free+0xd0>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff fe93 	bl	80047dc <plug_holes>
 8004ab6:	e000      	b.n	8004aba <mem_free+0xaa>
    return;
 8004ab8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	08011478 	.word	0x08011478
 8004ac4:	0801154c 	.word	0x0801154c
 8004ac8:	080114c0 	.word	0x080114c0
 8004acc:	2000537c 	.word	0x2000537c
 8004ad0:	20005380 	.word	0x20005380
 8004ad4:	08011570 	.word	0x08011570
 8004ad8:	0801158c 	.word	0x0801158c
 8004adc:	080115b4 	.word	0x080115b4
 8004ae0:	20005384 	.word	0x20005384

08004ae4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004af0:	887b      	ldrh	r3, [r7, #2]
 8004af2:	3303      	adds	r3, #3
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f023 0303 	bic.w	r3, r3, #3
 8004afa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004afc:	8bfb      	ldrh	r3, [r7, #30]
 8004afe:	2b0b      	cmp	r3, #11
 8004b00:	d801      	bhi.n	8004b06 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004b02:	230c      	movs	r3, #12
 8004b04:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004b06:	8bfb      	ldrh	r3, [r7, #30]
 8004b08:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004b0c:	d803      	bhi.n	8004b16 <mem_trim+0x32>
 8004b0e:	8bfa      	ldrh	r2, [r7, #30]
 8004b10:	887b      	ldrh	r3, [r7, #2]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d201      	bcs.n	8004b1a <mem_trim+0x36>
    return NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e0cc      	b.n	8004cb4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004b1a:	4b68      	ldr	r3, [pc, #416]	@ (8004cbc <mem_trim+0x1d8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d304      	bcc.n	8004b2e <mem_trim+0x4a>
 8004b24:	4b66      	ldr	r3, [pc, #408]	@ (8004cc0 <mem_trim+0x1dc>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d306      	bcc.n	8004b3c <mem_trim+0x58>
 8004b2e:	4b65      	ldr	r3, [pc, #404]	@ (8004cc4 <mem_trim+0x1e0>)
 8004b30:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8004b34:	4964      	ldr	r1, [pc, #400]	@ (8004cc8 <mem_trim+0x1e4>)
 8004b36:	4865      	ldr	r0, [pc, #404]	@ (8004ccc <mem_trim+0x1e8>)
 8004b38:	f00b fd60 	bl	80105fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004b3c:	4b5f      	ldr	r3, [pc, #380]	@ (8004cbc <mem_trim+0x1d8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d304      	bcc.n	8004b50 <mem_trim+0x6c>
 8004b46:	4b5e      	ldr	r3, [pc, #376]	@ (8004cc0 <mem_trim+0x1dc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d301      	bcc.n	8004b54 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	e0af      	b.n	8004cb4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3b08      	subs	r3, #8
 8004b58:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004b5a:	69b8      	ldr	r0, [r7, #24]
 8004b5c:	f7ff fe2c 	bl	80047b8 <mem_to_ptr>
 8004b60:	4603      	mov	r3, r0
 8004b62:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	881a      	ldrh	r2, [r3, #0]
 8004b68:	8afb      	ldrh	r3, [r7, #22]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b08      	subs	r3, #8
 8004b70:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004b72:	8bfa      	ldrh	r2, [r7, #30]
 8004b74:	8abb      	ldrh	r3, [r7, #20]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d906      	bls.n	8004b88 <mem_trim+0xa4>
 8004b7a:	4b52      	ldr	r3, [pc, #328]	@ (8004cc4 <mem_trim+0x1e0>)
 8004b7c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8004b80:	4953      	ldr	r1, [pc, #332]	@ (8004cd0 <mem_trim+0x1ec>)
 8004b82:	4852      	ldr	r0, [pc, #328]	@ (8004ccc <mem_trim+0x1e8>)
 8004b84:	f00b fd3a 	bl	80105fc <iprintf>
  if (newsize > size) {
 8004b88:	8bfa      	ldrh	r2, [r7, #30]
 8004b8a:	8abb      	ldrh	r3, [r7, #20]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d901      	bls.n	8004b94 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e08f      	b.n	8004cb4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004b94:	8bfa      	ldrh	r2, [r7, #30]
 8004b96:	8abb      	ldrh	r3, [r7, #20]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d101      	bne.n	8004ba0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	e089      	b.n	8004cb4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fdf5 	bl	8004794 <ptr_to_mem>
 8004baa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	791b      	ldrb	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d13f      	bne.n	8004c34 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004bbc:	d106      	bne.n	8004bcc <mem_trim+0xe8>
 8004bbe:	4b41      	ldr	r3, [pc, #260]	@ (8004cc4 <mem_trim+0x1e0>)
 8004bc0:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8004bc4:	4943      	ldr	r1, [pc, #268]	@ (8004cd4 <mem_trim+0x1f0>)
 8004bc6:	4841      	ldr	r0, [pc, #260]	@ (8004ccc <mem_trim+0x1e8>)
 8004bc8:	f00b fd18 	bl	80105fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004bd2:	8afa      	ldrh	r2, [r7, #22]
 8004bd4:	8bfb      	ldrh	r3, [r7, #30]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3308      	adds	r3, #8
 8004bdc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004bde:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd8 <mem_trim+0x1f4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d106      	bne.n	8004bf6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004be8:	89fb      	ldrh	r3, [r7, #14]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fdd2 	bl	8004794 <ptr_to_mem>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4a39      	ldr	r2, [pc, #228]	@ (8004cd8 <mem_trim+0x1f4>)
 8004bf4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004bf6:	89fb      	ldrh	r3, [r7, #14]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fdcb 	bl	8004794 <ptr_to_mem>
 8004bfe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2200      	movs	r2, #0
 8004c04:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	89ba      	ldrh	r2, [r7, #12]
 8004c0a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	8afa      	ldrh	r2, [r7, #22]
 8004c10:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	89fa      	ldrh	r2, [r7, #14]
 8004c16:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004c20:	d047      	beq.n	8004cb2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fdb4 	bl	8004794 <ptr_to_mem>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	89fb      	ldrh	r3, [r7, #14]
 8004c30:	8053      	strh	r3, [r2, #2]
 8004c32:	e03e      	b.n	8004cb2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004c34:	8bfb      	ldrh	r3, [r7, #30]
 8004c36:	f103 0214 	add.w	r2, r3, #20
 8004c3a:	8abb      	ldrh	r3, [r7, #20]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d838      	bhi.n	8004cb2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004c40:	8afa      	ldrh	r2, [r7, #22]
 8004c42:	8bfb      	ldrh	r3, [r7, #30]
 8004c44:	4413      	add	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3308      	adds	r3, #8
 8004c4a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004c54:	d106      	bne.n	8004c64 <mem_trim+0x180>
 8004c56:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc4 <mem_trim+0x1e0>)
 8004c58:	f240 3216 	movw	r2, #790	@ 0x316
 8004c5c:	491d      	ldr	r1, [pc, #116]	@ (8004cd4 <mem_trim+0x1f0>)
 8004c5e:	481b      	ldr	r0, [pc, #108]	@ (8004ccc <mem_trim+0x1e8>)
 8004c60:	f00b fccc 	bl	80105fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004c64:	89fb      	ldrh	r3, [r7, #14]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fd94 	bl	8004794 <ptr_to_mem>
 8004c6c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd8 <mem_trim+0x1f4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d202      	bcs.n	8004c7e <mem_trim+0x19a>
      lfree = mem2;
 8004c78:	4a17      	ldr	r2, [pc, #92]	@ (8004cd8 <mem_trim+0x1f4>)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2200      	movs	r2, #0
 8004c82:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	8afa      	ldrh	r2, [r7, #22]
 8004c90:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	89fa      	ldrh	r2, [r7, #14]
 8004c96:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004ca0:	d007      	beq.n	8004cb2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff fd74 	bl	8004794 <ptr_to_mem>
 8004cac:	4602      	mov	r2, r0
 8004cae:	89fb      	ldrh	r3, [r7, #14]
 8004cb0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004cb2:	687b      	ldr	r3, [r7, #4]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	2000537c 	.word	0x2000537c
 8004cc0:	20005380 	.word	0x20005380
 8004cc4:	08011478 	.word	0x08011478
 8004cc8:	080115e8 	.word	0x080115e8
 8004ccc:	080114c0 	.word	0x080114c0
 8004cd0:	08011600 	.word	0x08011600
 8004cd4:	08011620 	.word	0x08011620
 8004cd8:	20005384 	.word	0x20005384

08004cdc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <mem_malloc+0x14>
    return NULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e0d9      	b.n	8004ea4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	3303      	adds	r3, #3
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004cfc:	8bbb      	ldrh	r3, [r7, #28]
 8004cfe:	2b0b      	cmp	r3, #11
 8004d00:	d801      	bhi.n	8004d06 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004d02:	230c      	movs	r3, #12
 8004d04:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004d06:	8bbb      	ldrh	r3, [r7, #28]
 8004d08:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004d0c:	d803      	bhi.n	8004d16 <mem_malloc+0x3a>
 8004d0e:	8bba      	ldrh	r2, [r7, #28]
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d201      	bcs.n	8004d1a <mem_malloc+0x3e>
    return NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e0c4      	b.n	8004ea4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004d1a:	4b64      	ldr	r3, [pc, #400]	@ (8004eac <mem_malloc+0x1d0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fd4a 	bl	80047b8 <mem_to_ptr>
 8004d24:	4603      	mov	r3, r0
 8004d26:	83fb      	strh	r3, [r7, #30]
 8004d28:	e0b4      	b.n	8004e94 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004d2a:	8bfb      	ldrh	r3, [r7, #30]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fd31 	bl	8004794 <ptr_to_mem>
 8004d32:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	791b      	ldrb	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f040 80a4 	bne.w	8004e86 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	8bfb      	ldrh	r3, [r7, #30]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f1a3 0208 	sub.w	r2, r3, #8
 8004d4c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	f0c0 8099 	bcc.w	8004e86 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	8bfb      	ldrh	r3, [r7, #30]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f1a3 0208 	sub.w	r2, r3, #8
 8004d62:	8bbb      	ldrh	r3, [r7, #28]
 8004d64:	3314      	adds	r3, #20
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d333      	bcc.n	8004dd2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004d6a:	8bfa      	ldrh	r2, [r7, #30]
 8004d6c:	8bbb      	ldrh	r3, [r7, #28]
 8004d6e:	4413      	add	r3, r2
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3308      	adds	r3, #8
 8004d74:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004d76:	8a7b      	ldrh	r3, [r7, #18]
 8004d78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004d7c:	d106      	bne.n	8004d8c <mem_malloc+0xb0>
 8004d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8004eb0 <mem_malloc+0x1d4>)
 8004d80:	f240 3287 	movw	r2, #903	@ 0x387
 8004d84:	494b      	ldr	r1, [pc, #300]	@ (8004eb4 <mem_malloc+0x1d8>)
 8004d86:	484c      	ldr	r0, [pc, #304]	@ (8004eb8 <mem_malloc+0x1dc>)
 8004d88:	f00b fc38 	bl	80105fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004d8c:	8a7b      	ldrh	r3, [r7, #18]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff fd00 	bl	8004794 <ptr_to_mem>
 8004d94:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	881a      	ldrh	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8bfa      	ldrh	r2, [r7, #30]
 8004da8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	8a7a      	ldrh	r2, [r7, #18]
 8004dae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2201      	movs	r2, #1
 8004db4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004dbe:	d00b      	beq.n	8004dd8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fce5 	bl	8004794 <ptr_to_mem>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	8a7b      	ldrh	r3, [r7, #18]
 8004dce:	8053      	strh	r3, [r2, #2]
 8004dd0:	e002      	b.n	8004dd8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004dd8:	4b34      	ldr	r3, [pc, #208]	@ (8004eac <mem_malloc+0x1d0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d127      	bne.n	8004e32 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004de2:	4b32      	ldr	r3, [pc, #200]	@ (8004eac <mem_malloc+0x1d0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004de8:	e005      	b.n	8004df6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fcd0 	bl	8004794 <ptr_to_mem>
 8004df4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	791b      	ldrb	r3, [r3, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <mem_malloc+0x12c>
 8004dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8004ebc <mem_malloc+0x1e0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d1f0      	bne.n	8004dea <mem_malloc+0x10e>
          }
          lfree = cur;
 8004e08:	4a28      	ldr	r2, [pc, #160]	@ (8004eac <mem_malloc+0x1d0>)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004e0e:	4b27      	ldr	r3, [pc, #156]	@ (8004eac <mem_malloc+0x1d0>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b2a      	ldr	r3, [pc, #168]	@ (8004ebc <mem_malloc+0x1e0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d00b      	beq.n	8004e32 <mem_malloc+0x156>
 8004e1a:	4b24      	ldr	r3, [pc, #144]	@ (8004eac <mem_malloc+0x1d0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	791b      	ldrb	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d006      	beq.n	8004e32 <mem_malloc+0x156>
 8004e24:	4b22      	ldr	r3, [pc, #136]	@ (8004eb0 <mem_malloc+0x1d4>)
 8004e26:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8004e2a:	4925      	ldr	r1, [pc, #148]	@ (8004ec0 <mem_malloc+0x1e4>)
 8004e2c:	4822      	ldr	r0, [pc, #136]	@ (8004eb8 <mem_malloc+0x1dc>)
 8004e2e:	f00b fbe5 	bl	80105fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004e32:	8bba      	ldrh	r2, [r7, #28]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4413      	add	r3, r2
 8004e38:	3308      	adds	r3, #8
 8004e3a:	4a20      	ldr	r2, [pc, #128]	@ (8004ebc <mem_malloc+0x1e0>)
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d906      	bls.n	8004e50 <mem_malloc+0x174>
 8004e42:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb0 <mem_malloc+0x1d4>)
 8004e44:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8004e48:	491e      	ldr	r1, [pc, #120]	@ (8004ec4 <mem_malloc+0x1e8>)
 8004e4a:	481b      	ldr	r0, [pc, #108]	@ (8004eb8 <mem_malloc+0x1dc>)
 8004e4c:	f00b fbd6 	bl	80105fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d006      	beq.n	8004e68 <mem_malloc+0x18c>
 8004e5a:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <mem_malloc+0x1d4>)
 8004e5c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8004e60:	4919      	ldr	r1, [pc, #100]	@ (8004ec8 <mem_malloc+0x1ec>)
 8004e62:	4815      	ldr	r0, [pc, #84]	@ (8004eb8 <mem_malloc+0x1dc>)
 8004e64:	f00b fbca 	bl	80105fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d006      	beq.n	8004e80 <mem_malloc+0x1a4>
 8004e72:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb0 <mem_malloc+0x1d4>)
 8004e74:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8004e78:	4914      	ldr	r1, [pc, #80]	@ (8004ecc <mem_malloc+0x1f0>)
 8004e7a:	480f      	ldr	r0, [pc, #60]	@ (8004eb8 <mem_malloc+0x1dc>)
 8004e7c:	f00b fbbe 	bl	80105fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	3308      	adds	r3, #8
 8004e84:	e00e      	b.n	8004ea4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004e86:	8bfb      	ldrh	r3, [r7, #30]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fc83 	bl	8004794 <ptr_to_mem>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004e94:	8bfa      	ldrh	r2, [r7, #30]
 8004e96:	8bbb      	ldrh	r3, [r7, #28]
 8004e98:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	f4ff af44 	bcc.w	8004d2a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20005384 	.word	0x20005384
 8004eb0:	08011478 	.word	0x08011478
 8004eb4:	08011620 	.word	0x08011620
 8004eb8:	080114c0 	.word	0x080114c0
 8004ebc:	20005380 	.word	0x20005380
 8004ec0:	08011634 	.word	0x08011634
 8004ec4:	08011650 	.word	0x08011650
 8004ec8:	08011680 	.word	0x08011680
 8004ecc:	080116b0 	.word	0x080116b0

08004ed0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	3303      	adds	r3, #3
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e011      	b.n	8004f16 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	885b      	ldrh	r3, [r3, #2]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	dbe7      	blt.n	8004ef2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004f36:	2300      	movs	r3, #0
 8004f38:	80fb      	strh	r3, [r7, #6]
 8004f3a:	e009      	b.n	8004f50 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	4a08      	ldr	r2, [pc, #32]	@ (8004f60 <memp_init+0x30>)
 8004f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff ffc3 	bl	8004ed0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	80fb      	strh	r3, [r7, #6]
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d9f2      	bls.n	8004f3c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	08014234 	.word	0x08014234

08004f64 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d012      	beq.n	8004fa0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d006      	beq.n	8004f9c <do_memp_malloc_pool+0x38>
 8004f8e:	4b07      	ldr	r3, [pc, #28]	@ (8004fac <do_memp_malloc_pool+0x48>)
 8004f90:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8004f94:	4906      	ldr	r1, [pc, #24]	@ (8004fb0 <do_memp_malloc_pool+0x4c>)
 8004f96:	4807      	ldr	r0, [pc, #28]	@ (8004fb4 <do_memp_malloc_pool+0x50>)
 8004f98:	f00b fb30 	bl	80105fc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	e000      	b.n	8004fa2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	080116d4 	.word	0x080116d4
 8004fb0:	08011704 	.word	0x08011704
 8004fb4:	08011728 	.word	0x08011728

08004fb8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <memp_malloc_pool+0x1c>
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff0 <memp_malloc_pool+0x38>)
 8004fc8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8004fcc:	4909      	ldr	r1, [pc, #36]	@ (8004ff4 <memp_malloc_pool+0x3c>)
 8004fce:	480a      	ldr	r0, [pc, #40]	@ (8004ff8 <memp_malloc_pool+0x40>)
 8004fd0:	f00b fb14 	bl	80105fc <iprintf>
  if (desc == NULL) {
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <memp_malloc_pool+0x26>
    return NULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e003      	b.n	8004fe6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff ffc0 	bl	8004f64 <do_memp_malloc_pool>
 8004fe4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	080116d4 	.word	0x080116d4
 8004ff4:	08011750 	.word	0x08011750
 8004ff8:	08011728 	.word	0x08011728

08004ffc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d908      	bls.n	800501e <memp_malloc+0x22>
 800500c:	4b0a      	ldr	r3, [pc, #40]	@ (8005038 <memp_malloc+0x3c>)
 800500e:	f240 1257 	movw	r2, #343	@ 0x157
 8005012:	490a      	ldr	r1, [pc, #40]	@ (800503c <memp_malloc+0x40>)
 8005014:	480a      	ldr	r0, [pc, #40]	@ (8005040 <memp_malloc+0x44>)
 8005016:	f00b faf1 	bl	80105fc <iprintf>
 800501a:	2300      	movs	r3, #0
 800501c:	e008      	b.n	8005030 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	4a08      	ldr	r2, [pc, #32]	@ (8005044 <memp_malloc+0x48>)
 8005022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff ff9c 	bl	8004f64 <do_memp_malloc_pool>
 800502c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800502e:	68fb      	ldr	r3, [r7, #12]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	080116d4 	.word	0x080116d4
 800503c:	08011764 	.word	0x08011764
 8005040:	08011728 	.word	0x08011728
 8005044:	08014234 	.word	0x08014234

08005048 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d006      	beq.n	800506a <do_memp_free_pool+0x22>
 800505c:	4b0a      	ldr	r3, [pc, #40]	@ (8005088 <do_memp_free_pool+0x40>)
 800505e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8005062:	490a      	ldr	r1, [pc, #40]	@ (800508c <do_memp_free_pool+0x44>)
 8005064:	480a      	ldr	r0, [pc, #40]	@ (8005090 <do_memp_free_pool+0x48>)
 8005066:	f00b fac9 	bl	80105fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	080116d4 	.word	0x080116d4
 800508c:	08011784 	.word	0x08011784
 8005090:	08011728 	.word	0x08011728

08005094 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <memp_free_pool+0x1e>
 80050a4:	4b0a      	ldr	r3, [pc, #40]	@ (80050d0 <memp_free_pool+0x3c>)
 80050a6:	f240 1295 	movw	r2, #405	@ 0x195
 80050aa:	490a      	ldr	r1, [pc, #40]	@ (80050d4 <memp_free_pool+0x40>)
 80050ac:	480a      	ldr	r0, [pc, #40]	@ (80050d8 <memp_free_pool+0x44>)
 80050ae:	f00b faa5 	bl	80105fc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d007      	beq.n	80050c8 <memp_free_pool+0x34>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ffc1 	bl	8005048 <do_memp_free_pool>
 80050c6:	e000      	b.n	80050ca <memp_free_pool+0x36>
    return;
 80050c8:	bf00      	nop
}
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	080116d4 	.word	0x080116d4
 80050d4:	08011750 	.word	0x08011750
 80050d8:	08011728 	.word	0x08011728

080050dc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d907      	bls.n	80050fe <memp_free+0x22>
 80050ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005120 <memp_free+0x44>)
 80050f0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80050f4:	490b      	ldr	r1, [pc, #44]	@ (8005124 <memp_free+0x48>)
 80050f6:	480c      	ldr	r0, [pc, #48]	@ (8005128 <memp_free+0x4c>)
 80050f8:	f00b fa80 	bl	80105fc <iprintf>
 80050fc:	e00c      	b.n	8005118 <memp_free+0x3c>

  if (mem == NULL) {
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	4a09      	ldr	r2, [pc, #36]	@ (800512c <memp_free+0x50>)
 8005108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff ff9a 	bl	8005048 <do_memp_free_pool>
 8005114:	e000      	b.n	8005118 <memp_free+0x3c>
    return;
 8005116:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	080116d4 	.word	0x080116d4
 8005124:	080117a4 	.word	0x080117a4
 8005128:	08011728 	.word	0x08011728
 800512c:	08014234 	.word	0x08014234

08005130 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d108      	bne.n	8005166 <netif_add+0x26>
 8005154:	4b5b      	ldr	r3, [pc, #364]	@ (80052c4 <netif_add+0x184>)
 8005156:	f240 1227 	movw	r2, #295	@ 0x127
 800515a:	495b      	ldr	r1, [pc, #364]	@ (80052c8 <netif_add+0x188>)
 800515c:	485b      	ldr	r0, [pc, #364]	@ (80052cc <netif_add+0x18c>)
 800515e:	f00b fa4d 	bl	80105fc <iprintf>
 8005162:	2300      	movs	r3, #0
 8005164:	e0a9      	b.n	80052ba <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	d108      	bne.n	800517e <netif_add+0x3e>
 800516c:	4b55      	ldr	r3, [pc, #340]	@ (80052c4 <netif_add+0x184>)
 800516e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8005172:	4957      	ldr	r1, [pc, #348]	@ (80052d0 <netif_add+0x190>)
 8005174:	4855      	ldr	r0, [pc, #340]	@ (80052cc <netif_add+0x18c>)
 8005176:	f00b fa41 	bl	80105fc <iprintf>
 800517a:	2300      	movs	r3, #0
 800517c:	e09d      	b.n	80052ba <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005184:	4b53      	ldr	r3, [pc, #332]	@ (80052d4 <netif_add+0x194>)
 8005186:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800518e:	4b51      	ldr	r3, [pc, #324]	@ (80052d4 <netif_add+0x194>)
 8005190:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005198:	4b4e      	ldr	r3, [pc, #312]	@ (80052d4 <netif_add+0x194>)
 800519a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a49      	ldr	r2, [pc, #292]	@ (80052d8 <netif_add+0x198>)
 80051b2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3324      	adds	r3, #36	@ 0x24
 80051c6:	2204      	movs	r2, #4
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f00b fa7b 	bl	80106c6 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a3a      	ldr	r2, [r7, #32]
 80051da:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80051dc:	4b3f      	ldr	r3, [pc, #252]	@ (80052dc <netif_add+0x19c>)
 80051de:	781a      	ldrb	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051ea:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 f914 	bl	8005420 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	4798      	blx	r3
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <netif_add+0xc8>
    return NULL;
 8005204:	2300      	movs	r3, #0
 8005206:	e058      	b.n	80052ba <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800520e:	2bff      	cmp	r3, #255	@ 0xff
 8005210:	d103      	bne.n	800521a <netif_add+0xda>
        netif->num = 0;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800521e:	4b30      	ldr	r3, [pc, #192]	@ (80052e0 <netif_add+0x1a0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e02b      	b.n	800527e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	429a      	cmp	r2, r3
 800522c:	d106      	bne.n	800523c <netif_add+0xfc>
 800522e:	4b25      	ldr	r3, [pc, #148]	@ (80052c4 <netif_add+0x184>)
 8005230:	f240 128b 	movw	r2, #395	@ 0x18b
 8005234:	492b      	ldr	r1, [pc, #172]	@ (80052e4 <netif_add+0x1a4>)
 8005236:	4825      	ldr	r0, [pc, #148]	@ (80052cc <netif_add+0x18c>)
 8005238:	f00b f9e0 	bl	80105fc <iprintf>
        num_netifs++;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	3301      	adds	r3, #1
 8005240:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2bff      	cmp	r3, #255	@ 0xff
 8005246:	dd06      	ble.n	8005256 <netif_add+0x116>
 8005248:	4b1e      	ldr	r3, [pc, #120]	@ (80052c4 <netif_add+0x184>)
 800524a:	f240 128d 	movw	r2, #397	@ 0x18d
 800524e:	4926      	ldr	r1, [pc, #152]	@ (80052e8 <netif_add+0x1a8>)
 8005250:	481e      	ldr	r0, [pc, #120]	@ (80052cc <netif_add+0x18c>)
 8005252:	f00b f9d3 	bl	80105fc <iprintf>
        if (netif2->num == netif->num) {
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005262:	429a      	cmp	r2, r3
 8005264:	d108      	bne.n	8005278 <netif_add+0x138>
          netif->num++;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800526c:	3301      	adds	r3, #1
 800526e:	b2da      	uxtb	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8005276:	e005      	b.n	8005284 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1d0      	bne.n	8005226 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1be      	bne.n	8005208 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005290:	2bfe      	cmp	r3, #254	@ 0xfe
 8005292:	d103      	bne.n	800529c <netif_add+0x15c>
    netif_num = 0;
 8005294:	4b11      	ldr	r3, [pc, #68]	@ (80052dc <netif_add+0x19c>)
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	e006      	b.n	80052aa <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052a2:	3301      	adds	r3, #1
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	4b0d      	ldr	r3, [pc, #52]	@ (80052dc <netif_add+0x19c>)
 80052a8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80052aa:	4b0d      	ldr	r3, [pc, #52]	@ (80052e0 <netif_add+0x1a0>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80052b2:	4a0b      	ldr	r2, [pc, #44]	@ (80052e0 <netif_add+0x1a0>)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	080117c0 	.word	0x080117c0
 80052c8:	08011854 	.word	0x08011854
 80052cc:	08011810 	.word	0x08011810
 80052d0:	08011870 	.word	0x08011870
 80052d4:	080142a8 	.word	0x080142a8
 80052d8:	08005703 	.word	0x08005703
 80052dc:	2000829c 	.word	0x2000829c
 80052e0:	20008294 	.word	0x20008294
 80052e4:	08011894 	.word	0x08011894
 80052e8:	080118a8 	.word	0x080118a8

080052ec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80052f6:	6839      	ldr	r1, [r7, #0]
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f002 fb39 	bl	8007970 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f006 fed7 	bl	800c0b4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <netif_do_set_ipaddr+0x20>
 8005322:	4b1d      	ldr	r3, [pc, #116]	@ (8005398 <netif_do_set_ipaddr+0x88>)
 8005324:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8005328:	491c      	ldr	r1, [pc, #112]	@ (800539c <netif_do_set_ipaddr+0x8c>)
 800532a:	481d      	ldr	r0, [pc, #116]	@ (80053a0 <netif_do_set_ipaddr+0x90>)
 800532c:	f00b f966 	bl	80105fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <netif_do_set_ipaddr+0x34>
 8005336:	4b18      	ldr	r3, [pc, #96]	@ (8005398 <netif_do_set_ipaddr+0x88>)
 8005338:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800533c:	4917      	ldr	r1, [pc, #92]	@ (800539c <netif_do_set_ipaddr+0x8c>)
 800533e:	4818      	ldr	r0, [pc, #96]	@ (80053a0 <netif_do_set_ipaddr+0x90>)
 8005340:	f00b f95c 	bl	80105fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3304      	adds	r3, #4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d01c      	beq.n	800538c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3304      	adds	r3, #4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005362:	f107 0314 	add.w	r3, r7, #20
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff ffbf 	bl	80052ec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <netif_do_set_ipaddr+0x6a>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	e000      	b.n	800537c <netif_do_set_ipaddr+0x6c>
 800537a:	2300      	movs	r3, #0
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005380:	2101      	movs	r1, #1
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f8d2 	bl	800552c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	080117c0 	.word	0x080117c0
 800539c:	080118d8 	.word	0x080118d8
 80053a0:	08011810 	.word	0x08011810

080053a4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3308      	adds	r3, #8
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d00a      	beq.n	80053d4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <netif_do_set_netmask+0x26>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	e000      	b.n	80053cc <netif_do_set_netmask+0x28>
 80053ca:	2300      	movs	r3, #0
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	330c      	adds	r3, #12
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d00a      	beq.n	8005412 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <netif_do_set_gw+0x26>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	e000      	b.n	800540a <netif_do_set_gw+0x28>
 8005408:	2300      	movs	r3, #0
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800543c:	4b1c      	ldr	r3, [pc, #112]	@ (80054b0 <netif_set_addr+0x90>)
 800543e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005446:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <netif_set_addr+0x90>)
 8005448:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005450:	4b17      	ldr	r3, [pc, #92]	@ (80054b0 <netif_set_addr+0x90>)
 8005452:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <netif_set_addr+0x42>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <netif_set_addr+0x46>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <netif_set_addr+0x48>
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
  if (remove) {
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d006      	beq.n	800547e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005470:	f107 0310 	add.w	r3, r7, #16
 8005474:	461a      	mov	r2, r3
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f7ff ff49 	bl	8005310 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff ff8e 	bl	80053a4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f7ff ffa8 	bl	80053e2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005498:	f107 0310 	add.w	r3, r7, #16
 800549c:	461a      	mov	r2, r3
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7ff ff35 	bl	8005310 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80054a6:	bf00      	nop
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	080142a8 	.word	0x080142a8

080054b4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80054bc:	4a04      	ldr	r2, [pc, #16]	@ (80054d0 <netif_set_default+0x1c>)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20008298 	.word	0x20008298

080054d4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d107      	bne.n	80054f2 <netif_set_up+0x1e>
 80054e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005520 <netif_set_up+0x4c>)
 80054e4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80054e8:	490e      	ldr	r1, [pc, #56]	@ (8005524 <netif_set_up+0x50>)
 80054ea:	480f      	ldr	r0, [pc, #60]	@ (8005528 <netif_set_up+0x54>)
 80054ec:	f00b f886 	bl	80105fc <iprintf>
 80054f0:	e013      	b.n	800551a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10c      	bne.n	800551a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005512:	2103      	movs	r1, #3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f809 	bl	800552c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	080117c0 	.word	0x080117c0
 8005524:	08011948 	.word	0x08011948
 8005528:	08011810 	.word	0x08011810

0800552c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <netif_issue_reports+0x20>
 800553e:	4b18      	ldr	r3, [pc, #96]	@ (80055a0 <netif_issue_reports+0x74>)
 8005540:	f240 326d 	movw	r2, #877	@ 0x36d
 8005544:	4917      	ldr	r1, [pc, #92]	@ (80055a4 <netif_issue_reports+0x78>)
 8005546:	4818      	ldr	r0, [pc, #96]	@ (80055a8 <netif_issue_reports+0x7c>)
 8005548:	f00b f858 	bl	80105fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01e      	beq.n	8005598 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005560:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005564:	2b00      	cmp	r3, #0
 8005566:	d017      	beq.n	8005598 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d013      	beq.n	800559a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3304      	adds	r3, #4
 8005576:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00e      	beq.n	800559a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f009 fb89 	bl	800eca8 <etharp_request>
 8005596:	e000      	b.n	800559a <netif_issue_reports+0x6e>
    return;
 8005598:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	080117c0 	.word	0x080117c0
 80055a4:	08011964 	.word	0x08011964
 80055a8:	08011810 	.word	0x08011810

080055ac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d107      	bne.n	80055ca <netif_set_down+0x1e>
 80055ba:	4b12      	ldr	r3, [pc, #72]	@ (8005604 <netif_set_down+0x58>)
 80055bc:	f240 329b 	movw	r2, #923	@ 0x39b
 80055c0:	4911      	ldr	r1, [pc, #68]	@ (8005608 <netif_set_down+0x5c>)
 80055c2:	4812      	ldr	r0, [pc, #72]	@ (800560c <netif_set_down+0x60>)
 80055c4:	f00b f81a 	bl	80105fc <iprintf>
 80055c8:	e019      	b.n	80055fe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d012      	beq.n	80055fe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f008 ff0f 	bl	800e41c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	080117c0 	.word	0x080117c0
 8005608:	08011988 	.word	0x08011988
 800560c:	08011810 	.word	0x08011810

08005610 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <netif_set_link_up+0x1e>
 800561e:	4b15      	ldr	r3, [pc, #84]	@ (8005674 <netif_set_link_up+0x64>)
 8005620:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8005624:	4914      	ldr	r1, [pc, #80]	@ (8005678 <netif_set_link_up+0x68>)
 8005626:	4815      	ldr	r0, [pc, #84]	@ (800567c <netif_set_link_up+0x6c>)
 8005628:	f00a ffe8 	bl	80105fc <iprintf>
 800562c:	e01e      	b.n	800566c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d117      	bne.n	800566c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005642:	f043 0304 	orr.w	r3, r3, #4
 8005646:	b2da      	uxtb	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f007 f95a 	bl	800c908 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005654:	2103      	movs	r1, #3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff ff68 	bl	800552c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <netif_set_link_up+0x5c>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	080117c0 	.word	0x080117c0
 8005678:	080119a8 	.word	0x080119a8
 800567c:	08011810 	.word	0x08011810

08005680 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d107      	bne.n	800569e <netif_set_link_down+0x1e>
 800568e:	4b11      	ldr	r3, [pc, #68]	@ (80056d4 <netif_set_link_down+0x54>)
 8005690:	f240 4206 	movw	r2, #1030	@ 0x406
 8005694:	4910      	ldr	r1, [pc, #64]	@ (80056d8 <netif_set_link_down+0x58>)
 8005696:	4811      	ldr	r0, [pc, #68]	@ (80056dc <netif_set_link_down+0x5c>)
 8005698:	f00a ffb0 	bl	80105fc <iprintf>
 800569c:	e017      	b.n	80056ce <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056b2:	f023 0304 	bic.w	r3, r3, #4
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <netif_set_link_down+0x4e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	080117c0 	.word	0x080117c0
 80056d8:	080119cc 	.word	0x080119cc
 80056dc:	08011810 	.word	0x08011810

080056e0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	61da      	str	r2, [r3, #28]
  }
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800570e:	f06f 030b 	mvn.w	r3, #11
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d013      	beq.n	8005758 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005730:	4b0d      	ldr	r3, [pc, #52]	@ (8005768 <netif_get_by_index+0x48>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	e00c      	b.n	8005752 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800573e:	3301      	adds	r3, #1
 8005740:	b2db      	uxtb	r3, r3
 8005742:	79fa      	ldrb	r2, [r7, #7]
 8005744:	429a      	cmp	r2, r3
 8005746:	d101      	bne.n	800574c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	e006      	b.n	800575a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1ef      	bne.n	8005738 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	20008294 	.word	0x20008294

0800576c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005770:	4b03      	ldr	r3, [pc, #12]	@ (8005780 <pbuf_pool_is_empty+0x14>)
 8005772:	2201      	movs	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005776:	bf00      	nop
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	2000829d 	.word	0x2000829d

08005784 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4611      	mov	r1, r2
 8005790:	461a      	mov	r2, r3
 8005792:	460b      	mov	r3, r1
 8005794:	80fb      	strh	r3, [r7, #6]
 8005796:	4613      	mov	r3, r2
 8005798:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	88ba      	ldrh	r2, [r7, #4]
 80057b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80057b2:	8b3b      	ldrh	r3, [r7, #24]
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	7f3a      	ldrb	r2, [r7, #28]
 80057be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	73da      	strb	r2, [r3, #15]
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08c      	sub	sp, #48	@ 0x30
 80057dc:	af02      	add	r7, sp, #8
 80057de:	4603      	mov	r3, r0
 80057e0:	71fb      	strb	r3, [r7, #7]
 80057e2:	460b      	mov	r3, r1
 80057e4:	80bb      	strh	r3, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80057ee:	887b      	ldrh	r3, [r7, #2]
 80057f0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80057f4:	d07f      	beq.n	80058f6 <pbuf_alloc+0x11e>
 80057f6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80057fa:	f300 80c8 	bgt.w	800598e <pbuf_alloc+0x1b6>
 80057fe:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005802:	d010      	beq.n	8005826 <pbuf_alloc+0x4e>
 8005804:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005808:	f300 80c1 	bgt.w	800598e <pbuf_alloc+0x1b6>
 800580c:	2b01      	cmp	r3, #1
 800580e:	d002      	beq.n	8005816 <pbuf_alloc+0x3e>
 8005810:	2b41      	cmp	r3, #65	@ 0x41
 8005812:	f040 80bc 	bne.w	800598e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005816:	887a      	ldrh	r2, [r7, #2]
 8005818:	88bb      	ldrh	r3, [r7, #4]
 800581a:	4619      	mov	r1, r3
 800581c:	2000      	movs	r0, #0
 800581e:	f000 f8d1 	bl	80059c4 <pbuf_alloc_reference>
 8005822:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005824:	e0bd      	b.n	80059a2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800582e:	88bb      	ldrh	r3, [r7, #4]
 8005830:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005832:	2008      	movs	r0, #8
 8005834:	f7ff fbe2 	bl	8004ffc <memp_malloc>
 8005838:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d109      	bne.n	8005854 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005840:	f7ff ff94 	bl	800576c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <pbuf_alloc+0x78>
            pbuf_free(p);
 800584a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800584c:	f000 faa8 	bl	8005da0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	e0a7      	b.n	80059a4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005854:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005856:	3303      	adds	r3, #3
 8005858:	b29b      	uxth	r3, r3
 800585a:	f023 0303 	bic.w	r3, r3, #3
 800585e:	b29b      	uxth	r3, r3
 8005860:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8005864:	b29b      	uxth	r3, r3
 8005866:	8b7a      	ldrh	r2, [r7, #26]
 8005868:	4293      	cmp	r3, r2
 800586a:	bf28      	it	cs
 800586c:	4613      	movcs	r3, r2
 800586e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005870:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005872:	3310      	adds	r3, #16
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	3303      	adds	r3, #3
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	4618      	mov	r0, r3
 8005880:	89f9      	ldrh	r1, [r7, #14]
 8005882:	8b7a      	ldrh	r2, [r7, #26]
 8005884:	2300      	movs	r3, #0
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	887b      	ldrh	r3, [r7, #2]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	460b      	mov	r3, r1
 800588e:	4601      	mov	r1, r0
 8005890:	6938      	ldr	r0, [r7, #16]
 8005892:	f7ff ff77 	bl	8005784 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d006      	beq.n	80058b0 <pbuf_alloc+0xd8>
 80058a2:	4b42      	ldr	r3, [pc, #264]	@ (80059ac <pbuf_alloc+0x1d4>)
 80058a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058a8:	4941      	ldr	r1, [pc, #260]	@ (80059b0 <pbuf_alloc+0x1d8>)
 80058aa:	4842      	ldr	r0, [pc, #264]	@ (80059b4 <pbuf_alloc+0x1dc>)
 80058ac:	f00a fea6 	bl	80105fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80058b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058b2:	3303      	adds	r3, #3
 80058b4:	f023 0303 	bic.w	r3, r3, #3
 80058b8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80058bc:	d106      	bne.n	80058cc <pbuf_alloc+0xf4>
 80058be:	4b3b      	ldr	r3, [pc, #236]	@ (80059ac <pbuf_alloc+0x1d4>)
 80058c0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80058c4:	493c      	ldr	r1, [pc, #240]	@ (80059b8 <pbuf_alloc+0x1e0>)
 80058c6:	483b      	ldr	r0, [pc, #236]	@ (80059b4 <pbuf_alloc+0x1dc>)
 80058c8:	f00a fe98 	bl	80105fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d102      	bne.n	80058d8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d6:	e002      	b.n	80058de <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80058e2:	8b7a      	ldrh	r2, [r7, #26]
 80058e4:	89fb      	ldrh	r3, [r7, #14]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80058ee:	8b7b      	ldrh	r3, [r7, #26]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d19e      	bne.n	8005832 <pbuf_alloc+0x5a>
      break;
 80058f4:	e055      	b.n	80059a2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80058f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058f8:	3303      	adds	r3, #3
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f023 0303 	bic.w	r3, r3, #3
 8005900:	b29a      	uxth	r2, r3
 8005902:	88bb      	ldrh	r3, [r7, #4]
 8005904:	3303      	adds	r3, #3
 8005906:	b29b      	uxth	r3, r3
 8005908:	f023 0303 	bic.w	r3, r3, #3
 800590c:	b29b      	uxth	r3, r3
 800590e:	4413      	add	r3, r2
 8005910:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005912:	8b3b      	ldrh	r3, [r7, #24]
 8005914:	3310      	adds	r3, #16
 8005916:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005918:	8b3a      	ldrh	r2, [r7, #24]
 800591a:	88bb      	ldrh	r3, [r7, #4]
 800591c:	3303      	adds	r3, #3
 800591e:	f023 0303 	bic.w	r3, r3, #3
 8005922:	429a      	cmp	r2, r3
 8005924:	d306      	bcc.n	8005934 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005926:	8afa      	ldrh	r2, [r7, #22]
 8005928:	88bb      	ldrh	r3, [r7, #4]
 800592a:	3303      	adds	r3, #3
 800592c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d201      	bcs.n	8005938 <pbuf_alloc+0x160>
        return NULL;
 8005934:	2300      	movs	r3, #0
 8005936:	e035      	b.n	80059a4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005938:	8afb      	ldrh	r3, [r7, #22]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff f9ce 	bl	8004cdc <mem_malloc>
 8005940:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8005942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <pbuf_alloc+0x174>
        return NULL;
 8005948:	2300      	movs	r3, #0
 800594a:	e02b      	b.n	80059a4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800594c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800594e:	3310      	adds	r3, #16
 8005950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005952:	4413      	add	r3, r2
 8005954:	3303      	adds	r3, #3
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	4618      	mov	r0, r3
 800595c:	88b9      	ldrh	r1, [r7, #4]
 800595e:	88ba      	ldrh	r2, [r7, #4]
 8005960:	2300      	movs	r3, #0
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	887b      	ldrh	r3, [r7, #2]
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	460b      	mov	r3, r1
 800596a:	4601      	mov	r1, r0
 800596c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800596e:	f7ff ff09 	bl	8005784 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d010      	beq.n	80059a0 <pbuf_alloc+0x1c8>
 800597e:	4b0b      	ldr	r3, [pc, #44]	@ (80059ac <pbuf_alloc+0x1d4>)
 8005980:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8005984:	490d      	ldr	r1, [pc, #52]	@ (80059bc <pbuf_alloc+0x1e4>)
 8005986:	480b      	ldr	r0, [pc, #44]	@ (80059b4 <pbuf_alloc+0x1dc>)
 8005988:	f00a fe38 	bl	80105fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800598c:	e008      	b.n	80059a0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800598e:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <pbuf_alloc+0x1d4>)
 8005990:	f240 1227 	movw	r2, #295	@ 0x127
 8005994:	490a      	ldr	r1, [pc, #40]	@ (80059c0 <pbuf_alloc+0x1e8>)
 8005996:	4807      	ldr	r0, [pc, #28]	@ (80059b4 <pbuf_alloc+0x1dc>)
 8005998:	f00a fe30 	bl	80105fc <iprintf>
      return NULL;
 800599c:	2300      	movs	r3, #0
 800599e:	e001      	b.n	80059a4 <pbuf_alloc+0x1cc>
      break;
 80059a0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3728      	adds	r7, #40	@ 0x28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	080119f0 	.word	0x080119f0
 80059b0:	08011a20 	.word	0x08011a20
 80059b4:	08011a50 	.word	0x08011a50
 80059b8:	08011a78 	.word	0x08011a78
 80059bc:	08011aac 	.word	0x08011aac
 80059c0:	08011ad8 	.word	0x08011ad8

080059c4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
 80059d0:	4613      	mov	r3, r2
 80059d2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80059d4:	883b      	ldrh	r3, [r7, #0]
 80059d6:	2b41      	cmp	r3, #65	@ 0x41
 80059d8:	d009      	beq.n	80059ee <pbuf_alloc_reference+0x2a>
 80059da:	883b      	ldrh	r3, [r7, #0]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d006      	beq.n	80059ee <pbuf_alloc_reference+0x2a>
 80059e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a20 <pbuf_alloc_reference+0x5c>)
 80059e2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80059e6:	490f      	ldr	r1, [pc, #60]	@ (8005a24 <pbuf_alloc_reference+0x60>)
 80059e8:	480f      	ldr	r0, [pc, #60]	@ (8005a28 <pbuf_alloc_reference+0x64>)
 80059ea:	f00a fe07 	bl	80105fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80059ee:	2007      	movs	r0, #7
 80059f0:	f7ff fb04 	bl	8004ffc <memp_malloc>
 80059f4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	e00b      	b.n	8005a18 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005a00:	8879      	ldrh	r1, [r7, #2]
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	2300      	movs	r3, #0
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	883b      	ldrh	r3, [r7, #0]
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff feb7 	bl	8005784 <pbuf_init_alloced_pbuf>
  return p;
 8005a16:	68fb      	ldr	r3, [r7, #12]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	080119f0 	.word	0x080119f0
 8005a24:	08011af4 	.word	0x08011af4
 8005a28:	08011a50 	.word	0x08011a50

08005a2c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	607b      	str	r3, [r7, #4]
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	81bb      	strh	r3, [r7, #12]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005a44:	8a7b      	ldrh	r3, [r7, #18]
 8005a46:	3303      	adds	r3, #3
 8005a48:	f023 0203 	bic.w	r2, r3, #3
 8005a4c:	89bb      	ldrh	r3, [r7, #12]
 8005a4e:	441a      	add	r2, r3
 8005a50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d901      	bls.n	8005a5a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e018      	b.n	8005a8c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005a60:	8a7b      	ldrh	r3, [r7, #18]
 8005a62:	3303      	adds	r3, #3
 8005a64:	f023 0303 	bic.w	r3, r3, #3
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	e001      	b.n	8005a74 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	89b9      	ldrh	r1, [r7, #12]
 8005a78:	89ba      	ldrh	r2, [r7, #12]
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	897b      	ldrh	r3, [r7, #10]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	460b      	mov	r3, r1
 8005a84:	6979      	ldr	r1, [r7, #20]
 8005a86:	f7ff fe7d 	bl	8005784 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005a8a:	687b      	ldr	r3, [r7, #4]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <pbuf_realloc+0x20>
 8005aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8005b90 <pbuf_realloc+0xfc>)
 8005aa8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8005aac:	4939      	ldr	r1, [pc, #228]	@ (8005b94 <pbuf_realloc+0x100>)
 8005aae:	483a      	ldr	r0, [pc, #232]	@ (8005b98 <pbuf_realloc+0x104>)
 8005ab0:	f00a fda4 	bl	80105fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	891b      	ldrh	r3, [r3, #8]
 8005ab8:	887a      	ldrh	r2, [r7, #2]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d263      	bcs.n	8005b86 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	891a      	ldrh	r2, [r3, #8]
 8005ac2:	887b      	ldrh	r3, [r7, #2]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005ac8:	887b      	ldrh	r3, [r7, #2]
 8005aca:	817b      	strh	r3, [r7, #10]
  q = p;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005ad0:	e018      	b.n	8005b04 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	895b      	ldrh	r3, [r3, #10]
 8005ad6:	897a      	ldrh	r2, [r7, #10]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	891a      	ldrh	r2, [r3, #8]
 8005ae0:	893b      	ldrh	r3, [r7, #8]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <pbuf_realloc+0x70>
 8005af6:	4b26      	ldr	r3, [pc, #152]	@ (8005b90 <pbuf_realloc+0xfc>)
 8005af8:	f240 12af 	movw	r2, #431	@ 0x1af
 8005afc:	4927      	ldr	r1, [pc, #156]	@ (8005b9c <pbuf_realloc+0x108>)
 8005afe:	4826      	ldr	r0, [pc, #152]	@ (8005b98 <pbuf_realloc+0x104>)
 8005b00:	f00a fd7c 	bl	80105fc <iprintf>
  while (rem_len > q->len) {
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	895b      	ldrh	r3, [r3, #10]
 8005b08:	897a      	ldrh	r2, [r7, #10]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d8e1      	bhi.n	8005ad2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	7b1b      	ldrb	r3, [r3, #12]
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d121      	bne.n	8005b5e <pbuf_realloc+0xca>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	895b      	ldrh	r3, [r3, #10]
 8005b1e:	897a      	ldrh	r2, [r7, #10]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d01c      	beq.n	8005b5e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	7b5b      	ldrb	r3, [r3, #13]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d116      	bne.n	8005b5e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	897b      	ldrh	r3, [r7, #10]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4619      	mov	r1, r3
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7fe ffce 	bl	8004ae4 <mem_trim>
 8005b48:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <pbuf_realloc+0xca>
 8005b50:	4b0f      	ldr	r3, [pc, #60]	@ (8005b90 <pbuf_realloc+0xfc>)
 8005b52:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8005b56:	4912      	ldr	r1, [pc, #72]	@ (8005ba0 <pbuf_realloc+0x10c>)
 8005b58:	480f      	ldr	r0, [pc, #60]	@ (8005b98 <pbuf_realloc+0x104>)
 8005b5a:	f00a fd4f 	bl	80105fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	897a      	ldrh	r2, [r7, #10]
 8005b62:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	895a      	ldrh	r2, [r3, #10]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f911 	bl	8005da0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e000      	b.n	8005b88 <pbuf_realloc+0xf4>
    return;
 8005b86:	bf00      	nop

}
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	080119f0 	.word	0x080119f0
 8005b94:	08011b08 	.word	0x08011b08
 8005b98:	08011a50 	.word	0x08011a50
 8005b9c:	08011b20 	.word	0x08011b20
 8005ba0:	08011b38 	.word	0x08011b38

08005ba4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <pbuf_add_header_impl+0x22>
 8005bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8005c68 <pbuf_add_header_impl+0xc4>)
 8005bba:	f240 12df 	movw	r2, #479	@ 0x1df
 8005bbe:	492b      	ldr	r1, [pc, #172]	@ (8005c6c <pbuf_add_header_impl+0xc8>)
 8005bc0:	482b      	ldr	r0, [pc, #172]	@ (8005c70 <pbuf_add_header_impl+0xcc>)
 8005bc2:	f00a fd1b 	bl	80105fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <pbuf_add_header_impl+0x30>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd2:	d301      	bcc.n	8005bd8 <pbuf_add_header_impl+0x34>
    return 1;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e043      	b.n	8005c60 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <pbuf_add_header_impl+0x3e>
    return 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e03e      	b.n	8005c60 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	891a      	ldrh	r2, [r3, #8]
 8005bea:	8a7b      	ldrh	r3, [r7, #18]
 8005bec:	4413      	add	r3, r2
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	8a7a      	ldrh	r2, [r7, #18]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d901      	bls.n	8005bfa <pbuf_add_header_impl+0x56>
    return 1;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e032      	b.n	8005c60 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	7b1b      	ldrb	r3, [r3, #12]
 8005bfe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005c00:	8a3b      	ldrh	r3, [r7, #16]
 8005c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00c      	beq.n	8005c24 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	425b      	negs	r3, r3
 8005c12:	4413      	add	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3310      	adds	r3, #16
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d20d      	bcs.n	8005c3c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e01d      	b.n	8005c60 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d006      	beq.n	8005c38 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	425b      	negs	r3, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e001      	b.n	8005c3c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e011      	b.n	8005c60 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	895a      	ldrh	r2, [r3, #10]
 8005c46:	8a7b      	ldrh	r3, [r7, #18]
 8005c48:	4413      	add	r3, r2
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	891a      	ldrh	r2, [r3, #8]
 8005c54:	8a7b      	ldrh	r3, [r7, #18]
 8005c56:	4413      	add	r3, r2
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	811a      	strh	r2, [r3, #8]


  return 0;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	080119f0 	.word	0x080119f0
 8005c6c:	08011b54 	.word	0x08011b54
 8005c70:	08011a50 	.word	0x08011a50

08005c74 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005c7e:	2200      	movs	r2, #0
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff ff8e 	bl	8005ba4 <pbuf_add_header_impl>
 8005c88:	4603      	mov	r3, r0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <pbuf_remove_header+0x1e>
 8005ca4:	4b20      	ldr	r3, [pc, #128]	@ (8005d28 <pbuf_remove_header+0x94>)
 8005ca6:	f240 224b 	movw	r2, #587	@ 0x24b
 8005caa:	4920      	ldr	r1, [pc, #128]	@ (8005d2c <pbuf_remove_header+0x98>)
 8005cac:	4820      	ldr	r0, [pc, #128]	@ (8005d30 <pbuf_remove_header+0x9c>)
 8005cae:	f00a fca5 	bl	80105fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <pbuf_remove_header+0x2c>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cbe:	d301      	bcc.n	8005cc4 <pbuf_remove_header+0x30>
    return 1;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e02c      	b.n	8005d1e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <pbuf_remove_header+0x3a>
    return 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e027      	b.n	8005d1e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	895b      	ldrh	r3, [r3, #10]
 8005cd6:	89fa      	ldrh	r2, [r7, #14]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d908      	bls.n	8005cee <pbuf_remove_header+0x5a>
 8005cdc:	4b12      	ldr	r3, [pc, #72]	@ (8005d28 <pbuf_remove_header+0x94>)
 8005cde:	f240 2255 	movw	r2, #597	@ 0x255
 8005ce2:	4914      	ldr	r1, [pc, #80]	@ (8005d34 <pbuf_remove_header+0xa0>)
 8005ce4:	4812      	ldr	r0, [pc, #72]	@ (8005d30 <pbuf_remove_header+0x9c>)
 8005ce6:	f00a fc89 	bl	80105fc <iprintf>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e017      	b.n	8005d1e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	441a      	add	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	895a      	ldrh	r2, [r3, #10]
 8005d04:	89fb      	ldrh	r3, [r7, #14]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	891a      	ldrh	r2, [r3, #8]
 8005d12:	89fb      	ldrh	r3, [r7, #14]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	080119f0 	.word	0x080119f0
 8005d2c:	08011b54 	.word	0x08011b54
 8005d30:	08011a50 	.word	0x08011a50
 8005d34:	08011b60 	.word	0x08011b60

08005d38 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	807b      	strh	r3, [r7, #2]
 8005d44:	4613      	mov	r3, r2
 8005d46:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005d48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da08      	bge.n	8005d62 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005d50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d54:	425b      	negs	r3, r3
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff ff9b 	bl	8005c94 <pbuf_remove_header>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	e007      	b.n	8005d72 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005d62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d66:	787a      	ldrb	r2, [r7, #1]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff ff1a 	bl	8005ba4 <pbuf_add_header_impl>
 8005d70:	4603      	mov	r3, r0
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005d86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ffd2 	bl	8005d38 <pbuf_header_impl>
 8005d94:	4603      	mov	r3, r0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10b      	bne.n	8005dc6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <pbuf_free+0x22>
 8005db4:	4b38      	ldr	r3, [pc, #224]	@ (8005e98 <pbuf_free+0xf8>)
 8005db6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8005dba:	4938      	ldr	r1, [pc, #224]	@ (8005e9c <pbuf_free+0xfc>)
 8005dbc:	4838      	ldr	r0, [pc, #224]	@ (8005ea0 <pbuf_free+0x100>)
 8005dbe:	f00a fc1d 	bl	80105fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e063      	b.n	8005e8e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005dca:	e05c      	b.n	8005e86 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	7b9b      	ldrb	r3, [r3, #14]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d106      	bne.n	8005de2 <pbuf_free+0x42>
 8005dd4:	4b30      	ldr	r3, [pc, #192]	@ (8005e98 <pbuf_free+0xf8>)
 8005dd6:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8005dda:	4932      	ldr	r1, [pc, #200]	@ (8005ea4 <pbuf_free+0x104>)
 8005ddc:	4830      	ldr	r0, [pc, #192]	@ (8005ea0 <pbuf_free+0x100>)
 8005dde:	f00a fc0d 	bl	80105fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7b9b      	ldrb	r3, [r3, #14]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	739a      	strb	r2, [r3, #14]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	7b9b      	ldrb	r3, [r3, #14]
 8005df2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005df4:	7dbb      	ldrb	r3, [r7, #22]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d143      	bne.n	8005e82 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	7b1b      	ldrb	r3, [r3, #12]
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	7b5b      	ldrb	r3, [r3, #13]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d011      	beq.n	8005e3a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <pbuf_free+0x90>
 8005e22:	4b1d      	ldr	r3, [pc, #116]	@ (8005e98 <pbuf_free+0xf8>)
 8005e24:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8005e28:	491f      	ldr	r1, [pc, #124]	@ (8005ea8 <pbuf_free+0x108>)
 8005e2a:	481d      	ldr	r0, [pc, #116]	@ (8005ea0 <pbuf_free+0x100>)
 8005e2c:	f00a fbe6 	bl	80105fc <iprintf>
        pc->custom_free_function(p);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4798      	blx	r3
 8005e38:	e01d      	b.n	8005e76 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d104      	bne.n	8005e4a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	2008      	movs	r0, #8
 8005e44:	f7ff f94a 	bl	80050dc <memp_free>
 8005e48:	e015      	b.n	8005e76 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d104      	bne.n	8005e5a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	2007      	movs	r0, #7
 8005e54:	f7ff f942 	bl	80050dc <memp_free>
 8005e58:	e00d      	b.n	8005e76 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d103      	bne.n	8005e68 <pbuf_free+0xc8>
          mem_free(p);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fe fdd5 	bl	8004a10 <mem_free>
 8005e66:	e006      	b.n	8005e76 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005e68:	4b0b      	ldr	r3, [pc, #44]	@ (8005e98 <pbuf_free+0xf8>)
 8005e6a:	f240 320f 	movw	r2, #783	@ 0x30f
 8005e6e:	490f      	ldr	r1, [pc, #60]	@ (8005eac <pbuf_free+0x10c>)
 8005e70:	480b      	ldr	r0, [pc, #44]	@ (8005ea0 <pbuf_free+0x100>)
 8005e72:	f00a fbc3 	bl	80105fc <iprintf>
        }
      }
      count++;
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	607b      	str	r3, [r7, #4]
 8005e80:	e001      	b.n	8005e86 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d19f      	bne.n	8005dcc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	080119f0 	.word	0x080119f0
 8005e9c:	08011b54 	.word	0x08011b54
 8005ea0:	08011a50 	.word	0x08011a50
 8005ea4:	08011b80 	.word	0x08011b80
 8005ea8:	08011b98 	.word	0x08011b98
 8005eac:	08011bbc 	.word	0x08011bbc

08005eb0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005ebc:	e005      	b.n	8005eca <pbuf_clen+0x1a>
    ++len;
 8005ebe:	89fb      	ldrh	r3, [r7, #14]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f6      	bne.n	8005ebe <pbuf_clen+0xe>
  }
  return len;
 8005ed0:	89fb      	ldrh	r3, [r7, #14]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
	...

08005ee0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d010      	beq.n	8005f10 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	7b9b      	ldrb	r3, [r3, #14]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	7b9b      	ldrb	r3, [r3, #14]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <pbuf_ref+0x30>
 8005f02:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <pbuf_ref+0x38>)
 8005f04:	f240 3242 	movw	r2, #834	@ 0x342
 8005f08:	4904      	ldr	r1, [pc, #16]	@ (8005f1c <pbuf_ref+0x3c>)
 8005f0a:	4805      	ldr	r0, [pc, #20]	@ (8005f20 <pbuf_ref+0x40>)
 8005f0c:	f00a fb76 	bl	80105fc <iprintf>
  }
}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	080119f0 	.word	0x080119f0
 8005f1c:	08011bd0 	.word	0x08011bd0
 8005f20:	08011a50 	.word	0x08011a50

08005f24 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <pbuf_cat+0x16>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d107      	bne.n	8005f4a <pbuf_cat+0x26>
 8005f3a:	4b20      	ldr	r3, [pc, #128]	@ (8005fbc <pbuf_cat+0x98>)
 8005f3c:	f240 3259 	movw	r2, #857	@ 0x359
 8005f40:	491f      	ldr	r1, [pc, #124]	@ (8005fc0 <pbuf_cat+0x9c>)
 8005f42:	4820      	ldr	r0, [pc, #128]	@ (8005fc4 <pbuf_cat+0xa0>)
 8005f44:	f00a fb5a 	bl	80105fc <iprintf>
 8005f48:	e034      	b.n	8005fb4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e00a      	b.n	8005f66 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	891a      	ldrh	r2, [r3, #8]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	891b      	ldrh	r3, [r3, #8]
 8005f58:	4413      	add	r3, r2
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	891a      	ldrh	r2, [r3, #8]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	895b      	ldrh	r3, [r3, #10]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d006      	beq.n	8005f88 <pbuf_cat+0x64>
 8005f7a:	4b10      	ldr	r3, [pc, #64]	@ (8005fbc <pbuf_cat+0x98>)
 8005f7c:	f240 3262 	movw	r2, #866	@ 0x362
 8005f80:	4911      	ldr	r1, [pc, #68]	@ (8005fc8 <pbuf_cat+0xa4>)
 8005f82:	4810      	ldr	r0, [pc, #64]	@ (8005fc4 <pbuf_cat+0xa0>)
 8005f84:	f00a fb3a 	bl	80105fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d006      	beq.n	8005f9e <pbuf_cat+0x7a>
 8005f90:	4b0a      	ldr	r3, [pc, #40]	@ (8005fbc <pbuf_cat+0x98>)
 8005f92:	f240 3263 	movw	r2, #867	@ 0x363
 8005f96:	490d      	ldr	r1, [pc, #52]	@ (8005fcc <pbuf_cat+0xa8>)
 8005f98:	480a      	ldr	r0, [pc, #40]	@ (8005fc4 <pbuf_cat+0xa0>)
 8005f9a:	f00a fb2f 	bl	80105fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	891a      	ldrh	r2, [r3, #8]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	891b      	ldrh	r3, [r3, #8]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	080119f0 	.word	0x080119f0
 8005fc0:	08011be4 	.word	0x08011be4
 8005fc4:	08011a50 	.word	0x08011a50
 8005fc8:	08011c1c 	.word	0x08011c1c
 8005fcc:	08011c4c 	.word	0x08011c4c

08005fd0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff ffa1 	bl	8005f24 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005fe2:	6838      	ldr	r0, [r7, #0]
 8005fe4:	f7ff ff7c 	bl	8005ee0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <pbuf_copy+0x2a>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <pbuf_copy+0x2a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	891a      	ldrh	r2, [r3, #8]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	891b      	ldrh	r3, [r3, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	d209      	bcs.n	800602e <pbuf_copy+0x3e>
 800601a:	4b57      	ldr	r3, [pc, #348]	@ (8006178 <pbuf_copy+0x188>)
 800601c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8006020:	4956      	ldr	r1, [pc, #344]	@ (800617c <pbuf_copy+0x18c>)
 8006022:	4857      	ldr	r0, [pc, #348]	@ (8006180 <pbuf_copy+0x190>)
 8006024:	f00a faea 	bl	80105fc <iprintf>
 8006028:	f06f 030f 	mvn.w	r3, #15
 800602c:	e09f      	b.n	800616e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	895b      	ldrh	r3, [r3, #10]
 8006032:	461a      	mov	r2, r3
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	1ad2      	subs	r2, r2, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	895b      	ldrh	r3, [r3, #10]
 800603c:	4619      	mov	r1, r3
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1acb      	subs	r3, r1, r3
 8006042:	429a      	cmp	r2, r3
 8006044:	d306      	bcc.n	8006054 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	895b      	ldrh	r3, [r3, #10]
 800604a:	461a      	mov	r2, r3
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	e005      	b.n	8006060 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	895b      	ldrh	r3, [r3, #10]
 8006058:	461a      	mov	r2, r3
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	18d0      	adds	r0, r2, r3
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4619      	mov	r1, r3
 8006074:	f00a fb9d 	bl	80107b2 <memcpy>
    offset_to += len;
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	895b      	ldrh	r3, [r3, #10]
 800608c:	461a      	mov	r2, r3
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	4293      	cmp	r3, r2
 8006092:	d906      	bls.n	80060a2 <pbuf_copy+0xb2>
 8006094:	4b38      	ldr	r3, [pc, #224]	@ (8006178 <pbuf_copy+0x188>)
 8006096:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800609a:	493a      	ldr	r1, [pc, #232]	@ (8006184 <pbuf_copy+0x194>)
 800609c:	4838      	ldr	r0, [pc, #224]	@ (8006180 <pbuf_copy+0x190>)
 800609e:	f00a faad 	bl	80105fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	895b      	ldrh	r3, [r3, #10]
 80060a6:	461a      	mov	r2, r3
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d906      	bls.n	80060bc <pbuf_copy+0xcc>
 80060ae:	4b32      	ldr	r3, [pc, #200]	@ (8006178 <pbuf_copy+0x188>)
 80060b0:	f240 32da 	movw	r2, #986	@ 0x3da
 80060b4:	4934      	ldr	r1, [pc, #208]	@ (8006188 <pbuf_copy+0x198>)
 80060b6:	4832      	ldr	r0, [pc, #200]	@ (8006180 <pbuf_copy+0x190>)
 80060b8:	f00a faa0 	bl	80105fc <iprintf>
    if (offset_from >= p_from->len) {
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	895b      	ldrh	r3, [r3, #10]
 80060c0:	461a      	mov	r2, r3
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d304      	bcc.n	80060d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	895b      	ldrh	r3, [r3, #10]
 80060d6:	461a      	mov	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4293      	cmp	r3, r2
 80060dc:	d114      	bne.n	8006108 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10c      	bne.n	8006108 <pbuf_copy+0x118>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <pbuf_copy+0x118>
 80060f4:	4b20      	ldr	r3, [pc, #128]	@ (8006178 <pbuf_copy+0x188>)
 80060f6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80060fa:	4924      	ldr	r1, [pc, #144]	@ (800618c <pbuf_copy+0x19c>)
 80060fc:	4820      	ldr	r0, [pc, #128]	@ (8006180 <pbuf_copy+0x190>)
 80060fe:	f00a fa7d 	bl	80105fc <iprintf>
 8006102:	f06f 030f 	mvn.w	r3, #15
 8006106:	e032      	b.n	800616e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d013      	beq.n	8006136 <pbuf_copy+0x146>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	895a      	ldrh	r2, [r3, #10]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	891b      	ldrh	r3, [r3, #8]
 8006116:	429a      	cmp	r2, r3
 8006118:	d10d      	bne.n	8006136 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <pbuf_copy+0x146>
 8006122:	4b15      	ldr	r3, [pc, #84]	@ (8006178 <pbuf_copy+0x188>)
 8006124:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8006128:	4919      	ldr	r1, [pc, #100]	@ (8006190 <pbuf_copy+0x1a0>)
 800612a:	4815      	ldr	r0, [pc, #84]	@ (8006180 <pbuf_copy+0x190>)
 800612c:	f00a fa66 	bl	80105fc <iprintf>
 8006130:	f06f 0305 	mvn.w	r3, #5
 8006134:	e01b      	b.n	800616e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d013      	beq.n	8006164 <pbuf_copy+0x174>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	895a      	ldrh	r2, [r3, #10]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	891b      	ldrh	r3, [r3, #8]
 8006144:	429a      	cmp	r2, r3
 8006146:	d10d      	bne.n	8006164 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d009      	beq.n	8006164 <pbuf_copy+0x174>
 8006150:	4b09      	ldr	r3, [pc, #36]	@ (8006178 <pbuf_copy+0x188>)
 8006152:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006156:	490e      	ldr	r1, [pc, #56]	@ (8006190 <pbuf_copy+0x1a0>)
 8006158:	4809      	ldr	r0, [pc, #36]	@ (8006180 <pbuf_copy+0x190>)
 800615a:	f00a fa4f 	bl	80105fc <iprintf>
 800615e:	f06f 0305 	mvn.w	r3, #5
 8006162:	e004      	b.n	800616e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f47f af61 	bne.w	800602e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	080119f0 	.word	0x080119f0
 800617c:	08011c98 	.word	0x08011c98
 8006180:	08011a50 	.word	0x08011a50
 8006184:	08011cc8 	.word	0x08011cc8
 8006188:	08011ce0 	.word	0x08011ce0
 800618c:	08011cfc 	.word	0x08011cfc
 8006190:	08011d0c 	.word	0x08011d0c

08006194 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4611      	mov	r1, r2
 80061a0:	461a      	mov	r2, r3
 80061a2:	460b      	mov	r3, r1
 80061a4:	80fb      	strh	r3, [r7, #6]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d108      	bne.n	80061ca <pbuf_copy_partial+0x36>
 80061b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006268 <pbuf_copy_partial+0xd4>)
 80061ba:	f240 420a 	movw	r2, #1034	@ 0x40a
 80061be:	492b      	ldr	r1, [pc, #172]	@ (800626c <pbuf_copy_partial+0xd8>)
 80061c0:	482b      	ldr	r0, [pc, #172]	@ (8006270 <pbuf_copy_partial+0xdc>)
 80061c2:	f00a fa1b 	bl	80105fc <iprintf>
 80061c6:	2300      	movs	r3, #0
 80061c8:	e04a      	b.n	8006260 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d108      	bne.n	80061e2 <pbuf_copy_partial+0x4e>
 80061d0:	4b25      	ldr	r3, [pc, #148]	@ (8006268 <pbuf_copy_partial+0xd4>)
 80061d2:	f240 420b 	movw	r2, #1035	@ 0x40b
 80061d6:	4927      	ldr	r1, [pc, #156]	@ (8006274 <pbuf_copy_partial+0xe0>)
 80061d8:	4825      	ldr	r0, [pc, #148]	@ (8006270 <pbuf_copy_partial+0xdc>)
 80061da:	f00a fa0f 	bl	80105fc <iprintf>
 80061de:	2300      	movs	r3, #0
 80061e0:	e03e      	b.n	8006260 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	61fb      	str	r3, [r7, #28]
 80061e6:	e034      	b.n	8006252 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80061e8:	88bb      	ldrh	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <pbuf_copy_partial+0x70>
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	895b      	ldrh	r3, [r3, #10]
 80061f2:	88ba      	ldrh	r2, [r7, #4]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d305      	bcc.n	8006204 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	895b      	ldrh	r3, [r3, #10]
 80061fc:	88ba      	ldrh	r2, [r7, #4]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	80bb      	strh	r3, [r7, #4]
 8006202:	e023      	b.n	800624c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	895a      	ldrh	r2, [r3, #10]
 8006208:	88bb      	ldrh	r3, [r7, #4]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800620e:	8b3a      	ldrh	r2, [r7, #24]
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	429a      	cmp	r2, r3
 8006214:	d901      	bls.n	800621a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800621a:	8b7b      	ldrh	r3, [r7, #26]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	18d0      	adds	r0, r2, r3
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	88bb      	ldrh	r3, [r7, #4]
 8006226:	4413      	add	r3, r2
 8006228:	8b3a      	ldrh	r2, [r7, #24]
 800622a:	4619      	mov	r1, r3
 800622c:	f00a fac1 	bl	80107b2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006230:	8afa      	ldrh	r2, [r7, #22]
 8006232:	8b3b      	ldrh	r3, [r7, #24]
 8006234:	4413      	add	r3, r2
 8006236:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006238:	8b7a      	ldrh	r2, [r7, #26]
 800623a:	8b3b      	ldrh	r3, [r7, #24]
 800623c:	4413      	add	r3, r2
 800623e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006240:	88fa      	ldrh	r2, [r7, #6]
 8006242:	8b3b      	ldrh	r3, [r7, #24]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	61fb      	str	r3, [r7, #28]
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <pbuf_copy_partial+0xca>
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1c4      	bne.n	80061e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800625e:	8afb      	ldrh	r3, [r7, #22]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3720      	adds	r7, #32
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	080119f0 	.word	0x080119f0
 800626c:	08011d38 	.word	0x08011d38
 8006270:	08011a50 	.word	0x08011a50
 8006274:	08011d58 	.word	0x08011d58

08006278 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	603a      	str	r2, [r7, #0]
 8006282:	71fb      	strb	r3, [r7, #7]
 8006284:	460b      	mov	r3, r1
 8006286:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	8919      	ldrh	r1, [r3, #8]
 800628c:	88ba      	ldrh	r2, [r7, #4]
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff faa1 	bl	80057d8 <pbuf_alloc>
 8006296:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <pbuf_clone+0x2a>
    return NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	e011      	b.n	80062c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f7ff fea3 	bl	8005ff0 <pbuf_copy>
 80062aa:	4603      	mov	r3, r0
 80062ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80062ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d006      	beq.n	80062c4 <pbuf_clone+0x4c>
 80062b6:	4b06      	ldr	r3, [pc, #24]	@ (80062d0 <pbuf_clone+0x58>)
 80062b8:	f240 5224 	movw	r2, #1316	@ 0x524
 80062bc:	4905      	ldr	r1, [pc, #20]	@ (80062d4 <pbuf_clone+0x5c>)
 80062be:	4806      	ldr	r0, [pc, #24]	@ (80062d8 <pbuf_clone+0x60>)
 80062c0:	f00a f99c 	bl	80105fc <iprintf>
  return q;
 80062c4:	68fb      	ldr	r3, [r7, #12]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	080119f0 	.word	0x080119f0
 80062d4:	08011e64 	.word	0x08011e64
 80062d8:	08011a50 	.word	0x08011a50

080062dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80062e0:	f00a f88c 	bl	80103fc <rand>
 80062e4:	4603      	mov	r3, r0
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	4b01      	ldr	r3, [pc, #4]	@ (80062fc <tcp_init+0x20>)
 80062f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80062f8:	bf00      	nop
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20000020 	.word	0x20000020

08006300 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	7d1b      	ldrb	r3, [r3, #20]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d105      	bne.n	800631c <tcp_free+0x1c>
 8006310:	4b06      	ldr	r3, [pc, #24]	@ (800632c <tcp_free+0x2c>)
 8006312:	22d4      	movs	r2, #212	@ 0xd4
 8006314:	4906      	ldr	r1, [pc, #24]	@ (8006330 <tcp_free+0x30>)
 8006316:	4807      	ldr	r0, [pc, #28]	@ (8006334 <tcp_free+0x34>)
 8006318:	f00a f970 	bl	80105fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	2001      	movs	r0, #1
 8006320:	f7fe fedc 	bl	80050dc <memp_free>
}
 8006324:	bf00      	nop
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	08011ef0 	.word	0x08011ef0
 8006330:	08011f20 	.word	0x08011f20
 8006334:	08011f34 	.word	0x08011f34

08006338 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	7d1b      	ldrb	r3, [r3, #20]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d105      	bne.n	8006354 <tcp_free_listen+0x1c>
 8006348:	4b06      	ldr	r3, [pc, #24]	@ (8006364 <tcp_free_listen+0x2c>)
 800634a:	22df      	movs	r2, #223	@ 0xdf
 800634c:	4906      	ldr	r1, [pc, #24]	@ (8006368 <tcp_free_listen+0x30>)
 800634e:	4807      	ldr	r0, [pc, #28]	@ (800636c <tcp_free_listen+0x34>)
 8006350:	f00a f954 	bl	80105fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	2002      	movs	r0, #2
 8006358:	f7fe fec0 	bl	80050dc <memp_free>
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	08011ef0 	.word	0x08011ef0
 8006368:	08011f5c 	.word	0x08011f5c
 800636c:	08011f34 	.word	0x08011f34

08006370 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006374:	f000 fea4 	bl	80070c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006378:	4b07      	ldr	r3, [pc, #28]	@ (8006398 <tcp_tmr+0x28>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	b2da      	uxtb	r2, r3
 8006380:	4b05      	ldr	r3, [pc, #20]	@ (8006398 <tcp_tmr+0x28>)
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	4b04      	ldr	r3, [pc, #16]	@ (8006398 <tcp_tmr+0x28>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006390:	f000 fb54 	bl	8006a3c <tcp_slowtmr>
  }
}
 8006394:	bf00      	nop
 8006396:	bd80      	pop	{r7, pc}
 8006398:	200082b5 	.word	0x200082b5

0800639c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d105      	bne.n	80063b8 <tcp_remove_listener+0x1c>
 80063ac:	4b0d      	ldr	r3, [pc, #52]	@ (80063e4 <tcp_remove_listener+0x48>)
 80063ae:	22ff      	movs	r2, #255	@ 0xff
 80063b0:	490d      	ldr	r1, [pc, #52]	@ (80063e8 <tcp_remove_listener+0x4c>)
 80063b2:	480e      	ldr	r0, [pc, #56]	@ (80063ec <tcp_remove_listener+0x50>)
 80063b4:	f00a f922 	bl	80105fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	e00a      	b.n	80063d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d102      	bne.n	80063ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1f1      	bne.n	80063be <tcp_remove_listener+0x22>
    }
  }
}
 80063da:	bf00      	nop
 80063dc:	bf00      	nop
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	08011ef0 	.word	0x08011ef0
 80063e8:	08011f78 	.word	0x08011f78
 80063ec:	08011f34 	.word	0x08011f34

080063f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <tcp_listen_closed+0x1c>
 80063fe:	4b14      	ldr	r3, [pc, #80]	@ (8006450 <tcp_listen_closed+0x60>)
 8006400:	f240 1211 	movw	r2, #273	@ 0x111
 8006404:	4913      	ldr	r1, [pc, #76]	@ (8006454 <tcp_listen_closed+0x64>)
 8006406:	4814      	ldr	r0, [pc, #80]	@ (8006458 <tcp_listen_closed+0x68>)
 8006408:	f00a f8f8 	bl	80105fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	7d1b      	ldrb	r3, [r3, #20]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d006      	beq.n	8006422 <tcp_listen_closed+0x32>
 8006414:	4b0e      	ldr	r3, [pc, #56]	@ (8006450 <tcp_listen_closed+0x60>)
 8006416:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800641a:	4910      	ldr	r1, [pc, #64]	@ (800645c <tcp_listen_closed+0x6c>)
 800641c:	480e      	ldr	r0, [pc, #56]	@ (8006458 <tcp_listen_closed+0x68>)
 800641e:	f00a f8ed 	bl	80105fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006422:	2301      	movs	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	e00b      	b.n	8006440 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006428:	4a0d      	ldr	r2, [pc, #52]	@ (8006460 <tcp_listen_closed+0x70>)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff ffb1 	bl	800639c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3301      	adds	r3, #1
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b03      	cmp	r3, #3
 8006444:	d9f0      	bls.n	8006428 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006446:	bf00      	nop
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	08011ef0 	.word	0x08011ef0
 8006454:	08011fa0 	.word	0x08011fa0
 8006458:	08011f34 	.word	0x08011f34
 800645c:	08011fac 	.word	0x08011fac
 8006460:	08014270 	.word	0x08014270

08006464 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006464:	b5b0      	push	{r4, r5, r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af04      	add	r7, sp, #16
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <tcp_close_shutdown+0x20>
 8006476:	4b63      	ldr	r3, [pc, #396]	@ (8006604 <tcp_close_shutdown+0x1a0>)
 8006478:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800647c:	4962      	ldr	r1, [pc, #392]	@ (8006608 <tcp_close_shutdown+0x1a4>)
 800647e:	4863      	ldr	r0, [pc, #396]	@ (800660c <tcp_close_shutdown+0x1a8>)
 8006480:	f00a f8bc 	bl	80105fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d066      	beq.n	8006558 <tcp_close_shutdown+0xf4>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7d1b      	ldrb	r3, [r3, #20]
 800648e:	2b04      	cmp	r3, #4
 8006490:	d003      	beq.n	800649a <tcp_close_shutdown+0x36>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	7d1b      	ldrb	r3, [r3, #20]
 8006496:	2b07      	cmp	r3, #7
 8006498:	d15e      	bne.n	8006558 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <tcp_close_shutdown+0x48>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80064aa:	d055      	beq.n	8006558 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8b5b      	ldrh	r3, [r3, #26]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <tcp_close_shutdown+0x62>
 80064b8:	4b52      	ldr	r3, [pc, #328]	@ (8006604 <tcp_close_shutdown+0x1a0>)
 80064ba:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80064be:	4954      	ldr	r1, [pc, #336]	@ (8006610 <tcp_close_shutdown+0x1ac>)
 80064c0:	4852      	ldr	r0, [pc, #328]	@ (800660c <tcp_close_shutdown+0x1a8>)
 80064c2:	f00a f89b 	bl	80105fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80064ce:	687d      	ldr	r5, [r7, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3304      	adds	r3, #4
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	8ad2      	ldrh	r2, [r2, #22]
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	8b09      	ldrh	r1, [r1, #24]
 80064dc:	9102      	str	r1, [sp, #8]
 80064de:	9201      	str	r2, [sp, #4]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	462b      	mov	r3, r5
 80064e4:	4622      	mov	r2, r4
 80064e6:	4601      	mov	r1, r0
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f004 fe8d 	bl	800b208 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 f8c8 	bl	8007684 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80064f4:	4b47      	ldr	r3, [pc, #284]	@ (8006614 <tcp_close_shutdown+0x1b0>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d105      	bne.n	800650a <tcp_close_shutdown+0xa6>
 80064fe:	4b45      	ldr	r3, [pc, #276]	@ (8006614 <tcp_close_shutdown+0x1b0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	4a43      	ldr	r2, [pc, #268]	@ (8006614 <tcp_close_shutdown+0x1b0>)
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e013      	b.n	8006532 <tcp_close_shutdown+0xce>
 800650a:	4b42      	ldr	r3, [pc, #264]	@ (8006614 <tcp_close_shutdown+0x1b0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	e00c      	b.n	800652c <tcp_close_shutdown+0xc8>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	d104      	bne.n	8006526 <tcp_close_shutdown+0xc2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	60da      	str	r2, [r3, #12]
 8006524:	e005      	b.n	8006532 <tcp_close_shutdown+0xce>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1ef      	bne.n	8006512 <tcp_close_shutdown+0xae>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	60da      	str	r2, [r3, #12]
 8006538:	4b37      	ldr	r3, [pc, #220]	@ (8006618 <tcp_close_shutdown+0x1b4>)
 800653a:	2201      	movs	r2, #1
 800653c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800653e:	4b37      	ldr	r3, [pc, #220]	@ (800661c <tcp_close_shutdown+0x1b8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	429a      	cmp	r2, r3
 8006546:	d102      	bne.n	800654e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006548:	f003 fd5c 	bl	800a004 <tcp_trigger_input_pcb_close>
 800654c:	e002      	b.n	8006554 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff fed6 	bl	8006300 <tcp_free>
      }
      return ERR_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e050      	b.n	80065fa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	7d1b      	ldrb	r3, [r3, #20]
 800655c:	2b02      	cmp	r3, #2
 800655e:	d03b      	beq.n	80065d8 <tcp_close_shutdown+0x174>
 8006560:	2b02      	cmp	r3, #2
 8006562:	dc44      	bgt.n	80065ee <tcp_close_shutdown+0x18a>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <tcp_close_shutdown+0x10a>
 8006568:	2b01      	cmp	r3, #1
 800656a:	d02a      	beq.n	80065c2 <tcp_close_shutdown+0x15e>
 800656c:	e03f      	b.n	80065ee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	8adb      	ldrh	r3, [r3, #22]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d021      	beq.n	80065ba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006576:	4b2a      	ldr	r3, [pc, #168]	@ (8006620 <tcp_close_shutdown+0x1bc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	d105      	bne.n	800658c <tcp_close_shutdown+0x128>
 8006580:	4b27      	ldr	r3, [pc, #156]	@ (8006620 <tcp_close_shutdown+0x1bc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	4a26      	ldr	r2, [pc, #152]	@ (8006620 <tcp_close_shutdown+0x1bc>)
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	e013      	b.n	80065b4 <tcp_close_shutdown+0x150>
 800658c:	4b24      	ldr	r3, [pc, #144]	@ (8006620 <tcp_close_shutdown+0x1bc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60bb      	str	r3, [r7, #8]
 8006592:	e00c      	b.n	80065ae <tcp_close_shutdown+0x14a>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	429a      	cmp	r2, r3
 800659c:	d104      	bne.n	80065a8 <tcp_close_shutdown+0x144>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	60da      	str	r2, [r3, #12]
 80065a6:	e005      	b.n	80065b4 <tcp_close_shutdown+0x150>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1ef      	bne.n	8006594 <tcp_close_shutdown+0x130>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fea0 	bl	8006300 <tcp_free>
      break;
 80065c0:	e01a      	b.n	80065f8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff ff14 	bl	80063f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4816      	ldr	r0, [pc, #88]	@ (8006624 <tcp_close_shutdown+0x1c0>)
 80065cc:	f001 f8aa 	bl	8007724 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff feb1 	bl	8006338 <tcp_free_listen>
      break;
 80065d6:	e00f      	b.n	80065f8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	480e      	ldr	r0, [pc, #56]	@ (8006614 <tcp_close_shutdown+0x1b0>)
 80065dc:	f001 f8a2 	bl	8007724 <tcp_pcb_remove>
 80065e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006618 <tcp_close_shutdown+0x1b4>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff fe8a 	bl	8006300 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80065ec:	e004      	b.n	80065f8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f81a 	bl	8006628 <tcp_close_shutdown_fin>
 80065f4:	4603      	mov	r3, r0
 80065f6:	e000      	b.n	80065fa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bdb0      	pop	{r4, r5, r7, pc}
 8006602:	bf00      	nop
 8006604:	08011ef0 	.word	0x08011ef0
 8006608:	08011fc4 	.word	0x08011fc4
 800660c:	08011f34 	.word	0x08011f34
 8006610:	08011fe4 	.word	0x08011fe4
 8006614:	200082ac 	.word	0x200082ac
 8006618:	200082b4 	.word	0x200082b4
 800661c:	200082ec 	.word	0x200082ec
 8006620:	200082a4 	.word	0x200082a4
 8006624:	200082a8 	.word	0x200082a8

08006628 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <tcp_close_shutdown_fin+0x1c>
 8006636:	4b2e      	ldr	r3, [pc, #184]	@ (80066f0 <tcp_close_shutdown_fin+0xc8>)
 8006638:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800663c:	492d      	ldr	r1, [pc, #180]	@ (80066f4 <tcp_close_shutdown_fin+0xcc>)
 800663e:	482e      	ldr	r0, [pc, #184]	@ (80066f8 <tcp_close_shutdown_fin+0xd0>)
 8006640:	f009 ffdc 	bl	80105fc <iprintf>

  switch (pcb->state) {
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7d1b      	ldrb	r3, [r3, #20]
 8006648:	2b07      	cmp	r3, #7
 800664a:	d020      	beq.n	800668e <tcp_close_shutdown_fin+0x66>
 800664c:	2b07      	cmp	r3, #7
 800664e:	dc2b      	bgt.n	80066a8 <tcp_close_shutdown_fin+0x80>
 8006650:	2b03      	cmp	r3, #3
 8006652:	d002      	beq.n	800665a <tcp_close_shutdown_fin+0x32>
 8006654:	2b04      	cmp	r3, #4
 8006656:	d00d      	beq.n	8006674 <tcp_close_shutdown_fin+0x4c>
 8006658:	e026      	b.n	80066a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f003 fee2 	bl	800a424 <tcp_send_fin>
 8006660:	4603      	mov	r3, r0
 8006662:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d11f      	bne.n	80066ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2205      	movs	r2, #5
 8006670:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006672:	e01b      	b.n	80066ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f003 fed5 	bl	800a424 <tcp_send_fin>
 800667a:	4603      	mov	r3, r0
 800667c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800667e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d114      	bne.n	80066b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2205      	movs	r2, #5
 800668a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800668c:	e010      	b.n	80066b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f003 fec8 	bl	800a424 <tcp_send_fin>
 8006694:	4603      	mov	r3, r0
 8006696:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d109      	bne.n	80066b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2209      	movs	r2, #9
 80066a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80066a6:	e005      	b.n	80066b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	e01c      	b.n	80066e6 <tcp_close_shutdown_fin+0xbe>
      break;
 80066ac:	bf00      	nop
 80066ae:	e002      	b.n	80066b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80066b0:	bf00      	nop
 80066b2:	e000      	b.n	80066b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80066b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80066b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d103      	bne.n	80066c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f003 ffee 	bl	800a6a0 <tcp_output>
 80066c4:	e00d      	b.n	80066e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80066c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ce:	d108      	bne.n	80066e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	8b5b      	ldrh	r3, [r3, #26]
 80066d4:	f043 0308 	orr.w	r3, r3, #8
 80066d8:	b29a      	uxth	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	e001      	b.n	80066e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80066e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	08011ef0 	.word	0x08011ef0
 80066f4:	08011fa0 	.word	0x08011fa0
 80066f8:	08011f34 	.word	0x08011f34

080066fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <tcp_close+0x22>
 800670a:	4b0f      	ldr	r3, [pc, #60]	@ (8006748 <tcp_close+0x4c>)
 800670c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006710:	490e      	ldr	r1, [pc, #56]	@ (800674c <tcp_close+0x50>)
 8006712:	480f      	ldr	r0, [pc, #60]	@ (8006750 <tcp_close+0x54>)
 8006714:	f009 ff72 	bl	80105fc <iprintf>
 8006718:	f06f 030f 	mvn.w	r3, #15
 800671c:	e00f      	b.n	800673e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7d1b      	ldrb	r3, [r3, #20]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d006      	beq.n	8006734 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	8b5b      	ldrh	r3, [r3, #26]
 800672a:	f043 0310 	orr.w	r3, r3, #16
 800672e:	b29a      	uxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006734:	2101      	movs	r1, #1
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff fe94 	bl	8006464 <tcp_close_shutdown>
 800673c:	4603      	mov	r3, r0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	08011ef0 	.word	0x08011ef0
 800674c:	08012000 	.word	0x08012000
 8006750:	08011f34 	.word	0x08011f34

08006754 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b08e      	sub	sp, #56	@ 0x38
 8006758:	af04      	add	r7, sp, #16
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d107      	bne.n	8006774 <tcp_abandon+0x20>
 8006764:	4b52      	ldr	r3, [pc, #328]	@ (80068b0 <tcp_abandon+0x15c>)
 8006766:	f240 223d 	movw	r2, #573	@ 0x23d
 800676a:	4952      	ldr	r1, [pc, #328]	@ (80068b4 <tcp_abandon+0x160>)
 800676c:	4852      	ldr	r0, [pc, #328]	@ (80068b8 <tcp_abandon+0x164>)
 800676e:	f009 ff45 	bl	80105fc <iprintf>
 8006772:	e099      	b.n	80068a8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	7d1b      	ldrb	r3, [r3, #20]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d106      	bne.n	800678a <tcp_abandon+0x36>
 800677c:	4b4c      	ldr	r3, [pc, #304]	@ (80068b0 <tcp_abandon+0x15c>)
 800677e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8006782:	494e      	ldr	r1, [pc, #312]	@ (80068bc <tcp_abandon+0x168>)
 8006784:	484c      	ldr	r0, [pc, #304]	@ (80068b8 <tcp_abandon+0x164>)
 8006786:	f009 ff39 	bl	80105fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7d1b      	ldrb	r3, [r3, #20]
 800678e:	2b0a      	cmp	r3, #10
 8006790:	d107      	bne.n	80067a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	484a      	ldr	r0, [pc, #296]	@ (80068c0 <tcp_abandon+0x16c>)
 8006796:	f000 ffc5 	bl	8007724 <tcp_pcb_remove>
    tcp_free(pcb);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fdb0 	bl	8006300 <tcp_free>
 80067a0:	e082      	b.n	80068a8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	7d1b      	ldrb	r3, [r3, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d126      	bne.n	800681a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8adb      	ldrh	r3, [r3, #22]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d02e      	beq.n	8006832 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80067d4:	4b3b      	ldr	r3, [pc, #236]	@ (80068c4 <tcp_abandon+0x170>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d105      	bne.n	80067ea <tcp_abandon+0x96>
 80067de:	4b39      	ldr	r3, [pc, #228]	@ (80068c4 <tcp_abandon+0x170>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	4a37      	ldr	r2, [pc, #220]	@ (80068c4 <tcp_abandon+0x170>)
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	e013      	b.n	8006812 <tcp_abandon+0xbe>
 80067ea:	4b36      	ldr	r3, [pc, #216]	@ (80068c4 <tcp_abandon+0x170>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	61fb      	str	r3, [r7, #28]
 80067f0:	e00c      	b.n	800680c <tcp_abandon+0xb8>
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d104      	bne.n	8006806 <tcp_abandon+0xb2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	e005      	b.n	8006812 <tcp_abandon+0xbe>
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1ef      	bne.n	80067f2 <tcp_abandon+0x9e>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	60da      	str	r2, [r3, #12]
 8006818:	e00b      	b.n	8006832 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8adb      	ldrh	r3, [r3, #22]
 8006822:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4828      	ldr	r0, [pc, #160]	@ (80068c8 <tcp_abandon+0x174>)
 8006828:	f000 ff7c 	bl	8007724 <tcp_pcb_remove>
 800682c:	4b27      	ldr	r3, [pc, #156]	@ (80068cc <tcp_abandon+0x178>)
 800682e:	2201      	movs	r2, #1
 8006830:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fd1e 	bl	8007280 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fd15 	bl	8007280 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fd0c 	bl	8007280 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3304      	adds	r3, #4
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	8b12      	ldrh	r2, [r2, #24]
 8006878:	9202      	str	r2, [sp, #8]
 800687a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800687c:	9201      	str	r2, [sp, #4]
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	460b      	mov	r3, r1
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	69b9      	ldr	r1, [r7, #24]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f004 fcbe 	bl	800b208 <tcp_rst>
    }
    last_state = pcb->state;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	7d1b      	ldrb	r3, [r3, #20]
 8006890:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff fd34 	bl	8006300 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <tcp_abandon+0x154>
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f06f 010c 	mvn.w	r1, #12
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	4798      	blx	r3
  }
}
 80068a8:	3728      	adds	r7, #40	@ 0x28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	08011ef0 	.word	0x08011ef0
 80068b4:	08012034 	.word	0x08012034
 80068b8:	08011f34 	.word	0x08011f34
 80068bc:	08012050 	.word	0x08012050
 80068c0:	200082b0 	.word	0x200082b0
 80068c4:	200082a4 	.word	0x200082a4
 80068c8:	200082ac 	.word	0x200082ac
 80068cc:	200082b4 	.word	0x200082b4

080068d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80068d8:	2101      	movs	r1, #1
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff ff3a 	bl	8006754 <tcp_abandon>
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <tcp_update_rcv_ann_wnd+0x1c>
 80068f6:	4b25      	ldr	r3, [pc, #148]	@ (800698c <tcp_update_rcv_ann_wnd+0xa4>)
 80068f8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80068fc:	4924      	ldr	r1, [pc, #144]	@ (8006990 <tcp_update_rcv_ann_wnd+0xa8>)
 80068fe:	4825      	ldr	r0, [pc, #148]	@ (8006994 <tcp_update_rcv_ann_wnd+0xac>)
 8006900:	f009 fe7c 	bl	80105fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800690c:	4413      	add	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8006918:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800691c:	bf28      	it	cs
 800691e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8006922:	b292      	uxth	r2, r2
 8006924:	4413      	add	r3, r2
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	db08      	blt.n	8006940 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	e020      	b.n	8006982 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	dd03      	ble.n	8006956 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006954:	e014      	b.n	8006980 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006968:	d306      	bcc.n	8006978 <tcp_update_rcv_ann_wnd+0x90>
 800696a:	4b08      	ldr	r3, [pc, #32]	@ (800698c <tcp_update_rcv_ann_wnd+0xa4>)
 800696c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8006970:	4909      	ldr	r1, [pc, #36]	@ (8006998 <tcp_update_rcv_ann_wnd+0xb0>)
 8006972:	4808      	ldr	r0, [pc, #32]	@ (8006994 <tcp_update_rcv_ann_wnd+0xac>)
 8006974:	f009 fe42 	bl	80105fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	b29a      	uxth	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8006980:	2300      	movs	r3, #0
  }
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	08011ef0 	.word	0x08011ef0
 8006990:	0801214c 	.word	0x0801214c
 8006994:	08011f34 	.word	0x08011f34
 8006998:	08012170 	.word	0x08012170

0800699c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d107      	bne.n	80069be <tcp_recved+0x22>
 80069ae:	4b1f      	ldr	r3, [pc, #124]	@ (8006a2c <tcp_recved+0x90>)
 80069b0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80069b4:	491e      	ldr	r1, [pc, #120]	@ (8006a30 <tcp_recved+0x94>)
 80069b6:	481f      	ldr	r0, [pc, #124]	@ (8006a34 <tcp_recved+0x98>)
 80069b8:	f009 fe20 	bl	80105fc <iprintf>
 80069bc:	e032      	b.n	8006a24 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	7d1b      	ldrb	r3, [r3, #20]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d106      	bne.n	80069d4 <tcp_recved+0x38>
 80069c6:	4b19      	ldr	r3, [pc, #100]	@ (8006a2c <tcp_recved+0x90>)
 80069c8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80069cc:	491a      	ldr	r1, [pc, #104]	@ (8006a38 <tcp_recved+0x9c>)
 80069ce:	4819      	ldr	r0, [pc, #100]	@ (8006a34 <tcp_recved+0x98>)
 80069d0:	f009 fe14 	bl	80105fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80069d8:	887b      	ldrh	r3, [r7, #2]
 80069da:	4413      	add	r3, r2
 80069dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80069de:	89fb      	ldrh	r3, [r7, #14]
 80069e0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80069e4:	d804      	bhi.n	80069f0 <tcp_recved+0x54>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ea:	89fa      	ldrh	r2, [r7, #14]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d204      	bcs.n	80069fa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80069f6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80069f8:	e002      	b.n	8006a00 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	89fa      	ldrh	r2, [r7, #14]
 80069fe:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff ff71 	bl	80068e8 <tcp_update_rcv_ann_wnd>
 8006a06:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8006a0e:	d309      	bcc.n	8006a24 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8b5b      	ldrh	r3, [r3, #26]
 8006a14:	f043 0302 	orr.w	r3, r3, #2
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f003 fe3e 	bl	800a6a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	08011ef0 	.word	0x08011ef0
 8006a30:	0801218c 	.word	0x0801218c
 8006a34:	08011f34 	.word	0x08011f34
 8006a38:	080121a4 	.word	0x080121a4

08006a3c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006a3c:	b5b0      	push	{r4, r5, r7, lr}
 8006a3e:	b090      	sub	sp, #64	@ 0x40
 8006a40:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8006a48:	4b95      	ldr	r3, [pc, #596]	@ (8006ca0 <tcp_slowtmr+0x264>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	4a94      	ldr	r2, [pc, #592]	@ (8006ca0 <tcp_slowtmr+0x264>)
 8006a50:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006a52:	4b94      	ldr	r3, [pc, #592]	@ (8006ca4 <tcp_slowtmr+0x268>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	3301      	adds	r3, #1
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	4b92      	ldr	r3, [pc, #584]	@ (8006ca4 <tcp_slowtmr+0x268>)
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	e000      	b.n	8006a62 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8006a60:	bf00      	nop
  prev = NULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8006a66:	4b90      	ldr	r3, [pc, #576]	@ (8006ca8 <tcp_slowtmr+0x26c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006a6c:	e29f      	b.n	8006fae <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a70:	7d1b      	ldrb	r3, [r3, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <tcp_slowtmr+0x48>
 8006a76:	4b8d      	ldr	r3, [pc, #564]	@ (8006cac <tcp_slowtmr+0x270>)
 8006a78:	f240 42be 	movw	r2, #1214	@ 0x4be
 8006a7c:	498c      	ldr	r1, [pc, #560]	@ (8006cb0 <tcp_slowtmr+0x274>)
 8006a7e:	488d      	ldr	r0, [pc, #564]	@ (8006cb4 <tcp_slowtmr+0x278>)
 8006a80:	f009 fdbc 	bl	80105fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	7d1b      	ldrb	r3, [r3, #20]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d106      	bne.n	8006a9a <tcp_slowtmr+0x5e>
 8006a8c:	4b87      	ldr	r3, [pc, #540]	@ (8006cac <tcp_slowtmr+0x270>)
 8006a8e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8006a92:	4989      	ldr	r1, [pc, #548]	@ (8006cb8 <tcp_slowtmr+0x27c>)
 8006a94:	4887      	ldr	r0, [pc, #540]	@ (8006cb4 <tcp_slowtmr+0x278>)
 8006a96:	f009 fdb1 	bl	80105fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9c:	7d1b      	ldrb	r3, [r3, #20]
 8006a9e:	2b0a      	cmp	r3, #10
 8006aa0:	d106      	bne.n	8006ab0 <tcp_slowtmr+0x74>
 8006aa2:	4b82      	ldr	r3, [pc, #520]	@ (8006cac <tcp_slowtmr+0x270>)
 8006aa4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8006aa8:	4984      	ldr	r1, [pc, #528]	@ (8006cbc <tcp_slowtmr+0x280>)
 8006aaa:	4882      	ldr	r0, [pc, #520]	@ (8006cb4 <tcp_slowtmr+0x278>)
 8006aac:	f009 fda6 	bl	80105fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab2:	7f9a      	ldrb	r2, [r3, #30]
 8006ab4:	4b7b      	ldr	r3, [pc, #492]	@ (8006ca4 <tcp_slowtmr+0x268>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d105      	bne.n	8006ac8 <tcp_slowtmr+0x8c>
      prev = pcb;
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8006ac6:	e272      	b.n	8006fae <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8006ac8:	4b76      	ldr	r3, [pc, #472]	@ (8006ca4 <tcp_slowtmr+0x268>)
 8006aca:	781a      	ldrb	r2, [r3, #0]
 8006acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ace:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ade:	7d1b      	ldrb	r3, [r3, #20]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d10a      	bne.n	8006afa <tcp_slowtmr+0xbe>
 8006ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	d905      	bls.n	8006afa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8006aee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006af2:	3301      	adds	r3, #1
 8006af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006af8:	e11e      	b.n	8006d38 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b00:	2b0b      	cmp	r3, #11
 8006b02:	d905      	bls.n	8006b10 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8006b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b08:	3301      	adds	r3, #1
 8006b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b0e:	e113      	b.n	8006d38 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8006b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b12:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d075      	beq.n	8006c06 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d006      	beq.n	8006b30 <tcp_slowtmr+0xf4>
 8006b22:	4b62      	ldr	r3, [pc, #392]	@ (8006cac <tcp_slowtmr+0x270>)
 8006b24:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8006b28:	4965      	ldr	r1, [pc, #404]	@ (8006cc0 <tcp_slowtmr+0x284>)
 8006b2a:	4862      	ldr	r0, [pc, #392]	@ (8006cb4 <tcp_slowtmr+0x278>)
 8006b2c:	f009 fd66 	bl	80105fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d106      	bne.n	8006b46 <tcp_slowtmr+0x10a>
 8006b38:	4b5c      	ldr	r3, [pc, #368]	@ (8006cac <tcp_slowtmr+0x270>)
 8006b3a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8006b3e:	4961      	ldr	r1, [pc, #388]	@ (8006cc4 <tcp_slowtmr+0x288>)
 8006b40:	485c      	ldr	r0, [pc, #368]	@ (8006cb4 <tcp_slowtmr+0x278>)
 8006b42:	f009 fd5b 	bl	80105fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b48:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8006b4c:	2b0b      	cmp	r3, #11
 8006b4e:	d905      	bls.n	8006b5c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8006b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b54:	3301      	adds	r3, #1
 8006b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b5a:	e0ed      	b.n	8006d38 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006b62:	3b01      	subs	r3, #1
 8006b64:	4a58      	ldr	r2, [pc, #352]	@ (8006cc8 <tcp_slowtmr+0x28c>)
 8006b66:	5cd3      	ldrb	r3, [r2, r3]
 8006b68:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006b70:	7c7a      	ldrb	r2, [r7, #17]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d907      	bls.n	8006b86 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8006b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b78:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b82:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8006b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b88:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006b8c:	7c7a      	ldrb	r2, [r7, #17]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	f200 80d2 	bhi.w	8006d38 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8006b94:	2301      	movs	r3, #1
 8006b96:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8006b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d108      	bne.n	8006bb4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006ba2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ba4:	f004 fc24 	bl	800b3f0 <tcp_zero_window_probe>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d014      	beq.n	8006bd8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8006bae:	2300      	movs	r3, #0
 8006bb0:	623b      	str	r3, [r7, #32]
 8006bb2:	e011      	b.n	8006bd8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bbe:	f003 fae9 	bl	800a194 <tcp_split_unsent_seg>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d107      	bne.n	8006bd8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8006bc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bca:	f003 fd69 	bl	800a6a0 <tcp_output>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 80ac 	beq.w	8006d38 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8006be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006bee:	2b06      	cmp	r3, #6
 8006bf0:	f200 80a2 	bhi.w	8006d38 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c00:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8006c04:	e098      	b.n	8006d38 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	db0f      	blt.n	8006c30 <tcp_slowtmr+0x1f4>
 8006c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c12:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006c16:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d008      	beq.n	8006c30 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8006c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3301      	adds	r3, #1
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	b21a      	sxth	r2, r3
 8006c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8006c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c32:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8006c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c38:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	db7b      	blt.n	8006d38 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006c40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c42:	f004 f821 	bl	800ac88 <tcp_rexmit_rto_prepare>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <tcp_slowtmr+0x220>
 8006c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d171      	bne.n	8006d38 <tcp_slowtmr+0x2fc>
 8006c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d06d      	beq.n	8006d38 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8006c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5e:	7d1b      	ldrb	r3, [r3, #20]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d03a      	beq.n	8006cda <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c6a:	2b0c      	cmp	r3, #12
 8006c6c:	bf28      	it	cs
 8006c6e:	230c      	movcs	r3, #12
 8006c70:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006c78:	10db      	asrs	r3, r3, #3
 8006c7a:	b21b      	sxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8006c84:	4413      	add	r3, r2
 8006c86:	7efa      	ldrb	r2, [r7, #27]
 8006c88:	4910      	ldr	r1, [pc, #64]	@ (8006ccc <tcp_slowtmr+0x290>)
 8006c8a:	5c8a      	ldrb	r2, [r1, r2]
 8006c8c:	4093      	lsls	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8006c96:	4293      	cmp	r3, r2
 8006c98:	dc1a      	bgt.n	8006cd0 <tcp_slowtmr+0x294>
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	b21a      	sxth	r2, r3
 8006c9e:	e019      	b.n	8006cd4 <tcp_slowtmr+0x298>
 8006ca0:	200082a0 	.word	0x200082a0
 8006ca4:	200082b6 	.word	0x200082b6
 8006ca8:	200082ac 	.word	0x200082ac
 8006cac:	08011ef0 	.word	0x08011ef0
 8006cb0:	08012234 	.word	0x08012234
 8006cb4:	08011f34 	.word	0x08011f34
 8006cb8:	08012260 	.word	0x08012260
 8006cbc:	0801228c 	.word	0x0801228c
 8006cc0:	080122bc 	.word	0x080122bc
 8006cc4:	080122f0 	.word	0x080122f0
 8006cc8:	08014268 	.word	0x08014268
 8006ccc:	08014258 	.word	0x08014258
 8006cd0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8006cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cdc:	2200      	movs	r2, #0
 8006cde:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8006ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8006cec:	4293      	cmp	r3, r2
 8006cee:	bf28      	it	cs
 8006cf0:	4613      	movcs	r3, r2
 8006cf2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006cf4:	8a7b      	ldrh	r3, [r7, #18]
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8006d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d206      	bcs.n	8006d20 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8006d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d22:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d26:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8006d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8006d32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d34:	f004 f818 	bl	800ad68 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8006d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3a:	7d1b      	ldrb	r3, [r3, #20]
 8006d3c:	2b06      	cmp	r3, #6
 8006d3e:	d111      	bne.n	8006d64 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8006d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d42:	8b5b      	ldrh	r3, [r3, #26]
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d4c:	4b9d      	ldr	r3, [pc, #628]	@ (8006fc4 <tcp_slowtmr+0x588>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b28      	cmp	r3, #40	@ 0x28
 8006d58:	d904      	bls.n	8006d64 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8006d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d5e:	3301      	adds	r3, #1
 8006d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d66:	7a5b      	ldrb	r3, [r3, #9]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d04c      	beq.n	8006e0a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8006d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d72:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d003      	beq.n	8006d80 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8006d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006d7c:	2b07      	cmp	r3, #7
 8006d7e:	d144      	bne.n	8006e0a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d80:	4b90      	ldr	r3, [pc, #576]	@ (8006fc4 <tcp_slowtmr+0x588>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d90:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8006d94:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8006d98:	498b      	ldr	r1, [pc, #556]	@ (8006fc8 <tcp_slowtmr+0x58c>)
 8006d9a:	fba1 1303 	umull	r1, r3, r1, r3
 8006d9e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d90a      	bls.n	8006dba <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8006da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006da8:	3301      	adds	r3, #1
 8006daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8006dae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006db2:	3301      	adds	r3, #1
 8006db4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006db8:	e027      	b.n	8006e0a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006dba:	4b82      	ldr	r3, [pc, #520]	@ (8006fc4 <tcp_slowtmr+0x588>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8006dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dcc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	4b7e      	ldr	r3, [pc, #504]	@ (8006fcc <tcp_slowtmr+0x590>)
 8006dd4:	fb00 f303 	mul.w	r3, r0, r3
 8006dd8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006dda:	497b      	ldr	r1, [pc, #492]	@ (8006fc8 <tcp_slowtmr+0x58c>)
 8006ddc:	fba1 1303 	umull	r1, r3, r1, r3
 8006de0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d911      	bls.n	8006e0a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8006de6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006de8:	f004 fac2 	bl	800b370 <tcp_keepalive>
 8006dec:	4603      	mov	r3, r0
 8006dee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8006df2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d107      	bne.n	8006e0a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8006dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006e00:	3301      	adds	r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e06:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8006e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d011      	beq.n	8006e36 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006e12:	4b6c      	ldr	r3, [pc, #432]	@ (8006fc4 <tcp_slowtmr+0x588>)
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	1ad2      	subs	r2, r2, r3
 8006e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006e22:	4619      	mov	r1, r3
 8006e24:	460b      	mov	r3, r1
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	440b      	add	r3, r1
 8006e2a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d302      	bcc.n	8006e36 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8006e30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e32:	f000 fddb 	bl	80079ec <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8006e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e38:	7d1b      	ldrb	r3, [r3, #20]
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d10b      	bne.n	8006e56 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e3e:	4b61      	ldr	r3, [pc, #388]	@ (8006fc4 <tcp_slowtmr+0x588>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b28      	cmp	r3, #40	@ 0x28
 8006e4a:	d904      	bls.n	8006e56 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8006e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e50:	3301      	adds	r3, #1
 8006e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8006e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e58:	7d1b      	ldrb	r3, [r3, #20]
 8006e5a:	2b09      	cmp	r3, #9
 8006e5c:	d10b      	bne.n	8006e76 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006e5e:	4b59      	ldr	r3, [pc, #356]	@ (8006fc4 <tcp_slowtmr+0x588>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2bf0      	cmp	r3, #240	@ 0xf0
 8006e6a:	d904      	bls.n	8006e76 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8006e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e70:	3301      	adds	r3, #1
 8006e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8006e76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d060      	beq.n	8006f40 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8006e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e84:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8006e86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e88:	f000 fbfc 	bl	8007684 <tcp_pcb_purge>
      if (prev != NULL) {
 8006e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d010      	beq.n	8006eb4 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006e92:	4b4f      	ldr	r3, [pc, #316]	@ (8006fd0 <tcp_slowtmr+0x594>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d106      	bne.n	8006eaa <tcp_slowtmr+0x46e>
 8006e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8006fd4 <tcp_slowtmr+0x598>)
 8006e9e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8006ea2:	494d      	ldr	r1, [pc, #308]	@ (8006fd8 <tcp_slowtmr+0x59c>)
 8006ea4:	484d      	ldr	r0, [pc, #308]	@ (8006fdc <tcp_slowtmr+0x5a0>)
 8006ea6:	f009 fba9 	bl	80105fc <iprintf>
        prev->next = pcb->next;
 8006eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	60da      	str	r2, [r3, #12]
 8006eb2:	e00f      	b.n	8006ed4 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006eb4:	4b46      	ldr	r3, [pc, #280]	@ (8006fd0 <tcp_slowtmr+0x594>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d006      	beq.n	8006ecc <tcp_slowtmr+0x490>
 8006ebe:	4b45      	ldr	r3, [pc, #276]	@ (8006fd4 <tcp_slowtmr+0x598>)
 8006ec0:	f240 5271 	movw	r2, #1393	@ 0x571
 8006ec4:	4946      	ldr	r1, [pc, #280]	@ (8006fe0 <tcp_slowtmr+0x5a4>)
 8006ec6:	4845      	ldr	r0, [pc, #276]	@ (8006fdc <tcp_slowtmr+0x5a0>)
 8006ec8:	f009 fb98 	bl	80105fc <iprintf>
        tcp_active_pcbs = pcb->next;
 8006ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4a3f      	ldr	r2, [pc, #252]	@ (8006fd0 <tcp_slowtmr+0x594>)
 8006ed2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8006ed4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d013      	beq.n	8006f04 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ede:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006ee4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8006ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee8:	3304      	adds	r3, #4
 8006eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eec:	8ad2      	ldrh	r2, [r2, #22]
 8006eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ef0:	8b09      	ldrh	r1, [r1, #24]
 8006ef2:	9102      	str	r1, [sp, #8]
 8006ef4:	9201      	str	r2, [sp, #4]
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	462b      	mov	r3, r5
 8006efa:	4622      	mov	r2, r4
 8006efc:	4601      	mov	r1, r0
 8006efe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f00:	f004 f982 	bl	800b208 <tcp_rst>
      err_arg = pcb->callback_arg;
 8006f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0c:	7d1b      	ldrb	r3, [r3, #20]
 8006f0e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f12:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006f1a:	6838      	ldr	r0, [r7, #0]
 8006f1c:	f7ff f9f0 	bl	8006300 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8006f20:	4b30      	ldr	r3, [pc, #192]	@ (8006fe4 <tcp_slowtmr+0x5a8>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <tcp_slowtmr+0x4fa>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f06f 010c 	mvn.w	r1, #12
 8006f32:	68b8      	ldr	r0, [r7, #8]
 8006f34:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006f36:	4b2b      	ldr	r3, [pc, #172]	@ (8006fe4 <tcp_slowtmr+0x5a8>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d037      	beq.n	8006fae <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8006f3e:	e590      	b.n	8006a62 <tcp_slowtmr+0x26>
      prev = pcb;
 8006f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f42:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8006f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4c:	7f1b      	ldrb	r3, [r3, #28]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f54:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	7f1a      	ldrb	r2, [r3, #28]
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	7f5b      	ldrb	r3, [r3, #29]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d325      	bcc.n	8006fae <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8006f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f64:	2200      	movs	r2, #0
 8006f66:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8006f68:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe4 <tcp_slowtmr+0x5a8>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <tcp_slowtmr+0x554>
 8006f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f80:	6912      	ldr	r2, [r2, #16]
 8006f82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f84:	4610      	mov	r0, r2
 8006f86:	4798      	blx	r3
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006f8e:	e002      	b.n	8006f96 <tcp_slowtmr+0x55a>
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8006f96:	4b13      	ldr	r3, [pc, #76]	@ (8006fe4 <tcp_slowtmr+0x5a8>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f47f ad60 	bne.w	8006a60 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006fa0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d102      	bne.n	8006fae <tcp_slowtmr+0x572>
          tcp_output(prev);
 8006fa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006faa:	f003 fb79 	bl	800a6a0 <tcp_output>
  while (pcb != NULL) {
 8006fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f47f ad5c 	bne.w	8006a6e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8006fba:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe8 <tcp_slowtmr+0x5ac>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006fc0:	e067      	b.n	8007092 <tcp_slowtmr+0x656>
 8006fc2:	bf00      	nop
 8006fc4:	200082a0 	.word	0x200082a0
 8006fc8:	10624dd3 	.word	0x10624dd3
 8006fcc:	000124f8 	.word	0x000124f8
 8006fd0:	200082ac 	.word	0x200082ac
 8006fd4:	08011ef0 	.word	0x08011ef0
 8006fd8:	08012328 	.word	0x08012328
 8006fdc:	08011f34 	.word	0x08011f34
 8006fe0:	08012354 	.word	0x08012354
 8006fe4:	200082b4 	.word	0x200082b4
 8006fe8:	200082b0 	.word	0x200082b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fee:	7d1b      	ldrb	r3, [r3, #20]
 8006ff0:	2b0a      	cmp	r3, #10
 8006ff2:	d006      	beq.n	8007002 <tcp_slowtmr+0x5c6>
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80070a4 <tcp_slowtmr+0x668>)
 8006ff6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8006ffa:	492b      	ldr	r1, [pc, #172]	@ (80070a8 <tcp_slowtmr+0x66c>)
 8006ffc:	482b      	ldr	r0, [pc, #172]	@ (80070ac <tcp_slowtmr+0x670>)
 8006ffe:	f009 fafd 	bl	80105fc <iprintf>
    pcb_remove = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007008:	4b29      	ldr	r3, [pc, #164]	@ (80070b0 <tcp_slowtmr+0x674>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2bf0      	cmp	r3, #240	@ 0xf0
 8007014:	d904      	bls.n	8007020 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8007016:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800701a:	3301      	adds	r3, #1
 800701c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007024:	2b00      	cmp	r3, #0
 8007026:	d02f      	beq.n	8007088 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007028:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800702a:	f000 fb2b 	bl	8007684 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800702e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007030:	2b00      	cmp	r3, #0
 8007032:	d010      	beq.n	8007056 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007034:	4b1f      	ldr	r3, [pc, #124]	@ (80070b4 <tcp_slowtmr+0x678>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800703a:	429a      	cmp	r2, r3
 800703c:	d106      	bne.n	800704c <tcp_slowtmr+0x610>
 800703e:	4b19      	ldr	r3, [pc, #100]	@ (80070a4 <tcp_slowtmr+0x668>)
 8007040:	f240 52af 	movw	r2, #1455	@ 0x5af
 8007044:	491c      	ldr	r1, [pc, #112]	@ (80070b8 <tcp_slowtmr+0x67c>)
 8007046:	4819      	ldr	r0, [pc, #100]	@ (80070ac <tcp_slowtmr+0x670>)
 8007048:	f009 fad8 	bl	80105fc <iprintf>
        prev->next = pcb->next;
 800704c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	60da      	str	r2, [r3, #12]
 8007054:	e00f      	b.n	8007076 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007056:	4b17      	ldr	r3, [pc, #92]	@ (80070b4 <tcp_slowtmr+0x678>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800705c:	429a      	cmp	r2, r3
 800705e:	d006      	beq.n	800706e <tcp_slowtmr+0x632>
 8007060:	4b10      	ldr	r3, [pc, #64]	@ (80070a4 <tcp_slowtmr+0x668>)
 8007062:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8007066:	4915      	ldr	r1, [pc, #84]	@ (80070bc <tcp_slowtmr+0x680>)
 8007068:	4810      	ldr	r0, [pc, #64]	@ (80070ac <tcp_slowtmr+0x670>)
 800706a:	f009 fac7 	bl	80105fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800706e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	4a10      	ldr	r2, [pc, #64]	@ (80070b4 <tcp_slowtmr+0x678>)
 8007074:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007078:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007080:	69f8      	ldr	r0, [r7, #28]
 8007082:	f7ff f93d 	bl	8006300 <tcp_free>
 8007086:	e004      	b.n	8007092 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800708c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1a9      	bne.n	8006fec <tcp_slowtmr+0x5b0>
    }
  }
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	3730      	adds	r7, #48	@ 0x30
 800709e:	46bd      	mov	sp, r7
 80070a0:	bdb0      	pop	{r4, r5, r7, pc}
 80070a2:	bf00      	nop
 80070a4:	08011ef0 	.word	0x08011ef0
 80070a8:	08012380 	.word	0x08012380
 80070ac:	08011f34 	.word	0x08011f34
 80070b0:	200082a0 	.word	0x200082a0
 80070b4:	200082b0 	.word	0x200082b0
 80070b8:	080123b0 	.word	0x080123b0
 80070bc:	080123d8 	.word	0x080123d8

080070c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80070c6:	4b2d      	ldr	r3, [pc, #180]	@ (800717c <tcp_fasttmr+0xbc>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	3301      	adds	r3, #1
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	4b2b      	ldr	r3, [pc, #172]	@ (800717c <tcp_fasttmr+0xbc>)
 80070d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80070d2:	4b2b      	ldr	r3, [pc, #172]	@ (8007180 <tcp_fasttmr+0xc0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80070d8:	e048      	b.n	800716c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	7f9a      	ldrb	r2, [r3, #30]
 80070de:	4b27      	ldr	r3, [pc, #156]	@ (800717c <tcp_fasttmr+0xbc>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d03f      	beq.n	8007166 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80070e6:	4b25      	ldr	r3, [pc, #148]	@ (800717c <tcp_fasttmr+0xbc>)
 80070e8:	781a      	ldrb	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	8b5b      	ldrh	r3, [r3, #26]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d010      	beq.n	800711c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	8b5b      	ldrh	r3, [r3, #26]
 80070fe:	f043 0302 	orr.w	r3, r3, #2
 8007102:	b29a      	uxth	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f003 fac9 	bl	800a6a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	8b5b      	ldrh	r3, [r3, #26]
 8007112:	f023 0303 	bic.w	r3, r3, #3
 8007116:	b29a      	uxth	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	8b5b      	ldrh	r3, [r3, #26]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d009      	beq.n	800713c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8b5b      	ldrh	r3, [r3, #26]
 800712c:	f023 0308 	bic.w	r3, r3, #8
 8007130:	b29a      	uxth	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff fa76 	bl	8006628 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800714a:	4b0e      	ldr	r3, [pc, #56]	@ (8007184 <tcp_fasttmr+0xc4>)
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f819 	bl	8007188 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007156:	4b0b      	ldr	r3, [pc, #44]	@ (8007184 <tcp_fasttmr+0xc4>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d000      	beq.n	8007160 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800715e:	e7b8      	b.n	80070d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	607b      	str	r3, [r7, #4]
 8007164:	e002      	b.n	800716c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1b3      	bne.n	80070da <tcp_fasttmr+0x1a>
    }
  }
}
 8007172:	bf00      	nop
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	200082b6 	.word	0x200082b6
 8007180:	200082ac 	.word	0x200082ac
 8007184:	200082b4 	.word	0x200082b4

08007188 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007188:	b590      	push	{r4, r7, lr}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <tcp_process_refused_data+0x22>
 8007196:	4b37      	ldr	r3, [pc, #220]	@ (8007274 <tcp_process_refused_data+0xec>)
 8007198:	f240 6209 	movw	r2, #1545	@ 0x609
 800719c:	4936      	ldr	r1, [pc, #216]	@ (8007278 <tcp_process_refused_data+0xf0>)
 800719e:	4837      	ldr	r0, [pc, #220]	@ (800727c <tcp_process_refused_data+0xf4>)
 80071a0:	f009 fa2c 	bl	80105fc <iprintf>
 80071a4:	f06f 030f 	mvn.w	r3, #15
 80071a8:	e060      	b.n	800726c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071ae:	7b5b      	ldrb	r3, [r3, #13]
 80071b0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071b6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00b      	beq.n	80071e0 <tcp_process_refused_data+0x58>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6918      	ldr	r0, [r3, #16]
 80071d2:	2300      	movs	r3, #0
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	47a0      	blx	r4
 80071da:	4603      	mov	r3, r0
 80071dc:	73fb      	strb	r3, [r7, #15]
 80071de:	e007      	b.n	80071f0 <tcp_process_refused_data+0x68>
 80071e0:	2300      	movs	r3, #0
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	2000      	movs	r0, #0
 80071e8:	f000 f8a4 	bl	8007334 <tcp_recv_null>
 80071ec:	4603      	mov	r3, r0
 80071ee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80071f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d12a      	bne.n	800724e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d033      	beq.n	800726a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007206:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800720a:	d005      	beq.n	8007218 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007210:	3301      	adds	r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00b      	beq.n	800723a <tcp_process_refused_data+0xb2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6918      	ldr	r0, [r3, #16]
 800722c:	2300      	movs	r3, #0
 800722e:	2200      	movs	r2, #0
 8007230:	6879      	ldr	r1, [r7, #4]
 8007232:	47a0      	blx	r4
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]
 8007238:	e001      	b.n	800723e <tcp_process_refused_data+0xb6>
 800723a:	2300      	movs	r3, #0
 800723c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800723e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007242:	f113 0f0d 	cmn.w	r3, #13
 8007246:	d110      	bne.n	800726a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007248:	f06f 030c 	mvn.w	r3, #12
 800724c:	e00e      	b.n	800726c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800724e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007252:	f113 0f0d 	cmn.w	r3, #13
 8007256:	d102      	bne.n	800725e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007258:	f06f 030c 	mvn.w	r3, #12
 800725c:	e006      	b.n	800726c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8007264:	f06f 0304 	mvn.w	r3, #4
 8007268:	e000      	b.n	800726c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	bd90      	pop	{r4, r7, pc}
 8007274:	08011ef0 	.word	0x08011ef0
 8007278:	08012400 	.word	0x08012400
 800727c:	08011f34 	.word	0x08011f34

08007280 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007288:	e007      	b.n	800729a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f80a 	bl	80072aa <tcp_seg_free>
    seg = next;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1f4      	bne.n	800728a <tcp_segs_free+0xa>
  }
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00c      	beq.n	80072d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d004      	beq.n	80072ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe fd6b 	bl	8005da0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	2003      	movs	r0, #3
 80072ce:	f7fd ff05 	bl	80050dc <memp_free>
  }
}
 80072d2:	bf00      	nop
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <tcp_seg_copy+0x1c>
 80072ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007328 <tcp_seg_copy+0x4c>)
 80072ec:	f240 6282 	movw	r2, #1666	@ 0x682
 80072f0:	490e      	ldr	r1, [pc, #56]	@ (800732c <tcp_seg_copy+0x50>)
 80072f2:	480f      	ldr	r0, [pc, #60]	@ (8007330 <tcp_seg_copy+0x54>)
 80072f4:	f009 f982 	bl	80105fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80072f8:	2003      	movs	r0, #3
 80072fa:	f7fd fe7f 	bl	8004ffc <memp_malloc>
 80072fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <tcp_seg_copy+0x2e>
    return NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	e00a      	b.n	8007320 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800730a:	2210      	movs	r2, #16
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f009 fa4f 	bl	80107b2 <memcpy>
  pbuf_ref(cseg->p);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe fde1 	bl	8005ee0 <pbuf_ref>
  return cseg;
 800731e:	68fb      	ldr	r3, [r7, #12]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	08011ef0 	.word	0x08011ef0
 800732c:	08012444 	.word	0x08012444
 8007330:	08011f34 	.word	0x08011f34

08007334 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d109      	bne.n	800735c <tcp_recv_null+0x28>
 8007348:	4b12      	ldr	r3, [pc, #72]	@ (8007394 <tcp_recv_null+0x60>)
 800734a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800734e:	4912      	ldr	r1, [pc, #72]	@ (8007398 <tcp_recv_null+0x64>)
 8007350:	4812      	ldr	r0, [pc, #72]	@ (800739c <tcp_recv_null+0x68>)
 8007352:	f009 f953 	bl	80105fc <iprintf>
 8007356:	f06f 030f 	mvn.w	r3, #15
 800735a:	e016      	b.n	800738a <tcp_recv_null+0x56>

  if (p != NULL) {
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	891b      	ldrh	r3, [r3, #8]
 8007366:	4619      	mov	r1, r3
 8007368:	68b8      	ldr	r0, [r7, #8]
 800736a:	f7ff fb17 	bl	800699c <tcp_recved>
    pbuf_free(p);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7fe fd16 	bl	8005da0 <pbuf_free>
 8007374:	e008      	b.n	8007388 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d104      	bne.n	8007388 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800737e:	68b8      	ldr	r0, [r7, #8]
 8007380:	f7ff f9bc 	bl	80066fc <tcp_close>
 8007384:	4603      	mov	r3, r0
 8007386:	e000      	b.n	800738a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	08011ef0 	.word	0x08011ef0
 8007398:	08012460 	.word	0x08012460
 800739c:	08011f34 	.word	0x08011f34

080073a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80073aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	db01      	blt.n	80073b6 <tcp_kill_prio+0x16>
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	e000      	b.n	80073b8 <tcp_kill_prio+0x18>
 80073b6:	237f      	movs	r3, #127	@ 0x7f
 80073b8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80073ba:	7afb      	ldrb	r3, [r7, #11]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d034      	beq.n	800742a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80073c0:	7afb      	ldrb	r3, [r7, #11]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073ce:	4b19      	ldr	r3, [pc, #100]	@ (8007434 <tcp_kill_prio+0x94>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e01f      	b.n	8007416 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	7d5b      	ldrb	r3, [r3, #21]
 80073da:	7afa      	ldrb	r2, [r7, #11]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d80c      	bhi.n	80073fa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80073e4:	7afa      	ldrb	r2, [r7, #11]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d112      	bne.n	8007410 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80073ea:	4b13      	ldr	r3, [pc, #76]	@ (8007438 <tcp_kill_prio+0x98>)
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d80a      	bhi.n	8007410 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80073fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007438 <tcp_kill_prio+0x98>)
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	7d5b      	ldrb	r3, [r3, #21]
 800740e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1dc      	bne.n	80073d6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007422:	6938      	ldr	r0, [r7, #16]
 8007424:	f7ff fa54 	bl	80068d0 <tcp_abort>
 8007428:	e000      	b.n	800742c <tcp_kill_prio+0x8c>
    return;
 800742a:	bf00      	nop
  }
}
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	200082ac 	.word	0x200082ac
 8007438:	200082a0 	.word	0x200082a0

0800743c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	2b08      	cmp	r3, #8
 800744a:	d009      	beq.n	8007460 <tcp_kill_state+0x24>
 800744c:	79fb      	ldrb	r3, [r7, #7]
 800744e:	2b09      	cmp	r3, #9
 8007450:	d006      	beq.n	8007460 <tcp_kill_state+0x24>
 8007452:	4b1a      	ldr	r3, [pc, #104]	@ (80074bc <tcp_kill_state+0x80>)
 8007454:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8007458:	4919      	ldr	r1, [pc, #100]	@ (80074c0 <tcp_kill_state+0x84>)
 800745a:	481a      	ldr	r0, [pc, #104]	@ (80074c4 <tcp_kill_state+0x88>)
 800745c:	f009 f8ce 	bl	80105fc <iprintf>

  inactivity = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007468:	4b17      	ldr	r3, [pc, #92]	@ (80074c8 <tcp_kill_state+0x8c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	617b      	str	r3, [r7, #20]
 800746e:	e017      	b.n	80074a0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	7d1b      	ldrb	r3, [r3, #20]
 8007474:	79fa      	ldrb	r2, [r7, #7]
 8007476:	429a      	cmp	r2, r3
 8007478:	d10f      	bne.n	800749a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800747a:	4b14      	ldr	r3, [pc, #80]	@ (80074cc <tcp_kill_state+0x90>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	429a      	cmp	r2, r3
 8007488:	d807      	bhi.n	800749a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800748a:	4b10      	ldr	r3, [pc, #64]	@ (80074cc <tcp_kill_state+0x90>)
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	617b      	str	r3, [r7, #20]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e4      	bne.n	8007470 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80074ac:	2100      	movs	r1, #0
 80074ae:	6938      	ldr	r0, [r7, #16]
 80074b0:	f7ff f950 	bl	8006754 <tcp_abandon>
  }
}
 80074b4:	bf00      	nop
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	08011ef0 	.word	0x08011ef0
 80074c0:	0801247c 	.word	0x0801247c
 80074c4:	08011f34 	.word	0x08011f34
 80074c8:	200082ac 	.word	0x200082ac
 80074cc:	200082a0 	.word	0x200082a0

080074d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80074de:	4b12      	ldr	r3, [pc, #72]	@ (8007528 <tcp_kill_timewait+0x58>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e012      	b.n	800750c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80074e6:	4b11      	ldr	r3, [pc, #68]	@ (800752c <tcp_kill_timewait+0x5c>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d807      	bhi.n	8007506 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80074f6:	4b0d      	ldr	r3, [pc, #52]	@ (800752c <tcp_kill_timewait+0x5c>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e9      	bne.n	80074e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007518:	68b8      	ldr	r0, [r7, #8]
 800751a:	f7ff f9d9 	bl	80068d0 <tcp_abort>
  }
}
 800751e:	bf00      	nop
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	200082b0 	.word	0x200082b0
 800752c:	200082a0 	.word	0x200082a0

08007530 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007536:	4b10      	ldr	r3, [pc, #64]	@ (8007578 <tcp_handle_closepend+0x48>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800753c:	e014      	b.n	8007568 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	8b5b      	ldrh	r3, [r3, #26]
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d009      	beq.n	8007564 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8b5b      	ldrh	r3, [r3, #26]
 8007554:	f023 0308 	bic.w	r3, r3, #8
 8007558:	b29a      	uxth	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff f862 	bl	8006628 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e7      	bne.n	800753e <tcp_handle_closepend+0xe>
  }
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	200082ac 	.word	0x200082ac

0800757c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	4603      	mov	r3, r0
 8007584:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007586:	2001      	movs	r0, #1
 8007588:	f7fd fd38 	bl	8004ffc <memp_malloc>
 800758c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d126      	bne.n	80075e2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007594:	f7ff ffcc 	bl	8007530 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007598:	f7ff ff9a 	bl	80074d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800759c:	2001      	movs	r0, #1
 800759e:	f7fd fd2d 	bl	8004ffc <memp_malloc>
 80075a2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d11b      	bne.n	80075e2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80075aa:	2009      	movs	r0, #9
 80075ac:	f7ff ff46 	bl	800743c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075b0:	2001      	movs	r0, #1
 80075b2:	f7fd fd23 	bl	8004ffc <memp_malloc>
 80075b6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d111      	bne.n	80075e2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80075be:	2008      	movs	r0, #8
 80075c0:	f7ff ff3c 	bl	800743c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075c4:	2001      	movs	r0, #1
 80075c6:	f7fd fd19 	bl	8004ffc <memp_malloc>
 80075ca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d107      	bne.n	80075e2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff fee3 	bl	80073a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075da:	2001      	movs	r0, #1
 80075dc:	f7fd fd0e 	bl	8004ffc <memp_malloc>
 80075e0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d03f      	beq.n	8007668 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80075e8:	229c      	movs	r2, #156	@ 0x9c
 80075ea:	2100      	movs	r1, #0
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f009 f86a 	bl	80106c6 <memset>
    pcb->prio = prio;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	79fa      	ldrb	r2, [r7, #7]
 80075f6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80075fe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007608:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	22ff      	movs	r2, #255	@ 0xff
 8007616:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800761e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2206      	movs	r2, #6
 8007624:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2206      	movs	r2, #6
 800762c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007634:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800763e:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <tcp_alloc+0xf8>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007646:	4b0c      	ldr	r3, [pc, #48]	@ (8007678 <tcp_alloc+0xfc>)
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007654:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4a08      	ldr	r2, [pc, #32]	@ (800767c <tcp_alloc+0x100>)
 800765c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4a07      	ldr	r2, [pc, #28]	@ (8007680 <tcp_alloc+0x104>)
 8007664:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007668:	68fb      	ldr	r3, [r7, #12]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	200082a0 	.word	0x200082a0
 8007678:	200082b6 	.word	0x200082b6
 800767c:	08007335 	.word	0x08007335
 8007680:	006ddd00 	.word	0x006ddd00

08007684 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d107      	bne.n	80076a2 <tcp_pcb_purge+0x1e>
 8007692:	4b21      	ldr	r3, [pc, #132]	@ (8007718 <tcp_pcb_purge+0x94>)
 8007694:	f640 0251 	movw	r2, #2129	@ 0x851
 8007698:	4920      	ldr	r1, [pc, #128]	@ (800771c <tcp_pcb_purge+0x98>)
 800769a:	4821      	ldr	r0, [pc, #132]	@ (8007720 <tcp_pcb_purge+0x9c>)
 800769c:	f008 ffae 	bl	80105fc <iprintf>
 80076a0:	e037      	b.n	8007712 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	7d1b      	ldrb	r3, [r3, #20]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d033      	beq.n	8007712 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80076ae:	2b0a      	cmp	r3, #10
 80076b0:	d02f      	beq.n	8007712 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d02b      	beq.n	8007712 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d007      	beq.n	80076d2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fb6a 	bl	8005da0 <pbuf_free>
      pcb->refused_data = NULL;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f986 	bl	80079ec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076e6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff fdc7 	bl	8007280 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7ff fdc2 	bl	8007280 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	08011ef0 	.word	0x08011ef0
 800771c:	0801253c 	.word	0x0801253c
 8007720:	08011f34 	.word	0x08011f34

08007724 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <tcp_pcb_remove+0x1e>
 8007734:	4b3e      	ldr	r3, [pc, #248]	@ (8007830 <tcp_pcb_remove+0x10c>)
 8007736:	f640 0283 	movw	r2, #2179	@ 0x883
 800773a:	493e      	ldr	r1, [pc, #248]	@ (8007834 <tcp_pcb_remove+0x110>)
 800773c:	483e      	ldr	r0, [pc, #248]	@ (8007838 <tcp_pcb_remove+0x114>)
 800773e:	f008 ff5d 	bl	80105fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d106      	bne.n	8007756 <tcp_pcb_remove+0x32>
 8007748:	4b39      	ldr	r3, [pc, #228]	@ (8007830 <tcp_pcb_remove+0x10c>)
 800774a:	f640 0284 	movw	r2, #2180	@ 0x884
 800774e:	493b      	ldr	r1, [pc, #236]	@ (800783c <tcp_pcb_remove+0x118>)
 8007750:	4839      	ldr	r0, [pc, #228]	@ (8007838 <tcp_pcb_remove+0x114>)
 8007752:	f008 ff53 	bl	80105fc <iprintf>

  TCP_RMV(pcblist, pcb);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d105      	bne.n	800776c <tcp_pcb_remove+0x48>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	e013      	b.n	8007794 <tcp_pcb_remove+0x70>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	e00c      	b.n	800778e <tcp_pcb_remove+0x6a>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d104      	bne.n	8007788 <tcp_pcb_remove+0x64>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	60da      	str	r2, [r3, #12]
 8007786:	e005      	b.n	8007794 <tcp_pcb_remove+0x70>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1ef      	bne.n	8007774 <tcp_pcb_remove+0x50>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2200      	movs	r2, #0
 8007798:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800779a:	6838      	ldr	r0, [r7, #0]
 800779c:	f7ff ff72 	bl	8007684 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	7d1b      	ldrb	r3, [r3, #20]
 80077a4:	2b0a      	cmp	r3, #10
 80077a6:	d013      	beq.n	80077d0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d00f      	beq.n	80077d0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	8b5b      	ldrh	r3, [r3, #26]
 80077b4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d009      	beq.n	80077d0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	8b5b      	ldrh	r3, [r3, #26]
 80077c0:	f043 0302 	orr.w	r3, r3, #2
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80077ca:	6838      	ldr	r0, [r7, #0]
 80077cc:	f002 ff68 	bl	800a6a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	7d1b      	ldrb	r3, [r3, #20]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d020      	beq.n	800781a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d006      	beq.n	80077ee <tcp_pcb_remove+0xca>
 80077e0:	4b13      	ldr	r3, [pc, #76]	@ (8007830 <tcp_pcb_remove+0x10c>)
 80077e2:	f640 0293 	movw	r2, #2195	@ 0x893
 80077e6:	4916      	ldr	r1, [pc, #88]	@ (8007840 <tcp_pcb_remove+0x11c>)
 80077e8:	4813      	ldr	r0, [pc, #76]	@ (8007838 <tcp_pcb_remove+0x114>)
 80077ea:	f008 ff07 	bl	80105fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d006      	beq.n	8007804 <tcp_pcb_remove+0xe0>
 80077f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007830 <tcp_pcb_remove+0x10c>)
 80077f8:	f640 0294 	movw	r2, #2196	@ 0x894
 80077fc:	4911      	ldr	r1, [pc, #68]	@ (8007844 <tcp_pcb_remove+0x120>)
 80077fe:	480e      	ldr	r0, [pc, #56]	@ (8007838 <tcp_pcb_remove+0x114>)
 8007800:	f008 fefc 	bl	80105fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007808:	2b00      	cmp	r3, #0
 800780a:	d006      	beq.n	800781a <tcp_pcb_remove+0xf6>
 800780c:	4b08      	ldr	r3, [pc, #32]	@ (8007830 <tcp_pcb_remove+0x10c>)
 800780e:	f640 0296 	movw	r2, #2198	@ 0x896
 8007812:	490d      	ldr	r1, [pc, #52]	@ (8007848 <tcp_pcb_remove+0x124>)
 8007814:	4808      	ldr	r0, [pc, #32]	@ (8007838 <tcp_pcb_remove+0x114>)
 8007816:	f008 fef1 	bl	80105fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2200      	movs	r2, #0
 800781e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2200      	movs	r2, #0
 8007824:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	08011ef0 	.word	0x08011ef0
 8007834:	08012558 	.word	0x08012558
 8007838:	08011f34 	.word	0x08011f34
 800783c:	08012574 	.word	0x08012574
 8007840:	08012594 	.word	0x08012594
 8007844:	080125ac 	.word	0x080125ac
 8007848:	080125c8 	.word	0x080125c8

0800784c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <tcp_next_iss+0x1c>
 800785a:	4b0a      	ldr	r3, [pc, #40]	@ (8007884 <tcp_next_iss+0x38>)
 800785c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8007860:	4909      	ldr	r1, [pc, #36]	@ (8007888 <tcp_next_iss+0x3c>)
 8007862:	480a      	ldr	r0, [pc, #40]	@ (800788c <tcp_next_iss+0x40>)
 8007864:	f008 feca 	bl	80105fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007868:	4b09      	ldr	r3, [pc, #36]	@ (8007890 <tcp_next_iss+0x44>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	4b09      	ldr	r3, [pc, #36]	@ (8007894 <tcp_next_iss+0x48>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4413      	add	r3, r2
 8007872:	4a07      	ldr	r2, [pc, #28]	@ (8007890 <tcp_next_iss+0x44>)
 8007874:	6013      	str	r3, [r2, #0]
  return iss;
 8007876:	4b06      	ldr	r3, [pc, #24]	@ (8007890 <tcp_next_iss+0x44>)
 8007878:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	08011ef0 	.word	0x08011ef0
 8007888:	080125e0 	.word	0x080125e0
 800788c:	08011f34 	.word	0x08011f34
 8007890:	20000024 	.word	0x20000024
 8007894:	200082a0 	.word	0x200082a0

08007898 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d106      	bne.n	80078ba <tcp_eff_send_mss_netif+0x22>
 80078ac:	4b14      	ldr	r3, [pc, #80]	@ (8007900 <tcp_eff_send_mss_netif+0x68>)
 80078ae:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80078b2:	4914      	ldr	r1, [pc, #80]	@ (8007904 <tcp_eff_send_mss_netif+0x6c>)
 80078b4:	4814      	ldr	r0, [pc, #80]	@ (8007908 <tcp_eff_send_mss_netif+0x70>)
 80078b6:	f008 fea1 	bl	80105fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80078c0:	89fb      	ldrh	r3, [r7, #14]
 80078c2:	e019      	b.n	80078f8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078c8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80078ca:	8afb      	ldrh	r3, [r7, #22]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d012      	beq.n	80078f6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80078d0:	2328      	movs	r3, #40	@ 0x28
 80078d2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80078d4:	8afa      	ldrh	r2, [r7, #22]
 80078d6:	8abb      	ldrh	r3, [r7, #20]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d904      	bls.n	80078e6 <tcp_eff_send_mss_netif+0x4e>
 80078dc:	8afa      	ldrh	r2, [r7, #22]
 80078de:	8abb      	ldrh	r3, [r7, #20]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	e000      	b.n	80078e8 <tcp_eff_send_mss_netif+0x50>
 80078e6:	2300      	movs	r3, #0
 80078e8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80078ea:	8a7a      	ldrh	r2, [r7, #18]
 80078ec:	89fb      	ldrh	r3, [r7, #14]
 80078ee:	4293      	cmp	r3, r2
 80078f0:	bf28      	it	cs
 80078f2:	4613      	movcs	r3, r2
 80078f4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80078f6:	89fb      	ldrh	r3, [r7, #14]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	08011ef0 	.word	0x08011ef0
 8007904:	080125fc 	.word	0x080125fc
 8007908:	08011f34 	.word	0x08011f34

0800790c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d119      	bne.n	8007954 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007920:	4b10      	ldr	r3, [pc, #64]	@ (8007964 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007922:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8007926:	4910      	ldr	r1, [pc, #64]	@ (8007968 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007928:	4810      	ldr	r0, [pc, #64]	@ (800796c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800792a:	f008 fe67 	bl	80105fc <iprintf>

  while (pcb != NULL) {
 800792e:	e011      	b.n	8007954 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d108      	bne.n	800794e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7fe ffc4 	bl	80068d0 <tcp_abort>
      pcb = next;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	e002      	b.n	8007954 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1ea      	bne.n	8007930 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	08011ef0 	.word	0x08011ef0
 8007968:	08012624 	.word	0x08012624
 800796c:	08011f34 	.word	0x08011f34

08007970 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d02a      	beq.n	80079d6 <tcp_netif_ip_addr_changed+0x66>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d026      	beq.n	80079d6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007988:	4b15      	ldr	r3, [pc, #84]	@ (80079e0 <tcp_netif_ip_addr_changed+0x70>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff ffbc 	bl	800790c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007994:	4b13      	ldr	r3, [pc, #76]	@ (80079e4 <tcp_netif_ip_addr_changed+0x74>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff ffb6 	bl	800790c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d017      	beq.n	80079d6 <tcp_netif_ip_addr_changed+0x66>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d013      	beq.n	80079d6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80079ae:	4b0e      	ldr	r3, [pc, #56]	@ (80079e8 <tcp_netif_ip_addr_changed+0x78>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e00c      	b.n	80079d0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d103      	bne.n	80079ca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1ef      	bne.n	80079b6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80079d6:	bf00      	nop
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	200082ac 	.word	0x200082ac
 80079e4:	200082a4 	.word	0x200082a4
 80079e8:	200082a8 	.word	0x200082a8

080079ec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d007      	beq.n	8007a0c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff fc3d 	bl	8007280 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007a14:	b590      	push	{r4, r7, lr}
 8007a16:	b08d      	sub	sp, #52	@ 0x34
 8007a18:	af04      	add	r7, sp, #16
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d105      	bne.n	8007a30 <tcp_input+0x1c>
 8007a24:	4b9b      	ldr	r3, [pc, #620]	@ (8007c94 <tcp_input+0x280>)
 8007a26:	2283      	movs	r2, #131	@ 0x83
 8007a28:	499b      	ldr	r1, [pc, #620]	@ (8007c98 <tcp_input+0x284>)
 8007a2a:	489c      	ldr	r0, [pc, #624]	@ (8007c9c <tcp_input+0x288>)
 8007a2c:	f008 fde6 	bl	80105fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	4a9a      	ldr	r2, [pc, #616]	@ (8007ca0 <tcp_input+0x28c>)
 8007a36:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	895b      	ldrh	r3, [r3, #10]
 8007a3c:	2b13      	cmp	r3, #19
 8007a3e:	f240 83d1 	bls.w	80081e4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007a42:	4b98      	ldr	r3, [pc, #608]	@ (8007ca4 <tcp_input+0x290>)
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	4a97      	ldr	r2, [pc, #604]	@ (8007ca4 <tcp_input+0x290>)
 8007a48:	6812      	ldr	r2, [r2, #0]
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f007 fd7f 	bl	800f550 <ip4_addr_isbroadcast_u32>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f040 83c7 	bne.w	80081e8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007a5a:	4b92      	ldr	r3, [pc, #584]	@ (8007ca4 <tcp_input+0x290>)
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007a62:	2be0      	cmp	r3, #224	@ 0xe0
 8007a64:	f000 83c0 	beq.w	80081e8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007a68:	4b8d      	ldr	r3, [pc, #564]	@ (8007ca0 <tcp_input+0x28c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	899b      	ldrh	r3, [r3, #12]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fc fe4b 	bl	800470c <lwip_htons>
 8007a76:	4603      	mov	r3, r0
 8007a78:	0b1b      	lsrs	r3, r3, #12
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007a82:	7cbb      	ldrb	r3, [r7, #18]
 8007a84:	2b13      	cmp	r3, #19
 8007a86:	f240 83b1 	bls.w	80081ec <tcp_input+0x7d8>
 8007a8a:	7cbb      	ldrb	r3, [r7, #18]
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	891b      	ldrh	r3, [r3, #8]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	f200 83aa 	bhi.w	80081ec <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007a98:	7cbb      	ldrb	r3, [r7, #18]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	3b14      	subs	r3, #20
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	4b81      	ldr	r3, [pc, #516]	@ (8007ca8 <tcp_input+0x294>)
 8007aa2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007aa4:	4b81      	ldr	r3, [pc, #516]	@ (8007cac <tcp_input+0x298>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	895a      	ldrh	r2, [r3, #10]
 8007aae:	7cbb      	ldrb	r3, [r7, #18]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d309      	bcc.n	8007aca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8007ca8 <tcp_input+0x294>)
 8007ab8:	881a      	ldrh	r2, [r3, #0]
 8007aba:	4b7d      	ldr	r3, [pc, #500]	@ (8007cb0 <tcp_input+0x29c>)
 8007abc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007abe:	7cbb      	ldrb	r3, [r7, #18]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7fe f8e6 	bl	8005c94 <pbuf_remove_header>
 8007ac8:	e04e      	b.n	8007b68 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <tcp_input+0xca>
 8007ad2:	4b70      	ldr	r3, [pc, #448]	@ (8007c94 <tcp_input+0x280>)
 8007ad4:	22c2      	movs	r2, #194	@ 0xc2
 8007ad6:	4977      	ldr	r1, [pc, #476]	@ (8007cb4 <tcp_input+0x2a0>)
 8007ad8:	4870      	ldr	r0, [pc, #448]	@ (8007c9c <tcp_input+0x288>)
 8007ada:	f008 fd8f 	bl	80105fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007ade:	2114      	movs	r1, #20
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7fe f8d7 	bl	8005c94 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	895a      	ldrh	r2, [r3, #10]
 8007aea:	4b71      	ldr	r3, [pc, #452]	@ (8007cb0 <tcp_input+0x29c>)
 8007aec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007aee:	4b6e      	ldr	r3, [pc, #440]	@ (8007ca8 <tcp_input+0x294>)
 8007af0:	881a      	ldrh	r2, [r3, #0]
 8007af2:	4b6f      	ldr	r3, [pc, #444]	@ (8007cb0 <tcp_input+0x29c>)
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007afa:	4b6d      	ldr	r3, [pc, #436]	@ (8007cb0 <tcp_input+0x29c>)
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7fe f8c7 	bl	8005c94 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	895b      	ldrh	r3, [r3, #10]
 8007b0c:	8a3a      	ldrh	r2, [r7, #16]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	f200 836e 	bhi.w	80081f0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	4a64      	ldr	r2, [pc, #400]	@ (8007cac <tcp_input+0x298>)
 8007b1c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	8a3a      	ldrh	r2, [r7, #16]
 8007b24:	4611      	mov	r1, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe f8b4 	bl	8005c94 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	891a      	ldrh	r2, [r3, #8]
 8007b30:	8a3b      	ldrh	r3, [r7, #16]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	895b      	ldrh	r3, [r3, #10]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d005      	beq.n	8007b4e <tcp_input+0x13a>
 8007b42:	4b54      	ldr	r3, [pc, #336]	@ (8007c94 <tcp_input+0x280>)
 8007b44:	22df      	movs	r2, #223	@ 0xdf
 8007b46:	495c      	ldr	r1, [pc, #368]	@ (8007cb8 <tcp_input+0x2a4>)
 8007b48:	4854      	ldr	r0, [pc, #336]	@ (8007c9c <tcp_input+0x288>)
 8007b4a:	f008 fd57 	bl	80105fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	891a      	ldrh	r2, [r3, #8]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	891b      	ldrh	r3, [r3, #8]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d005      	beq.n	8007b68 <tcp_input+0x154>
 8007b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8007c94 <tcp_input+0x280>)
 8007b5e:	22e0      	movs	r2, #224	@ 0xe0
 8007b60:	4956      	ldr	r1, [pc, #344]	@ (8007cbc <tcp_input+0x2a8>)
 8007b62:	484e      	ldr	r0, [pc, #312]	@ (8007c9c <tcp_input+0x288>)
 8007b64:	f008 fd4a 	bl	80105fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007b68:	4b4d      	ldr	r3, [pc, #308]	@ (8007ca0 <tcp_input+0x28c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	4a4b      	ldr	r2, [pc, #300]	@ (8007ca0 <tcp_input+0x28c>)
 8007b72:	6814      	ldr	r4, [r2, #0]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fc fdc9 	bl	800470c <lwip_htons>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007b7e:	4b48      	ldr	r3, [pc, #288]	@ (8007ca0 <tcp_input+0x28c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	885b      	ldrh	r3, [r3, #2]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	4a46      	ldr	r2, [pc, #280]	@ (8007ca0 <tcp_input+0x28c>)
 8007b88:	6814      	ldr	r4, [r2, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fc fdbe 	bl	800470c <lwip_htons>
 8007b90:	4603      	mov	r3, r0
 8007b92:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007b94:	4b42      	ldr	r3, [pc, #264]	@ (8007ca0 <tcp_input+0x28c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	4a41      	ldr	r2, [pc, #260]	@ (8007ca0 <tcp_input+0x28c>)
 8007b9c:	6814      	ldr	r4, [r2, #0]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fc fdca 	bl	8004738 <lwip_htonl>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	6063      	str	r3, [r4, #4]
 8007ba8:	6863      	ldr	r3, [r4, #4]
 8007baa:	4a45      	ldr	r2, [pc, #276]	@ (8007cc0 <tcp_input+0x2ac>)
 8007bac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007bae:	4b3c      	ldr	r3, [pc, #240]	@ (8007ca0 <tcp_input+0x28c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a3a      	ldr	r2, [pc, #232]	@ (8007ca0 <tcp_input+0x28c>)
 8007bb6:	6814      	ldr	r4, [r2, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fc fdbd 	bl	8004738 <lwip_htonl>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	60a3      	str	r3, [r4, #8]
 8007bc2:	68a3      	ldr	r3, [r4, #8]
 8007bc4:	4a3f      	ldr	r2, [pc, #252]	@ (8007cc4 <tcp_input+0x2b0>)
 8007bc6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007bc8:	4b35      	ldr	r3, [pc, #212]	@ (8007ca0 <tcp_input+0x28c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	89db      	ldrh	r3, [r3, #14]
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	4a33      	ldr	r2, [pc, #204]	@ (8007ca0 <tcp_input+0x28c>)
 8007bd2:	6814      	ldr	r4, [r2, #0]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fc fd99 	bl	800470c <lwip_htons>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007bde:	4b30      	ldr	r3, [pc, #192]	@ (8007ca0 <tcp_input+0x28c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	899b      	ldrh	r3, [r3, #12]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fc fd90 	bl	800470c <lwip_htons>
 8007bec:	4603      	mov	r3, r0
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	4b34      	ldr	r3, [pc, #208]	@ (8007cc8 <tcp_input+0x2b4>)
 8007bf8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	891a      	ldrh	r2, [r3, #8]
 8007bfe:	4b33      	ldr	r3, [pc, #204]	@ (8007ccc <tcp_input+0x2b8>)
 8007c00:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007c02:	4b31      	ldr	r3, [pc, #196]	@ (8007cc8 <tcp_input+0x2b4>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00c      	beq.n	8007c28 <tcp_input+0x214>
    tcplen++;
 8007c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007ccc <tcp_input+0x2b8>)
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	3301      	adds	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	4b2d      	ldr	r3, [pc, #180]	@ (8007ccc <tcp_input+0x2b8>)
 8007c18:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	891a      	ldrh	r2, [r3, #8]
 8007c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8007ccc <tcp_input+0x2b8>)
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	f200 82e6 	bhi.w	80081f4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c2c:	4b28      	ldr	r3, [pc, #160]	@ (8007cd0 <tcp_input+0x2bc>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	61fb      	str	r3, [r7, #28]
 8007c32:	e09d      	b.n	8007d70 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	7d1b      	ldrb	r3, [r3, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d105      	bne.n	8007c48 <tcp_input+0x234>
 8007c3c:	4b15      	ldr	r3, [pc, #84]	@ (8007c94 <tcp_input+0x280>)
 8007c3e:	22fb      	movs	r2, #251	@ 0xfb
 8007c40:	4924      	ldr	r1, [pc, #144]	@ (8007cd4 <tcp_input+0x2c0>)
 8007c42:	4816      	ldr	r0, [pc, #88]	@ (8007c9c <tcp_input+0x288>)
 8007c44:	f008 fcda 	bl	80105fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	7d1b      	ldrb	r3, [r3, #20]
 8007c4c:	2b0a      	cmp	r3, #10
 8007c4e:	d105      	bne.n	8007c5c <tcp_input+0x248>
 8007c50:	4b10      	ldr	r3, [pc, #64]	@ (8007c94 <tcp_input+0x280>)
 8007c52:	22fc      	movs	r2, #252	@ 0xfc
 8007c54:	4920      	ldr	r1, [pc, #128]	@ (8007cd8 <tcp_input+0x2c4>)
 8007c56:	4811      	ldr	r0, [pc, #68]	@ (8007c9c <tcp_input+0x288>)
 8007c58:	f008 fcd0 	bl	80105fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	7d1b      	ldrb	r3, [r3, #20]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d105      	bne.n	8007c70 <tcp_input+0x25c>
 8007c64:	4b0b      	ldr	r3, [pc, #44]	@ (8007c94 <tcp_input+0x280>)
 8007c66:	22fd      	movs	r2, #253	@ 0xfd
 8007c68:	491c      	ldr	r1, [pc, #112]	@ (8007cdc <tcp_input+0x2c8>)
 8007c6a:	480c      	ldr	r0, [pc, #48]	@ (8007c9c <tcp_input+0x288>)
 8007c6c:	f008 fcc6 	bl	80105fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	7a1b      	ldrb	r3, [r3, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d033      	beq.n	8007ce0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	7a1a      	ldrb	r2, [r3, #8]
 8007c7c:	4b09      	ldr	r3, [pc, #36]	@ (8007ca4 <tcp_input+0x290>)
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c84:	3301      	adds	r3, #1
 8007c86:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d029      	beq.n	8007ce0 <tcp_input+0x2cc>
      prev = pcb;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	61bb      	str	r3, [r7, #24]
      continue;
 8007c90:	e06b      	b.n	8007d6a <tcp_input+0x356>
 8007c92:	bf00      	nop
 8007c94:	08012658 	.word	0x08012658
 8007c98:	0801268c 	.word	0x0801268c
 8007c9c:	080126a4 	.word	0x080126a4
 8007ca0:	200082c8 	.word	0x200082c8
 8007ca4:	20004d10 	.word	0x20004d10
 8007ca8:	200082cc 	.word	0x200082cc
 8007cac:	200082d0 	.word	0x200082d0
 8007cb0:	200082ce 	.word	0x200082ce
 8007cb4:	080126cc 	.word	0x080126cc
 8007cb8:	080126dc 	.word	0x080126dc
 8007cbc:	080126e8 	.word	0x080126e8
 8007cc0:	200082d8 	.word	0x200082d8
 8007cc4:	200082dc 	.word	0x200082dc
 8007cc8:	200082e4 	.word	0x200082e4
 8007ccc:	200082e2 	.word	0x200082e2
 8007cd0:	200082ac 	.word	0x200082ac
 8007cd4:	08012708 	.word	0x08012708
 8007cd8:	08012730 	.word	0x08012730
 8007cdc:	0801275c 	.word	0x0801275c
    }

    if (pcb->remote_port == tcphdr->src &&
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	8b1a      	ldrh	r2, [r3, #24]
 8007ce4:	4b72      	ldr	r3, [pc, #456]	@ (8007eb0 <tcp_input+0x49c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d13a      	bne.n	8007d66 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	8ada      	ldrh	r2, [r3, #22]
 8007cf4:	4b6e      	ldr	r3, [pc, #440]	@ (8007eb0 <tcp_input+0x49c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d132      	bne.n	8007d66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	4b6b      	ldr	r3, [pc, #428]	@ (8007eb4 <tcp_input+0x4a0>)
 8007d06:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d12c      	bne.n	8007d66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	4b68      	ldr	r3, [pc, #416]	@ (8007eb4 <tcp_input+0x4a0>)
 8007d12:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d126      	bne.n	8007d66 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d106      	bne.n	8007d30 <tcp_input+0x31c>
 8007d22:	4b65      	ldr	r3, [pc, #404]	@ (8007eb8 <tcp_input+0x4a4>)
 8007d24:	f240 120d 	movw	r2, #269	@ 0x10d
 8007d28:	4964      	ldr	r1, [pc, #400]	@ (8007ebc <tcp_input+0x4a8>)
 8007d2a:	4865      	ldr	r0, [pc, #404]	@ (8007ec0 <tcp_input+0x4ac>)
 8007d2c:	f008 fc66 	bl	80105fc <iprintf>
      if (prev != NULL) {
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <tcp_input+0x338>
        prev->next = pcb->next;
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007d3e:	4b61      	ldr	r3, [pc, #388]	@ (8007ec4 <tcp_input+0x4b0>)
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007d46:	4a5f      	ldr	r2, [pc, #380]	@ (8007ec4 <tcp_input+0x4b0>)
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	69fa      	ldr	r2, [r7, #28]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d111      	bne.n	8007d7a <tcp_input+0x366>
 8007d56:	4b58      	ldr	r3, [pc, #352]	@ (8007eb8 <tcp_input+0x4a4>)
 8007d58:	f240 1215 	movw	r2, #277	@ 0x115
 8007d5c:	495a      	ldr	r1, [pc, #360]	@ (8007ec8 <tcp_input+0x4b4>)
 8007d5e:	4858      	ldr	r0, [pc, #352]	@ (8007ec0 <tcp_input+0x4ac>)
 8007d60:	f008 fc4c 	bl	80105fc <iprintf>
      break;
 8007d64:	e009      	b.n	8007d7a <tcp_input+0x366>
    }
    prev = pcb;
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	61fb      	str	r3, [r7, #28]
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f47f af5e 	bne.w	8007c34 <tcp_input+0x220>
 8007d78:	e000      	b.n	8007d7c <tcp_input+0x368>
      break;
 8007d7a:	bf00      	nop
  }

  if (pcb == NULL) {
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f040 80aa 	bne.w	8007ed8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d84:	4b51      	ldr	r3, [pc, #324]	@ (8007ecc <tcp_input+0x4b8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	61fb      	str	r3, [r7, #28]
 8007d8a:	e03f      	b.n	8007e0c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	7d1b      	ldrb	r3, [r3, #20]
 8007d90:	2b0a      	cmp	r3, #10
 8007d92:	d006      	beq.n	8007da2 <tcp_input+0x38e>
 8007d94:	4b48      	ldr	r3, [pc, #288]	@ (8007eb8 <tcp_input+0x4a4>)
 8007d96:	f240 121f 	movw	r2, #287	@ 0x11f
 8007d9a:	494d      	ldr	r1, [pc, #308]	@ (8007ed0 <tcp_input+0x4bc>)
 8007d9c:	4848      	ldr	r0, [pc, #288]	@ (8007ec0 <tcp_input+0x4ac>)
 8007d9e:	f008 fc2d 	bl	80105fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	7a1b      	ldrb	r3, [r3, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	7a1a      	ldrb	r2, [r3, #8]
 8007dae:	4b41      	ldr	r3, [pc, #260]	@ (8007eb4 <tcp_input+0x4a0>)
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007db6:	3301      	adds	r3, #1
 8007db8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d122      	bne.n	8007e04 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	8b1a      	ldrh	r2, [r3, #24]
 8007dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8007eb0 <tcp_input+0x49c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d11b      	bne.n	8007e06 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	8ada      	ldrh	r2, [r3, #22]
 8007dd2:	4b37      	ldr	r3, [pc, #220]	@ (8007eb0 <tcp_input+0x49c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	885b      	ldrh	r3, [r3, #2]
 8007dd8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d113      	bne.n	8007e06 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	4b34      	ldr	r3, [pc, #208]	@ (8007eb4 <tcp_input+0x4a0>)
 8007de4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d10d      	bne.n	8007e06 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b31      	ldr	r3, [pc, #196]	@ (8007eb4 <tcp_input+0x4a0>)
 8007df0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d107      	bne.n	8007e06 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007df6:	69f8      	ldr	r0, [r7, #28]
 8007df8:	f000 fb56 	bl	80084a8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7fd ffcf 	bl	8005da0 <pbuf_free>
        return;
 8007e02:	e1fd      	b.n	8008200 <tcp_input+0x7ec>
        continue;
 8007e04:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	61fb      	str	r3, [r7, #28]
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1bc      	bne.n	8007d8c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e16:	4b2f      	ldr	r3, [pc, #188]	@ (8007ed4 <tcp_input+0x4c0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	e02a      	b.n	8007e74 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	7a1b      	ldrb	r3, [r3, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00c      	beq.n	8007e40 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	7a1a      	ldrb	r2, [r3, #8]
 8007e2a:	4b22      	ldr	r3, [pc, #136]	@ (8007eb4 <tcp_input+0x4a0>)
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e32:	3301      	adds	r3, #1
 8007e34:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d002      	beq.n	8007e40 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	61bb      	str	r3, [r7, #24]
        continue;
 8007e3e:	e016      	b.n	8007e6e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	8ada      	ldrh	r2, [r3, #22]
 8007e44:	4b1a      	ldr	r3, [pc, #104]	@ (8007eb0 <tcp_input+0x49c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	885b      	ldrh	r3, [r3, #2]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d10c      	bne.n	8007e6a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	4b17      	ldr	r3, [pc, #92]	@ (8007eb4 <tcp_input+0x4a0>)
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d00f      	beq.n	8007e7c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00d      	beq.n	8007e7e <tcp_input+0x46a>
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1d1      	bne.n	8007e1e <tcp_input+0x40a>
 8007e7a:	e000      	b.n	8007e7e <tcp_input+0x46a>
            break;
 8007e7c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d029      	beq.n	8007ed8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007e92:	4b10      	ldr	r3, [pc, #64]	@ (8007ed4 <tcp_input+0x4c0>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8007ed4 <tcp_input+0x4c0>)
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007ea0:	6978      	ldr	r0, [r7, #20]
 8007ea2:	f000 fa03 	bl	80082ac <tcp_listen_input>
      }
      pbuf_free(p);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7fd ff7a 	bl	8005da0 <pbuf_free>
      return;
 8007eac:	e1a8      	b.n	8008200 <tcp_input+0x7ec>
 8007eae:	bf00      	nop
 8007eb0:	200082c8 	.word	0x200082c8
 8007eb4:	20004d10 	.word	0x20004d10
 8007eb8:	08012658 	.word	0x08012658
 8007ebc:	08012784 	.word	0x08012784
 8007ec0:	080126a4 	.word	0x080126a4
 8007ec4:	200082ac 	.word	0x200082ac
 8007ec8:	080127b0 	.word	0x080127b0
 8007ecc:	200082b0 	.word	0x200082b0
 8007ed0:	080127dc 	.word	0x080127dc
 8007ed4:	200082a8 	.word	0x200082a8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 8158 	beq.w	8008190 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007ee0:	4b95      	ldr	r3, [pc, #596]	@ (8008138 <tcp_input+0x724>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	891a      	ldrh	r2, [r3, #8]
 8007eea:	4b93      	ldr	r3, [pc, #588]	@ (8008138 <tcp_input+0x724>)
 8007eec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007eee:	4a92      	ldr	r2, [pc, #584]	@ (8008138 <tcp_input+0x724>)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007ef4:	4b91      	ldr	r3, [pc, #580]	@ (800813c <tcp_input+0x728>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a8f      	ldr	r2, [pc, #572]	@ (8008138 <tcp_input+0x724>)
 8007efa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007efc:	4b90      	ldr	r3, [pc, #576]	@ (8008140 <tcp_input+0x72c>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007f02:	4b90      	ldr	r3, [pc, #576]	@ (8008144 <tcp_input+0x730>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007f08:	4b8f      	ldr	r3, [pc, #572]	@ (8008148 <tcp_input+0x734>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007f0e:	4b8f      	ldr	r3, [pc, #572]	@ (800814c <tcp_input+0x738>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	f003 0308 	and.w	r3, r3, #8
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d006      	beq.n	8007f28 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	7b5b      	ldrb	r3, [r3, #13]
 8007f1e:	f043 0301 	orr.w	r3, r3, #1
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d017      	beq.n	8007f60 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007f30:	69f8      	ldr	r0, [r7, #28]
 8007f32:	f7ff f929 	bl	8007188 <tcp_process_refused_data>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f113 0f0d 	cmn.w	r3, #13
 8007f3c:	d007      	beq.n	8007f4e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00c      	beq.n	8007f60 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007f46:	4b82      	ldr	r3, [pc, #520]	@ (8008150 <tcp_input+0x73c>)
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d008      	beq.n	8007f60 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f040 80e3 	bne.w	800811e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007f58:	69f8      	ldr	r0, [r7, #28]
 8007f5a:	f003 f9a7 	bl	800b2ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007f5e:	e0de      	b.n	800811e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007f60:	4a7c      	ldr	r2, [pc, #496]	@ (8008154 <tcp_input+0x740>)
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007f66:	69f8      	ldr	r0, [r7, #28]
 8007f68:	f000 fb18 	bl	800859c <tcp_process>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007f70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f74:	f113 0f0d 	cmn.w	r3, #13
 8007f78:	f000 80d3 	beq.w	8008122 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007f7c:	4b71      	ldr	r3, [pc, #452]	@ (8008144 <tcp_input+0x730>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	f003 0308 	and.w	r3, r3, #8
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d015      	beq.n	8007fb4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <tcp_input+0x590>
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	6912      	ldr	r2, [r2, #16]
 8007f9c:	f06f 010d 	mvn.w	r1, #13
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007fa4:	69f9      	ldr	r1, [r7, #28]
 8007fa6:	486c      	ldr	r0, [pc, #432]	@ (8008158 <tcp_input+0x744>)
 8007fa8:	f7ff fbbc 	bl	8007724 <tcp_pcb_remove>
        tcp_free(pcb);
 8007fac:	69f8      	ldr	r0, [r7, #28]
 8007fae:	f7fe f9a7 	bl	8006300 <tcp_free>
 8007fb2:	e0da      	b.n	800816a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007fb8:	4b63      	ldr	r3, [pc, #396]	@ (8008148 <tcp_input+0x734>)
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01d      	beq.n	8007ffc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007fc0:	4b61      	ldr	r3, [pc, #388]	@ (8008148 <tcp_input+0x734>)
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00a      	beq.n	8007fe6 <tcp_input+0x5d2>
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	6910      	ldr	r0, [r2, #16]
 8007fda:	89fa      	ldrh	r2, [r7, #14]
 8007fdc:	69f9      	ldr	r1, [r7, #28]
 8007fde:	4798      	blx	r3
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	74fb      	strb	r3, [r7, #19]
 8007fe4:	e001      	b.n	8007fea <tcp_input+0x5d6>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007fea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fee:	f113 0f0d 	cmn.w	r3, #13
 8007ff2:	f000 8098 	beq.w	8008126 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007ff6:	4b54      	ldr	r3, [pc, #336]	@ (8008148 <tcp_input+0x734>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007ffc:	69f8      	ldr	r0, [r7, #28]
 8007ffe:	f000 f915 	bl	800822c <tcp_input_delayed_close>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	f040 8090 	bne.w	800812a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800800a:	4b4d      	ldr	r3, [pc, #308]	@ (8008140 <tcp_input+0x72c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d041      	beq.n	8008096 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008016:	2b00      	cmp	r3, #0
 8008018:	d006      	beq.n	8008028 <tcp_input+0x614>
 800801a:	4b50      	ldr	r3, [pc, #320]	@ (800815c <tcp_input+0x748>)
 800801c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008020:	494f      	ldr	r1, [pc, #316]	@ (8008160 <tcp_input+0x74c>)
 8008022:	4850      	ldr	r0, [pc, #320]	@ (8008164 <tcp_input+0x750>)
 8008024:	f008 faea 	bl	80105fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	8b5b      	ldrh	r3, [r3, #26]
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b00      	cmp	r3, #0
 8008032:	d008      	beq.n	8008046 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008034:	4b42      	ldr	r3, [pc, #264]	@ (8008140 <tcp_input+0x72c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4618      	mov	r0, r3
 800803a:	f7fd feb1 	bl	8005da0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800803e:	69f8      	ldr	r0, [r7, #28]
 8008040:	f7fe fc46 	bl	80068d0 <tcp_abort>
            goto aborted;
 8008044:	e091      	b.n	800816a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <tcp_input+0x656>
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	6918      	ldr	r0, [r3, #16]
 800805a:	4b39      	ldr	r3, [pc, #228]	@ (8008140 <tcp_input+0x72c>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	2300      	movs	r3, #0
 8008060:	69f9      	ldr	r1, [r7, #28]
 8008062:	47a0      	blx	r4
 8008064:	4603      	mov	r3, r0
 8008066:	74fb      	strb	r3, [r7, #19]
 8008068:	e008      	b.n	800807c <tcp_input+0x668>
 800806a:	4b35      	ldr	r3, [pc, #212]	@ (8008140 <tcp_input+0x72c>)
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	2300      	movs	r3, #0
 8008070:	69f9      	ldr	r1, [r7, #28]
 8008072:	2000      	movs	r0, #0
 8008074:	f7ff f95e 	bl	8007334 <tcp_recv_null>
 8008078:	4603      	mov	r3, r0
 800807a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800807c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008080:	f113 0f0d 	cmn.w	r3, #13
 8008084:	d053      	beq.n	800812e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008086:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800808e:	4b2c      	ldr	r3, [pc, #176]	@ (8008140 <tcp_input+0x72c>)
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008096:	4b2b      	ldr	r3, [pc, #172]	@ (8008144 <tcp_input+0x730>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d030      	beq.n	8008104 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080ae:	7b5a      	ldrb	r2, [r3, #13]
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080b4:	f042 0220 	orr.w	r2, r2, #32
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	735a      	strb	r2, [r3, #13]
 80080bc:	e022      	b.n	8008104 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080c2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80080c6:	d005      	beq.n	80080d4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080cc:	3301      	adds	r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <tcp_input+0x6e2>
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	6918      	ldr	r0, [r3, #16]
 80080e8:	2300      	movs	r3, #0
 80080ea:	2200      	movs	r2, #0
 80080ec:	69f9      	ldr	r1, [r7, #28]
 80080ee:	47a0      	blx	r4
 80080f0:	4603      	mov	r3, r0
 80080f2:	74fb      	strb	r3, [r7, #19]
 80080f4:	e001      	b.n	80080fa <tcp_input+0x6e6>
 80080f6:	2300      	movs	r3, #0
 80080f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80080fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080fe:	f113 0f0d 	cmn.w	r3, #13
 8008102:	d016      	beq.n	8008132 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008104:	4b13      	ldr	r3, [pc, #76]	@ (8008154 <tcp_input+0x740>)
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800810a:	69f8      	ldr	r0, [r7, #28]
 800810c:	f000 f88e 	bl	800822c <tcp_input_delayed_close>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d128      	bne.n	8008168 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008116:	69f8      	ldr	r0, [r7, #28]
 8008118:	f002 fac2 	bl	800a6a0 <tcp_output>
 800811c:	e025      	b.n	800816a <tcp_input+0x756>
        goto aborted;
 800811e:	bf00      	nop
 8008120:	e023      	b.n	800816a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008122:	bf00      	nop
 8008124:	e021      	b.n	800816a <tcp_input+0x756>
              goto aborted;
 8008126:	bf00      	nop
 8008128:	e01f      	b.n	800816a <tcp_input+0x756>
          goto aborted;
 800812a:	bf00      	nop
 800812c:	e01d      	b.n	800816a <tcp_input+0x756>
            goto aborted;
 800812e:	bf00      	nop
 8008130:	e01b      	b.n	800816a <tcp_input+0x756>
              goto aborted;
 8008132:	bf00      	nop
 8008134:	e019      	b.n	800816a <tcp_input+0x756>
 8008136:	bf00      	nop
 8008138:	200082b8 	.word	0x200082b8
 800813c:	200082c8 	.word	0x200082c8
 8008140:	200082e8 	.word	0x200082e8
 8008144:	200082e5 	.word	0x200082e5
 8008148:	200082e0 	.word	0x200082e0
 800814c:	200082e4 	.word	0x200082e4
 8008150:	200082e2 	.word	0x200082e2
 8008154:	200082ec 	.word	0x200082ec
 8008158:	200082ac 	.word	0x200082ac
 800815c:	08012658 	.word	0x08012658
 8008160:	0801280c 	.word	0x0801280c
 8008164:	080126a4 	.word	0x080126a4
          goto aborted;
 8008168:	bf00      	nop
    tcp_input_pcb = NULL;
 800816a:	4b27      	ldr	r3, [pc, #156]	@ (8008208 <tcp_input+0x7f4>)
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008170:	4b26      	ldr	r3, [pc, #152]	@ (800820c <tcp_input+0x7f8>)
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008176:	4b26      	ldr	r3, [pc, #152]	@ (8008210 <tcp_input+0x7fc>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d03f      	beq.n	80081fe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800817e:	4b24      	ldr	r3, [pc, #144]	@ (8008210 <tcp_input+0x7fc>)
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	4618      	mov	r0, r3
 8008184:	f7fd fe0c 	bl	8005da0 <pbuf_free>
      inseg.p = NULL;
 8008188:	4b21      	ldr	r3, [pc, #132]	@ (8008210 <tcp_input+0x7fc>)
 800818a:	2200      	movs	r2, #0
 800818c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800818e:	e036      	b.n	80081fe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008190:	4b20      	ldr	r3, [pc, #128]	@ (8008214 <tcp_input+0x800>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	899b      	ldrh	r3, [r3, #12]
 8008196:	b29b      	uxth	r3, r3
 8008198:	4618      	mov	r0, r3
 800819a:	f7fc fab7 	bl	800470c <lwip_htons>
 800819e:	4603      	mov	r3, r0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d118      	bne.n	80081dc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008218 <tcp_input+0x804>)
 80081ac:	6819      	ldr	r1, [r3, #0]
 80081ae:	4b1b      	ldr	r3, [pc, #108]	@ (800821c <tcp_input+0x808>)
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008220 <tcp_input+0x80c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081ba:	4b16      	ldr	r3, [pc, #88]	@ (8008214 <tcp_input+0x800>)
 80081bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081be:	885b      	ldrh	r3, [r3, #2]
 80081c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081c2:	4a14      	ldr	r2, [pc, #80]	@ (8008214 <tcp_input+0x800>)
 80081c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081c6:	8812      	ldrh	r2, [r2, #0]
 80081c8:	b292      	uxth	r2, r2
 80081ca:	9202      	str	r2, [sp, #8]
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	4b15      	ldr	r3, [pc, #84]	@ (8008224 <tcp_input+0x810>)
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	4b15      	ldr	r3, [pc, #84]	@ (8008228 <tcp_input+0x814>)
 80081d4:	4602      	mov	r2, r0
 80081d6:	2000      	movs	r0, #0
 80081d8:	f003 f816 	bl	800b208 <tcp_rst>
    pbuf_free(p);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7fd fddf 	bl	8005da0 <pbuf_free>
  return;
 80081e2:	e00c      	b.n	80081fe <tcp_input+0x7ea>
    goto dropped;
 80081e4:	bf00      	nop
 80081e6:	e006      	b.n	80081f6 <tcp_input+0x7e2>
    goto dropped;
 80081e8:	bf00      	nop
 80081ea:	e004      	b.n	80081f6 <tcp_input+0x7e2>
    goto dropped;
 80081ec:	bf00      	nop
 80081ee:	e002      	b.n	80081f6 <tcp_input+0x7e2>
      goto dropped;
 80081f0:	bf00      	nop
 80081f2:	e000      	b.n	80081f6 <tcp_input+0x7e2>
      goto dropped;
 80081f4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7fd fdd2 	bl	8005da0 <pbuf_free>
 80081fc:	e000      	b.n	8008200 <tcp_input+0x7ec>
  return;
 80081fe:	bf00      	nop
}
 8008200:	3724      	adds	r7, #36	@ 0x24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd90      	pop	{r4, r7, pc}
 8008206:	bf00      	nop
 8008208:	200082ec 	.word	0x200082ec
 800820c:	200082e8 	.word	0x200082e8
 8008210:	200082b8 	.word	0x200082b8
 8008214:	200082c8 	.word	0x200082c8
 8008218:	200082dc 	.word	0x200082dc
 800821c:	200082e2 	.word	0x200082e2
 8008220:	200082d8 	.word	0x200082d8
 8008224:	20004d20 	.word	0x20004d20
 8008228:	20004d24 	.word	0x20004d24

0800822c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d106      	bne.n	8008248 <tcp_input_delayed_close+0x1c>
 800823a:	4b17      	ldr	r3, [pc, #92]	@ (8008298 <tcp_input_delayed_close+0x6c>)
 800823c:	f240 225a 	movw	r2, #602	@ 0x25a
 8008240:	4916      	ldr	r1, [pc, #88]	@ (800829c <tcp_input_delayed_close+0x70>)
 8008242:	4817      	ldr	r0, [pc, #92]	@ (80082a0 <tcp_input_delayed_close+0x74>)
 8008244:	f008 f9da 	bl	80105fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008248:	4b16      	ldr	r3, [pc, #88]	@ (80082a4 <tcp_input_delayed_close+0x78>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	f003 0310 	and.w	r3, r3, #16
 8008250:	2b00      	cmp	r3, #0
 8008252:	d01c      	beq.n	800828e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	8b5b      	ldrh	r3, [r3, #26]
 8008258:	f003 0310 	and.w	r3, r3, #16
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10d      	bne.n	800827c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008266:	2b00      	cmp	r3, #0
 8008268:	d008      	beq.n	800827c <tcp_input_delayed_close+0x50>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	6912      	ldr	r2, [r2, #16]
 8008274:	f06f 010e 	mvn.w	r1, #14
 8008278:	4610      	mov	r0, r2
 800827a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	480a      	ldr	r0, [pc, #40]	@ (80082a8 <tcp_input_delayed_close+0x7c>)
 8008280:	f7ff fa50 	bl	8007724 <tcp_pcb_remove>
    tcp_free(pcb);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7fe f83b 	bl	8006300 <tcp_free>
    return 1;
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	08012658 	.word	0x08012658
 800829c:	08012828 	.word	0x08012828
 80082a0:	080126a4 	.word	0x080126a4
 80082a4:	200082e5 	.word	0x200082e5
 80082a8:	200082ac 	.word	0x200082ac

080082ac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80082ac:	b590      	push	{r4, r7, lr}
 80082ae:	b08b      	sub	sp, #44	@ 0x2c
 80082b0:	af04      	add	r7, sp, #16
 80082b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80082b4:	4b6f      	ldr	r3, [pc, #444]	@ (8008474 <tcp_listen_input+0x1c8>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 80d2 	bne.w	8008466 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d106      	bne.n	80082d6 <tcp_listen_input+0x2a>
 80082c8:	4b6b      	ldr	r3, [pc, #428]	@ (8008478 <tcp_listen_input+0x1cc>)
 80082ca:	f240 2281 	movw	r2, #641	@ 0x281
 80082ce:	496b      	ldr	r1, [pc, #428]	@ (800847c <tcp_listen_input+0x1d0>)
 80082d0:	486b      	ldr	r0, [pc, #428]	@ (8008480 <tcp_listen_input+0x1d4>)
 80082d2:	f008 f993 	bl	80105fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80082d6:	4b67      	ldr	r3, [pc, #412]	@ (8008474 <tcp_listen_input+0x1c8>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d019      	beq.n	8008316 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082e2:	4b68      	ldr	r3, [pc, #416]	@ (8008484 <tcp_listen_input+0x1d8>)
 80082e4:	6819      	ldr	r1, [r3, #0]
 80082e6:	4b68      	ldr	r3, [pc, #416]	@ (8008488 <tcp_listen_input+0x1dc>)
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	4b67      	ldr	r3, [pc, #412]	@ (800848c <tcp_listen_input+0x1e0>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082f2:	4b67      	ldr	r3, [pc, #412]	@ (8008490 <tcp_listen_input+0x1e4>)
 80082f4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082f6:	885b      	ldrh	r3, [r3, #2]
 80082f8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082fa:	4a65      	ldr	r2, [pc, #404]	@ (8008490 <tcp_listen_input+0x1e4>)
 80082fc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082fe:	8812      	ldrh	r2, [r2, #0]
 8008300:	b292      	uxth	r2, r2
 8008302:	9202      	str	r2, [sp, #8]
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	4b63      	ldr	r3, [pc, #396]	@ (8008494 <tcp_listen_input+0x1e8>)
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4b63      	ldr	r3, [pc, #396]	@ (8008498 <tcp_listen_input+0x1ec>)
 800830c:	4602      	mov	r2, r0
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f002 ff7a 	bl	800b208 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008314:	e0a9      	b.n	800846a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008316:	4b57      	ldr	r3, [pc, #348]	@ (8008474 <tcp_listen_input+0x1c8>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 80a3 	beq.w	800846a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	7d5b      	ldrb	r3, [r3, #21]
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff f927 	bl	800757c <tcp_alloc>
 800832e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d111      	bne.n	800835a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <tcp_listen_input+0xa8>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6910      	ldr	r0, [r2, #16]
 8008346:	f04f 32ff 	mov.w	r2, #4294967295
 800834a:	2100      	movs	r1, #0
 800834c:	4798      	blx	r3
 800834e:	4603      	mov	r3, r0
 8008350:	73bb      	strb	r3, [r7, #14]
      return;
 8008352:	e08b      	b.n	800846c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008354:	23f0      	movs	r3, #240	@ 0xf0
 8008356:	73bb      	strb	r3, [r7, #14]
      return;
 8008358:	e088      	b.n	800846c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800835a:	4b50      	ldr	r3, [pc, #320]	@ (800849c <tcp_listen_input+0x1f0>)
 800835c:	695a      	ldr	r2, [r3, #20]
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008362:	4b4e      	ldr	r3, [pc, #312]	@ (800849c <tcp_listen_input+0x1f0>)
 8008364:	691a      	ldr	r2, [r3, #16]
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	8ada      	ldrh	r2, [r3, #22]
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008372:	4b47      	ldr	r3, [pc, #284]	@ (8008490 <tcp_listen_input+0x1e4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	b29a      	uxth	r2, r3
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2203      	movs	r2, #3
 8008382:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008384:	4b41      	ldr	r3, [pc, #260]	@ (800848c <tcp_listen_input+0x1e0>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8008396:	6978      	ldr	r0, [r7, #20]
 8008398:	f7ff fa58 	bl	800784c <tcp_next_iss>
 800839c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80083b6:	4b35      	ldr	r3, [pc, #212]	@ (800848c <tcp_listen_input+0x1e0>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	1e5a      	subs	r2, r3, #1
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	7a5b      	ldrb	r3, [r3, #9]
 80083d2:	f003 030c 	and.w	r3, r3, #12
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	7a1a      	ldrb	r2, [r3, #8]
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80083e4:	4b2e      	ldr	r3, [pc, #184]	@ (80084a0 <tcp_listen_input+0x1f4>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	60da      	str	r2, [r3, #12]
 80083ec:	4a2c      	ldr	r2, [pc, #176]	@ (80084a0 <tcp_listen_input+0x1f4>)
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	f003 f8cb 	bl	800b58c <tcp_timer_needed>
 80083f6:	4b2b      	ldr	r3, [pc, #172]	@ (80084a4 <tcp_listen_input+0x1f8>)
 80083f8:	2201      	movs	r2, #1
 80083fa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80083fc:	6978      	ldr	r0, [r7, #20]
 80083fe:	f001 fd8b 	bl	8009f18 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008402:	4b23      	ldr	r3, [pc, #140]	@ (8008490 <tcp_listen_input+0x1e4>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	89db      	ldrh	r3, [r3, #14]
 8008408:	b29a      	uxth	r2, r3
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	3304      	adds	r3, #4
 8008424:	4618      	mov	r0, r3
 8008426:	f006 fddf 	bl	800efe8 <ip4_route>
 800842a:	4601      	mov	r1, r0
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	3304      	adds	r3, #4
 8008430:	461a      	mov	r2, r3
 8008432:	4620      	mov	r0, r4
 8008434:	f7ff fa30 	bl	8007898 <tcp_eff_send_mss_netif>
 8008438:	4603      	mov	r3, r0
 800843a:	461a      	mov	r2, r3
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008440:	2112      	movs	r1, #18
 8008442:	6978      	ldr	r0, [r7, #20]
 8008444:	f002 f83e 	bl	800a4c4 <tcp_enqueue_flags>
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800844c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008454:	2100      	movs	r1, #0
 8008456:	6978      	ldr	r0, [r7, #20]
 8008458:	f7fe f97c 	bl	8006754 <tcp_abandon>
      return;
 800845c:	e006      	b.n	800846c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800845e:	6978      	ldr	r0, [r7, #20]
 8008460:	f002 f91e 	bl	800a6a0 <tcp_output>
  return;
 8008464:	e001      	b.n	800846a <tcp_listen_input+0x1be>
    return;
 8008466:	bf00      	nop
 8008468:	e000      	b.n	800846c <tcp_listen_input+0x1c0>
  return;
 800846a:	bf00      	nop
}
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	bd90      	pop	{r4, r7, pc}
 8008472:	bf00      	nop
 8008474:	200082e4 	.word	0x200082e4
 8008478:	08012658 	.word	0x08012658
 800847c:	08012850 	.word	0x08012850
 8008480:	080126a4 	.word	0x080126a4
 8008484:	200082dc 	.word	0x200082dc
 8008488:	200082e2 	.word	0x200082e2
 800848c:	200082d8 	.word	0x200082d8
 8008490:	200082c8 	.word	0x200082c8
 8008494:	20004d20 	.word	0x20004d20
 8008498:	20004d24 	.word	0x20004d24
 800849c:	20004d10 	.word	0x20004d10
 80084a0:	200082ac 	.word	0x200082ac
 80084a4:	200082b4 	.word	0x200082b4

080084a8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af04      	add	r7, sp, #16
 80084ae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80084b0:	4b2f      	ldr	r3, [pc, #188]	@ (8008570 <tcp_timewait_input+0xc8>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d153      	bne.n	8008564 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d106      	bne.n	80084d0 <tcp_timewait_input+0x28>
 80084c2:	4b2c      	ldr	r3, [pc, #176]	@ (8008574 <tcp_timewait_input+0xcc>)
 80084c4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80084c8:	492b      	ldr	r1, [pc, #172]	@ (8008578 <tcp_timewait_input+0xd0>)
 80084ca:	482c      	ldr	r0, [pc, #176]	@ (800857c <tcp_timewait_input+0xd4>)
 80084cc:	f008 f896 	bl	80105fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80084d0:	4b27      	ldr	r3, [pc, #156]	@ (8008570 <tcp_timewait_input+0xc8>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d02a      	beq.n	8008532 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80084dc:	4b28      	ldr	r3, [pc, #160]	@ (8008580 <tcp_timewait_input+0xd8>)
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	db2d      	blt.n	8008546 <tcp_timewait_input+0x9e>
 80084ea:	4b25      	ldr	r3, [pc, #148]	@ (8008580 <tcp_timewait_input+0xd8>)
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80084f6:	440b      	add	r3, r1
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dc23      	bgt.n	8008546 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084fe:	4b21      	ldr	r3, [pc, #132]	@ (8008584 <tcp_timewait_input+0xdc>)
 8008500:	6819      	ldr	r1, [r3, #0]
 8008502:	4b21      	ldr	r3, [pc, #132]	@ (8008588 <tcp_timewait_input+0xe0>)
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	4b1d      	ldr	r3, [pc, #116]	@ (8008580 <tcp_timewait_input+0xd8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800850e:	4b1f      	ldr	r3, [pc, #124]	@ (800858c <tcp_timewait_input+0xe4>)
 8008510:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008512:	885b      	ldrh	r3, [r3, #2]
 8008514:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008516:	4a1d      	ldr	r2, [pc, #116]	@ (800858c <tcp_timewait_input+0xe4>)
 8008518:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800851a:	8812      	ldrh	r2, [r2, #0]
 800851c:	b292      	uxth	r2, r2
 800851e:	9202      	str	r2, [sp, #8]
 8008520:	9301      	str	r3, [sp, #4]
 8008522:	4b1b      	ldr	r3, [pc, #108]	@ (8008590 <tcp_timewait_input+0xe8>)
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	4b1b      	ldr	r3, [pc, #108]	@ (8008594 <tcp_timewait_input+0xec>)
 8008528:	4602      	mov	r2, r0
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f002 fe6c 	bl	800b208 <tcp_rst>
      return;
 8008530:	e01b      	b.n	800856a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008532:	4b0f      	ldr	r3, [pc, #60]	@ (8008570 <tcp_timewait_input+0xc8>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800853e:	4b16      	ldr	r3, [pc, #88]	@ (8008598 <tcp_timewait_input+0xf0>)
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008546:	4b10      	ldr	r3, [pc, #64]	@ (8008588 <tcp_timewait_input+0xe0>)
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	8b5b      	ldrh	r3, [r3, #26]
 8008552:	f043 0302 	orr.w	r3, r3, #2
 8008556:	b29a      	uxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f002 f89f 	bl	800a6a0 <tcp_output>
  }
  return;
 8008562:	e001      	b.n	8008568 <tcp_timewait_input+0xc0>
    return;
 8008564:	bf00      	nop
 8008566:	e000      	b.n	800856a <tcp_timewait_input+0xc2>
  return;
 8008568:	bf00      	nop
}
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	200082e4 	.word	0x200082e4
 8008574:	08012658 	.word	0x08012658
 8008578:	08012870 	.word	0x08012870
 800857c:	080126a4 	.word	0x080126a4
 8008580:	200082d8 	.word	0x200082d8
 8008584:	200082dc 	.word	0x200082dc
 8008588:	200082e2 	.word	0x200082e2
 800858c:	200082c8 	.word	0x200082c8
 8008590:	20004d20 	.word	0x20004d20
 8008594:	20004d24 	.word	0x20004d24
 8008598:	200082a0 	.word	0x200082a0

0800859c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800859c:	b590      	push	{r4, r7, lr}
 800859e:	b08d      	sub	sp, #52	@ 0x34
 80085a0:	af04      	add	r7, sp, #16
 80085a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <tcp_process+0x24>
 80085b2:	4b9d      	ldr	r3, [pc, #628]	@ (8008828 <tcp_process+0x28c>)
 80085b4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80085b8:	499c      	ldr	r1, [pc, #624]	@ (800882c <tcp_process+0x290>)
 80085ba:	489d      	ldr	r0, [pc, #628]	@ (8008830 <tcp_process+0x294>)
 80085bc:	f008 f81e 	bl	80105fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80085c0:	4b9c      	ldr	r3, [pc, #624]	@ (8008834 <tcp_process+0x298>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d04e      	beq.n	800866a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7d1b      	ldrb	r3, [r3, #20]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d108      	bne.n	80085e6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085d8:	4b97      	ldr	r3, [pc, #604]	@ (8008838 <tcp_process+0x29c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d123      	bne.n	8008628 <tcp_process+0x8c>
        acceptable = 1;
 80085e0:	2301      	movs	r3, #1
 80085e2:	76fb      	strb	r3, [r7, #27]
 80085e4:	e020      	b.n	8008628 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085ea:	4b94      	ldr	r3, [pc, #592]	@ (800883c <tcp_process+0x2a0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d102      	bne.n	80085f8 <tcp_process+0x5c>
        acceptable = 1;
 80085f2:	2301      	movs	r3, #1
 80085f4:	76fb      	strb	r3, [r7, #27]
 80085f6:	e017      	b.n	8008628 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80085f8:	4b90      	ldr	r3, [pc, #576]	@ (800883c <tcp_process+0x2a0>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	db10      	blt.n	8008628 <tcp_process+0x8c>
 8008606:	4b8d      	ldr	r3, [pc, #564]	@ (800883c <tcp_process+0x2a0>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008612:	440b      	add	r3, r1
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	dc06      	bgt.n	8008628 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	8b5b      	ldrh	r3, [r3, #26]
 800861e:	f043 0302 	orr.w	r3, r3, #2
 8008622:	b29a      	uxth	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008628:	7efb      	ldrb	r3, [r7, #27]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01b      	beq.n	8008666 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	7d1b      	ldrb	r3, [r3, #20]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <tcp_process+0xa8>
 8008636:	4b7c      	ldr	r3, [pc, #496]	@ (8008828 <tcp_process+0x28c>)
 8008638:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800863c:	4980      	ldr	r1, [pc, #512]	@ (8008840 <tcp_process+0x2a4>)
 800863e:	487c      	ldr	r0, [pc, #496]	@ (8008830 <tcp_process+0x294>)
 8008640:	f007 ffdc 	bl	80105fc <iprintf>
      recv_flags |= TF_RESET;
 8008644:	4b7f      	ldr	r3, [pc, #508]	@ (8008844 <tcp_process+0x2a8>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	f043 0308 	orr.w	r3, r3, #8
 800864c:	b2da      	uxtb	r2, r3
 800864e:	4b7d      	ldr	r3, [pc, #500]	@ (8008844 <tcp_process+0x2a8>)
 8008650:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	8b5b      	ldrh	r3, [r3, #26]
 8008656:	f023 0301 	bic.w	r3, r3, #1
 800865a:	b29a      	uxth	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008660:	f06f 030d 	mvn.w	r3, #13
 8008664:	e37a      	b.n	8008d5c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	e378      	b.n	8008d5c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800866a:	4b72      	ldr	r3, [pc, #456]	@ (8008834 <tcp_process+0x298>)
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d010      	beq.n	8008698 <tcp_process+0xfc>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7d1b      	ldrb	r3, [r3, #20]
 800867a:	2b02      	cmp	r3, #2
 800867c:	d00c      	beq.n	8008698 <tcp_process+0xfc>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	7d1b      	ldrb	r3, [r3, #20]
 8008682:	2b03      	cmp	r3, #3
 8008684:	d008      	beq.n	8008698 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	8b5b      	ldrh	r3, [r3, #26]
 800868a:	f043 0302 	orr.w	r3, r3, #2
 800868e:	b29a      	uxth	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	e361      	b.n	8008d5c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	8b5b      	ldrh	r3, [r3, #26]
 800869c:	f003 0310 	and.w	r3, r3, #16
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d103      	bne.n	80086ac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80086a4:	4b68      	ldr	r3, [pc, #416]	@ (8008848 <tcp_process+0x2ac>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 fc2b 	bl	8009f18 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	7d1b      	ldrb	r3, [r3, #20]
 80086c6:	3b02      	subs	r3, #2
 80086c8:	2b07      	cmp	r3, #7
 80086ca:	f200 8337 	bhi.w	8008d3c <tcp_process+0x7a0>
 80086ce:	a201      	add	r2, pc, #4	@ (adr r2, 80086d4 <tcp_process+0x138>)
 80086d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d4:	080086f5 	.word	0x080086f5
 80086d8:	08008925 	.word	0x08008925
 80086dc:	08008a9d 	.word	0x08008a9d
 80086e0:	08008ac7 	.word	0x08008ac7
 80086e4:	08008beb 	.word	0x08008beb
 80086e8:	08008a9d 	.word	0x08008a9d
 80086ec:	08008c77 	.word	0x08008c77
 80086f0:	08008d07 	.word	0x08008d07
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80086f4:	4b4f      	ldr	r3, [pc, #316]	@ (8008834 <tcp_process+0x298>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	f003 0310 	and.w	r3, r3, #16
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 80e4 	beq.w	80088ca <tcp_process+0x32e>
 8008702:	4b4c      	ldr	r3, [pc, #304]	@ (8008834 <tcp_process+0x298>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 80dd 	beq.w	80088ca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	4b48      	ldr	r3, [pc, #288]	@ (8008838 <tcp_process+0x29c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	f040 80d5 	bne.w	80088ca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008720:	4b46      	ldr	r3, [pc, #280]	@ (800883c <tcp_process+0x2a0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8008732:	4b41      	ldr	r3, [pc, #260]	@ (8008838 <tcp_process+0x29c>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800873a:	4b44      	ldr	r3, [pc, #272]	@ (800884c <tcp_process+0x2b0>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	89db      	ldrh	r3, [r3, #14]
 8008740:	b29a      	uxth	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008754:	4b39      	ldr	r3, [pc, #228]	@ (800883c <tcp_process+0x2a0>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	1e5a      	subs	r2, r3, #1
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2204      	movs	r2, #4
 8008762:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3304      	adds	r3, #4
 800876c:	4618      	mov	r0, r3
 800876e:	f006 fc3b 	bl	800efe8 <ip4_route>
 8008772:	4601      	mov	r1, r0
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3304      	adds	r3, #4
 8008778:	461a      	mov	r2, r3
 800877a:	4620      	mov	r0, r4
 800877c:	f7ff f88c 	bl	8007898 <tcp_eff_send_mss_netif>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800878c:	009a      	lsls	r2, r3, #2
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008798:	428b      	cmp	r3, r1
 800879a:	bf38      	it	cc
 800879c:	460b      	movcc	r3, r1
 800879e:	429a      	cmp	r2, r3
 80087a0:	d204      	bcs.n	80087ac <tcp_process+0x210>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	e00d      	b.n	80087c8 <tcp_process+0x22c>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d904      	bls.n	80087c4 <tcp_process+0x228>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	e001      	b.n	80087c8 <tcp_process+0x22c>
 80087c4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <tcp_process+0x24a>
 80087d8:	4b13      	ldr	r3, [pc, #76]	@ (8008828 <tcp_process+0x28c>)
 80087da:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80087de:	491c      	ldr	r1, [pc, #112]	@ (8008850 <tcp_process+0x2b4>)
 80087e0:	4813      	ldr	r0, [pc, #76]	@ (8008830 <tcp_process+0x294>)
 80087e2:	f007 ff0b 	bl	80105fc <iprintf>
        --pcb->snd_queuelen;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80087ec:	3b01      	subs	r3, #1
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087fa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d12a      	bne.n	8008858 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008806:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <tcp_process+0x280>
 800880e:	4b06      	ldr	r3, [pc, #24]	@ (8008828 <tcp_process+0x28c>)
 8008810:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8008814:	490f      	ldr	r1, [pc, #60]	@ (8008854 <tcp_process+0x2b8>)
 8008816:	4806      	ldr	r0, [pc, #24]	@ (8008830 <tcp_process+0x294>)
 8008818:	f007 fef0 	bl	80105fc <iprintf>
          pcb->unsent = rseg->next;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008824:	e01c      	b.n	8008860 <tcp_process+0x2c4>
 8008826:	bf00      	nop
 8008828:	08012658 	.word	0x08012658
 800882c:	08012890 	.word	0x08012890
 8008830:	080126a4 	.word	0x080126a4
 8008834:	200082e4 	.word	0x200082e4
 8008838:	200082dc 	.word	0x200082dc
 800883c:	200082d8 	.word	0x200082d8
 8008840:	080128ac 	.word	0x080128ac
 8008844:	200082e5 	.word	0x200082e5
 8008848:	200082a0 	.word	0x200082a0
 800884c:	200082c8 	.word	0x200082c8
 8008850:	080128cc 	.word	0x080128cc
 8008854:	080128e4 	.word	0x080128e4
        } else {
          pcb->unacked = rseg->next;
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8008860:	69f8      	ldr	r0, [r7, #28]
 8008862:	f7fe fd22 	bl	80072aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800886a:	2b00      	cmp	r3, #0
 800886c:	d104      	bne.n	8008878 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008874:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008876:	e006      	b.n	8008886 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00a      	beq.n	80088a6 <tcp_process+0x30a>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6910      	ldr	r0, [r2, #16]
 800889a:	2200      	movs	r2, #0
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	4798      	blx	r3
 80088a0:	4603      	mov	r3, r0
 80088a2:	76bb      	strb	r3, [r7, #26]
 80088a4:	e001      	b.n	80088aa <tcp_process+0x30e>
 80088a6:	2300      	movs	r3, #0
 80088a8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80088aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80088ae:	f113 0f0d 	cmn.w	r3, #13
 80088b2:	d102      	bne.n	80088ba <tcp_process+0x31e>
          return ERR_ABRT;
 80088b4:	f06f 030c 	mvn.w	r3, #12
 80088b8:	e250      	b.n	8008d5c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	8b5b      	ldrh	r3, [r3, #26]
 80088be:	f043 0302 	orr.w	r3, r3, #2
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80088c8:	e23a      	b.n	8008d40 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80088ca:	4b98      	ldr	r3, [pc, #608]	@ (8008b2c <tcp_process+0x590>)
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	f003 0310 	and.w	r3, r3, #16
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 8234 	beq.w	8008d40 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088d8:	4b95      	ldr	r3, [pc, #596]	@ (8008b30 <tcp_process+0x594>)
 80088da:	6819      	ldr	r1, [r3, #0]
 80088dc:	4b95      	ldr	r3, [pc, #596]	@ (8008b34 <tcp_process+0x598>)
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	4b95      	ldr	r3, [pc, #596]	@ (8008b38 <tcp_process+0x59c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088e8:	4b94      	ldr	r3, [pc, #592]	@ (8008b3c <tcp_process+0x5a0>)
 80088ea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088ec:	885b      	ldrh	r3, [r3, #2]
 80088ee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088f0:	4a92      	ldr	r2, [pc, #584]	@ (8008b3c <tcp_process+0x5a0>)
 80088f2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088f4:	8812      	ldrh	r2, [r2, #0]
 80088f6:	b292      	uxth	r2, r2
 80088f8:	9202      	str	r2, [sp, #8]
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	4b90      	ldr	r3, [pc, #576]	@ (8008b40 <tcp_process+0x5a4>)
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	4b90      	ldr	r3, [pc, #576]	@ (8008b44 <tcp_process+0x5a8>)
 8008902:	4602      	mov	r2, r0
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f002 fc7f 	bl	800b208 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008910:	2b05      	cmp	r3, #5
 8008912:	f200 8215 	bhi.w	8008d40 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f002 fa4b 	bl	800adb8 <tcp_rexmit_rto>
      break;
 8008922:	e20d      	b.n	8008d40 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008924:	4b81      	ldr	r3, [pc, #516]	@ (8008b2c <tcp_process+0x590>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 80a1 	beq.w	8008a74 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008932:	4b7f      	ldr	r3, [pc, #508]	@ (8008b30 <tcp_process+0x594>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	3b01      	subs	r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	db7e      	blt.n	8008a40 <tcp_process+0x4a4>
 8008942:	4b7b      	ldr	r3, [pc, #492]	@ (8008b30 <tcp_process+0x594>)
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	dc77      	bgt.n	8008a40 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2204      	movs	r2, #4
 8008954:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d102      	bne.n	8008964 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800895e:	23fa      	movs	r3, #250	@ 0xfa
 8008960:	76bb      	strb	r3, [r7, #26]
 8008962:	e01d      	b.n	80089a0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <tcp_process+0x3e0>
 800896e:	4b76      	ldr	r3, [pc, #472]	@ (8008b48 <tcp_process+0x5ac>)
 8008970:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8008974:	4975      	ldr	r1, [pc, #468]	@ (8008b4c <tcp_process+0x5b0>)
 8008976:	4876      	ldr	r0, [pc, #472]	@ (8008b50 <tcp_process+0x5b4>)
 8008978:	f007 fe40 	bl	80105fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <tcp_process+0x400>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	6910      	ldr	r0, [r2, #16]
 8008990:	2200      	movs	r2, #0
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	4798      	blx	r3
 8008996:	4603      	mov	r3, r0
 8008998:	76bb      	strb	r3, [r7, #26]
 800899a:	e001      	b.n	80089a0 <tcp_process+0x404>
 800899c:	23f0      	movs	r3, #240	@ 0xf0
 800899e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80089a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00a      	beq.n	80089be <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80089a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80089ac:	f113 0f0d 	cmn.w	r3, #13
 80089b0:	d002      	beq.n	80089b8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7fd ff8c 	bl	80068d0 <tcp_abort>
            }
            return ERR_ABRT;
 80089b8:	f06f 030c 	mvn.w	r3, #12
 80089bc:	e1ce      	b.n	8008d5c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fae0 	bl	8008f84 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80089c4:	4b63      	ldr	r3, [pc, #396]	@ (8008b54 <tcp_process+0x5b8>)
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <tcp_process+0x43c>
            recv_acked--;
 80089cc:	4b61      	ldr	r3, [pc, #388]	@ (8008b54 <tcp_process+0x5b8>)
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	4b5f      	ldr	r3, [pc, #380]	@ (8008b54 <tcp_process+0x5b8>)
 80089d6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089dc:	009a      	lsls	r2, r3, #2
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80089e8:	428b      	cmp	r3, r1
 80089ea:	bf38      	it	cc
 80089ec:	460b      	movcc	r3, r1
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d204      	bcs.n	80089fc <tcp_process+0x460>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	e00d      	b.n	8008a18 <tcp_process+0x47c>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d904      	bls.n	8008a14 <tcp_process+0x478>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	e001      	b.n	8008a18 <tcp_process+0x47c>
 8008a14:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8008b58 <tcp_process+0x5bc>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d037      	beq.n	8008a9a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	8b5b      	ldrh	r3, [r3, #26]
 8008a2e:	f043 0302 	orr.w	r3, r3, #2
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2207      	movs	r2, #7
 8008a3c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008a3e:	e02c      	b.n	8008a9a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a40:	4b3b      	ldr	r3, [pc, #236]	@ (8008b30 <tcp_process+0x594>)
 8008a42:	6819      	ldr	r1, [r3, #0]
 8008a44:	4b3b      	ldr	r3, [pc, #236]	@ (8008b34 <tcp_process+0x598>)
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8008b38 <tcp_process+0x59c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a50:	4b3a      	ldr	r3, [pc, #232]	@ (8008b3c <tcp_process+0x5a0>)
 8008a52:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a54:	885b      	ldrh	r3, [r3, #2]
 8008a56:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a58:	4a38      	ldr	r2, [pc, #224]	@ (8008b3c <tcp_process+0x5a0>)
 8008a5a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a5c:	8812      	ldrh	r2, [r2, #0]
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	9202      	str	r2, [sp, #8]
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	4b36      	ldr	r3, [pc, #216]	@ (8008b40 <tcp_process+0x5a4>)
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4b36      	ldr	r3, [pc, #216]	@ (8008b44 <tcp_process+0x5a8>)
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f002 fbcb 	bl	800b208 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008a72:	e167      	b.n	8008d44 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008a74:	4b2d      	ldr	r3, [pc, #180]	@ (8008b2c <tcp_process+0x590>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 8161 	beq.w	8008d44 <tcp_process+0x7a8>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a86:	1e5a      	subs	r2, r3, #1
 8008a88:	4b2b      	ldr	r3, [pc, #172]	@ (8008b38 <tcp_process+0x59c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	f040 8159 	bne.w	8008d44 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f002 f9b2 	bl	800adfc <tcp_rexmit>
      break;
 8008a98:	e154      	b.n	8008d44 <tcp_process+0x7a8>
 8008a9a:	e153      	b.n	8008d44 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fa71 	bl	8008f84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8008b58 <tcp_process+0x5bc>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 814c 	beq.w	8008d48 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	8b5b      	ldrh	r3, [r3, #26]
 8008ab4:	f043 0302 	orr.w	r3, r3, #2
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2207      	movs	r2, #7
 8008ac2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ac4:	e140      	b.n	8008d48 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa5c 	bl	8008f84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008acc:	4b22      	ldr	r3, [pc, #136]	@ (8008b58 <tcp_process+0x5bc>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	f003 0320 	and.w	r3, r3, #32
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d071      	beq.n	8008bbc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008ad8:	4b14      	ldr	r3, [pc, #80]	@ (8008b2c <tcp_process+0x590>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	f003 0310 	and.w	r3, r3, #16
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d060      	beq.n	8008ba6 <tcp_process+0x60a>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ae8:	4b11      	ldr	r3, [pc, #68]	@ (8008b30 <tcp_process+0x594>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d15a      	bne.n	8008ba6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d156      	bne.n	8008ba6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	8b5b      	ldrh	r3, [r3, #26]
 8008afc:	f043 0302 	orr.w	r3, r3, #2
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7fe fdbc 	bl	8007684 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008b0c:	4b13      	ldr	r3, [pc, #76]	@ (8008b5c <tcp_process+0x5c0>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d105      	bne.n	8008b22 <tcp_process+0x586>
 8008b16:	4b11      	ldr	r3, [pc, #68]	@ (8008b5c <tcp_process+0x5c0>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8008b5c <tcp_process+0x5c0>)
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	e02e      	b.n	8008b80 <tcp_process+0x5e4>
 8008b22:	4b0e      	ldr	r3, [pc, #56]	@ (8008b5c <tcp_process+0x5c0>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	e027      	b.n	8008b7a <tcp_process+0x5de>
 8008b2a:	bf00      	nop
 8008b2c:	200082e4 	.word	0x200082e4
 8008b30:	200082dc 	.word	0x200082dc
 8008b34:	200082e2 	.word	0x200082e2
 8008b38:	200082d8 	.word	0x200082d8
 8008b3c:	200082c8 	.word	0x200082c8
 8008b40:	20004d20 	.word	0x20004d20
 8008b44:	20004d24 	.word	0x20004d24
 8008b48:	08012658 	.word	0x08012658
 8008b4c:	080128f8 	.word	0x080128f8
 8008b50:	080126a4 	.word	0x080126a4
 8008b54:	200082e0 	.word	0x200082e0
 8008b58:	200082e5 	.word	0x200082e5
 8008b5c:	200082ac 	.word	0x200082ac
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d104      	bne.n	8008b74 <tcp_process+0x5d8>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	60da      	str	r2, [r3, #12]
 8008b72:	e005      	b.n	8008b80 <tcp_process+0x5e4>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1ef      	bne.n	8008b60 <tcp_process+0x5c4>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	60da      	str	r2, [r3, #12]
 8008b86:	4b77      	ldr	r3, [pc, #476]	@ (8008d64 <tcp_process+0x7c8>)
 8008b88:	2201      	movs	r2, #1
 8008b8a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	220a      	movs	r2, #10
 8008b90:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008b92:	4b75      	ldr	r3, [pc, #468]	@ (8008d68 <tcp_process+0x7cc>)
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	60da      	str	r2, [r3, #12]
 8008b9a:	4a73      	ldr	r2, [pc, #460]	@ (8008d68 <tcp_process+0x7cc>)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	f002 fcf4 	bl	800b58c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008ba4:	e0d2      	b.n	8008d4c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	8b5b      	ldrh	r3, [r3, #26]
 8008baa:	f043 0302 	orr.w	r3, r3, #2
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2208      	movs	r2, #8
 8008bb8:	751a      	strb	r2, [r3, #20]
      break;
 8008bba:	e0c7      	b.n	8008d4c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008bbc:	4b6b      	ldr	r3, [pc, #428]	@ (8008d6c <tcp_process+0x7d0>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	f003 0310 	and.w	r3, r3, #16
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80c1 	beq.w	8008d4c <tcp_process+0x7b0>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bce:	4b68      	ldr	r3, [pc, #416]	@ (8008d70 <tcp_process+0x7d4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	f040 80ba 	bne.w	8008d4c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f040 80b5 	bne.w	8008d4c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2206      	movs	r2, #6
 8008be6:	751a      	strb	r2, [r3, #20]
      break;
 8008be8:	e0b0      	b.n	8008d4c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f9ca 	bl	8008f84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008bf0:	4b60      	ldr	r3, [pc, #384]	@ (8008d74 <tcp_process+0x7d8>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	f003 0320 	and.w	r3, r3, #32
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 80a9 	beq.w	8008d50 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	8b5b      	ldrh	r3, [r3, #26]
 8008c02:	f043 0302 	orr.w	r3, r3, #2
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7fe fd39 	bl	8007684 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008c12:	4b59      	ldr	r3, [pc, #356]	@ (8008d78 <tcp_process+0x7dc>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d105      	bne.n	8008c28 <tcp_process+0x68c>
 8008c1c:	4b56      	ldr	r3, [pc, #344]	@ (8008d78 <tcp_process+0x7dc>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	4a55      	ldr	r2, [pc, #340]	@ (8008d78 <tcp_process+0x7dc>)
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	e013      	b.n	8008c50 <tcp_process+0x6b4>
 8008c28:	4b53      	ldr	r3, [pc, #332]	@ (8008d78 <tcp_process+0x7dc>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	613b      	str	r3, [r7, #16]
 8008c2e:	e00c      	b.n	8008c4a <tcp_process+0x6ae>
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d104      	bne.n	8008c44 <tcp_process+0x6a8>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	60da      	str	r2, [r3, #12]
 8008c42:	e005      	b.n	8008c50 <tcp_process+0x6b4>
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	613b      	str	r3, [r7, #16]
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1ef      	bne.n	8008c30 <tcp_process+0x694>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	60da      	str	r2, [r3, #12]
 8008c56:	4b43      	ldr	r3, [pc, #268]	@ (8008d64 <tcp_process+0x7c8>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	220a      	movs	r2, #10
 8008c60:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008c62:	4b41      	ldr	r3, [pc, #260]	@ (8008d68 <tcp_process+0x7cc>)
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	60da      	str	r2, [r3, #12]
 8008c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8008d68 <tcp_process+0x7cc>)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	f002 fc8c 	bl	800b58c <tcp_timer_needed>
      }
      break;
 8008c74:	e06c      	b.n	8008d50 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f984 	bl	8008f84 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8008d6c <tcp_process+0x7d0>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	f003 0310 	and.w	r3, r3, #16
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d065      	beq.n	8008d54 <tcp_process+0x7b8>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c8c:	4b38      	ldr	r3, [pc, #224]	@ (8008d70 <tcp_process+0x7d4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d15f      	bne.n	8008d54 <tcp_process+0x7b8>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d15b      	bne.n	8008d54 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7fe fcf1 	bl	8007684 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008ca2:	4b35      	ldr	r3, [pc, #212]	@ (8008d78 <tcp_process+0x7dc>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d105      	bne.n	8008cb8 <tcp_process+0x71c>
 8008cac:	4b32      	ldr	r3, [pc, #200]	@ (8008d78 <tcp_process+0x7dc>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	4a31      	ldr	r2, [pc, #196]	@ (8008d78 <tcp_process+0x7dc>)
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	e013      	b.n	8008ce0 <tcp_process+0x744>
 8008cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8008d78 <tcp_process+0x7dc>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	60fb      	str	r3, [r7, #12]
 8008cbe:	e00c      	b.n	8008cda <tcp_process+0x73e>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d104      	bne.n	8008cd4 <tcp_process+0x738>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	60da      	str	r2, [r3, #12]
 8008cd2:	e005      	b.n	8008ce0 <tcp_process+0x744>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1ef      	bne.n	8008cc0 <tcp_process+0x724>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	60da      	str	r2, [r3, #12]
 8008ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8008d64 <tcp_process+0x7c8>)
 8008ce8:	2201      	movs	r2, #1
 8008cea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	220a      	movs	r2, #10
 8008cf0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8008d68 <tcp_process+0x7cc>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60da      	str	r2, [r3, #12]
 8008cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8008d68 <tcp_process+0x7cc>)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	f002 fc44 	bl	800b58c <tcp_timer_needed>
      }
      break;
 8008d04:	e026      	b.n	8008d54 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f93c 	bl	8008f84 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008d0c:	4b17      	ldr	r3, [pc, #92]	@ (8008d6c <tcp_process+0x7d0>)
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01f      	beq.n	8008d58 <tcp_process+0x7bc>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d1c:	4b14      	ldr	r3, [pc, #80]	@ (8008d70 <tcp_process+0x7d4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d119      	bne.n	8008d58 <tcp_process+0x7bc>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d115      	bne.n	8008d58 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008d2c:	4b11      	ldr	r3, [pc, #68]	@ (8008d74 <tcp_process+0x7d8>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	f043 0310 	orr.w	r3, r3, #16
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	4b0f      	ldr	r3, [pc, #60]	@ (8008d74 <tcp_process+0x7d8>)
 8008d38:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008d3a:	e00d      	b.n	8008d58 <tcp_process+0x7bc>
    default:
      break;
 8008d3c:	bf00      	nop
 8008d3e:	e00c      	b.n	8008d5a <tcp_process+0x7be>
      break;
 8008d40:	bf00      	nop
 8008d42:	e00a      	b.n	8008d5a <tcp_process+0x7be>
      break;
 8008d44:	bf00      	nop
 8008d46:	e008      	b.n	8008d5a <tcp_process+0x7be>
      break;
 8008d48:	bf00      	nop
 8008d4a:	e006      	b.n	8008d5a <tcp_process+0x7be>
      break;
 8008d4c:	bf00      	nop
 8008d4e:	e004      	b.n	8008d5a <tcp_process+0x7be>
      break;
 8008d50:	bf00      	nop
 8008d52:	e002      	b.n	8008d5a <tcp_process+0x7be>
      break;
 8008d54:	bf00      	nop
 8008d56:	e000      	b.n	8008d5a <tcp_process+0x7be>
      break;
 8008d58:	bf00      	nop
  }
  return ERR_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3724      	adds	r7, #36	@ 0x24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd90      	pop	{r4, r7, pc}
 8008d64:	200082b4 	.word	0x200082b4
 8008d68:	200082b0 	.word	0x200082b0
 8008d6c:	200082e4 	.word	0x200082e4
 8008d70:	200082dc 	.word	0x200082dc
 8008d74:	200082e5 	.word	0x200082e5
 8008d78:	200082ac 	.word	0x200082ac

08008d7c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008d7c:	b590      	push	{r4, r7, lr}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d106      	bne.n	8008d9a <tcp_oos_insert_segment+0x1e>
 8008d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8008e7c <tcp_oos_insert_segment+0x100>)
 8008d8e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8008d92:	493b      	ldr	r1, [pc, #236]	@ (8008e80 <tcp_oos_insert_segment+0x104>)
 8008d94:	483b      	ldr	r0, [pc, #236]	@ (8008e84 <tcp_oos_insert_segment+0x108>)
 8008d96:	f007 fc31 	bl	80105fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	899b      	ldrh	r3, [r3, #12]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fb fcb2 	bl	800470c <lwip_htons>
 8008da8:	4603      	mov	r3, r0
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d028      	beq.n	8008e06 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008db4:	6838      	ldr	r0, [r7, #0]
 8008db6:	f7fe fa63 	bl	8007280 <tcp_segs_free>
    next = NULL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	603b      	str	r3, [r7, #0]
 8008dbe:	e056      	b.n	8008e6e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	899b      	ldrh	r3, [r3, #12]
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fb fc9f 	bl	800470c <lwip_htons>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00d      	beq.n	8008df6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	899b      	ldrh	r3, [r3, #12]
 8008de0:	b29c      	uxth	r4, r3
 8008de2:	2001      	movs	r0, #1
 8008de4:	f7fb fc92 	bl	800470c <lwip_htons>
 8008de8:	4603      	mov	r3, r0
 8008dea:	461a      	mov	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	4322      	orrs	r2, r4
 8008df2:	b292      	uxth	r2, r2
 8008df4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7fe fa52 	bl	80072aa <tcp_seg_free>
    while (next &&
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00e      	beq.n	8008e2a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	891b      	ldrh	r3, [r3, #8]
 8008e10:	461a      	mov	r2, r3
 8008e12:	4b1d      	ldr	r3, [pc, #116]	@ (8008e88 <tcp_oos_insert_segment+0x10c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	441a      	add	r2, r3
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	8909      	ldrh	r1, [r1, #8]
 8008e22:	440b      	add	r3, r1
 8008e24:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	daca      	bge.n	8008dc0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01e      	beq.n	8008e6e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	891b      	ldrh	r3, [r3, #8]
 8008e34:	461a      	mov	r2, r3
 8008e36:	4b14      	ldr	r3, [pc, #80]	@ (8008e88 <tcp_oos_insert_segment+0x10c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	441a      	add	r2, r3
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	dd12      	ble.n	8008e6e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	4b0d      	ldr	r3, [pc, #52]	@ (8008e88 <tcp_oos_insert_segment+0x10c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	891b      	ldrh	r3, [r3, #8]
 8008e66:	4619      	mov	r1, r3
 8008e68:	4610      	mov	r0, r2
 8008e6a:	f7fc fe13 	bl	8005a94 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	601a      	str	r2, [r3, #0]
}
 8008e74:	bf00      	nop
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd90      	pop	{r4, r7, pc}
 8008e7c:	08012658 	.word	0x08012658
 8008e80:	08012918 	.word	0x08012918
 8008e84:	080126a4 	.word	0x080126a4
 8008e88:	200082d8 	.word	0x200082d8

08008e8c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008e8c:	b5b0      	push	{r4, r5, r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008e9a:	e03e      	b.n	8008f1a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fd f800 	bl	8005eb0 <pbuf_clen>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008eba:	8a7a      	ldrh	r2, [r7, #18]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d906      	bls.n	8008ece <tcp_free_acked_segments+0x42>
 8008ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8008f6c <tcp_free_acked_segments+0xe0>)
 8008ec2:	f240 4257 	movw	r2, #1111	@ 0x457
 8008ec6:	492a      	ldr	r1, [pc, #168]	@ (8008f70 <tcp_free_acked_segments+0xe4>)
 8008ec8:	482a      	ldr	r0, [pc, #168]	@ (8008f74 <tcp_free_acked_segments+0xe8>)
 8008eca:	f007 fb97 	bl	80105fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8008ed4:	8a7b      	ldrh	r3, [r7, #18]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	891a      	ldrh	r2, [r3, #8]
 8008ee4:	4b24      	ldr	r3, [pc, #144]	@ (8008f78 <tcp_free_acked_segments+0xec>)
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	4413      	add	r3, r2
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	4b22      	ldr	r3, [pc, #136]	@ (8008f78 <tcp_free_acked_segments+0xec>)
 8008eee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008ef0:	6978      	ldr	r0, [r7, #20]
 8008ef2:	f7fe f9da 	bl	80072aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00c      	beq.n	8008f1a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d109      	bne.n	8008f1a <tcp_free_acked_segments+0x8e>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d106      	bne.n	8008f1a <tcp_free_acked_segments+0x8e>
 8008f0c:	4b17      	ldr	r3, [pc, #92]	@ (8008f6c <tcp_free_acked_segments+0xe0>)
 8008f0e:	f240 4261 	movw	r2, #1121	@ 0x461
 8008f12:	491a      	ldr	r1, [pc, #104]	@ (8008f7c <tcp_free_acked_segments+0xf0>)
 8008f14:	4817      	ldr	r0, [pc, #92]	@ (8008f74 <tcp_free_acked_segments+0xe8>)
 8008f16:	f007 fb71 	bl	80105fc <iprintf>
  while (seg_list != NULL &&
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d020      	beq.n	8008f62 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fb fc06 	bl	8004738 <lwip_htonl>
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	891b      	ldrh	r3, [r3, #8]
 8008f32:	461d      	mov	r5, r3
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	899b      	ldrh	r3, [r3, #12]
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fb fbe5 	bl	800470c <lwip_htons>
 8008f42:	4603      	mov	r3, r0
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	f003 0303 	and.w	r3, r3, #3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <tcp_free_acked_segments+0xc6>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e000      	b.n	8008f54 <tcp_free_acked_segments+0xc8>
 8008f52:	2300      	movs	r3, #0
 8008f54:	442b      	add	r3, r5
 8008f56:	18e2      	adds	r2, r4, r3
 8008f58:	4b09      	ldr	r3, [pc, #36]	@ (8008f80 <tcp_free_acked_segments+0xf4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	dd9c      	ble.n	8008e9c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008f62:	68bb      	ldr	r3, [r7, #8]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8008f6c:	08012658 	.word	0x08012658
 8008f70:	08012940 	.word	0x08012940
 8008f74:	080126a4 	.word	0x080126a4
 8008f78:	200082e0 	.word	0x200082e0
 8008f7c:	08012968 	.word	0x08012968
 8008f80:	200082dc 	.word	0x200082dc

08008f84 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008f84:	b5b0      	push	{r4, r5, r7, lr}
 8008f86:	b094      	sub	sp, #80	@ 0x50
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <tcp_receive+0x20>
 8008f96:	4b91      	ldr	r3, [pc, #580]	@ (80091dc <tcp_receive+0x258>)
 8008f98:	f240 427b 	movw	r2, #1147	@ 0x47b
 8008f9c:	4990      	ldr	r1, [pc, #576]	@ (80091e0 <tcp_receive+0x25c>)
 8008f9e:	4891      	ldr	r0, [pc, #580]	@ (80091e4 <tcp_receive+0x260>)
 8008fa0:	f007 fb2c 	bl	80105fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	7d1b      	ldrb	r3, [r3, #20]
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d806      	bhi.n	8008fba <tcp_receive+0x36>
 8008fac:	4b8b      	ldr	r3, [pc, #556]	@ (80091dc <tcp_receive+0x258>)
 8008fae:	f240 427c 	movw	r2, #1148	@ 0x47c
 8008fb2:	498d      	ldr	r1, [pc, #564]	@ (80091e8 <tcp_receive+0x264>)
 8008fb4:	488b      	ldr	r0, [pc, #556]	@ (80091e4 <tcp_receive+0x260>)
 8008fb6:	f007 fb21 	bl	80105fc <iprintf>

  if (flags & TCP_ACK) {
 8008fba:	4b8c      	ldr	r3, [pc, #560]	@ (80091ec <tcp_receive+0x268>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	f003 0310 	and.w	r3, r3, #16
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 8264 	beq.w	8009490 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008fce:	461a      	mov	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fd4:	4413      	add	r3, r2
 8008fd6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fdc:	4b84      	ldr	r3, [pc, #528]	@ (80091f0 <tcp_receive+0x26c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	db1b      	blt.n	800901e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fea:	4b81      	ldr	r3, [pc, #516]	@ (80091f0 <tcp_receive+0x26c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d106      	bne.n	8009000 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80091f4 <tcp_receive+0x270>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	db0e      	blt.n	800901e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009004:	4b7b      	ldr	r3, [pc, #492]	@ (80091f4 <tcp_receive+0x270>)
 8009006:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009008:	429a      	cmp	r2, r3
 800900a:	d125      	bne.n	8009058 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800900c:	4b7a      	ldr	r3, [pc, #488]	@ (80091f8 <tcp_receive+0x274>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	89db      	ldrh	r3, [r3, #14]
 8009012:	b29a      	uxth	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800901a:	429a      	cmp	r2, r3
 800901c:	d91c      	bls.n	8009058 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800901e:	4b76      	ldr	r3, [pc, #472]	@ (80091f8 <tcp_receive+0x274>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	89db      	ldrh	r3, [r3, #14]
 8009024:	b29a      	uxth	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009038:	429a      	cmp	r2, r3
 800903a:	d205      	bcs.n	8009048 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009048:	4b69      	ldr	r3, [pc, #420]	@ (80091f0 <tcp_receive+0x26c>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8009050:	4b68      	ldr	r3, [pc, #416]	@ (80091f4 <tcp_receive+0x270>)
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009058:	4b66      	ldr	r3, [pc, #408]	@ (80091f4 <tcp_receive+0x270>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	dc58      	bgt.n	8009118 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009066:	4b65      	ldr	r3, [pc, #404]	@ (80091fc <tcp_receive+0x278>)
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d14b      	bne.n	8009106 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009078:	4413      	add	r3, r2
 800907a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800907c:	429a      	cmp	r2, r3
 800907e:	d142      	bne.n	8009106 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009086:	2b00      	cmp	r3, #0
 8009088:	db3d      	blt.n	8009106 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800908e:	4b59      	ldr	r3, [pc, #356]	@ (80091f4 <tcp_receive+0x270>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	429a      	cmp	r2, r3
 8009094:	d137      	bne.n	8009106 <tcp_receive+0x182>
              found_dupack = 1;
 8009096:	2301      	movs	r3, #1
 8009098:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80090a0:	2bff      	cmp	r3, #255	@ 0xff
 80090a2:	d007      	beq.n	80090b4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80090aa:	3301      	adds	r3, #1
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d91b      	bls.n	80090f6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090c8:	4413      	add	r3, r2
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d30a      	bcc.n	80090ec <tcp_receive+0x168>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090e0:	4413      	add	r3, r2
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80090ea:	e004      	b.n	80090f6 <tcp_receive+0x172>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80090f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d902      	bls.n	8009106 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 fee7 	bl	800aed4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009108:	2b00      	cmp	r3, #0
 800910a:	f040 8161 	bne.w	80093d0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009116:	e15b      	b.n	80093d0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009118:	4b36      	ldr	r3, [pc, #216]	@ (80091f4 <tcp_receive+0x270>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	3b01      	subs	r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	f2c0 814e 	blt.w	80093c6 <tcp_receive+0x442>
 800912a:	4b32      	ldr	r3, [pc, #200]	@ (80091f4 <tcp_receive+0x270>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	2b00      	cmp	r3, #0
 8009136:	f300 8146 	bgt.w	80093c6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	8b5b      	ldrh	r3, [r3, #26]
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	d010      	beq.n	8009168 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	8b5b      	ldrh	r3, [r3, #26]
 800914a:	f023 0304 	bic.w	r3, r3, #4
 800914e:	b29a      	uxth	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009176:	10db      	asrs	r3, r3, #3
 8009178:	b21b      	sxth	r3, r3
 800917a:	b29a      	uxth	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009182:	b29b      	uxth	r3, r3
 8009184:	4413      	add	r3, r2
 8009186:	b29b      	uxth	r3, r3
 8009188:	b21a      	sxth	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009190:	4b18      	ldr	r3, [pc, #96]	@ (80091f4 <tcp_receive+0x270>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	b29a      	uxth	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800919a:	b29b      	uxth	r3, r3
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80091a8:	4b12      	ldr	r3, [pc, #72]	@ (80091f4 <tcp_receive+0x270>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	7d1b      	ldrb	r3, [r3, #20]
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	f240 8097 	bls.w	80092e8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d245      	bcs.n	8009256 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	8b5b      	ldrh	r3, [r3, #26]
 80091ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d014      	beq.n	8009200 <tcp_receive+0x27c>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e013      	b.n	8009202 <tcp_receive+0x27e>
 80091da:	bf00      	nop
 80091dc:	08012658 	.word	0x08012658
 80091e0:	08012988 	.word	0x08012988
 80091e4:	080126a4 	.word	0x080126a4
 80091e8:	080129a4 	.word	0x080129a4
 80091ec:	200082e4 	.word	0x200082e4
 80091f0:	200082d8 	.word	0x200082d8
 80091f4:	200082dc 	.word	0x200082dc
 80091f8:	200082c8 	.word	0x200082c8
 80091fc:	200082e2 	.word	0x200082e2
 8009200:	2302      	movs	r3, #2
 8009202:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009206:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800920a:	b29a      	uxth	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009210:	fb12 f303 	smulbb	r3, r2, r3
 8009214:	b29b      	uxth	r3, r3
 8009216:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009218:	4293      	cmp	r3, r2
 800921a:	bf28      	it	cs
 800921c:	4613      	movcs	r3, r2
 800921e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009226:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009228:	4413      	add	r3, r2
 800922a:	b29a      	uxth	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009232:	429a      	cmp	r2, r3
 8009234:	d309      	bcc.n	800924a <tcp_receive+0x2c6>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800923c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800923e:	4413      	add	r3, r2
 8009240:	b29a      	uxth	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009248:	e04e      	b.n	80092e8 <tcp_receive+0x364>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009250:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009254:	e048      	b.n	80092e8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800925c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800925e:	4413      	add	r3, r2
 8009260:	b29a      	uxth	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009268:	429a      	cmp	r2, r3
 800926a:	d309      	bcc.n	8009280 <tcp_receive+0x2fc>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009272:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009274:	4413      	add	r3, r2
 8009276:	b29a      	uxth	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800927e:	e004      	b.n	800928a <tcp_receive+0x306>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009286:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009296:	429a      	cmp	r2, r3
 8009298:	d326      	bcc.n	80092e8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092ba:	4413      	add	r3, r2
 80092bc:	b29a      	uxth	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d30a      	bcc.n	80092de <tcp_receive+0x35a>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092d2:	4413      	add	r3, r2
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80092dc:	e004      	b.n	80092e8 <tcp_receive+0x364>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092f0:	4a98      	ldr	r2, [pc, #608]	@ (8009554 <tcp_receive+0x5d0>)
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff fdca 	bl	8008e8c <tcp_free_acked_segments>
 80092f8:	4602      	mov	r2, r0
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009306:	4a94      	ldr	r2, [pc, #592]	@ (8009558 <tcp_receive+0x5d4>)
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff fdbf 	bl	8008e8c <tcp_free_acked_segments>
 800930e:	4602      	mov	r2, r0
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009318:	2b00      	cmp	r3, #0
 800931a:	d104      	bne.n	8009326 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009322:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009324:	e002      	b.n	800932c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009336:	2b00      	cmp	r3, #0
 8009338:	d103      	bne.n	8009342 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009348:	4b84      	ldr	r3, [pc, #528]	@ (800955c <tcp_receive+0x5d8>)
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	4413      	add	r3, r2
 800934e:	b29a      	uxth	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	8b5b      	ldrh	r3, [r3, #26]
 800935a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800935e:	2b00      	cmp	r3, #0
 8009360:	d035      	beq.n	80093ce <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009366:	2b00      	cmp	r3, #0
 8009368:	d118      	bne.n	800939c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00c      	beq.n	800938c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	4618      	mov	r0, r3
 8009380:	f7fb f9da 	bl	8004738 <lwip_htonl>
 8009384:	4603      	mov	r3, r0
 8009386:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009388:	2b00      	cmp	r3, #0
 800938a:	dc20      	bgt.n	80093ce <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	8b5b      	ldrh	r3, [r3, #26]
 8009390:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009394:	b29a      	uxth	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800939a:	e018      	b.n	80093ce <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fb f9c5 	bl	8004738 <lwip_htonl>
 80093ae:	4603      	mov	r3, r0
 80093b0:	1ae3      	subs	r3, r4, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dc0b      	bgt.n	80093ce <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	8b5b      	ldrh	r3, [r3, #26]
 80093ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093be:	b29a      	uxth	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093c4:	e003      	b.n	80093ce <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f001 ff70 	bl	800b2ac <tcp_send_empty_ack>
 80093cc:	e000      	b.n	80093d0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093ce:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d05b      	beq.n	8009490 <tcp_receive+0x50c>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093dc:	4b60      	ldr	r3, [pc, #384]	@ (8009560 <tcp_receive+0x5dc>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	da54      	bge.n	8009490 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80093e6:	4b5f      	ldr	r3, [pc, #380]	@ (8009564 <tcp_receive+0x5e0>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80093fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009404:	10db      	asrs	r3, r3, #3
 8009406:	b21b      	sxth	r3, r3
 8009408:	b29b      	uxth	r3, r3
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	b29b      	uxth	r3, r3
 800940e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009418:	b29a      	uxth	r2, r3
 800941a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800941e:	4413      	add	r3, r2
 8009420:	b29b      	uxth	r3, r3
 8009422:	b21a      	sxth	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8009428:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800942c:	2b00      	cmp	r3, #0
 800942e:	da05      	bge.n	800943c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009434:	425b      	negs	r3, r3
 8009436:	b29b      	uxth	r3, r3
 8009438:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800943c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009446:	109b      	asrs	r3, r3, #2
 8009448:	b21b      	sxth	r3, r3
 800944a:	b29b      	uxth	r3, r3
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	b29b      	uxth	r3, r3
 8009450:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800945a:	b29a      	uxth	r2, r3
 800945c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009460:	4413      	add	r3, r2
 8009462:	b29b      	uxth	r3, r3
 8009464:	b21a      	sxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009470:	10db      	asrs	r3, r3, #3
 8009472:	b21b      	sxth	r3, r3
 8009474:	b29a      	uxth	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800947c:	b29b      	uxth	r3, r3
 800947e:	4413      	add	r3, r2
 8009480:	b29b      	uxth	r3, r3
 8009482:	b21a      	sxth	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009490:	4b35      	ldr	r3, [pc, #212]	@ (8009568 <tcp_receive+0x5e4>)
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 84df 	beq.w	8009e58 <tcp_receive+0xed4>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	7d1b      	ldrb	r3, [r3, #20]
 800949e:	2b06      	cmp	r3, #6
 80094a0:	f200 84da 	bhi.w	8009e58 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094a8:	4b30      	ldr	r3, [pc, #192]	@ (800956c <tcp_receive+0x5e8>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	3b01      	subs	r3, #1
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f2c0 808f 	blt.w	80095d4 <tcp_receive+0x650>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094ba:	4b2b      	ldr	r3, [pc, #172]	@ (8009568 <tcp_receive+0x5e4>)
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	4619      	mov	r1, r3
 80094c0:	4b2a      	ldr	r3, [pc, #168]	@ (800956c <tcp_receive+0x5e8>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	440b      	add	r3, r1
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	3301      	adds	r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f300 8082 	bgt.w	80095d4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80094d0:	4b27      	ldr	r3, [pc, #156]	@ (8009570 <tcp_receive+0x5ec>)
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094da:	4b24      	ldr	r3, [pc, #144]	@ (800956c <tcp_receive+0x5e8>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80094e2:	4b23      	ldr	r3, [pc, #140]	@ (8009570 <tcp_receive+0x5ec>)
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d106      	bne.n	80094f8 <tcp_receive+0x574>
 80094ea:	4b22      	ldr	r3, [pc, #136]	@ (8009574 <tcp_receive+0x5f0>)
 80094ec:	f240 5294 	movw	r2, #1428	@ 0x594
 80094f0:	4921      	ldr	r1, [pc, #132]	@ (8009578 <tcp_receive+0x5f4>)
 80094f2:	4822      	ldr	r0, [pc, #136]	@ (800957c <tcp_receive+0x5f8>)
 80094f4:	f007 f882 	bl	80105fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80094f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80094fe:	4293      	cmp	r3, r2
 8009500:	d906      	bls.n	8009510 <tcp_receive+0x58c>
 8009502:	4b1c      	ldr	r3, [pc, #112]	@ (8009574 <tcp_receive+0x5f0>)
 8009504:	f240 5295 	movw	r2, #1429	@ 0x595
 8009508:	491d      	ldr	r1, [pc, #116]	@ (8009580 <tcp_receive+0x5fc>)
 800950a:	481c      	ldr	r0, [pc, #112]	@ (800957c <tcp_receive+0x5f8>)
 800950c:	f007 f876 	bl	80105fc <iprintf>
      off = (u16_t)off32;
 8009510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009512:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009516:	4b16      	ldr	r3, [pc, #88]	@ (8009570 <tcp_receive+0x5ec>)
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	891b      	ldrh	r3, [r3, #8]
 800951c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009520:	429a      	cmp	r2, r3
 8009522:	d906      	bls.n	8009532 <tcp_receive+0x5ae>
 8009524:	4b13      	ldr	r3, [pc, #76]	@ (8009574 <tcp_receive+0x5f0>)
 8009526:	f240 5297 	movw	r2, #1431	@ 0x597
 800952a:	4916      	ldr	r1, [pc, #88]	@ (8009584 <tcp_receive+0x600>)
 800952c:	4813      	ldr	r0, [pc, #76]	@ (800957c <tcp_receive+0x5f8>)
 800952e:	f007 f865 	bl	80105fc <iprintf>
      inseg.len -= off;
 8009532:	4b0f      	ldr	r3, [pc, #60]	@ (8009570 <tcp_receive+0x5ec>)
 8009534:	891a      	ldrh	r2, [r3, #8]
 8009536:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	b29a      	uxth	r2, r3
 800953e:	4b0c      	ldr	r3, [pc, #48]	@ (8009570 <tcp_receive+0x5ec>)
 8009540:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009542:	4b0b      	ldr	r3, [pc, #44]	@ (8009570 <tcp_receive+0x5ec>)
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	891a      	ldrh	r2, [r3, #8]
 8009548:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8009550:	e02a      	b.n	80095a8 <tcp_receive+0x624>
 8009552:	bf00      	nop
 8009554:	080129c0 	.word	0x080129c0
 8009558:	080129c8 	.word	0x080129c8
 800955c:	200082e0 	.word	0x200082e0
 8009560:	200082dc 	.word	0x200082dc
 8009564:	200082a0 	.word	0x200082a0
 8009568:	200082e2 	.word	0x200082e2
 800956c:	200082d8 	.word	0x200082d8
 8009570:	200082b8 	.word	0x200082b8
 8009574:	08012658 	.word	0x08012658
 8009578:	080129d0 	.word	0x080129d0
 800957c:	080126a4 	.word	0x080126a4
 8009580:	080129e0 	.word	0x080129e0
 8009584:	080129f0 	.word	0x080129f0
        off -= p->len;
 8009588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800958a:	895b      	ldrh	r3, [r3, #10]
 800958c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009598:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800959a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800959c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800959e:	2200      	movs	r2, #0
 80095a0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80095a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80095a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095aa:	895b      	ldrh	r3, [r3, #10]
 80095ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d8e9      	bhi.n	8009588 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80095b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80095b8:	4619      	mov	r1, r3
 80095ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80095bc:	f7fc fb6a 	bl	8005c94 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c4:	4a90      	ldr	r2, [pc, #576]	@ (8009808 <tcp_receive+0x884>)
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	4b90      	ldr	r3, [pc, #576]	@ (800980c <tcp_receive+0x888>)
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	4a8e      	ldr	r2, [pc, #568]	@ (8009808 <tcp_receive+0x884>)
 80095ce:	6812      	ldr	r2, [r2, #0]
 80095d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80095d2:	e00d      	b.n	80095f0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80095d4:	4b8c      	ldr	r3, [pc, #560]	@ (8009808 <tcp_receive+0x884>)
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da06      	bge.n	80095f0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	8b5b      	ldrh	r3, [r3, #26]
 80095e6:	f043 0302 	orr.w	r3, r3, #2
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80095f0:	4b85      	ldr	r3, [pc, #532]	@ (8009808 <tcp_receive+0x884>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f2c0 8427 	blt.w	8009e4e <tcp_receive+0xeca>
 8009600:	4b81      	ldr	r3, [pc, #516]	@ (8009808 <tcp_receive+0x884>)
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800960c:	440b      	add	r3, r1
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	3301      	adds	r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	f300 841b 	bgt.w	8009e4e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800961c:	4b7a      	ldr	r3, [pc, #488]	@ (8009808 <tcp_receive+0x884>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	429a      	cmp	r2, r3
 8009622:	f040 8298 	bne.w	8009b56 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009626:	4b79      	ldr	r3, [pc, #484]	@ (800980c <tcp_receive+0x888>)
 8009628:	891c      	ldrh	r4, [r3, #8]
 800962a:	4b78      	ldr	r3, [pc, #480]	@ (800980c <tcp_receive+0x888>)
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	899b      	ldrh	r3, [r3, #12]
 8009630:	b29b      	uxth	r3, r3
 8009632:	4618      	mov	r0, r3
 8009634:	f7fb f86a 	bl	800470c <lwip_htons>
 8009638:	4603      	mov	r3, r0
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f003 0303 	and.w	r3, r3, #3
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <tcp_receive+0x6c4>
 8009644:	2301      	movs	r3, #1
 8009646:	e000      	b.n	800964a <tcp_receive+0x6c6>
 8009648:	2300      	movs	r3, #0
 800964a:	4423      	add	r3, r4
 800964c:	b29a      	uxth	r2, r3
 800964e:	4b70      	ldr	r3, [pc, #448]	@ (8009810 <tcp_receive+0x88c>)
 8009650:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009656:	4b6e      	ldr	r3, [pc, #440]	@ (8009810 <tcp_receive+0x88c>)
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	429a      	cmp	r2, r3
 800965c:	d274      	bcs.n	8009748 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800965e:	4b6b      	ldr	r3, [pc, #428]	@ (800980c <tcp_receive+0x888>)
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	899b      	ldrh	r3, [r3, #12]
 8009664:	b29b      	uxth	r3, r3
 8009666:	4618      	mov	r0, r3
 8009668:	f7fb f850 	bl	800470c <lwip_htons>
 800966c:	4603      	mov	r3, r0
 800966e:	b2db      	uxtb	r3, r3
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	d01e      	beq.n	80096b6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009678:	4b64      	ldr	r3, [pc, #400]	@ (800980c <tcp_receive+0x888>)
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	899b      	ldrh	r3, [r3, #12]
 800967e:	b29b      	uxth	r3, r3
 8009680:	b21b      	sxth	r3, r3
 8009682:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009686:	b21c      	sxth	r4, r3
 8009688:	4b60      	ldr	r3, [pc, #384]	@ (800980c <tcp_receive+0x888>)
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	899b      	ldrh	r3, [r3, #12]
 800968e:	b29b      	uxth	r3, r3
 8009690:	4618      	mov	r0, r3
 8009692:	f7fb f83b 	bl	800470c <lwip_htons>
 8009696:	4603      	mov	r3, r0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800969e:	b29b      	uxth	r3, r3
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fb f833 	bl	800470c <lwip_htons>
 80096a6:	4603      	mov	r3, r0
 80096a8:	b21b      	sxth	r3, r3
 80096aa:	4323      	orrs	r3, r4
 80096ac:	b21a      	sxth	r2, r3
 80096ae:	4b57      	ldr	r3, [pc, #348]	@ (800980c <tcp_receive+0x888>)
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	b292      	uxth	r2, r2
 80096b4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80096ba:	4b54      	ldr	r3, [pc, #336]	@ (800980c <tcp_receive+0x888>)
 80096bc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80096be:	4b53      	ldr	r3, [pc, #332]	@ (800980c <tcp_receive+0x888>)
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	899b      	ldrh	r3, [r3, #12]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fb f820 	bl	800470c <lwip_htons>
 80096cc:	4603      	mov	r3, r0
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <tcp_receive+0x760>
            inseg.len -= 1;
 80096d8:	4b4c      	ldr	r3, [pc, #304]	@ (800980c <tcp_receive+0x888>)
 80096da:	891b      	ldrh	r3, [r3, #8]
 80096dc:	3b01      	subs	r3, #1
 80096de:	b29a      	uxth	r2, r3
 80096e0:	4b4a      	ldr	r3, [pc, #296]	@ (800980c <tcp_receive+0x888>)
 80096e2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80096e4:	4b49      	ldr	r3, [pc, #292]	@ (800980c <tcp_receive+0x888>)
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	4a48      	ldr	r2, [pc, #288]	@ (800980c <tcp_receive+0x888>)
 80096ea:	8912      	ldrh	r2, [r2, #8]
 80096ec:	4611      	mov	r1, r2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fc f9d0 	bl	8005a94 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80096f4:	4b45      	ldr	r3, [pc, #276]	@ (800980c <tcp_receive+0x888>)
 80096f6:	891c      	ldrh	r4, [r3, #8]
 80096f8:	4b44      	ldr	r3, [pc, #272]	@ (800980c <tcp_receive+0x888>)
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	899b      	ldrh	r3, [r3, #12]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	4618      	mov	r0, r3
 8009702:	f7fb f803 	bl	800470c <lwip_htons>
 8009706:	4603      	mov	r3, r0
 8009708:	b2db      	uxtb	r3, r3
 800970a:	f003 0303 	and.w	r3, r3, #3
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <tcp_receive+0x792>
 8009712:	2301      	movs	r3, #1
 8009714:	e000      	b.n	8009718 <tcp_receive+0x794>
 8009716:	2300      	movs	r3, #0
 8009718:	4423      	add	r3, r4
 800971a:	b29a      	uxth	r2, r3
 800971c:	4b3c      	ldr	r3, [pc, #240]	@ (8009810 <tcp_receive+0x88c>)
 800971e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009720:	4b3b      	ldr	r3, [pc, #236]	@ (8009810 <tcp_receive+0x88c>)
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	461a      	mov	r2, r3
 8009726:	4b38      	ldr	r3, [pc, #224]	@ (8009808 <tcp_receive+0x884>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	441a      	add	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009730:	6879      	ldr	r1, [r7, #4]
 8009732:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009734:	440b      	add	r3, r1
 8009736:	429a      	cmp	r2, r3
 8009738:	d006      	beq.n	8009748 <tcp_receive+0x7c4>
 800973a:	4b36      	ldr	r3, [pc, #216]	@ (8009814 <tcp_receive+0x890>)
 800973c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8009740:	4935      	ldr	r1, [pc, #212]	@ (8009818 <tcp_receive+0x894>)
 8009742:	4836      	ldr	r0, [pc, #216]	@ (800981c <tcp_receive+0x898>)
 8009744:	f006 ff5a 	bl	80105fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 80e6 	beq.w	800991e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009752:	4b2e      	ldr	r3, [pc, #184]	@ (800980c <tcp_receive+0x888>)
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	899b      	ldrh	r3, [r3, #12]
 8009758:	b29b      	uxth	r3, r3
 800975a:	4618      	mov	r0, r3
 800975c:	f7fa ffd6 	bl	800470c <lwip_htons>
 8009760:	4603      	mov	r3, r0
 8009762:	b2db      	uxtb	r3, r3
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b00      	cmp	r3, #0
 800976a:	d010      	beq.n	800978e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800976c:	e00a      	b.n	8009784 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009772:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7fd fd93 	bl	80072aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1f0      	bne.n	800976e <tcp_receive+0x7ea>
 800978c:	e0c7      	b.n	800991e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009792:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009794:	e051      	b.n	800983a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	899b      	ldrh	r3, [r3, #12]
 800979c:	b29b      	uxth	r3, r3
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fa ffb4 	bl	800470c <lwip_htons>
 80097a4:	4603      	mov	r3, r0
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	f003 0301 	and.w	r3, r3, #1
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d03c      	beq.n	800982a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80097b0:	4b16      	ldr	r3, [pc, #88]	@ (800980c <tcp_receive+0x888>)
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	899b      	ldrh	r3, [r3, #12]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fa ffa7 	bl	800470c <lwip_htons>
 80097be:	4603      	mov	r3, r0
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d12f      	bne.n	800982a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80097ca:	4b10      	ldr	r3, [pc, #64]	@ (800980c <tcp_receive+0x888>)
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	899b      	ldrh	r3, [r3, #12]
 80097d0:	b29c      	uxth	r4, r3
 80097d2:	2001      	movs	r0, #1
 80097d4:	f7fa ff9a 	bl	800470c <lwip_htons>
 80097d8:	4603      	mov	r3, r0
 80097da:	461a      	mov	r2, r3
 80097dc:	4b0b      	ldr	r3, [pc, #44]	@ (800980c <tcp_receive+0x888>)
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	4322      	orrs	r2, r4
 80097e2:	b292      	uxth	r2, r2
 80097e4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80097e6:	4b09      	ldr	r3, [pc, #36]	@ (800980c <tcp_receive+0x888>)
 80097e8:	891c      	ldrh	r4, [r3, #8]
 80097ea:	4b08      	ldr	r3, [pc, #32]	@ (800980c <tcp_receive+0x888>)
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	899b      	ldrh	r3, [r3, #12]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fa ff8a 	bl	800470c <lwip_htons>
 80097f8:	4603      	mov	r3, r0
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00d      	beq.n	8009820 <tcp_receive+0x89c>
 8009804:	2301      	movs	r3, #1
 8009806:	e00c      	b.n	8009822 <tcp_receive+0x89e>
 8009808:	200082d8 	.word	0x200082d8
 800980c:	200082b8 	.word	0x200082b8
 8009810:	200082e2 	.word	0x200082e2
 8009814:	08012658 	.word	0x08012658
 8009818:	08012a00 	.word	0x08012a00
 800981c:	080126a4 	.word	0x080126a4
 8009820:	2300      	movs	r3, #0
 8009822:	4423      	add	r3, r4
 8009824:	b29a      	uxth	r2, r3
 8009826:	4b98      	ldr	r3, [pc, #608]	@ (8009a88 <tcp_receive+0xb04>)
 8009828:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800982a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800982c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800982e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8009834:	6938      	ldr	r0, [r7, #16]
 8009836:	f7fd fd38 	bl	80072aa <tcp_seg_free>
            while (next &&
 800983a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00e      	beq.n	800985e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009840:	4b91      	ldr	r3, [pc, #580]	@ (8009a88 <tcp_receive+0xb04>)
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	461a      	mov	r2, r3
 8009846:	4b91      	ldr	r3, [pc, #580]	@ (8009a8c <tcp_receive+0xb08>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	441a      	add	r2, r3
 800984c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009854:	8909      	ldrh	r1, [r1, #8]
 8009856:	440b      	add	r3, r1
 8009858:	1ad3      	subs	r3, r2, r3
            while (next &&
 800985a:	2b00      	cmp	r3, #0
 800985c:	da9b      	bge.n	8009796 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800985e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009860:	2b00      	cmp	r3, #0
 8009862:	d059      	beq.n	8009918 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009864:	4b88      	ldr	r3, [pc, #544]	@ (8009a88 <tcp_receive+0xb04>)
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	461a      	mov	r2, r3
 800986a:	4b88      	ldr	r3, [pc, #544]	@ (8009a8c <tcp_receive+0xb08>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	441a      	add	r2, r3
 8009870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009878:	2b00      	cmp	r3, #0
 800987a:	dd4d      	ble.n	8009918 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800987c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	b29a      	uxth	r2, r3
 8009884:	4b81      	ldr	r3, [pc, #516]	@ (8009a8c <tcp_receive+0xb08>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	b29b      	uxth	r3, r3
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	b29a      	uxth	r2, r3
 800988e:	4b80      	ldr	r3, [pc, #512]	@ (8009a90 <tcp_receive+0xb0c>)
 8009890:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009892:	4b7f      	ldr	r3, [pc, #508]	@ (8009a90 <tcp_receive+0xb0c>)
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	899b      	ldrh	r3, [r3, #12]
 8009898:	b29b      	uxth	r3, r3
 800989a:	4618      	mov	r0, r3
 800989c:	f7fa ff36 	bl	800470c <lwip_htons>
 80098a0:	4603      	mov	r3, r0
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d005      	beq.n	80098b8 <tcp_receive+0x934>
                inseg.len -= 1;
 80098ac:	4b78      	ldr	r3, [pc, #480]	@ (8009a90 <tcp_receive+0xb0c>)
 80098ae:	891b      	ldrh	r3, [r3, #8]
 80098b0:	3b01      	subs	r3, #1
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	4b76      	ldr	r3, [pc, #472]	@ (8009a90 <tcp_receive+0xb0c>)
 80098b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80098b8:	4b75      	ldr	r3, [pc, #468]	@ (8009a90 <tcp_receive+0xb0c>)
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	4a74      	ldr	r2, [pc, #464]	@ (8009a90 <tcp_receive+0xb0c>)
 80098be:	8912      	ldrh	r2, [r2, #8]
 80098c0:	4611      	mov	r1, r2
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fc f8e6 	bl	8005a94 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80098c8:	4b71      	ldr	r3, [pc, #452]	@ (8009a90 <tcp_receive+0xb0c>)
 80098ca:	891c      	ldrh	r4, [r3, #8]
 80098cc:	4b70      	ldr	r3, [pc, #448]	@ (8009a90 <tcp_receive+0xb0c>)
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	899b      	ldrh	r3, [r3, #12]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fa ff19 	bl	800470c <lwip_htons>
 80098da:	4603      	mov	r3, r0
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 0303 	and.w	r3, r3, #3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <tcp_receive+0x966>
 80098e6:	2301      	movs	r3, #1
 80098e8:	e000      	b.n	80098ec <tcp_receive+0x968>
 80098ea:	2300      	movs	r3, #0
 80098ec:	4423      	add	r3, r4
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	4b65      	ldr	r3, [pc, #404]	@ (8009a88 <tcp_receive+0xb04>)
 80098f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80098f4:	4b64      	ldr	r3, [pc, #400]	@ (8009a88 <tcp_receive+0xb04>)
 80098f6:	881b      	ldrh	r3, [r3, #0]
 80098f8:	461a      	mov	r2, r3
 80098fa:	4b64      	ldr	r3, [pc, #400]	@ (8009a8c <tcp_receive+0xb08>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	441a      	add	r2, r3
 8009900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	429a      	cmp	r2, r3
 8009908:	d006      	beq.n	8009918 <tcp_receive+0x994>
 800990a:	4b62      	ldr	r3, [pc, #392]	@ (8009a94 <tcp_receive+0xb10>)
 800990c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8009910:	4961      	ldr	r1, [pc, #388]	@ (8009a98 <tcp_receive+0xb14>)
 8009912:	4862      	ldr	r0, [pc, #392]	@ (8009a9c <tcp_receive+0xb18>)
 8009914:	f006 fe72 	bl	80105fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800991c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800991e:	4b5a      	ldr	r3, [pc, #360]	@ (8009a88 <tcp_receive+0xb04>)
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	4b59      	ldr	r3, [pc, #356]	@ (8009a8c <tcp_receive+0xb08>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	441a      	add	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009932:	4b55      	ldr	r3, [pc, #340]	@ (8009a88 <tcp_receive+0xb04>)
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d206      	bcs.n	8009948 <tcp_receive+0x9c4>
 800993a:	4b56      	ldr	r3, [pc, #344]	@ (8009a94 <tcp_receive+0xb10>)
 800993c:	f240 6207 	movw	r2, #1543	@ 0x607
 8009940:	4957      	ldr	r1, [pc, #348]	@ (8009aa0 <tcp_receive+0xb1c>)
 8009942:	4856      	ldr	r0, [pc, #344]	@ (8009a9c <tcp_receive+0xb18>)
 8009944:	f006 fe5a 	bl	80105fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800994c:	4b4e      	ldr	r3, [pc, #312]	@ (8009a88 <tcp_receive+0xb04>)
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7fc ffc5 	bl	80068e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800995e:	4b4c      	ldr	r3, [pc, #304]	@ (8009a90 <tcp_receive+0xb0c>)
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	891b      	ldrh	r3, [r3, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d006      	beq.n	8009976 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009968:	4b49      	ldr	r3, [pc, #292]	@ (8009a90 <tcp_receive+0xb0c>)
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	4a4d      	ldr	r2, [pc, #308]	@ (8009aa4 <tcp_receive+0xb20>)
 800996e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009970:	4b47      	ldr	r3, [pc, #284]	@ (8009a90 <tcp_receive+0xb0c>)
 8009972:	2200      	movs	r2, #0
 8009974:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009976:	4b46      	ldr	r3, [pc, #280]	@ (8009a90 <tcp_receive+0xb0c>)
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	899b      	ldrh	r3, [r3, #12]
 800997c:	b29b      	uxth	r3, r3
 800997e:	4618      	mov	r0, r3
 8009980:	f7fa fec4 	bl	800470c <lwip_htons>
 8009984:	4603      	mov	r3, r0
 8009986:	b2db      	uxtb	r3, r3
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 80b8 	beq.w	8009b02 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009992:	4b45      	ldr	r3, [pc, #276]	@ (8009aa8 <tcp_receive+0xb24>)
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	f043 0320 	orr.w	r3, r3, #32
 800999a:	b2da      	uxtb	r2, r3
 800999c:	4b42      	ldr	r3, [pc, #264]	@ (8009aa8 <tcp_receive+0xb24>)
 800999e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80099a0:	e0af      	b.n	8009b02 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099a6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	4a36      	ldr	r2, [pc, #216]	@ (8009a8c <tcp_receive+0xb08>)
 80099b2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	891b      	ldrh	r3, [r3, #8]
 80099b8:	461c      	mov	r4, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	899b      	ldrh	r3, [r3, #12]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fa fea2 	bl	800470c <lwip_htons>
 80099c8:	4603      	mov	r3, r0
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 0303 	and.w	r3, r3, #3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <tcp_receive+0xa54>
 80099d4:	2301      	movs	r3, #1
 80099d6:	e000      	b.n	80099da <tcp_receive+0xa56>
 80099d8:	2300      	movs	r3, #0
 80099da:	191a      	adds	r2, r3, r4
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e0:	441a      	add	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099ea:	461c      	mov	r4, r3
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	891b      	ldrh	r3, [r3, #8]
 80099f0:	461d      	mov	r5, r3
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	899b      	ldrh	r3, [r3, #12]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fa fe86 	bl	800470c <lwip_htons>
 8009a00:	4603      	mov	r3, r0
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	f003 0303 	and.w	r3, r3, #3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <tcp_receive+0xa8c>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e000      	b.n	8009a12 <tcp_receive+0xa8e>
 8009a10:	2300      	movs	r3, #0
 8009a12:	442b      	add	r3, r5
 8009a14:	429c      	cmp	r4, r3
 8009a16:	d206      	bcs.n	8009a26 <tcp_receive+0xaa2>
 8009a18:	4b1e      	ldr	r3, [pc, #120]	@ (8009a94 <tcp_receive+0xb10>)
 8009a1a:	f240 622b 	movw	r2, #1579	@ 0x62b
 8009a1e:	4923      	ldr	r1, [pc, #140]	@ (8009aac <tcp_receive+0xb28>)
 8009a20:	481e      	ldr	r0, [pc, #120]	@ (8009a9c <tcp_receive+0xb18>)
 8009a22:	f006 fdeb 	bl	80105fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	891b      	ldrh	r3, [r3, #8]
 8009a2a:	461c      	mov	r4, r3
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	899b      	ldrh	r3, [r3, #12]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fa fe69 	bl	800470c <lwip_htons>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f003 0303 	and.w	r3, r3, #3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <tcp_receive+0xac6>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e000      	b.n	8009a4c <tcp_receive+0xac8>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	1919      	adds	r1, r3, r4
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009a52:	b28b      	uxth	r3, r1
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7fc ff43 	bl	80068e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	891b      	ldrh	r3, [r3, #8]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d028      	beq.n	8009abe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa4 <tcp_receive+0xb20>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d01d      	beq.n	8009ab0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009a74:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa4 <tcp_receive+0xb20>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	f7fc fa50 	bl	8005f24 <pbuf_cat>
 8009a84:	e018      	b.n	8009ab8 <tcp_receive+0xb34>
 8009a86:	bf00      	nop
 8009a88:	200082e2 	.word	0x200082e2
 8009a8c:	200082d8 	.word	0x200082d8
 8009a90:	200082b8 	.word	0x200082b8
 8009a94:	08012658 	.word	0x08012658
 8009a98:	08012a38 	.word	0x08012a38
 8009a9c:	080126a4 	.word	0x080126a4
 8009aa0:	08012a74 	.word	0x08012a74
 8009aa4:	200082e8 	.word	0x200082e8
 8009aa8:	200082e5 	.word	0x200082e5
 8009aac:	08012a94 	.word	0x08012a94
            } else {
              recv_data = cseg->p;
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	4a70      	ldr	r2, [pc, #448]	@ (8009c78 <tcp_receive+0xcf4>)
 8009ab6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2200      	movs	r2, #0
 8009abc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	899b      	ldrh	r3, [r3, #12]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fa fe20 	bl	800470c <lwip_htons>
 8009acc:	4603      	mov	r3, r0
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00d      	beq.n	8009af4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009ad8:	4b68      	ldr	r3, [pc, #416]	@ (8009c7c <tcp_receive+0xcf8>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	f043 0320 	orr.w	r3, r3, #32
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	4b66      	ldr	r3, [pc, #408]	@ (8009c7c <tcp_receive+0xcf8>)
 8009ae4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	7d1b      	ldrb	r3, [r3, #20]
 8009aea:	2b04      	cmp	r3, #4
 8009aec:	d102      	bne.n	8009af4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2207      	movs	r2, #7
 8009af2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8009afc:	68b8      	ldr	r0, [r7, #8]
 8009afe:	f7fd fbd4 	bl	80072aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d008      	beq.n	8009b1c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8009b16:	429a      	cmp	r2, r3
 8009b18:	f43f af43 	beq.w	80099a2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	8b5b      	ldrh	r3, [r3, #26]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00e      	beq.n	8009b46 <tcp_receive+0xbc2>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	8b5b      	ldrh	r3, [r3, #26]
 8009b2c:	f023 0301 	bic.w	r3, r3, #1
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	835a      	strh	r2, [r3, #26]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	8b5b      	ldrh	r3, [r3, #26]
 8009b3a:	f043 0302 	orr.w	r3, r3, #2
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009b44:	e187      	b.n	8009e56 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	8b5b      	ldrh	r3, [r3, #26]
 8009b4a:	f043 0301 	orr.w	r3, r3, #1
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009b54:	e17f      	b.n	8009e56 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d106      	bne.n	8009b6c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009b5e:	4848      	ldr	r0, [pc, #288]	@ (8009c80 <tcp_receive+0xcfc>)
 8009b60:	f7fd fbbc 	bl	80072dc <tcp_seg_copy>
 8009b64:	4602      	mov	r2, r0
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	675a      	str	r2, [r3, #116]	@ 0x74
 8009b6a:	e16c      	b.n	8009e46 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b76:	e156      	b.n	8009e26 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8009b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	4b41      	ldr	r3, [pc, #260]	@ (8009c84 <tcp_receive+0xd00>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d11d      	bne.n	8009bc2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009b86:	4b3e      	ldr	r3, [pc, #248]	@ (8009c80 <tcp_receive+0xcfc>)
 8009b88:	891a      	ldrh	r2, [r3, #8]
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8c:	891b      	ldrh	r3, [r3, #8]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	f240 814e 	bls.w	8009e30 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009b94:	483a      	ldr	r0, [pc, #232]	@ (8009c80 <tcp_receive+0xcfc>)
 8009b96:	f7fd fba1 	bl	80072dc <tcp_seg_copy>
 8009b9a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 8148 	beq.w	8009e34 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8009ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d003      	beq.n	8009bb2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	e002      	b.n	8009bb8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009bb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009bba:	6978      	ldr	r0, [r7, #20]
 8009bbc:	f7ff f8de 	bl	8008d7c <tcp_oos_insert_segment>
                }
                break;
 8009bc0:	e138      	b.n	8009e34 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d117      	bne.n	8009bf8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8009c84 <tcp_receive+0xd00>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	da57      	bge.n	8009c88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009bd8:	4829      	ldr	r0, [pc, #164]	@ (8009c80 <tcp_receive+0xcfc>)
 8009bda:	f7fd fb7f 	bl	80072dc <tcp_seg_copy>
 8009bde:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 8128 	beq.w	8009e38 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	69ba      	ldr	r2, [r7, #24]
 8009bec:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009bee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009bf0:	69b8      	ldr	r0, [r7, #24]
 8009bf2:	f7ff f8c3 	bl	8008d7c <tcp_oos_insert_segment>
                  }
                  break;
 8009bf6:	e11f      	b.n	8009e38 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009bf8:	4b22      	ldr	r3, [pc, #136]	@ (8009c84 <tcp_receive+0xd00>)
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	3b01      	subs	r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	db3e      	blt.n	8009c88 <tcp_receive+0xd04>
 8009c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8009c84 <tcp_receive+0xd00>)
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	3301      	adds	r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	dc35      	bgt.n	8009c88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009c1c:	4818      	ldr	r0, [pc, #96]	@ (8009c80 <tcp_receive+0xcfc>)
 8009c1e:	f7fd fb5d 	bl	80072dc <tcp_seg_copy>
 8009c22:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 8108 	beq.w	8009e3c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c34:	8912      	ldrh	r2, [r2, #8]
 8009c36:	441a      	add	r2, r3
 8009c38:	4b12      	ldr	r3, [pc, #72]	@ (8009c84 <tcp_receive+0xd00>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dd12      	ble.n	8009c68 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009c42:	4b10      	ldr	r3, [pc, #64]	@ (8009c84 <tcp_receive+0xd00>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c56:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c5a:	685a      	ldr	r2, [r3, #4]
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c5e:	891b      	ldrh	r3, [r3, #8]
 8009c60:	4619      	mov	r1, r3
 8009c62:	4610      	mov	r0, r2
 8009c64:	f7fb ff16 	bl	8005a94 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c6a:	69fa      	ldr	r2, [r7, #28]
 8009c6c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009c6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009c70:	69f8      	ldr	r0, [r7, #28]
 8009c72:	f7ff f883 	bl	8008d7c <tcp_oos_insert_segment>
                  }
                  break;
 8009c76:	e0e1      	b.n	8009e3c <tcp_receive+0xeb8>
 8009c78:	200082e8 	.word	0x200082e8
 8009c7c:	200082e5 	.word	0x200082e5
 8009c80:	200082b8 	.word	0x200082b8
 8009c84:	200082d8 	.word	0x200082d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f040 80c5 	bne.w	8009e20 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009c96:	4b7f      	ldr	r3, [pc, #508]	@ (8009e94 <tcp_receive+0xf10>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f340 80bc 	ble.w	8009e20 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	899b      	ldrh	r3, [r3, #12]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fa fd2b 	bl	800470c <lwip_htons>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f040 80be 	bne.w	8009e40 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009cc4:	4874      	ldr	r0, [pc, #464]	@ (8009e98 <tcp_receive+0xf14>)
 8009cc6:	f7fd fb09 	bl	80072dc <tcp_seg_copy>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 80b5 	beq.w	8009e44 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ce2:	8912      	ldrh	r2, [r2, #8]
 8009ce4:	441a      	add	r2, r3
 8009ce6:	4b6b      	ldr	r3, [pc, #428]	@ (8009e94 <tcp_receive+0xf10>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dd12      	ble.n	8009d16 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009cf0:	4b68      	ldr	r3, [pc, #416]	@ (8009e94 <tcp_receive+0xf10>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d04:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0c:	891b      	ldrh	r3, [r3, #8]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4610      	mov	r0, r2
 8009d12:	f7fb febf 	bl	8005a94 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009d16:	4b61      	ldr	r3, [pc, #388]	@ (8009e9c <tcp_receive+0xf18>)
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	4b5d      	ldr	r3, [pc, #372]	@ (8009e94 <tcp_receive+0xf10>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	441a      	add	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009d2a:	440b      	add	r3, r1
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f340 8088 	ble.w	8009e44 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	899b      	ldrh	r3, [r3, #12]
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fa fce4 	bl	800470c <lwip_htons>
 8009d44:	4603      	mov	r3, r0
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d021      	beq.n	8009d94 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	899b      	ldrh	r3, [r3, #12]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	b21b      	sxth	r3, r3
 8009d5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009d60:	b21c      	sxth	r4, r3
 8009d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	899b      	ldrh	r3, [r3, #12]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fa fccd 	bl	800470c <lwip_htons>
 8009d72:	4603      	mov	r3, r0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fa fcc5 	bl	800470c <lwip_htons>
 8009d82:	4603      	mov	r3, r0
 8009d84:	b21b      	sxth	r3, r3
 8009d86:	4323      	orrs	r3, r4
 8009d88:	b21a      	sxth	r2, r3
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	b292      	uxth	r2, r2
 8009d92:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d9e:	4413      	add	r3, r2
 8009da0:	b299      	uxth	r1, r3
 8009da2:	4b3c      	ldr	r3, [pc, #240]	@ (8009e94 <tcp_receive+0xf10>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	1a8a      	subs	r2, r1, r2
 8009dae:	b292      	uxth	r2, r2
 8009db0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	891b      	ldrh	r3, [r3, #8]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	f7fb fe67 	bl	8005a94 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	891c      	ldrh	r4, [r3, #8]
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	899b      	ldrh	r3, [r3, #12]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fa fc98 	bl	800470c <lwip_htons>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <tcp_receive+0xe68>
 8009de8:	2301      	movs	r3, #1
 8009dea:	e000      	b.n	8009dee <tcp_receive+0xe6a>
 8009dec:	2300      	movs	r3, #0
 8009dee:	4423      	add	r3, r4
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	4b2a      	ldr	r3, [pc, #168]	@ (8009e9c <tcp_receive+0xf18>)
 8009df4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009df6:	4b29      	ldr	r3, [pc, #164]	@ (8009e9c <tcp_receive+0xf18>)
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	4b25      	ldr	r3, [pc, #148]	@ (8009e94 <tcp_receive+0xf10>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	441a      	add	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e06:	6879      	ldr	r1, [r7, #4]
 8009e08:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009e0a:	440b      	add	r3, r1
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d019      	beq.n	8009e44 <tcp_receive+0xec0>
 8009e10:	4b23      	ldr	r3, [pc, #140]	@ (8009ea0 <tcp_receive+0xf1c>)
 8009e12:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8009e16:	4923      	ldr	r1, [pc, #140]	@ (8009ea4 <tcp_receive+0xf20>)
 8009e18:	4823      	ldr	r0, [pc, #140]	@ (8009ea8 <tcp_receive+0xf24>)
 8009e1a:	f006 fbef 	bl	80105fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009e1e:	e011      	b.n	8009e44 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f47f aea5 	bne.w	8009b78 <tcp_receive+0xbf4>
 8009e2e:	e00a      	b.n	8009e46 <tcp_receive+0xec2>
                break;
 8009e30:	bf00      	nop
 8009e32:	e008      	b.n	8009e46 <tcp_receive+0xec2>
                break;
 8009e34:	bf00      	nop
 8009e36:	e006      	b.n	8009e46 <tcp_receive+0xec2>
                  break;
 8009e38:	bf00      	nop
 8009e3a:	e004      	b.n	8009e46 <tcp_receive+0xec2>
                  break;
 8009e3c:	bf00      	nop
 8009e3e:	e002      	b.n	8009e46 <tcp_receive+0xec2>
                  break;
 8009e40:	bf00      	nop
 8009e42:	e000      	b.n	8009e46 <tcp_receive+0xec2>
                break;
 8009e44:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 fa30 	bl	800b2ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009e4c:	e003      	b.n	8009e56 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f001 fa2c 	bl	800b2ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e54:	e01a      	b.n	8009e8c <tcp_receive+0xf08>
 8009e56:	e019      	b.n	8009e8c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009e58:	4b0e      	ldr	r3, [pc, #56]	@ (8009e94 <tcp_receive+0xf10>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	db0a      	blt.n	8009e7c <tcp_receive+0xef8>
 8009e66:	4b0b      	ldr	r3, [pc, #44]	@ (8009e94 <tcp_receive+0xf10>)
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009e72:	440b      	add	r3, r1
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	3301      	adds	r3, #1
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dd07      	ble.n	8009e8c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	8b5b      	ldrh	r3, [r3, #26]
 8009e80:	f043 0302 	orr.w	r3, r3, #2
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009e8a:	e7ff      	b.n	8009e8c <tcp_receive+0xf08>
 8009e8c:	bf00      	nop
 8009e8e:	3750      	adds	r7, #80	@ 0x50
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bdb0      	pop	{r4, r5, r7, pc}
 8009e94:	200082d8 	.word	0x200082d8
 8009e98:	200082b8 	.word	0x200082b8
 8009e9c:	200082e2 	.word	0x200082e2
 8009ea0:	08012658 	.word	0x08012658
 8009ea4:	08012a00 	.word	0x08012a00
 8009ea8:	080126a4 	.word	0x080126a4

08009eac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009eb2:	4b15      	ldr	r3, [pc, #84]	@ (8009f08 <tcp_get_next_optbyte+0x5c>)
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	1c5a      	adds	r2, r3, #1
 8009eb8:	b291      	uxth	r1, r2
 8009eba:	4a13      	ldr	r2, [pc, #76]	@ (8009f08 <tcp_get_next_optbyte+0x5c>)
 8009ebc:	8011      	strh	r1, [r2, #0]
 8009ebe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009ec0:	4b12      	ldr	r3, [pc, #72]	@ (8009f0c <tcp_get_next_optbyte+0x60>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d004      	beq.n	8009ed2 <tcp_get_next_optbyte+0x26>
 8009ec8:	4b11      	ldr	r3, [pc, #68]	@ (8009f10 <tcp_get_next_optbyte+0x64>)
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	88fa      	ldrh	r2, [r7, #6]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d208      	bcs.n	8009ee4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009ed2:	4b10      	ldr	r3, [pc, #64]	@ (8009f14 <tcp_get_next_optbyte+0x68>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3314      	adds	r3, #20
 8009ed8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009eda:	88fb      	ldrh	r3, [r7, #6]
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	4413      	add	r3, r2
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	e00b      	b.n	8009efc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009ee4:	88fb      	ldrh	r3, [r7, #6]
 8009ee6:	b2da      	uxtb	r2, r3
 8009ee8:	4b09      	ldr	r3, [pc, #36]	@ (8009f10 <tcp_get_next_optbyte+0x64>)
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009ef2:	4b06      	ldr	r3, [pc, #24]	@ (8009f0c <tcp_get_next_optbyte+0x60>)
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	797b      	ldrb	r3, [r7, #5]
 8009ef8:	4413      	add	r3, r2
 8009efa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	200082d4 	.word	0x200082d4
 8009f0c:	200082d0 	.word	0x200082d0
 8009f10:	200082ce 	.word	0x200082ce
 8009f14:	200082c8 	.word	0x200082c8

08009f18 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d106      	bne.n	8009f34 <tcp_parseopt+0x1c>
 8009f26:	4b32      	ldr	r3, [pc, #200]	@ (8009ff0 <tcp_parseopt+0xd8>)
 8009f28:	f240 727d 	movw	r2, #1917	@ 0x77d
 8009f2c:	4931      	ldr	r1, [pc, #196]	@ (8009ff4 <tcp_parseopt+0xdc>)
 8009f2e:	4832      	ldr	r0, [pc, #200]	@ (8009ff8 <tcp_parseopt+0xe0>)
 8009f30:	f006 fb64 	bl	80105fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009f34:	4b31      	ldr	r3, [pc, #196]	@ (8009ffc <tcp_parseopt+0xe4>)
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d056      	beq.n	8009fea <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009f3c:	4b30      	ldr	r3, [pc, #192]	@ (800a000 <tcp_parseopt+0xe8>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	801a      	strh	r2, [r3, #0]
 8009f42:	e046      	b.n	8009fd2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8009f44:	f7ff ffb2 	bl	8009eac <tcp_get_next_optbyte>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d006      	beq.n	8009f60 <tcp_parseopt+0x48>
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	dc2a      	bgt.n	8009fac <tcp_parseopt+0x94>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d042      	beq.n	8009fe0 <tcp_parseopt+0xc8>
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d038      	beq.n	8009fd0 <tcp_parseopt+0xb8>
 8009f5e:	e025      	b.n	8009fac <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009f60:	f7ff ffa4 	bl	8009eac <tcp_get_next_optbyte>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b04      	cmp	r3, #4
 8009f68:	d13c      	bne.n	8009fe4 <tcp_parseopt+0xcc>
 8009f6a:	4b25      	ldr	r3, [pc, #148]	@ (800a000 <tcp_parseopt+0xe8>)
 8009f6c:	881b      	ldrh	r3, [r3, #0]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	4a22      	ldr	r2, [pc, #136]	@ (8009ffc <tcp_parseopt+0xe4>)
 8009f72:	8812      	ldrh	r2, [r2, #0]
 8009f74:	4293      	cmp	r3, r2
 8009f76:	da35      	bge.n	8009fe4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009f78:	f7ff ff98 	bl	8009eac <tcp_get_next_optbyte>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	021b      	lsls	r3, r3, #8
 8009f80:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009f82:	f7ff ff93 	bl	8009eac <tcp_get_next_optbyte>
 8009f86:	4603      	mov	r3, r0
 8009f88:	461a      	mov	r2, r3
 8009f8a:	89bb      	ldrh	r3, [r7, #12]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009f90:	89bb      	ldrh	r3, [r7, #12]
 8009f92:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009f96:	d804      	bhi.n	8009fa2 <tcp_parseopt+0x8a>
 8009f98:	89bb      	ldrh	r3, [r7, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <tcp_parseopt+0x8a>
 8009f9e:	89ba      	ldrh	r2, [r7, #12]
 8009fa0:	e001      	b.n	8009fa6 <tcp_parseopt+0x8e>
 8009fa2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8009faa:	e012      	b.n	8009fd2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009fac:	f7ff ff7e 	bl	8009eac <tcp_get_next_optbyte>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009fb4:	7afb      	ldrb	r3, [r7, #11]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d916      	bls.n	8009fe8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009fba:	7afb      	ldrb	r3, [r7, #11]
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	4b10      	ldr	r3, [pc, #64]	@ (800a000 <tcp_parseopt+0xe8>)
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	3b02      	subs	r3, #2
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	4b0d      	ldr	r3, [pc, #52]	@ (800a000 <tcp_parseopt+0xe8>)
 8009fcc:	801a      	strh	r2, [r3, #0]
 8009fce:	e000      	b.n	8009fd2 <tcp_parseopt+0xba>
          break;
 8009fd0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009fd2:	4b0b      	ldr	r3, [pc, #44]	@ (800a000 <tcp_parseopt+0xe8>)
 8009fd4:	881a      	ldrh	r2, [r3, #0]
 8009fd6:	4b09      	ldr	r3, [pc, #36]	@ (8009ffc <tcp_parseopt+0xe4>)
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d3b2      	bcc.n	8009f44 <tcp_parseopt+0x2c>
 8009fde:	e004      	b.n	8009fea <tcp_parseopt+0xd2>
          return;
 8009fe0:	bf00      	nop
 8009fe2:	e002      	b.n	8009fea <tcp_parseopt+0xd2>
            return;
 8009fe4:	bf00      	nop
 8009fe6:	e000      	b.n	8009fea <tcp_parseopt+0xd2>
            return;
 8009fe8:	bf00      	nop
      }
    }
  }
}
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	08012658 	.word	0x08012658
 8009ff4:	08012abc 	.word	0x08012abc
 8009ff8:	080126a4 	.word	0x080126a4
 8009ffc:	200082cc 	.word	0x200082cc
 800a000:	200082d4 	.word	0x200082d4

0800a004 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a004:	b480      	push	{r7}
 800a006:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a008:	4b05      	ldr	r3, [pc, #20]	@ (800a020 <tcp_trigger_input_pcb_close+0x1c>)
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	f043 0310 	orr.w	r3, r3, #16
 800a010:	b2da      	uxtb	r2, r3
 800a012:	4b03      	ldr	r3, [pc, #12]	@ (800a020 <tcp_trigger_input_pcb_close+0x1c>)
 800a014:	701a      	strb	r2, [r3, #0]
}
 800a016:	bf00      	nop
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	200082e5 	.word	0x200082e5

0800a024 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00a      	beq.n	800a04c <tcp_route+0x28>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	7a1b      	ldrb	r3, [r3, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d006      	beq.n	800a04c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	7a1b      	ldrb	r3, [r3, #8]
 800a042:	4618      	mov	r0, r3
 800a044:	f7fb fb6c 	bl	8005720 <netif_get_by_index>
 800a048:	4603      	mov	r3, r0
 800a04a:	e003      	b.n	800a054 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f004 ffcb 	bl	800efe8 <ip4_route>
 800a052:	4603      	mov	r3, r0
  }
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a05c:	b590      	push	{r4, r7, lr}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	4613      	mov	r3, r2
 800a06a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d105      	bne.n	800a07e <tcp_create_segment+0x22>
 800a072:	4b43      	ldr	r3, [pc, #268]	@ (800a180 <tcp_create_segment+0x124>)
 800a074:	22a3      	movs	r2, #163	@ 0xa3
 800a076:	4943      	ldr	r1, [pc, #268]	@ (800a184 <tcp_create_segment+0x128>)
 800a078:	4843      	ldr	r0, [pc, #268]	@ (800a188 <tcp_create_segment+0x12c>)
 800a07a:	f006 fabf 	bl	80105fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d105      	bne.n	800a090 <tcp_create_segment+0x34>
 800a084:	4b3e      	ldr	r3, [pc, #248]	@ (800a180 <tcp_create_segment+0x124>)
 800a086:	22a4      	movs	r2, #164	@ 0xa4
 800a088:	4940      	ldr	r1, [pc, #256]	@ (800a18c <tcp_create_segment+0x130>)
 800a08a:	483f      	ldr	r0, [pc, #252]	@ (800a188 <tcp_create_segment+0x12c>)
 800a08c:	f006 fab6 	bl	80105fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a090:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	b2db      	uxtb	r3, r3
 800a098:	f003 0304 	and.w	r3, r3, #4
 800a09c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a09e:	2003      	movs	r0, #3
 800a0a0:	f7fa ffac 	bl	8004ffc <memp_malloc>
 800a0a4:	6138      	str	r0, [r7, #16]
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d104      	bne.n	800a0b6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a0ac:	68b8      	ldr	r0, [r7, #8]
 800a0ae:	f7fb fe77 	bl	8005da0 <pbuf_free>
    return NULL;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e060      	b.n	800a178 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a0bc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	891a      	ldrh	r2, [r3, #8]
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d205      	bcs.n	800a0e2 <tcp_create_segment+0x86>
 800a0d6:	4b2a      	ldr	r3, [pc, #168]	@ (800a180 <tcp_create_segment+0x124>)
 800a0d8:	22b0      	movs	r2, #176	@ 0xb0
 800a0da:	492d      	ldr	r1, [pc, #180]	@ (800a190 <tcp_create_segment+0x134>)
 800a0dc:	482a      	ldr	r0, [pc, #168]	@ (800a188 <tcp_create_segment+0x12c>)
 800a0de:	f006 fa8d 	bl	80105fc <iprintf>
  seg->len = p->tot_len - optlen;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	891a      	ldrh	r2, [r3, #8]
 800a0e6:	7dfb      	ldrb	r3, [r7, #23]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a0f2:	2114      	movs	r1, #20
 800a0f4:	68b8      	ldr	r0, [r7, #8]
 800a0f6:	f7fb fdbd 	bl	8005c74 <pbuf_add_header>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d004      	beq.n	800a10a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a100:	6938      	ldr	r0, [r7, #16]
 800a102:	f7fd f8d2 	bl	80072aa <tcp_seg_free>
    return NULL;
 800a106:	2300      	movs	r3, #0
 800a108:	e036      	b.n	800a178 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	8ada      	ldrh	r2, [r3, #22]
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	68dc      	ldr	r4, [r3, #12]
 800a11c:	4610      	mov	r0, r2
 800a11e:	f7fa faf5 	bl	800470c <lwip_htons>
 800a122:	4603      	mov	r3, r0
 800a124:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	8b1a      	ldrh	r2, [r3, #24]
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	68dc      	ldr	r4, [r3, #12]
 800a12e:	4610      	mov	r0, r2
 800a130:	f7fa faec 	bl	800470c <lwip_htons>
 800a134:	4603      	mov	r3, r0
 800a136:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	68dc      	ldr	r4, [r3, #12]
 800a13c:	6838      	ldr	r0, [r7, #0]
 800a13e:	f7fa fafb 	bl	8004738 <lwip_htonl>
 800a142:	4603      	mov	r3, r0
 800a144:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	089b      	lsrs	r3, r3, #2
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	3305      	adds	r3, #5
 800a14e:	b29b      	uxth	r3, r3
 800a150:	031b      	lsls	r3, r3, #12
 800a152:	b29a      	uxth	r2, r3
 800a154:	79fb      	ldrb	r3, [r7, #7]
 800a156:	b29b      	uxth	r3, r3
 800a158:	4313      	orrs	r3, r2
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	68dc      	ldr	r4, [r3, #12]
 800a160:	4610      	mov	r0, r2
 800a162:	f7fa fad3 	bl	800470c <lwip_htons>
 800a166:	4603      	mov	r3, r0
 800a168:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	749a      	strb	r2, [r3, #18]
 800a172:	2200      	movs	r2, #0
 800a174:	74da      	strb	r2, [r3, #19]
  return seg;
 800a176:	693b      	ldr	r3, [r7, #16]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	371c      	adds	r7, #28
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd90      	pop	{r4, r7, pc}
 800a180:	08012ad8 	.word	0x08012ad8
 800a184:	08012b0c 	.word	0x08012b0c
 800a188:	08012b2c 	.word	0x08012b2c
 800a18c:	08012b54 	.word	0x08012b54
 800a190:	08012b78 	.word	0x08012b78

0800a194 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a194:	b590      	push	{r4, r7, lr}
 800a196:	b08b      	sub	sp, #44	@ 0x2c
 800a198:	af02      	add	r7, sp, #8
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61fb      	str	r3, [r7, #28]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d106      	bne.n	800a1c0 <tcp_split_unsent_seg+0x2c>
 800a1b2:	4b95      	ldr	r3, [pc, #596]	@ (800a408 <tcp_split_unsent_seg+0x274>)
 800a1b4:	f240 324b 	movw	r2, #843	@ 0x34b
 800a1b8:	4994      	ldr	r1, [pc, #592]	@ (800a40c <tcp_split_unsent_seg+0x278>)
 800a1ba:	4895      	ldr	r0, [pc, #596]	@ (800a410 <tcp_split_unsent_seg+0x27c>)
 800a1bc:	f006 fa1e 	bl	80105fc <iprintf>

  useg = pcb->unsent;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d102      	bne.n	800a1d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d0:	e116      	b.n	800a400 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a1d2:	887b      	ldrh	r3, [r7, #2]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d109      	bne.n	800a1ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a1d8:	4b8b      	ldr	r3, [pc, #556]	@ (800a408 <tcp_split_unsent_seg+0x274>)
 800a1da:	f240 3253 	movw	r2, #851	@ 0x353
 800a1de:	498d      	ldr	r1, [pc, #564]	@ (800a414 <tcp_split_unsent_seg+0x280>)
 800a1e0:	488b      	ldr	r0, [pc, #556]	@ (800a410 <tcp_split_unsent_seg+0x27c>)
 800a1e2:	f006 fa0b 	bl	80105fc <iprintf>
    return ERR_VAL;
 800a1e6:	f06f 0305 	mvn.w	r3, #5
 800a1ea:	e109      	b.n	800a400 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	891b      	ldrh	r3, [r3, #8]
 800a1f0:	887a      	ldrh	r2, [r7, #2]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d301      	bcc.n	800a1fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e102      	b.n	800a400 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a1fe:	887a      	ldrh	r2, [r7, #2]
 800a200:	429a      	cmp	r2, r3
 800a202:	d906      	bls.n	800a212 <tcp_split_unsent_seg+0x7e>
 800a204:	4b80      	ldr	r3, [pc, #512]	@ (800a408 <tcp_split_unsent_seg+0x274>)
 800a206:	f240 325b 	movw	r2, #859	@ 0x35b
 800a20a:	4983      	ldr	r1, [pc, #524]	@ (800a418 <tcp_split_unsent_seg+0x284>)
 800a20c:	4880      	ldr	r0, [pc, #512]	@ (800a410 <tcp_split_unsent_seg+0x27c>)
 800a20e:	f006 f9f5 	bl	80105fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	891b      	ldrh	r3, [r3, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d106      	bne.n	800a228 <tcp_split_unsent_seg+0x94>
 800a21a:	4b7b      	ldr	r3, [pc, #492]	@ (800a408 <tcp_split_unsent_seg+0x274>)
 800a21c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800a220:	497e      	ldr	r1, [pc, #504]	@ (800a41c <tcp_split_unsent_seg+0x288>)
 800a222:	487b      	ldr	r0, [pc, #492]	@ (800a410 <tcp_split_unsent_seg+0x27c>)
 800a224:	f006 f9ea 	bl	80105fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	7a9b      	ldrb	r3, [r3, #10]
 800a22c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	b2db      	uxtb	r3, r3
 800a234:	f003 0304 	and.w	r3, r3, #4
 800a238:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	891a      	ldrh	r2, [r3, #8]
 800a23e:	887b      	ldrh	r3, [r7, #2]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a244:	7bbb      	ldrb	r3, [r7, #14]
 800a246:	b29a      	uxth	r2, r3
 800a248:	89bb      	ldrh	r3, [r7, #12]
 800a24a:	4413      	add	r3, r2
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a252:	4619      	mov	r1, r3
 800a254:	2036      	movs	r0, #54	@ 0x36
 800a256:	f7fb fabf 	bl	80057d8 <pbuf_alloc>
 800a25a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f000 80b7 	beq.w	800a3d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	891a      	ldrh	r2, [r3, #8]
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	891b      	ldrh	r3, [r3, #8]
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	b29a      	uxth	r2, r3
 800a272:	887b      	ldrh	r3, [r7, #2]
 800a274:	4413      	add	r3, r2
 800a276:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	6858      	ldr	r0, [r3, #4]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	685a      	ldr	r2, [r3, #4]
 800a280:	7bbb      	ldrb	r3, [r7, #14]
 800a282:	18d1      	adds	r1, r2, r3
 800a284:	897b      	ldrh	r3, [r7, #10]
 800a286:	89ba      	ldrh	r2, [r7, #12]
 800a288:	f7fb ff84 	bl	8006194 <pbuf_copy_partial>
 800a28c:	4603      	mov	r3, r0
 800a28e:	461a      	mov	r2, r3
 800a290:	89bb      	ldrh	r3, [r7, #12]
 800a292:	4293      	cmp	r3, r2
 800a294:	f040 809f 	bne.w	800a3d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	899b      	ldrh	r3, [r3, #12]
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fa fa33 	bl	800470c <lwip_htons>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a2b4:	7efb      	ldrb	r3, [r7, #27]
 800a2b6:	f003 0308 	and.w	r3, r3, #8
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d007      	beq.n	800a2ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a2be:	7efb      	ldrb	r3, [r7, #27]
 800a2c0:	f023 0308 	bic.w	r3, r3, #8
 800a2c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a2c6:	7ebb      	ldrb	r3, [r7, #26]
 800a2c8:	f043 0308 	orr.w	r3, r3, #8
 800a2cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a2ce:	7efb      	ldrb	r3, [r7, #27]
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d007      	beq.n	800a2e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a2d8:	7efb      	ldrb	r3, [r7, #27]
 800a2da:	f023 0301 	bic.w	r3, r3, #1
 800a2de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a2e0:	7ebb      	ldrb	r3, [r7, #26]
 800a2e2:	f043 0301 	orr.w	r3, r3, #1
 800a2e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fa fa22 	bl	8004738 <lwip_htonl>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	887b      	ldrh	r3, [r7, #2]
 800a2f8:	18d1      	adds	r1, r2, r3
 800a2fa:	7eba      	ldrb	r2, [r7, #26]
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	460b      	mov	r3, r1
 800a302:	6939      	ldr	r1, [r7, #16]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7ff fea9 	bl	800a05c <tcp_create_segment>
 800a30a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d063      	beq.n	800a3da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	4618      	mov	r0, r3
 800a318:	f7fb fdca 	bl	8005eb0 <pbuf_clen>
 800a31c:	4603      	mov	r3, r0
 800a31e:	461a      	mov	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a326:	1a9b      	subs	r3, r3, r2
 800a328:	b29a      	uxth	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	6858      	ldr	r0, [r3, #4]
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	891a      	ldrh	r2, [r3, #8]
 800a33a:	89bb      	ldrh	r3, [r7, #12]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	b29b      	uxth	r3, r3
 800a340:	4619      	mov	r1, r3
 800a342:	f7fb fba7 	bl	8005a94 <pbuf_realloc>
  useg->len -= remainder;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	891a      	ldrh	r2, [r3, #8]
 800a34a:	89bb      	ldrh	r3, [r7, #12]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	b29a      	uxth	r2, r3
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	899b      	ldrh	r3, [r3, #12]
 800a35a:	b29c      	uxth	r4, r3
 800a35c:	7efb      	ldrb	r3, [r7, #27]
 800a35e:	b29b      	uxth	r3, r3
 800a360:	4618      	mov	r0, r3
 800a362:	f7fa f9d3 	bl	800470c <lwip_htons>
 800a366:	4603      	mov	r3, r0
 800a368:	461a      	mov	r2, r3
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	4322      	orrs	r2, r4
 800a370:	b292      	uxth	r2, r2
 800a372:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fb fd99 	bl	8005eb0 <pbuf_clen>
 800a37e:	4603      	mov	r3, r0
 800a380:	461a      	mov	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a388:	4413      	add	r3, r2
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	4618      	mov	r0, r3
 800a398:	f7fb fd8a 	bl	8005eb0 <pbuf_clen>
 800a39c:	4603      	mov	r3, r0
 800a39e:	461a      	mov	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a3a6:	4413      	add	r3, r2
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d103      	bne.n	800a3ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	e016      	b.n	800a400 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a3d2:	bf00      	nop
 800a3d4:	e002      	b.n	800a3dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a3d6:	bf00      	nop
 800a3d8:	e000      	b.n	800a3dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a3da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d006      	beq.n	800a3f0 <tcp_split_unsent_seg+0x25c>
 800a3e2:	4b09      	ldr	r3, [pc, #36]	@ (800a408 <tcp_split_unsent_seg+0x274>)
 800a3e4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800a3e8:	490d      	ldr	r1, [pc, #52]	@ (800a420 <tcp_split_unsent_seg+0x28c>)
 800a3ea:	4809      	ldr	r0, [pc, #36]	@ (800a410 <tcp_split_unsent_seg+0x27c>)
 800a3ec:	f006 f906 	bl	80105fc <iprintf>
  if (p != NULL) {
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a3f6:	6938      	ldr	r0, [r7, #16]
 800a3f8:	f7fb fcd2 	bl	8005da0 <pbuf_free>
  }

  return ERR_MEM;
 800a3fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a400:	4618      	mov	r0, r3
 800a402:	3724      	adds	r7, #36	@ 0x24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd90      	pop	{r4, r7, pc}
 800a408:	08012ad8 	.word	0x08012ad8
 800a40c:	08012e6c 	.word	0x08012e6c
 800a410:	08012b2c 	.word	0x08012b2c
 800a414:	08012e90 	.word	0x08012e90
 800a418:	08012eb4 	.word	0x08012eb4
 800a41c:	08012ec4 	.word	0x08012ec4
 800a420:	08012ed4 	.word	0x08012ed4

0800a424 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a424:	b590      	push	{r4, r7, lr}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d106      	bne.n	800a440 <tcp_send_fin+0x1c>
 800a432:	4b21      	ldr	r3, [pc, #132]	@ (800a4b8 <tcp_send_fin+0x94>)
 800a434:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800a438:	4920      	ldr	r1, [pc, #128]	@ (800a4bc <tcp_send_fin+0x98>)
 800a43a:	4821      	ldr	r0, [pc, #132]	@ (800a4c0 <tcp_send_fin+0x9c>)
 800a43c:	f006 f8de 	bl	80105fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d02e      	beq.n	800a4a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	e002      	b.n	800a456 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1f8      	bne.n	800a450 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	899b      	ldrh	r3, [r3, #12]
 800a464:	b29b      	uxth	r3, r3
 800a466:	4618      	mov	r0, r3
 800a468:	f7fa f950 	bl	800470c <lwip_htons>
 800a46c:	4603      	mov	r3, r0
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	f003 0307 	and.w	r3, r3, #7
 800a474:	2b00      	cmp	r3, #0
 800a476:	d116      	bne.n	800a4a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	899b      	ldrh	r3, [r3, #12]
 800a47e:	b29c      	uxth	r4, r3
 800a480:	2001      	movs	r0, #1
 800a482:	f7fa f943 	bl	800470c <lwip_htons>
 800a486:	4603      	mov	r3, r0
 800a488:	461a      	mov	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	4322      	orrs	r2, r4
 800a490:	b292      	uxth	r2, r2
 800a492:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	8b5b      	ldrh	r3, [r3, #26]
 800a498:	f043 0320 	orr.w	r3, r3, #32
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	e004      	b.n	800a4b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a4a6:	2101      	movs	r1, #1
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f80b 	bl	800a4c4 <tcp_enqueue_flags>
 800a4ae:	4603      	mov	r3, r0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd90      	pop	{r4, r7, pc}
 800a4b8:	08012ad8 	.word	0x08012ad8
 800a4bc:	08012ee0 	.word	0x08012ee0
 800a4c0:	08012b2c 	.word	0x08012b2c

0800a4c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b08a      	sub	sp, #40	@ 0x28
 800a4c8:	af02      	add	r7, sp, #8
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a4d8:	78fb      	ldrb	r3, [r7, #3]
 800a4da:	f003 0303 	and.w	r3, r3, #3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d106      	bne.n	800a4f0 <tcp_enqueue_flags+0x2c>
 800a4e2:	4b67      	ldr	r3, [pc, #412]	@ (800a680 <tcp_enqueue_flags+0x1bc>)
 800a4e4:	f240 4211 	movw	r2, #1041	@ 0x411
 800a4e8:	4966      	ldr	r1, [pc, #408]	@ (800a684 <tcp_enqueue_flags+0x1c0>)
 800a4ea:	4867      	ldr	r0, [pc, #412]	@ (800a688 <tcp_enqueue_flags+0x1c4>)
 800a4ec:	f006 f886 	bl	80105fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d106      	bne.n	800a504 <tcp_enqueue_flags+0x40>
 800a4f6:	4b62      	ldr	r3, [pc, #392]	@ (800a680 <tcp_enqueue_flags+0x1bc>)
 800a4f8:	f240 4213 	movw	r2, #1043	@ 0x413
 800a4fc:	4963      	ldr	r1, [pc, #396]	@ (800a68c <tcp_enqueue_flags+0x1c8>)
 800a4fe:	4862      	ldr	r0, [pc, #392]	@ (800a688 <tcp_enqueue_flags+0x1c4>)
 800a500:	f006 f87c 	bl	80105fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a504:	78fb      	ldrb	r3, [r7, #3]
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a50e:	2301      	movs	r3, #1
 800a510:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a512:	7ffb      	ldrb	r3, [r7, #31]
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	b2db      	uxtb	r3, r3
 800a518:	f003 0304 	and.w	r3, r3, #4
 800a51c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
 800a520:	b29b      	uxth	r3, r3
 800a522:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a526:	4619      	mov	r1, r3
 800a528:	2036      	movs	r0, #54	@ 0x36
 800a52a:	f7fb f955 	bl	80057d8 <pbuf_alloc>
 800a52e:	6138      	str	r0, [r7, #16]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d109      	bne.n	800a54a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	8b5b      	ldrh	r3, [r3, #26]
 800a53a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a53e:	b29a      	uxth	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a544:	f04f 33ff 	mov.w	r3, #4294967295
 800a548:	e095      	b.n	800a676 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	895a      	ldrh	r2, [r3, #10]
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
 800a550:	b29b      	uxth	r3, r3
 800a552:	429a      	cmp	r2, r3
 800a554:	d206      	bcs.n	800a564 <tcp_enqueue_flags+0xa0>
 800a556:	4b4a      	ldr	r3, [pc, #296]	@ (800a680 <tcp_enqueue_flags+0x1bc>)
 800a558:	f240 4239 	movw	r2, #1081	@ 0x439
 800a55c:	494c      	ldr	r1, [pc, #304]	@ (800a690 <tcp_enqueue_flags+0x1cc>)
 800a55e:	484a      	ldr	r0, [pc, #296]	@ (800a688 <tcp_enqueue_flags+0x1c4>)
 800a560:	f006 f84c 	bl	80105fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800a568:	78fa      	ldrb	r2, [r7, #3]
 800a56a:	7ffb      	ldrb	r3, [r7, #31]
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	460b      	mov	r3, r1
 800a570:	6939      	ldr	r1, [r7, #16]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7ff fd72 	bl	800a05c <tcp_create_segment>
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d109      	bne.n	800a594 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	8b5b      	ldrh	r3, [r3, #26]
 800a584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a588:	b29a      	uxth	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a58e:	f04f 33ff 	mov.w	r3, #4294967295
 800a592:	e070      	b.n	800a676 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	f003 0303 	and.w	r3, r3, #3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d006      	beq.n	800a5ae <tcp_enqueue_flags+0xea>
 800a5a0:	4b37      	ldr	r3, [pc, #220]	@ (800a680 <tcp_enqueue_flags+0x1bc>)
 800a5a2:	f240 4242 	movw	r2, #1090	@ 0x442
 800a5a6:	493b      	ldr	r1, [pc, #236]	@ (800a694 <tcp_enqueue_flags+0x1d0>)
 800a5a8:	4837      	ldr	r0, [pc, #220]	@ (800a688 <tcp_enqueue_flags+0x1c4>)
 800a5aa:	f006 f827 	bl	80105fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	891b      	ldrh	r3, [r3, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d006      	beq.n	800a5c4 <tcp_enqueue_flags+0x100>
 800a5b6:	4b32      	ldr	r3, [pc, #200]	@ (800a680 <tcp_enqueue_flags+0x1bc>)
 800a5b8:	f240 4243 	movw	r2, #1091	@ 0x443
 800a5bc:	4936      	ldr	r1, [pc, #216]	@ (800a698 <tcp_enqueue_flags+0x1d4>)
 800a5be:	4832      	ldr	r0, [pc, #200]	@ (800a688 <tcp_enqueue_flags+0x1c4>)
 800a5c0:	f006 f81c 	bl	80105fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d103      	bne.n	800a5d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a5d2:	e00d      	b.n	800a5f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5d8:	61bb      	str	r3, [r7, #24]
 800a5da:	e002      	b.n	800a5e2 <tcp_enqueue_flags+0x11e>
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	61bb      	str	r3, [r7, #24]
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1f8      	bne.n	800a5dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a5f8:	78fb      	ldrb	r3, [r7, #3]
 800a5fa:	f003 0302 	and.w	r3, r3, #2
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d104      	bne.n	800a60c <tcp_enqueue_flags+0x148>
 800a602:	78fb      	ldrb	r3, [r7, #3]
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d004      	beq.n	800a616 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a616:	78fb      	ldrb	r3, [r7, #3]
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d006      	beq.n	800a62e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	8b5b      	ldrh	r3, [r3, #26]
 800a624:	f043 0320 	orr.w	r3, r3, #32
 800a628:	b29a      	uxth	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	4618      	mov	r0, r3
 800a634:	f7fb fc3c 	bl	8005eb0 <pbuf_clen>
 800a638:	4603      	mov	r3, r0
 800a63a:	461a      	mov	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a642:	4413      	add	r3, r2
 800a644:	b29a      	uxth	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00e      	beq.n	800a674 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10a      	bne.n	800a674 <tcp_enqueue_flags+0x1b0>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <tcp_enqueue_flags+0x1b0>
 800a666:	4b06      	ldr	r3, [pc, #24]	@ (800a680 <tcp_enqueue_flags+0x1bc>)
 800a668:	f240 4265 	movw	r2, #1125	@ 0x465
 800a66c:	490b      	ldr	r1, [pc, #44]	@ (800a69c <tcp_enqueue_flags+0x1d8>)
 800a66e:	4806      	ldr	r0, [pc, #24]	@ (800a688 <tcp_enqueue_flags+0x1c4>)
 800a670:	f005 ffc4 	bl	80105fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3720      	adds	r7, #32
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	08012ad8 	.word	0x08012ad8
 800a684:	08012efc 	.word	0x08012efc
 800a688:	08012b2c 	.word	0x08012b2c
 800a68c:	08012f54 	.word	0x08012f54
 800a690:	08012f74 	.word	0x08012f74
 800a694:	08012fb0 	.word	0x08012fb0
 800a698:	08012fc8 	.word	0x08012fc8
 800a69c:	08012ff4 	.word	0x08012ff4

0800a6a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a6a0:	b5b0      	push	{r4, r5, r7, lr}
 800a6a2:	b08a      	sub	sp, #40	@ 0x28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d106      	bne.n	800a6bc <tcp_output+0x1c>
 800a6ae:	4b8a      	ldr	r3, [pc, #552]	@ (800a8d8 <tcp_output+0x238>)
 800a6b0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800a6b4:	4989      	ldr	r1, [pc, #548]	@ (800a8dc <tcp_output+0x23c>)
 800a6b6:	488a      	ldr	r0, [pc, #552]	@ (800a8e0 <tcp_output+0x240>)
 800a6b8:	f005 ffa0 	bl	80105fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	7d1b      	ldrb	r3, [r3, #20]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d106      	bne.n	800a6d2 <tcp_output+0x32>
 800a6c4:	4b84      	ldr	r3, [pc, #528]	@ (800a8d8 <tcp_output+0x238>)
 800a6c6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800a6ca:	4986      	ldr	r1, [pc, #536]	@ (800a8e4 <tcp_output+0x244>)
 800a6cc:	4884      	ldr	r0, [pc, #528]	@ (800a8e0 <tcp_output+0x240>)
 800a6ce:	f005 ff95 	bl	80105fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a6d2:	4b85      	ldr	r3, [pc, #532]	@ (800a8e8 <tcp_output+0x248>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d101      	bne.n	800a6e0 <tcp_output+0x40>
    return ERR_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	e1ce      	b.n	800aa7e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	bf28      	it	cs
 800a6f0:	4613      	movcs	r3, r2
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10b      	bne.n	800a71a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	8b5b      	ldrh	r3, [r3, #26]
 800a706:	f003 0302 	and.w	r3, r3, #2
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 81aa 	beq.w	800aa64 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fdcb 	bl	800b2ac <tcp_send_empty_ack>
 800a716:	4603      	mov	r3, r0
 800a718:	e1b1      	b.n	800aa7e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a71a:	6879      	ldr	r1, [r7, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3304      	adds	r3, #4
 800a720:	461a      	mov	r2, r3
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff fc7e 	bl	800a024 <tcp_route>
 800a728:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <tcp_output+0x96>
    return ERR_RTE;
 800a730:	f06f 0303 	mvn.w	r3, #3
 800a734:	e1a3      	b.n	800aa7e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <tcp_output+0xa4>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d111      	bne.n	800a768 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d002      	beq.n	800a750 <tcp_output+0xb0>
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	3304      	adds	r3, #4
 800a74e:	e000      	b.n	800a752 <tcp_output+0xb2>
 800a750:	2300      	movs	r3, #0
 800a752:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <tcp_output+0xc0>
      return ERR_RTE;
 800a75a:	f06f 0303 	mvn.w	r3, #3
 800a75e:	e18e      	b.n	800aa7e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	4618      	mov	r0, r3
 800a770:	f7f9 ffe2 	bl	8004738 <lwip_htonl>
 800a774:	4602      	mov	r2, r0
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a77e:	8912      	ldrh	r2, [r2, #8]
 800a780:	4413      	add	r3, r2
 800a782:	69ba      	ldr	r2, [r7, #24]
 800a784:	429a      	cmp	r2, r3
 800a786:	d227      	bcs.n	800a7d8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a78e:	461a      	mov	r2, r3
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	4293      	cmp	r3, r2
 800a794:	d114      	bne.n	800a7c0 <tcp_output+0x120>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d110      	bne.n	800a7c0 <tcp_output+0x120>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10b      	bne.n	800a7c0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	8b5b      	ldrh	r3, [r3, #26]
 800a7c4:	f003 0302 	and.w	r3, r3, #2
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 814d 	beq.w	800aa68 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fd6c 	bl	800b2ac <tcp_send_empty_ack>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	e152      	b.n	800aa7e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7e4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 811c 	beq.w	800aa26 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a7ee:	e002      	b.n	800a7f6 <tcp_output+0x156>
 800a7f0:	6a3b      	ldr	r3, [r7, #32]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	623b      	str	r3, [r7, #32]
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1f8      	bne.n	800a7f0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a7fe:	e112      	b.n	800aa26 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	899b      	ldrh	r3, [r3, #12]
 800a806:	b29b      	uxth	r3, r3
 800a808:	4618      	mov	r0, r3
 800a80a:	f7f9 ff7f 	bl	800470c <lwip_htons>
 800a80e:	4603      	mov	r3, r0
 800a810:	b2db      	uxtb	r3, r3
 800a812:	f003 0304 	and.w	r3, r3, #4
 800a816:	2b00      	cmp	r3, #0
 800a818:	d006      	beq.n	800a828 <tcp_output+0x188>
 800a81a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8d8 <tcp_output+0x238>)
 800a81c:	f240 5236 	movw	r2, #1334	@ 0x536
 800a820:	4932      	ldr	r1, [pc, #200]	@ (800a8ec <tcp_output+0x24c>)
 800a822:	482f      	ldr	r0, [pc, #188]	@ (800a8e0 <tcp_output+0x240>)
 800a824:	f005 feea 	bl	80105fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d01f      	beq.n	800a870 <tcp_output+0x1d0>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	8b5b      	ldrh	r3, [r3, #26]
 800a834:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d119      	bne.n	800a870 <tcp_output+0x1d0>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00b      	beq.n	800a85c <tcp_output+0x1bc>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d110      	bne.n	800a870 <tcp_output+0x1d0>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a852:	891a      	ldrh	r2, [r3, #8]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a858:	429a      	cmp	r2, r3
 800a85a:	d209      	bcs.n	800a870 <tcp_output+0x1d0>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a862:	2b00      	cmp	r3, #0
 800a864:	d004      	beq.n	800a870 <tcp_output+0x1d0>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a86c:	2b08      	cmp	r3, #8
 800a86e:	d901      	bls.n	800a874 <tcp_output+0x1d4>
 800a870:	2301      	movs	r3, #1
 800a872:	e000      	b.n	800a876 <tcp_output+0x1d6>
 800a874:	2300      	movs	r3, #0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d106      	bne.n	800a888 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	8b5b      	ldrh	r3, [r3, #26]
 800a87e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 80e4 	beq.w	800aa50 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	7d1b      	ldrb	r3, [r3, #20]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d00d      	beq.n	800a8ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	899b      	ldrh	r3, [r3, #12]
 800a896:	b29c      	uxth	r4, r3
 800a898:	2010      	movs	r0, #16
 800a89a:	f7f9 ff37 	bl	800470c <lwip_htons>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	4322      	orrs	r2, r4
 800a8a8:	b292      	uxth	r2, r2
 800a8aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	6879      	ldr	r1, [r7, #4]
 800a8b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a8b2:	f000 f909 	bl	800aac8 <tcp_output_segment>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d016      	beq.n	800a8f0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	8b5b      	ldrh	r3, [r3, #26]
 800a8c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	835a      	strh	r2, [r3, #26]
      return err;
 800a8d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8d4:	e0d3      	b.n	800aa7e <tcp_output+0x3de>
 800a8d6:	bf00      	nop
 800a8d8:	08012ad8 	.word	0x08012ad8
 800a8dc:	0801301c 	.word	0x0801301c
 800a8e0:	08012b2c 	.word	0x08012b2c
 800a8e4:	08013034 	.word	0x08013034
 800a8e8:	200082ec 	.word	0x200082ec
 800a8ec:	0801305c 	.word	0x0801305c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	7d1b      	ldrb	r3, [r3, #20]
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d006      	beq.n	800a90e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	8b5b      	ldrh	r3, [r3, #26]
 800a904:	f023 0303 	bic.w	r3, r3, #3
 800a908:	b29a      	uxth	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	4618      	mov	r0, r3
 800a916:	f7f9 ff0f 	bl	8004738 <lwip_htonl>
 800a91a:	4604      	mov	r4, r0
 800a91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91e:	891b      	ldrh	r3, [r3, #8]
 800a920:	461d      	mov	r5, r3
 800a922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	899b      	ldrh	r3, [r3, #12]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7f9 feee 	bl	800470c <lwip_htons>
 800a930:	4603      	mov	r3, r0
 800a932:	b2db      	uxtb	r3, r3
 800a934:	f003 0303 	and.w	r3, r3, #3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <tcp_output+0x2a0>
 800a93c:	2301      	movs	r3, #1
 800a93e:	e000      	b.n	800a942 <tcp_output+0x2a2>
 800a940:	2300      	movs	r3, #0
 800a942:	442b      	add	r3, r5
 800a944:	4423      	add	r3, r4
 800a946:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	2b00      	cmp	r3, #0
 800a952:	da02      	bge.n	800a95a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95c:	891b      	ldrh	r3, [r3, #8]
 800a95e:	461c      	mov	r4, r3
 800a960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	899b      	ldrh	r3, [r3, #12]
 800a966:	b29b      	uxth	r3, r3
 800a968:	4618      	mov	r0, r3
 800a96a:	f7f9 fecf 	bl	800470c <lwip_htons>
 800a96e:	4603      	mov	r3, r0
 800a970:	b2db      	uxtb	r3, r3
 800a972:	f003 0303 	and.w	r3, r3, #3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d001      	beq.n	800a97e <tcp_output+0x2de>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e000      	b.n	800a980 <tcp_output+0x2e0>
 800a97e:	2300      	movs	r3, #0
 800a980:	4423      	add	r3, r4
 800a982:	2b00      	cmp	r3, #0
 800a984:	d049      	beq.n	800aa1a <tcp_output+0x37a>
      seg->next = NULL;
 800a986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a990:	2b00      	cmp	r3, #0
 800a992:	d105      	bne.n	800a9a0 <tcp_output+0x300>
        pcb->unacked = seg;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a998:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800a99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99c:	623b      	str	r3, [r7, #32]
 800a99e:	e03f      	b.n	800aa20 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7f9 fec6 	bl	8004738 <lwip_htonl>
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7f9 febf 	bl	8004738 <lwip_htonl>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	1ae3      	subs	r3, r4, r3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	da24      	bge.n	800aa0c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	3370      	adds	r3, #112	@ 0x70
 800a9c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a9c8:	e002      	b.n	800a9d0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d011      	beq.n	800a9fc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7f9 fea9 	bl	8004738 <lwip_htonl>
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7f9 fea2 	bl	8004738 <lwip_htonl>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	dbe6      	blt.n	800a9ca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa02:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	e009      	b.n	800aa20 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa10:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	623b      	str	r3, [r7, #32]
 800aa18:	e002      	b.n	800aa20 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800aa1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa1c:	f7fc fc45 	bl	80072aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa24:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800aa26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d012      	beq.n	800aa52 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7f9 fe80 	bl	8004738 <lwip_htonl>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa42:	8912      	ldrh	r2, [r2, #8]
 800aa44:	4413      	add	r3, r2
  while (seg != NULL &&
 800aa46:	69ba      	ldr	r2, [r7, #24]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	f4bf aed9 	bcs.w	800a800 <tcp_output+0x160>
 800aa4e:	e000      	b.n	800aa52 <tcp_output+0x3b2>
      break;
 800aa50:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d108      	bne.n	800aa6c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800aa62:	e004      	b.n	800aa6e <tcp_output+0x3ce>
    goto output_done;
 800aa64:	bf00      	nop
 800aa66:	e002      	b.n	800aa6e <tcp_output+0x3ce>
    goto output_done;
 800aa68:	bf00      	nop
 800aa6a:	e000      	b.n	800aa6e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800aa6c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	8b5b      	ldrh	r3, [r3, #26]
 800aa72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3728      	adds	r7, #40	@ 0x28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bdb0      	pop	{r4, r5, r7, pc}
 800aa86:	bf00      	nop

0800aa88 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d106      	bne.n	800aaa4 <tcp_output_segment_busy+0x1c>
 800aa96:	4b09      	ldr	r3, [pc, #36]	@ (800aabc <tcp_output_segment_busy+0x34>)
 800aa98:	f240 529a 	movw	r2, #1434	@ 0x59a
 800aa9c:	4908      	ldr	r1, [pc, #32]	@ (800aac0 <tcp_output_segment_busy+0x38>)
 800aa9e:	4809      	ldr	r0, [pc, #36]	@ (800aac4 <tcp_output_segment_busy+0x3c>)
 800aaa0:	f005 fdac 	bl	80105fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	7b9b      	ldrb	r3, [r3, #14]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d001      	beq.n	800aab2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e000      	b.n	800aab4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	08012ad8 	.word	0x08012ad8
 800aac0:	08013074 	.word	0x08013074
 800aac4:	08012b2c 	.word	0x08012b2c

0800aac8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800aac8:	b5b0      	push	{r4, r5, r7, lr}
 800aaca:	b08c      	sub	sp, #48	@ 0x30
 800aacc:	af04      	add	r7, sp, #16
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d106      	bne.n	800aae8 <tcp_output_segment+0x20>
 800aada:	4b64      	ldr	r3, [pc, #400]	@ (800ac6c <tcp_output_segment+0x1a4>)
 800aadc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800aae0:	4963      	ldr	r1, [pc, #396]	@ (800ac70 <tcp_output_segment+0x1a8>)
 800aae2:	4864      	ldr	r0, [pc, #400]	@ (800ac74 <tcp_output_segment+0x1ac>)
 800aae4:	f005 fd8a 	bl	80105fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d106      	bne.n	800aafc <tcp_output_segment+0x34>
 800aaee:	4b5f      	ldr	r3, [pc, #380]	@ (800ac6c <tcp_output_segment+0x1a4>)
 800aaf0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800aaf4:	4960      	ldr	r1, [pc, #384]	@ (800ac78 <tcp_output_segment+0x1b0>)
 800aaf6:	485f      	ldr	r0, [pc, #380]	@ (800ac74 <tcp_output_segment+0x1ac>)
 800aaf8:	f005 fd80 	bl	80105fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d106      	bne.n	800ab10 <tcp_output_segment+0x48>
 800ab02:	4b5a      	ldr	r3, [pc, #360]	@ (800ac6c <tcp_output_segment+0x1a4>)
 800ab04:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800ab08:	495c      	ldr	r1, [pc, #368]	@ (800ac7c <tcp_output_segment+0x1b4>)
 800ab0a:	485a      	ldr	r0, [pc, #360]	@ (800ac74 <tcp_output_segment+0x1ac>)
 800ab0c:	f005 fd76 	bl	80105fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f7ff ffb9 	bl	800aa88 <tcp_output_segment_busy>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	e0a1      	b.n	800ac64 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	68dc      	ldr	r4, [r3, #12]
 800ab28:	4610      	mov	r0, r2
 800ab2a:	f7f9 fe05 	bl	8004738 <lwip_htonl>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	68dc      	ldr	r4, [r3, #12]
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	f7f9 fde6 	bl	800470c <lwip_htons>
 800ab40:	4603      	mov	r3, r0
 800ab42:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ab4c:	441a      	add	r2, r3
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	3314      	adds	r3, #20
 800ab58:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	7a9b      	ldrb	r3, [r3, #10]
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d015      	beq.n	800ab92 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	6879      	ldr	r1, [r7, #4]
 800ab6e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800ab72:	f7fc fe91 	bl	8007898 <tcp_eff_send_mss_netif>
 800ab76:	4603      	mov	r3, r0
 800ab78:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ab7a:	8b7b      	ldrh	r3, [r7, #26]
 800ab7c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7f9 fdd9 	bl	8004738 <lwip_htonl>
 800ab86:	4602      	mov	r2, r0
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	da02      	bge.n	800aba2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10c      	bne.n	800abc4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800abaa:	4b35      	ldr	r3, [pc, #212]	@ (800ac80 <tcp_output_segment+0x1b8>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7f9 fdbd 	bl	8004738 <lwip_htonl>
 800abbe:	4602      	mov	r2, r0
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	8959      	ldrh	r1, [r3, #10]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	8b3a      	ldrh	r2, [r7, #24]
 800abde:	1a8a      	subs	r2, r1, r2
 800abe0:	b292      	uxth	r2, r2
 800abe2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	8919      	ldrh	r1, [r3, #8]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	8b3a      	ldrh	r2, [r7, #24]
 800abf0:	1a8a      	subs	r2, r1, r2
 800abf2:	b292      	uxth	r2, r2
 800abf4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	68d2      	ldr	r2, [r2, #12]
 800abfe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	741a      	strb	r2, [r3, #16]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	68da      	ldr	r2, [r3, #12]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	7a9b      	ldrb	r3, [r3, #10]
 800ac14:	f003 0301 	and.w	r3, r3, #1
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <tcp_output_segment+0x158>
 800ac1c:	2318      	movs	r3, #24
 800ac1e:	e000      	b.n	800ac22 <tcp_output_segment+0x15a>
 800ac20:	2314      	movs	r3, #20
 800ac22:	4413      	add	r3, r2
 800ac24:	69fa      	ldr	r2, [r7, #28]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d006      	beq.n	800ac38 <tcp_output_segment+0x170>
 800ac2a:	4b10      	ldr	r3, [pc, #64]	@ (800ac6c <tcp_output_segment+0x1a4>)
 800ac2c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800ac30:	4914      	ldr	r1, [pc, #80]	@ (800ac84 <tcp_output_segment+0x1bc>)
 800ac32:	4810      	ldr	r0, [pc, #64]	@ (800ac74 <tcp_output_segment+0x1ac>)
 800ac34:	f005 fce2 	bl	80105fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6858      	ldr	r0, [r3, #4]
 800ac3c:	68b9      	ldr	r1, [r7, #8]
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	1d1c      	adds	r4, r3, #4
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	7add      	ldrb	r5, [r3, #11]
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	7a9b      	ldrb	r3, [r3, #10]
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	9202      	str	r2, [sp, #8]
 800ac4e:	2206      	movs	r2, #6
 800ac50:	9201      	str	r2, [sp, #4]
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	462b      	mov	r3, r5
 800ac56:	4622      	mov	r2, r4
 800ac58:	f004 fba2 	bl	800f3a0 <ip4_output_if>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ac60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3720      	adds	r7, #32
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ac6c:	08012ad8 	.word	0x08012ad8
 800ac70:	0801309c 	.word	0x0801309c
 800ac74:	08012b2c 	.word	0x08012b2c
 800ac78:	080130bc 	.word	0x080130bc
 800ac7c:	080130dc 	.word	0x080130dc
 800ac80:	200082a0 	.word	0x200082a0
 800ac84:	08013100 	.word	0x08013100

0800ac88 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ac88:	b5b0      	push	{r4, r5, r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d106      	bne.n	800aca4 <tcp_rexmit_rto_prepare+0x1c>
 800ac96:	4b31      	ldr	r3, [pc, #196]	@ (800ad5c <tcp_rexmit_rto_prepare+0xd4>)
 800ac98:	f240 6263 	movw	r2, #1635	@ 0x663
 800ac9c:	4930      	ldr	r1, [pc, #192]	@ (800ad60 <tcp_rexmit_rto_prepare+0xd8>)
 800ac9e:	4831      	ldr	r0, [pc, #196]	@ (800ad64 <tcp_rexmit_rto_prepare+0xdc>)
 800aca0:	f005 fcac 	bl	80105fc <iprintf>

  if (pcb->unacked == NULL) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d102      	bne.n	800acb2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800acac:	f06f 0305 	mvn.w	r3, #5
 800acb0:	e050      	b.n	800ad54 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	e00b      	b.n	800acd2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f7ff fee4 	bl	800aa88 <tcp_output_segment_busy>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800acc6:	f06f 0305 	mvn.w	r3, #5
 800acca:	e043      	b.n	800ad54 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	60fb      	str	r3, [r7, #12]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1ef      	bne.n	800acba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f7ff fed4 	bl	800aa88 <tcp_output_segment_busy>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d002      	beq.n	800acec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ace6:	f06f 0305 	mvn.w	r3, #5
 800acea:	e033      	b.n	800ad54 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	8b5b      	ldrh	r3, [r3, #26]
 800ad06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7f9 fd0e 	bl	8004738 <lwip_htonl>
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	891b      	ldrh	r3, [r3, #8]
 800ad22:	461d      	mov	r5, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	899b      	ldrh	r3, [r3, #12]
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7f9 fced 	bl	800470c <lwip_htons>
 800ad32:	4603      	mov	r3, r0
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	f003 0303 	and.w	r3, r3, #3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <tcp_rexmit_rto_prepare+0xba>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e000      	b.n	800ad44 <tcp_rexmit_rto_prepare+0xbc>
 800ad42:	2300      	movs	r3, #0
 800ad44:	442b      	add	r3, r5
 800ad46:	18e2      	adds	r2, r4, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bdb0      	pop	{r4, r5, r7, pc}
 800ad5c:	08012ad8 	.word	0x08012ad8
 800ad60:	08013114 	.word	0x08013114
 800ad64:	08012b2c 	.word	0x08012b2c

0800ad68 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <tcp_rexmit_rto_commit+0x1c>
 800ad76:	4b0d      	ldr	r3, [pc, #52]	@ (800adac <tcp_rexmit_rto_commit+0x44>)
 800ad78:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ad7c:	490c      	ldr	r1, [pc, #48]	@ (800adb0 <tcp_rexmit_rto_commit+0x48>)
 800ad7e:	480d      	ldr	r0, [pc, #52]	@ (800adb4 <tcp_rexmit_rto_commit+0x4c>)
 800ad80:	f005 fc3c 	bl	80105fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad8a:	2bff      	cmp	r3, #255	@ 0xff
 800ad8c:	d007      	beq.n	800ad9e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad94:	3301      	adds	r3, #1
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7ff fc7e 	bl	800a6a0 <tcp_output>
}
 800ada4:	bf00      	nop
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	08012ad8 	.word	0x08012ad8
 800adb0:	08013138 	.word	0x08013138
 800adb4:	08012b2c 	.word	0x08012b2c

0800adb8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d106      	bne.n	800add4 <tcp_rexmit_rto+0x1c>
 800adc6:	4b0a      	ldr	r3, [pc, #40]	@ (800adf0 <tcp_rexmit_rto+0x38>)
 800adc8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800adcc:	4909      	ldr	r1, [pc, #36]	@ (800adf4 <tcp_rexmit_rto+0x3c>)
 800adce:	480a      	ldr	r0, [pc, #40]	@ (800adf8 <tcp_rexmit_rto+0x40>)
 800add0:	f005 fc14 	bl	80105fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7ff ff57 	bl	800ac88 <tcp_rexmit_rto_prepare>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d102      	bne.n	800ade6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7ff ffc1 	bl	800ad68 <tcp_rexmit_rto_commit>
  }
}
 800ade6:	bf00      	nop
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	08012ad8 	.word	0x08012ad8
 800adf4:	0801315c 	.word	0x0801315c
 800adf8:	08012b2c 	.word	0x08012b2c

0800adfc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800adfc:	b590      	push	{r4, r7, lr}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d106      	bne.n	800ae18 <tcp_rexmit+0x1c>
 800ae0a:	4b2f      	ldr	r3, [pc, #188]	@ (800aec8 <tcp_rexmit+0xcc>)
 800ae0c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800ae10:	492e      	ldr	r1, [pc, #184]	@ (800aecc <tcp_rexmit+0xd0>)
 800ae12:	482f      	ldr	r0, [pc, #188]	@ (800aed0 <tcp_rexmit+0xd4>)
 800ae14:	f005 fbf2 	bl	80105fc <iprintf>

  if (pcb->unacked == NULL) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d102      	bne.n	800ae26 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ae20:	f06f 0305 	mvn.w	r3, #5
 800ae24:	e04c      	b.n	800aec0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae2a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ae2c:	68b8      	ldr	r0, [r7, #8]
 800ae2e:	f7ff fe2b 	bl	800aa88 <tcp_output_segment_busy>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ae38:	f06f 0305 	mvn.w	r3, #5
 800ae3c:	e040      	b.n	800aec0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	336c      	adds	r3, #108	@ 0x6c
 800ae4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ae4c:	e002      	b.n	800ae54 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d011      	beq.n	800ae80 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7f9 fc67 	bl	8004738 <lwip_htonl>
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7f9 fc60 	bl	8004738 <lwip_htonl>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dbe6      	blt.n	800ae4e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d103      	bne.n	800ae9e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aea4:	2bff      	cmp	r3, #255	@ 0xff
 800aea6:	d007      	beq.n	800aeb8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aeae:	3301      	adds	r3, #1
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd90      	pop	{r4, r7, pc}
 800aec8:	08012ad8 	.word	0x08012ad8
 800aecc:	08013178 	.word	0x08013178
 800aed0:	08012b2c 	.word	0x08012b2c

0800aed4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d106      	bne.n	800aef0 <tcp_rexmit_fast+0x1c>
 800aee2:	4b2a      	ldr	r3, [pc, #168]	@ (800af8c <tcp_rexmit_fast+0xb8>)
 800aee4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800aee8:	4929      	ldr	r1, [pc, #164]	@ (800af90 <tcp_rexmit_fast+0xbc>)
 800aeea:	482a      	ldr	r0, [pc, #168]	@ (800af94 <tcp_rexmit_fast+0xc0>)
 800aeec:	f005 fb86 	bl	80105fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d044      	beq.n	800af82 <tcp_rexmit_fast+0xae>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	8b5b      	ldrh	r3, [r3, #26]
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	d13e      	bne.n	800af82 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7ff ff79 	bl	800adfc <tcp_rexmit>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d138      	bne.n	800af82 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800af1c:	4293      	cmp	r3, r2
 800af1e:	bf28      	it	cs
 800af20:	4613      	movcs	r3, r2
 800af22:	b29b      	uxth	r3, r3
 800af24:	0fda      	lsrs	r2, r3, #31
 800af26:	4413      	add	r3, r2
 800af28:	105b      	asrs	r3, r3, #1
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800af38:	461a      	mov	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	429a      	cmp	r2, r3
 800af42:	d206      	bcs.n	800af52 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af48:	005b      	lsls	r3, r3, #1
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af5c:	4619      	mov	r1, r3
 800af5e:	0049      	lsls	r1, r1, #1
 800af60:	440b      	add	r3, r1
 800af62:	b29b      	uxth	r3, r3
 800af64:	4413      	add	r3, r2
 800af66:	b29a      	uxth	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	8b5b      	ldrh	r3, [r3, #26]
 800af72:	f043 0304 	orr.w	r3, r3, #4
 800af76:	b29a      	uxth	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800af82:	bf00      	nop
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	08012ad8 	.word	0x08012ad8
 800af90:	08013190 	.word	0x08013190
 800af94:	08012b2c 	.word	0x08012b2c

0800af98 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	607b      	str	r3, [r7, #4]
 800afa2:	460b      	mov	r3, r1
 800afa4:	817b      	strh	r3, [r7, #10]
 800afa6:	4613      	mov	r3, r2
 800afa8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800afaa:	897a      	ldrh	r2, [r7, #10]
 800afac:	893b      	ldrh	r3, [r7, #8]
 800afae:	4413      	add	r3, r2
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	3314      	adds	r3, #20
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800afba:	4619      	mov	r1, r3
 800afbc:	2022      	movs	r0, #34	@ 0x22
 800afbe:	f7fa fc0b 	bl	80057d8 <pbuf_alloc>
 800afc2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d04d      	beq.n	800b066 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800afca:	897b      	ldrh	r3, [r7, #10]
 800afcc:	3313      	adds	r3, #19
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	8952      	ldrh	r2, [r2, #10]
 800afd2:	4293      	cmp	r3, r2
 800afd4:	db06      	blt.n	800afe4 <tcp_output_alloc_header_common+0x4c>
 800afd6:	4b26      	ldr	r3, [pc, #152]	@ (800b070 <tcp_output_alloc_header_common+0xd8>)
 800afd8:	f240 7223 	movw	r2, #1827	@ 0x723
 800afdc:	4925      	ldr	r1, [pc, #148]	@ (800b074 <tcp_output_alloc_header_common+0xdc>)
 800afde:	4826      	ldr	r0, [pc, #152]	@ (800b078 <tcp_output_alloc_header_common+0xe0>)
 800afe0:	f005 fb0c 	bl	80105fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800afea:	8c3b      	ldrh	r3, [r7, #32]
 800afec:	4618      	mov	r0, r3
 800afee:	f7f9 fb8d 	bl	800470c <lwip_htons>
 800aff2:	4603      	mov	r3, r0
 800aff4:	461a      	mov	r2, r3
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800affa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800affc:	4618      	mov	r0, r3
 800affe:	f7f9 fb85 	bl	800470c <lwip_htons>
 800b002:	4603      	mov	r3, r0
 800b004:	461a      	mov	r2, r3
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f7f9 fb91 	bl	8004738 <lwip_htonl>
 800b016:	4602      	mov	r2, r0
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b01c:	897b      	ldrh	r3, [r7, #10]
 800b01e:	089b      	lsrs	r3, r3, #2
 800b020:	b29b      	uxth	r3, r3
 800b022:	3305      	adds	r3, #5
 800b024:	b29b      	uxth	r3, r3
 800b026:	031b      	lsls	r3, r3, #12
 800b028:	b29a      	uxth	r2, r3
 800b02a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b02e:	b29b      	uxth	r3, r3
 800b030:	4313      	orrs	r3, r2
 800b032:	b29b      	uxth	r3, r3
 800b034:	4618      	mov	r0, r3
 800b036:	f7f9 fb69 	bl	800470c <lwip_htons>
 800b03a:	4603      	mov	r3, r0
 800b03c:	461a      	mov	r2, r3
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b042:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b044:	4618      	mov	r0, r3
 800b046:	f7f9 fb61 	bl	800470c <lwip_htons>
 800b04a:	4603      	mov	r3, r0
 800b04c:	461a      	mov	r2, r3
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	2200      	movs	r2, #0
 800b056:	741a      	strb	r2, [r3, #16]
 800b058:	2200      	movs	r2, #0
 800b05a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	2200      	movs	r2, #0
 800b060:	749a      	strb	r2, [r3, #18]
 800b062:	2200      	movs	r2, #0
 800b064:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b066:	697b      	ldr	r3, [r7, #20]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	08012ad8 	.word	0x08012ad8
 800b074:	080131b0 	.word	0x080131b0
 800b078:	08012b2c 	.word	0x08012b2c

0800b07c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b07c:	b5b0      	push	{r4, r5, r7, lr}
 800b07e:	b08a      	sub	sp, #40	@ 0x28
 800b080:	af04      	add	r7, sp, #16
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	607b      	str	r3, [r7, #4]
 800b086:	460b      	mov	r3, r1
 800b088:	817b      	strh	r3, [r7, #10]
 800b08a:	4613      	mov	r3, r2
 800b08c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d106      	bne.n	800b0a2 <tcp_output_alloc_header+0x26>
 800b094:	4b15      	ldr	r3, [pc, #84]	@ (800b0ec <tcp_output_alloc_header+0x70>)
 800b096:	f240 7242 	movw	r2, #1858	@ 0x742
 800b09a:	4915      	ldr	r1, [pc, #84]	@ (800b0f0 <tcp_output_alloc_header+0x74>)
 800b09c:	4815      	ldr	r0, [pc, #84]	@ (800b0f4 <tcp_output_alloc_header+0x78>)
 800b09e:	f005 faad 	bl	80105fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	8adb      	ldrh	r3, [r3, #22]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	8b12      	ldrh	r2, [r2, #24]
 800b0ae:	68f9      	ldr	r1, [r7, #12]
 800b0b0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800b0b2:	893d      	ldrh	r5, [r7, #8]
 800b0b4:	897c      	ldrh	r4, [r7, #10]
 800b0b6:	9103      	str	r1, [sp, #12]
 800b0b8:	2110      	movs	r1, #16
 800b0ba:	9102      	str	r1, [sp, #8]
 800b0bc:	9201      	str	r2, [sp, #4]
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	462a      	mov	r2, r5
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	f7ff ff67 	bl	800af98 <tcp_output_alloc_header_common>
 800b0ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d006      	beq.n	800b0e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b0da:	441a      	add	r2, r3
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800b0e0:	697b      	ldr	r3, [r7, #20]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bdb0      	pop	{r4, r5, r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	08012ad8 	.word	0x08012ad8
 800b0f0:	080131e0 	.word	0x080131e0
 800b0f4:	08012b2c 	.word	0x08012b2c

0800b0f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b088      	sub	sp, #32
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	4611      	mov	r1, r2
 800b104:	461a      	mov	r2, r3
 800b106:	460b      	mov	r3, r1
 800b108:	71fb      	strb	r3, [r7, #7]
 800b10a:	4613      	mov	r3, r2
 800b10c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d106      	bne.n	800b126 <tcp_output_fill_options+0x2e>
 800b118:	4b12      	ldr	r3, [pc, #72]	@ (800b164 <tcp_output_fill_options+0x6c>)
 800b11a:	f240 7256 	movw	r2, #1878	@ 0x756
 800b11e:	4912      	ldr	r1, [pc, #72]	@ (800b168 <tcp_output_fill_options+0x70>)
 800b120:	4812      	ldr	r0, [pc, #72]	@ (800b16c <tcp_output_fill_options+0x74>)
 800b122:	f005 fa6b 	bl	80105fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	3314      	adds	r3, #20
 800b130:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b132:	8bfb      	ldrh	r3, [r7, #30]
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	461a      	mov	r2, r3
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	f003 0304 	and.w	r3, r3, #4
 800b140:	4413      	add	r3, r2
 800b142:	3314      	adds	r3, #20
 800b144:	69ba      	ldr	r2, [r7, #24]
 800b146:	4413      	add	r3, r2
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d006      	beq.n	800b15c <tcp_output_fill_options+0x64>
 800b14e:	4b05      	ldr	r3, [pc, #20]	@ (800b164 <tcp_output_fill_options+0x6c>)
 800b150:	f240 7275 	movw	r2, #1909	@ 0x775
 800b154:	4906      	ldr	r1, [pc, #24]	@ (800b170 <tcp_output_fill_options+0x78>)
 800b156:	4805      	ldr	r0, [pc, #20]	@ (800b16c <tcp_output_fill_options+0x74>)
 800b158:	f005 fa50 	bl	80105fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b15c:	bf00      	nop
 800b15e:	3720      	adds	r7, #32
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	08012ad8 	.word	0x08012ad8
 800b168:	08013208 	.word	0x08013208
 800b16c:	08012b2c 	.word	0x08012b2c
 800b170:	08013100 	.word	0x08013100

0800b174 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08a      	sub	sp, #40	@ 0x28
 800b178:	af04      	add	r7, sp, #16
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d106      	bne.n	800b196 <tcp_output_control_segment+0x22>
 800b188:	4b1c      	ldr	r3, [pc, #112]	@ (800b1fc <tcp_output_control_segment+0x88>)
 800b18a:	f240 7287 	movw	r2, #1927	@ 0x787
 800b18e:	491c      	ldr	r1, [pc, #112]	@ (800b200 <tcp_output_control_segment+0x8c>)
 800b190:	481c      	ldr	r0, [pc, #112]	@ (800b204 <tcp_output_control_segment+0x90>)
 800b192:	f005 fa33 	bl	80105fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f7fe ff42 	bl	800a024 <tcp_route>
 800b1a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b1a8:	23fc      	movs	r3, #252	@ 0xfc
 800b1aa:	75fb      	strb	r3, [r7, #23]
 800b1ac:	e01c      	b.n	800b1e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d006      	beq.n	800b1c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	7adb      	ldrb	r3, [r3, #11]
 800b1b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	7a9b      	ldrb	r3, [r3, #10]
 800b1be:	757b      	strb	r3, [r7, #21]
 800b1c0:	e003      	b.n	800b1ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b1c2:	23ff      	movs	r3, #255	@ 0xff
 800b1c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b1ca:	7dba      	ldrb	r2, [r7, #22]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	9302      	str	r3, [sp, #8]
 800b1d0:	2306      	movs	r3, #6
 800b1d2:	9301      	str	r3, [sp, #4]
 800b1d4:	7d7b      	ldrb	r3, [r7, #21]
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	6879      	ldr	r1, [r7, #4]
 800b1de:	68b8      	ldr	r0, [r7, #8]
 800b1e0:	f004 f8de 	bl	800f3a0 <ip4_output_if>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b1e8:	68b8      	ldr	r0, [r7, #8]
 800b1ea:	f7fa fdd9 	bl	8005da0 <pbuf_free>
  return err;
 800b1ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	08012ad8 	.word	0x08012ad8
 800b200:	08013230 	.word	0x08013230
 800b204:	08012b2c 	.word	0x08012b2c

0800b208 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b208:	b590      	push	{r4, r7, lr}
 800b20a:	b08b      	sub	sp, #44	@ 0x2c
 800b20c:	af04      	add	r7, sp, #16
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d106      	bne.n	800b22a <tcp_rst+0x22>
 800b21c:	4b1f      	ldr	r3, [pc, #124]	@ (800b29c <tcp_rst+0x94>)
 800b21e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800b222:	491f      	ldr	r1, [pc, #124]	@ (800b2a0 <tcp_rst+0x98>)
 800b224:	481f      	ldr	r0, [pc, #124]	@ (800b2a4 <tcp_rst+0x9c>)
 800b226:	f005 f9e9 	bl	80105fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d106      	bne.n	800b23e <tcp_rst+0x36>
 800b230:	4b1a      	ldr	r3, [pc, #104]	@ (800b29c <tcp_rst+0x94>)
 800b232:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800b236:	491c      	ldr	r1, [pc, #112]	@ (800b2a8 <tcp_rst+0xa0>)
 800b238:	481a      	ldr	r0, [pc, #104]	@ (800b2a4 <tcp_rst+0x9c>)
 800b23a:	f005 f9df 	bl	80105fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b23e:	2300      	movs	r3, #0
 800b240:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b242:	f246 0308 	movw	r3, #24584	@ 0x6008
 800b246:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	b29c      	uxth	r4, r3
 800b24c:	68b8      	ldr	r0, [r7, #8]
 800b24e:	f7f9 fa73 	bl	8004738 <lwip_htonl>
 800b252:	4602      	mov	r2, r0
 800b254:	8abb      	ldrh	r3, [r7, #20]
 800b256:	9303      	str	r3, [sp, #12]
 800b258:	2314      	movs	r3, #20
 800b25a:	9302      	str	r3, [sp, #8]
 800b25c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	4613      	mov	r3, r2
 800b266:	2200      	movs	r2, #0
 800b268:	4621      	mov	r1, r4
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7ff fe94 	bl	800af98 <tcp_output_alloc_header_common>
 800b270:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00c      	beq.n	800b292 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b278:	7dfb      	ldrb	r3, [r7, #23]
 800b27a:	2200      	movs	r2, #0
 800b27c:	6939      	ldr	r1, [r7, #16]
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f7ff ff3a 	bl	800b0f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	6939      	ldr	r1, [r7, #16]
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f7ff ff72 	bl	800b174 <tcp_output_control_segment>
 800b290:	e000      	b.n	800b294 <tcp_rst+0x8c>
    return;
 800b292:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b294:	371c      	adds	r7, #28
 800b296:	46bd      	mov	sp, r7
 800b298:	bd90      	pop	{r4, r7, pc}
 800b29a:	bf00      	nop
 800b29c:	08012ad8 	.word	0x08012ad8
 800b2a0:	0801325c 	.word	0x0801325c
 800b2a4:	08012b2c 	.word	0x08012b2c
 800b2a8:	08013278 	.word	0x08013278

0800b2ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b2ac:	b590      	push	{r4, r7, lr}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <tcp_send_empty_ack+0x24>
 800b2c2:	4b28      	ldr	r3, [pc, #160]	@ (800b364 <tcp_send_empty_ack+0xb8>)
 800b2c4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800b2c8:	4927      	ldr	r1, [pc, #156]	@ (800b368 <tcp_send_empty_ack+0xbc>)
 800b2ca:	4828      	ldr	r0, [pc, #160]	@ (800b36c <tcp_send_empty_ack+0xc0>)
 800b2cc:	f005 f996 	bl	80105fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	f003 0304 	and.w	r3, r3, #4
 800b2da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b2dc:	7d7b      	ldrb	r3, [r7, #21]
 800b2de:	b29c      	uxth	r4, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7f9 fa27 	bl	8004738 <lwip_htonl>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7ff fec3 	bl	800b07c <tcp_output_alloc_header>
 800b2f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d109      	bne.n	800b312 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	8b5b      	ldrh	r3, [r3, #26]
 800b302:	f043 0303 	orr.w	r3, r3, #3
 800b306:	b29a      	uxth	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b30c:	f06f 0301 	mvn.w	r3, #1
 800b310:	e023      	b.n	800b35a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b312:	7dbb      	ldrb	r3, [r7, #22]
 800b314:	7dfa      	ldrb	r2, [r7, #23]
 800b316:	6939      	ldr	r1, [r7, #16]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f7ff feed 	bl	800b0f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	3304      	adds	r3, #4
 800b324:	6939      	ldr	r1, [r7, #16]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7ff ff24 	bl	800b174 <tcp_output_control_segment>
 800b32c:	4603      	mov	r3, r0
 800b32e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d007      	beq.n	800b348 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	8b5b      	ldrh	r3, [r3, #26]
 800b33c:	f043 0303 	orr.w	r3, r3, #3
 800b340:	b29a      	uxth	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	835a      	strh	r2, [r3, #26]
 800b346:	e006      	b.n	800b356 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	8b5b      	ldrh	r3, [r3, #26]
 800b34c:	f023 0303 	bic.w	r3, r3, #3
 800b350:	b29a      	uxth	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b356:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	371c      	adds	r7, #28
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd90      	pop	{r4, r7, pc}
 800b362:	bf00      	nop
 800b364:	08012ad8 	.word	0x08012ad8
 800b368:	08013294 	.word	0x08013294
 800b36c:	08012b2c 	.word	0x08012b2c

0800b370 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b370:	b590      	push	{r4, r7, lr}
 800b372:	b087      	sub	sp, #28
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b378:	2300      	movs	r3, #0
 800b37a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d106      	bne.n	800b390 <tcp_keepalive+0x20>
 800b382:	4b18      	ldr	r3, [pc, #96]	@ (800b3e4 <tcp_keepalive+0x74>)
 800b384:	f640 0224 	movw	r2, #2084	@ 0x824
 800b388:	4917      	ldr	r1, [pc, #92]	@ (800b3e8 <tcp_keepalive+0x78>)
 800b38a:	4818      	ldr	r0, [pc, #96]	@ (800b3ec <tcp_keepalive+0x7c>)
 800b38c:	f005 f936 	bl	80105fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b390:	7dfb      	ldrb	r3, [r7, #23]
 800b392:	b29c      	uxth	r4, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b398:	3b01      	subs	r3, #1
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7f9 f9cc 	bl	8004738 <lwip_htonl>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7ff fe68 	bl	800b07c <tcp_output_alloc_header>
 800b3ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d102      	bne.n	800b3ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b8:	e010      	b.n	800b3dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b3ba:	7dfb      	ldrb	r3, [r7, #23]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	6939      	ldr	r1, [r7, #16]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7ff fe99 	bl	800b0f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	6939      	ldr	r1, [r7, #16]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7ff fed0 	bl	800b174 <tcp_output_control_segment>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b3d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	371c      	adds	r7, #28
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd90      	pop	{r4, r7, pc}
 800b3e4:	08012ad8 	.word	0x08012ad8
 800b3e8:	080132b4 	.word	0x080132b4
 800b3ec:	08012b2c 	.word	0x08012b2c

0800b3f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b3f0:	b590      	push	{r4, r7, lr}
 800b3f2:	b08b      	sub	sp, #44	@ 0x2c
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d106      	bne.n	800b412 <tcp_zero_window_probe+0x22>
 800b404:	4b4c      	ldr	r3, [pc, #304]	@ (800b538 <tcp_zero_window_probe+0x148>)
 800b406:	f640 024f 	movw	r2, #2127	@ 0x84f
 800b40a:	494c      	ldr	r1, [pc, #304]	@ (800b53c <tcp_zero_window_probe+0x14c>)
 800b40c:	484c      	ldr	r0, [pc, #304]	@ (800b540 <tcp_zero_window_probe+0x150>)
 800b40e:	f005 f8f5 	bl	80105fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b416:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b418:	6a3b      	ldr	r3, [r7, #32]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	e086      	b.n	800b530 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b428:	2bff      	cmp	r3, #255	@ 0xff
 800b42a:	d007      	beq.n	800b43c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b432:	3301      	adds	r3, #1
 800b434:	b2da      	uxtb	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	899b      	ldrh	r3, [r3, #12]
 800b442:	b29b      	uxth	r3, r3
 800b444:	4618      	mov	r0, r3
 800b446:	f7f9 f961 	bl	800470c <lwip_htons>
 800b44a:	4603      	mov	r3, r0
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	2b00      	cmp	r3, #0
 800b454:	d005      	beq.n	800b462 <tcp_zero_window_probe+0x72>
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	891b      	ldrh	r3, [r3, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <tcp_zero_window_probe+0x72>
 800b45e:	2301      	movs	r3, #1
 800b460:	e000      	b.n	800b464 <tcp_zero_window_probe+0x74>
 800b462:	2300      	movs	r3, #0
 800b464:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b466:	7ffb      	ldrb	r3, [r7, #31]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	bf0c      	ite	eq
 800b46c:	2301      	moveq	r3, #1
 800b46e:	2300      	movne	r3, #0
 800b470:	b2db      	uxtb	r3, r3
 800b472:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b478:	b299      	uxth	r1, r3
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	8bba      	ldrh	r2, [r7, #28]
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff fdfa 	bl	800b07c <tcp_output_alloc_header>
 800b488:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d102      	bne.n	800b496 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b490:	f04f 33ff 	mov.w	r3, #4294967295
 800b494:	e04c      	b.n	800b530 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b49c:	7ffb      	ldrb	r3, [r7, #31]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d011      	beq.n	800b4c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	899b      	ldrh	r3, [r3, #12]
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	b21b      	sxth	r3, r3
 800b4aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b4ae:	b21c      	sxth	r4, r3
 800b4b0:	2011      	movs	r0, #17
 800b4b2:	f7f9 f92b 	bl	800470c <lwip_htons>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	b21b      	sxth	r3, r3
 800b4ba:	4323      	orrs	r3, r4
 800b4bc:	b21b      	sxth	r3, r3
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	819a      	strh	r2, [r3, #12]
 800b4c4:	e010      	b.n	800b4e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	3314      	adds	r3, #20
 800b4cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b4ce:	6a3b      	ldr	r3, [r7, #32]
 800b4d0:	6858      	ldr	r0, [r3, #4]
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	891a      	ldrh	r2, [r3, #8]
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
 800b4da:	891b      	ldrh	r3, [r3, #8]
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	6939      	ldr	r1, [r7, #16]
 800b4e4:	f7fa fe56 	bl	8006194 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b4e8:	6a3b      	ldr	r3, [r7, #32]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7f9 f922 	bl	8004738 <lwip_htonl>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	da02      	bge.n	800b50c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b50c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b510:	2200      	movs	r2, #0
 800b512:	69b9      	ldr	r1, [r7, #24]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff fdef 	bl	800b0f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	3304      	adds	r3, #4
 800b520:	69b9      	ldr	r1, [r7, #24]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7ff fe26 	bl	800b174 <tcp_output_control_segment>
 800b528:	4603      	mov	r3, r0
 800b52a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b52c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b530:	4618      	mov	r0, r3
 800b532:	372c      	adds	r7, #44	@ 0x2c
 800b534:	46bd      	mov	sp, r7
 800b536:	bd90      	pop	{r4, r7, pc}
 800b538:	08012ad8 	.word	0x08012ad8
 800b53c:	080132d0 	.word	0x080132d0
 800b540:	08012b2c 	.word	0x08012b2c

0800b544 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b54c:	f7fa ff10 	bl	8006370 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b550:	4b0a      	ldr	r3, [pc, #40]	@ (800b57c <tcpip_tcp_timer+0x38>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d103      	bne.n	800b560 <tcpip_tcp_timer+0x1c>
 800b558:	4b09      	ldr	r3, [pc, #36]	@ (800b580 <tcpip_tcp_timer+0x3c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d005      	beq.n	800b56c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b560:	2200      	movs	r2, #0
 800b562:	4908      	ldr	r1, [pc, #32]	@ (800b584 <tcpip_tcp_timer+0x40>)
 800b564:	20fa      	movs	r0, #250	@ 0xfa
 800b566:	f000 f8f3 	bl	800b750 <sys_timeout>
 800b56a:	e003      	b.n	800b574 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b56c:	4b06      	ldr	r3, [pc, #24]	@ (800b588 <tcpip_tcp_timer+0x44>)
 800b56e:	2200      	movs	r2, #0
 800b570:	601a      	str	r2, [r3, #0]
  }
}
 800b572:	bf00      	nop
 800b574:	bf00      	nop
 800b576:	3708      	adds	r7, #8
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	200082ac 	.word	0x200082ac
 800b580:	200082b0 	.word	0x200082b0
 800b584:	0800b545 	.word	0x0800b545
 800b588:	200082f8 	.word	0x200082f8

0800b58c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b590:	4b0a      	ldr	r3, [pc, #40]	@ (800b5bc <tcp_timer_needed+0x30>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10f      	bne.n	800b5b8 <tcp_timer_needed+0x2c>
 800b598:	4b09      	ldr	r3, [pc, #36]	@ (800b5c0 <tcp_timer_needed+0x34>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d103      	bne.n	800b5a8 <tcp_timer_needed+0x1c>
 800b5a0:	4b08      	ldr	r3, [pc, #32]	@ (800b5c4 <tcp_timer_needed+0x38>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d007      	beq.n	800b5b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b5a8:	4b04      	ldr	r3, [pc, #16]	@ (800b5bc <tcp_timer_needed+0x30>)
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	4905      	ldr	r1, [pc, #20]	@ (800b5c8 <tcp_timer_needed+0x3c>)
 800b5b2:	20fa      	movs	r0, #250	@ 0xfa
 800b5b4:	f000 f8cc 	bl	800b750 <sys_timeout>
  }
}
 800b5b8:	bf00      	nop
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	200082f8 	.word	0x200082f8
 800b5c0:	200082ac 	.word	0x200082ac
 800b5c4:	200082b0 	.word	0x200082b0
 800b5c8:	0800b545 	.word	0x0800b545

0800b5cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b5d8:	2006      	movs	r0, #6
 800b5da:	f7f9 fd0f 	bl	8004ffc <memp_malloc>
 800b5de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d109      	bne.n	800b5fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d151      	bne.n	800b690 <sys_timeout_abs+0xc4>
 800b5ec:	4b2a      	ldr	r3, [pc, #168]	@ (800b698 <sys_timeout_abs+0xcc>)
 800b5ee:	22be      	movs	r2, #190	@ 0xbe
 800b5f0:	492a      	ldr	r1, [pc, #168]	@ (800b69c <sys_timeout_abs+0xd0>)
 800b5f2:	482b      	ldr	r0, [pc, #172]	@ (800b6a0 <sys_timeout_abs+0xd4>)
 800b5f4:	f005 f802 	bl	80105fc <iprintf>
    return;
 800b5f8:	e04a      	b.n	800b690 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b612:	4b24      	ldr	r3, [pc, #144]	@ (800b6a4 <sys_timeout_abs+0xd8>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d103      	bne.n	800b622 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b61a:	4a22      	ldr	r2, [pc, #136]	@ (800b6a4 <sys_timeout_abs+0xd8>)
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	6013      	str	r3, [r2, #0]
    return;
 800b620:	e037      	b.n	800b692 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	4b1f      	ldr	r3, [pc, #124]	@ (800b6a4 <sys_timeout_abs+0xd8>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	0fdb      	lsrs	r3, r3, #31
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	d007      	beq.n	800b64a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b63a:	4b1a      	ldr	r3, [pc, #104]	@ (800b6a4 <sys_timeout_abs+0xd8>)
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b642:	4a18      	ldr	r2, [pc, #96]	@ (800b6a4 <sys_timeout_abs+0xd8>)
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	6013      	str	r3, [r2, #0]
 800b648:	e023      	b.n	800b692 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b64a:	4b16      	ldr	r3, [pc, #88]	@ (800b6a4 <sys_timeout_abs+0xd8>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	617b      	str	r3, [r7, #20]
 800b650:	e01a      	b.n	800b688 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00b      	beq.n	800b672 <sys_timeout_abs+0xa6>
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	0fdb      	lsrs	r3, r3, #31
 800b668:	f003 0301 	and.w	r3, r3, #1
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d007      	beq.n	800b682 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	601a      	str	r2, [r3, #0]
        break;
 800b680:	e007      	b.n	800b692 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	617b      	str	r3, [r7, #20]
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1e1      	bne.n	800b652 <sys_timeout_abs+0x86>
 800b68e:	e000      	b.n	800b692 <sys_timeout_abs+0xc6>
    return;
 800b690:	bf00      	nop
      }
    }
  }
}
 800b692:	3718      	adds	r7, #24
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	080132f4 	.word	0x080132f4
 800b69c:	08013328 	.word	0x08013328
 800b6a0:	08013368 	.word	0x08013368
 800b6a4:	200082f0 	.word	0x200082f0

0800b6a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	4798      	blx	r3

  now = sys_now();
 800b6ba:	f7f8 fe67 	bl	800438c <sys_now>
 800b6be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b704 <lwip_cyclic_timer+0x5c>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	0fdb      	lsrs	r3, r3, #31
 800b6d4:	f003 0301 	and.w	r3, r3, #1
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d009      	beq.n	800b6f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	4907      	ldr	r1, [pc, #28]	@ (800b708 <lwip_cyclic_timer+0x60>)
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7ff ff6e 	bl	800b5cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b6f0:	e004      	b.n	800b6fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	4904      	ldr	r1, [pc, #16]	@ (800b708 <lwip_cyclic_timer+0x60>)
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f7ff ff68 	bl	800b5cc <sys_timeout_abs>
}
 800b6fc:	bf00      	nop
 800b6fe:	3718      	adds	r7, #24
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	200082f4 	.word	0x200082f4
 800b708:	0800b6a9 	.word	0x0800b6a9

0800b70c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b712:	2301      	movs	r3, #1
 800b714:	607b      	str	r3, [r7, #4]
 800b716:	e00e      	b.n	800b736 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b718:	4a0b      	ldr	r2, [pc, #44]	@ (800b748 <sys_timeouts_init+0x3c>)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	4a08      	ldr	r2, [pc, #32]	@ (800b748 <sys_timeouts_init+0x3c>)
 800b726:	4413      	add	r3, r2
 800b728:	461a      	mov	r2, r3
 800b72a:	4908      	ldr	r1, [pc, #32]	@ (800b74c <sys_timeouts_init+0x40>)
 800b72c:	f000 f810 	bl	800b750 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3301      	adds	r3, #1
 800b734:	607b      	str	r3, [r7, #4]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2b04      	cmp	r3, #4
 800b73a:	d9ed      	bls.n	800b718 <sys_timeouts_init+0xc>
  }
}
 800b73c:	bf00      	nop
 800b73e:	bf00      	nop
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	08014280 	.word	0x08014280
 800b74c:	0800b6a9 	.word	0x0800b6a9

0800b750 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b762:	d306      	bcc.n	800b772 <sys_timeout+0x22>
 800b764:	4b0a      	ldr	r3, [pc, #40]	@ (800b790 <sys_timeout+0x40>)
 800b766:	f240 1229 	movw	r2, #297	@ 0x129
 800b76a:	490a      	ldr	r1, [pc, #40]	@ (800b794 <sys_timeout+0x44>)
 800b76c:	480a      	ldr	r0, [pc, #40]	@ (800b798 <sys_timeout+0x48>)
 800b76e:	f004 ff45 	bl	80105fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b772:	f7f8 fe0b 	bl	800438c <sys_now>
 800b776:	4602      	mov	r2, r0
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	4413      	add	r3, r2
 800b77c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	68b9      	ldr	r1, [r7, #8]
 800b782:	6978      	ldr	r0, [r7, #20]
 800b784:	f7ff ff22 	bl	800b5cc <sys_timeout_abs>
#endif
}
 800b788:	bf00      	nop
 800b78a:	3718      	adds	r7, #24
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	080132f4 	.word	0x080132f4
 800b794:	08013390 	.word	0x08013390
 800b798:	08013368 	.word	0x08013368

0800b79c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b7a0:	f004 fe2c 	bl	80103fc <rand>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	4b01      	ldr	r3, [pc, #4]	@ (800b7bc <udp_init+0x20>)
 800b7b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b7b8:	bf00      	nop
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	20000028 	.word	0x20000028

0800b7c0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b7ca:	4b17      	ldr	r3, [pc, #92]	@ (800b828 <udp_new_port+0x68>)
 800b7cc:	881b      	ldrh	r3, [r3, #0]
 800b7ce:	1c5a      	adds	r2, r3, #1
 800b7d0:	b291      	uxth	r1, r2
 800b7d2:	4a15      	ldr	r2, [pc, #84]	@ (800b828 <udp_new_port+0x68>)
 800b7d4:	8011      	strh	r1, [r2, #0]
 800b7d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d103      	bne.n	800b7e6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b7de:	4b12      	ldr	r3, [pc, #72]	@ (800b828 <udp_new_port+0x68>)
 800b7e0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800b7e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b7e6:	4b11      	ldr	r3, [pc, #68]	@ (800b82c <udp_new_port+0x6c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	603b      	str	r3, [r7, #0]
 800b7ec:	e011      	b.n	800b812 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	8a5a      	ldrh	r2, [r3, #18]
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b828 <udp_new_port+0x68>)
 800b7f4:	881b      	ldrh	r3, [r3, #0]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d108      	bne.n	800b80c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b7fa:	88fb      	ldrh	r3, [r7, #6]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	80fb      	strh	r3, [r7, #6]
 800b800:	88fb      	ldrh	r3, [r7, #6]
 800b802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b806:	d3e0      	bcc.n	800b7ca <udp_new_port+0xa>
        return 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	e007      	b.n	800b81c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	603b      	str	r3, [r7, #0]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1ea      	bne.n	800b7ee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b818:	4b03      	ldr	r3, [pc, #12]	@ (800b828 <udp_new_port+0x68>)
 800b81a:	881b      	ldrh	r3, [r3, #0]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	20000028 	.word	0x20000028
 800b82c:	200082fc 	.word	0x200082fc

0800b830 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	4613      	mov	r3, r2
 800b83c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d105      	bne.n	800b850 <udp_input_local_match+0x20>
 800b844:	4b27      	ldr	r3, [pc, #156]	@ (800b8e4 <udp_input_local_match+0xb4>)
 800b846:	2287      	movs	r2, #135	@ 0x87
 800b848:	4927      	ldr	r1, [pc, #156]	@ (800b8e8 <udp_input_local_match+0xb8>)
 800b84a:	4828      	ldr	r0, [pc, #160]	@ (800b8ec <udp_input_local_match+0xbc>)
 800b84c:	f004 fed6 	bl	80105fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d105      	bne.n	800b862 <udp_input_local_match+0x32>
 800b856:	4b23      	ldr	r3, [pc, #140]	@ (800b8e4 <udp_input_local_match+0xb4>)
 800b858:	2288      	movs	r2, #136	@ 0x88
 800b85a:	4925      	ldr	r1, [pc, #148]	@ (800b8f0 <udp_input_local_match+0xc0>)
 800b85c:	4823      	ldr	r0, [pc, #140]	@ (800b8ec <udp_input_local_match+0xbc>)
 800b85e:	f004 fecd 	bl	80105fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	7a1b      	ldrb	r3, [r3, #8]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00b      	beq.n	800b882 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	7a1a      	ldrb	r2, [r3, #8]
 800b86e:	4b21      	ldr	r3, [pc, #132]	@ (800b8f4 <udp_input_local_match+0xc4>)
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b876:	3301      	adds	r3, #1
 800b878:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d001      	beq.n	800b882 <udp_input_local_match+0x52>
    return 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	e02b      	b.n	800b8da <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b882:	79fb      	ldrb	r3, [r7, #7]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d018      	beq.n	800b8ba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d013      	beq.n	800b8b6 <udp_input_local_match+0x86>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00f      	beq.n	800b8b6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b896:	4b17      	ldr	r3, [pc, #92]	@ (800b8f4 <udp_input_local_match+0xc4>)
 800b898:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89e:	d00a      	beq.n	800b8b6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	4b13      	ldr	r3, [pc, #76]	@ (800b8f4 <udp_input_local_match+0xc4>)
 800b8a6:	695b      	ldr	r3, [r3, #20]
 800b8a8:	405a      	eors	r2, r3
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	3308      	adds	r3, #8
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d110      	bne.n	800b8d8 <udp_input_local_match+0xa8>
          return 1;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e00f      	b.n	800b8da <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d009      	beq.n	800b8d4 <udp_input_local_match+0xa4>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d005      	beq.n	800b8d4 <udp_input_local_match+0xa4>
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	4b09      	ldr	r3, [pc, #36]	@ (800b8f4 <udp_input_local_match+0xc4>)
 800b8ce:	695b      	ldr	r3, [r3, #20]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d101      	bne.n	800b8d8 <udp_input_local_match+0xa8>
        return 1;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e000      	b.n	800b8da <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	080133dc 	.word	0x080133dc
 800b8e8:	0801340c 	.word	0x0801340c
 800b8ec:	08013430 	.word	0x08013430
 800b8f0:	08013458 	.word	0x08013458
 800b8f4:	20004d10 	.word	0x20004d10

0800b8f8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b8f8:	b590      	push	{r4, r7, lr}
 800b8fa:	b08d      	sub	sp, #52	@ 0x34
 800b8fc:	af02      	add	r7, sp, #8
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d105      	bne.n	800b918 <udp_input+0x20>
 800b90c:	4b7c      	ldr	r3, [pc, #496]	@ (800bb00 <udp_input+0x208>)
 800b90e:	22cf      	movs	r2, #207	@ 0xcf
 800b910:	497c      	ldr	r1, [pc, #496]	@ (800bb04 <udp_input+0x20c>)
 800b912:	487d      	ldr	r0, [pc, #500]	@ (800bb08 <udp_input+0x210>)
 800b914:	f004 fe72 	bl	80105fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d105      	bne.n	800b92a <udp_input+0x32>
 800b91e:	4b78      	ldr	r3, [pc, #480]	@ (800bb00 <udp_input+0x208>)
 800b920:	22d0      	movs	r2, #208	@ 0xd0
 800b922:	497a      	ldr	r1, [pc, #488]	@ (800bb0c <udp_input+0x214>)
 800b924:	4878      	ldr	r0, [pc, #480]	@ (800bb08 <udp_input+0x210>)
 800b926:	f004 fe69 	bl	80105fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	895b      	ldrh	r3, [r3, #10]
 800b92e:	2b07      	cmp	r3, #7
 800b930:	d803      	bhi.n	800b93a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7fa fa34 	bl	8005da0 <pbuf_free>
    goto end;
 800b938:	e0de      	b.n	800baf8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b940:	4b73      	ldr	r3, [pc, #460]	@ (800bb10 <udp_input+0x218>)
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	4a72      	ldr	r2, [pc, #456]	@ (800bb10 <udp_input+0x218>)
 800b946:	6812      	ldr	r2, [r2, #0]
 800b948:	4611      	mov	r1, r2
 800b94a:	4618      	mov	r0, r3
 800b94c:	f003 fe00 	bl	800f550 <ip4_addr_isbroadcast_u32>
 800b950:	4603      	mov	r3, r0
 800b952:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	881b      	ldrh	r3, [r3, #0]
 800b958:	b29b      	uxth	r3, r3
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7f8 fed6 	bl	800470c <lwip_htons>
 800b960:	4603      	mov	r3, r0
 800b962:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	885b      	ldrh	r3, [r3, #2]
 800b968:	b29b      	uxth	r3, r3
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7f8 fece 	bl	800470c <lwip_htons>
 800b970:	4603      	mov	r3, r0
 800b972:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b974:	2300      	movs	r3, #0
 800b976:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800b978:	2300      	movs	r3, #0
 800b97a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b97c:	2300      	movs	r3, #0
 800b97e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b980:	4b64      	ldr	r3, [pc, #400]	@ (800bb14 <udp_input+0x21c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	627b      	str	r3, [r7, #36]	@ 0x24
 800b986:	e054      	b.n	800ba32 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98a:	8a5b      	ldrh	r3, [r3, #18]
 800b98c:	89fa      	ldrh	r2, [r7, #14]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d14a      	bne.n	800ba28 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b992:	7cfb      	ldrb	r3, [r7, #19]
 800b994:	461a      	mov	r2, r3
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b99a:	f7ff ff49 	bl	800b830 <udp_input_local_match>
 800b99e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d041      	beq.n	800ba28 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a6:	7c1b      	ldrb	r3, [r3, #16]
 800b9a8:	f003 0304 	and.w	r3, r3, #4
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d11d      	bne.n	800b9ec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d102      	bne.n	800b9bc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b8:	61fb      	str	r3, [r7, #28]
 800b9ba:	e017      	b.n	800b9ec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b9bc:	7cfb      	ldrb	r3, [r7, #19]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d014      	beq.n	800b9ec <udp_input+0xf4>
 800b9c2:	4b53      	ldr	r3, [pc, #332]	@ (800bb10 <udp_input+0x218>)
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ca:	d10f      	bne.n	800b9ec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d008      	beq.n	800b9ec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d101      	bne.n	800b9ec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ee:	8a9b      	ldrh	r3, [r3, #20]
 800b9f0:	8a3a      	ldrh	r2, [r7, #16]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d118      	bne.n	800ba28 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d005      	beq.n	800ba0a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba00:	685a      	ldr	r2, [r3, #4]
 800ba02:	4b43      	ldr	r3, [pc, #268]	@ (800bb10 <udp_input+0x218>)
 800ba04:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d10e      	bne.n	800ba28 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ba0a:	6a3b      	ldr	r3, [r7, #32]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d014      	beq.n	800ba3a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ba10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba12:	68da      	ldr	r2, [r3, #12]
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ba18:	4b3e      	ldr	r3, [pc, #248]	@ (800bb14 <udp_input+0x21c>)
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ba20:	4a3c      	ldr	r2, [pc, #240]	@ (800bb14 <udp_input+0x21c>)
 800ba22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba24:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ba26:	e008      	b.n	800ba3a <udp_input+0x142>
      }
    }

    prev = pcb;
 800ba28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1a7      	bne.n	800b988 <udp_input+0x90>
 800ba38:	e000      	b.n	800ba3c <udp_input+0x144>
        break;
 800ba3a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ba46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d002      	beq.n	800ba52 <udp_input+0x15a>
    for_us = 1;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	76fb      	strb	r3, [r7, #27]
 800ba50:	e00a      	b.n	800ba68 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	3304      	adds	r3, #4
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	4b2d      	ldr	r3, [pc, #180]	@ (800bb10 <udp_input+0x218>)
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	bf0c      	ite	eq
 800ba60:	2301      	moveq	r3, #1
 800ba62:	2300      	movne	r3, #0
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ba68:	7efb      	ldrb	r3, [r7, #27]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d041      	beq.n	800baf2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ba6e:	2108      	movs	r1, #8
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f7fa f90f 	bl	8005c94 <pbuf_remove_header>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00a      	beq.n	800ba92 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ba7c:	4b20      	ldr	r3, [pc, #128]	@ (800bb00 <udp_input+0x208>)
 800ba7e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800ba82:	4925      	ldr	r1, [pc, #148]	@ (800bb18 <udp_input+0x220>)
 800ba84:	4820      	ldr	r0, [pc, #128]	@ (800bb08 <udp_input+0x210>)
 800ba86:	f004 fdb9 	bl	80105fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7fa f988 	bl	8005da0 <pbuf_free>
      goto end;
 800ba90:	e032      	b.n	800baf8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ba92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d012      	beq.n	800babe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00a      	beq.n	800bab6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800baa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa2:	699c      	ldr	r4, [r3, #24]
 800baa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa6:	69d8      	ldr	r0, [r3, #28]
 800baa8:	8a3b      	ldrh	r3, [r7, #16]
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	4b1b      	ldr	r3, [pc, #108]	@ (800bb1c <udp_input+0x224>)
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bab2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bab4:	e021      	b.n	800bafa <udp_input+0x202>
        pbuf_free(p);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7fa f972 	bl	8005da0 <pbuf_free>
        goto end;
 800babc:	e01c      	b.n	800baf8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800babe:	7cfb      	ldrb	r3, [r7, #19]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d112      	bne.n	800baea <udp_input+0x1f2>
 800bac4:	4b12      	ldr	r3, [pc, #72]	@ (800bb10 <udp_input+0x218>)
 800bac6:	695b      	ldr	r3, [r3, #20]
 800bac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bacc:	2be0      	cmp	r3, #224	@ 0xe0
 800bace:	d00c      	beq.n	800baea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bad0:	4b0f      	ldr	r3, [pc, #60]	@ (800bb10 <udp_input+0x218>)
 800bad2:	899b      	ldrh	r3, [r3, #12]
 800bad4:	3308      	adds	r3, #8
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	b21b      	sxth	r3, r3
 800bada:	4619      	mov	r1, r3
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7fa f94c 	bl	8005d7a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bae2:	2103      	movs	r1, #3
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f003 f9f5 	bl	800eed4 <icmp_dest_unreach>
      pbuf_free(p);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7fa f958 	bl	8005da0 <pbuf_free>
  return;
 800baf0:	e003      	b.n	800bafa <udp_input+0x202>
    pbuf_free(p);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7fa f954 	bl	8005da0 <pbuf_free>
  return;
 800baf8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bafa:	372c      	adds	r7, #44	@ 0x2c
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd90      	pop	{r4, r7, pc}
 800bb00:	080133dc 	.word	0x080133dc
 800bb04:	08013480 	.word	0x08013480
 800bb08:	08013430 	.word	0x08013430
 800bb0c:	08013498 	.word	0x08013498
 800bb10:	20004d10 	.word	0x20004d10
 800bb14:	200082fc 	.word	0x200082fc
 800bb18:	080134b4 	.word	0x080134b4
 800bb1c:	20004d20 	.word	0x20004d20

0800bb20 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af02      	add	r7, sp, #8
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d109      	bne.n	800bb48 <udp_sendto_if+0x28>
 800bb34:	4b2e      	ldr	r3, [pc, #184]	@ (800bbf0 <udp_sendto_if+0xd0>)
 800bb36:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bb3a:	492e      	ldr	r1, [pc, #184]	@ (800bbf4 <udp_sendto_if+0xd4>)
 800bb3c:	482e      	ldr	r0, [pc, #184]	@ (800bbf8 <udp_sendto_if+0xd8>)
 800bb3e:	f004 fd5d 	bl	80105fc <iprintf>
 800bb42:	f06f 030f 	mvn.w	r3, #15
 800bb46:	e04f      	b.n	800bbe8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d109      	bne.n	800bb62 <udp_sendto_if+0x42>
 800bb4e:	4b28      	ldr	r3, [pc, #160]	@ (800bbf0 <udp_sendto_if+0xd0>)
 800bb50:	f240 2281 	movw	r2, #641	@ 0x281
 800bb54:	4929      	ldr	r1, [pc, #164]	@ (800bbfc <udp_sendto_if+0xdc>)
 800bb56:	4828      	ldr	r0, [pc, #160]	@ (800bbf8 <udp_sendto_if+0xd8>)
 800bb58:	f004 fd50 	bl	80105fc <iprintf>
 800bb5c:	f06f 030f 	mvn.w	r3, #15
 800bb60:	e042      	b.n	800bbe8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d109      	bne.n	800bb7c <udp_sendto_if+0x5c>
 800bb68:	4b21      	ldr	r3, [pc, #132]	@ (800bbf0 <udp_sendto_if+0xd0>)
 800bb6a:	f240 2282 	movw	r2, #642	@ 0x282
 800bb6e:	4924      	ldr	r1, [pc, #144]	@ (800bc00 <udp_sendto_if+0xe0>)
 800bb70:	4821      	ldr	r0, [pc, #132]	@ (800bbf8 <udp_sendto_if+0xd8>)
 800bb72:	f004 fd43 	bl	80105fc <iprintf>
 800bb76:	f06f 030f 	mvn.w	r3, #15
 800bb7a:	e035      	b.n	800bbe8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800bb7c:	6a3b      	ldr	r3, [r7, #32]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d109      	bne.n	800bb96 <udp_sendto_if+0x76>
 800bb82:	4b1b      	ldr	r3, [pc, #108]	@ (800bbf0 <udp_sendto_if+0xd0>)
 800bb84:	f240 2283 	movw	r2, #643	@ 0x283
 800bb88:	491e      	ldr	r1, [pc, #120]	@ (800bc04 <udp_sendto_if+0xe4>)
 800bb8a:	481b      	ldr	r0, [pc, #108]	@ (800bbf8 <udp_sendto_if+0xd8>)
 800bb8c:	f004 fd36 	bl	80105fc <iprintf>
 800bb90:	f06f 030f 	mvn.w	r3, #15
 800bb94:	e028      	b.n	800bbe8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d009      	beq.n	800bbb0 <udp_sendto_if+0x90>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d005      	beq.n	800bbb0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bbac:	2be0      	cmp	r3, #224	@ 0xe0
 800bbae:	d103      	bne.n	800bbb8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	617b      	str	r3, [r7, #20]
 800bbb6:	e00b      	b.n	800bbd0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	6a3b      	ldr	r3, [r7, #32]
 800bbbe:	3304      	adds	r3, #4
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d002      	beq.n	800bbcc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800bbc6:	f06f 0303 	mvn.w	r3, #3
 800bbca:	e00d      	b.n	800bbe8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800bbd0:	887a      	ldrh	r2, [r7, #2]
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	9301      	str	r3, [sp, #4]
 800bbd6:	6a3b      	ldr	r3, [r7, #32]
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	68b9      	ldr	r1, [r7, #8]
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f000 f811 	bl	800bc08 <udp_sendto_if_src>
 800bbe6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	080133dc 	.word	0x080133dc
 800bbf4:	08013550 	.word	0x08013550
 800bbf8:	08013430 	.word	0x08013430
 800bbfc:	0801356c 	.word	0x0801356c
 800bc00:	08013588 	.word	0x08013588
 800bc04:	080135a8 	.word	0x080135a8

0800bc08 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08c      	sub	sp, #48	@ 0x30
 800bc0c:	af04      	add	r7, sp, #16
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d109      	bne.n	800bc30 <udp_sendto_if_src+0x28>
 800bc1c:	4b65      	ldr	r3, [pc, #404]	@ (800bdb4 <udp_sendto_if_src+0x1ac>)
 800bc1e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800bc22:	4965      	ldr	r1, [pc, #404]	@ (800bdb8 <udp_sendto_if_src+0x1b0>)
 800bc24:	4865      	ldr	r0, [pc, #404]	@ (800bdbc <udp_sendto_if_src+0x1b4>)
 800bc26:	f004 fce9 	bl	80105fc <iprintf>
 800bc2a:	f06f 030f 	mvn.w	r3, #15
 800bc2e:	e0bc      	b.n	800bdaa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d109      	bne.n	800bc4a <udp_sendto_if_src+0x42>
 800bc36:	4b5f      	ldr	r3, [pc, #380]	@ (800bdb4 <udp_sendto_if_src+0x1ac>)
 800bc38:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800bc3c:	4960      	ldr	r1, [pc, #384]	@ (800bdc0 <udp_sendto_if_src+0x1b8>)
 800bc3e:	485f      	ldr	r0, [pc, #380]	@ (800bdbc <udp_sendto_if_src+0x1b4>)
 800bc40:	f004 fcdc 	bl	80105fc <iprintf>
 800bc44:	f06f 030f 	mvn.w	r3, #15
 800bc48:	e0af      	b.n	800bdaa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d109      	bne.n	800bc64 <udp_sendto_if_src+0x5c>
 800bc50:	4b58      	ldr	r3, [pc, #352]	@ (800bdb4 <udp_sendto_if_src+0x1ac>)
 800bc52:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800bc56:	495b      	ldr	r1, [pc, #364]	@ (800bdc4 <udp_sendto_if_src+0x1bc>)
 800bc58:	4858      	ldr	r0, [pc, #352]	@ (800bdbc <udp_sendto_if_src+0x1b4>)
 800bc5a:	f004 fccf 	bl	80105fc <iprintf>
 800bc5e:	f06f 030f 	mvn.w	r3, #15
 800bc62:	e0a2      	b.n	800bdaa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800bc64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d109      	bne.n	800bc7e <udp_sendto_if_src+0x76>
 800bc6a:	4b52      	ldr	r3, [pc, #328]	@ (800bdb4 <udp_sendto_if_src+0x1ac>)
 800bc6c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800bc70:	4955      	ldr	r1, [pc, #340]	@ (800bdc8 <udp_sendto_if_src+0x1c0>)
 800bc72:	4852      	ldr	r0, [pc, #328]	@ (800bdbc <udp_sendto_if_src+0x1b4>)
 800bc74:	f004 fcc2 	bl	80105fc <iprintf>
 800bc78:	f06f 030f 	mvn.w	r3, #15
 800bc7c:	e095      	b.n	800bdaa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800bc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d109      	bne.n	800bc98 <udp_sendto_if_src+0x90>
 800bc84:	4b4b      	ldr	r3, [pc, #300]	@ (800bdb4 <udp_sendto_if_src+0x1ac>)
 800bc86:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800bc8a:	4950      	ldr	r1, [pc, #320]	@ (800bdcc <udp_sendto_if_src+0x1c4>)
 800bc8c:	484b      	ldr	r0, [pc, #300]	@ (800bdbc <udp_sendto_if_src+0x1b4>)
 800bc8e:	f004 fcb5 	bl	80105fc <iprintf>
 800bc92:	f06f 030f 	mvn.w	r3, #15
 800bc96:	e088      	b.n	800bdaa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	8a5b      	ldrh	r3, [r3, #18]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10f      	bne.n	800bcc0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bca0:	68f9      	ldr	r1, [r7, #12]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	8a5b      	ldrh	r3, [r3, #18]
 800bca6:	461a      	mov	r2, r3
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f000 f893 	bl	800bdd4 <udp_bind>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800bcb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d002      	beq.n	800bcc0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800bcba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bcbe:	e074      	b.n	800bdaa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	891b      	ldrh	r3, [r3, #8]
 800bcc4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d902      	bls.n	800bcd2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800bccc:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd0:	e06b      	b.n	800bdaa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800bcd2:	2108      	movs	r1, #8
 800bcd4:	68b8      	ldr	r0, [r7, #8]
 800bcd6:	f7f9 ffcd 	bl	8005c74 <pbuf_add_header>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d015      	beq.n	800bd0c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800bce0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bce4:	2108      	movs	r1, #8
 800bce6:	2022      	movs	r0, #34	@ 0x22
 800bce8:	f7f9 fd76 	bl	80057d8 <pbuf_alloc>
 800bcec:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d102      	bne.n	800bcfa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800bcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf8:	e057      	b.n	800bdaa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	891b      	ldrh	r3, [r3, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d006      	beq.n	800bd10 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800bd02:	68b9      	ldr	r1, [r7, #8]
 800bd04:	69f8      	ldr	r0, [r7, #28]
 800bd06:	f7fa f963 	bl	8005fd0 <pbuf_chain>
 800bd0a:	e001      	b.n	800bd10 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	895b      	ldrh	r3, [r3, #10]
 800bd14:	2b07      	cmp	r3, #7
 800bd16:	d806      	bhi.n	800bd26 <udp_sendto_if_src+0x11e>
 800bd18:	4b26      	ldr	r3, [pc, #152]	@ (800bdb4 <udp_sendto_if_src+0x1ac>)
 800bd1a:	f240 320d 	movw	r2, #781	@ 0x30d
 800bd1e:	492c      	ldr	r1, [pc, #176]	@ (800bdd0 <udp_sendto_if_src+0x1c8>)
 800bd20:	4826      	ldr	r0, [pc, #152]	@ (800bdbc <udp_sendto_if_src+0x1b4>)
 800bd22:	f004 fc6b 	bl	80105fc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	8a5b      	ldrh	r3, [r3, #18]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7f8 fceb 	bl	800470c <lwip_htons>
 800bd36:	4603      	mov	r3, r0
 800bd38:	461a      	mov	r2, r3
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800bd3e:	887b      	ldrh	r3, [r7, #2]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7f8 fce3 	bl	800470c <lwip_htons>
 800bd46:	4603      	mov	r3, r0
 800bd48:	461a      	mov	r2, r3
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2200      	movs	r2, #0
 800bd52:	719a      	strb	r2, [r3, #6]
 800bd54:	2200      	movs	r2, #0
 800bd56:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	891b      	ldrh	r3, [r3, #8]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7f8 fcd5 	bl	800470c <lwip_htons>
 800bd62:	4603      	mov	r3, r0
 800bd64:	461a      	mov	r2, r3
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800bd6a:	2311      	movs	r3, #17
 800bd6c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	7adb      	ldrb	r3, [r3, #11]
 800bd72:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	7a9b      	ldrb	r3, [r3, #10]
 800bd78:	7cb9      	ldrb	r1, [r7, #18]
 800bd7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd7c:	9202      	str	r2, [sp, #8]
 800bd7e:	7cfa      	ldrb	r2, [r7, #19]
 800bd80:	9201      	str	r2, [sp, #4]
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	460b      	mov	r3, r1
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd8a:	69f8      	ldr	r0, [r7, #28]
 800bd8c:	f003 fb32 	bl	800f3f4 <ip4_output_if_src>
 800bd90:	4603      	mov	r3, r0
 800bd92:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800bd94:	69fa      	ldr	r2, [r7, #28]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d004      	beq.n	800bda6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800bd9c:	69f8      	ldr	r0, [r7, #28]
 800bd9e:	f7f9 ffff 	bl	8005da0 <pbuf_free>
    q = NULL;
 800bda2:	2300      	movs	r3, #0
 800bda4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800bda6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3720      	adds	r7, #32
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	080133dc 	.word	0x080133dc
 800bdb8:	080135c8 	.word	0x080135c8
 800bdbc:	08013430 	.word	0x08013430
 800bdc0:	080135e8 	.word	0x080135e8
 800bdc4:	08013608 	.word	0x08013608
 800bdc8:	0801362c 	.word	0x0801362c
 800bdcc:	08013650 	.word	0x08013650
 800bdd0:	08013674 	.word	0x08013674

0800bdd4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	4613      	mov	r3, r2
 800bde0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800bde8:	4b39      	ldr	r3, [pc, #228]	@ (800bed0 <udp_bind+0xfc>)
 800bdea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d109      	bne.n	800be06 <udp_bind+0x32>
 800bdf2:	4b38      	ldr	r3, [pc, #224]	@ (800bed4 <udp_bind+0x100>)
 800bdf4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800bdf8:	4937      	ldr	r1, [pc, #220]	@ (800bed8 <udp_bind+0x104>)
 800bdfa:	4838      	ldr	r0, [pc, #224]	@ (800bedc <udp_bind+0x108>)
 800bdfc:	f004 fbfe 	bl	80105fc <iprintf>
 800be00:	f06f 030f 	mvn.w	r3, #15
 800be04:	e060      	b.n	800bec8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800be06:	2300      	movs	r3, #0
 800be08:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800be0a:	4b35      	ldr	r3, [pc, #212]	@ (800bee0 <udp_bind+0x10c>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	617b      	str	r3, [r7, #20]
 800be10:	e009      	b.n	800be26 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	429a      	cmp	r2, r3
 800be18:	d102      	bne.n	800be20 <udp_bind+0x4c>
      rebind = 1;
 800be1a:	2301      	movs	r3, #1
 800be1c:	74fb      	strb	r3, [r7, #19]
      break;
 800be1e:	e005      	b.n	800be2c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1f2      	bne.n	800be12 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800be2c:	88fb      	ldrh	r3, [r7, #6]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d109      	bne.n	800be46 <udp_bind+0x72>
    port = udp_new_port();
 800be32:	f7ff fcc5 	bl	800b7c0 <udp_new_port>
 800be36:	4603      	mov	r3, r0
 800be38:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800be3a:	88fb      	ldrh	r3, [r7, #6]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d12c      	bne.n	800be9a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800be40:	f06f 0307 	mvn.w	r3, #7
 800be44:	e040      	b.n	800bec8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800be46:	4b26      	ldr	r3, [pc, #152]	@ (800bee0 <udp_bind+0x10c>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	617b      	str	r3, [r7, #20]
 800be4c:	e022      	b.n	800be94 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	429a      	cmp	r2, r3
 800be54:	d01b      	beq.n	800be8e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	8a5b      	ldrh	r3, [r3, #18]
 800be5a:	88fa      	ldrh	r2, [r7, #6]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d116      	bne.n	800be8e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800be68:	429a      	cmp	r2, r3
 800be6a:	d00d      	beq.n	800be88 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00a      	beq.n	800be88 <udp_bind+0xb4>
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d006      	beq.n	800be88 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800be7a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d003      	beq.n	800be88 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d102      	bne.n	800be8e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800be88:	f06f 0307 	mvn.w	r3, #7
 800be8c:	e01c      	b.n	800bec8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	617b      	str	r3, [r7, #20]
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1d9      	bne.n	800be4e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <udp_bind+0xd2>
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	e000      	b.n	800bea8 <udp_bind+0xd4>
 800bea6:	2300      	movs	r3, #0
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	88fa      	ldrh	r2, [r7, #6]
 800beb0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800beb2:	7cfb      	ldrb	r3, [r7, #19]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d106      	bne.n	800bec6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800beb8:	4b09      	ldr	r3, [pc, #36]	@ (800bee0 <udp_bind+0x10c>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800bec0:	4a07      	ldr	r2, [pc, #28]	@ (800bee0 <udp_bind+0x10c>)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	080142a8 	.word	0x080142a8
 800bed4:	080133dc 	.word	0x080133dc
 800bed8:	080136a4 	.word	0x080136a4
 800bedc:	08013430 	.word	0x08013430
 800bee0:	200082fc 	.word	0x200082fc

0800bee4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	4613      	mov	r3, r2
 800bef0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d109      	bne.n	800bf0c <udp_connect+0x28>
 800bef8:	4b2c      	ldr	r3, [pc, #176]	@ (800bfac <udp_connect+0xc8>)
 800befa:	f240 4235 	movw	r2, #1077	@ 0x435
 800befe:	492c      	ldr	r1, [pc, #176]	@ (800bfb0 <udp_connect+0xcc>)
 800bf00:	482c      	ldr	r0, [pc, #176]	@ (800bfb4 <udp_connect+0xd0>)
 800bf02:	f004 fb7b 	bl	80105fc <iprintf>
 800bf06:	f06f 030f 	mvn.w	r3, #15
 800bf0a:	e04b      	b.n	800bfa4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d109      	bne.n	800bf26 <udp_connect+0x42>
 800bf12:	4b26      	ldr	r3, [pc, #152]	@ (800bfac <udp_connect+0xc8>)
 800bf14:	f240 4236 	movw	r2, #1078	@ 0x436
 800bf18:	4927      	ldr	r1, [pc, #156]	@ (800bfb8 <udp_connect+0xd4>)
 800bf1a:	4826      	ldr	r0, [pc, #152]	@ (800bfb4 <udp_connect+0xd0>)
 800bf1c:	f004 fb6e 	bl	80105fc <iprintf>
 800bf20:	f06f 030f 	mvn.w	r3, #15
 800bf24:	e03e      	b.n	800bfa4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	8a5b      	ldrh	r3, [r3, #18]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10f      	bne.n	800bf4e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bf2e:	68f9      	ldr	r1, [r7, #12]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	8a5b      	ldrh	r3, [r3, #18]
 800bf34:	461a      	mov	r2, r3
 800bf36:	68f8      	ldr	r0, [r7, #12]
 800bf38:	f7ff ff4c 	bl	800bdd4 <udp_bind>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800bf40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d002      	beq.n	800bf4e <udp_connect+0x6a>
      return err;
 800bf48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf4c:	e02a      	b.n	800bfa4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <udp_connect+0x76>
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	e000      	b.n	800bf5c <udp_connect+0x78>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	88fa      	ldrh	r2, [r7, #6]
 800bf64:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	7c1b      	ldrb	r3, [r3, #16]
 800bf6a:	f043 0304 	orr.w	r3, r3, #4
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bf74:	4b11      	ldr	r3, [pc, #68]	@ (800bfbc <udp_connect+0xd8>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	617b      	str	r3, [r7, #20]
 800bf7a:	e008      	b.n	800bf8e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d101      	bne.n	800bf88 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800bf84:	2300      	movs	r3, #0
 800bf86:	e00d      	b.n	800bfa4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	617b      	str	r3, [r7, #20]
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d1f3      	bne.n	800bf7c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bf94:	4b09      	ldr	r3, [pc, #36]	@ (800bfbc <udp_connect+0xd8>)
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800bf9c:	4a07      	ldr	r2, [pc, #28]	@ (800bfbc <udp_connect+0xd8>)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3718      	adds	r7, #24
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	080133dc 	.word	0x080133dc
 800bfb0:	080136bc 	.word	0x080136bc
 800bfb4:	08013430 	.word	0x08013430
 800bfb8:	080136d8 	.word	0x080136d8
 800bfbc:	200082fc 	.word	0x200082fc

0800bfc0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d107      	bne.n	800bfe2 <udp_recv+0x22>
 800bfd2:	4b08      	ldr	r3, [pc, #32]	@ (800bff4 <udp_recv+0x34>)
 800bfd4:	f240 428a 	movw	r2, #1162	@ 0x48a
 800bfd8:	4907      	ldr	r1, [pc, #28]	@ (800bff8 <udp_recv+0x38>)
 800bfda:	4808      	ldr	r0, [pc, #32]	@ (800bffc <udp_recv+0x3c>)
 800bfdc:	f004 fb0e 	bl	80105fc <iprintf>
 800bfe0:	e005      	b.n	800bfee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	61da      	str	r2, [r3, #28]
}
 800bfee:	3710      	adds	r7, #16
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	080133dc 	.word	0x080133dc
 800bff8:	08013710 	.word	0x08013710
 800bffc:	08013430 	.word	0x08013430

0800c000 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d107      	bne.n	800c01e <udp_remove+0x1e>
 800c00e:	4b19      	ldr	r3, [pc, #100]	@ (800c074 <udp_remove+0x74>)
 800c010:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800c014:	4918      	ldr	r1, [pc, #96]	@ (800c078 <udp_remove+0x78>)
 800c016:	4819      	ldr	r0, [pc, #100]	@ (800c07c <udp_remove+0x7c>)
 800c018:	f004 faf0 	bl	80105fc <iprintf>
 800c01c:	e026      	b.n	800c06c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c01e:	4b18      	ldr	r3, [pc, #96]	@ (800c080 <udp_remove+0x80>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	429a      	cmp	r2, r3
 800c026:	d105      	bne.n	800c034 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c028:	4b15      	ldr	r3, [pc, #84]	@ (800c080 <udp_remove+0x80>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	4a14      	ldr	r2, [pc, #80]	@ (800c080 <udp_remove+0x80>)
 800c030:	6013      	str	r3, [r2, #0]
 800c032:	e017      	b.n	800c064 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c034:	4b12      	ldr	r3, [pc, #72]	@ (800c080 <udp_remove+0x80>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	60fb      	str	r3, [r7, #12]
 800c03a:	e010      	b.n	800c05e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d009      	beq.n	800c058 <udp_remove+0x58>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d104      	bne.n	800c058 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	68da      	ldr	r2, [r3, #12]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	60da      	str	r2, [r3, #12]
        break;
 800c056:	e005      	b.n	800c064 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	60fb      	str	r3, [r7, #12]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1eb      	bne.n	800c03c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	2000      	movs	r0, #0
 800c068:	f7f9 f838 	bl	80050dc <memp_free>
}
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	080133dc 	.word	0x080133dc
 800c078:	08013728 	.word	0x08013728
 800c07c:	08013430 	.word	0x08013430
 800c080:	200082fc 	.word	0x200082fc

0800c084 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c08a:	2000      	movs	r0, #0
 800c08c:	f7f8 ffb6 	bl	8004ffc <memp_malloc>
 800c090:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d007      	beq.n	800c0a8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c098:	2220      	movs	r2, #32
 800c09a:	2100      	movs	r1, #0
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f004 fb12 	bl	80106c6 <memset>
    pcb->ttl = UDP_TTL;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	22ff      	movs	r2, #255	@ 0xff
 800c0a6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c0a8:	687b      	ldr	r3, [r7, #4]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
	...

0800c0b4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d01e      	beq.n	800c102 <udp_netif_ip_addr_changed+0x4e>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d01a      	beq.n	800c102 <udp_netif_ip_addr_changed+0x4e>
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d017      	beq.n	800c102 <udp_netif_ip_addr_changed+0x4e>
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d013      	beq.n	800c102 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c0da:	4b0d      	ldr	r3, [pc, #52]	@ (800c110 <udp_netif_ip_addr_changed+0x5c>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	e00c      	b.n	800c0fc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d103      	bne.n	800c0f6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	60fb      	str	r3, [r7, #12]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1ef      	bne.n	800c0e2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c102:	bf00      	nop
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	200082fc 	.word	0x200082fc

0800c114 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800c118:	4b20      	ldr	r3, [pc, #128]	@ (800c19c <dhcp_inc_pcb_refcount+0x88>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d133      	bne.n	800c188 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800c120:	4b1f      	ldr	r3, [pc, #124]	@ (800c1a0 <dhcp_inc_pcb_refcount+0x8c>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d005      	beq.n	800c134 <dhcp_inc_pcb_refcount+0x20>
 800c128:	4b1e      	ldr	r3, [pc, #120]	@ (800c1a4 <dhcp_inc_pcb_refcount+0x90>)
 800c12a:	22e5      	movs	r2, #229	@ 0xe5
 800c12c:	491e      	ldr	r1, [pc, #120]	@ (800c1a8 <dhcp_inc_pcb_refcount+0x94>)
 800c12e:	481f      	ldr	r0, [pc, #124]	@ (800c1ac <dhcp_inc_pcb_refcount+0x98>)
 800c130:	f004 fa64 	bl	80105fc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800c134:	f7ff ffa6 	bl	800c084 <udp_new>
 800c138:	4603      	mov	r3, r0
 800c13a:	4a19      	ldr	r2, [pc, #100]	@ (800c1a0 <dhcp_inc_pcb_refcount+0x8c>)
 800c13c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800c13e:	4b18      	ldr	r3, [pc, #96]	@ (800c1a0 <dhcp_inc_pcb_refcount+0x8c>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d102      	bne.n	800c14c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800c146:	f04f 33ff 	mov.w	r3, #4294967295
 800c14a:	e024      	b.n	800c196 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800c14c:	4b14      	ldr	r3, [pc, #80]	@ (800c1a0 <dhcp_inc_pcb_refcount+0x8c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	7a5a      	ldrb	r2, [r3, #9]
 800c152:	4b13      	ldr	r3, [pc, #76]	@ (800c1a0 <dhcp_inc_pcb_refcount+0x8c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f042 0220 	orr.w	r2, r2, #32
 800c15a:	b2d2      	uxtb	r2, r2
 800c15c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800c15e:	4b10      	ldr	r3, [pc, #64]	@ (800c1a0 <dhcp_inc_pcb_refcount+0x8c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2244      	movs	r2, #68	@ 0x44
 800c164:	4912      	ldr	r1, [pc, #72]	@ (800c1b0 <dhcp_inc_pcb_refcount+0x9c>)
 800c166:	4618      	mov	r0, r3
 800c168:	f7ff fe34 	bl	800bdd4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800c16c:	4b0c      	ldr	r3, [pc, #48]	@ (800c1a0 <dhcp_inc_pcb_refcount+0x8c>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2243      	movs	r2, #67	@ 0x43
 800c172:	490f      	ldr	r1, [pc, #60]	@ (800c1b0 <dhcp_inc_pcb_refcount+0x9c>)
 800c174:	4618      	mov	r0, r3
 800c176:	f7ff feb5 	bl	800bee4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800c17a:	4b09      	ldr	r3, [pc, #36]	@ (800c1a0 <dhcp_inc_pcb_refcount+0x8c>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2200      	movs	r2, #0
 800c180:	490c      	ldr	r1, [pc, #48]	@ (800c1b4 <dhcp_inc_pcb_refcount+0xa0>)
 800c182:	4618      	mov	r0, r3
 800c184:	f7ff ff1c 	bl	800bfc0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800c188:	4b04      	ldr	r3, [pc, #16]	@ (800c19c <dhcp_inc_pcb_refcount+0x88>)
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	3301      	adds	r3, #1
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	4b02      	ldr	r3, [pc, #8]	@ (800c19c <dhcp_inc_pcb_refcount+0x88>)
 800c192:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	2000832c 	.word	0x2000832c
 800c1a0:	20008328 	.word	0x20008328
 800c1a4:	08013740 	.word	0x08013740
 800c1a8:	08013778 	.word	0x08013778
 800c1ac:	080137a0 	.word	0x080137a0
 800c1b0:	080142a8 	.word	0x080142a8
 800c1b4:	0800da3d 	.word	0x0800da3d

0800c1b8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800c1bc:	4b0e      	ldr	r3, [pc, #56]	@ (800c1f8 <dhcp_dec_pcb_refcount+0x40>)
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d105      	bne.n	800c1d0 <dhcp_dec_pcb_refcount+0x18>
 800c1c4:	4b0d      	ldr	r3, [pc, #52]	@ (800c1fc <dhcp_dec_pcb_refcount+0x44>)
 800c1c6:	22ff      	movs	r2, #255	@ 0xff
 800c1c8:	490d      	ldr	r1, [pc, #52]	@ (800c200 <dhcp_dec_pcb_refcount+0x48>)
 800c1ca:	480e      	ldr	r0, [pc, #56]	@ (800c204 <dhcp_dec_pcb_refcount+0x4c>)
 800c1cc:	f004 fa16 	bl	80105fc <iprintf>
  dhcp_pcb_refcount--;
 800c1d0:	4b09      	ldr	r3, [pc, #36]	@ (800c1f8 <dhcp_dec_pcb_refcount+0x40>)
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	4b07      	ldr	r3, [pc, #28]	@ (800c1f8 <dhcp_dec_pcb_refcount+0x40>)
 800c1da:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800c1dc:	4b06      	ldr	r3, [pc, #24]	@ (800c1f8 <dhcp_dec_pcb_refcount+0x40>)
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d107      	bne.n	800c1f4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800c1e4:	4b08      	ldr	r3, [pc, #32]	@ (800c208 <dhcp_dec_pcb_refcount+0x50>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff ff09 	bl	800c000 <udp_remove>
    dhcp_pcb = NULL;
 800c1ee:	4b06      	ldr	r3, [pc, #24]	@ (800c208 <dhcp_dec_pcb_refcount+0x50>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	601a      	str	r2, [r3, #0]
  }
}
 800c1f4:	bf00      	nop
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	2000832c 	.word	0x2000832c
 800c1fc:	08013740 	.word	0x08013740
 800c200:	080137c8 	.word	0x080137c8
 800c204:	080137a0 	.word	0x080137a0
 800c208:	20008328 	.word	0x20008328

0800c20c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c218:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800c21a:	210c      	movs	r1, #12
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f001 f84f 	bl	800d2c0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c222:	4b06      	ldr	r3, [pc, #24]	@ (800c23c <dhcp_handle_nak+0x30>)
 800c224:	4a05      	ldr	r2, [pc, #20]	@ (800c23c <dhcp_handle_nak+0x30>)
 800c226:	4905      	ldr	r1, [pc, #20]	@ (800c23c <dhcp_handle_nak+0x30>)
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7f9 f8f9 	bl	8005420 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fc48 	bl	800cac4 <dhcp_discover>
}
 800c234:	bf00      	nop
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	080142a8 	.word	0x080142a8

0800c240 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800c24e:	2108      	movs	r1, #8
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f001 f835 	bl	800d2c0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	331c      	adds	r3, #28
 800c25a:	2200      	movs	r2, #0
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f002 fb36 	bl	800e8d0 <etharp_query>
 800c264:	4603      	mov	r3, r0
 800c266:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	799b      	ldrb	r3, [r3, #6]
 800c26c:	2bff      	cmp	r3, #255	@ 0xff
 800c26e:	d005      	beq.n	800c27c <dhcp_check+0x3c>
    dhcp->tries++;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	799b      	ldrb	r3, [r3, #6]
 800c274:	3301      	adds	r3, #1
 800c276:	b2da      	uxtb	r2, r3
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800c27c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800c280:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c282:	893b      	ldrh	r3, [r7, #8]
 800c284:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800c288:	4a06      	ldr	r2, [pc, #24]	@ (800c2a4 <dhcp_check+0x64>)
 800c28a:	fb82 1203 	smull	r1, r2, r2, r3
 800c28e:	1152      	asrs	r2, r2, #5
 800c290:	17db      	asrs	r3, r3, #31
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	b29a      	uxth	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800c29a:	bf00      	nop
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	10624dd3 	.word	0x10624dd3

0800c2a8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800c2b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c2ec <dhcp_handle_offer+0x44>)
 800c2ba:	789b      	ldrb	r3, [r3, #2]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d011      	beq.n	800c2e4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800c2c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c2f0 <dhcp_handle_offer+0x48>)
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7f8 fa34 	bl	8004738 <lwip_htonl>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	691a      	ldr	r2, [r3, #16]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 f808 	bl	800c2f4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800c2e4:	bf00      	nop
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20008320 	.word	0x20008320
 800c2f0:	20008300 	.word	0x20008300

0800c2f4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800c2f4:	b5b0      	push	{r4, r5, r7, lr}
 800c2f6:	b08a      	sub	sp, #40	@ 0x28
 800c2f8:	af02      	add	r7, sp, #8
 800c2fa:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d109      	bne.n	800c316 <dhcp_select+0x22>
 800c302:	4b71      	ldr	r3, [pc, #452]	@ (800c4c8 <dhcp_select+0x1d4>)
 800c304:	f240 1277 	movw	r2, #375	@ 0x177
 800c308:	4970      	ldr	r1, [pc, #448]	@ (800c4cc <dhcp_select+0x1d8>)
 800c30a:	4871      	ldr	r0, [pc, #452]	@ (800c4d0 <dhcp_select+0x1dc>)
 800c30c:	f004 f976 	bl	80105fc <iprintf>
 800c310:	f06f 030f 	mvn.w	r3, #15
 800c314:	e0d3      	b.n	800c4be <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c31a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d109      	bne.n	800c336 <dhcp_select+0x42>
 800c322:	4b69      	ldr	r3, [pc, #420]	@ (800c4c8 <dhcp_select+0x1d4>)
 800c324:	f240 1279 	movw	r2, #377	@ 0x179
 800c328:	496a      	ldr	r1, [pc, #424]	@ (800c4d4 <dhcp_select+0x1e0>)
 800c32a:	4869      	ldr	r0, [pc, #420]	@ (800c4d0 <dhcp_select+0x1dc>)
 800c32c:	f004 f966 	bl	80105fc <iprintf>
 800c330:	f06f 0305 	mvn.w	r3, #5
 800c334:	e0c3      	b.n	800c4be <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800c336:	2101      	movs	r1, #1
 800c338:	69b8      	ldr	r0, [r7, #24]
 800c33a:	f000 ffc1 	bl	800d2c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c33e:	f107 030c 	add.w	r3, r7, #12
 800c342:	2203      	movs	r2, #3
 800c344:	69b9      	ldr	r1, [r7, #24]
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f001 fc46 	bl	800dbd8 <dhcp_create_msg>
 800c34c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	2b00      	cmp	r3, #0
 800c352:	f000 8085 	beq.w	800c460 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c35c:	89b8      	ldrh	r0, [r7, #12]
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800c364:	2302      	movs	r3, #2
 800c366:	2239      	movs	r2, #57	@ 0x39
 800c368:	f000 ffc4 	bl	800d2f4 <dhcp_option>
 800c36c:	4603      	mov	r3, r0
 800c36e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c370:	89b8      	ldrh	r0, [r7, #12]
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c37c:	461a      	mov	r2, r3
 800c37e:	f001 f813 	bl	800d3a8 <dhcp_option_short>
 800c382:	4603      	mov	r3, r0
 800c384:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c386:	89b8      	ldrh	r0, [r7, #12]
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800c38e:	2304      	movs	r3, #4
 800c390:	2232      	movs	r2, #50	@ 0x32
 800c392:	f000 ffaf 	bl	800d2f4 <dhcp_option>
 800c396:	4603      	mov	r3, r0
 800c398:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c39a:	89bc      	ldrh	r4, [r7, #12]
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	69db      	ldr	r3, [r3, #28]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7f8 f9c6 	bl	8004738 <lwip_htonl>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f001 f82a 	bl	800d40c <dhcp_option_long>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800c3bc:	89b8      	ldrh	r0, [r7, #12]
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800c3c4:	2304      	movs	r3, #4
 800c3c6:	2236      	movs	r2, #54	@ 0x36
 800c3c8:	f000 ff94 	bl	800d2f4 <dhcp_option>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800c3d0:	89bc      	ldrh	r4, [r7, #12]
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	699b      	ldr	r3, [r3, #24]
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7f8 f9ab 	bl	8004738 <lwip_htonl>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f001 f80f 	bl	800d40c <dhcp_option_long>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c3f2:	89b8      	ldrh	r0, [r7, #12]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800c3fa:	2303      	movs	r3, #3
 800c3fc:	2237      	movs	r2, #55	@ 0x37
 800c3fe:	f000 ff79 	bl	800d2f4 <dhcp_option>
 800c402:	4603      	mov	r3, r0
 800c404:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c406:	2300      	movs	r3, #0
 800c408:	77bb      	strb	r3, [r7, #30]
 800c40a:	e00e      	b.n	800c42a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c40c:	89b8      	ldrh	r0, [r7, #12]
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800c414:	7fbb      	ldrb	r3, [r7, #30]
 800c416:	4a30      	ldr	r2, [pc, #192]	@ (800c4d8 <dhcp_select+0x1e4>)
 800c418:	5cd3      	ldrb	r3, [r2, r3]
 800c41a:	461a      	mov	r2, r3
 800c41c:	f000 ff9e 	bl	800d35c <dhcp_option_byte>
 800c420:	4603      	mov	r3, r0
 800c422:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c424:	7fbb      	ldrb	r3, [r7, #30]
 800c426:	3301      	adds	r3, #1
 800c428:	77bb      	strb	r3, [r7, #30]
 800c42a:	7fbb      	ldrb	r3, [r7, #30]
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d9ed      	bls.n	800c40c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c430:	89b8      	ldrh	r0, [r7, #12]
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	33f0      	adds	r3, #240	@ 0xf0
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	4619      	mov	r1, r3
 800c43a:	f001 fca3 	bl	800dd84 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800c43e:	4b27      	ldr	r3, [pc, #156]	@ (800c4dc <dhcp_select+0x1e8>)
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	4b27      	ldr	r3, [pc, #156]	@ (800c4e0 <dhcp_select+0x1ec>)
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	2343      	movs	r3, #67	@ 0x43
 800c44c:	4a25      	ldr	r2, [pc, #148]	@ (800c4e4 <dhcp_select+0x1f0>)
 800c44e:	6979      	ldr	r1, [r7, #20]
 800c450:	f7ff fbda 	bl	800bc08 <udp_sendto_if_src>
 800c454:	4603      	mov	r3, r0
 800c456:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c458:	6978      	ldr	r0, [r7, #20]
 800c45a:	f7f9 fca1 	bl	8005da0 <pbuf_free>
 800c45e:	e001      	b.n	800c464 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c460:	23ff      	movs	r3, #255	@ 0xff
 800c462:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	799b      	ldrb	r3, [r3, #6]
 800c468:	2bff      	cmp	r3, #255	@ 0xff
 800c46a:	d005      	beq.n	800c478 <dhcp_select+0x184>
    dhcp->tries++;
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	799b      	ldrb	r3, [r3, #6]
 800c470:	3301      	adds	r3, #1
 800c472:	b2da      	uxtb	r2, r3
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	799b      	ldrb	r3, [r3, #6]
 800c47c:	2b05      	cmp	r3, #5
 800c47e:	d80d      	bhi.n	800c49c <dhcp_select+0x1a8>
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	799b      	ldrb	r3, [r3, #6]
 800c484:	461a      	mov	r2, r3
 800c486:	2301      	movs	r3, #1
 800c488:	4093      	lsls	r3, r2
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	461a      	mov	r2, r3
 800c48e:	0152      	lsls	r2, r2, #5
 800c490:	1ad2      	subs	r2, r2, r3
 800c492:	0092      	lsls	r2, r2, #2
 800c494:	4413      	add	r3, r2
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	b29b      	uxth	r3, r3
 800c49a:	e001      	b.n	800c4a0 <dhcp_select+0x1ac>
 800c49c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800c4a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c4a2:	89fb      	ldrh	r3, [r7, #14]
 800c4a4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800c4a8:	4a0f      	ldr	r2, [pc, #60]	@ (800c4e8 <dhcp_select+0x1f4>)
 800c4aa:	fb82 1203 	smull	r1, r2, r2, r3
 800c4ae:	1152      	asrs	r2, r2, #5
 800c4b0:	17db      	asrs	r3, r3, #31
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c4ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3720      	adds	r7, #32
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bdb0      	pop	{r4, r5, r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	08013740 	.word	0x08013740
 800c4cc:	080137ec 	.word	0x080137ec
 800c4d0:	080137a0 	.word	0x080137a0
 800c4d4:	08013808 	.word	0x08013808
 800c4d8:	2000002c 	.word	0x2000002c
 800c4dc:	20008328 	.word	0x20008328
 800c4e0:	080142a8 	.word	0x080142a8
 800c4e4:	080142ac 	.word	0x080142ac
 800c4e8:	10624dd3 	.word	0x10624dd3

0800c4ec <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800c4f2:	4b27      	ldr	r3, [pc, #156]	@ (800c590 <dhcp_coarse_tmr+0xa4>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	607b      	str	r3, [r7, #4]
 800c4f8:	e042      	b.n	800c580 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4fe:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d039      	beq.n	800c57a <dhcp_coarse_tmr+0x8e>
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	795b      	ldrb	r3, [r3, #5]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d035      	beq.n	800c57a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	8a9b      	ldrh	r3, [r3, #20]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d012      	beq.n	800c53c <dhcp_coarse_tmr+0x50>
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	8a5b      	ldrh	r3, [r3, #18]
 800c51a:	3301      	adds	r3, #1
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	825a      	strh	r2, [r3, #18]
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	8a5a      	ldrh	r2, [r3, #18]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	8a9b      	ldrh	r3, [r3, #20]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d106      	bne.n	800c53c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fe2c 	bl	800d18c <dhcp_release_and_stop>
        dhcp_start(netif);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f969 	bl	800c80c <dhcp_start>
 800c53a:	e01e      	b.n	800c57a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	8a1b      	ldrh	r3, [r3, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00b      	beq.n	800c55c <dhcp_coarse_tmr+0x70>
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	8a1b      	ldrh	r3, [r3, #16]
 800c548:	1e5a      	subs	r2, r3, #1
 800c54a:	b291      	uxth	r1, r2
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	8211      	strh	r1, [r2, #16]
 800c550:	2b01      	cmp	r3, #1
 800c552:	d103      	bne.n	800c55c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f8c6 	bl	800c6e6 <dhcp_t2_timeout>
 800c55a:	e00e      	b.n	800c57a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	89db      	ldrh	r3, [r3, #14]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00a      	beq.n	800c57a <dhcp_coarse_tmr+0x8e>
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	89db      	ldrh	r3, [r3, #14]
 800c568:	1e5a      	subs	r2, r3, #1
 800c56a:	b291      	uxth	r1, r2
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	81d1      	strh	r1, [r2, #14]
 800c570:	2b01      	cmp	r3, #1
 800c572:	d102      	bne.n	800c57a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f888 	bl	800c68a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	607b      	str	r3, [r7, #4]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1b9      	bne.n	800c4fa <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800c586:	bf00      	nop
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	20008294 	.word	0x20008294

0800c594 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800c59a:	4b16      	ldr	r3, [pc, #88]	@ (800c5f4 <dhcp_fine_tmr+0x60>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	607b      	str	r3, [r7, #4]
 800c5a0:	e020      	b.n	800c5e4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5a6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d017      	beq.n	800c5de <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	891b      	ldrh	r3, [r3, #8]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d906      	bls.n	800c5c4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	891b      	ldrh	r3, [r3, #8]
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	811a      	strh	r2, [r3, #8]
 800c5c2:	e00c      	b.n	800c5de <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	891b      	ldrh	r3, [r3, #8]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d108      	bne.n	800c5de <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	891b      	ldrh	r3, [r3, #8]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 f80d 	bl	800c5f8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	607b      	str	r3, [r7, #4]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1db      	bne.n	800c5a2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800c5ea:	bf00      	nop
 800c5ec:	bf00      	nop
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	20008294 	.word	0x20008294

0800c5f8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c604:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	795b      	ldrb	r3, [r3, #5]
 800c60a:	2b0c      	cmp	r3, #12
 800c60c:	d003      	beq.n	800c616 <dhcp_timeout+0x1e>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	795b      	ldrb	r3, [r3, #5]
 800c612:	2b06      	cmp	r3, #6
 800c614:	d103      	bne.n	800c61e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fa54 	bl	800cac4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800c61c:	e031      	b.n	800c682 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	795b      	ldrb	r3, [r3, #5]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d10e      	bne.n	800c644 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	799b      	ldrb	r3, [r3, #6]
 800c62a:	2b05      	cmp	r3, #5
 800c62c:	d803      	bhi.n	800c636 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7ff fe60 	bl	800c2f4 <dhcp_select>
}
 800c634:	e025      	b.n	800c682 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fda8 	bl	800d18c <dhcp_release_and_stop>
      dhcp_start(netif);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 f8e5 	bl	800c80c <dhcp_start>
}
 800c642:	e01e      	b.n	800c682 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	795b      	ldrb	r3, [r3, #5]
 800c648:	2b08      	cmp	r3, #8
 800c64a:	d10b      	bne.n	800c664 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	799b      	ldrb	r3, [r3, #6]
 800c650:	2b01      	cmp	r3, #1
 800c652:	d803      	bhi.n	800c65c <dhcp_timeout+0x64>
      dhcp_check(netif);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7ff fdf3 	bl	800c240 <dhcp_check>
}
 800c65a:	e012      	b.n	800c682 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 fad3 	bl	800cc08 <dhcp_bind>
}
 800c662:	e00e      	b.n	800c682 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	795b      	ldrb	r3, [r3, #5]
 800c668:	2b03      	cmp	r3, #3
 800c66a:	d10a      	bne.n	800c682 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	799b      	ldrb	r3, [r3, #6]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d803      	bhi.n	800c67c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 fcd5 	bl	800d024 <dhcp_reboot>
}
 800c67a:	e002      	b.n	800c682 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 fa21 	bl	800cac4 <dhcp_discover>
}
 800c682:	bf00      	nop
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b084      	sub	sp, #16
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c696:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	795b      	ldrb	r3, [r3, #5]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d007      	beq.n	800c6b0 <dhcp_t1_timeout+0x26>
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	795b      	ldrb	r3, [r3, #5]
 800c6a4:	2b0a      	cmp	r3, #10
 800c6a6:	d003      	beq.n	800c6b0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c6ac:	2b05      	cmp	r3, #5
 800c6ae:	d116      	bne.n	800c6de <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fb83 	bl	800cdbc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	899b      	ldrh	r3, [r3, #12]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	8a5b      	ldrh	r3, [r3, #18]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	dd0b      	ble.n	800c6de <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	899b      	ldrh	r3, [r3, #12]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	8a5b      	ldrh	r3, [r3, #18]
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	0fda      	lsrs	r2, r3, #31
 800c6d4:	4413      	add	r3, r2
 800c6d6:	105b      	asrs	r3, r3, #1
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800c6de:	bf00      	nop
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b084      	sub	sp, #16
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	795b      	ldrb	r3, [r3, #5]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d00b      	beq.n	800c714 <dhcp_t2_timeout+0x2e>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	795b      	ldrb	r3, [r3, #5]
 800c700:	2b0a      	cmp	r3, #10
 800c702:	d007      	beq.n	800c714 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c708:	2b05      	cmp	r3, #5
 800c70a:	d003      	beq.n	800c714 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	795b      	ldrb	r3, [r3, #5]
 800c710:	2b04      	cmp	r3, #4
 800c712:	d116      	bne.n	800c742 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 fbeb 	bl	800cef0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	8a9b      	ldrh	r3, [r3, #20]
 800c71e:	461a      	mov	r2, r3
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	8a5b      	ldrh	r3, [r3, #18]
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	2b01      	cmp	r3, #1
 800c728:	dd0b      	ble.n	800c742 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	8a9b      	ldrh	r3, [r3, #20]
 800c72e:	461a      	mov	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	8a5b      	ldrh	r3, [r3, #18]
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	0fda      	lsrs	r2, r3, #31
 800c738:	4413      	add	r3, r2
 800c73a:	105b      	asrs	r3, r3, #1
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800c742:	bf00      	nop
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
	...

0800c74c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c75a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800c768:	4b26      	ldr	r3, [pc, #152]	@ (800c804 <dhcp_handle_ack+0xb8>)
 800c76a:	78db      	ldrb	r3, [r3, #3]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d003      	beq.n	800c778 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800c770:	4b25      	ldr	r3, [pc, #148]	@ (800c808 <dhcp_handle_ack+0xbc>)
 800c772:	68da      	ldr	r2, [r3, #12]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800c778:	4b22      	ldr	r3, [pc, #136]	@ (800c804 <dhcp_handle_ack+0xb8>)
 800c77a:	791b      	ldrb	r3, [r3, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d004      	beq.n	800c78a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800c780:	4b21      	ldr	r3, [pc, #132]	@ (800c808 <dhcp_handle_ack+0xbc>)
 800c782:	691a      	ldr	r2, [r3, #16]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c788:	e004      	b.n	800c794 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c78e:	085a      	lsrs	r2, r3, #1
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800c794:	4b1b      	ldr	r3, [pc, #108]	@ (800c804 <dhcp_handle_ack+0xb8>)
 800c796:	795b      	ldrb	r3, [r3, #5]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d004      	beq.n	800c7a6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800c79c:	4b1a      	ldr	r3, [pc, #104]	@ (800c808 <dhcp_handle_ack+0xbc>)
 800c79e:	695a      	ldr	r2, [r3, #20]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	631a      	str	r2, [r3, #48]	@ 0x30
 800c7a4:	e007      	b.n	800c7b6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	1a9b      	subs	r3, r3, r2
 800c7b0:	08da      	lsrs	r2, r3, #3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	691a      	ldr	r2, [r3, #16]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800c7be:	4b11      	ldr	r3, [pc, #68]	@ (800c804 <dhcp_handle_ack+0xb8>)
 800c7c0:	799b      	ldrb	r3, [r3, #6]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00b      	beq.n	800c7de <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800c7c6:	4b10      	ldr	r3, [pc, #64]	@ (800c808 <dhcp_handle_ack+0xbc>)
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7f7 ffb4 	bl	8004738 <lwip_htonl>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	71da      	strb	r2, [r3, #7]
 800c7dc:	e002      	b.n	800c7e4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800c7e4:	4b07      	ldr	r3, [pc, #28]	@ (800c804 <dhcp_handle_ack+0xb8>)
 800c7e6:	79db      	ldrb	r3, [r3, #7]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d007      	beq.n	800c7fc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800c7ec:	4b06      	ldr	r3, [pc, #24]	@ (800c808 <dhcp_handle_ack+0xbc>)
 800c7ee:	69db      	ldr	r3, [r3, #28]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7f7 ffa1 	bl	8004738 <lwip_htonl>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	20008320 	.word	0x20008320
 800c808:	20008300 	.word	0x20008300

0800c80c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d109      	bne.n	800c82e <dhcp_start+0x22>
 800c81a:	4b37      	ldr	r3, [pc, #220]	@ (800c8f8 <dhcp_start+0xec>)
 800c81c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800c820:	4936      	ldr	r1, [pc, #216]	@ (800c8fc <dhcp_start+0xf0>)
 800c822:	4837      	ldr	r0, [pc, #220]	@ (800c900 <dhcp_start+0xf4>)
 800c824:	f003 feea 	bl	80105fc <iprintf>
 800c828:	f06f 030f 	mvn.w	r3, #15
 800c82c:	e060      	b.n	800c8f0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c834:	f003 0301 	and.w	r3, r3, #1
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d109      	bne.n	800c850 <dhcp_start+0x44>
 800c83c:	4b2e      	ldr	r3, [pc, #184]	@ (800c8f8 <dhcp_start+0xec>)
 800c83e:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800c842:	4930      	ldr	r1, [pc, #192]	@ (800c904 <dhcp_start+0xf8>)
 800c844:	482e      	ldr	r0, [pc, #184]	@ (800c900 <dhcp_start+0xf4>)
 800c846:	f003 fed9 	bl	80105fc <iprintf>
 800c84a:	f06f 030f 	mvn.w	r3, #15
 800c84e:	e04f      	b.n	800c8f0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c854:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c85a:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800c85e:	d202      	bcs.n	800c866 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800c860:	f04f 33ff 	mov.w	r3, #4294967295
 800c864:	e044      	b.n	800c8f0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10d      	bne.n	800c888 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800c86c:	2034      	movs	r0, #52	@ 0x34
 800c86e:	f7f8 fa35 	bl	8004cdc <mem_malloc>
 800c872:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d102      	bne.n	800c880 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800c87a:	f04f 33ff 	mov.w	r3, #4294967295
 800c87e:	e037      	b.n	800c8f0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	68fa      	ldr	r2, [r7, #12]
 800c884:	625a      	str	r2, [r3, #36]	@ 0x24
 800c886:	e005      	b.n	800c894 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	791b      	ldrb	r3, [r3, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d001      	beq.n	800c894 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c890:	f7ff fc92 	bl	800c1b8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800c894:	2234      	movs	r2, #52	@ 0x34
 800c896:	2100      	movs	r1, #0
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f003 ff14 	bl	80106c6 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800c89e:	f7ff fc39 	bl	800c114 <dhcp_inc_pcb_refcount>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d002      	beq.n	800c8ae <dhcp_start+0xa2>
    return ERR_MEM;
 800c8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ac:	e020      	b.n	800c8f0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c8ba:	f003 0304 	and.w	r3, r3, #4
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d105      	bne.n	800c8ce <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800c8c2:	2102      	movs	r1, #2
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f000 fcfb 	bl	800d2c0 <dhcp_set_state>
    return ERR_OK;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	e010      	b.n	800c8f0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 f8f8 	bl	800cac4 <dhcp_discover>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800c8d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d005      	beq.n	800c8ec <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fc53 	bl	800d18c <dhcp_release_and_stop>
    return ERR_MEM;
 800c8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ea:	e001      	b.n	800c8f0 <dhcp_start+0xe4>
  }
  return result;
 800c8ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	08013740 	.word	0x08013740
 800c8fc:	08013824 	.word	0x08013824
 800c900:	080137a0 	.word	0x080137a0
 800c904:	08013868 	.word	0x08013868

0800c908 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c914:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d025      	beq.n	800c968 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	795b      	ldrb	r3, [r3, #5]
 800c920:	2b0a      	cmp	r3, #10
 800c922:	d008      	beq.n	800c936 <dhcp_network_changed+0x2e>
 800c924:	2b0a      	cmp	r3, #10
 800c926:	dc0d      	bgt.n	800c944 <dhcp_network_changed+0x3c>
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d01f      	beq.n	800c96c <dhcp_network_changed+0x64>
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	db09      	blt.n	800c944 <dhcp_network_changed+0x3c>
 800c930:	3b03      	subs	r3, #3
 800c932:	2b02      	cmp	r3, #2
 800c934:	d806      	bhi.n	800c944 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2200      	movs	r2, #0
 800c93a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 fb71 	bl	800d024 <dhcp_reboot>
      break;
 800c942:	e014      	b.n	800c96e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	795b      	ldrb	r3, [r3, #5]
 800c948:	2b0c      	cmp	r3, #12
 800c94a:	d906      	bls.n	800c95a <dhcp_network_changed+0x52>
 800c94c:	4b09      	ldr	r3, [pc, #36]	@ (800c974 <dhcp_network_changed+0x6c>)
 800c94e:	f240 326d 	movw	r2, #877	@ 0x36d
 800c952:	4909      	ldr	r1, [pc, #36]	@ (800c978 <dhcp_network_changed+0x70>)
 800c954:	4809      	ldr	r0, [pc, #36]	@ (800c97c <dhcp_network_changed+0x74>)
 800c956:	f003 fe51 	bl	80105fc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 f8af 	bl	800cac4 <dhcp_discover>
      break;
 800c966:	e002      	b.n	800c96e <dhcp_network_changed+0x66>
    return;
 800c968:	bf00      	nop
 800c96a:	e000      	b.n	800c96e <dhcp_network_changed+0x66>
      break;
 800c96c:	bf00      	nop
  }
}
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	08013740 	.word	0x08013740
 800c978:	0801388c 	.word	0x0801388c
 800c97c:	080137a0 	.word	0x080137a0

0800c980 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d107      	bne.n	800c9a0 <dhcp_arp_reply+0x20>
 800c990:	4b0e      	ldr	r3, [pc, #56]	@ (800c9cc <dhcp_arp_reply+0x4c>)
 800c992:	f240 328b 	movw	r2, #907	@ 0x38b
 800c996:	490e      	ldr	r1, [pc, #56]	@ (800c9d0 <dhcp_arp_reply+0x50>)
 800c998:	480e      	ldr	r0, [pc, #56]	@ (800c9d4 <dhcp_arp_reply+0x54>)
 800c99a:	f003 fe2f 	bl	80105fc <iprintf>
 800c99e:	e012      	b.n	800c9c6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9a4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00c      	beq.n	800c9c6 <dhcp_arp_reply+0x46>
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	795b      	ldrb	r3, [r3, #5]
 800c9b0:	2b08      	cmp	r3, #8
 800c9b2:	d108      	bne.n	800c9c6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	69db      	ldr	r3, [r3, #28]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d102      	bne.n	800c9c6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f809 	bl	800c9d8 <dhcp_decline>
    }
  }
}
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	08013740 	.word	0x08013740
 800c9d0:	08013824 	.word	0x08013824
 800c9d4:	080137a0 	.word	0x080137a0

0800c9d8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800c9d8:	b5b0      	push	{r4, r5, r7, lr}
 800c9da:	b08a      	sub	sp, #40	@ 0x28
 800c9dc:	af02      	add	r7, sp, #8
 800c9de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800c9e6:	210c      	movs	r1, #12
 800c9e8:	69b8      	ldr	r0, [r7, #24]
 800c9ea:	f000 fc69 	bl	800d2c0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800c9ee:	f107 030c 	add.w	r3, r7, #12
 800c9f2:	2204      	movs	r2, #4
 800c9f4:	69b9      	ldr	r1, [r7, #24]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f001 f8ee 	bl	800dbd8 <dhcp_create_msg>
 800c9fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d035      	beq.n	800ca70 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ca0a:	89b8      	ldrh	r0, [r7, #12]
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ca12:	2304      	movs	r3, #4
 800ca14:	2232      	movs	r2, #50	@ 0x32
 800ca16:	f000 fc6d 	bl	800d2f4 <dhcp_option>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ca1e:	89bc      	ldrh	r4, [r7, #12]
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	69db      	ldr	r3, [r3, #28]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7f7 fe84 	bl	8004738 <lwip_htonl>
 800ca30:	4603      	mov	r3, r0
 800ca32:	461a      	mov	r2, r3
 800ca34:	4629      	mov	r1, r5
 800ca36:	4620      	mov	r0, r4
 800ca38:	f000 fce8 	bl	800d40c <dhcp_option_long>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ca40:	89b8      	ldrh	r0, [r7, #12]
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	33f0      	adds	r3, #240	@ 0xf0
 800ca46:	697a      	ldr	r2, [r7, #20]
 800ca48:	4619      	mov	r1, r3
 800ca4a:	f001 f99b 	bl	800dd84 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ca4e:	4b19      	ldr	r3, [pc, #100]	@ (800cab4 <dhcp_decline+0xdc>)
 800ca50:	6818      	ldr	r0, [r3, #0]
 800ca52:	4b19      	ldr	r3, [pc, #100]	@ (800cab8 <dhcp_decline+0xe0>)
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	2343      	movs	r3, #67	@ 0x43
 800ca5c:	4a17      	ldr	r2, [pc, #92]	@ (800cabc <dhcp_decline+0xe4>)
 800ca5e:	6979      	ldr	r1, [r7, #20]
 800ca60:	f7ff f8d2 	bl	800bc08 <udp_sendto_if_src>
 800ca64:	4603      	mov	r3, r0
 800ca66:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ca68:	6978      	ldr	r0, [r7, #20]
 800ca6a:	f7f9 f999 	bl	8005da0 <pbuf_free>
 800ca6e:	e001      	b.n	800ca74 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ca70:	23ff      	movs	r3, #255	@ 0xff
 800ca72:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	799b      	ldrb	r3, [r3, #6]
 800ca78:	2bff      	cmp	r3, #255	@ 0xff
 800ca7a:	d005      	beq.n	800ca88 <dhcp_decline+0xb0>
    dhcp->tries++;
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	799b      	ldrb	r3, [r3, #6]
 800ca80:	3301      	adds	r3, #1
 800ca82:	b2da      	uxtb	r2, r3
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800ca88:	f242 7310 	movw	r3, #10000	@ 0x2710
 800ca8c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ca8e:	89fb      	ldrh	r3, [r7, #14]
 800ca90:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800ca94:	4a0a      	ldr	r2, [pc, #40]	@ (800cac0 <dhcp_decline+0xe8>)
 800ca96:	fb82 1203 	smull	r1, r2, r2, r3
 800ca9a:	1152      	asrs	r2, r2, #5
 800ca9c:	17db      	asrs	r3, r3, #31
 800ca9e:	1ad3      	subs	r3, r2, r3
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800caa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3720      	adds	r7, #32
 800caae:	46bd      	mov	sp, r7
 800cab0:	bdb0      	pop	{r4, r5, r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20008328 	.word	0x20008328
 800cab8:	080142a8 	.word	0x080142a8
 800cabc:	080142ac 	.word	0x080142ac
 800cac0:	10624dd3 	.word	0x10624dd3

0800cac4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b08a      	sub	sp, #40	@ 0x28
 800cac8:	af02      	add	r7, sp, #8
 800caca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800cad2:	2300      	movs	r3, #0
 800cad4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	2200      	movs	r2, #0
 800cada:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800cadc:	2106      	movs	r1, #6
 800cade:	69b8      	ldr	r0, [r7, #24]
 800cae0:	f000 fbee 	bl	800d2c0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800cae4:	f107 0308 	add.w	r3, r7, #8
 800cae8:	2201      	movs	r2, #1
 800caea:	69b9      	ldr	r1, [r7, #24]
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f001 f873 	bl	800dbd8 <dhcp_create_msg>
 800caf2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d04b      	beq.n	800cb92 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800cb00:	8938      	ldrh	r0, [r7, #8]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800cb08:	2302      	movs	r3, #2
 800cb0a:	2239      	movs	r2, #57	@ 0x39
 800cb0c:	f000 fbf2 	bl	800d2f4 <dhcp_option>
 800cb10:	4603      	mov	r3, r0
 800cb12:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800cb14:	8938      	ldrh	r0, [r7, #8]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb20:	461a      	mov	r2, r3
 800cb22:	f000 fc41 	bl	800d3a8 <dhcp_option_short>
 800cb26:	4603      	mov	r3, r0
 800cb28:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800cb2a:	8938      	ldrh	r0, [r7, #8]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800cb32:	2303      	movs	r3, #3
 800cb34:	2237      	movs	r2, #55	@ 0x37
 800cb36:	f000 fbdd 	bl	800d2f4 <dhcp_option>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cb3e:	2300      	movs	r3, #0
 800cb40:	77fb      	strb	r3, [r7, #31]
 800cb42:	e00e      	b.n	800cb62 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800cb44:	8938      	ldrh	r0, [r7, #8]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800cb4c:	7ffb      	ldrb	r3, [r7, #31]
 800cb4e:	4a29      	ldr	r2, [pc, #164]	@ (800cbf4 <dhcp_discover+0x130>)
 800cb50:	5cd3      	ldrb	r3, [r2, r3]
 800cb52:	461a      	mov	r2, r3
 800cb54:	f000 fc02 	bl	800d35c <dhcp_option_byte>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cb5c:	7ffb      	ldrb	r3, [r7, #31]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	77fb      	strb	r3, [r7, #31]
 800cb62:	7ffb      	ldrb	r3, [r7, #31]
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d9ed      	bls.n	800cb44 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800cb68:	8938      	ldrh	r0, [r7, #8]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	33f0      	adds	r3, #240	@ 0xf0
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	4619      	mov	r1, r3
 800cb72:	f001 f907 	bl	800dd84 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800cb76:	4b20      	ldr	r3, [pc, #128]	@ (800cbf8 <dhcp_discover+0x134>)
 800cb78:	6818      	ldr	r0, [r3, #0]
 800cb7a:	4b20      	ldr	r3, [pc, #128]	@ (800cbfc <dhcp_discover+0x138>)
 800cb7c:	9301      	str	r3, [sp, #4]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	2343      	movs	r3, #67	@ 0x43
 800cb84:	4a1e      	ldr	r2, [pc, #120]	@ (800cc00 <dhcp_discover+0x13c>)
 800cb86:	6939      	ldr	r1, [r7, #16]
 800cb88:	f7ff f83e 	bl	800bc08 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800cb8c:	6938      	ldr	r0, [r7, #16]
 800cb8e:	f7f9 f907 	bl	8005da0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	799b      	ldrb	r3, [r3, #6]
 800cb96:	2bff      	cmp	r3, #255	@ 0xff
 800cb98:	d005      	beq.n	800cba6 <dhcp_discover+0xe2>
    dhcp->tries++;
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	799b      	ldrb	r3, [r3, #6]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	b2da      	uxtb	r2, r3
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	799b      	ldrb	r3, [r3, #6]
 800cbaa:	2b05      	cmp	r3, #5
 800cbac:	d80d      	bhi.n	800cbca <dhcp_discover+0x106>
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	799b      	ldrb	r3, [r3, #6]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	4093      	lsls	r3, r2
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	461a      	mov	r2, r3
 800cbbc:	0152      	lsls	r2, r2, #5
 800cbbe:	1ad2      	subs	r2, r2, r3
 800cbc0:	0092      	lsls	r2, r2, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	e001      	b.n	800cbce <dhcp_discover+0x10a>
 800cbca:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800cbce:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800cbd0:	897b      	ldrh	r3, [r7, #10]
 800cbd2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800cbd6:	4a0b      	ldr	r2, [pc, #44]	@ (800cc04 <dhcp_discover+0x140>)
 800cbd8:	fb82 1203 	smull	r1, r2, r2, r3
 800cbdc:	1152      	asrs	r2, r2, #5
 800cbde:	17db      	asrs	r3, r3, #31
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800cbe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3720      	adds	r7, #32
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	2000002c 	.word	0x2000002c
 800cbf8:	20008328 	.word	0x20008328
 800cbfc:	080142a8 	.word	0x080142a8
 800cc00:	080142ac 	.word	0x080142ac
 800cc04:	10624dd3 	.word	0x10624dd3

0800cc08 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b088      	sub	sp, #32
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d107      	bne.n	800cc26 <dhcp_bind+0x1e>
 800cc16:	4b64      	ldr	r3, [pc, #400]	@ (800cda8 <dhcp_bind+0x1a0>)
 800cc18:	f240 4215 	movw	r2, #1045	@ 0x415
 800cc1c:	4963      	ldr	r1, [pc, #396]	@ (800cdac <dhcp_bind+0x1a4>)
 800cc1e:	4864      	ldr	r0, [pc, #400]	@ (800cdb0 <dhcp_bind+0x1a8>)
 800cc20:	f003 fcec 	bl	80105fc <iprintf>
 800cc24:	e0bc      	b.n	800cda0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc2a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d107      	bne.n	800cc42 <dhcp_bind+0x3a>
 800cc32:	4b5d      	ldr	r3, [pc, #372]	@ (800cda8 <dhcp_bind+0x1a0>)
 800cc34:	f240 4217 	movw	r2, #1047	@ 0x417
 800cc38:	495e      	ldr	r1, [pc, #376]	@ (800cdb4 <dhcp_bind+0x1ac>)
 800cc3a:	485d      	ldr	r0, [pc, #372]	@ (800cdb0 <dhcp_bind+0x1a8>)
 800cc3c:	f003 fcde 	bl	80105fc <iprintf>
 800cc40:	e0ae      	b.n	800cda0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	2200      	movs	r2, #0
 800cc46:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc50:	d019      	beq.n	800cc86 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc56:	331e      	adds	r3, #30
 800cc58:	4a57      	ldr	r2, [pc, #348]	@ (800cdb8 <dhcp_bind+0x1b0>)
 800cc5a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc5e:	095b      	lsrs	r3, r3, #5
 800cc60:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc68:	d302      	bcc.n	800cc70 <dhcp_bind+0x68>
      timeout = 0xffff;
 800cc6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc6e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	b29a      	uxth	r2, r3
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	8a9b      	ldrh	r3, [r3, #20]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d102      	bne.n	800cc86 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	2201      	movs	r2, #1
 800cc84:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8e:	d01d      	beq.n	800cccc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc94:	331e      	adds	r3, #30
 800cc96:	4a48      	ldr	r2, [pc, #288]	@ (800cdb8 <dhcp_bind+0x1b0>)
 800cc98:	fba2 2303 	umull	r2, r3, r2, r3
 800cc9c:	095b      	lsrs	r3, r3, #5
 800cc9e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cca6:	d302      	bcc.n	800ccae <dhcp_bind+0xa6>
      timeout = 0xffff;
 800cca8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ccac:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	895b      	ldrh	r3, [r3, #10]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d102      	bne.n	800ccc4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	895a      	ldrh	r2, [r3, #10]
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd4:	d01d      	beq.n	800cd12 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccda:	331e      	adds	r3, #30
 800ccdc:	4a36      	ldr	r2, [pc, #216]	@ (800cdb8 <dhcp_bind+0x1b0>)
 800ccde:	fba2 2303 	umull	r2, r3, r2, r3
 800cce2:	095b      	lsrs	r3, r3, #5
 800cce4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ccec:	d302      	bcc.n	800ccf4 <dhcp_bind+0xec>
      timeout = 0xffff;
 800ccee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ccf2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	899b      	ldrh	r3, [r3, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d102      	bne.n	800cd0a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	2201      	movs	r2, #1
 800cd08:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	899a      	ldrh	r2, [r3, #12]
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	895a      	ldrh	r2, [r3, #10]
 800cd16:	69bb      	ldr	r3, [r7, #24]
 800cd18:	899b      	ldrh	r3, [r3, #12]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d306      	bcc.n	800cd2c <dhcp_bind+0x124>
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	899b      	ldrh	r3, [r3, #12]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d002      	beq.n	800cd2c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	79db      	ldrb	r3, [r3, #7]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d003      	beq.n	800cd3c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	6a1b      	ldr	r3, [r3, #32]
 800cd38:	613b      	str	r3, [r7, #16]
 800cd3a:	e014      	b.n	800cd66 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800cd3c:	69bb      	ldr	r3, [r7, #24]
 800cd3e:	331c      	adds	r3, #28
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800cd44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	db02      	blt.n	800cd52 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800cd4c:	23ff      	movs	r3, #255	@ 0xff
 800cd4e:	613b      	str	r3, [r7, #16]
 800cd50:	e009      	b.n	800cd66 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800cd52:	7dfb      	ldrb	r3, [r7, #23]
 800cd54:	2bbf      	cmp	r3, #191	@ 0xbf
 800cd56:	d903      	bls.n	800cd60 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800cd58:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800cd5c:	613b      	str	r3, [r7, #16]
 800cd5e:	e002      	b.n	800cd66 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800cd60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cd64:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd6a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d108      	bne.n	800cd84 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	69da      	ldr	r2, [r3, #28]
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	4013      	ands	r3, r2
 800cd7a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cd82:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800cd84:	210a      	movs	r1, #10
 800cd86:	69b8      	ldr	r0, [r7, #24]
 800cd88:	f000 fa9a 	bl	800d2c0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800cd8c:	69bb      	ldr	r3, [r7, #24]
 800cd8e:	f103 011c 	add.w	r1, r3, #28
 800cd92:	f107 030c 	add.w	r3, r7, #12
 800cd96:	f107 0210 	add.w	r2, r7, #16
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7f8 fb40 	bl	8005420 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800cda0:	3720      	adds	r7, #32
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	08013740 	.word	0x08013740
 800cdac:	080138a0 	.word	0x080138a0
 800cdb0:	080137a0 	.word	0x080137a0
 800cdb4:	080138bc 	.word	0x080138bc
 800cdb8:	88888889 	.word	0x88888889

0800cdbc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08a      	sub	sp, #40	@ 0x28
 800cdc0:	af02      	add	r7, sp, #8
 800cdc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdc8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800cdca:	2105      	movs	r1, #5
 800cdcc:	69b8      	ldr	r0, [r7, #24]
 800cdce:	f000 fa77 	bl	800d2c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800cdd2:	f107 030c 	add.w	r3, r7, #12
 800cdd6:	2203      	movs	r2, #3
 800cdd8:	69b9      	ldr	r1, [r7, #24]
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 fefc 	bl	800dbd8 <dhcp_create_msg>
 800cde0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d04e      	beq.n	800ce86 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800cdee:	89b8      	ldrh	r0, [r7, #12]
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800cdf6:	2302      	movs	r3, #2
 800cdf8:	2239      	movs	r2, #57	@ 0x39
 800cdfa:	f000 fa7b 	bl	800d2f4 <dhcp_option>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ce02:	89b8      	ldrh	r0, [r7, #12]
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce0e:	461a      	mov	r2, r3
 800ce10:	f000 faca 	bl	800d3a8 <dhcp_option_short>
 800ce14:	4603      	mov	r3, r0
 800ce16:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ce18:	89b8      	ldrh	r0, [r7, #12]
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ce20:	2303      	movs	r3, #3
 800ce22:	2237      	movs	r2, #55	@ 0x37
 800ce24:	f000 fa66 	bl	800d2f4 <dhcp_option>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	77bb      	strb	r3, [r7, #30]
 800ce30:	e00e      	b.n	800ce50 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ce32:	89b8      	ldrh	r0, [r7, #12]
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ce3a:	7fbb      	ldrb	r3, [r7, #30]
 800ce3c:	4a29      	ldr	r2, [pc, #164]	@ (800cee4 <dhcp_renew+0x128>)
 800ce3e:	5cd3      	ldrb	r3, [r2, r3]
 800ce40:	461a      	mov	r2, r3
 800ce42:	f000 fa8b 	bl	800d35c <dhcp_option_byte>
 800ce46:	4603      	mov	r3, r0
 800ce48:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ce4a:	7fbb      	ldrb	r3, [r7, #30]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	77bb      	strb	r3, [r7, #30]
 800ce50:	7fbb      	ldrb	r3, [r7, #30]
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	d9ed      	bls.n	800ce32 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ce56:	89b8      	ldrh	r0, [r7, #12]
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	33f0      	adds	r3, #240	@ 0xf0
 800ce5c:	697a      	ldr	r2, [r7, #20]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	f000 ff90 	bl	800dd84 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800ce64:	4b20      	ldr	r3, [pc, #128]	@ (800cee8 <dhcp_renew+0x12c>)
 800ce66:	6818      	ldr	r0, [r3, #0]
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	f103 0218 	add.w	r2, r3, #24
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	2343      	movs	r3, #67	@ 0x43
 800ce74:	6979      	ldr	r1, [r7, #20]
 800ce76:	f7fe fe53 	bl	800bb20 <udp_sendto_if>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ce7e:	6978      	ldr	r0, [r7, #20]
 800ce80:	f7f8 ff8e 	bl	8005da0 <pbuf_free>
 800ce84:	e001      	b.n	800ce8a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ce86:	23ff      	movs	r3, #255	@ 0xff
 800ce88:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	799b      	ldrb	r3, [r3, #6]
 800ce8e:	2bff      	cmp	r3, #255	@ 0xff
 800ce90:	d005      	beq.n	800ce9e <dhcp_renew+0xe2>
    dhcp->tries++;
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	799b      	ldrb	r3, [r3, #6]
 800ce96:	3301      	adds	r3, #1
 800ce98:	b2da      	uxtb	r2, r3
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	799b      	ldrb	r3, [r3, #6]
 800cea2:	2b09      	cmp	r3, #9
 800cea4:	d809      	bhi.n	800ceba <dhcp_renew+0xfe>
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	799b      	ldrb	r3, [r3, #6]
 800ceaa:	461a      	mov	r2, r3
 800ceac:	0152      	lsls	r2, r2, #5
 800ceae:	1ad2      	subs	r2, r2, r3
 800ceb0:	0092      	lsls	r2, r2, #2
 800ceb2:	4413      	add	r3, r2
 800ceb4:	011b      	lsls	r3, r3, #4
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	e001      	b.n	800cebe <dhcp_renew+0x102>
 800ceba:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800cebe:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800cec0:	89fb      	ldrh	r3, [r7, #14]
 800cec2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800cec6:	4a09      	ldr	r2, [pc, #36]	@ (800ceec <dhcp_renew+0x130>)
 800cec8:	fb82 1203 	smull	r1, r2, r2, r3
 800cecc:	1152      	asrs	r2, r2, #5
 800cece:	17db      	asrs	r3, r3, #31
 800ced0:	1ad3      	subs	r3, r2, r3
 800ced2:	b29a      	uxth	r2, r3
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ced8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3720      	adds	r7, #32
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	2000002c 	.word	0x2000002c
 800cee8:	20008328 	.word	0x20008328
 800ceec:	10624dd3 	.word	0x10624dd3

0800cef0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08a      	sub	sp, #40	@ 0x28
 800cef4:	af02      	add	r7, sp, #8
 800cef6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cefc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800cefe:	2104      	movs	r1, #4
 800cf00:	69b8      	ldr	r0, [r7, #24]
 800cf02:	f000 f9dd 	bl	800d2c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800cf06:	f107 030c 	add.w	r3, r7, #12
 800cf0a:	2203      	movs	r2, #3
 800cf0c:	69b9      	ldr	r1, [r7, #24]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fe62 	bl	800dbd8 <dhcp_create_msg>
 800cf14:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d04c      	beq.n	800cfb6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800cf22:	89b8      	ldrh	r0, [r7, #12]
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800cf2a:	2302      	movs	r3, #2
 800cf2c:	2239      	movs	r2, #57	@ 0x39
 800cf2e:	f000 f9e1 	bl	800d2f4 <dhcp_option>
 800cf32:	4603      	mov	r3, r0
 800cf34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800cf36:	89b8      	ldrh	r0, [r7, #12]
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf42:	461a      	mov	r2, r3
 800cf44:	f000 fa30 	bl	800d3a8 <dhcp_option_short>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800cf4c:	89b8      	ldrh	r0, [r7, #12]
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800cf54:	2303      	movs	r3, #3
 800cf56:	2237      	movs	r2, #55	@ 0x37
 800cf58:	f000 f9cc 	bl	800d2f4 <dhcp_option>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cf60:	2300      	movs	r3, #0
 800cf62:	77bb      	strb	r3, [r7, #30]
 800cf64:	e00e      	b.n	800cf84 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800cf66:	89b8      	ldrh	r0, [r7, #12]
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800cf6e:	7fbb      	ldrb	r3, [r7, #30]
 800cf70:	4a28      	ldr	r2, [pc, #160]	@ (800d014 <dhcp_rebind+0x124>)
 800cf72:	5cd3      	ldrb	r3, [r2, r3]
 800cf74:	461a      	mov	r2, r3
 800cf76:	f000 f9f1 	bl	800d35c <dhcp_option_byte>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cf7e:	7fbb      	ldrb	r3, [r7, #30]
 800cf80:	3301      	adds	r3, #1
 800cf82:	77bb      	strb	r3, [r7, #30]
 800cf84:	7fbb      	ldrb	r3, [r7, #30]
 800cf86:	2b02      	cmp	r3, #2
 800cf88:	d9ed      	bls.n	800cf66 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800cf8a:	89b8      	ldrh	r0, [r7, #12]
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	33f0      	adds	r3, #240	@ 0xf0
 800cf90:	697a      	ldr	r2, [r7, #20]
 800cf92:	4619      	mov	r1, r3
 800cf94:	f000 fef6 	bl	800dd84 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800cf98:	4b1f      	ldr	r3, [pc, #124]	@ (800d018 <dhcp_rebind+0x128>)
 800cf9a:	6818      	ldr	r0, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	2343      	movs	r3, #67	@ 0x43
 800cfa2:	4a1e      	ldr	r2, [pc, #120]	@ (800d01c <dhcp_rebind+0x12c>)
 800cfa4:	6979      	ldr	r1, [r7, #20]
 800cfa6:	f7fe fdbb 	bl	800bb20 <udp_sendto_if>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800cfae:	6978      	ldr	r0, [r7, #20]
 800cfb0:	f7f8 fef6 	bl	8005da0 <pbuf_free>
 800cfb4:	e001      	b.n	800cfba <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800cfb6:	23ff      	movs	r3, #255	@ 0xff
 800cfb8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	799b      	ldrb	r3, [r3, #6]
 800cfbe:	2bff      	cmp	r3, #255	@ 0xff
 800cfc0:	d005      	beq.n	800cfce <dhcp_rebind+0xde>
    dhcp->tries++;
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	799b      	ldrb	r3, [r3, #6]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	799b      	ldrb	r3, [r3, #6]
 800cfd2:	2b09      	cmp	r3, #9
 800cfd4:	d809      	bhi.n	800cfea <dhcp_rebind+0xfa>
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	799b      	ldrb	r3, [r3, #6]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	0152      	lsls	r2, r2, #5
 800cfde:	1ad2      	subs	r2, r2, r3
 800cfe0:	0092      	lsls	r2, r2, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	00db      	lsls	r3, r3, #3
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	e001      	b.n	800cfee <dhcp_rebind+0xfe>
 800cfea:	f242 7310 	movw	r3, #10000	@ 0x2710
 800cfee:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800cff0:	89fb      	ldrh	r3, [r7, #14]
 800cff2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800cff6:	4a0a      	ldr	r2, [pc, #40]	@ (800d020 <dhcp_rebind+0x130>)
 800cff8:	fb82 1203 	smull	r1, r2, r2, r3
 800cffc:	1152      	asrs	r2, r2, #5
 800cffe:	17db      	asrs	r3, r3, #31
 800d000:	1ad3      	subs	r3, r2, r3
 800d002:	b29a      	uxth	r2, r3
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d008:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3720      	adds	r7, #32
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	2000002c 	.word	0x2000002c
 800d018:	20008328 	.word	0x20008328
 800d01c:	080142ac 	.word	0x080142ac
 800d020:	10624dd3 	.word	0x10624dd3

0800d024 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800d024:	b5b0      	push	{r4, r5, r7, lr}
 800d026:	b08a      	sub	sp, #40	@ 0x28
 800d028:	af02      	add	r7, sp, #8
 800d02a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d030:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800d032:	2103      	movs	r1, #3
 800d034:	69b8      	ldr	r0, [r7, #24]
 800d036:	f000 f943 	bl	800d2c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d03a:	f107 030c 	add.w	r3, r7, #12
 800d03e:	2203      	movs	r2, #3
 800d040:	69b9      	ldr	r1, [r7, #24]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fdc8 	bl	800dbd8 <dhcp_create_msg>
 800d048:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d066      	beq.n	800d11e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d056:	89b8      	ldrh	r0, [r7, #12]
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800d05e:	2302      	movs	r3, #2
 800d060:	2239      	movs	r2, #57	@ 0x39
 800d062:	f000 f947 	bl	800d2f4 <dhcp_option>
 800d066:	4603      	mov	r3, r0
 800d068:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800d06a:	89b8      	ldrh	r0, [r7, #12]
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	33f0      	adds	r3, #240	@ 0xf0
 800d070:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d074:	4619      	mov	r1, r3
 800d076:	f000 f997 	bl	800d3a8 <dhcp_option_short>
 800d07a:	4603      	mov	r3, r0
 800d07c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d07e:	89b8      	ldrh	r0, [r7, #12]
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800d086:	2304      	movs	r3, #4
 800d088:	2232      	movs	r2, #50	@ 0x32
 800d08a:	f000 f933 	bl	800d2f4 <dhcp_option>
 800d08e:	4603      	mov	r3, r0
 800d090:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d092:	89bc      	ldrh	r4, [r7, #12]
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	69db      	ldr	r3, [r3, #28]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7f7 fb4a 	bl	8004738 <lwip_htonl>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	4629      	mov	r1, r5
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f000 f9ae 	bl	800d40c <dhcp_option_long>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d0b4:	89b8      	ldrh	r0, [r7, #12]
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800d0bc:	2303      	movs	r3, #3
 800d0be:	2237      	movs	r2, #55	@ 0x37
 800d0c0:	f000 f918 	bl	800d2f4 <dhcp_option>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	77bb      	strb	r3, [r7, #30]
 800d0cc:	e00e      	b.n	800d0ec <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d0ce:	89b8      	ldrh	r0, [r7, #12]
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800d0d6:	7fbb      	ldrb	r3, [r7, #30]
 800d0d8:	4a28      	ldr	r2, [pc, #160]	@ (800d17c <dhcp_reboot+0x158>)
 800d0da:	5cd3      	ldrb	r3, [r2, r3]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	f000 f93d 	bl	800d35c <dhcp_option_byte>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d0e6:	7fbb      	ldrb	r3, [r7, #30]
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	77bb      	strb	r3, [r7, #30]
 800d0ec:	7fbb      	ldrb	r3, [r7, #30]
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d9ed      	bls.n	800d0ce <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d0f2:	89b8      	ldrh	r0, [r7, #12]
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	33f0      	adds	r3, #240	@ 0xf0
 800d0f8:	697a      	ldr	r2, [r7, #20]
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	f000 fe42 	bl	800dd84 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d100:	4b1f      	ldr	r3, [pc, #124]	@ (800d180 <dhcp_reboot+0x15c>)
 800d102:	6818      	ldr	r0, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	2343      	movs	r3, #67	@ 0x43
 800d10a:	4a1e      	ldr	r2, [pc, #120]	@ (800d184 <dhcp_reboot+0x160>)
 800d10c:	6979      	ldr	r1, [r7, #20]
 800d10e:	f7fe fd07 	bl	800bb20 <udp_sendto_if>
 800d112:	4603      	mov	r3, r0
 800d114:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d116:	6978      	ldr	r0, [r7, #20]
 800d118:	f7f8 fe42 	bl	8005da0 <pbuf_free>
 800d11c:	e001      	b.n	800d122 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d11e:	23ff      	movs	r3, #255	@ 0xff
 800d120:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	799b      	ldrb	r3, [r3, #6]
 800d126:	2bff      	cmp	r3, #255	@ 0xff
 800d128:	d005      	beq.n	800d136 <dhcp_reboot+0x112>
    dhcp->tries++;
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	799b      	ldrb	r3, [r3, #6]
 800d12e:	3301      	adds	r3, #1
 800d130:	b2da      	uxtb	r2, r3
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	799b      	ldrb	r3, [r3, #6]
 800d13a:	2b09      	cmp	r3, #9
 800d13c:	d809      	bhi.n	800d152 <dhcp_reboot+0x12e>
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	799b      	ldrb	r3, [r3, #6]
 800d142:	461a      	mov	r2, r3
 800d144:	0152      	lsls	r2, r2, #5
 800d146:	1ad2      	subs	r2, r2, r3
 800d148:	0092      	lsls	r2, r2, #2
 800d14a:	4413      	add	r3, r2
 800d14c:	00db      	lsls	r3, r3, #3
 800d14e:	b29b      	uxth	r3, r3
 800d150:	e001      	b.n	800d156 <dhcp_reboot+0x132>
 800d152:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d156:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d158:	89fb      	ldrh	r3, [r7, #14]
 800d15a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800d15e:	4a0a      	ldr	r2, [pc, #40]	@ (800d188 <dhcp_reboot+0x164>)
 800d160:	fb82 1203 	smull	r1, r2, r2, r3
 800d164:	1152      	asrs	r2, r2, #5
 800d166:	17db      	asrs	r3, r3, #31
 800d168:	1ad3      	subs	r3, r2, r3
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d170:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3720      	adds	r7, #32
 800d178:	46bd      	mov	sp, r7
 800d17a:	bdb0      	pop	{r4, r5, r7, pc}
 800d17c:	2000002c 	.word	0x2000002c
 800d180:	20008328 	.word	0x20008328
 800d184:	080142ac 	.word	0x080142ac
 800d188:	10624dd3 	.word	0x10624dd3

0800d18c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800d18c:	b5b0      	push	{r4, r5, r7, lr}
 800d18e:	b08a      	sub	sp, #40	@ 0x28
 800d190:	af02      	add	r7, sp, #8
 800d192:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d198:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f000 8084 	beq.w	800d2aa <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	795b      	ldrb	r3, [r3, #5]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f000 8081 	beq.w	800d2ae <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	699b      	ldr	r3, [r3, #24]
 800d1b0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	631a      	str	r2, [r3, #48]	@ 0x30
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	829a      	strh	r2, [r3, #20]
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	8a9a      	ldrh	r2, [r3, #20]
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	825a      	strh	r2, [r3, #18]
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	8a5a      	ldrh	r2, [r3, #18]
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	821a      	strh	r2, [r3, #16]
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	8a1a      	ldrh	r2, [r3, #16]
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 fdee 	bl	800dde0 <dhcp_supplied_address>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d03b      	beq.n	800d282 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800d20a:	f107 030e 	add.w	r3, r7, #14
 800d20e:	2207      	movs	r2, #7
 800d210:	69f9      	ldr	r1, [r7, #28]
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 fce0 	bl	800dbd8 <dhcp_create_msg>
 800d218:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d030      	beq.n	800d282 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d226:	89f8      	ldrh	r0, [r7, #14]
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800d22e:	2304      	movs	r3, #4
 800d230:	2236      	movs	r2, #54	@ 0x36
 800d232:	f000 f85f 	bl	800d2f4 <dhcp_option>
 800d236:	4603      	mov	r3, r0
 800d238:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800d23a:	89fc      	ldrh	r4, [r7, #14]
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	4618      	mov	r0, r3
 800d246:	f7f7 fa77 	bl	8004738 <lwip_htonl>
 800d24a:	4603      	mov	r3, r0
 800d24c:	461a      	mov	r2, r3
 800d24e:	4629      	mov	r1, r5
 800d250:	4620      	mov	r0, r4
 800d252:	f000 f8db 	bl	800d40c <dhcp_option_long>
 800d256:	4603      	mov	r3, r0
 800d258:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d25a:	89f8      	ldrh	r0, [r7, #14]
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	33f0      	adds	r3, #240	@ 0xf0
 800d260:	69ba      	ldr	r2, [r7, #24]
 800d262:	4619      	mov	r1, r3
 800d264:	f000 fd8e 	bl	800dd84 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d268:	4b13      	ldr	r3, [pc, #76]	@ (800d2b8 <dhcp_release_and_stop+0x12c>)
 800d26a:	6818      	ldr	r0, [r3, #0]
 800d26c:	f107 0210 	add.w	r2, r7, #16
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	9300      	str	r3, [sp, #0]
 800d274:	2343      	movs	r3, #67	@ 0x43
 800d276:	69b9      	ldr	r1, [r7, #24]
 800d278:	f7fe fc52 	bl	800bb20 <udp_sendto_if>
      pbuf_free(p_out);
 800d27c:	69b8      	ldr	r0, [r7, #24]
 800d27e:	f7f8 fd8f 	bl	8005da0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d282:	4b0e      	ldr	r3, [pc, #56]	@ (800d2bc <dhcp_release_and_stop+0x130>)
 800d284:	4a0d      	ldr	r2, [pc, #52]	@ (800d2bc <dhcp_release_and_stop+0x130>)
 800d286:	490d      	ldr	r1, [pc, #52]	@ (800d2bc <dhcp_release_and_stop+0x130>)
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7f8 f8c9 	bl	8005420 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800d28e:	2100      	movs	r1, #0
 800d290:	69f8      	ldr	r0, [r7, #28]
 800d292:	f000 f815 	bl	800d2c0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	791b      	ldrb	r3, [r3, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d008      	beq.n	800d2b0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800d29e:	f7fe ff8b 	bl	800c1b8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	711a      	strb	r2, [r3, #4]
 800d2a8:	e002      	b.n	800d2b0 <dhcp_release_and_stop+0x124>
    return;
 800d2aa:	bf00      	nop
 800d2ac:	e000      	b.n	800d2b0 <dhcp_release_and_stop+0x124>
    return;
 800d2ae:	bf00      	nop
  }
}
 800d2b0:	3720      	adds	r7, #32
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bdb0      	pop	{r4, r5, r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	20008328 	.word	0x20008328
 800d2bc:	080142a8 	.word	0x080142a8

0800d2c0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	795b      	ldrb	r3, [r3, #5]
 800d2d0:	78fa      	ldrb	r2, [r7, #3]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d008      	beq.n	800d2e8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	78fa      	ldrb	r2, [r7, #3]
 800d2da:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	811a      	strh	r2, [r3, #8]
  }
}
 800d2e8:	bf00      	nop
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6039      	str	r1, [r7, #0]
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	461a      	mov	r2, r3
 800d300:	4603      	mov	r3, r0
 800d302:	80fb      	strh	r3, [r7, #6]
 800d304:	460b      	mov	r3, r1
 800d306:	717b      	strb	r3, [r7, #5]
 800d308:	4613      	mov	r3, r2
 800d30a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d30c:	88fa      	ldrh	r2, [r7, #6]
 800d30e:	793b      	ldrb	r3, [r7, #4]
 800d310:	4413      	add	r3, r2
 800d312:	3302      	adds	r3, #2
 800d314:	2b44      	cmp	r3, #68	@ 0x44
 800d316:	d906      	bls.n	800d326 <dhcp_option+0x32>
 800d318:	4b0d      	ldr	r3, [pc, #52]	@ (800d350 <dhcp_option+0x5c>)
 800d31a:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d31e:	490d      	ldr	r1, [pc, #52]	@ (800d354 <dhcp_option+0x60>)
 800d320:	480d      	ldr	r0, [pc, #52]	@ (800d358 <dhcp_option+0x64>)
 800d322:	f003 f96b 	bl	80105fc <iprintf>
  options[options_out_len++] = option_type;
 800d326:	88fb      	ldrh	r3, [r7, #6]
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	80fa      	strh	r2, [r7, #6]
 800d32c:	461a      	mov	r2, r3
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	4413      	add	r3, r2
 800d332:	797a      	ldrb	r2, [r7, #5]
 800d334:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800d336:	88fb      	ldrh	r3, [r7, #6]
 800d338:	1c5a      	adds	r2, r3, #1
 800d33a:	80fa      	strh	r2, [r7, #6]
 800d33c:	461a      	mov	r2, r3
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	4413      	add	r3, r2
 800d342:	793a      	ldrb	r2, [r7, #4]
 800d344:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d346:	88fb      	ldrh	r3, [r7, #6]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	08013740 	.word	0x08013740
 800d354:	080138d4 	.word	0x080138d4
 800d358:	080137a0 	.word	0x080137a0

0800d35c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	6039      	str	r1, [r7, #0]
 800d366:	80fb      	strh	r3, [r7, #6]
 800d368:	4613      	mov	r3, r2
 800d36a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800d36c:	88fb      	ldrh	r3, [r7, #6]
 800d36e:	2b43      	cmp	r3, #67	@ 0x43
 800d370:	d906      	bls.n	800d380 <dhcp_option_byte+0x24>
 800d372:	4b0a      	ldr	r3, [pc, #40]	@ (800d39c <dhcp_option_byte+0x40>)
 800d374:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800d378:	4909      	ldr	r1, [pc, #36]	@ (800d3a0 <dhcp_option_byte+0x44>)
 800d37a:	480a      	ldr	r0, [pc, #40]	@ (800d3a4 <dhcp_option_byte+0x48>)
 800d37c:	f003 f93e 	bl	80105fc <iprintf>
  options[options_out_len++] = value;
 800d380:	88fb      	ldrh	r3, [r7, #6]
 800d382:	1c5a      	adds	r2, r3, #1
 800d384:	80fa      	strh	r2, [r7, #6]
 800d386:	461a      	mov	r2, r3
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	4413      	add	r3, r2
 800d38c:	797a      	ldrb	r2, [r7, #5]
 800d38e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d390:	88fb      	ldrh	r3, [r7, #6]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	08013740 	.word	0x08013740
 800d3a0:	08013918 	.word	0x08013918
 800d3a4:	080137a0 	.word	0x080137a0

0800d3a8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	6039      	str	r1, [r7, #0]
 800d3b2:	80fb      	strh	r3, [r7, #6]
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d3b8:	88fb      	ldrh	r3, [r7, #6]
 800d3ba:	3302      	adds	r3, #2
 800d3bc:	2b44      	cmp	r3, #68	@ 0x44
 800d3be:	d906      	bls.n	800d3ce <dhcp_option_short+0x26>
 800d3c0:	4b0f      	ldr	r3, [pc, #60]	@ (800d400 <dhcp_option_short+0x58>)
 800d3c2:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800d3c6:	490f      	ldr	r1, [pc, #60]	@ (800d404 <dhcp_option_short+0x5c>)
 800d3c8:	480f      	ldr	r0, [pc, #60]	@ (800d408 <dhcp_option_short+0x60>)
 800d3ca:	f003 f917 	bl	80105fc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800d3ce:	88bb      	ldrh	r3, [r7, #4]
 800d3d0:	0a1b      	lsrs	r3, r3, #8
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	88fb      	ldrh	r3, [r7, #6]
 800d3d6:	1c59      	adds	r1, r3, #1
 800d3d8:	80f9      	strh	r1, [r7, #6]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	440b      	add	r3, r1
 800d3e0:	b2d2      	uxtb	r2, r2
 800d3e2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800d3e4:	88fb      	ldrh	r3, [r7, #6]
 800d3e6:	1c5a      	adds	r2, r3, #1
 800d3e8:	80fa      	strh	r2, [r7, #6]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	88ba      	ldrh	r2, [r7, #4]
 800d3f2:	b2d2      	uxtb	r2, r2
 800d3f4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d3f6:	88fb      	ldrh	r3, [r7, #6]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	08013740 	.word	0x08013740
 800d404:	08013950 	.word	0x08013950
 800d408:	080137a0 	.word	0x080137a0

0800d40c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	4603      	mov	r3, r0
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
 800d418:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800d41a:	89fb      	ldrh	r3, [r7, #14]
 800d41c:	3304      	adds	r3, #4
 800d41e:	2b44      	cmp	r3, #68	@ 0x44
 800d420:	d906      	bls.n	800d430 <dhcp_option_long+0x24>
 800d422:	4b19      	ldr	r3, [pc, #100]	@ (800d488 <dhcp_option_long+0x7c>)
 800d424:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800d428:	4918      	ldr	r1, [pc, #96]	@ (800d48c <dhcp_option_long+0x80>)
 800d42a:	4819      	ldr	r0, [pc, #100]	@ (800d490 <dhcp_option_long+0x84>)
 800d42c:	f003 f8e6 	bl	80105fc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	0e1a      	lsrs	r2, r3, #24
 800d434:	89fb      	ldrh	r3, [r7, #14]
 800d436:	1c59      	adds	r1, r3, #1
 800d438:	81f9      	strh	r1, [r7, #14]
 800d43a:	4619      	mov	r1, r3
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	440b      	add	r3, r1
 800d440:	b2d2      	uxtb	r2, r2
 800d442:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	0c1a      	lsrs	r2, r3, #16
 800d448:	89fb      	ldrh	r3, [r7, #14]
 800d44a:	1c59      	adds	r1, r3, #1
 800d44c:	81f9      	strh	r1, [r7, #14]
 800d44e:	4619      	mov	r1, r3
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	440b      	add	r3, r1
 800d454:	b2d2      	uxtb	r2, r2
 800d456:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	0a1a      	lsrs	r2, r3, #8
 800d45c:	89fb      	ldrh	r3, [r7, #14]
 800d45e:	1c59      	adds	r1, r3, #1
 800d460:	81f9      	strh	r1, [r7, #14]
 800d462:	4619      	mov	r1, r3
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	440b      	add	r3, r1
 800d468:	b2d2      	uxtb	r2, r2
 800d46a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800d46c:	89fb      	ldrh	r3, [r7, #14]
 800d46e:	1c5a      	adds	r2, r3, #1
 800d470:	81fa      	strh	r2, [r7, #14]
 800d472:	461a      	mov	r2, r3
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	4413      	add	r3, r2
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	b2d2      	uxtb	r2, r2
 800d47c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d47e:	89fb      	ldrh	r3, [r7, #14]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3710      	adds	r7, #16
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	08013740 	.word	0x08013740
 800d48c:	0801398c 	.word	0x0801398c
 800d490:	080137a0 	.word	0x080137a0

0800d494 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b090      	sub	sp, #64	@ 0x40
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800d4a6:	2208      	movs	r2, #8
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	48b5      	ldr	r0, [pc, #724]	@ (800d780 <dhcp_parse_reply+0x2ec>)
 800d4ac:	f003 f90b 	bl	80106c6 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	895b      	ldrh	r3, [r3, #10]
 800d4b4:	2b2b      	cmp	r3, #43	@ 0x2b
 800d4b6:	d802      	bhi.n	800d4be <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800d4b8:	f06f 0301 	mvn.w	r3, #1
 800d4bc:	e2a7      	b.n	800da0e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800d4c4:	23f0      	movs	r3, #240	@ 0xf0
 800d4c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	891b      	ldrh	r3, [r3, #8]
 800d4cc:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800d4d2:	e00c      	b.n	800d4ee <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d6:	895b      	ldrh	r3, [r3, #10]
 800d4d8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d4da:	1ad3      	subs	r3, r2, r3
 800d4dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800d4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e0:	895b      	ldrh	r3, [r3, #10]
 800d4e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d004      	beq.n	800d4fe <dhcp_parse_reply+0x6a>
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f6:	895b      	ldrh	r3, [r3, #10]
 800d4f8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d2ea      	bcs.n	800d4d4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d500:	2b00      	cmp	r3, #0
 800d502:	d102      	bne.n	800d50a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800d504:	f06f 0301 	mvn.w	r3, #1
 800d508:	e281      	b.n	800da0e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800d50a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d50c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 800d50e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d510:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 800d512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800d518:	e239      	b.n	800d98e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800d51a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d51c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d51e:	4413      	add	r3, r2
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800d524:	2300      	movs	r3, #0
 800d526:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 800d52a:	f04f 33ff 	mov.w	r3, #4294967295
 800d52e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800d530:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d532:	3302      	adds	r3, #2
 800d534:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800d536:	8bfa      	ldrh	r2, [r7, #30]
 800d538:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d202      	bcs.n	800d544 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800d53e:	f06f 0301 	mvn.w	r3, #1
 800d542:	e264      	b.n	800da0e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800d544:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d546:	3301      	adds	r3, #1
 800d548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d54a:	8952      	ldrh	r2, [r2, #10]
 800d54c:	4293      	cmp	r3, r2
 800d54e:	da07      	bge.n	800d560 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800d550:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d552:	3301      	adds	r3, #1
 800d554:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d556:	4413      	add	r3, r2
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d55e:	e00b      	b.n	800d578 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800d560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d004      	beq.n	800d572 <dhcp_parse_reply+0xde>
 800d568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	e000      	b.n	800d574 <dhcp_parse_reply+0xe0>
 800d572:	2300      	movs	r3, #0
 800d574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800d578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d57c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 800d580:	7dfb      	ldrb	r3, [r7, #23]
 800d582:	2b3b      	cmp	r3, #59	@ 0x3b
 800d584:	f200 812c 	bhi.w	800d7e0 <dhcp_parse_reply+0x34c>
 800d588:	a201      	add	r2, pc, #4	@ (adr r2, 800d590 <dhcp_parse_reply+0xfc>)
 800d58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58e:	bf00      	nop
 800d590:	0800d681 	.word	0x0800d681
 800d594:	0800d691 	.word	0x0800d691
 800d598:	0800d7e1 	.word	0x0800d7e1
 800d59c:	0800d6b3 	.word	0x0800d6b3
 800d5a0:	0800d7e1 	.word	0x0800d7e1
 800d5a4:	0800d7e1 	.word	0x0800d7e1
 800d5a8:	0800d7e1 	.word	0x0800d7e1
 800d5ac:	0800d7e1 	.word	0x0800d7e1
 800d5b0:	0800d7e1 	.word	0x0800d7e1
 800d5b4:	0800d7e1 	.word	0x0800d7e1
 800d5b8:	0800d7e1 	.word	0x0800d7e1
 800d5bc:	0800d7e1 	.word	0x0800d7e1
 800d5c0:	0800d7e1 	.word	0x0800d7e1
 800d5c4:	0800d7e1 	.word	0x0800d7e1
 800d5c8:	0800d7e1 	.word	0x0800d7e1
 800d5cc:	0800d7e1 	.word	0x0800d7e1
 800d5d0:	0800d7e1 	.word	0x0800d7e1
 800d5d4:	0800d7e1 	.word	0x0800d7e1
 800d5d8:	0800d7e1 	.word	0x0800d7e1
 800d5dc:	0800d7e1 	.word	0x0800d7e1
 800d5e0:	0800d7e1 	.word	0x0800d7e1
 800d5e4:	0800d7e1 	.word	0x0800d7e1
 800d5e8:	0800d7e1 	.word	0x0800d7e1
 800d5ec:	0800d7e1 	.word	0x0800d7e1
 800d5f0:	0800d7e1 	.word	0x0800d7e1
 800d5f4:	0800d7e1 	.word	0x0800d7e1
 800d5f8:	0800d7e1 	.word	0x0800d7e1
 800d5fc:	0800d7e1 	.word	0x0800d7e1
 800d600:	0800d7e1 	.word	0x0800d7e1
 800d604:	0800d7e1 	.word	0x0800d7e1
 800d608:	0800d7e1 	.word	0x0800d7e1
 800d60c:	0800d7e1 	.word	0x0800d7e1
 800d610:	0800d7e1 	.word	0x0800d7e1
 800d614:	0800d7e1 	.word	0x0800d7e1
 800d618:	0800d7e1 	.word	0x0800d7e1
 800d61c:	0800d7e1 	.word	0x0800d7e1
 800d620:	0800d7e1 	.word	0x0800d7e1
 800d624:	0800d7e1 	.word	0x0800d7e1
 800d628:	0800d7e1 	.word	0x0800d7e1
 800d62c:	0800d7e1 	.word	0x0800d7e1
 800d630:	0800d7e1 	.word	0x0800d7e1
 800d634:	0800d7e1 	.word	0x0800d7e1
 800d638:	0800d7e1 	.word	0x0800d7e1
 800d63c:	0800d7e1 	.word	0x0800d7e1
 800d640:	0800d7e1 	.word	0x0800d7e1
 800d644:	0800d7e1 	.word	0x0800d7e1
 800d648:	0800d7e1 	.word	0x0800d7e1
 800d64c:	0800d7e1 	.word	0x0800d7e1
 800d650:	0800d7e1 	.word	0x0800d7e1
 800d654:	0800d7e1 	.word	0x0800d7e1
 800d658:	0800d7e1 	.word	0x0800d7e1
 800d65c:	0800d6df 	.word	0x0800d6df
 800d660:	0800d701 	.word	0x0800d701
 800d664:	0800d73d 	.word	0x0800d73d
 800d668:	0800d75f 	.word	0x0800d75f
 800d66c:	0800d7e1 	.word	0x0800d7e1
 800d670:	0800d7e1 	.word	0x0800d7e1
 800d674:	0800d7e1 	.word	0x0800d7e1
 800d678:	0800d79d 	.word	0x0800d79d
 800d67c:	0800d7bf 	.word	0x0800d7bf
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800d680:	2300      	movs	r3, #0
 800d682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d686:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d68a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 800d68e:	e0ab      	b.n	800d7e8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d694:	2b04      	cmp	r3, #4
 800d696:	d009      	beq.n	800d6ac <dhcp_parse_reply+0x218>
 800d698:	4b3a      	ldr	r3, [pc, #232]	@ (800d784 <dhcp_parse_reply+0x2f0>)
 800d69a:	f240 622e 	movw	r2, #1582	@ 0x62e
 800d69e:	493a      	ldr	r1, [pc, #232]	@ (800d788 <dhcp_parse_reply+0x2f4>)
 800d6a0:	483a      	ldr	r0, [pc, #232]	@ (800d78c <dhcp_parse_reply+0x2f8>)
 800d6a2:	f002 ffab 	bl	80105fc <iprintf>
 800d6a6:	f06f 0305 	mvn.w	r3, #5
 800d6aa:	e1b0      	b.n	800da0e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800d6ac:	2306      	movs	r3, #6
 800d6ae:	623b      	str	r3, [r7, #32]
        break;
 800d6b0:	e09a      	b.n	800d7e8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800d6b2:	2304      	movs	r3, #4
 800d6b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800d6b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d6bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d209      	bcs.n	800d6d8 <dhcp_parse_reply+0x244>
 800d6c4:	4b2f      	ldr	r3, [pc, #188]	@ (800d784 <dhcp_parse_reply+0x2f0>)
 800d6c6:	f240 6233 	movw	r2, #1587	@ 0x633
 800d6ca:	4931      	ldr	r1, [pc, #196]	@ (800d790 <dhcp_parse_reply+0x2fc>)
 800d6cc:	482f      	ldr	r0, [pc, #188]	@ (800d78c <dhcp_parse_reply+0x2f8>)
 800d6ce:	f002 ff95 	bl	80105fc <iprintf>
 800d6d2:	f06f 0305 	mvn.w	r3, #5
 800d6d6:	e19a      	b.n	800da0e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800d6d8:	2307      	movs	r3, #7
 800d6da:	623b      	str	r3, [r7, #32]
        break;
 800d6dc:	e084      	b.n	800d7e8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d6de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6e2:	2b04      	cmp	r3, #4
 800d6e4:	d009      	beq.n	800d6fa <dhcp_parse_reply+0x266>
 800d6e6:	4b27      	ldr	r3, [pc, #156]	@ (800d784 <dhcp_parse_reply+0x2f0>)
 800d6e8:	f240 6241 	movw	r2, #1601	@ 0x641
 800d6ec:	4926      	ldr	r1, [pc, #152]	@ (800d788 <dhcp_parse_reply+0x2f4>)
 800d6ee:	4827      	ldr	r0, [pc, #156]	@ (800d78c <dhcp_parse_reply+0x2f8>)
 800d6f0:	f002 ff84 	bl	80105fc <iprintf>
 800d6f4:	f06f 0305 	mvn.w	r3, #5
 800d6f8:	e189      	b.n	800da0e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800d6fa:	2303      	movs	r3, #3
 800d6fc:	623b      	str	r3, [r7, #32]
        break;
 800d6fe:	e073      	b.n	800d7e8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d704:	2b01      	cmp	r3, #1
 800d706:	d009      	beq.n	800d71c <dhcp_parse_reply+0x288>
 800d708:	4b1e      	ldr	r3, [pc, #120]	@ (800d784 <dhcp_parse_reply+0x2f0>)
 800d70a:	f240 624f 	movw	r2, #1615	@ 0x64f
 800d70e:	4921      	ldr	r1, [pc, #132]	@ (800d794 <dhcp_parse_reply+0x300>)
 800d710:	481e      	ldr	r0, [pc, #120]	@ (800d78c <dhcp_parse_reply+0x2f8>)
 800d712:	f002 ff73 	bl	80105fc <iprintf>
 800d716:	f06f 0305 	mvn.w	r3, #5
 800d71a:	e178      	b.n	800da0e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800d71c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d71e:	2bf0      	cmp	r3, #240	@ 0xf0
 800d720:	d009      	beq.n	800d736 <dhcp_parse_reply+0x2a2>
 800d722:	4b18      	ldr	r3, [pc, #96]	@ (800d784 <dhcp_parse_reply+0x2f0>)
 800d724:	f240 6251 	movw	r2, #1617	@ 0x651
 800d728:	491b      	ldr	r1, [pc, #108]	@ (800d798 <dhcp_parse_reply+0x304>)
 800d72a:	4818      	ldr	r0, [pc, #96]	@ (800d78c <dhcp_parse_reply+0x2f8>)
 800d72c:	f002 ff66 	bl	80105fc <iprintf>
 800d730:	f06f 0305 	mvn.w	r3, #5
 800d734:	e16b      	b.n	800da0e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800d736:	2300      	movs	r3, #0
 800d738:	623b      	str	r3, [r7, #32]
        break;
 800d73a:	e055      	b.n	800d7e8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d73c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d740:	2b01      	cmp	r3, #1
 800d742:	d009      	beq.n	800d758 <dhcp_parse_reply+0x2c4>
 800d744:	4b0f      	ldr	r3, [pc, #60]	@ (800d784 <dhcp_parse_reply+0x2f0>)
 800d746:	f240 6255 	movw	r2, #1621	@ 0x655
 800d74a:	4912      	ldr	r1, [pc, #72]	@ (800d794 <dhcp_parse_reply+0x300>)
 800d74c:	480f      	ldr	r0, [pc, #60]	@ (800d78c <dhcp_parse_reply+0x2f8>)
 800d74e:	f002 ff55 	bl	80105fc <iprintf>
 800d752:	f06f 0305 	mvn.w	r3, #5
 800d756:	e15a      	b.n	800da0e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800d758:	2301      	movs	r3, #1
 800d75a:	623b      	str	r3, [r7, #32]
        break;
 800d75c:	e044      	b.n	800d7e8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d75e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d762:	2b04      	cmp	r3, #4
 800d764:	d009      	beq.n	800d77a <dhcp_parse_reply+0x2e6>
 800d766:	4b07      	ldr	r3, [pc, #28]	@ (800d784 <dhcp_parse_reply+0x2f0>)
 800d768:	f240 6259 	movw	r2, #1625	@ 0x659
 800d76c:	4906      	ldr	r1, [pc, #24]	@ (800d788 <dhcp_parse_reply+0x2f4>)
 800d76e:	4807      	ldr	r0, [pc, #28]	@ (800d78c <dhcp_parse_reply+0x2f8>)
 800d770:	f002 ff44 	bl	80105fc <iprintf>
 800d774:	f06f 0305 	mvn.w	r3, #5
 800d778:	e149      	b.n	800da0e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800d77a:	2302      	movs	r3, #2
 800d77c:	623b      	str	r3, [r7, #32]
        break;
 800d77e:	e033      	b.n	800d7e8 <dhcp_parse_reply+0x354>
 800d780:	20008320 	.word	0x20008320
 800d784:	08013740 	.word	0x08013740
 800d788:	080139c8 	.word	0x080139c8
 800d78c:	080137a0 	.word	0x080137a0
 800d790:	080139d4 	.word	0x080139d4
 800d794:	080139e8 	.word	0x080139e8
 800d798:	080139f4 	.word	0x080139f4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d79c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7a0:	2b04      	cmp	r3, #4
 800d7a2:	d009      	beq.n	800d7b8 <dhcp_parse_reply+0x324>
 800d7a4:	4b9c      	ldr	r3, [pc, #624]	@ (800da18 <dhcp_parse_reply+0x584>)
 800d7a6:	f240 625d 	movw	r2, #1629	@ 0x65d
 800d7aa:	499c      	ldr	r1, [pc, #624]	@ (800da1c <dhcp_parse_reply+0x588>)
 800d7ac:	489c      	ldr	r0, [pc, #624]	@ (800da20 <dhcp_parse_reply+0x58c>)
 800d7ae:	f002 ff25 	bl	80105fc <iprintf>
 800d7b2:	f06f 0305 	mvn.w	r3, #5
 800d7b6:	e12a      	b.n	800da0e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800d7b8:	2304      	movs	r3, #4
 800d7ba:	623b      	str	r3, [r7, #32]
        break;
 800d7bc:	e014      	b.n	800d7e8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d7be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7c2:	2b04      	cmp	r3, #4
 800d7c4:	d009      	beq.n	800d7da <dhcp_parse_reply+0x346>
 800d7c6:	4b94      	ldr	r3, [pc, #592]	@ (800da18 <dhcp_parse_reply+0x584>)
 800d7c8:	f240 6261 	movw	r2, #1633	@ 0x661
 800d7cc:	4993      	ldr	r1, [pc, #588]	@ (800da1c <dhcp_parse_reply+0x588>)
 800d7ce:	4894      	ldr	r0, [pc, #592]	@ (800da20 <dhcp_parse_reply+0x58c>)
 800d7d0:	f002 ff14 	bl	80105fc <iprintf>
 800d7d4:	f06f 0305 	mvn.w	r3, #5
 800d7d8:	e119      	b.n	800da0e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800d7da:	2305      	movs	r3, #5
 800d7dc:	623b      	str	r3, [r7, #32]
        break;
 800d7de:	e003      	b.n	800d7e8 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800d7e6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d103      	bne.n	800d7f6 <dhcp_parse_reply+0x362>
      offset++;
 800d7ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800d7f4:	e0a1      	b.n	800d93a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800d7f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d7f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7fc:	4413      	add	r3, r2
 800d7fe:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800d802:	4293      	cmp	r3, r2
 800d804:	dd02      	ble.n	800d80c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800d806:	f06f 0301 	mvn.w	r3, #1
 800d80a:	e100      	b.n	800da0e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800d80c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d810:	b29a      	uxth	r2, r3
 800d812:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d814:	4413      	add	r3, r2
 800d816:	b29b      	uxth	r3, r3
 800d818:	3302      	adds	r3, #2
 800d81a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 800d81c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d820:	2b00      	cmp	r3, #0
 800d822:	f000 808a 	beq.w	800d93a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800d826:	2300      	movs	r3, #0
 800d828:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800d82a:	6a3b      	ldr	r3, [r7, #32]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	db02      	blt.n	800d836 <dhcp_parse_reply+0x3a2>
 800d830:	6a3b      	ldr	r3, [r7, #32]
 800d832:	2b07      	cmp	r3, #7
 800d834:	dd06      	ble.n	800d844 <dhcp_parse_reply+0x3b0>
 800d836:	4b78      	ldr	r3, [pc, #480]	@ (800da18 <dhcp_parse_reply+0x584>)
 800d838:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 800d83c:	4979      	ldr	r1, [pc, #484]	@ (800da24 <dhcp_parse_reply+0x590>)
 800d83e:	4878      	ldr	r0, [pc, #480]	@ (800da20 <dhcp_parse_reply+0x58c>)
 800d840:	f002 fedc 	bl	80105fc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800d844:	4a78      	ldr	r2, [pc, #480]	@ (800da28 <dhcp_parse_reply+0x594>)
 800d846:	6a3b      	ldr	r3, [r7, #32]
 800d848:	4413      	add	r3, r2
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d174      	bne.n	800d93a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800d850:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d854:	2b04      	cmp	r3, #4
 800d856:	bf28      	it	cs
 800d858:	2304      	movcs	r3, #4
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800d85e:	8bfb      	ldrh	r3, [r7, #30]
 800d860:	8aba      	ldrh	r2, [r7, #20]
 800d862:	f107 0108 	add.w	r1, r7, #8
 800d866:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d868:	f7f8 fc94 	bl	8006194 <pbuf_copy_partial>
 800d86c:	4603      	mov	r3, r0
 800d86e:	461a      	mov	r2, r3
 800d870:	8abb      	ldrh	r3, [r7, #20]
 800d872:	4293      	cmp	r3, r2
 800d874:	d002      	beq.n	800d87c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800d876:	f06f 0301 	mvn.w	r3, #1
 800d87a:	e0c8      	b.n	800da0e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800d87c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d880:	2b04      	cmp	r3, #4
 800d882:	d933      	bls.n	800d8ec <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800d884:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d888:	f003 0303 	and.w	r3, r3, #3
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d009      	beq.n	800d8a6 <dhcp_parse_reply+0x412>
 800d892:	4b61      	ldr	r3, [pc, #388]	@ (800da18 <dhcp_parse_reply+0x584>)
 800d894:	f240 6281 	movw	r2, #1665	@ 0x681
 800d898:	4964      	ldr	r1, [pc, #400]	@ (800da2c <dhcp_parse_reply+0x598>)
 800d89a:	4861      	ldr	r0, [pc, #388]	@ (800da20 <dhcp_parse_reply+0x58c>)
 800d89c:	f002 feae 	bl	80105fc <iprintf>
 800d8a0:	f06f 0305 	mvn.w	r3, #5
 800d8a4:	e0b3      	b.n	800da0e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800d8a6:	4a60      	ldr	r2, [pc, #384]	@ (800da28 <dhcp_parse_reply+0x594>)
 800d8a8:	6a3b      	ldr	r3, [r7, #32]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7f6 ff40 	bl	8004738 <lwip_htonl>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	495d      	ldr	r1, [pc, #372]	@ (800da30 <dhcp_parse_reply+0x59c>)
 800d8bc:	6a3b      	ldr	r3, [r7, #32]
 800d8be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800d8c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d8c6:	3b04      	subs	r3, #4
 800d8c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800d8cc:	8bfb      	ldrh	r3, [r7, #30]
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800d8d2:	8a7a      	ldrh	r2, [r7, #18]
 800d8d4:	8bfb      	ldrh	r3, [r7, #30]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d202      	bcs.n	800d8e0 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800d8da:	f06f 0301 	mvn.w	r3, #1
 800d8de:	e096      	b.n	800da0e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800d8e0:	8a7b      	ldrh	r3, [r7, #18]
 800d8e2:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800d8ea:	e79e      	b.n	800d82a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800d8ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d8f0:	2b04      	cmp	r3, #4
 800d8f2:	d106      	bne.n	800d902 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7f6 ff1e 	bl	8004738 <lwip_htonl>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	60bb      	str	r3, [r7, #8]
 800d900:	e011      	b.n	800d926 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800d902:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d906:	2b01      	cmp	r3, #1
 800d908:	d009      	beq.n	800d91e <dhcp_parse_reply+0x48a>
 800d90a:	4b43      	ldr	r3, [pc, #268]	@ (800da18 <dhcp_parse_reply+0x584>)
 800d90c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 800d910:	4948      	ldr	r1, [pc, #288]	@ (800da34 <dhcp_parse_reply+0x5a0>)
 800d912:	4843      	ldr	r0, [pc, #268]	@ (800da20 <dhcp_parse_reply+0x58c>)
 800d914:	f002 fe72 	bl	80105fc <iprintf>
 800d918:	f06f 0305 	mvn.w	r3, #5
 800d91c:	e077      	b.n	800da0e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800d91e:	f107 0308 	add.w	r3, r7, #8
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800d926:	4a40      	ldr	r2, [pc, #256]	@ (800da28 <dhcp_parse_reply+0x594>)
 800d928:	6a3b      	ldr	r3, [r7, #32]
 800d92a:	4413      	add	r3, r2
 800d92c:	2201      	movs	r2, #1
 800d92e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800d930:	68ba      	ldr	r2, [r7, #8]
 800d932:	493f      	ldr	r1, [pc, #252]	@ (800da30 <dhcp_parse_reply+0x59c>)
 800d934:	6a3b      	ldr	r3, [r7, #32]
 800d936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800d93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93c:	895b      	ldrh	r3, [r3, #10]
 800d93e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d940:	429a      	cmp	r2, r3
 800d942:	d324      	bcc.n	800d98e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800d944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d946:	895b      	ldrh	r3, [r3, #10]
 800d948:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800d94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d950:	895b      	ldrh	r3, [r3, #10]
 800d952:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800d954:	1ad3      	subs	r3, r2, r3
 800d956:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 800d958:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d95a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d213      	bcs.n	800d988 <dhcp_parse_reply+0x4f4>
        q = q->next;
 800d960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800d966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d109      	bne.n	800d980 <dhcp_parse_reply+0x4ec>
 800d96c:	4b2a      	ldr	r3, [pc, #168]	@ (800da18 <dhcp_parse_reply+0x584>)
 800d96e:	f240 629d 	movw	r2, #1693	@ 0x69d
 800d972:	4931      	ldr	r1, [pc, #196]	@ (800da38 <dhcp_parse_reply+0x5a4>)
 800d974:	482a      	ldr	r0, [pc, #168]	@ (800da20 <dhcp_parse_reply+0x58c>)
 800d976:	f002 fe41 	bl	80105fc <iprintf>
 800d97a:	f06f 0305 	mvn.w	r3, #5
 800d97e:	e046      	b.n	800da0e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800d980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d986:	e002      	b.n	800d98e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800d988:	f06f 0301 	mvn.w	r3, #1
 800d98c:	e03f      	b.n	800da0e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800d98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00a      	beq.n	800d9aa <dhcp_parse_reply+0x516>
 800d994:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d996:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d998:	429a      	cmp	r2, r3
 800d99a:	d206      	bcs.n	800d9aa <dhcp_parse_reply+0x516>
 800d99c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d99e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d9a0:	4413      	add	r3, r2
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	2bff      	cmp	r3, #255	@ 0xff
 800d9a6:	f47f adb8 	bne.w	800d51a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800d9aa:	4b1f      	ldr	r3, [pc, #124]	@ (800da28 <dhcp_parse_reply+0x594>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d018      	beq.n	800d9e4 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800d9b2:	4b1f      	ldr	r3, [pc, #124]	@ (800da30 <dhcp_parse_reply+0x59c>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800d9b8:	4b1b      	ldr	r3, [pc, #108]	@ (800da28 <dhcp_parse_reply+0x594>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d102      	bne.n	800d9ca <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9c8:	e00c      	b.n	800d9e4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d102      	bne.n	800d9d6 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9d4:	e006      	b.n	800d9e4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2b03      	cmp	r3, #3
 800d9da:	d103      	bne.n	800d9e4 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800d9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d006      	beq.n	800d9f8 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 800d9ee:	236c      	movs	r3, #108	@ 0x6c
 800d9f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800d9f2:	23ec      	movs	r3, #236	@ 0xec
 800d9f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800d9f6:	e56a      	b.n	800d4ce <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800d9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d006      	beq.n	800da0c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800d9fe:	2300      	movs	r3, #0
 800da00:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 800da02:	232c      	movs	r3, #44	@ 0x2c
 800da04:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800da06:	236c      	movs	r3, #108	@ 0x6c
 800da08:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 800da0a:	e560      	b.n	800d4ce <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800da0c:	2300      	movs	r3, #0
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3740      	adds	r7, #64	@ 0x40
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	08013740 	.word	0x08013740
 800da1c:	080139c8 	.word	0x080139c8
 800da20:	080137a0 	.word	0x080137a0
 800da24:	08013a0c 	.word	0x08013a0c
 800da28:	20008320 	.word	0x20008320
 800da2c:	08013a20 	.word	0x08013a20
 800da30:	20008300 	.word	0x20008300
 800da34:	08013a38 	.word	0x08013a38
 800da38:	08013a4c 	.word	0x08013a4c

0800da3c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b08a      	sub	sp, #40	@ 0x28
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
 800da48:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800da4a:	4b60      	ldr	r3, [pc, #384]	@ (800dbcc <dhcp_recv+0x190>)
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800da50:	6a3b      	ldr	r3, [r7, #32]
 800da52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da54:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	f000 809d 	beq.w	800db9e <dhcp_recv+0x162>
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	791b      	ldrb	r3, [r3, #4]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f000 8098 	beq.w	800db9e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	895b      	ldrh	r3, [r3, #10]
 800da72:	2b2b      	cmp	r3, #43	@ 0x2b
 800da74:	f240 8095 	bls.w	800dba2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	f040 8092 	bne.w	800dba6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800da82:	2300      	movs	r3, #0
 800da84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800da88:	e012      	b.n	800dab0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800da8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da8e:	6a3a      	ldr	r2, [r7, #32]
 800da90:	4413      	add	r3, r2
 800da92:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800da96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da9a:	69b9      	ldr	r1, [r7, #24]
 800da9c:	440b      	add	r3, r1
 800da9e:	7f1b      	ldrb	r3, [r3, #28]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	f040 8082 	bne.w	800dbaa <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800daa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800daaa:	3301      	adds	r3, #1
 800daac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dab6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800daba:	429a      	cmp	r2, r3
 800dabc:	d203      	bcs.n	800dac6 <dhcp_recv+0x8a>
 800dabe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dac2:	2b05      	cmp	r3, #5
 800dac4:	d9e1      	bls.n	800da8a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	4618      	mov	r0, r3
 800dacc:	f7f6 fe34 	bl	8004738 <lwip_htonl>
 800dad0:	4602      	mov	r2, r0
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d169      	bne.n	800dbae <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800dada:	69f9      	ldr	r1, [r7, #28]
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7ff fcd9 	bl	800d494 <dhcp_parse_reply>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d164      	bne.n	800dbb2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800dae8:	4b39      	ldr	r3, [pc, #228]	@ (800dbd0 <dhcp_recv+0x194>)
 800daea:	785b      	ldrb	r3, [r3, #1]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d062      	beq.n	800dbb6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800daf6:	4b37      	ldr	r3, [pc, #220]	@ (800dbd4 <dhcp_recv+0x198>)
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800dafc:	7cfb      	ldrb	r3, [r7, #19]
 800dafe:	2b05      	cmp	r3, #5
 800db00:	d12a      	bne.n	800db58 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	795b      	ldrb	r3, [r3, #5]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d112      	bne.n	800db30 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800db0a:	6979      	ldr	r1, [r7, #20]
 800db0c:	6a38      	ldr	r0, [r7, #32]
 800db0e:	f7fe fe1d 	bl	800c74c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800db12:	6a3b      	ldr	r3, [r7, #32]
 800db14:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800db18:	f003 0308 	and.w	r3, r3, #8
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d003      	beq.n	800db28 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800db20:	6a38      	ldr	r0, [r7, #32]
 800db22:	f7fe fb8d 	bl	800c240 <dhcp_check>
 800db26:	e049      	b.n	800dbbc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800db28:	6a38      	ldr	r0, [r7, #32]
 800db2a:	f7ff f86d 	bl	800cc08 <dhcp_bind>
 800db2e:	e045      	b.n	800dbbc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	795b      	ldrb	r3, [r3, #5]
 800db34:	2b03      	cmp	r3, #3
 800db36:	d007      	beq.n	800db48 <dhcp_recv+0x10c>
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	795b      	ldrb	r3, [r3, #5]
 800db3c:	2b04      	cmp	r3, #4
 800db3e:	d003      	beq.n	800db48 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800db44:	2b05      	cmp	r3, #5
 800db46:	d139      	bne.n	800dbbc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800db48:	6979      	ldr	r1, [r7, #20]
 800db4a:	6a38      	ldr	r0, [r7, #32]
 800db4c:	f7fe fdfe 	bl	800c74c <dhcp_handle_ack>
      dhcp_bind(netif);
 800db50:	6a38      	ldr	r0, [r7, #32]
 800db52:	f7ff f859 	bl	800cc08 <dhcp_bind>
 800db56:	e031      	b.n	800dbbc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800db58:	7cfb      	ldrb	r3, [r7, #19]
 800db5a:	2b06      	cmp	r3, #6
 800db5c:	d113      	bne.n	800db86 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800db62:	2b03      	cmp	r3, #3
 800db64:	d00b      	beq.n	800db7e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	795b      	ldrb	r3, [r3, #5]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d007      	beq.n	800db7e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800db72:	2b04      	cmp	r3, #4
 800db74:	d003      	beq.n	800db7e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	795b      	ldrb	r3, [r3, #5]
 800db7a:	2b05      	cmp	r3, #5
 800db7c:	d103      	bne.n	800db86 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800db7e:	6a38      	ldr	r0, [r7, #32]
 800db80:	f7fe fb44 	bl	800c20c <dhcp_handle_nak>
 800db84:	e01a      	b.n	800dbbc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800db86:	7cfb      	ldrb	r3, [r7, #19]
 800db88:	2b02      	cmp	r3, #2
 800db8a:	d116      	bne.n	800dbba <dhcp_recv+0x17e>
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	795b      	ldrb	r3, [r3, #5]
 800db90:	2b06      	cmp	r3, #6
 800db92:	d112      	bne.n	800dbba <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800db94:	6979      	ldr	r1, [r7, #20]
 800db96:	6a38      	ldr	r0, [r7, #32]
 800db98:	f7fe fb86 	bl	800c2a8 <dhcp_handle_offer>
 800db9c:	e00e      	b.n	800dbbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800db9e:	bf00      	nop
 800dba0:	e00c      	b.n	800dbbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800dba2:	bf00      	nop
 800dba4:	e00a      	b.n	800dbbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800dba6:	bf00      	nop
 800dba8:	e008      	b.n	800dbbc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800dbaa:	bf00      	nop
 800dbac:	e006      	b.n	800dbbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800dbae:	bf00      	nop
 800dbb0:	e004      	b.n	800dbbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800dbb2:	bf00      	nop
 800dbb4:	e002      	b.n	800dbbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800dbb6:	bf00      	nop
 800dbb8:	e000      	b.n	800dbbc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800dbba:	bf00      	nop
  pbuf_free(p);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7f8 f8ef 	bl	8005da0 <pbuf_free>
}
 800dbc2:	bf00      	nop
 800dbc4:	3728      	adds	r7, #40	@ 0x28
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	20004d10 	.word	0x20004d10
 800dbd0:	20008320 	.word	0x20008320
 800dbd4:	20008300 	.word	0x20008300

0800dbd8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b088      	sub	sp, #32
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	603b      	str	r3, [r7, #0]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d108      	bne.n	800dc00 <dhcp_create_msg+0x28>
 800dbee:	4b5f      	ldr	r3, [pc, #380]	@ (800dd6c <dhcp_create_msg+0x194>)
 800dbf0:	f240 7269 	movw	r2, #1897	@ 0x769
 800dbf4:	495e      	ldr	r1, [pc, #376]	@ (800dd70 <dhcp_create_msg+0x198>)
 800dbf6:	485f      	ldr	r0, [pc, #380]	@ (800dd74 <dhcp_create_msg+0x19c>)
 800dbf8:	f002 fd00 	bl	80105fc <iprintf>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	e0b1      	b.n	800dd64 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d108      	bne.n	800dc18 <dhcp_create_msg+0x40>
 800dc06:	4b59      	ldr	r3, [pc, #356]	@ (800dd6c <dhcp_create_msg+0x194>)
 800dc08:	f240 726a 	movw	r2, #1898	@ 0x76a
 800dc0c:	495a      	ldr	r1, [pc, #360]	@ (800dd78 <dhcp_create_msg+0x1a0>)
 800dc0e:	4859      	ldr	r0, [pc, #356]	@ (800dd74 <dhcp_create_msg+0x19c>)
 800dc10:	f002 fcf4 	bl	80105fc <iprintf>
 800dc14:	2300      	movs	r3, #0
 800dc16:	e0a5      	b.n	800dd64 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800dc18:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dc1c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 800dc20:	2036      	movs	r0, #54	@ 0x36
 800dc22:	f7f7 fdd9 	bl	80057d8 <pbuf_alloc>
 800dc26:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d101      	bne.n	800dc32 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	e098      	b.n	800dd64 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	895b      	ldrh	r3, [r3, #10]
 800dc36:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800dc3a:	d206      	bcs.n	800dc4a <dhcp_create_msg+0x72>
 800dc3c:	4b4b      	ldr	r3, [pc, #300]	@ (800dd6c <dhcp_create_msg+0x194>)
 800dc3e:	f240 7271 	movw	r2, #1905	@ 0x771
 800dc42:	494e      	ldr	r1, [pc, #312]	@ (800dd7c <dhcp_create_msg+0x1a4>)
 800dc44:	484b      	ldr	r0, [pc, #300]	@ (800dd74 <dhcp_create_msg+0x19c>)
 800dc46:	f002 fcd9 	bl	80105fc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800dc4a:	79fb      	ldrb	r3, [r7, #7]
 800dc4c:	2b03      	cmp	r3, #3
 800dc4e:	d103      	bne.n	800dc58 <dhcp_create_msg+0x80>
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	795b      	ldrb	r3, [r3, #5]
 800dc54:	2b03      	cmp	r3, #3
 800dc56:	d10d      	bne.n	800dc74 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	799b      	ldrb	r3, [r3, #6]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d105      	bne.n	800dc6c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800dc60:	f002 fbcc 	bl	80103fc <rand>
 800dc64:	4603      	mov	r3, r0
 800dc66:	461a      	mov	r2, r3
 800dc68:	4b45      	ldr	r3, [pc, #276]	@ (800dd80 <dhcp_create_msg+0x1a8>)
 800dc6a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800dc6c:	4b44      	ldr	r3, [pc, #272]	@ (800dd80 <dhcp_create_msg+0x1a8>)
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800dc7a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800dc7e:	2100      	movs	r1, #0
 800dc80:	6978      	ldr	r0, [r7, #20]
 800dc82:	f002 fd20 	bl	80106c6 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7f6 fd49 	bl	8004738 <lwip_htonl>
 800dca6:	4602      	mov	r2, r0
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800dcac:	79fb      	ldrb	r3, [r7, #7]
 800dcae:	2b08      	cmp	r3, #8
 800dcb0:	d010      	beq.n	800dcd4 <dhcp_create_msg+0xfc>
 800dcb2:	79fb      	ldrb	r3, [r7, #7]
 800dcb4:	2b04      	cmp	r3, #4
 800dcb6:	d00d      	beq.n	800dcd4 <dhcp_create_msg+0xfc>
 800dcb8:	79fb      	ldrb	r3, [r7, #7]
 800dcba:	2b07      	cmp	r3, #7
 800dcbc:	d00a      	beq.n	800dcd4 <dhcp_create_msg+0xfc>
 800dcbe:	79fb      	ldrb	r3, [r7, #7]
 800dcc0:	2b03      	cmp	r3, #3
 800dcc2:	d10c      	bne.n	800dcde <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800dcc8:	2b05      	cmp	r3, #5
 800dcca:	d003      	beq.n	800dcd4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	795b      	ldrb	r3, [r3, #5]
 800dcd0:	2b04      	cmp	r3, #4
 800dcd2:	d104      	bne.n	800dcde <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	3304      	adds	r3, #4
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800dcde:	2300      	movs	r3, #0
 800dce0:	83fb      	strh	r3, [r7, #30]
 800dce2:	e00c      	b.n	800dcfe <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800dce4:	8bfa      	ldrh	r2, [r7, #30]
 800dce6:	8bfb      	ldrh	r3, [r7, #30]
 800dce8:	68f9      	ldr	r1, [r7, #12]
 800dcea:	440a      	add	r2, r1
 800dcec:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 800dcf0:	697a      	ldr	r2, [r7, #20]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	460a      	mov	r2, r1
 800dcf6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800dcf8:	8bfb      	ldrh	r3, [r7, #30]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	83fb      	strh	r3, [r7, #30]
 800dcfe:	8bfb      	ldrh	r3, [r7, #30]
 800dd00:	2b05      	cmp	r3, #5
 800dd02:	d9ef      	bls.n	800dce4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800dd0c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 800dd10:	2200      	movs	r2, #0
 800dd12:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 800dd16:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 800dd20:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 800dd24:	2200      	movs	r2, #0
 800dd26:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800dd2a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800dd34:	2301      	movs	r3, #1
 800dd36:	2235      	movs	r2, #53	@ 0x35
 800dd38:	2000      	movs	r0, #0
 800dd3a:	f7ff fadb 	bl	800d2f4 <dhcp_option>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800dd48:	79fa      	ldrb	r2, [r7, #7]
 800dd4a:	8a7b      	ldrh	r3, [r7, #18]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7ff fb05 	bl	800d35c <dhcp_option_byte>
 800dd52:	4603      	mov	r3, r0
 800dd54:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d002      	beq.n	800dd62 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	8a7a      	ldrh	r2, [r7, #18]
 800dd60:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800dd62:	69bb      	ldr	r3, [r7, #24]
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3720      	adds	r7, #32
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	08013740 	.word	0x08013740
 800dd70:	08013a60 	.word	0x08013a60
 800dd74:	080137a0 	.word	0x080137a0
 800dd78:	08013a80 	.word	0x08013a80
 800dd7c:	08013aa0 	.word	0x08013aa0
 800dd80:	20008330 	.word	0x20008330

0800dd84 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
 800dd90:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800dd92:	89fb      	ldrh	r3, [r7, #14]
 800dd94:	1c5a      	adds	r2, r3, #1
 800dd96:	81fa      	strh	r2, [r7, #14]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	22ff      	movs	r2, #255	@ 0xff
 800dda0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800dda2:	e007      	b.n	800ddb4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800dda4:	89fb      	ldrh	r3, [r7, #14]
 800dda6:	1c5a      	adds	r2, r3, #1
 800dda8:	81fa      	strh	r2, [r7, #14]
 800ddaa:	461a      	mov	r2, r3
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	4413      	add	r3, r2
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800ddb4:	89fb      	ldrh	r3, [r7, #14]
 800ddb6:	2b43      	cmp	r3, #67	@ 0x43
 800ddb8:	d904      	bls.n	800ddc4 <dhcp_option_trailer+0x40>
 800ddba:	89fb      	ldrh	r3, [r7, #14]
 800ddbc:	f003 0303 	and.w	r3, r3, #3
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d002      	beq.n	800ddca <dhcp_option_trailer+0x46>
 800ddc4:	89fb      	ldrh	r3, [r7, #14]
 800ddc6:	2b43      	cmp	r3, #67	@ 0x43
 800ddc8:	d9ec      	bls.n	800dda4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800ddca:	89fb      	ldrh	r3, [r7, #14]
 800ddcc:	33f0      	adds	r3, #240	@ 0xf0
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7f7 fe5e 	bl	8005a94 <pbuf_realloc>
}
 800ddd8:	bf00      	nop
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b085      	sub	sp, #20
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d017      	beq.n	800de1e <dhcp_supplied_address+0x3e>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d013      	beq.n	800de1e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddfa:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	795b      	ldrb	r3, [r3, #5]
 800de00:	2b0a      	cmp	r3, #10
 800de02:	d007      	beq.n	800de14 <dhcp_supplied_address+0x34>
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	795b      	ldrb	r3, [r3, #5]
 800de08:	2b05      	cmp	r3, #5
 800de0a:	d003      	beq.n	800de14 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800de10:	2b04      	cmp	r3, #4
 800de12:	d101      	bne.n	800de18 <dhcp_supplied_address+0x38>
 800de14:	2301      	movs	r3, #1
 800de16:	e000      	b.n	800de1a <dhcp_supplied_address+0x3a>
 800de18:	2300      	movs	r3, #0
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	e000      	b.n	800de20 <dhcp_supplied_address+0x40>
  }
  return 0;
 800de1e:	2300      	movs	r3, #0
}
 800de20:	4618      	mov	r0, r3
 800de22:	3714      	adds	r7, #20
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800de34:	4915      	ldr	r1, [pc, #84]	@ (800de8c <etharp_free_entry+0x60>)
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	4613      	mov	r3, r2
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	4413      	add	r3, r2
 800de3e:	00db      	lsls	r3, r3, #3
 800de40:	440b      	add	r3, r1
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d013      	beq.n	800de70 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800de48:	4910      	ldr	r1, [pc, #64]	@ (800de8c <etharp_free_entry+0x60>)
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	4613      	mov	r3, r2
 800de4e:	005b      	lsls	r3, r3, #1
 800de50:	4413      	add	r3, r2
 800de52:	00db      	lsls	r3, r3, #3
 800de54:	440b      	add	r3, r1
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7f7 ffa1 	bl	8005da0 <pbuf_free>
    arp_table[i].q = NULL;
 800de5e:	490b      	ldr	r1, [pc, #44]	@ (800de8c <etharp_free_entry+0x60>)
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	4613      	mov	r3, r2
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	4413      	add	r3, r2
 800de68:	00db      	lsls	r3, r3, #3
 800de6a:	440b      	add	r3, r1
 800de6c:	2200      	movs	r2, #0
 800de6e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800de70:	4906      	ldr	r1, [pc, #24]	@ (800de8c <etharp_free_entry+0x60>)
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	4613      	mov	r3, r2
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	4413      	add	r3, r2
 800de7a:	00db      	lsls	r3, r3, #3
 800de7c:	440b      	add	r3, r1
 800de7e:	3314      	adds	r3, #20
 800de80:	2200      	movs	r2, #0
 800de82:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800de84:	bf00      	nop
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	20008334 	.word	0x20008334

0800de90 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de96:	2300      	movs	r3, #0
 800de98:	607b      	str	r3, [r7, #4]
 800de9a:	e096      	b.n	800dfca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800de9c:	494f      	ldr	r1, [pc, #316]	@ (800dfdc <etharp_tmr+0x14c>)
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	4613      	mov	r3, r2
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	4413      	add	r3, r2
 800dea6:	00db      	lsls	r3, r3, #3
 800dea8:	440b      	add	r3, r1
 800deaa:	3314      	adds	r3, #20
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800deb0:	78fb      	ldrb	r3, [r7, #3]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f000 8086 	beq.w	800dfc4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800deb8:	4948      	ldr	r1, [pc, #288]	@ (800dfdc <etharp_tmr+0x14c>)
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	4613      	mov	r3, r2
 800debe:	005b      	lsls	r3, r3, #1
 800dec0:	4413      	add	r3, r2
 800dec2:	00db      	lsls	r3, r3, #3
 800dec4:	440b      	add	r3, r1
 800dec6:	3312      	adds	r3, #18
 800dec8:	881b      	ldrh	r3, [r3, #0]
 800deca:	3301      	adds	r3, #1
 800decc:	b298      	uxth	r0, r3
 800dece:	4943      	ldr	r1, [pc, #268]	@ (800dfdc <etharp_tmr+0x14c>)
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	4613      	mov	r3, r2
 800ded4:	005b      	lsls	r3, r3, #1
 800ded6:	4413      	add	r3, r2
 800ded8:	00db      	lsls	r3, r3, #3
 800deda:	440b      	add	r3, r1
 800dedc:	3312      	adds	r3, #18
 800dede:	4602      	mov	r2, r0
 800dee0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dee2:	493e      	ldr	r1, [pc, #248]	@ (800dfdc <etharp_tmr+0x14c>)
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	4613      	mov	r3, r2
 800dee8:	005b      	lsls	r3, r3, #1
 800deea:	4413      	add	r3, r2
 800deec:	00db      	lsls	r3, r3, #3
 800deee:	440b      	add	r3, r1
 800def0:	3312      	adds	r3, #18
 800def2:	881b      	ldrh	r3, [r3, #0]
 800def4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800def8:	d215      	bcs.n	800df26 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800defa:	4938      	ldr	r1, [pc, #224]	@ (800dfdc <etharp_tmr+0x14c>)
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	4613      	mov	r3, r2
 800df00:	005b      	lsls	r3, r3, #1
 800df02:	4413      	add	r3, r2
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	440b      	add	r3, r1
 800df08:	3314      	adds	r3, #20
 800df0a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d10e      	bne.n	800df2e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800df10:	4932      	ldr	r1, [pc, #200]	@ (800dfdc <etharp_tmr+0x14c>)
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	4613      	mov	r3, r2
 800df16:	005b      	lsls	r3, r3, #1
 800df18:	4413      	add	r3, r2
 800df1a:	00db      	lsls	r3, r3, #3
 800df1c:	440b      	add	r3, r1
 800df1e:	3312      	adds	r3, #18
 800df20:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800df22:	2b04      	cmp	r3, #4
 800df24:	d903      	bls.n	800df2e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff ff80 	bl	800de2c <etharp_free_entry>
 800df2c:	e04a      	b.n	800dfc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800df2e:	492b      	ldr	r1, [pc, #172]	@ (800dfdc <etharp_tmr+0x14c>)
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	4613      	mov	r3, r2
 800df34:	005b      	lsls	r3, r3, #1
 800df36:	4413      	add	r3, r2
 800df38:	00db      	lsls	r3, r3, #3
 800df3a:	440b      	add	r3, r1
 800df3c:	3314      	adds	r3, #20
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b03      	cmp	r3, #3
 800df42:	d10a      	bne.n	800df5a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800df44:	4925      	ldr	r1, [pc, #148]	@ (800dfdc <etharp_tmr+0x14c>)
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	4613      	mov	r3, r2
 800df4a:	005b      	lsls	r3, r3, #1
 800df4c:	4413      	add	r3, r2
 800df4e:	00db      	lsls	r3, r3, #3
 800df50:	440b      	add	r3, r1
 800df52:	3314      	adds	r3, #20
 800df54:	2204      	movs	r2, #4
 800df56:	701a      	strb	r2, [r3, #0]
 800df58:	e034      	b.n	800dfc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800df5a:	4920      	ldr	r1, [pc, #128]	@ (800dfdc <etharp_tmr+0x14c>)
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	4613      	mov	r3, r2
 800df60:	005b      	lsls	r3, r3, #1
 800df62:	4413      	add	r3, r2
 800df64:	00db      	lsls	r3, r3, #3
 800df66:	440b      	add	r3, r1
 800df68:	3314      	adds	r3, #20
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	2b04      	cmp	r3, #4
 800df6e:	d10a      	bne.n	800df86 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800df70:	491a      	ldr	r1, [pc, #104]	@ (800dfdc <etharp_tmr+0x14c>)
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	4613      	mov	r3, r2
 800df76:	005b      	lsls	r3, r3, #1
 800df78:	4413      	add	r3, r2
 800df7a:	00db      	lsls	r3, r3, #3
 800df7c:	440b      	add	r3, r1
 800df7e:	3314      	adds	r3, #20
 800df80:	2202      	movs	r2, #2
 800df82:	701a      	strb	r2, [r3, #0]
 800df84:	e01e      	b.n	800dfc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800df86:	4915      	ldr	r1, [pc, #84]	@ (800dfdc <etharp_tmr+0x14c>)
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	4613      	mov	r3, r2
 800df8c:	005b      	lsls	r3, r3, #1
 800df8e:	4413      	add	r3, r2
 800df90:	00db      	lsls	r3, r3, #3
 800df92:	440b      	add	r3, r1
 800df94:	3314      	adds	r3, #20
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d113      	bne.n	800dfc4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800df9c:	490f      	ldr	r1, [pc, #60]	@ (800dfdc <etharp_tmr+0x14c>)
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	4413      	add	r3, r2
 800dfa6:	00db      	lsls	r3, r3, #3
 800dfa8:	440b      	add	r3, r1
 800dfaa:	3308      	adds	r3, #8
 800dfac:	6818      	ldr	r0, [r3, #0]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	4413      	add	r3, r2
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	4a08      	ldr	r2, [pc, #32]	@ (800dfdc <etharp_tmr+0x14c>)
 800dfba:	4413      	add	r3, r2
 800dfbc:	3304      	adds	r3, #4
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	f000 fe72 	bl	800eca8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	607b      	str	r3, [r7, #4]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b09      	cmp	r3, #9
 800dfce:	f77f af65 	ble.w	800de9c <etharp_tmr+0xc>
      }
    }
  }
}
 800dfd2:	bf00      	nop
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	20008334 	.word	0x20008334

0800dfe0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b08a      	sub	sp, #40	@ 0x28
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	460b      	mov	r3, r1
 800dfea:	607a      	str	r2, [r7, #4]
 800dfec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800dfee:	230a      	movs	r3, #10
 800dff0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dff2:	230a      	movs	r3, #10
 800dff4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800dff6:	230a      	movs	r3, #10
 800dff8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800dffe:	230a      	movs	r3, #10
 800e000:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e002:	2300      	movs	r3, #0
 800e004:	83bb      	strh	r3, [r7, #28]
 800e006:	2300      	movs	r3, #0
 800e008:	837b      	strh	r3, [r7, #26]
 800e00a:	2300      	movs	r3, #0
 800e00c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e00e:	2300      	movs	r3, #0
 800e010:	843b      	strh	r3, [r7, #32]
 800e012:	e0ae      	b.n	800e172 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e014:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e018:	49a6      	ldr	r1, [pc, #664]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e01a:	4613      	mov	r3, r2
 800e01c:	005b      	lsls	r3, r3, #1
 800e01e:	4413      	add	r3, r2
 800e020:	00db      	lsls	r3, r3, #3
 800e022:	440b      	add	r3, r1
 800e024:	3314      	adds	r3, #20
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e02a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e02e:	2b0a      	cmp	r3, #10
 800e030:	d105      	bne.n	800e03e <etharp_find_entry+0x5e>
 800e032:	7dfb      	ldrb	r3, [r7, #23]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d102      	bne.n	800e03e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e038:	8c3b      	ldrh	r3, [r7, #32]
 800e03a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e03c:	e095      	b.n	800e16a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e03e:	7dfb      	ldrb	r3, [r7, #23]
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 8092 	beq.w	800e16a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e046:	7dfb      	ldrb	r3, [r7, #23]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d009      	beq.n	800e060 <etharp_find_entry+0x80>
 800e04c:	7dfb      	ldrb	r3, [r7, #23]
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d806      	bhi.n	800e060 <etharp_find_entry+0x80>
 800e052:	4b99      	ldr	r3, [pc, #612]	@ (800e2b8 <etharp_find_entry+0x2d8>)
 800e054:	f240 1223 	movw	r2, #291	@ 0x123
 800e058:	4998      	ldr	r1, [pc, #608]	@ (800e2bc <etharp_find_entry+0x2dc>)
 800e05a:	4899      	ldr	r0, [pc, #612]	@ (800e2c0 <etharp_find_entry+0x2e0>)
 800e05c:	f002 face 	bl	80105fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d020      	beq.n	800e0a8 <etharp_find_entry+0xc8>
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	6819      	ldr	r1, [r3, #0]
 800e06a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e06e:	4891      	ldr	r0, [pc, #580]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e070:	4613      	mov	r3, r2
 800e072:	005b      	lsls	r3, r3, #1
 800e074:	4413      	add	r3, r2
 800e076:	00db      	lsls	r3, r3, #3
 800e078:	4403      	add	r3, r0
 800e07a:	3304      	adds	r3, #4
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4299      	cmp	r1, r3
 800e080:	d112      	bne.n	800e0a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00c      	beq.n	800e0a2 <etharp_find_entry+0xc2>
 800e088:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e08c:	4989      	ldr	r1, [pc, #548]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e08e:	4613      	mov	r3, r2
 800e090:	005b      	lsls	r3, r3, #1
 800e092:	4413      	add	r3, r2
 800e094:	00db      	lsls	r3, r3, #3
 800e096:	440b      	add	r3, r1
 800e098:	3308      	adds	r3, #8
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d102      	bne.n	800e0a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e0a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e0a6:	e100      	b.n	800e2aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e0a8:	7dfb      	ldrb	r3, [r7, #23]
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d140      	bne.n	800e130 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e0ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0b2:	4980      	ldr	r1, [pc, #512]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	005b      	lsls	r3, r3, #1
 800e0b8:	4413      	add	r3, r2
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	440b      	add	r3, r1
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d01a      	beq.n	800e0fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e0c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0c8:	497a      	ldr	r1, [pc, #488]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	005b      	lsls	r3, r3, #1
 800e0ce:	4413      	add	r3, r2
 800e0d0:	00db      	lsls	r3, r3, #3
 800e0d2:	440b      	add	r3, r1
 800e0d4:	3312      	adds	r3, #18
 800e0d6:	881b      	ldrh	r3, [r3, #0]
 800e0d8:	8bba      	ldrh	r2, [r7, #28]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d845      	bhi.n	800e16a <etharp_find_entry+0x18a>
            old_queue = i;
 800e0de:	8c3b      	ldrh	r3, [r7, #32]
 800e0e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e0e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0e6:	4973      	ldr	r1, [pc, #460]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	005b      	lsls	r3, r3, #1
 800e0ec:	4413      	add	r3, r2
 800e0ee:	00db      	lsls	r3, r3, #3
 800e0f0:	440b      	add	r3, r1
 800e0f2:	3312      	adds	r3, #18
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	83bb      	strh	r3, [r7, #28]
 800e0f8:	e037      	b.n	800e16a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e0fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0fe:	496d      	ldr	r1, [pc, #436]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e100:	4613      	mov	r3, r2
 800e102:	005b      	lsls	r3, r3, #1
 800e104:	4413      	add	r3, r2
 800e106:	00db      	lsls	r3, r3, #3
 800e108:	440b      	add	r3, r1
 800e10a:	3312      	adds	r3, #18
 800e10c:	881b      	ldrh	r3, [r3, #0]
 800e10e:	8b7a      	ldrh	r2, [r7, #26]
 800e110:	429a      	cmp	r2, r3
 800e112:	d82a      	bhi.n	800e16a <etharp_find_entry+0x18a>
            old_pending = i;
 800e114:	8c3b      	ldrh	r3, [r7, #32]
 800e116:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800e118:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e11c:	4965      	ldr	r1, [pc, #404]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e11e:	4613      	mov	r3, r2
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	4413      	add	r3, r2
 800e124:	00db      	lsls	r3, r3, #3
 800e126:	440b      	add	r3, r1
 800e128:	3312      	adds	r3, #18
 800e12a:	881b      	ldrh	r3, [r3, #0]
 800e12c:	837b      	strh	r3, [r7, #26]
 800e12e:	e01c      	b.n	800e16a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e130:	7dfb      	ldrb	r3, [r7, #23]
 800e132:	2b01      	cmp	r3, #1
 800e134:	d919      	bls.n	800e16a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e136:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e13a:	495e      	ldr	r1, [pc, #376]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e13c:	4613      	mov	r3, r2
 800e13e:	005b      	lsls	r3, r3, #1
 800e140:	4413      	add	r3, r2
 800e142:	00db      	lsls	r3, r3, #3
 800e144:	440b      	add	r3, r1
 800e146:	3312      	adds	r3, #18
 800e148:	881b      	ldrh	r3, [r3, #0]
 800e14a:	8b3a      	ldrh	r2, [r7, #24]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d80c      	bhi.n	800e16a <etharp_find_entry+0x18a>
            old_stable = i;
 800e150:	8c3b      	ldrh	r3, [r7, #32]
 800e152:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800e154:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e158:	4956      	ldr	r1, [pc, #344]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e15a:	4613      	mov	r3, r2
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	4413      	add	r3, r2
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	440b      	add	r3, r1
 800e164:	3312      	adds	r3, #18
 800e166:	881b      	ldrh	r3, [r3, #0]
 800e168:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e16a:	8c3b      	ldrh	r3, [r7, #32]
 800e16c:	3301      	adds	r3, #1
 800e16e:	b29b      	uxth	r3, r3
 800e170:	843b      	strh	r3, [r7, #32]
 800e172:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e176:	2b09      	cmp	r3, #9
 800e178:	f77f af4c 	ble.w	800e014 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e17c:	7afb      	ldrb	r3, [r7, #11]
 800e17e:	f003 0302 	and.w	r3, r3, #2
 800e182:	2b00      	cmp	r3, #0
 800e184:	d108      	bne.n	800e198 <etharp_find_entry+0x1b8>
 800e186:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e18a:	2b0a      	cmp	r3, #10
 800e18c:	d107      	bne.n	800e19e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e18e:	7afb      	ldrb	r3, [r7, #11]
 800e190:	f003 0301 	and.w	r3, r3, #1
 800e194:	2b00      	cmp	r3, #0
 800e196:	d102      	bne.n	800e19e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e198:	f04f 33ff 	mov.w	r3, #4294967295
 800e19c:	e085      	b.n	800e2aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e19e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e1a2:	2b09      	cmp	r3, #9
 800e1a4:	dc02      	bgt.n	800e1ac <etharp_find_entry+0x1cc>
    i = empty;
 800e1a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e1a8:	843b      	strh	r3, [r7, #32]
 800e1aa:	e039      	b.n	800e220 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e1ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e1b0:	2b09      	cmp	r3, #9
 800e1b2:	dc14      	bgt.n	800e1de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e1b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e1b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e1bc:	493d      	ldr	r1, [pc, #244]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e1be:	4613      	mov	r3, r2
 800e1c0:	005b      	lsls	r3, r3, #1
 800e1c2:	4413      	add	r3, r2
 800e1c4:	00db      	lsls	r3, r3, #3
 800e1c6:	440b      	add	r3, r1
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d018      	beq.n	800e200 <etharp_find_entry+0x220>
 800e1ce:	4b3a      	ldr	r3, [pc, #232]	@ (800e2b8 <etharp_find_entry+0x2d8>)
 800e1d0:	f240 126d 	movw	r2, #365	@ 0x16d
 800e1d4:	493b      	ldr	r1, [pc, #236]	@ (800e2c4 <etharp_find_entry+0x2e4>)
 800e1d6:	483a      	ldr	r0, [pc, #232]	@ (800e2c0 <etharp_find_entry+0x2e0>)
 800e1d8:	f002 fa10 	bl	80105fc <iprintf>
 800e1dc:	e010      	b.n	800e200 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e1de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e1e2:	2b09      	cmp	r3, #9
 800e1e4:	dc02      	bgt.n	800e1ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e1e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1e8:	843b      	strh	r3, [r7, #32]
 800e1ea:	e009      	b.n	800e200 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e1ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e1f0:	2b09      	cmp	r3, #9
 800e1f2:	dc02      	bgt.n	800e1fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e1f4:	8bfb      	ldrh	r3, [r7, #30]
 800e1f6:	843b      	strh	r3, [r7, #32]
 800e1f8:	e002      	b.n	800e200 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e1fe:	e054      	b.n	800e2aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e200:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e204:	2b09      	cmp	r3, #9
 800e206:	dd06      	ble.n	800e216 <etharp_find_entry+0x236>
 800e208:	4b2b      	ldr	r3, [pc, #172]	@ (800e2b8 <etharp_find_entry+0x2d8>)
 800e20a:	f240 127f 	movw	r2, #383	@ 0x17f
 800e20e:	492e      	ldr	r1, [pc, #184]	@ (800e2c8 <etharp_find_entry+0x2e8>)
 800e210:	482b      	ldr	r0, [pc, #172]	@ (800e2c0 <etharp_find_entry+0x2e0>)
 800e212:	f002 f9f3 	bl	80105fc <iprintf>
    etharp_free_entry(i);
 800e216:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff fe06 	bl	800de2c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e220:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e224:	2b09      	cmp	r3, #9
 800e226:	dd06      	ble.n	800e236 <etharp_find_entry+0x256>
 800e228:	4b23      	ldr	r3, [pc, #140]	@ (800e2b8 <etharp_find_entry+0x2d8>)
 800e22a:	f240 1283 	movw	r2, #387	@ 0x183
 800e22e:	4926      	ldr	r1, [pc, #152]	@ (800e2c8 <etharp_find_entry+0x2e8>)
 800e230:	4823      	ldr	r0, [pc, #140]	@ (800e2c0 <etharp_find_entry+0x2e0>)
 800e232:	f002 f9e3 	bl	80105fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e236:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e23a:	491e      	ldr	r1, [pc, #120]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e23c:	4613      	mov	r3, r2
 800e23e:	005b      	lsls	r3, r3, #1
 800e240:	4413      	add	r3, r2
 800e242:	00db      	lsls	r3, r3, #3
 800e244:	440b      	add	r3, r1
 800e246:	3314      	adds	r3, #20
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d006      	beq.n	800e25c <etharp_find_entry+0x27c>
 800e24e:	4b1a      	ldr	r3, [pc, #104]	@ (800e2b8 <etharp_find_entry+0x2d8>)
 800e250:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800e254:	491d      	ldr	r1, [pc, #116]	@ (800e2cc <etharp_find_entry+0x2ec>)
 800e256:	481a      	ldr	r0, [pc, #104]	@ (800e2c0 <etharp_find_entry+0x2e0>)
 800e258:	f002 f9d0 	bl	80105fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00b      	beq.n	800e27a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e262:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6819      	ldr	r1, [r3, #0]
 800e26a:	4812      	ldr	r0, [pc, #72]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e26c:	4613      	mov	r3, r2
 800e26e:	005b      	lsls	r3, r3, #1
 800e270:	4413      	add	r3, r2
 800e272:	00db      	lsls	r3, r3, #3
 800e274:	4403      	add	r3, r0
 800e276:	3304      	adds	r3, #4
 800e278:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e27a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e27e:	490d      	ldr	r1, [pc, #52]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e280:	4613      	mov	r3, r2
 800e282:	005b      	lsls	r3, r3, #1
 800e284:	4413      	add	r3, r2
 800e286:	00db      	lsls	r3, r3, #3
 800e288:	440b      	add	r3, r1
 800e28a:	3312      	adds	r3, #18
 800e28c:	2200      	movs	r2, #0
 800e28e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e290:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e294:	4907      	ldr	r1, [pc, #28]	@ (800e2b4 <etharp_find_entry+0x2d4>)
 800e296:	4613      	mov	r3, r2
 800e298:	005b      	lsls	r3, r3, #1
 800e29a:	4413      	add	r3, r2
 800e29c:	00db      	lsls	r3, r3, #3
 800e29e:	440b      	add	r3, r1
 800e2a0:	3308      	adds	r3, #8
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e2a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3728      	adds	r7, #40	@ 0x28
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	20008334 	.word	0x20008334
 800e2b8:	08013ae0 	.word	0x08013ae0
 800e2bc:	08013b18 	.word	0x08013b18
 800e2c0:	08013b58 	.word	0x08013b58
 800e2c4:	08013b80 	.word	0x08013b80
 800e2c8:	08013b98 	.word	0x08013b98
 800e2cc:	08013bac 	.word	0x08013bac

0800e2d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b088      	sub	sp, #32
 800e2d4:	af02      	add	r7, sp, #8
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
 800e2dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e2e4:	2b06      	cmp	r3, #6
 800e2e6:	d006      	beq.n	800e2f6 <etharp_update_arp_entry+0x26>
 800e2e8:	4b48      	ldr	r3, [pc, #288]	@ (800e40c <etharp_update_arp_entry+0x13c>)
 800e2ea:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800e2ee:	4948      	ldr	r1, [pc, #288]	@ (800e410 <etharp_update_arp_entry+0x140>)
 800e2f0:	4848      	ldr	r0, [pc, #288]	@ (800e414 <etharp_update_arp_entry+0x144>)
 800e2f2:	f002 f983 	bl	80105fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d012      	beq.n	800e322 <etharp_update_arp_entry+0x52>
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00e      	beq.n	800e322 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	68f9      	ldr	r1, [r7, #12]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f001 f920 	bl	800f550 <ip4_addr_isbroadcast_u32>
 800e310:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e312:	2b00      	cmp	r3, #0
 800e314:	d105      	bne.n	800e322 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e31e:	2be0      	cmp	r3, #224	@ 0xe0
 800e320:	d102      	bne.n	800e328 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e322:	f06f 030f 	mvn.w	r3, #15
 800e326:	e06c      	b.n	800e402 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e328:	78fb      	ldrb	r3, [r7, #3]
 800e32a:	68fa      	ldr	r2, [r7, #12]
 800e32c:	4619      	mov	r1, r3
 800e32e:	68b8      	ldr	r0, [r7, #8]
 800e330:	f7ff fe56 	bl	800dfe0 <etharp_find_entry>
 800e334:	4603      	mov	r3, r0
 800e336:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e338:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	da02      	bge.n	800e346 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e340:	8afb      	ldrh	r3, [r7, #22]
 800e342:	b25b      	sxtb	r3, r3
 800e344:	e05d      	b.n	800e402 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e346:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e34a:	4933      	ldr	r1, [pc, #204]	@ (800e418 <etharp_update_arp_entry+0x148>)
 800e34c:	4613      	mov	r3, r2
 800e34e:	005b      	lsls	r3, r3, #1
 800e350:	4413      	add	r3, r2
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	440b      	add	r3, r1
 800e356:	3314      	adds	r3, #20
 800e358:	2202      	movs	r2, #2
 800e35a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e35c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e360:	492d      	ldr	r1, [pc, #180]	@ (800e418 <etharp_update_arp_entry+0x148>)
 800e362:	4613      	mov	r3, r2
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	4413      	add	r3, r2
 800e368:	00db      	lsls	r3, r3, #3
 800e36a:	440b      	add	r3, r1
 800e36c:	3308      	adds	r3, #8
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e372:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e376:	4613      	mov	r3, r2
 800e378:	005b      	lsls	r3, r3, #1
 800e37a:	4413      	add	r3, r2
 800e37c:	00db      	lsls	r3, r3, #3
 800e37e:	3308      	adds	r3, #8
 800e380:	4a25      	ldr	r2, [pc, #148]	@ (800e418 <etharp_update_arp_entry+0x148>)
 800e382:	4413      	add	r3, r2
 800e384:	3304      	adds	r3, #4
 800e386:	2206      	movs	r2, #6
 800e388:	6879      	ldr	r1, [r7, #4]
 800e38a:	4618      	mov	r0, r3
 800e38c:	f002 fa11 	bl	80107b2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e390:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e394:	4920      	ldr	r1, [pc, #128]	@ (800e418 <etharp_update_arp_entry+0x148>)
 800e396:	4613      	mov	r3, r2
 800e398:	005b      	lsls	r3, r3, #1
 800e39a:	4413      	add	r3, r2
 800e39c:	00db      	lsls	r3, r3, #3
 800e39e:	440b      	add	r3, r1
 800e3a0:	3312      	adds	r3, #18
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e3a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e3aa:	491b      	ldr	r1, [pc, #108]	@ (800e418 <etharp_update_arp_entry+0x148>)
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	005b      	lsls	r3, r3, #1
 800e3b0:	4413      	add	r3, r2
 800e3b2:	00db      	lsls	r3, r3, #3
 800e3b4:	440b      	add	r3, r1
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d021      	beq.n	800e400 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e3bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e3c0:	4915      	ldr	r1, [pc, #84]	@ (800e418 <etharp_update_arp_entry+0x148>)
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	005b      	lsls	r3, r3, #1
 800e3c6:	4413      	add	r3, r2
 800e3c8:	00db      	lsls	r3, r3, #3
 800e3ca:	440b      	add	r3, r1
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e3d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e3d4:	4910      	ldr	r1, [pc, #64]	@ (800e418 <etharp_update_arp_entry+0x148>)
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	005b      	lsls	r3, r3, #1
 800e3da:	4413      	add	r3, r2
 800e3dc:	00db      	lsls	r3, r3, #3
 800e3de:	440b      	add	r3, r1
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800e3ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6939      	ldr	r1, [r7, #16]
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f001 ffb9 	bl	801036c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e3fa:	6938      	ldr	r0, [r7, #16]
 800e3fc:	f7f7 fcd0 	bl	8005da0 <pbuf_free>
  }
  return ERR_OK;
 800e400:	2300      	movs	r3, #0
}
 800e402:	4618      	mov	r0, r3
 800e404:	3718      	adds	r7, #24
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	08013ae0 	.word	0x08013ae0
 800e410:	08013bd8 	.word	0x08013bd8
 800e414:	08013b58 	.word	0x08013b58
 800e418:	20008334 	.word	0x20008334

0800e41c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e424:	2300      	movs	r3, #0
 800e426:	60fb      	str	r3, [r7, #12]
 800e428:	e01e      	b.n	800e468 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e42a:	4913      	ldr	r1, [pc, #76]	@ (800e478 <etharp_cleanup_netif+0x5c>)
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	4613      	mov	r3, r2
 800e430:	005b      	lsls	r3, r3, #1
 800e432:	4413      	add	r3, r2
 800e434:	00db      	lsls	r3, r3, #3
 800e436:	440b      	add	r3, r1
 800e438:	3314      	adds	r3, #20
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e43e:	7afb      	ldrb	r3, [r7, #11]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00e      	beq.n	800e462 <etharp_cleanup_netif+0x46>
 800e444:	490c      	ldr	r1, [pc, #48]	@ (800e478 <etharp_cleanup_netif+0x5c>)
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	4613      	mov	r3, r2
 800e44a:	005b      	lsls	r3, r3, #1
 800e44c:	4413      	add	r3, r2
 800e44e:	00db      	lsls	r3, r3, #3
 800e450:	440b      	add	r3, r1
 800e452:	3308      	adds	r3, #8
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d102      	bne.n	800e462 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f7ff fce5 	bl	800de2c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	3301      	adds	r3, #1
 800e466:	60fb      	str	r3, [r7, #12]
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2b09      	cmp	r3, #9
 800e46c:	dddd      	ble.n	800e42a <etharp_cleanup_netif+0xe>
    }
  }
}
 800e46e:	bf00      	nop
 800e470:	bf00      	nop
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20008334 	.word	0x20008334

0800e47c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e47c:	b5b0      	push	{r4, r5, r7, lr}
 800e47e:	b08a      	sub	sp, #40	@ 0x28
 800e480:	af04      	add	r7, sp, #16
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d107      	bne.n	800e49c <etharp_input+0x20>
 800e48c:	4b3f      	ldr	r3, [pc, #252]	@ (800e58c <etharp_input+0x110>)
 800e48e:	f240 228a 	movw	r2, #650	@ 0x28a
 800e492:	493f      	ldr	r1, [pc, #252]	@ (800e590 <etharp_input+0x114>)
 800e494:	483f      	ldr	r0, [pc, #252]	@ (800e594 <etharp_input+0x118>)
 800e496:	f002 f8b1 	bl	80105fc <iprintf>
 800e49a:	e074      	b.n	800e586 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4ac:	d10c      	bne.n	800e4c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e4b2:	2b06      	cmp	r3, #6
 800e4b4:	d108      	bne.n	800e4c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e4ba:	2b04      	cmp	r3, #4
 800e4bc:	d104      	bne.n	800e4c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	885b      	ldrh	r3, [r3, #2]
 800e4c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e4c4:	2b08      	cmp	r3, #8
 800e4c6:	d003      	beq.n	800e4d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7f7 fc69 	bl	8005da0 <pbuf_free>
    return;
 800e4ce:	e05a      	b.n	800e586 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	330e      	adds	r3, #14
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	3318      	adds	r3, #24
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d102      	bne.n	800e4f0 <etharp_input+0x74>
    for_us = 0;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	75fb      	strb	r3, [r7, #23]
 800e4ee:	e009      	b.n	800e504 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e4f0:	68ba      	ldr	r2, [r7, #8]
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	3304      	adds	r3, #4
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	bf0c      	ite	eq
 800e4fc:	2301      	moveq	r3, #1
 800e4fe:	2300      	movne	r3, #0
 800e500:	b2db      	uxtb	r3, r3
 800e502:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	f103 0208 	add.w	r2, r3, #8
 800e50a:	7dfb      	ldrb	r3, [r7, #23]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d001      	beq.n	800e514 <etharp_input+0x98>
 800e510:	2301      	movs	r3, #1
 800e512:	e000      	b.n	800e516 <etharp_input+0x9a>
 800e514:	2302      	movs	r3, #2
 800e516:	f107 010c 	add.w	r1, r7, #12
 800e51a:	6838      	ldr	r0, [r7, #0]
 800e51c:	f7ff fed8 	bl	800e2d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	88db      	ldrh	r3, [r3, #6]
 800e524:	b29b      	uxth	r3, r3
 800e526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e52a:	d003      	beq.n	800e534 <etharp_input+0xb8>
 800e52c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e530:	d01e      	beq.n	800e570 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e532:	e025      	b.n	800e580 <etharp_input+0x104>
      if (for_us) {
 800e534:	7dfb      	ldrb	r3, [r7, #23]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d021      	beq.n	800e57e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e550:	693a      	ldr	r2, [r7, #16]
 800e552:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e554:	2102      	movs	r1, #2
 800e556:	9103      	str	r1, [sp, #12]
 800e558:	f107 010c 	add.w	r1, r7, #12
 800e55c:	9102      	str	r1, [sp, #8]
 800e55e:	9201      	str	r2, [sp, #4]
 800e560:	9300      	str	r3, [sp, #0]
 800e562:	462b      	mov	r3, r5
 800e564:	4622      	mov	r2, r4
 800e566:	4601      	mov	r1, r0
 800e568:	6838      	ldr	r0, [r7, #0]
 800e56a:	f000 faef 	bl	800eb4c <etharp_raw>
      break;
 800e56e:	e006      	b.n	800e57e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800e570:	f107 030c 	add.w	r3, r7, #12
 800e574:	4619      	mov	r1, r3
 800e576:	6838      	ldr	r0, [r7, #0]
 800e578:	f7fe fa02 	bl	800c980 <dhcp_arp_reply>
      break;
 800e57c:	e000      	b.n	800e580 <etharp_input+0x104>
      break;
 800e57e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7f7 fc0d 	bl	8005da0 <pbuf_free>
}
 800e586:	3718      	adds	r7, #24
 800e588:	46bd      	mov	sp, r7
 800e58a:	bdb0      	pop	{r4, r5, r7, pc}
 800e58c:	08013ae0 	.word	0x08013ae0
 800e590:	08013c30 	.word	0x08013c30
 800e594:	08013b58 	.word	0x08013b58

0800e598 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af02      	add	r7, sp, #8
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e5a6:	79fa      	ldrb	r2, [r7, #7]
 800e5a8:	4944      	ldr	r1, [pc, #272]	@ (800e6bc <etharp_output_to_arp_index+0x124>)
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	005b      	lsls	r3, r3, #1
 800e5ae:	4413      	add	r3, r2
 800e5b0:	00db      	lsls	r3, r3, #3
 800e5b2:	440b      	add	r3, r1
 800e5b4:	3314      	adds	r3, #20
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d806      	bhi.n	800e5ca <etharp_output_to_arp_index+0x32>
 800e5bc:	4b40      	ldr	r3, [pc, #256]	@ (800e6c0 <etharp_output_to_arp_index+0x128>)
 800e5be:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e5c2:	4940      	ldr	r1, [pc, #256]	@ (800e6c4 <etharp_output_to_arp_index+0x12c>)
 800e5c4:	4840      	ldr	r0, [pc, #256]	@ (800e6c8 <etharp_output_to_arp_index+0x130>)
 800e5c6:	f002 f819 	bl	80105fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e5ca:	79fa      	ldrb	r2, [r7, #7]
 800e5cc:	493b      	ldr	r1, [pc, #236]	@ (800e6bc <etharp_output_to_arp_index+0x124>)
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	4413      	add	r3, r2
 800e5d4:	00db      	lsls	r3, r3, #3
 800e5d6:	440b      	add	r3, r1
 800e5d8:	3314      	adds	r3, #20
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	2b02      	cmp	r3, #2
 800e5de:	d153      	bne.n	800e688 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e5e0:	79fa      	ldrb	r2, [r7, #7]
 800e5e2:	4936      	ldr	r1, [pc, #216]	@ (800e6bc <etharp_output_to_arp_index+0x124>)
 800e5e4:	4613      	mov	r3, r2
 800e5e6:	005b      	lsls	r3, r3, #1
 800e5e8:	4413      	add	r3, r2
 800e5ea:	00db      	lsls	r3, r3, #3
 800e5ec:	440b      	add	r3, r1
 800e5ee:	3312      	adds	r3, #18
 800e5f0:	881b      	ldrh	r3, [r3, #0]
 800e5f2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800e5f6:	d919      	bls.n	800e62c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e5f8:	79fa      	ldrb	r2, [r7, #7]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	005b      	lsls	r3, r3, #1
 800e5fe:	4413      	add	r3, r2
 800e600:	00db      	lsls	r3, r3, #3
 800e602:	4a2e      	ldr	r2, [pc, #184]	@ (800e6bc <etharp_output_to_arp_index+0x124>)
 800e604:	4413      	add	r3, r2
 800e606:	3304      	adds	r3, #4
 800e608:	4619      	mov	r1, r3
 800e60a:	68f8      	ldr	r0, [r7, #12]
 800e60c:	f000 fb4c 	bl	800eca8 <etharp_request>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d138      	bne.n	800e688 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e616:	79fa      	ldrb	r2, [r7, #7]
 800e618:	4928      	ldr	r1, [pc, #160]	@ (800e6bc <etharp_output_to_arp_index+0x124>)
 800e61a:	4613      	mov	r3, r2
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	4413      	add	r3, r2
 800e620:	00db      	lsls	r3, r3, #3
 800e622:	440b      	add	r3, r1
 800e624:	3314      	adds	r3, #20
 800e626:	2203      	movs	r2, #3
 800e628:	701a      	strb	r2, [r3, #0]
 800e62a:	e02d      	b.n	800e688 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e62c:	79fa      	ldrb	r2, [r7, #7]
 800e62e:	4923      	ldr	r1, [pc, #140]	@ (800e6bc <etharp_output_to_arp_index+0x124>)
 800e630:	4613      	mov	r3, r2
 800e632:	005b      	lsls	r3, r3, #1
 800e634:	4413      	add	r3, r2
 800e636:	00db      	lsls	r3, r3, #3
 800e638:	440b      	add	r3, r1
 800e63a:	3312      	adds	r3, #18
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800e642:	d321      	bcc.n	800e688 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e644:	79fa      	ldrb	r2, [r7, #7]
 800e646:	4613      	mov	r3, r2
 800e648:	005b      	lsls	r3, r3, #1
 800e64a:	4413      	add	r3, r2
 800e64c:	00db      	lsls	r3, r3, #3
 800e64e:	4a1b      	ldr	r2, [pc, #108]	@ (800e6bc <etharp_output_to_arp_index+0x124>)
 800e650:	4413      	add	r3, r2
 800e652:	1d19      	adds	r1, r3, #4
 800e654:	79fa      	ldrb	r2, [r7, #7]
 800e656:	4613      	mov	r3, r2
 800e658:	005b      	lsls	r3, r3, #1
 800e65a:	4413      	add	r3, r2
 800e65c:	00db      	lsls	r3, r3, #3
 800e65e:	3308      	adds	r3, #8
 800e660:	4a16      	ldr	r2, [pc, #88]	@ (800e6bc <etharp_output_to_arp_index+0x124>)
 800e662:	4413      	add	r3, r2
 800e664:	3304      	adds	r3, #4
 800e666:	461a      	mov	r2, r3
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f000 fafb 	bl	800ec64 <etharp_request_dst>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d109      	bne.n	800e688 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e674:	79fa      	ldrb	r2, [r7, #7]
 800e676:	4911      	ldr	r1, [pc, #68]	@ (800e6bc <etharp_output_to_arp_index+0x124>)
 800e678:	4613      	mov	r3, r2
 800e67a:	005b      	lsls	r3, r3, #1
 800e67c:	4413      	add	r3, r2
 800e67e:	00db      	lsls	r3, r3, #3
 800e680:	440b      	add	r3, r1
 800e682:	3314      	adds	r3, #20
 800e684:	2203      	movs	r2, #3
 800e686:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 800e68e:	79fa      	ldrb	r2, [r7, #7]
 800e690:	4613      	mov	r3, r2
 800e692:	005b      	lsls	r3, r3, #1
 800e694:	4413      	add	r3, r2
 800e696:	00db      	lsls	r3, r3, #3
 800e698:	3308      	adds	r3, #8
 800e69a:	4a08      	ldr	r2, [pc, #32]	@ (800e6bc <etharp_output_to_arp_index+0x124>)
 800e69c:	4413      	add	r3, r2
 800e69e:	3304      	adds	r3, #4
 800e6a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e6a4:	9200      	str	r2, [sp, #0]
 800e6a6:	460a      	mov	r2, r1
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f001 fe5e 	bl	801036c <ethernet_output>
 800e6b0:	4603      	mov	r3, r0
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20008334 	.word	0x20008334
 800e6c0:	08013ae0 	.word	0x08013ae0
 800e6c4:	08013c50 	.word	0x08013c50
 800e6c8:	08013b58 	.word	0x08013b58

0800e6cc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b08a      	sub	sp, #40	@ 0x28
 800e6d0:	af02      	add	r7, sp, #8
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d106      	bne.n	800e6f0 <etharp_output+0x24>
 800e6e2:	4b73      	ldr	r3, [pc, #460]	@ (800e8b0 <etharp_output+0x1e4>)
 800e6e4:	f240 321e 	movw	r2, #798	@ 0x31e
 800e6e8:	4972      	ldr	r1, [pc, #456]	@ (800e8b4 <etharp_output+0x1e8>)
 800e6ea:	4873      	ldr	r0, [pc, #460]	@ (800e8b8 <etharp_output+0x1ec>)
 800e6ec:	f001 ff86 	bl	80105fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d106      	bne.n	800e704 <etharp_output+0x38>
 800e6f6:	4b6e      	ldr	r3, [pc, #440]	@ (800e8b0 <etharp_output+0x1e4>)
 800e6f8:	f240 321f 	movw	r2, #799	@ 0x31f
 800e6fc:	496f      	ldr	r1, [pc, #444]	@ (800e8bc <etharp_output+0x1f0>)
 800e6fe:	486e      	ldr	r0, [pc, #440]	@ (800e8b8 <etharp_output+0x1ec>)
 800e700:	f001 ff7c 	bl	80105fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d106      	bne.n	800e718 <etharp_output+0x4c>
 800e70a:	4b69      	ldr	r3, [pc, #420]	@ (800e8b0 <etharp_output+0x1e4>)
 800e70c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800e710:	496b      	ldr	r1, [pc, #428]	@ (800e8c0 <etharp_output+0x1f4>)
 800e712:	4869      	ldr	r0, [pc, #420]	@ (800e8b8 <etharp_output+0x1ec>)
 800e714:	f001 ff72 	bl	80105fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	68f9      	ldr	r1, [r7, #12]
 800e71e:	4618      	mov	r0, r3
 800e720:	f000 ff16 	bl	800f550 <ip4_addr_isbroadcast_u32>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d002      	beq.n	800e730 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e72a:	4b66      	ldr	r3, [pc, #408]	@ (800e8c4 <etharp_output+0x1f8>)
 800e72c:	61fb      	str	r3, [r7, #28]
 800e72e:	e0af      	b.n	800e890 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e738:	2be0      	cmp	r3, #224	@ 0xe0
 800e73a:	d118      	bne.n	800e76e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e73c:	2301      	movs	r3, #1
 800e73e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e740:	2300      	movs	r3, #0
 800e742:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e744:	235e      	movs	r3, #94	@ 0x5e
 800e746:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	3301      	adds	r3, #1
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e752:	b2db      	uxtb	r3, r3
 800e754:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	3302      	adds	r3, #2
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	3303      	adds	r3, #3
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e766:	f107 0310 	add.w	r3, r7, #16
 800e76a:	61fb      	str	r3, [r7, #28]
 800e76c:	e090      	b.n	800e890 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	3304      	adds	r3, #4
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	405a      	eors	r2, r3
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	3308      	adds	r3, #8
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4013      	ands	r3, r2
 800e782:	2b00      	cmp	r3, #0
 800e784:	d012      	beq.n	800e7ac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e78c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800e790:	4293      	cmp	r3, r2
 800e792:	d00b      	beq.n	800e7ac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	330c      	adds	r3, #12
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d003      	beq.n	800e7a6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	330c      	adds	r3, #12
 800e7a2:	61bb      	str	r3, [r7, #24]
 800e7a4:	e002      	b.n	800e7ac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e7a6:	f06f 0303 	mvn.w	r3, #3
 800e7aa:	e07d      	b.n	800e8a8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e7ac:	4b46      	ldr	r3, [pc, #280]	@ (800e8c8 <etharp_output+0x1fc>)
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	4a46      	ldr	r2, [pc, #280]	@ (800e8cc <etharp_output+0x200>)
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	440b      	add	r3, r1
 800e7ba:	00db      	lsls	r3, r3, #3
 800e7bc:	4413      	add	r3, r2
 800e7be:	3314      	adds	r3, #20
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d925      	bls.n	800e812 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e7c6:	4b40      	ldr	r3, [pc, #256]	@ (800e8c8 <etharp_output+0x1fc>)
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	4a3f      	ldr	r2, [pc, #252]	@ (800e8cc <etharp_output+0x200>)
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	005b      	lsls	r3, r3, #1
 800e7d2:	440b      	add	r3, r1
 800e7d4:	00db      	lsls	r3, r3, #3
 800e7d6:	4413      	add	r3, r2
 800e7d8:	3308      	adds	r3, #8
 800e7da:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e7dc:	68fa      	ldr	r2, [r7, #12]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d117      	bne.n	800e812 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	4b38      	ldr	r3, [pc, #224]	@ (800e8c8 <etharp_output+0x1fc>)
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	4937      	ldr	r1, [pc, #220]	@ (800e8cc <etharp_output+0x200>)
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	005b      	lsls	r3, r3, #1
 800e7f2:	4403      	add	r3, r0
 800e7f4:	00db      	lsls	r3, r3, #3
 800e7f6:	440b      	add	r3, r1
 800e7f8:	3304      	adds	r3, #4
 800e7fa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d108      	bne.n	800e812 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e800:	4b31      	ldr	r3, [pc, #196]	@ (800e8c8 <etharp_output+0x1fc>)
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	461a      	mov	r2, r3
 800e806:	68b9      	ldr	r1, [r7, #8]
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	f7ff fec5 	bl	800e598 <etharp_output_to_arp_index>
 800e80e:	4603      	mov	r3, r0
 800e810:	e04a      	b.n	800e8a8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e812:	2300      	movs	r3, #0
 800e814:	75fb      	strb	r3, [r7, #23]
 800e816:	e031      	b.n	800e87c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e818:	7dfa      	ldrb	r2, [r7, #23]
 800e81a:	492c      	ldr	r1, [pc, #176]	@ (800e8cc <etharp_output+0x200>)
 800e81c:	4613      	mov	r3, r2
 800e81e:	005b      	lsls	r3, r3, #1
 800e820:	4413      	add	r3, r2
 800e822:	00db      	lsls	r3, r3, #3
 800e824:	440b      	add	r3, r1
 800e826:	3314      	adds	r3, #20
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d923      	bls.n	800e876 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e82e:	7dfa      	ldrb	r2, [r7, #23]
 800e830:	4926      	ldr	r1, [pc, #152]	@ (800e8cc <etharp_output+0x200>)
 800e832:	4613      	mov	r3, r2
 800e834:	005b      	lsls	r3, r3, #1
 800e836:	4413      	add	r3, r2
 800e838:	00db      	lsls	r3, r3, #3
 800e83a:	440b      	add	r3, r1
 800e83c:	3308      	adds	r3, #8
 800e83e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	429a      	cmp	r2, r3
 800e844:	d117      	bne.n	800e876 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	6819      	ldr	r1, [r3, #0]
 800e84a:	7dfa      	ldrb	r2, [r7, #23]
 800e84c:	481f      	ldr	r0, [pc, #124]	@ (800e8cc <etharp_output+0x200>)
 800e84e:	4613      	mov	r3, r2
 800e850:	005b      	lsls	r3, r3, #1
 800e852:	4413      	add	r3, r2
 800e854:	00db      	lsls	r3, r3, #3
 800e856:	4403      	add	r3, r0
 800e858:	3304      	adds	r3, #4
 800e85a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e85c:	4299      	cmp	r1, r3
 800e85e:	d10a      	bne.n	800e876 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e860:	4a19      	ldr	r2, [pc, #100]	@ (800e8c8 <etharp_output+0x1fc>)
 800e862:	7dfb      	ldrb	r3, [r7, #23]
 800e864:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e866:	7dfb      	ldrb	r3, [r7, #23]
 800e868:	461a      	mov	r2, r3
 800e86a:	68b9      	ldr	r1, [r7, #8]
 800e86c:	68f8      	ldr	r0, [r7, #12]
 800e86e:	f7ff fe93 	bl	800e598 <etharp_output_to_arp_index>
 800e872:	4603      	mov	r3, r0
 800e874:	e018      	b.n	800e8a8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e876:	7dfb      	ldrb	r3, [r7, #23]
 800e878:	3301      	adds	r3, #1
 800e87a:	75fb      	strb	r3, [r7, #23]
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
 800e87e:	2b09      	cmp	r3, #9
 800e880:	d9ca      	bls.n	800e818 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e882:	68ba      	ldr	r2, [r7, #8]
 800e884:	69b9      	ldr	r1, [r7, #24]
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f000 f822 	bl	800e8d0 <etharp_query>
 800e88c:	4603      	mov	r3, r0
 800e88e:	e00b      	b.n	800e8a8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800e896:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e89a:	9300      	str	r3, [sp, #0]
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	68b9      	ldr	r1, [r7, #8]
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f001 fd63 	bl	801036c <ethernet_output>
 800e8a6:	4603      	mov	r3, r0
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3720      	adds	r7, #32
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	08013ae0 	.word	0x08013ae0
 800e8b4:	08013c30 	.word	0x08013c30
 800e8b8:	08013b58 	.word	0x08013b58
 800e8bc:	08013c80 	.word	0x08013c80
 800e8c0:	08013c20 	.word	0x08013c20
 800e8c4:	080142b0 	.word	0x080142b0
 800e8c8:	20008424 	.word	0x20008424
 800e8cc:	20008334 	.word	0x20008334

0800e8d0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b08c      	sub	sp, #48	@ 0x30
 800e8d4:	af02      	add	r7, sp, #8
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	332a      	adds	r3, #42	@ 0x2a
 800e8e0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e8e2:	23ff      	movs	r3, #255	@ 0xff
 800e8e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68f9      	ldr	r1, [r7, #12]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f000 fe2c 	bl	800f550 <ip4_addr_isbroadcast_u32>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d10c      	bne.n	800e918 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e906:	2be0      	cmp	r3, #224	@ 0xe0
 800e908:	d006      	beq.n	800e918 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d003      	beq.n	800e918 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d102      	bne.n	800e91e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e918:	f06f 030f 	mvn.w	r3, #15
 800e91c:	e101      	b.n	800eb22 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e91e:	68fa      	ldr	r2, [r7, #12]
 800e920:	2101      	movs	r1, #1
 800e922:	68b8      	ldr	r0, [r7, #8]
 800e924:	f7ff fb5c 	bl	800dfe0 <etharp_find_entry>
 800e928:	4603      	mov	r3, r0
 800e92a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e92c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e930:	2b00      	cmp	r3, #0
 800e932:	da02      	bge.n	800e93a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e934:	8a7b      	ldrh	r3, [r7, #18]
 800e936:	b25b      	sxtb	r3, r3
 800e938:	e0f3      	b.n	800eb22 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e93a:	8a7b      	ldrh	r3, [r7, #18]
 800e93c:	2b7e      	cmp	r3, #126	@ 0x7e
 800e93e:	d906      	bls.n	800e94e <etharp_query+0x7e>
 800e940:	4b7a      	ldr	r3, [pc, #488]	@ (800eb2c <etharp_query+0x25c>)
 800e942:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800e946:	497a      	ldr	r1, [pc, #488]	@ (800eb30 <etharp_query+0x260>)
 800e948:	487a      	ldr	r0, [pc, #488]	@ (800eb34 <etharp_query+0x264>)
 800e94a:	f001 fe57 	bl	80105fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e94e:	8a7b      	ldrh	r3, [r7, #18]
 800e950:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e952:	7c7a      	ldrb	r2, [r7, #17]
 800e954:	4978      	ldr	r1, [pc, #480]	@ (800eb38 <etharp_query+0x268>)
 800e956:	4613      	mov	r3, r2
 800e958:	005b      	lsls	r3, r3, #1
 800e95a:	4413      	add	r3, r2
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	440b      	add	r3, r1
 800e960:	3314      	adds	r3, #20
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d115      	bne.n	800e994 <etharp_query+0xc4>
    is_new_entry = 1;
 800e968:	2301      	movs	r3, #1
 800e96a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e96c:	7c7a      	ldrb	r2, [r7, #17]
 800e96e:	4972      	ldr	r1, [pc, #456]	@ (800eb38 <etharp_query+0x268>)
 800e970:	4613      	mov	r3, r2
 800e972:	005b      	lsls	r3, r3, #1
 800e974:	4413      	add	r3, r2
 800e976:	00db      	lsls	r3, r3, #3
 800e978:	440b      	add	r3, r1
 800e97a:	3314      	adds	r3, #20
 800e97c:	2201      	movs	r2, #1
 800e97e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e980:	7c7a      	ldrb	r2, [r7, #17]
 800e982:	496d      	ldr	r1, [pc, #436]	@ (800eb38 <etharp_query+0x268>)
 800e984:	4613      	mov	r3, r2
 800e986:	005b      	lsls	r3, r3, #1
 800e988:	4413      	add	r3, r2
 800e98a:	00db      	lsls	r3, r3, #3
 800e98c:	440b      	add	r3, r1
 800e98e:	3308      	adds	r3, #8
 800e990:	68fa      	ldr	r2, [r7, #12]
 800e992:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e994:	7c7a      	ldrb	r2, [r7, #17]
 800e996:	4968      	ldr	r1, [pc, #416]	@ (800eb38 <etharp_query+0x268>)
 800e998:	4613      	mov	r3, r2
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	4413      	add	r3, r2
 800e99e:	00db      	lsls	r3, r3, #3
 800e9a0:	440b      	add	r3, r1
 800e9a2:	3314      	adds	r3, #20
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	2b01      	cmp	r3, #1
 800e9a8:	d011      	beq.n	800e9ce <etharp_query+0xfe>
 800e9aa:	7c7a      	ldrb	r2, [r7, #17]
 800e9ac:	4962      	ldr	r1, [pc, #392]	@ (800eb38 <etharp_query+0x268>)
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	4413      	add	r3, r2
 800e9b4:	00db      	lsls	r3, r3, #3
 800e9b6:	440b      	add	r3, r1
 800e9b8:	3314      	adds	r3, #20
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d806      	bhi.n	800e9ce <etharp_query+0xfe>
 800e9c0:	4b5a      	ldr	r3, [pc, #360]	@ (800eb2c <etharp_query+0x25c>)
 800e9c2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800e9c6:	495d      	ldr	r1, [pc, #372]	@ (800eb3c <etharp_query+0x26c>)
 800e9c8:	485a      	ldr	r0, [pc, #360]	@ (800eb34 <etharp_query+0x264>)
 800e9ca:	f001 fe17 	bl	80105fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e9ce:	6a3b      	ldr	r3, [r7, #32]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d102      	bne.n	800e9da <etharp_query+0x10a>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d10c      	bne.n	800e9f4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e9da:	68b9      	ldr	r1, [r7, #8]
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f000 f963 	bl	800eca8 <etharp_request>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d102      	bne.n	800e9f4 <etharp_query+0x124>
      return result;
 800e9ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e9f2:	e096      	b.n	800eb22 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d106      	bne.n	800ea08 <etharp_query+0x138>
 800e9fa:	4b4c      	ldr	r3, [pc, #304]	@ (800eb2c <etharp_query+0x25c>)
 800e9fc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800ea00:	494f      	ldr	r1, [pc, #316]	@ (800eb40 <etharp_query+0x270>)
 800ea02:	484c      	ldr	r0, [pc, #304]	@ (800eb34 <etharp_query+0x264>)
 800ea04:	f001 fdfa 	bl	80105fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ea08:	7c7a      	ldrb	r2, [r7, #17]
 800ea0a:	494b      	ldr	r1, [pc, #300]	@ (800eb38 <etharp_query+0x268>)
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	005b      	lsls	r3, r3, #1
 800ea10:	4413      	add	r3, r2
 800ea12:	00db      	lsls	r3, r3, #3
 800ea14:	440b      	add	r3, r1
 800ea16:	3314      	adds	r3, #20
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d917      	bls.n	800ea4e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ea1e:	4a49      	ldr	r2, [pc, #292]	@ (800eb44 <etharp_query+0x274>)
 800ea20:	7c7b      	ldrb	r3, [r7, #17]
 800ea22:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ea24:	7c7a      	ldrb	r2, [r7, #17]
 800ea26:	4613      	mov	r3, r2
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	4413      	add	r3, r2
 800ea2c:	00db      	lsls	r3, r3, #3
 800ea2e:	3308      	adds	r3, #8
 800ea30:	4a41      	ldr	r2, [pc, #260]	@ (800eb38 <etharp_query+0x268>)
 800ea32:	4413      	add	r3, r2
 800ea34:	3304      	adds	r3, #4
 800ea36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ea3a:	9200      	str	r2, [sp, #0]
 800ea3c:	697a      	ldr	r2, [r7, #20]
 800ea3e:	6879      	ldr	r1, [r7, #4]
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f001 fc93 	bl	801036c <ethernet_output>
 800ea46:	4603      	mov	r3, r0
 800ea48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ea4c:	e067      	b.n	800eb1e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ea4e:	7c7a      	ldrb	r2, [r7, #17]
 800ea50:	4939      	ldr	r1, [pc, #228]	@ (800eb38 <etharp_query+0x268>)
 800ea52:	4613      	mov	r3, r2
 800ea54:	005b      	lsls	r3, r3, #1
 800ea56:	4413      	add	r3, r2
 800ea58:	00db      	lsls	r3, r3, #3
 800ea5a:	440b      	add	r3, r1
 800ea5c:	3314      	adds	r3, #20
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d15c      	bne.n	800eb1e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ea64:	2300      	movs	r3, #0
 800ea66:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ea6c:	e01c      	b.n	800eaa8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ea6e:	69fb      	ldr	r3, [r7, #28]
 800ea70:	895a      	ldrh	r2, [r3, #10]
 800ea72:	69fb      	ldr	r3, [r7, #28]
 800ea74:	891b      	ldrh	r3, [r3, #8]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d10a      	bne.n	800ea90 <etharp_query+0x1c0>
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d006      	beq.n	800ea90 <etharp_query+0x1c0>
 800ea82:	4b2a      	ldr	r3, [pc, #168]	@ (800eb2c <etharp_query+0x25c>)
 800ea84:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800ea88:	492f      	ldr	r1, [pc, #188]	@ (800eb48 <etharp_query+0x278>)
 800ea8a:	482a      	ldr	r0, [pc, #168]	@ (800eb34 <etharp_query+0x264>)
 800ea8c:	f001 fdb6 	bl	80105fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	7b1b      	ldrb	r3, [r3, #12]
 800ea94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d002      	beq.n	800eaa2 <etharp_query+0x1d2>
        copy_needed = 1;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	61bb      	str	r3, [r7, #24]
        break;
 800eaa0:	e005      	b.n	800eaae <etharp_query+0x1de>
      }
      p = p->next;
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d1df      	bne.n	800ea6e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800eaae:	69bb      	ldr	r3, [r7, #24]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d007      	beq.n	800eac4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800eaba:	200e      	movs	r0, #14
 800eabc:	f7f7 fbdc 	bl	8006278 <pbuf_clone>
 800eac0:	61f8      	str	r0, [r7, #28]
 800eac2:	e004      	b.n	800eace <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800eac8:	69f8      	ldr	r0, [r7, #28]
 800eaca:	f7f7 fa09 	bl	8005ee0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d021      	beq.n	800eb18 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ead4:	7c7a      	ldrb	r2, [r7, #17]
 800ead6:	4918      	ldr	r1, [pc, #96]	@ (800eb38 <etharp_query+0x268>)
 800ead8:	4613      	mov	r3, r2
 800eada:	005b      	lsls	r3, r3, #1
 800eadc:	4413      	add	r3, r2
 800eade:	00db      	lsls	r3, r3, #3
 800eae0:	440b      	add	r3, r1
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00a      	beq.n	800eafe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800eae8:	7c7a      	ldrb	r2, [r7, #17]
 800eaea:	4913      	ldr	r1, [pc, #76]	@ (800eb38 <etharp_query+0x268>)
 800eaec:	4613      	mov	r3, r2
 800eaee:	005b      	lsls	r3, r3, #1
 800eaf0:	4413      	add	r3, r2
 800eaf2:	00db      	lsls	r3, r3, #3
 800eaf4:	440b      	add	r3, r1
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7f7 f951 	bl	8005da0 <pbuf_free>
      }
      arp_table[i].q = p;
 800eafe:	7c7a      	ldrb	r2, [r7, #17]
 800eb00:	490d      	ldr	r1, [pc, #52]	@ (800eb38 <etharp_query+0x268>)
 800eb02:	4613      	mov	r3, r2
 800eb04:	005b      	lsls	r3, r3, #1
 800eb06:	4413      	add	r3, r2
 800eb08:	00db      	lsls	r3, r3, #3
 800eb0a:	440b      	add	r3, r1
 800eb0c:	69fa      	ldr	r2, [r7, #28]
 800eb0e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800eb10:	2300      	movs	r3, #0
 800eb12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb16:	e002      	b.n	800eb1e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800eb18:	23ff      	movs	r3, #255	@ 0xff
 800eb1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800eb1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3728      	adds	r7, #40	@ 0x28
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	08013ae0 	.word	0x08013ae0
 800eb30:	08013c8c 	.word	0x08013c8c
 800eb34:	08013b58 	.word	0x08013b58
 800eb38:	20008334 	.word	0x20008334
 800eb3c:	08013c9c 	.word	0x08013c9c
 800eb40:	08013c80 	.word	0x08013c80
 800eb44:	20008424 	.word	0x20008424
 800eb48:	08013cc4 	.word	0x08013cc4

0800eb4c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b08a      	sub	sp, #40	@ 0x28
 800eb50:	af02      	add	r7, sp, #8
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	607a      	str	r2, [r7, #4]
 800eb58:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d106      	bne.n	800eb72 <etharp_raw+0x26>
 800eb64:	4b3a      	ldr	r3, [pc, #232]	@ (800ec50 <etharp_raw+0x104>)
 800eb66:	f240 4257 	movw	r2, #1111	@ 0x457
 800eb6a:	493a      	ldr	r1, [pc, #232]	@ (800ec54 <etharp_raw+0x108>)
 800eb6c:	483a      	ldr	r0, [pc, #232]	@ (800ec58 <etharp_raw+0x10c>)
 800eb6e:	f001 fd45 	bl	80105fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800eb72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800eb76:	211c      	movs	r1, #28
 800eb78:	200e      	movs	r0, #14
 800eb7a:	f7f6 fe2d 	bl	80057d8 <pbuf_alloc>
 800eb7e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d102      	bne.n	800eb8c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800eb86:	f04f 33ff 	mov.w	r3, #4294967295
 800eb8a:	e05d      	b.n	800ec48 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800eb8c:	69bb      	ldr	r3, [r7, #24]
 800eb8e:	895b      	ldrh	r3, [r3, #10]
 800eb90:	2b1b      	cmp	r3, #27
 800eb92:	d806      	bhi.n	800eba2 <etharp_raw+0x56>
 800eb94:	4b2e      	ldr	r3, [pc, #184]	@ (800ec50 <etharp_raw+0x104>)
 800eb96:	f240 4262 	movw	r2, #1122	@ 0x462
 800eb9a:	4930      	ldr	r1, [pc, #192]	@ (800ec5c <etharp_raw+0x110>)
 800eb9c:	482e      	ldr	r0, [pc, #184]	@ (800ec58 <etharp_raw+0x10c>)
 800eb9e:	f001 fd2d 	bl	80105fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800eba2:	69bb      	ldr	r3, [r7, #24]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800eba8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7f5 fdae 	bl	800470c <lwip_htons>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ebbe:	2b06      	cmp	r3, #6
 800ebc0:	d006      	beq.n	800ebd0 <etharp_raw+0x84>
 800ebc2:	4b23      	ldr	r3, [pc, #140]	@ (800ec50 <etharp_raw+0x104>)
 800ebc4:	f240 4269 	movw	r2, #1129	@ 0x469
 800ebc8:	4925      	ldr	r1, [pc, #148]	@ (800ec60 <etharp_raw+0x114>)
 800ebca:	4823      	ldr	r0, [pc, #140]	@ (800ec58 <etharp_raw+0x10c>)
 800ebcc:	f001 fd16 	bl	80105fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	3308      	adds	r3, #8
 800ebd4:	2206      	movs	r2, #6
 800ebd6:	6839      	ldr	r1, [r7, #0]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f001 fdea 	bl	80107b2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	3312      	adds	r3, #18
 800ebe2:	2206      	movs	r2, #6
 800ebe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f001 fde3 	bl	80107b2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	330e      	adds	r3, #14
 800ebf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebf2:	6812      	ldr	r2, [r2, #0]
 800ebf4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	3318      	adds	r3, #24
 800ebfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebfc:	6812      	ldr	r2, [r2, #0]
 800ebfe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	2200      	movs	r2, #0
 800ec04:	701a      	strb	r2, [r3, #0]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f042 0201 	orr.w	r2, r2, #1
 800ec0c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	2200      	movs	r2, #0
 800ec12:	f042 0208 	orr.w	r2, r2, #8
 800ec16:	709a      	strb	r2, [r3, #2]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	2206      	movs	r2, #6
 800ec20:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	2204      	movs	r2, #4
 800ec26:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ec28:	f640 0306 	movw	r3, #2054	@ 0x806
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	68ba      	ldr	r2, [r7, #8]
 800ec32:	69b9      	ldr	r1, [r7, #24]
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f001 fb99 	bl	801036c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ec3a:	69b8      	ldr	r0, [r7, #24]
 800ec3c:	f7f7 f8b0 	bl	8005da0 <pbuf_free>
  p = NULL;
 800ec40:	2300      	movs	r3, #0
 800ec42:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ec44:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3720      	adds	r7, #32
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	08013ae0 	.word	0x08013ae0
 800ec54:	08013c30 	.word	0x08013c30
 800ec58:	08013b58 	.word	0x08013b58
 800ec5c:	08013ce0 	.word	0x08013ce0
 800ec60:	08013d14 	.word	0x08013d14

0800ec64 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b088      	sub	sp, #32
 800ec68:	af04      	add	r7, sp, #16
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ec80:	2201      	movs	r2, #1
 800ec82:	9203      	str	r2, [sp, #12]
 800ec84:	68ba      	ldr	r2, [r7, #8]
 800ec86:	9202      	str	r2, [sp, #8]
 800ec88:	4a06      	ldr	r2, [pc, #24]	@ (800eca4 <etharp_request_dst+0x40>)
 800ec8a:	9201      	str	r2, [sp, #4]
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	4603      	mov	r3, r0
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	f7ff ff5a 	bl	800eb4c <etharp_raw>
 800ec98:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	080142b8 	.word	0x080142b8

0800eca8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ecb2:	4a05      	ldr	r2, [pc, #20]	@ (800ecc8 <etharp_request+0x20>)
 800ecb4:	6839      	ldr	r1, [r7, #0]
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f7ff ffd4 	bl	800ec64 <etharp_request_dst>
 800ecbc:	4603      	mov	r3, r0
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	080142b0 	.word	0x080142b0

0800eccc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b08e      	sub	sp, #56	@ 0x38
 800ecd0:	af04      	add	r7, sp, #16
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ecd6:	4b79      	ldr	r3, [pc, #484]	@ (800eebc <icmp_input+0x1f0>)
 800ecd8:	689b      	ldr	r3, [r3, #8]
 800ecda:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ecdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	f003 030f 	and.w	r3, r3, #15
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800ecec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ecee:	2b13      	cmp	r3, #19
 800ecf0:	f240 80cd 	bls.w	800ee8e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	895b      	ldrh	r3, [r3, #10]
 800ecf8:	2b03      	cmp	r3, #3
 800ecfa:	f240 80ca 	bls.w	800ee92 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ed08:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f000 80b7 	beq.w	800ee80 <icmp_input+0x1b4>
 800ed12:	2b08      	cmp	r3, #8
 800ed14:	f040 80b7 	bne.w	800ee86 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ed18:	4b69      	ldr	r3, [pc, #420]	@ (800eec0 <icmp_input+0x1f4>)
 800ed1a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ed1c:	4b67      	ldr	r3, [pc, #412]	@ (800eebc <icmp_input+0x1f0>)
 800ed1e:	695b      	ldr	r3, [r3, #20]
 800ed20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ed24:	2be0      	cmp	r3, #224	@ 0xe0
 800ed26:	f000 80bb 	beq.w	800eea0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ed2a:	4b64      	ldr	r3, [pc, #400]	@ (800eebc <icmp_input+0x1f0>)
 800ed2c:	695b      	ldr	r3, [r3, #20]
 800ed2e:	4a63      	ldr	r2, [pc, #396]	@ (800eebc <icmp_input+0x1f0>)
 800ed30:	6812      	ldr	r2, [r2, #0]
 800ed32:	4611      	mov	r1, r2
 800ed34:	4618      	mov	r0, r3
 800ed36:	f000 fc0b 	bl	800f550 <ip4_addr_isbroadcast_u32>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f040 80b1 	bne.w	800eea4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	891b      	ldrh	r3, [r3, #8]
 800ed46:	2b07      	cmp	r3, #7
 800ed48:	f240 80a5 	bls.w	800ee96 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ed4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed4e:	330e      	adds	r3, #14
 800ed50:	4619      	mov	r1, r3
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f7f6 ff8e 	bl	8005c74 <pbuf_add_header>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d04b      	beq.n	800edf6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	891a      	ldrh	r2, [r3, #8]
 800ed62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed64:	4413      	add	r3, r2
 800ed66:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	891b      	ldrh	r3, [r3, #8]
 800ed6c:	8b7a      	ldrh	r2, [r7, #26]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	f0c0 809a 	bcc.w	800eea8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ed74:	8b7b      	ldrh	r3, [r7, #26]
 800ed76:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	200e      	movs	r0, #14
 800ed7e:	f7f6 fd2b 	bl	80057d8 <pbuf_alloc>
 800ed82:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f000 8090 	beq.w	800eeac <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	895b      	ldrh	r3, [r3, #10]
 800ed90:	461a      	mov	r2, r3
 800ed92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed94:	3308      	adds	r3, #8
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d203      	bcs.n	800eda2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ed9a:	6978      	ldr	r0, [r7, #20]
 800ed9c:	f7f7 f800 	bl	8005da0 <pbuf_free>
          goto icmperr;
 800eda0:	e085      	b.n	800eeae <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800eda8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800edaa:	4618      	mov	r0, r3
 800edac:	f001 fd01 	bl	80107b2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800edb0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800edb2:	4619      	mov	r1, r3
 800edb4:	6978      	ldr	r0, [r7, #20]
 800edb6:	f7f6 ff6d 	bl	8005c94 <pbuf_remove_header>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d009      	beq.n	800edd4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800edc0:	4b40      	ldr	r3, [pc, #256]	@ (800eec4 <icmp_input+0x1f8>)
 800edc2:	22b6      	movs	r2, #182	@ 0xb6
 800edc4:	4940      	ldr	r1, [pc, #256]	@ (800eec8 <icmp_input+0x1fc>)
 800edc6:	4841      	ldr	r0, [pc, #260]	@ (800eecc <icmp_input+0x200>)
 800edc8:	f001 fc18 	bl	80105fc <iprintf>
          pbuf_free(r);
 800edcc:	6978      	ldr	r0, [r7, #20]
 800edce:	f7f6 ffe7 	bl	8005da0 <pbuf_free>
          goto icmperr;
 800edd2:	e06c      	b.n	800eeae <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800edd4:	6879      	ldr	r1, [r7, #4]
 800edd6:	6978      	ldr	r0, [r7, #20]
 800edd8:	f7f7 f90a 	bl	8005ff0 <pbuf_copy>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d003      	beq.n	800edea <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ede2:	6978      	ldr	r0, [r7, #20]
 800ede4:	f7f6 ffdc 	bl	8005da0 <pbuf_free>
          goto icmperr;
 800ede8:	e061      	b.n	800eeae <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7f6 ffd8 	bl	8005da0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	607b      	str	r3, [r7, #4]
 800edf4:	e00f      	b.n	800ee16 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800edf6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800edf8:	330e      	adds	r3, #14
 800edfa:	4619      	mov	r1, r3
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7f6 ff49 	bl	8005c94 <pbuf_remove_header>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d006      	beq.n	800ee16 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ee08:	4b2e      	ldr	r3, [pc, #184]	@ (800eec4 <icmp_input+0x1f8>)
 800ee0a:	22c7      	movs	r2, #199	@ 0xc7
 800ee0c:	4930      	ldr	r1, [pc, #192]	@ (800eed0 <icmp_input+0x204>)
 800ee0e:	482f      	ldr	r0, [pc, #188]	@ (800eecc <icmp_input+0x200>)
 800ee10:	f001 fbf4 	bl	80105fc <iprintf>
          goto icmperr;
 800ee14:	e04b      	b.n	800eeae <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ee1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee1e:	4619      	mov	r1, r3
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f7f6 ff27 	bl	8005c74 <pbuf_add_header>
 800ee26:	4603      	mov	r3, r0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d12b      	bne.n	800ee84 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ee32:	69fb      	ldr	r3, [r7, #28]
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ee3a:	4b20      	ldr	r3, [pc, #128]	@ (800eebc <icmp_input+0x1f0>)
 800ee3c:	691a      	ldr	r2, [r3, #16]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	2200      	movs	r2, #0
 800ee46:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	709a      	strb	r2, [r3, #2]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	22ff      	movs	r2, #255	@ 0xff
 800ee56:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	729a      	strb	r2, [r3, #10]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	9302      	str	r3, [sp, #8]
 800ee66:	2301      	movs	r3, #1
 800ee68:	9301      	str	r3, [sp, #4]
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	23ff      	movs	r3, #255	@ 0xff
 800ee70:	2200      	movs	r2, #0
 800ee72:	69f9      	ldr	r1, [r7, #28]
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 fa93 	bl	800f3a0 <ip4_output_if>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ee7e:	e001      	b.n	800ee84 <icmp_input+0x1b8>
      break;
 800ee80:	bf00      	nop
 800ee82:	e000      	b.n	800ee86 <icmp_input+0x1ba>
      break;
 800ee84:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f7f6 ff8a 	bl	8005da0 <pbuf_free>
  return;
 800ee8c:	e013      	b.n	800eeb6 <icmp_input+0x1ea>
    goto lenerr;
 800ee8e:	bf00      	nop
 800ee90:	e002      	b.n	800ee98 <icmp_input+0x1cc>
    goto lenerr;
 800ee92:	bf00      	nop
 800ee94:	e000      	b.n	800ee98 <icmp_input+0x1cc>
        goto lenerr;
 800ee96:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f7f6 ff81 	bl	8005da0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ee9e:	e00a      	b.n	800eeb6 <icmp_input+0x1ea>
        goto icmperr;
 800eea0:	bf00      	nop
 800eea2:	e004      	b.n	800eeae <icmp_input+0x1e2>
        goto icmperr;
 800eea4:	bf00      	nop
 800eea6:	e002      	b.n	800eeae <icmp_input+0x1e2>
          goto icmperr;
 800eea8:	bf00      	nop
 800eeaa:	e000      	b.n	800eeae <icmp_input+0x1e2>
          goto icmperr;
 800eeac:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f7f6 ff76 	bl	8005da0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800eeb4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800eeb6:	3728      	adds	r7, #40	@ 0x28
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	20004d10 	.word	0x20004d10
 800eec0:	20004d24 	.word	0x20004d24
 800eec4:	08013d58 	.word	0x08013d58
 800eec8:	08013d90 	.word	0x08013d90
 800eecc:	08013dc8 	.word	0x08013dc8
 800eed0:	08013df0 	.word	0x08013df0

0800eed4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	460b      	mov	r3, r1
 800eede:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800eee0:	78fb      	ldrb	r3, [r7, #3]
 800eee2:	461a      	mov	r2, r3
 800eee4:	2103      	movs	r1, #3
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 f814 	bl	800ef14 <icmp_send_response>
}
 800eeec:	bf00      	nop
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	460b      	mov	r3, r1
 800eefe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ef00:	78fb      	ldrb	r3, [r7, #3]
 800ef02:	461a      	mov	r2, r3
 800ef04:	210b      	movs	r1, #11
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 f804 	bl	800ef14 <icmp_send_response>
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b08c      	sub	sp, #48	@ 0x30
 800ef18:	af04      	add	r7, sp, #16
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	70fb      	strb	r3, [r7, #3]
 800ef20:	4613      	mov	r3, r2
 800ef22:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ef24:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ef28:	2124      	movs	r1, #36	@ 0x24
 800ef2a:	2022      	movs	r0, #34	@ 0x22
 800ef2c:	f7f6 fc54 	bl	80057d8 <pbuf_alloc>
 800ef30:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d04c      	beq.n	800efd2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ef38:	69fb      	ldr	r3, [r7, #28]
 800ef3a:	895b      	ldrh	r3, [r3, #10]
 800ef3c:	2b23      	cmp	r3, #35	@ 0x23
 800ef3e:	d806      	bhi.n	800ef4e <icmp_send_response+0x3a>
 800ef40:	4b26      	ldr	r3, [pc, #152]	@ (800efdc <icmp_send_response+0xc8>)
 800ef42:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800ef46:	4926      	ldr	r1, [pc, #152]	@ (800efe0 <icmp_send_response+0xcc>)
 800ef48:	4826      	ldr	r0, [pc, #152]	@ (800efe4 <icmp_send_response+0xd0>)
 800ef4a:	f001 fb57 	bl	80105fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	78fa      	ldrb	r2, [r7, #3]
 800ef5e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	78ba      	ldrb	r2, [r7, #2]
 800ef64:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	711a      	strb	r2, [r3, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	2200      	movs	r2, #0
 800ef74:	719a      	strb	r2, [r3, #6]
 800ef76:	2200      	movs	r2, #0
 800ef78:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	f103 0008 	add.w	r0, r3, #8
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	221c      	movs	r2, #28
 800ef88:	4619      	mov	r1, r3
 800ef8a:	f001 fc12 	bl	80107b2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ef94:	f107 030c 	add.w	r3, r7, #12
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f000 f825 	bl	800efe8 <ip4_route>
 800ef9e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d011      	beq.n	800efca <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	2200      	movs	r2, #0
 800efaa:	709a      	strb	r2, [r3, #2]
 800efac:	2200      	movs	r2, #0
 800efae:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800efb0:	f107 020c 	add.w	r2, r7, #12
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	9302      	str	r3, [sp, #8]
 800efb8:	2301      	movs	r3, #1
 800efba:	9301      	str	r3, [sp, #4]
 800efbc:	2300      	movs	r3, #0
 800efbe:	9300      	str	r3, [sp, #0]
 800efc0:	23ff      	movs	r3, #255	@ 0xff
 800efc2:	2100      	movs	r1, #0
 800efc4:	69f8      	ldr	r0, [r7, #28]
 800efc6:	f000 f9eb 	bl	800f3a0 <ip4_output_if>
  }
  pbuf_free(q);
 800efca:	69f8      	ldr	r0, [r7, #28]
 800efcc:	f7f6 fee8 	bl	8005da0 <pbuf_free>
 800efd0:	e000      	b.n	800efd4 <icmp_send_response+0xc0>
    return;
 800efd2:	bf00      	nop
}
 800efd4:	3720      	adds	r7, #32
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	08013d58 	.word	0x08013d58
 800efe0:	08013e24 	.word	0x08013e24
 800efe4:	08013dc8 	.word	0x08013dc8

0800efe8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800efe8:	b480      	push	{r7}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800eff0:	4b33      	ldr	r3, [pc, #204]	@ (800f0c0 <ip4_route+0xd8>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	60fb      	str	r3, [r7, #12]
 800eff6:	e036      	b.n	800f066 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800effe:	f003 0301 	and.w	r3, r3, #1
 800f002:	b2db      	uxtb	r3, r3
 800f004:	2b00      	cmp	r3, #0
 800f006:	d02b      	beq.n	800f060 <ip4_route+0x78>
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f00e:	089b      	lsrs	r3, r3, #2
 800f010:	f003 0301 	and.w	r3, r3, #1
 800f014:	b2db      	uxtb	r3, r3
 800f016:	2b00      	cmp	r3, #0
 800f018:	d022      	beq.n	800f060 <ip4_route+0x78>
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	3304      	adds	r3, #4
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d01d      	beq.n	800f060 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3304      	adds	r3, #4
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	405a      	eors	r2, r3
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	3308      	adds	r3, #8
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4013      	ands	r3, r2
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d101      	bne.n	800f040 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	e038      	b.n	800f0b2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f046:	f003 0302 	and.w	r3, r3, #2
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d108      	bne.n	800f060 <ip4_route+0x78>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	330c      	adds	r3, #12
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d101      	bne.n	800f060 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	e028      	b.n	800f0b2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	60fb      	str	r3, [r7, #12]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1c5      	bne.n	800eff8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f06c:	4b15      	ldr	r3, [pc, #84]	@ (800f0c4 <ip4_route+0xdc>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d01a      	beq.n	800f0aa <ip4_route+0xc2>
 800f074:	4b13      	ldr	r3, [pc, #76]	@ (800f0c4 <ip4_route+0xdc>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f07c:	f003 0301 	and.w	r3, r3, #1
 800f080:	2b00      	cmp	r3, #0
 800f082:	d012      	beq.n	800f0aa <ip4_route+0xc2>
 800f084:	4b0f      	ldr	r3, [pc, #60]	@ (800f0c4 <ip4_route+0xdc>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f08c:	f003 0304 	and.w	r3, r3, #4
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00a      	beq.n	800f0aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f094:	4b0b      	ldr	r3, [pc, #44]	@ (800f0c4 <ip4_route+0xdc>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	3304      	adds	r3, #4
 800f09a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d004      	beq.n	800f0aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f0a8:	d101      	bne.n	800f0ae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	e001      	b.n	800f0b2 <ip4_route+0xca>
  }

  return netif_default;
 800f0ae:	4b05      	ldr	r3, [pc, #20]	@ (800f0c4 <ip4_route+0xdc>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3714      	adds	r7, #20
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	20008294 	.word	0x20008294
 800f0c4:	20008298 	.word	0x20008298

0800f0c8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f0d6:	f003 0301 	and.w	r3, r3, #1
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d016      	beq.n	800f10e <ip4_input_accept+0x46>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	3304      	adds	r3, #4
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d011      	beq.n	800f10e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f0ea:	4b0b      	ldr	r3, [pc, #44]	@ (800f118 <ip4_input_accept+0x50>)
 800f0ec:	695a      	ldr	r2, [r3, #20]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	3304      	adds	r3, #4
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d008      	beq.n	800f10a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f0f8:	4b07      	ldr	r3, [pc, #28]	@ (800f118 <ip4_input_accept+0x50>)
 800f0fa:	695b      	ldr	r3, [r3, #20]
 800f0fc:	6879      	ldr	r1, [r7, #4]
 800f0fe:	4618      	mov	r0, r3
 800f100:	f000 fa26 	bl	800f550 <ip4_addr_isbroadcast_u32>
 800f104:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f106:	2b00      	cmp	r3, #0
 800f108:	d001      	beq.n	800f10e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f10a:	2301      	movs	r3, #1
 800f10c:	e000      	b.n	800f110 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f10e:	2300      	movs	r3, #0
}
 800f110:	4618      	mov	r0, r3
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	20004d10 	.word	0x20004d10

0800f11c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b088      	sub	sp, #32
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800f126:	2301      	movs	r3, #1
 800f128:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	091b      	lsrs	r3, r3, #4
 800f136:	b2db      	uxtb	r3, r3
 800f138:	2b04      	cmp	r3, #4
 800f13a:	d004      	beq.n	800f146 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f7f6 fe2f 	bl	8005da0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f142:	2300      	movs	r3, #0
 800f144:	e123      	b.n	800f38e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f146:	69fb      	ldr	r3, [r7, #28]
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	f003 030f 	and.w	r3, r3, #15
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	b2db      	uxtb	r3, r3
 800f154:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	885b      	ldrh	r3, [r3, #2]
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7f5 fad5 	bl	800470c <lwip_htons>
 800f162:	4603      	mov	r3, r0
 800f164:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	891b      	ldrh	r3, [r3, #8]
 800f16a:	8a3a      	ldrh	r2, [r7, #16]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d204      	bcs.n	800f17a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800f170:	8a3b      	ldrh	r3, [r7, #16]
 800f172:	4619      	mov	r1, r3
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f7f6 fc8d 	bl	8005a94 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	895b      	ldrh	r3, [r3, #10]
 800f17e:	8a7a      	ldrh	r2, [r7, #18]
 800f180:	429a      	cmp	r2, r3
 800f182:	d807      	bhi.n	800f194 <ip4_input+0x78>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	891b      	ldrh	r3, [r3, #8]
 800f188:	8a3a      	ldrh	r2, [r7, #16]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d802      	bhi.n	800f194 <ip4_input+0x78>
 800f18e:	8a7b      	ldrh	r3, [r7, #18]
 800f190:	2b13      	cmp	r3, #19
 800f192:	d804      	bhi.n	800f19e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f7f6 fe03 	bl	8005da0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f19a:	2300      	movs	r3, #0
 800f19c:	e0f7      	b.n	800f38e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	691b      	ldr	r3, [r3, #16]
 800f1a2:	4a7d      	ldr	r2, [pc, #500]	@ (800f398 <ip4_input+0x27c>)
 800f1a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f1a6:	69fb      	ldr	r3, [r7, #28]
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	4a7b      	ldr	r2, [pc, #492]	@ (800f398 <ip4_input+0x27c>)
 800f1ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f1ae:	4b7a      	ldr	r3, [pc, #488]	@ (800f398 <ip4_input+0x27c>)
 800f1b0:	695b      	ldr	r3, [r3, #20]
 800f1b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f1b6:	2be0      	cmp	r3, #224	@ 0xe0
 800f1b8:	d112      	bne.n	800f1e0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f1c0:	f003 0301 	and.w	r3, r3, #1
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d007      	beq.n	800f1da <ip4_input+0xbe>
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	3304      	adds	r3, #4
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d002      	beq.n	800f1da <ip4_input+0xbe>
      netif = inp;
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	61bb      	str	r3, [r7, #24]
 800f1d8:	e02a      	b.n	800f230 <ip4_input+0x114>
    } else {
      netif = NULL;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	61bb      	str	r3, [r7, #24]
 800f1de:	e027      	b.n	800f230 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f1e0:	6838      	ldr	r0, [r7, #0]
 800f1e2:	f7ff ff71 	bl	800f0c8 <ip4_input_accept>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d002      	beq.n	800f1f2 <ip4_input+0xd6>
      netif = inp;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	61bb      	str	r3, [r7, #24]
 800f1f0:	e01e      	b.n	800f230 <ip4_input+0x114>
    } else {
      netif = NULL;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f1f6:	4b68      	ldr	r3, [pc, #416]	@ (800f398 <ip4_input+0x27c>)
 800f1f8:	695b      	ldr	r3, [r3, #20]
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1fe:	d017      	beq.n	800f230 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f200:	4b66      	ldr	r3, [pc, #408]	@ (800f39c <ip4_input+0x280>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	61bb      	str	r3, [r7, #24]
 800f206:	e00e      	b.n	800f226 <ip4_input+0x10a>
          if (netif == inp) {
 800f208:	69ba      	ldr	r2, [r7, #24]
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d006      	beq.n	800f21e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f210:	69b8      	ldr	r0, [r7, #24]
 800f212:	f7ff ff59 	bl	800f0c8 <ip4_input_accept>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d108      	bne.n	800f22e <ip4_input+0x112>
 800f21c:	e000      	b.n	800f220 <ip4_input+0x104>
            continue;
 800f21e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f220:	69bb      	ldr	r3, [r7, #24]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	61bb      	str	r3, [r7, #24]
 800f226:	69bb      	ldr	r3, [r7, #24]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d1ed      	bne.n	800f208 <ip4_input+0xec>
 800f22c:	e000      	b.n	800f230 <ip4_input+0x114>
            break;
 800f22e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800f230:	69bb      	ldr	r3, [r7, #24]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d111      	bne.n	800f25a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800f236:	69fb      	ldr	r3, [r7, #28]
 800f238:	7a5b      	ldrb	r3, [r3, #9]
 800f23a:	2b11      	cmp	r3, #17
 800f23c:	d10d      	bne.n	800f25a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800f23e:	8a7b      	ldrh	r3, [r7, #18]
 800f240:	69fa      	ldr	r2, [r7, #28]
 800f242:	4413      	add	r3, r2
 800f244:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	885b      	ldrh	r3, [r3, #2]
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 800f250:	d103      	bne.n	800f25a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800f256:	2300      	movs	r3, #0
 800f258:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d017      	beq.n	800f290 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800f260:	4b4d      	ldr	r3, [pc, #308]	@ (800f398 <ip4_input+0x27c>)
 800f262:	691b      	ldr	r3, [r3, #16]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d013      	beq.n	800f290 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f268:	4b4b      	ldr	r3, [pc, #300]	@ (800f398 <ip4_input+0x27c>)
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	6839      	ldr	r1, [r7, #0]
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 f96e 	bl	800f550 <ip4_addr_isbroadcast_u32>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d105      	bne.n	800f286 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f27a:	4b47      	ldr	r3, [pc, #284]	@ (800f398 <ip4_input+0x27c>)
 800f27c:	691b      	ldr	r3, [r3, #16]
 800f27e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f282:	2be0      	cmp	r3, #224	@ 0xe0
 800f284:	d104      	bne.n	800f290 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7f6 fd8a 	bl	8005da0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f28c:	2300      	movs	r3, #0
 800f28e:	e07e      	b.n	800f38e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f290:	69bb      	ldr	r3, [r7, #24]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d104      	bne.n	800f2a0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7f6 fd82 	bl	8005da0 <pbuf_free>
    return ERR_OK;
 800f29c:	2300      	movs	r3, #0
 800f29e:	e076      	b.n	800f38e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	88db      	ldrh	r3, [r3, #6]
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d00b      	beq.n	800f2ca <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 fc92 	bl	800fbdc <ip4_reass>
 800f2b8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d101      	bne.n	800f2c4 <ip4_input+0x1a8>
      return ERR_OK;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	e064      	b.n	800f38e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f2ca:	4a33      	ldr	r2, [pc, #204]	@ (800f398 <ip4_input+0x27c>)
 800f2cc:	69bb      	ldr	r3, [r7, #24]
 800f2ce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f2d0:	4a31      	ldr	r2, [pc, #196]	@ (800f398 <ip4_input+0x27c>)
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f2d6:	4a30      	ldr	r2, [pc, #192]	@ (800f398 <ip4_input+0x27c>)
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	f003 030f 	and.w	r3, r3, #15
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	4b2a      	ldr	r3, [pc, #168]	@ (800f398 <ip4_input+0x27c>)
 800f2ee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f2f0:	8a7b      	ldrh	r3, [r7, #18]
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7f6 fccd 	bl	8005c94 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	7a5b      	ldrb	r3, [r3, #9]
 800f2fe:	2b11      	cmp	r3, #17
 800f300:	d006      	beq.n	800f310 <ip4_input+0x1f4>
 800f302:	2b11      	cmp	r3, #17
 800f304:	dc13      	bgt.n	800f32e <ip4_input+0x212>
 800f306:	2b01      	cmp	r3, #1
 800f308:	d00c      	beq.n	800f324 <ip4_input+0x208>
 800f30a:	2b06      	cmp	r3, #6
 800f30c:	d005      	beq.n	800f31a <ip4_input+0x1fe>
 800f30e:	e00e      	b.n	800f32e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f310:	6839      	ldr	r1, [r7, #0]
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7fc faf0 	bl	800b8f8 <udp_input>
        break;
 800f318:	e026      	b.n	800f368 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f31a:	6839      	ldr	r1, [r7, #0]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f7f8 fb79 	bl	8007a14 <tcp_input>
        break;
 800f322:	e021      	b.n	800f368 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f324:	6839      	ldr	r1, [r7, #0]
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f7ff fcd0 	bl	800eccc <icmp_input>
        break;
 800f32c:	e01c      	b.n	800f368 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f32e:	4b1a      	ldr	r3, [pc, #104]	@ (800f398 <ip4_input+0x27c>)
 800f330:	695b      	ldr	r3, [r3, #20]
 800f332:	69b9      	ldr	r1, [r7, #24]
 800f334:	4618      	mov	r0, r3
 800f336:	f000 f90b 	bl	800f550 <ip4_addr_isbroadcast_u32>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10f      	bne.n	800f360 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f340:	4b15      	ldr	r3, [pc, #84]	@ (800f398 <ip4_input+0x27c>)
 800f342:	695b      	ldr	r3, [r3, #20]
 800f344:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f348:	2be0      	cmp	r3, #224	@ 0xe0
 800f34a:	d009      	beq.n	800f360 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f34c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f350:	4619      	mov	r1, r3
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7f6 fd11 	bl	8005d7a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f358:	2102      	movs	r1, #2
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f7ff fdba 	bl	800eed4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7f6 fd1d 	bl	8005da0 <pbuf_free>
        break;
 800f366:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f368:	4b0b      	ldr	r3, [pc, #44]	@ (800f398 <ip4_input+0x27c>)
 800f36a:	2200      	movs	r2, #0
 800f36c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f36e:	4b0a      	ldr	r3, [pc, #40]	@ (800f398 <ip4_input+0x27c>)
 800f370:	2200      	movs	r2, #0
 800f372:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f374:	4b08      	ldr	r3, [pc, #32]	@ (800f398 <ip4_input+0x27c>)
 800f376:	2200      	movs	r2, #0
 800f378:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f37a:	4b07      	ldr	r3, [pc, #28]	@ (800f398 <ip4_input+0x27c>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f380:	4b05      	ldr	r3, [pc, #20]	@ (800f398 <ip4_input+0x27c>)
 800f382:	2200      	movs	r2, #0
 800f384:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f386:	4b04      	ldr	r3, [pc, #16]	@ (800f398 <ip4_input+0x27c>)
 800f388:	2200      	movs	r2, #0
 800f38a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f38c:	2300      	movs	r3, #0
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3720      	adds	r7, #32
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	20004d10 	.word	0x20004d10
 800f39c:	20008294 	.word	0x20008294

0800f3a0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b08a      	sub	sp, #40	@ 0x28
 800f3a4:	af04      	add	r7, sp, #16
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
 800f3ac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d009      	beq.n	800f3cc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d003      	beq.n	800f3c6 <ip4_output_if+0x26>
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d102      	bne.n	800f3cc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c8:	3304      	adds	r3, #4
 800f3ca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f3cc:	78fa      	ldrb	r2, [r7, #3]
 800f3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d0:	9302      	str	r3, [sp, #8]
 800f3d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f3d6:	9301      	str	r3, [sp, #4]
 800f3d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	4613      	mov	r3, r2
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	6979      	ldr	r1, [r7, #20]
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f000 f805 	bl	800f3f4 <ip4_output_if_src>
 800f3ea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3718      	adds	r7, #24
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b088      	sub	sp, #32
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	607a      	str	r2, [r7, #4]
 800f400:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	7b9b      	ldrb	r3, [r3, #14]
 800f406:	2b01      	cmp	r3, #1
 800f408:	d006      	beq.n	800f418 <ip4_output_if_src+0x24>
 800f40a:	4b4b      	ldr	r3, [pc, #300]	@ (800f538 <ip4_output_if_src+0x144>)
 800f40c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800f410:	494a      	ldr	r1, [pc, #296]	@ (800f53c <ip4_output_if_src+0x148>)
 800f412:	484b      	ldr	r0, [pc, #300]	@ (800f540 <ip4_output_if_src+0x14c>)
 800f414:	f001 f8f2 	bl	80105fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d060      	beq.n	800f4e0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f41e:	2314      	movs	r3, #20
 800f420:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f422:	2114      	movs	r1, #20
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f7f6 fc25 	bl	8005c74 <pbuf_add_header>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d002      	beq.n	800f436 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f430:	f06f 0301 	mvn.w	r3, #1
 800f434:	e07c      	b.n	800f530 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	895b      	ldrh	r3, [r3, #10]
 800f440:	2b13      	cmp	r3, #19
 800f442:	d806      	bhi.n	800f452 <ip4_output_if_src+0x5e>
 800f444:	4b3c      	ldr	r3, [pc, #240]	@ (800f538 <ip4_output_if_src+0x144>)
 800f446:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800f44a:	493e      	ldr	r1, [pc, #248]	@ (800f544 <ip4_output_if_src+0x150>)
 800f44c:	483c      	ldr	r0, [pc, #240]	@ (800f540 <ip4_output_if_src+0x14c>)
 800f44e:	f001 f8d5 	bl	80105fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	78fa      	ldrb	r2, [r7, #3]
 800f456:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f45e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f468:	8b7b      	ldrh	r3, [r7, #26]
 800f46a:	089b      	lsrs	r3, r3, #2
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f474:	b2da      	uxtb	r2, r3
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f480:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	891b      	ldrh	r3, [r3, #8]
 800f486:	4618      	mov	r0, r3
 800f488:	f7f5 f940 	bl	800470c <lwip_htons>
 800f48c:	4603      	mov	r3, r0
 800f48e:	461a      	mov	r2, r3
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	2200      	movs	r2, #0
 800f498:	719a      	strb	r2, [r3, #6]
 800f49a:	2200      	movs	r2, #0
 800f49c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f49e:	4b2a      	ldr	r3, [pc, #168]	@ (800f548 <ip4_output_if_src+0x154>)
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7f5 f932 	bl	800470c <lwip_htons>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f4b0:	4b25      	ldr	r3, [pc, #148]	@ (800f548 <ip4_output_if_src+0x154>)
 800f4b2:	881b      	ldrh	r3, [r3, #0]
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	4b23      	ldr	r3, [pc, #140]	@ (800f548 <ip4_output_if_src+0x154>)
 800f4ba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d104      	bne.n	800f4cc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f4c2:	4b22      	ldr	r3, [pc, #136]	@ (800f54c <ip4_output_if_src+0x158>)
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	60da      	str	r2, [r3, #12]
 800f4ca:	e003      	b.n	800f4d4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	729a      	strb	r2, [r3, #10]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	72da      	strb	r2, [r3, #11]
 800f4de:	e00f      	b.n	800f500 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	895b      	ldrh	r3, [r3, #10]
 800f4e4:	2b13      	cmp	r3, #19
 800f4e6:	d802      	bhi.n	800f4ee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f4e8:	f06f 0301 	mvn.w	r3, #1
 800f4ec:	e020      	b.n	800f530 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	691b      	ldr	r3, [r3, #16]
 800f4f8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f4fa:	f107 0314 	add.w	r3, r7, #20
 800f4fe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f504:	2b00      	cmp	r3, #0
 800f506:	d00c      	beq.n	800f522 <ip4_output_if_src+0x12e>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	891a      	ldrh	r2, [r3, #8]
 800f50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f50e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f510:	429a      	cmp	r2, r3
 800f512:	d906      	bls.n	800f522 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f518:	68f8      	ldr	r0, [r7, #12]
 800f51a:	f000 fd53 	bl	800ffc4 <ip4_frag>
 800f51e:	4603      	mov	r3, r0
 800f520:	e006      	b.n	800f530 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f524:	695b      	ldr	r3, [r3, #20]
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	68f9      	ldr	r1, [r7, #12]
 800f52a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f52c:	4798      	blx	r3
 800f52e:	4603      	mov	r3, r0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3720      	adds	r7, #32
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	08013e50 	.word	0x08013e50
 800f53c:	08013e84 	.word	0x08013e84
 800f540:	08013e90 	.word	0x08013e90
 800f544:	08013eb8 	.word	0x08013eb8
 800f548:	20008426 	.word	0x20008426
 800f54c:	080142a8 	.word	0x080142a8

0800f550 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f550:	b480      	push	{r7}
 800f552:	b085      	sub	sp, #20
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f564:	d002      	beq.n	800f56c <ip4_addr_isbroadcast_u32+0x1c>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d101      	bne.n	800f570 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f56c:	2301      	movs	r3, #1
 800f56e:	e02a      	b.n	800f5c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f576:	f003 0302 	and.w	r3, r3, #2
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d101      	bne.n	800f582 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f57e:	2300      	movs	r3, #0
 800f580:	e021      	b.n	800f5c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	3304      	adds	r3, #4
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d101      	bne.n	800f592 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f58e:	2300      	movs	r3, #0
 800f590:	e019      	b.n	800f5c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	3304      	adds	r3, #4
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	405a      	eors	r2, r3
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	3308      	adds	r3, #8
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	4013      	ands	r3, r2
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d10d      	bne.n	800f5c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	3308      	adds	r3, #8
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	43da      	mvns	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	3308      	adds	r3, #8
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d101      	bne.n	800f5c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	e000      	b.n	800f5c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f5c4:	2300      	movs	r3, #0
  }
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3714      	adds	r7, #20
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d0:	4770      	bx	lr
	...

0800f5d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f5de:	4b12      	ldr	r3, [pc, #72]	@ (800f628 <ip_reass_tmr+0x54>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f5e4:	e018      	b.n	800f618 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	7fdb      	ldrb	r3, [r3, #31]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00b      	beq.n	800f606 <ip_reass_tmr+0x32>
      r->timer--;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	7fdb      	ldrb	r3, [r3, #31]
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	b2da      	uxtb	r2, r3
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	60fb      	str	r3, [r7, #12]
 800f604:	e008      	b.n	800f618 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f610:	68b9      	ldr	r1, [r7, #8]
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 f80a 	bl	800f62c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d1e3      	bne.n	800f5e6 <ip_reass_tmr+0x12>
    }
  }
}
 800f61e:	bf00      	nop
 800f620:	bf00      	nop
 800f622:	3710      	adds	r7, #16
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	20008428 	.word	0x20008428

0800f62c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b088      	sub	sp, #32
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f636:	2300      	movs	r3, #0
 800f638:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f63a:	683a      	ldr	r2, [r7, #0]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d105      	bne.n	800f64e <ip_reass_free_complete_datagram+0x22>
 800f642:	4b45      	ldr	r3, [pc, #276]	@ (800f758 <ip_reass_free_complete_datagram+0x12c>)
 800f644:	22ab      	movs	r2, #171	@ 0xab
 800f646:	4945      	ldr	r1, [pc, #276]	@ (800f75c <ip_reass_free_complete_datagram+0x130>)
 800f648:	4845      	ldr	r0, [pc, #276]	@ (800f760 <ip_reass_free_complete_datagram+0x134>)
 800f64a:	f000 ffd7 	bl	80105fc <iprintf>
  if (prev != NULL) {
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d00a      	beq.n	800f66a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d005      	beq.n	800f66a <ip_reass_free_complete_datagram+0x3e>
 800f65e:	4b3e      	ldr	r3, [pc, #248]	@ (800f758 <ip_reass_free_complete_datagram+0x12c>)
 800f660:	22ad      	movs	r2, #173	@ 0xad
 800f662:	4940      	ldr	r1, [pc, #256]	@ (800f764 <ip_reass_free_complete_datagram+0x138>)
 800f664:	483e      	ldr	r0, [pc, #248]	@ (800f760 <ip_reass_free_complete_datagram+0x134>)
 800f666:	f000 ffc9 	bl	80105fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	889b      	ldrh	r3, [r3, #4]
 800f676:	b29b      	uxth	r3, r3
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d12a      	bne.n	800f6d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f68a:	69bb      	ldr	r3, [r7, #24]
 800f68c:	6858      	ldr	r0, [r3, #4]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	3308      	adds	r3, #8
 800f692:	2214      	movs	r2, #20
 800f694:	4619      	mov	r1, r3
 800f696:	f001 f88c 	bl	80107b2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f69a:	2101      	movs	r1, #1
 800f69c:	69b8      	ldr	r0, [r7, #24]
 800f69e:	f7ff fc29 	bl	800eef4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f6a2:	69b8      	ldr	r0, [r7, #24]
 800f6a4:	f7f6 fc04 	bl	8005eb0 <pbuf_clen>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f6ac:	8bfa      	ldrh	r2, [r7, #30]
 800f6ae:	8a7b      	ldrh	r3, [r7, #18]
 800f6b0:	4413      	add	r3, r2
 800f6b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f6b6:	db05      	blt.n	800f6c4 <ip_reass_free_complete_datagram+0x98>
 800f6b8:	4b27      	ldr	r3, [pc, #156]	@ (800f758 <ip_reass_free_complete_datagram+0x12c>)
 800f6ba:	22bc      	movs	r2, #188	@ 0xbc
 800f6bc:	492a      	ldr	r1, [pc, #168]	@ (800f768 <ip_reass_free_complete_datagram+0x13c>)
 800f6be:	4828      	ldr	r0, [pc, #160]	@ (800f760 <ip_reass_free_complete_datagram+0x134>)
 800f6c0:	f000 ff9c 	bl	80105fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f6c4:	8bfa      	ldrh	r2, [r7, #30]
 800f6c6:	8a7b      	ldrh	r3, [r7, #18]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f6cc:	69b8      	ldr	r0, [r7, #24]
 800f6ce:	f7f6 fb67 	bl	8005da0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f6d8:	e01f      	b.n	800f71a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f6da:	69bb      	ldr	r3, [r7, #24]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f7f6 fbe0 	bl	8005eb0 <pbuf_clen>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f6f4:	8bfa      	ldrh	r2, [r7, #30]
 800f6f6:	8a7b      	ldrh	r3, [r7, #18]
 800f6f8:	4413      	add	r3, r2
 800f6fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f6fe:	db05      	blt.n	800f70c <ip_reass_free_complete_datagram+0xe0>
 800f700:	4b15      	ldr	r3, [pc, #84]	@ (800f758 <ip_reass_free_complete_datagram+0x12c>)
 800f702:	22cc      	movs	r2, #204	@ 0xcc
 800f704:	4918      	ldr	r1, [pc, #96]	@ (800f768 <ip_reass_free_complete_datagram+0x13c>)
 800f706:	4816      	ldr	r0, [pc, #88]	@ (800f760 <ip_reass_free_complete_datagram+0x134>)
 800f708:	f000 ff78 	bl	80105fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f70c:	8bfa      	ldrh	r2, [r7, #30]
 800f70e:	8a7b      	ldrh	r3, [r7, #18]
 800f710:	4413      	add	r3, r2
 800f712:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f714:	68f8      	ldr	r0, [r7, #12]
 800f716:	f7f6 fb43 	bl	8005da0 <pbuf_free>
  while (p != NULL) {
 800f71a:	69bb      	ldr	r3, [r7, #24]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d1dc      	bne.n	800f6da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f720:	6839      	ldr	r1, [r7, #0]
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 f8c2 	bl	800f8ac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f728:	4b10      	ldr	r3, [pc, #64]	@ (800f76c <ip_reass_free_complete_datagram+0x140>)
 800f72a:	881b      	ldrh	r3, [r3, #0]
 800f72c:	8bfa      	ldrh	r2, [r7, #30]
 800f72e:	429a      	cmp	r2, r3
 800f730:	d905      	bls.n	800f73e <ip_reass_free_complete_datagram+0x112>
 800f732:	4b09      	ldr	r3, [pc, #36]	@ (800f758 <ip_reass_free_complete_datagram+0x12c>)
 800f734:	22d2      	movs	r2, #210	@ 0xd2
 800f736:	490e      	ldr	r1, [pc, #56]	@ (800f770 <ip_reass_free_complete_datagram+0x144>)
 800f738:	4809      	ldr	r0, [pc, #36]	@ (800f760 <ip_reass_free_complete_datagram+0x134>)
 800f73a:	f000 ff5f 	bl	80105fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f73e:	4b0b      	ldr	r3, [pc, #44]	@ (800f76c <ip_reass_free_complete_datagram+0x140>)
 800f740:	881a      	ldrh	r2, [r3, #0]
 800f742:	8bfb      	ldrh	r3, [r7, #30]
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	b29a      	uxth	r2, r3
 800f748:	4b08      	ldr	r3, [pc, #32]	@ (800f76c <ip_reass_free_complete_datagram+0x140>)
 800f74a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f74c:	8bfb      	ldrh	r3, [r7, #30]
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3720      	adds	r7, #32
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	08013ee8 	.word	0x08013ee8
 800f75c:	08013f24 	.word	0x08013f24
 800f760:	08013f30 	.word	0x08013f30
 800f764:	08013f58 	.word	0x08013f58
 800f768:	08013f6c 	.word	0x08013f6c
 800f76c:	2000842c 	.word	0x2000842c
 800f770:	08013f8c 	.word	0x08013f8c

0800f774 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b08a      	sub	sp, #40	@ 0x28
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f77e:	2300      	movs	r3, #0
 800f780:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f782:	2300      	movs	r3, #0
 800f784:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f786:	2300      	movs	r3, #0
 800f788:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f78a:	2300      	movs	r3, #0
 800f78c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f78e:	2300      	movs	r3, #0
 800f790:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f792:	4b28      	ldr	r3, [pc, #160]	@ (800f834 <ip_reass_remove_oldest_datagram+0xc0>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f798:	e030      	b.n	800f7fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79c:	695a      	ldr	r2, [r3, #20]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d10c      	bne.n	800f7c0 <ip_reass_remove_oldest_datagram+0x4c>
 800f7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a8:	699a      	ldr	r2, [r3, #24]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d106      	bne.n	800f7c0 <ip_reass_remove_oldest_datagram+0x4c>
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b4:	899a      	ldrh	r2, [r3, #12]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	889b      	ldrh	r3, [r3, #4]
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d014      	beq.n	800f7ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f7c6:	6a3b      	ldr	r3, [r7, #32]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d104      	bne.n	800f7d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	61bb      	str	r3, [r7, #24]
 800f7d4:	e009      	b.n	800f7ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d8:	7fda      	ldrb	r2, [r3, #31]
 800f7da:	6a3b      	ldr	r3, [r7, #32]
 800f7dc:	7fdb      	ldrb	r3, [r3, #31]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d803      	bhi.n	800f7ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f7e6:	69fb      	ldr	r3, [r7, #28]
 800f7e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d001      	beq.n	800f7f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d1cb      	bne.n	800f79a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f802:	6a3b      	ldr	r3, [r7, #32]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d008      	beq.n	800f81a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f808:	69b9      	ldr	r1, [r7, #24]
 800f80a:	6a38      	ldr	r0, [r7, #32]
 800f80c:	f7ff ff0e 	bl	800f62c <ip_reass_free_complete_datagram>
 800f810:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f812:	697a      	ldr	r2, [r7, #20]
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	4413      	add	r3, r2
 800f818:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f81a:	697a      	ldr	r2, [r7, #20]
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	429a      	cmp	r2, r3
 800f820:	da02      	bge.n	800f828 <ip_reass_remove_oldest_datagram+0xb4>
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	2b01      	cmp	r3, #1
 800f826:	dcac      	bgt.n	800f782 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f828:	697b      	ldr	r3, [r7, #20]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3728      	adds	r7, #40	@ 0x28
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	20008428 	.word	0x20008428

0800f838 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f842:	2004      	movs	r0, #4
 800f844:	f7f5 fbda 	bl	8004ffc <memp_malloc>
 800f848:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d110      	bne.n	800f872 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f7ff ff8e 	bl	800f774 <ip_reass_remove_oldest_datagram>
 800f858:	4602      	mov	r2, r0
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	4293      	cmp	r3, r2
 800f85e:	dc03      	bgt.n	800f868 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f860:	2004      	movs	r0, #4
 800f862:	f7f5 fbcb 	bl	8004ffc <memp_malloc>
 800f866:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d101      	bne.n	800f872 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f86e:	2300      	movs	r3, #0
 800f870:	e016      	b.n	800f8a0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f872:	2220      	movs	r2, #32
 800f874:	2100      	movs	r1, #0
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f000 ff25 	bl	80106c6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	220f      	movs	r2, #15
 800f880:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f882:	4b09      	ldr	r3, [pc, #36]	@ (800f8a8 <ip_reass_enqueue_new_datagram+0x70>)
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f88a:	4a07      	ldr	r2, [pc, #28]	@ (800f8a8 <ip_reass_enqueue_new_datagram+0x70>)
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	3308      	adds	r3, #8
 800f894:	2214      	movs	r2, #20
 800f896:	6879      	ldr	r1, [r7, #4]
 800f898:	4618      	mov	r0, r3
 800f89a:	f000 ff8a 	bl	80107b2 <memcpy>
  return ipr;
 800f89e:	68fb      	ldr	r3, [r7, #12]
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3710      	adds	r7, #16
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	20008428 	.word	0x20008428

0800f8ac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f8b6:	4b10      	ldr	r3, [pc, #64]	@ (800f8f8 <ip_reass_dequeue_datagram+0x4c>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	687a      	ldr	r2, [r7, #4]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d104      	bne.n	800f8ca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	4a0c      	ldr	r2, [pc, #48]	@ (800f8f8 <ip_reass_dequeue_datagram+0x4c>)
 800f8c6:	6013      	str	r3, [r2, #0]
 800f8c8:	e00d      	b.n	800f8e6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d106      	bne.n	800f8de <ip_reass_dequeue_datagram+0x32>
 800f8d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f8fc <ip_reass_dequeue_datagram+0x50>)
 800f8d2:	f240 1245 	movw	r2, #325	@ 0x145
 800f8d6:	490a      	ldr	r1, [pc, #40]	@ (800f900 <ip_reass_dequeue_datagram+0x54>)
 800f8d8:	480a      	ldr	r0, [pc, #40]	@ (800f904 <ip_reass_dequeue_datagram+0x58>)
 800f8da:	f000 fe8f 	bl	80105fc <iprintf>
    prev->next = ipr->next;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f8e6:	6879      	ldr	r1, [r7, #4]
 800f8e8:	2004      	movs	r0, #4
 800f8ea:	f7f5 fbf7 	bl	80050dc <memp_free>
}
 800f8ee:	bf00      	nop
 800f8f0:	3708      	adds	r7, #8
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	20008428 	.word	0x20008428
 800f8fc:	08013ee8 	.word	0x08013ee8
 800f900:	08013fb0 	.word	0x08013fb0
 800f904:	08013f30 	.word	0x08013f30

0800f908 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b08c      	sub	sp, #48	@ 0x30
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f914:	2300      	movs	r3, #0
 800f916:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f918:	2301      	movs	r3, #1
 800f91a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f922:	69fb      	ldr	r3, [r7, #28]
 800f924:	885b      	ldrh	r3, [r3, #2]
 800f926:	b29b      	uxth	r3, r3
 800f928:	4618      	mov	r0, r3
 800f92a:	f7f4 feef 	bl	800470c <lwip_htons>
 800f92e:	4603      	mov	r3, r0
 800f930:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	f003 030f 	and.w	r3, r3, #15
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f940:	7e7b      	ldrb	r3, [r7, #25]
 800f942:	b29b      	uxth	r3, r3
 800f944:	8b7a      	ldrh	r2, [r7, #26]
 800f946:	429a      	cmp	r2, r3
 800f948:	d202      	bcs.n	800f950 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f94a:	f04f 33ff 	mov.w	r3, #4294967295
 800f94e:	e135      	b.n	800fbbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f950:	7e7b      	ldrb	r3, [r7, #25]
 800f952:	b29b      	uxth	r3, r3
 800f954:	8b7a      	ldrh	r2, [r7, #26]
 800f956:	1ad3      	subs	r3, r2, r3
 800f958:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	88db      	ldrh	r3, [r3, #6]
 800f95e:	b29b      	uxth	r3, r3
 800f960:	4618      	mov	r0, r3
 800f962:	f7f4 fed3 	bl	800470c <lwip_htons>
 800f966:	4603      	mov	r3, r0
 800f968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	00db      	lsls	r3, r3, #3
 800f970:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800f978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f97a:	2200      	movs	r2, #0
 800f97c:	701a      	strb	r2, [r3, #0]
 800f97e:	2200      	movs	r2, #0
 800f980:	705a      	strb	r2, [r3, #1]
 800f982:	2200      	movs	r2, #0
 800f984:	709a      	strb	r2, [r3, #2]
 800f986:	2200      	movs	r2, #0
 800f988:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f98c:	8afa      	ldrh	r2, [r7, #22]
 800f98e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f990:	8afa      	ldrh	r2, [r7, #22]
 800f992:	8b7b      	ldrh	r3, [r7, #26]
 800f994:	4413      	add	r3, r2
 800f996:	b29a      	uxth	r2, r3
 800f998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f99a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f99e:	88db      	ldrh	r3, [r3, #6]
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	8afa      	ldrh	r2, [r7, #22]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d902      	bls.n	800f9ae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ac:	e106      	b.n	800fbbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f9b4:	e068      	b.n	800fa88 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9be:	889b      	ldrh	r3, [r3, #4]
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	889b      	ldrh	r3, [r3, #4]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d235      	bcs.n	800fa38 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d020      	beq.n	800fa1a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9da:	889b      	ldrh	r3, [r3, #4]
 800f9dc:	b29a      	uxth	r2, r3
 800f9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9e0:	88db      	ldrh	r3, [r3, #6]
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d307      	bcc.n	800f9f8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ea:	88db      	ldrh	r3, [r3, #6]
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	889b      	ldrh	r3, [r3, #4]
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d902      	bls.n	800f9fe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f9fc:	e0de      	b.n	800fbbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa00:	68ba      	ldr	r2, [r7, #8]
 800fa02:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa06:	88db      	ldrh	r3, [r3, #6]
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa0c:	889b      	ldrh	r3, [r3, #4]
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d03d      	beq.n	800fa90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fa14:	2300      	movs	r3, #0
 800fa16:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fa18:	e03a      	b.n	800fa90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fa1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa1c:	88db      	ldrh	r3, [r3, #6]
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	889b      	ldrh	r3, [r3, #4]
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d902      	bls.n	800fa30 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa2a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa2e:	e0c5      	b.n	800fbbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	68ba      	ldr	r2, [r7, #8]
 800fa34:	605a      	str	r2, [r3, #4]
      break;
 800fa36:	e02b      	b.n	800fa90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fa38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa3a:	889b      	ldrh	r3, [r3, #4]
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	889b      	ldrh	r3, [r3, #4]
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d102      	bne.n	800fa4e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa48:	f04f 33ff 	mov.w	r3, #4294967295
 800fa4c:	e0b6      	b.n	800fbbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fa4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa50:	889b      	ldrh	r3, [r3, #4]
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	88db      	ldrh	r3, [r3, #6]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d202      	bcs.n	800fa64 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa5e:	f04f 33ff 	mov.w	r3, #4294967295
 800fa62:	e0ab      	b.n	800fbbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fa64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d009      	beq.n	800fa7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fa6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa6c:	88db      	ldrh	r3, [r3, #6]
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	693b      	ldr	r3, [r7, #16]
 800fa72:	889b      	ldrh	r3, [r3, #4]
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d001      	beq.n	800fa7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800fa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d193      	bne.n	800f9b6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fa8e:	e000      	b.n	800fa92 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fa90:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d12d      	bne.n	800faf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fa98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d01c      	beq.n	800fad8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa0:	88db      	ldrh	r3, [r3, #6]
 800faa2:	b29a      	uxth	r2, r3
 800faa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faa6:	889b      	ldrh	r3, [r3, #4]
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	429a      	cmp	r2, r3
 800faac:	d906      	bls.n	800fabc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800faae:	4b45      	ldr	r3, [pc, #276]	@ (800fbc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fab0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800fab4:	4944      	ldr	r1, [pc, #272]	@ (800fbc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fab6:	4845      	ldr	r0, [pc, #276]	@ (800fbcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fab8:	f000 fda0 	bl	80105fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fabe:	68ba      	ldr	r2, [r7, #8]
 800fac0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac4:	88db      	ldrh	r3, [r3, #6]
 800fac6:	b29a      	uxth	r2, r3
 800fac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faca:	889b      	ldrh	r3, [r3, #4]
 800facc:	b29b      	uxth	r3, r3
 800face:	429a      	cmp	r2, r3
 800fad0:	d010      	beq.n	800faf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fad2:	2300      	movs	r3, #0
 800fad4:	623b      	str	r3, [r7, #32]
 800fad6:	e00d      	b.n	800faf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d006      	beq.n	800faee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fae0:	4b38      	ldr	r3, [pc, #224]	@ (800fbc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fae2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800fae6:	493a      	ldr	r1, [pc, #232]	@ (800fbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fae8:	4838      	ldr	r0, [pc, #224]	@ (800fbcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800faea:	f000 fd87 	bl	80105fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d105      	bne.n	800fb06 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	7f9b      	ldrb	r3, [r3, #30]
 800fafe:	f003 0301 	and.w	r3, r3, #1
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d059      	beq.n	800fbba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fb06:	6a3b      	ldr	r3, [r7, #32]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d04f      	beq.n	800fbac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d006      	beq.n	800fb22 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	889b      	ldrh	r3, [r3, #4]
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d002      	beq.n	800fb28 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fb22:	2300      	movs	r3, #0
 800fb24:	623b      	str	r3, [r7, #32]
 800fb26:	e041      	b.n	800fbac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb2a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800fb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800fb32:	e012      	b.n	800fb5a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800fb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb3c:	88db      	ldrh	r3, [r3, #6]
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb42:	889b      	ldrh	r3, [r3, #4]
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d002      	beq.n	800fb50 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	623b      	str	r3, [r7, #32]
            break;
 800fb4e:	e007      	b.n	800fb60 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb52:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800fb54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800fb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d1e9      	bne.n	800fb34 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fb60:	6a3b      	ldr	r3, [r7, #32]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d022      	beq.n	800fbac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d106      	bne.n	800fb7c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fb6e:	4b15      	ldr	r3, [pc, #84]	@ (800fbc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb70:	f240 12df 	movw	r2, #479	@ 0x1df
 800fb74:	4917      	ldr	r1, [pc, #92]	@ (800fbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fb76:	4815      	ldr	r0, [pc, #84]	@ (800fbcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fb78:	f000 fd40 	bl	80105fc <iprintf>
          LWIP_ASSERT("sanity check",
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d106      	bne.n	800fb96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fb88:	4b0e      	ldr	r3, [pc, #56]	@ (800fbc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb8a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800fb8e:	4911      	ldr	r1, [pc, #68]	@ (800fbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fb90:	480e      	ldr	r0, [pc, #56]	@ (800fbcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fb92:	f000 fd33 	bl	80105fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d006      	beq.n	800fbac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fb9e:	4b09      	ldr	r3, [pc, #36]	@ (800fbc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fba0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800fba4:	490c      	ldr	r1, [pc, #48]	@ (800fbd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fba6:	4809      	ldr	r0, [pc, #36]	@ (800fbcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fba8:	f000 fd28 	bl	80105fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	bf14      	ite	ne
 800fbb2:	2301      	movne	r3, #1
 800fbb4:	2300      	moveq	r3, #0
 800fbb6:	b2db      	uxtb	r3, r3
 800fbb8:	e000      	b.n	800fbbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fbba:	2300      	movs	r3, #0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3730      	adds	r7, #48	@ 0x30
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	08013ee8 	.word	0x08013ee8
 800fbc8:	08013fcc 	.word	0x08013fcc
 800fbcc:	08013f30 	.word	0x08013f30
 800fbd0:	08013fec 	.word	0x08013fec
 800fbd4:	08014024 	.word	0x08014024
 800fbd8:	08014034 	.word	0x08014034

0800fbdc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b08e      	sub	sp, #56	@ 0x38
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	f003 030f 	and.w	r3, r3, #15
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	009b      	lsls	r3, r3, #2
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	2b14      	cmp	r3, #20
 800fbfa:	f040 8171 	bne.w	800fee0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc00:	88db      	ldrh	r3, [r3, #6]
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7f4 fd81 	bl	800470c <lwip_htons>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	00db      	lsls	r3, r3, #3
 800fc14:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc18:	885b      	ldrh	r3, [r3, #2]
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7f4 fd75 	bl	800470c <lwip_htons>
 800fc22:	4603      	mov	r3, r0
 800fc24:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	f003 030f 	and.w	r3, r3, #15
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	009b      	lsls	r3, r3, #2
 800fc32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800fc36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	f0c0 8150 	bcc.w	800fee4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fc44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fc4c:	1ad3      	subs	r3, r2, r3
 800fc4e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7f6 f92d 	bl	8005eb0 <pbuf_clen>
 800fc56:	4603      	mov	r3, r0
 800fc58:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fc5a:	4b8c      	ldr	r3, [pc, #560]	@ (800fe8c <ip4_reass+0x2b0>)
 800fc5c:	881b      	ldrh	r3, [r3, #0]
 800fc5e:	461a      	mov	r2, r3
 800fc60:	8c3b      	ldrh	r3, [r7, #32]
 800fc62:	4413      	add	r3, r2
 800fc64:	2b0a      	cmp	r3, #10
 800fc66:	dd10      	ble.n	800fc8a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fc68:	8c3b      	ldrh	r3, [r7, #32]
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc6e:	f7ff fd81 	bl	800f774 <ip_reass_remove_oldest_datagram>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f000 8137 	beq.w	800fee8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fc7a:	4b84      	ldr	r3, [pc, #528]	@ (800fe8c <ip4_reass+0x2b0>)
 800fc7c:	881b      	ldrh	r3, [r3, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	8c3b      	ldrh	r3, [r7, #32]
 800fc82:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fc84:	2b0a      	cmp	r3, #10
 800fc86:	f300 812f 	bgt.w	800fee8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fc8a:	4b81      	ldr	r3, [pc, #516]	@ (800fe90 <ip4_reass+0x2b4>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800fc90:	e015      	b.n	800fcbe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc94:	695a      	ldr	r2, [r3, #20]
 800fc96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc98:	68db      	ldr	r3, [r3, #12]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d10c      	bne.n	800fcb8 <ip4_reass+0xdc>
 800fc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca0:	699a      	ldr	r2, [r3, #24]
 800fca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca4:	691b      	ldr	r3, [r3, #16]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d106      	bne.n	800fcb8 <ip4_reass+0xdc>
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcac:	899a      	ldrh	r2, [r3, #12]
 800fcae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcb0:	889b      	ldrh	r3, [r3, #4]
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d006      	beq.n	800fcc6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fcb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	633b      	str	r3, [r7, #48]	@ 0x30
 800fcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1e6      	bne.n	800fc92 <ip4_reass+0xb6>
 800fcc4:	e000      	b.n	800fcc8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fcc6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d109      	bne.n	800fce2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fcce:	8c3b      	ldrh	r3, [r7, #32]
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fcd4:	f7ff fdb0 	bl	800f838 <ip_reass_enqueue_new_datagram>
 800fcd8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fcda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d11c      	bne.n	800fd1a <ip4_reass+0x13e>
      goto nullreturn;
 800fce0:	e105      	b.n	800feee <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fce4:	88db      	ldrh	r3, [r3, #6]
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7f4 fd0f 	bl	800470c <lwip_htons>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d110      	bne.n	800fd1a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcfa:	89db      	ldrh	r3, [r3, #14]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7f4 fd05 	bl	800470c <lwip_htons>
 800fd02:	4603      	mov	r3, r0
 800fd04:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d006      	beq.n	800fd1a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0e:	3308      	adds	r3, #8
 800fd10:	2214      	movs	r2, #20
 800fd12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fd14:	4618      	mov	r0, r3
 800fd16:	f000 fd4c 	bl	80107b2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fd1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd1c:	88db      	ldrh	r3, [r3, #6]
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	f003 0320 	and.w	r3, r3, #32
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	bf0c      	ite	eq
 800fd28:	2301      	moveq	r3, #1
 800fd2a:	2300      	movne	r3, #0
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fd30:	69fb      	ldr	r3, [r7, #28]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d00e      	beq.n	800fd54 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800fd36:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800fd38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd3a:	4413      	add	r3, r2
 800fd3c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fd3e:	8b7a      	ldrh	r2, [r7, #26]
 800fd40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fd42:	429a      	cmp	r2, r3
 800fd44:	f0c0 80a0 	bcc.w	800fe88 <ip4_reass+0x2ac>
 800fd48:	8b7b      	ldrh	r3, [r7, #26]
 800fd4a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	f200 809a 	bhi.w	800fe88 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fd54:	69fa      	ldr	r2, [r7, #28]
 800fd56:	6879      	ldr	r1, [r7, #4]
 800fd58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fd5a:	f7ff fdd5 	bl	800f908 <ip_reass_chain_frag_into_datagram_and_validate>
 800fd5e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd66:	f000 809b 	beq.w	800fea0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fd6a:	4b48      	ldr	r3, [pc, #288]	@ (800fe8c <ip4_reass+0x2b0>)
 800fd6c:	881a      	ldrh	r2, [r3, #0]
 800fd6e:	8c3b      	ldrh	r3, [r7, #32]
 800fd70:	4413      	add	r3, r2
 800fd72:	b29a      	uxth	r2, r3
 800fd74:	4b45      	ldr	r3, [pc, #276]	@ (800fe8c <ip4_reass+0x2b0>)
 800fd76:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00d      	beq.n	800fd9a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fd7e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800fd80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd82:	4413      	add	r3, r2
 800fd84:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd88:	8a7a      	ldrh	r2, [r7, #18]
 800fd8a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8e:	7f9b      	ldrb	r3, [r3, #30]
 800fd90:	f043 0301 	orr.w	r3, r3, #1
 800fd94:	b2da      	uxtb	r2, r3
 800fd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd98:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d171      	bne.n	800fe84 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fda2:	8b9b      	ldrh	r3, [r3, #28]
 800fda4:	3314      	adds	r3, #20
 800fda6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdaa:	685b      	ldr	r3, [r3, #4]
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fdb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fdba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdbc:	3308      	adds	r3, #8
 800fdbe:	2214      	movs	r2, #20
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdc4:	f000 fcf5 	bl	80107b2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fdc8:	8a3b      	ldrh	r3, [r7, #16]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7f4 fc9e 	bl	800470c <lwip_htons>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdda:	2200      	movs	r2, #0
 800fddc:	719a      	strb	r2, [r3, #6]
 800fdde:	2200      	movs	r2, #0
 800fde0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde4:	2200      	movs	r2, #0
 800fde6:	729a      	strb	r2, [r3, #10]
 800fde8:	2200      	movs	r2, #0
 800fdea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fdf2:	e00d      	b.n	800fe10 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fdfa:	2114      	movs	r1, #20
 800fdfc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fdfe:	f7f5 ff49 	bl	8005c94 <pbuf_remove_header>
      pbuf_cat(p, r);
 800fe02:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7f6 f88d 	bl	8005f24 <pbuf_cat>
      r = iprh->next_pbuf;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800fe10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d1ee      	bne.n	800fdf4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fe16:	4b1e      	ldr	r3, [pc, #120]	@ (800fe90 <ip4_reass+0x2b4>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d102      	bne.n	800fe26 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fe20:	2300      	movs	r3, #0
 800fe22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe24:	e010      	b.n	800fe48 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fe26:	4b1a      	ldr	r3, [pc, #104]	@ (800fe90 <ip4_reass+0x2b4>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe2c:	e007      	b.n	800fe3e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fe2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d006      	beq.n	800fe46 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fe38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d1f4      	bne.n	800fe2e <ip4_reass+0x252>
 800fe44:	e000      	b.n	800fe48 <ip4_reass+0x26c>
          break;
 800fe46:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fe48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fe4c:	f7ff fd2e 	bl	800f8ac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7f6 f82d 	bl	8005eb0 <pbuf_clen>
 800fe56:	4603      	mov	r3, r0
 800fe58:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fe5a:	4b0c      	ldr	r3, [pc, #48]	@ (800fe8c <ip4_reass+0x2b0>)
 800fe5c:	881b      	ldrh	r3, [r3, #0]
 800fe5e:	8c3a      	ldrh	r2, [r7, #32]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d906      	bls.n	800fe72 <ip4_reass+0x296>
 800fe64:	4b0b      	ldr	r3, [pc, #44]	@ (800fe94 <ip4_reass+0x2b8>)
 800fe66:	f240 229b 	movw	r2, #667	@ 0x29b
 800fe6a:	490b      	ldr	r1, [pc, #44]	@ (800fe98 <ip4_reass+0x2bc>)
 800fe6c:	480b      	ldr	r0, [pc, #44]	@ (800fe9c <ip4_reass+0x2c0>)
 800fe6e:	f000 fbc5 	bl	80105fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fe72:	4b06      	ldr	r3, [pc, #24]	@ (800fe8c <ip4_reass+0x2b0>)
 800fe74:	881a      	ldrh	r2, [r3, #0]
 800fe76:	8c3b      	ldrh	r3, [r7, #32]
 800fe78:	1ad3      	subs	r3, r2, r3
 800fe7a:	b29a      	uxth	r2, r3
 800fe7c:	4b03      	ldr	r3, [pc, #12]	@ (800fe8c <ip4_reass+0x2b0>)
 800fe7e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	e038      	b.n	800fef6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fe84:	2300      	movs	r3, #0
 800fe86:	e036      	b.n	800fef6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800fe88:	bf00      	nop
 800fe8a:	e00a      	b.n	800fea2 <ip4_reass+0x2c6>
 800fe8c:	2000842c 	.word	0x2000842c
 800fe90:	20008428 	.word	0x20008428
 800fe94:	08013ee8 	.word	0x08013ee8
 800fe98:	08014058 	.word	0x08014058
 800fe9c:	08013f30 	.word	0x08013f30
    goto nullreturn_ipr;
 800fea0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d106      	bne.n	800feb6 <ip4_reass+0x2da>
 800fea8:	4b15      	ldr	r3, [pc, #84]	@ (800ff00 <ip4_reass+0x324>)
 800feaa:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800feae:	4915      	ldr	r1, [pc, #84]	@ (800ff04 <ip4_reass+0x328>)
 800feb0:	4815      	ldr	r0, [pc, #84]	@ (800ff08 <ip4_reass+0x32c>)
 800feb2:	f000 fba3 	bl	80105fc <iprintf>
  if (ipr->p == NULL) {
 800feb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d116      	bne.n	800feec <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800febe:	4b13      	ldr	r3, [pc, #76]	@ (800ff0c <ip4_reass+0x330>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d006      	beq.n	800fed6 <ip4_reass+0x2fa>
 800fec8:	4b0d      	ldr	r3, [pc, #52]	@ (800ff00 <ip4_reass+0x324>)
 800feca:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800fece:	4910      	ldr	r1, [pc, #64]	@ (800ff10 <ip4_reass+0x334>)
 800fed0:	480d      	ldr	r0, [pc, #52]	@ (800ff08 <ip4_reass+0x32c>)
 800fed2:	f000 fb93 	bl	80105fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fed6:	2100      	movs	r1, #0
 800fed8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800feda:	f7ff fce7 	bl	800f8ac <ip_reass_dequeue_datagram>
 800fede:	e006      	b.n	800feee <ip4_reass+0x312>
    goto nullreturn;
 800fee0:	bf00      	nop
 800fee2:	e004      	b.n	800feee <ip4_reass+0x312>
    goto nullreturn;
 800fee4:	bf00      	nop
 800fee6:	e002      	b.n	800feee <ip4_reass+0x312>
      goto nullreturn;
 800fee8:	bf00      	nop
 800feea:	e000      	b.n	800feee <ip4_reass+0x312>
  }

nullreturn:
 800feec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f7f5 ff56 	bl	8005da0 <pbuf_free>
  return NULL;
 800fef4:	2300      	movs	r3, #0
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3738      	adds	r7, #56	@ 0x38
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	08013ee8 	.word	0x08013ee8
 800ff04:	08014074 	.word	0x08014074
 800ff08:	08013f30 	.word	0x08013f30
 800ff0c:	20008428 	.word	0x20008428
 800ff10:	08014080 	.word	0x08014080

0800ff14 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ff18:	2005      	movs	r0, #5
 800ff1a:	f7f5 f86f 	bl	8004ffc <memp_malloc>
 800ff1e:	4603      	mov	r3, r0
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d106      	bne.n	800ff40 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ff32:	4b07      	ldr	r3, [pc, #28]	@ (800ff50 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ff34:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800ff38:	4906      	ldr	r1, [pc, #24]	@ (800ff54 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ff3a:	4807      	ldr	r0, [pc, #28]	@ (800ff58 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ff3c:	f000 fb5e 	bl	80105fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ff40:	6879      	ldr	r1, [r7, #4]
 800ff42:	2005      	movs	r0, #5
 800ff44:	f7f5 f8ca 	bl	80050dc <memp_free>
}
 800ff48:	bf00      	nop
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	08013ee8 	.word	0x08013ee8
 800ff54:	080140a0 	.word	0x080140a0
 800ff58:	08013f30 	.word	0x08013f30

0800ff5c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d106      	bne.n	800ff7c <ipfrag_free_pbuf_custom+0x20>
 800ff6e:	4b11      	ldr	r3, [pc, #68]	@ (800ffb4 <ipfrag_free_pbuf_custom+0x58>)
 800ff70:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800ff74:	4910      	ldr	r1, [pc, #64]	@ (800ffb8 <ipfrag_free_pbuf_custom+0x5c>)
 800ff76:	4811      	ldr	r0, [pc, #68]	@ (800ffbc <ipfrag_free_pbuf_custom+0x60>)
 800ff78:	f000 fb40 	bl	80105fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d006      	beq.n	800ff92 <ipfrag_free_pbuf_custom+0x36>
 800ff84:	4b0b      	ldr	r3, [pc, #44]	@ (800ffb4 <ipfrag_free_pbuf_custom+0x58>)
 800ff86:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800ff8a:	490d      	ldr	r1, [pc, #52]	@ (800ffc0 <ipfrag_free_pbuf_custom+0x64>)
 800ff8c:	480b      	ldr	r0, [pc, #44]	@ (800ffbc <ipfrag_free_pbuf_custom+0x60>)
 800ff8e:	f000 fb35 	bl	80105fc <iprintf>
  if (pcr->original != NULL) {
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	695b      	ldr	r3, [r3, #20]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d004      	beq.n	800ffa4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	695b      	ldr	r3, [r3, #20]
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7f5 fefe 	bl	8005da0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ffa4:	68f8      	ldr	r0, [r7, #12]
 800ffa6:	f7ff ffbd 	bl	800ff24 <ip_frag_free_pbuf_custom_ref>
}
 800ffaa:	bf00      	nop
 800ffac:	3710      	adds	r7, #16
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
 800ffb2:	bf00      	nop
 800ffb4:	08013ee8 	.word	0x08013ee8
 800ffb8:	080140ac 	.word	0x080140ac
 800ffbc:	08013f30 	.word	0x08013f30
 800ffc0:	080140b8 	.word	0x080140b8

0800ffc4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b094      	sub	sp, #80	@ 0x50
 800ffc8:	af02      	add	r7, sp, #8
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ffda:	3b14      	subs	r3, #20
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	da00      	bge.n	800ffe2 <ip4_frag+0x1e>
 800ffe0:	3307      	adds	r3, #7
 800ffe2:	10db      	asrs	r3, r3, #3
 800ffe4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ffe6:	2314      	movs	r3, #20
 800ffe8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800fff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fff2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	f003 030f 	and.w	r3, r3, #15
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	b2db      	uxtb	r3, r3
 8010002:	2b14      	cmp	r3, #20
 8010004:	d002      	beq.n	801000c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010006:	f06f 0305 	mvn.w	r3, #5
 801000a:	e110      	b.n	801022e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	895b      	ldrh	r3, [r3, #10]
 8010010:	2b13      	cmp	r3, #19
 8010012:	d809      	bhi.n	8010028 <ip4_frag+0x64>
 8010014:	4b88      	ldr	r3, [pc, #544]	@ (8010238 <ip4_frag+0x274>)
 8010016:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801001a:	4988      	ldr	r1, [pc, #544]	@ (801023c <ip4_frag+0x278>)
 801001c:	4888      	ldr	r0, [pc, #544]	@ (8010240 <ip4_frag+0x27c>)
 801001e:	f000 faed 	bl	80105fc <iprintf>
 8010022:	f06f 0305 	mvn.w	r3, #5
 8010026:	e102      	b.n	801022e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801002a:	88db      	ldrh	r3, [r3, #6]
 801002c:	b29b      	uxth	r3, r3
 801002e:	4618      	mov	r0, r3
 8010030:	f7f4 fb6c 	bl	800470c <lwip_htons>
 8010034:	4603      	mov	r3, r0
 8010036:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8010038:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801003a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801003e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010042:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010048:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	891b      	ldrh	r3, [r3, #8]
 801004e:	3b14      	subs	r3, #20
 8010050:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8010054:	e0e1      	b.n	801021a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010056:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010058:	00db      	lsls	r3, r3, #3
 801005a:	b29b      	uxth	r3, r3
 801005c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010060:	4293      	cmp	r3, r2
 8010062:	bf28      	it	cs
 8010064:	4613      	movcs	r3, r2
 8010066:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010068:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801006c:	2114      	movs	r1, #20
 801006e:	200e      	movs	r0, #14
 8010070:	f7f5 fbb2 	bl	80057d8 <pbuf_alloc>
 8010074:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8010076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010078:	2b00      	cmp	r3, #0
 801007a:	f000 80d5 	beq.w	8010228 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801007e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010080:	895b      	ldrh	r3, [r3, #10]
 8010082:	2b13      	cmp	r3, #19
 8010084:	d806      	bhi.n	8010094 <ip4_frag+0xd0>
 8010086:	4b6c      	ldr	r3, [pc, #432]	@ (8010238 <ip4_frag+0x274>)
 8010088:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801008c:	496d      	ldr	r1, [pc, #436]	@ (8010244 <ip4_frag+0x280>)
 801008e:	486c      	ldr	r0, [pc, #432]	@ (8010240 <ip4_frag+0x27c>)
 8010090:	f000 fab4 	bl	80105fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	2214      	movs	r2, #20
 801009a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801009c:	4618      	mov	r0, r3
 801009e:	f000 fb88 	bl	80107b2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80100a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80100a8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80100aa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80100ae:	e064      	b.n	801017a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	895a      	ldrh	r2, [r3, #10]
 80100b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	895b      	ldrh	r3, [r3, #10]
 80100be:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d906      	bls.n	80100d2 <ip4_frag+0x10e>
 80100c4:	4b5c      	ldr	r3, [pc, #368]	@ (8010238 <ip4_frag+0x274>)
 80100c6:	f240 322d 	movw	r2, #813	@ 0x32d
 80100ca:	495f      	ldr	r1, [pc, #380]	@ (8010248 <ip4_frag+0x284>)
 80100cc:	485c      	ldr	r0, [pc, #368]	@ (8010240 <ip4_frag+0x27c>)
 80100ce:	f000 fa95 	bl	80105fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80100d2:	8bfa      	ldrh	r2, [r7, #30]
 80100d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80100d8:	4293      	cmp	r3, r2
 80100da:	bf28      	it	cs
 80100dc:	4613      	movcs	r3, r2
 80100de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80100e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d105      	bne.n	80100f6 <ip4_frag+0x132>
        poff = 0;
 80100ea:	2300      	movs	r3, #0
 80100ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	60fb      	str	r3, [r7, #12]
        continue;
 80100f4:	e041      	b.n	801017a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80100f6:	f7ff ff0d 	bl	800ff14 <ip_frag_alloc_pbuf_custom_ref>
 80100fa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d103      	bne.n	801010a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010102:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010104:	f7f5 fe4c 	bl	8005da0 <pbuf_free>
        goto memerr;
 8010108:	e08f      	b.n	801022a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801010a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010110:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010112:	4413      	add	r3, r2
 8010114:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8010118:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801011c:	9201      	str	r2, [sp, #4]
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	4603      	mov	r3, r0
 8010122:	2241      	movs	r2, #65	@ 0x41
 8010124:	2000      	movs	r0, #0
 8010126:	f7f5 fc81 	bl	8005a2c <pbuf_alloced_custom>
 801012a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d106      	bne.n	8010140 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010132:	69b8      	ldr	r0, [r7, #24]
 8010134:	f7ff fef6 	bl	800ff24 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010138:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801013a:	f7f5 fe31 	bl	8005da0 <pbuf_free>
        goto memerr;
 801013e:	e074      	b.n	801022a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f7f5 fecd 	bl	8005ee0 <pbuf_ref>
      pcr->original = p;
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	4a3f      	ldr	r2, [pc, #252]	@ (801024c <ip4_frag+0x288>)
 8010150:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010152:	6979      	ldr	r1, [r7, #20]
 8010154:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010156:	f7f5 fee5 	bl	8005f24 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801015a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801015e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010162:	1ad3      	subs	r3, r2, r3
 8010164:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8010168:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801016c:	2b00      	cmp	r3, #0
 801016e:	d004      	beq.n	801017a <ip4_frag+0x1b6>
        poff = 0;
 8010170:	2300      	movs	r3, #0
 8010172:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801017a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801017e:	2b00      	cmp	r3, #0
 8010180:	d196      	bne.n	80100b0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010182:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010184:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010188:	4413      	add	r3, r2
 801018a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010190:	f1a3 0213 	sub.w	r2, r3, #19
 8010194:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010198:	429a      	cmp	r2, r3
 801019a:	bfcc      	ite	gt
 801019c:	2301      	movgt	r3, #1
 801019e:	2300      	movle	r3, #0
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80101a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80101a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80101ac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80101ae:	6a3b      	ldr	r3, [r7, #32]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d002      	beq.n	80101ba <ip4_frag+0x1f6>
 80101b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d003      	beq.n	80101c2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80101ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80101bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80101c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80101c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7f4 faa1 	bl	800470c <lwip_htons>
 80101ca:	4603      	mov	r3, r0
 80101cc:	461a      	mov	r2, r3
 80101ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80101d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80101d4:	3314      	adds	r3, #20
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	4618      	mov	r0, r3
 80101da:	f7f4 fa97 	bl	800470c <lwip_htons>
 80101de:	4603      	mov	r3, r0
 80101e0:	461a      	mov	r2, r3
 80101e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80101e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e8:	2200      	movs	r2, #0
 80101ea:	729a      	strb	r2, [r3, #10]
 80101ec:	2200      	movs	r2, #0
 80101ee:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	695b      	ldr	r3, [r3, #20]
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80101f8:	68b8      	ldr	r0, [r7, #8]
 80101fa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80101fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80101fe:	f7f5 fdcf 	bl	8005da0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010202:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010206:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010208:	1ad3      	subs	r3, r2, r3
 801020a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801020e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8010212:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010214:	4413      	add	r3, r2
 8010216:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801021a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801021e:	2b00      	cmp	r3, #0
 8010220:	f47f af19 	bne.w	8010056 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010224:	2300      	movs	r3, #0
 8010226:	e002      	b.n	801022e <ip4_frag+0x26a>
      goto memerr;
 8010228:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801022a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801022e:	4618      	mov	r0, r3
 8010230:	3748      	adds	r7, #72	@ 0x48
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	08013ee8 	.word	0x08013ee8
 801023c:	080140c4 	.word	0x080140c4
 8010240:	08013f30 	.word	0x08013f30
 8010244:	080140e0 	.word	0x080140e0
 8010248:	08014100 	.word	0x08014100
 801024c:	0800ff5d 	.word	0x0800ff5d

08010250 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b086      	sub	sp, #24
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801025a:	230e      	movs	r3, #14
 801025c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	895b      	ldrh	r3, [r3, #10]
 8010262:	2b0e      	cmp	r3, #14
 8010264:	d96e      	bls.n	8010344 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	7bdb      	ldrb	r3, [r3, #15]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d106      	bne.n	801027c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010274:	3301      	adds	r3, #1
 8010276:	b2da      	uxtb	r2, r3
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	7b1a      	ldrb	r2, [r3, #12]
 8010286:	7b5b      	ldrb	r3, [r3, #13]
 8010288:	021b      	lsls	r3, r3, #8
 801028a:	4313      	orrs	r3, r2
 801028c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	f003 0301 	and.w	r3, r3, #1
 8010296:	2b00      	cmp	r3, #0
 8010298:	d023      	beq.n	80102e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d10f      	bne.n	80102c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	785b      	ldrb	r3, [r3, #1]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d11b      	bne.n	80102e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80102ae:	2b5e      	cmp	r3, #94	@ 0x5e
 80102b0:	d117      	bne.n	80102e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	7b5b      	ldrb	r3, [r3, #13]
 80102b6:	f043 0310 	orr.w	r3, r3, #16
 80102ba:	b2da      	uxtb	r2, r3
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	735a      	strb	r2, [r3, #13]
 80102c0:	e00f      	b.n	80102e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	2206      	movs	r2, #6
 80102c6:	4928      	ldr	r1, [pc, #160]	@ (8010368 <ethernet_input+0x118>)
 80102c8:	4618      	mov	r0, r3
 80102ca:	f000 f9ec 	bl	80106a6 <memcmp>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d106      	bne.n	80102e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	7b5b      	ldrb	r3, [r3, #13]
 80102d8:	f043 0308 	orr.w	r3, r3, #8
 80102dc:	b2da      	uxtb	r2, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80102e2:	89fb      	ldrh	r3, [r7, #14]
 80102e4:	2b08      	cmp	r3, #8
 80102e6:	d003      	beq.n	80102f0 <ethernet_input+0xa0>
 80102e8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80102ec:	d014      	beq.n	8010318 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80102ee:	e032      	b.n	8010356 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80102f6:	f003 0308 	and.w	r3, r3, #8
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d024      	beq.n	8010348 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80102fe:	8afb      	ldrh	r3, [r7, #22]
 8010300:	4619      	mov	r1, r3
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f7f5 fcc6 	bl	8005c94 <pbuf_remove_header>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d11e      	bne.n	801034c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801030e:	6839      	ldr	r1, [r7, #0]
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7fe ff03 	bl	800f11c <ip4_input>
      break;
 8010316:	e013      	b.n	8010340 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801031e:	f003 0308 	and.w	r3, r3, #8
 8010322:	2b00      	cmp	r3, #0
 8010324:	d014      	beq.n	8010350 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010326:	8afb      	ldrh	r3, [r7, #22]
 8010328:	4619      	mov	r1, r3
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7f5 fcb2 	bl	8005c94 <pbuf_remove_header>
 8010330:	4603      	mov	r3, r0
 8010332:	2b00      	cmp	r3, #0
 8010334:	d10e      	bne.n	8010354 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010336:	6839      	ldr	r1, [r7, #0]
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f7fe f89f 	bl	800e47c <etharp_input>
      break;
 801033e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010340:	2300      	movs	r3, #0
 8010342:	e00c      	b.n	801035e <ethernet_input+0x10e>
    goto free_and_return;
 8010344:	bf00      	nop
 8010346:	e006      	b.n	8010356 <ethernet_input+0x106>
        goto free_and_return;
 8010348:	bf00      	nop
 801034a:	e004      	b.n	8010356 <ethernet_input+0x106>
        goto free_and_return;
 801034c:	bf00      	nop
 801034e:	e002      	b.n	8010356 <ethernet_input+0x106>
        goto free_and_return;
 8010350:	bf00      	nop
 8010352:	e000      	b.n	8010356 <ethernet_input+0x106>
        goto free_and_return;
 8010354:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f7f5 fd22 	bl	8005da0 <pbuf_free>
  return ERR_OK;
 801035c:	2300      	movs	r3, #0
}
 801035e:	4618      	mov	r0, r3
 8010360:	3718      	adds	r7, #24
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	080142b0 	.word	0x080142b0

0801036c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801036c:	b580      	push	{r7, lr}
 801036e:	b086      	sub	sp, #24
 8010370:	af00      	add	r7, sp, #0
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	607a      	str	r2, [r7, #4]
 8010378:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801037a:	8c3b      	ldrh	r3, [r7, #32]
 801037c:	4618      	mov	r0, r3
 801037e:	f7f4 f9c5 	bl	800470c <lwip_htons>
 8010382:	4603      	mov	r3, r0
 8010384:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010386:	210e      	movs	r1, #14
 8010388:	68b8      	ldr	r0, [r7, #8]
 801038a:	f7f5 fc73 	bl	8005c74 <pbuf_add_header>
 801038e:	4603      	mov	r3, r0
 8010390:	2b00      	cmp	r3, #0
 8010392:	d125      	bne.n	80103e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	8afa      	ldrh	r2, [r7, #22]
 801039e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	2206      	movs	r2, #6
 80103a4:	6839      	ldr	r1, [r7, #0]
 80103a6:	4618      	mov	r0, r3
 80103a8:	f000 fa03 	bl	80107b2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	3306      	adds	r3, #6
 80103b0:	2206      	movs	r2, #6
 80103b2:	6879      	ldr	r1, [r7, #4]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f000 f9fc 	bl	80107b2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80103c0:	2b06      	cmp	r3, #6
 80103c2:	d006      	beq.n	80103d2 <ethernet_output+0x66>
 80103c4:	4b0a      	ldr	r3, [pc, #40]	@ (80103f0 <ethernet_output+0x84>)
 80103c6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80103ca:	490a      	ldr	r1, [pc, #40]	@ (80103f4 <ethernet_output+0x88>)
 80103cc:	480a      	ldr	r0, [pc, #40]	@ (80103f8 <ethernet_output+0x8c>)
 80103ce:	f000 f915 	bl	80105fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	699b      	ldr	r3, [r3, #24]
 80103d6:	68b9      	ldr	r1, [r7, #8]
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	4798      	blx	r3
 80103dc:	4603      	mov	r3, r0
 80103de:	e002      	b.n	80103e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80103e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80103e2:	f06f 0301 	mvn.w	r3, #1
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3718      	adds	r7, #24
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	08014110 	.word	0x08014110
 80103f4:	08014148 	.word	0x08014148
 80103f8:	0801417c 	.word	0x0801417c

080103fc <rand>:
 80103fc:	4b16      	ldr	r3, [pc, #88]	@ (8010458 <rand+0x5c>)
 80103fe:	b510      	push	{r4, lr}
 8010400:	681c      	ldr	r4, [r3, #0]
 8010402:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010404:	b9b3      	cbnz	r3, 8010434 <rand+0x38>
 8010406:	2018      	movs	r0, #24
 8010408:	f000 fa4a 	bl	80108a0 <malloc>
 801040c:	4602      	mov	r2, r0
 801040e:	6320      	str	r0, [r4, #48]	@ 0x30
 8010410:	b920      	cbnz	r0, 801041c <rand+0x20>
 8010412:	4b12      	ldr	r3, [pc, #72]	@ (801045c <rand+0x60>)
 8010414:	4812      	ldr	r0, [pc, #72]	@ (8010460 <rand+0x64>)
 8010416:	2152      	movs	r1, #82	@ 0x52
 8010418:	f000 f9da 	bl	80107d0 <__assert_func>
 801041c:	4911      	ldr	r1, [pc, #68]	@ (8010464 <rand+0x68>)
 801041e:	4b12      	ldr	r3, [pc, #72]	@ (8010468 <rand+0x6c>)
 8010420:	e9c0 1300 	strd	r1, r3, [r0]
 8010424:	4b11      	ldr	r3, [pc, #68]	@ (801046c <rand+0x70>)
 8010426:	6083      	str	r3, [r0, #8]
 8010428:	230b      	movs	r3, #11
 801042a:	8183      	strh	r3, [r0, #12]
 801042c:	2100      	movs	r1, #0
 801042e:	2001      	movs	r0, #1
 8010430:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010434:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010436:	480e      	ldr	r0, [pc, #56]	@ (8010470 <rand+0x74>)
 8010438:	690b      	ldr	r3, [r1, #16]
 801043a:	694c      	ldr	r4, [r1, #20]
 801043c:	4a0d      	ldr	r2, [pc, #52]	@ (8010474 <rand+0x78>)
 801043e:	4358      	muls	r0, r3
 8010440:	fb02 0004 	mla	r0, r2, r4, r0
 8010444:	fba3 3202 	umull	r3, r2, r3, r2
 8010448:	3301      	adds	r3, #1
 801044a:	eb40 0002 	adc.w	r0, r0, r2
 801044e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010452:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010456:	bd10      	pop	{r4, pc}
 8010458:	2000003c 	.word	0x2000003c
 801045c:	080142be 	.word	0x080142be
 8010460:	080142d5 	.word	0x080142d5
 8010464:	abcd330e 	.word	0xabcd330e
 8010468:	e66d1234 	.word	0xe66d1234
 801046c:	0005deec 	.word	0x0005deec
 8010470:	5851f42d 	.word	0x5851f42d
 8010474:	4c957f2d 	.word	0x4c957f2d

08010478 <std>:
 8010478:	2300      	movs	r3, #0
 801047a:	b510      	push	{r4, lr}
 801047c:	4604      	mov	r4, r0
 801047e:	e9c0 3300 	strd	r3, r3, [r0]
 8010482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010486:	6083      	str	r3, [r0, #8]
 8010488:	8181      	strh	r1, [r0, #12]
 801048a:	6643      	str	r3, [r0, #100]	@ 0x64
 801048c:	81c2      	strh	r2, [r0, #14]
 801048e:	6183      	str	r3, [r0, #24]
 8010490:	4619      	mov	r1, r3
 8010492:	2208      	movs	r2, #8
 8010494:	305c      	adds	r0, #92	@ 0x5c
 8010496:	f000 f916 	bl	80106c6 <memset>
 801049a:	4b0d      	ldr	r3, [pc, #52]	@ (80104d0 <std+0x58>)
 801049c:	6263      	str	r3, [r4, #36]	@ 0x24
 801049e:	4b0d      	ldr	r3, [pc, #52]	@ (80104d4 <std+0x5c>)
 80104a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80104a2:	4b0d      	ldr	r3, [pc, #52]	@ (80104d8 <std+0x60>)
 80104a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80104a6:	4b0d      	ldr	r3, [pc, #52]	@ (80104dc <std+0x64>)
 80104a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80104aa:	4b0d      	ldr	r3, [pc, #52]	@ (80104e0 <std+0x68>)
 80104ac:	6224      	str	r4, [r4, #32]
 80104ae:	429c      	cmp	r4, r3
 80104b0:	d006      	beq.n	80104c0 <std+0x48>
 80104b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80104b6:	4294      	cmp	r4, r2
 80104b8:	d002      	beq.n	80104c0 <std+0x48>
 80104ba:	33d0      	adds	r3, #208	@ 0xd0
 80104bc:	429c      	cmp	r4, r3
 80104be:	d105      	bne.n	80104cc <std+0x54>
 80104c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80104c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104c8:	f000 b970 	b.w	80107ac <__retarget_lock_init_recursive>
 80104cc:	bd10      	pop	{r4, pc}
 80104ce:	bf00      	nop
 80104d0:	08010621 	.word	0x08010621
 80104d4:	08010643 	.word	0x08010643
 80104d8:	0801067b 	.word	0x0801067b
 80104dc:	0801069f 	.word	0x0801069f
 80104e0:	20008430 	.word	0x20008430

080104e4 <stdio_exit_handler>:
 80104e4:	4a02      	ldr	r2, [pc, #8]	@ (80104f0 <stdio_exit_handler+0xc>)
 80104e6:	4903      	ldr	r1, [pc, #12]	@ (80104f4 <stdio_exit_handler+0x10>)
 80104e8:	4803      	ldr	r0, [pc, #12]	@ (80104f8 <stdio_exit_handler+0x14>)
 80104ea:	f000 b869 	b.w	80105c0 <_fwalk_sglue>
 80104ee:	bf00      	nop
 80104f0:	20000030 	.word	0x20000030
 80104f4:	080110b1 	.word	0x080110b1
 80104f8:	20000040 	.word	0x20000040

080104fc <cleanup_stdio>:
 80104fc:	6841      	ldr	r1, [r0, #4]
 80104fe:	4b0c      	ldr	r3, [pc, #48]	@ (8010530 <cleanup_stdio+0x34>)
 8010500:	4299      	cmp	r1, r3
 8010502:	b510      	push	{r4, lr}
 8010504:	4604      	mov	r4, r0
 8010506:	d001      	beq.n	801050c <cleanup_stdio+0x10>
 8010508:	f000 fdd2 	bl	80110b0 <_fflush_r>
 801050c:	68a1      	ldr	r1, [r4, #8]
 801050e:	4b09      	ldr	r3, [pc, #36]	@ (8010534 <cleanup_stdio+0x38>)
 8010510:	4299      	cmp	r1, r3
 8010512:	d002      	beq.n	801051a <cleanup_stdio+0x1e>
 8010514:	4620      	mov	r0, r4
 8010516:	f000 fdcb 	bl	80110b0 <_fflush_r>
 801051a:	68e1      	ldr	r1, [r4, #12]
 801051c:	4b06      	ldr	r3, [pc, #24]	@ (8010538 <cleanup_stdio+0x3c>)
 801051e:	4299      	cmp	r1, r3
 8010520:	d004      	beq.n	801052c <cleanup_stdio+0x30>
 8010522:	4620      	mov	r0, r4
 8010524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010528:	f000 bdc2 	b.w	80110b0 <_fflush_r>
 801052c:	bd10      	pop	{r4, pc}
 801052e:	bf00      	nop
 8010530:	20008430 	.word	0x20008430
 8010534:	20008498 	.word	0x20008498
 8010538:	20008500 	.word	0x20008500

0801053c <global_stdio_init.part.0>:
 801053c:	b510      	push	{r4, lr}
 801053e:	4b0b      	ldr	r3, [pc, #44]	@ (801056c <global_stdio_init.part.0+0x30>)
 8010540:	4c0b      	ldr	r4, [pc, #44]	@ (8010570 <global_stdio_init.part.0+0x34>)
 8010542:	4a0c      	ldr	r2, [pc, #48]	@ (8010574 <global_stdio_init.part.0+0x38>)
 8010544:	601a      	str	r2, [r3, #0]
 8010546:	4620      	mov	r0, r4
 8010548:	2200      	movs	r2, #0
 801054a:	2104      	movs	r1, #4
 801054c:	f7ff ff94 	bl	8010478 <std>
 8010550:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010554:	2201      	movs	r2, #1
 8010556:	2109      	movs	r1, #9
 8010558:	f7ff ff8e 	bl	8010478 <std>
 801055c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010560:	2202      	movs	r2, #2
 8010562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010566:	2112      	movs	r1, #18
 8010568:	f7ff bf86 	b.w	8010478 <std>
 801056c:	20008568 	.word	0x20008568
 8010570:	20008430 	.word	0x20008430
 8010574:	080104e5 	.word	0x080104e5

08010578 <__sfp_lock_acquire>:
 8010578:	4801      	ldr	r0, [pc, #4]	@ (8010580 <__sfp_lock_acquire+0x8>)
 801057a:	f000 b918 	b.w	80107ae <__retarget_lock_acquire_recursive>
 801057e:	bf00      	nop
 8010580:	20008571 	.word	0x20008571

08010584 <__sfp_lock_release>:
 8010584:	4801      	ldr	r0, [pc, #4]	@ (801058c <__sfp_lock_release+0x8>)
 8010586:	f000 b913 	b.w	80107b0 <__retarget_lock_release_recursive>
 801058a:	bf00      	nop
 801058c:	20008571 	.word	0x20008571

08010590 <__sinit>:
 8010590:	b510      	push	{r4, lr}
 8010592:	4604      	mov	r4, r0
 8010594:	f7ff fff0 	bl	8010578 <__sfp_lock_acquire>
 8010598:	6a23      	ldr	r3, [r4, #32]
 801059a:	b11b      	cbz	r3, 80105a4 <__sinit+0x14>
 801059c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105a0:	f7ff bff0 	b.w	8010584 <__sfp_lock_release>
 80105a4:	4b04      	ldr	r3, [pc, #16]	@ (80105b8 <__sinit+0x28>)
 80105a6:	6223      	str	r3, [r4, #32]
 80105a8:	4b04      	ldr	r3, [pc, #16]	@ (80105bc <__sinit+0x2c>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1f5      	bne.n	801059c <__sinit+0xc>
 80105b0:	f7ff ffc4 	bl	801053c <global_stdio_init.part.0>
 80105b4:	e7f2      	b.n	801059c <__sinit+0xc>
 80105b6:	bf00      	nop
 80105b8:	080104fd 	.word	0x080104fd
 80105bc:	20008568 	.word	0x20008568

080105c0 <_fwalk_sglue>:
 80105c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105c4:	4607      	mov	r7, r0
 80105c6:	4688      	mov	r8, r1
 80105c8:	4614      	mov	r4, r2
 80105ca:	2600      	movs	r6, #0
 80105cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105d0:	f1b9 0901 	subs.w	r9, r9, #1
 80105d4:	d505      	bpl.n	80105e2 <_fwalk_sglue+0x22>
 80105d6:	6824      	ldr	r4, [r4, #0]
 80105d8:	2c00      	cmp	r4, #0
 80105da:	d1f7      	bne.n	80105cc <_fwalk_sglue+0xc>
 80105dc:	4630      	mov	r0, r6
 80105de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105e2:	89ab      	ldrh	r3, [r5, #12]
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d907      	bls.n	80105f8 <_fwalk_sglue+0x38>
 80105e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105ec:	3301      	adds	r3, #1
 80105ee:	d003      	beq.n	80105f8 <_fwalk_sglue+0x38>
 80105f0:	4629      	mov	r1, r5
 80105f2:	4638      	mov	r0, r7
 80105f4:	47c0      	blx	r8
 80105f6:	4306      	orrs	r6, r0
 80105f8:	3568      	adds	r5, #104	@ 0x68
 80105fa:	e7e9      	b.n	80105d0 <_fwalk_sglue+0x10>

080105fc <iprintf>:
 80105fc:	b40f      	push	{r0, r1, r2, r3}
 80105fe:	b507      	push	{r0, r1, r2, lr}
 8010600:	4906      	ldr	r1, [pc, #24]	@ (801061c <iprintf+0x20>)
 8010602:	ab04      	add	r3, sp, #16
 8010604:	6808      	ldr	r0, [r1, #0]
 8010606:	f853 2b04 	ldr.w	r2, [r3], #4
 801060a:	6881      	ldr	r1, [r0, #8]
 801060c:	9301      	str	r3, [sp, #4]
 801060e:	f000 fa27 	bl	8010a60 <_vfiprintf_r>
 8010612:	b003      	add	sp, #12
 8010614:	f85d eb04 	ldr.w	lr, [sp], #4
 8010618:	b004      	add	sp, #16
 801061a:	4770      	bx	lr
 801061c:	2000003c 	.word	0x2000003c

08010620 <__sread>:
 8010620:	b510      	push	{r4, lr}
 8010622:	460c      	mov	r4, r1
 8010624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010628:	f000 f878 	bl	801071c <_read_r>
 801062c:	2800      	cmp	r0, #0
 801062e:	bfab      	itete	ge
 8010630:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010632:	89a3      	ldrhlt	r3, [r4, #12]
 8010634:	181b      	addge	r3, r3, r0
 8010636:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801063a:	bfac      	ite	ge
 801063c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801063e:	81a3      	strhlt	r3, [r4, #12]
 8010640:	bd10      	pop	{r4, pc}

08010642 <__swrite>:
 8010642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010646:	461f      	mov	r7, r3
 8010648:	898b      	ldrh	r3, [r1, #12]
 801064a:	05db      	lsls	r3, r3, #23
 801064c:	4605      	mov	r5, r0
 801064e:	460c      	mov	r4, r1
 8010650:	4616      	mov	r6, r2
 8010652:	d505      	bpl.n	8010660 <__swrite+0x1e>
 8010654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010658:	2302      	movs	r3, #2
 801065a:	2200      	movs	r2, #0
 801065c:	f000 f84c 	bl	80106f8 <_lseek_r>
 8010660:	89a3      	ldrh	r3, [r4, #12]
 8010662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010666:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801066a:	81a3      	strh	r3, [r4, #12]
 801066c:	4632      	mov	r2, r6
 801066e:	463b      	mov	r3, r7
 8010670:	4628      	mov	r0, r5
 8010672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010676:	f000 b863 	b.w	8010740 <_write_r>

0801067a <__sseek>:
 801067a:	b510      	push	{r4, lr}
 801067c:	460c      	mov	r4, r1
 801067e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010682:	f000 f839 	bl	80106f8 <_lseek_r>
 8010686:	1c43      	adds	r3, r0, #1
 8010688:	89a3      	ldrh	r3, [r4, #12]
 801068a:	bf15      	itete	ne
 801068c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801068e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010696:	81a3      	strheq	r3, [r4, #12]
 8010698:	bf18      	it	ne
 801069a:	81a3      	strhne	r3, [r4, #12]
 801069c:	bd10      	pop	{r4, pc}

0801069e <__sclose>:
 801069e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106a2:	f000 b819 	b.w	80106d8 <_close_r>

080106a6 <memcmp>:
 80106a6:	b510      	push	{r4, lr}
 80106a8:	3901      	subs	r1, #1
 80106aa:	4402      	add	r2, r0
 80106ac:	4290      	cmp	r0, r2
 80106ae:	d101      	bne.n	80106b4 <memcmp+0xe>
 80106b0:	2000      	movs	r0, #0
 80106b2:	e005      	b.n	80106c0 <memcmp+0x1a>
 80106b4:	7803      	ldrb	r3, [r0, #0]
 80106b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80106ba:	42a3      	cmp	r3, r4
 80106bc:	d001      	beq.n	80106c2 <memcmp+0x1c>
 80106be:	1b18      	subs	r0, r3, r4
 80106c0:	bd10      	pop	{r4, pc}
 80106c2:	3001      	adds	r0, #1
 80106c4:	e7f2      	b.n	80106ac <memcmp+0x6>

080106c6 <memset>:
 80106c6:	4402      	add	r2, r0
 80106c8:	4603      	mov	r3, r0
 80106ca:	4293      	cmp	r3, r2
 80106cc:	d100      	bne.n	80106d0 <memset+0xa>
 80106ce:	4770      	bx	lr
 80106d0:	f803 1b01 	strb.w	r1, [r3], #1
 80106d4:	e7f9      	b.n	80106ca <memset+0x4>
	...

080106d8 <_close_r>:
 80106d8:	b538      	push	{r3, r4, r5, lr}
 80106da:	4d06      	ldr	r5, [pc, #24]	@ (80106f4 <_close_r+0x1c>)
 80106dc:	2300      	movs	r3, #0
 80106de:	4604      	mov	r4, r0
 80106e0:	4608      	mov	r0, r1
 80106e2:	602b      	str	r3, [r5, #0]
 80106e4:	f7f0 f9c8 	bl	8000a78 <_close>
 80106e8:	1c43      	adds	r3, r0, #1
 80106ea:	d102      	bne.n	80106f2 <_close_r+0x1a>
 80106ec:	682b      	ldr	r3, [r5, #0]
 80106ee:	b103      	cbz	r3, 80106f2 <_close_r+0x1a>
 80106f0:	6023      	str	r3, [r4, #0]
 80106f2:	bd38      	pop	{r3, r4, r5, pc}
 80106f4:	2000856c 	.word	0x2000856c

080106f8 <_lseek_r>:
 80106f8:	b538      	push	{r3, r4, r5, lr}
 80106fa:	4d07      	ldr	r5, [pc, #28]	@ (8010718 <_lseek_r+0x20>)
 80106fc:	4604      	mov	r4, r0
 80106fe:	4608      	mov	r0, r1
 8010700:	4611      	mov	r1, r2
 8010702:	2200      	movs	r2, #0
 8010704:	602a      	str	r2, [r5, #0]
 8010706:	461a      	mov	r2, r3
 8010708:	f7f0 f9dd 	bl	8000ac6 <_lseek>
 801070c:	1c43      	adds	r3, r0, #1
 801070e:	d102      	bne.n	8010716 <_lseek_r+0x1e>
 8010710:	682b      	ldr	r3, [r5, #0]
 8010712:	b103      	cbz	r3, 8010716 <_lseek_r+0x1e>
 8010714:	6023      	str	r3, [r4, #0]
 8010716:	bd38      	pop	{r3, r4, r5, pc}
 8010718:	2000856c 	.word	0x2000856c

0801071c <_read_r>:
 801071c:	b538      	push	{r3, r4, r5, lr}
 801071e:	4d07      	ldr	r5, [pc, #28]	@ (801073c <_read_r+0x20>)
 8010720:	4604      	mov	r4, r0
 8010722:	4608      	mov	r0, r1
 8010724:	4611      	mov	r1, r2
 8010726:	2200      	movs	r2, #0
 8010728:	602a      	str	r2, [r5, #0]
 801072a:	461a      	mov	r2, r3
 801072c:	f7f0 f96b 	bl	8000a06 <_read>
 8010730:	1c43      	adds	r3, r0, #1
 8010732:	d102      	bne.n	801073a <_read_r+0x1e>
 8010734:	682b      	ldr	r3, [r5, #0]
 8010736:	b103      	cbz	r3, 801073a <_read_r+0x1e>
 8010738:	6023      	str	r3, [r4, #0]
 801073a:	bd38      	pop	{r3, r4, r5, pc}
 801073c:	2000856c 	.word	0x2000856c

08010740 <_write_r>:
 8010740:	b538      	push	{r3, r4, r5, lr}
 8010742:	4d07      	ldr	r5, [pc, #28]	@ (8010760 <_write_r+0x20>)
 8010744:	4604      	mov	r4, r0
 8010746:	4608      	mov	r0, r1
 8010748:	4611      	mov	r1, r2
 801074a:	2200      	movs	r2, #0
 801074c:	602a      	str	r2, [r5, #0]
 801074e:	461a      	mov	r2, r3
 8010750:	f7f0 f976 	bl	8000a40 <_write>
 8010754:	1c43      	adds	r3, r0, #1
 8010756:	d102      	bne.n	801075e <_write_r+0x1e>
 8010758:	682b      	ldr	r3, [r5, #0]
 801075a:	b103      	cbz	r3, 801075e <_write_r+0x1e>
 801075c:	6023      	str	r3, [r4, #0]
 801075e:	bd38      	pop	{r3, r4, r5, pc}
 8010760:	2000856c 	.word	0x2000856c

08010764 <__libc_init_array>:
 8010764:	b570      	push	{r4, r5, r6, lr}
 8010766:	4d0d      	ldr	r5, [pc, #52]	@ (801079c <__libc_init_array+0x38>)
 8010768:	4c0d      	ldr	r4, [pc, #52]	@ (80107a0 <__libc_init_array+0x3c>)
 801076a:	1b64      	subs	r4, r4, r5
 801076c:	10a4      	asrs	r4, r4, #2
 801076e:	2600      	movs	r6, #0
 8010770:	42a6      	cmp	r6, r4
 8010772:	d109      	bne.n	8010788 <__libc_init_array+0x24>
 8010774:	4d0b      	ldr	r5, [pc, #44]	@ (80107a4 <__libc_init_array+0x40>)
 8010776:	4c0c      	ldr	r4, [pc, #48]	@ (80107a8 <__libc_init_array+0x44>)
 8010778:	f000 fe48 	bl	801140c <_init>
 801077c:	1b64      	subs	r4, r4, r5
 801077e:	10a4      	asrs	r4, r4, #2
 8010780:	2600      	movs	r6, #0
 8010782:	42a6      	cmp	r6, r4
 8010784:	d105      	bne.n	8010792 <__libc_init_array+0x2e>
 8010786:	bd70      	pop	{r4, r5, r6, pc}
 8010788:	f855 3b04 	ldr.w	r3, [r5], #4
 801078c:	4798      	blx	r3
 801078e:	3601      	adds	r6, #1
 8010790:	e7ee      	b.n	8010770 <__libc_init_array+0xc>
 8010792:	f855 3b04 	ldr.w	r3, [r5], #4
 8010796:	4798      	blx	r3
 8010798:	3601      	adds	r6, #1
 801079a:	e7f2      	b.n	8010782 <__libc_init_array+0x1e>
 801079c:	080143a4 	.word	0x080143a4
 80107a0:	080143a4 	.word	0x080143a4
 80107a4:	080143a4 	.word	0x080143a4
 80107a8:	080143a8 	.word	0x080143a8

080107ac <__retarget_lock_init_recursive>:
 80107ac:	4770      	bx	lr

080107ae <__retarget_lock_acquire_recursive>:
 80107ae:	4770      	bx	lr

080107b0 <__retarget_lock_release_recursive>:
 80107b0:	4770      	bx	lr

080107b2 <memcpy>:
 80107b2:	440a      	add	r2, r1
 80107b4:	4291      	cmp	r1, r2
 80107b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80107ba:	d100      	bne.n	80107be <memcpy+0xc>
 80107bc:	4770      	bx	lr
 80107be:	b510      	push	{r4, lr}
 80107c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107c8:	4291      	cmp	r1, r2
 80107ca:	d1f9      	bne.n	80107c0 <memcpy+0xe>
 80107cc:	bd10      	pop	{r4, pc}
	...

080107d0 <__assert_func>:
 80107d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107d2:	4614      	mov	r4, r2
 80107d4:	461a      	mov	r2, r3
 80107d6:	4b09      	ldr	r3, [pc, #36]	@ (80107fc <__assert_func+0x2c>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	4605      	mov	r5, r0
 80107dc:	68d8      	ldr	r0, [r3, #12]
 80107de:	b14c      	cbz	r4, 80107f4 <__assert_func+0x24>
 80107e0:	4b07      	ldr	r3, [pc, #28]	@ (8010800 <__assert_func+0x30>)
 80107e2:	9100      	str	r1, [sp, #0]
 80107e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107e8:	4906      	ldr	r1, [pc, #24]	@ (8010804 <__assert_func+0x34>)
 80107ea:	462b      	mov	r3, r5
 80107ec:	f000 fc88 	bl	8011100 <fiprintf>
 80107f0:	f000 fd3c 	bl	801126c <abort>
 80107f4:	4b04      	ldr	r3, [pc, #16]	@ (8010808 <__assert_func+0x38>)
 80107f6:	461c      	mov	r4, r3
 80107f8:	e7f3      	b.n	80107e2 <__assert_func+0x12>
 80107fa:	bf00      	nop
 80107fc:	2000003c 	.word	0x2000003c
 8010800:	0801432d 	.word	0x0801432d
 8010804:	0801433a 	.word	0x0801433a
 8010808:	08014368 	.word	0x08014368

0801080c <_free_r>:
 801080c:	b538      	push	{r3, r4, r5, lr}
 801080e:	4605      	mov	r5, r0
 8010810:	2900      	cmp	r1, #0
 8010812:	d041      	beq.n	8010898 <_free_r+0x8c>
 8010814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010818:	1f0c      	subs	r4, r1, #4
 801081a:	2b00      	cmp	r3, #0
 801081c:	bfb8      	it	lt
 801081e:	18e4      	addlt	r4, r4, r3
 8010820:	f000 f8e8 	bl	80109f4 <__malloc_lock>
 8010824:	4a1d      	ldr	r2, [pc, #116]	@ (801089c <_free_r+0x90>)
 8010826:	6813      	ldr	r3, [r2, #0]
 8010828:	b933      	cbnz	r3, 8010838 <_free_r+0x2c>
 801082a:	6063      	str	r3, [r4, #4]
 801082c:	6014      	str	r4, [r2, #0]
 801082e:	4628      	mov	r0, r5
 8010830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010834:	f000 b8e4 	b.w	8010a00 <__malloc_unlock>
 8010838:	42a3      	cmp	r3, r4
 801083a:	d908      	bls.n	801084e <_free_r+0x42>
 801083c:	6820      	ldr	r0, [r4, #0]
 801083e:	1821      	adds	r1, r4, r0
 8010840:	428b      	cmp	r3, r1
 8010842:	bf01      	itttt	eq
 8010844:	6819      	ldreq	r1, [r3, #0]
 8010846:	685b      	ldreq	r3, [r3, #4]
 8010848:	1809      	addeq	r1, r1, r0
 801084a:	6021      	streq	r1, [r4, #0]
 801084c:	e7ed      	b.n	801082a <_free_r+0x1e>
 801084e:	461a      	mov	r2, r3
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	b10b      	cbz	r3, 8010858 <_free_r+0x4c>
 8010854:	42a3      	cmp	r3, r4
 8010856:	d9fa      	bls.n	801084e <_free_r+0x42>
 8010858:	6811      	ldr	r1, [r2, #0]
 801085a:	1850      	adds	r0, r2, r1
 801085c:	42a0      	cmp	r0, r4
 801085e:	d10b      	bne.n	8010878 <_free_r+0x6c>
 8010860:	6820      	ldr	r0, [r4, #0]
 8010862:	4401      	add	r1, r0
 8010864:	1850      	adds	r0, r2, r1
 8010866:	4283      	cmp	r3, r0
 8010868:	6011      	str	r1, [r2, #0]
 801086a:	d1e0      	bne.n	801082e <_free_r+0x22>
 801086c:	6818      	ldr	r0, [r3, #0]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	6053      	str	r3, [r2, #4]
 8010872:	4408      	add	r0, r1
 8010874:	6010      	str	r0, [r2, #0]
 8010876:	e7da      	b.n	801082e <_free_r+0x22>
 8010878:	d902      	bls.n	8010880 <_free_r+0x74>
 801087a:	230c      	movs	r3, #12
 801087c:	602b      	str	r3, [r5, #0]
 801087e:	e7d6      	b.n	801082e <_free_r+0x22>
 8010880:	6820      	ldr	r0, [r4, #0]
 8010882:	1821      	adds	r1, r4, r0
 8010884:	428b      	cmp	r3, r1
 8010886:	bf04      	itt	eq
 8010888:	6819      	ldreq	r1, [r3, #0]
 801088a:	685b      	ldreq	r3, [r3, #4]
 801088c:	6063      	str	r3, [r4, #4]
 801088e:	bf04      	itt	eq
 8010890:	1809      	addeq	r1, r1, r0
 8010892:	6021      	streq	r1, [r4, #0]
 8010894:	6054      	str	r4, [r2, #4]
 8010896:	e7ca      	b.n	801082e <_free_r+0x22>
 8010898:	bd38      	pop	{r3, r4, r5, pc}
 801089a:	bf00      	nop
 801089c:	20008578 	.word	0x20008578

080108a0 <malloc>:
 80108a0:	4b02      	ldr	r3, [pc, #8]	@ (80108ac <malloc+0xc>)
 80108a2:	4601      	mov	r1, r0
 80108a4:	6818      	ldr	r0, [r3, #0]
 80108a6:	f000 b825 	b.w	80108f4 <_malloc_r>
 80108aa:	bf00      	nop
 80108ac:	2000003c 	.word	0x2000003c

080108b0 <sbrk_aligned>:
 80108b0:	b570      	push	{r4, r5, r6, lr}
 80108b2:	4e0f      	ldr	r6, [pc, #60]	@ (80108f0 <sbrk_aligned+0x40>)
 80108b4:	460c      	mov	r4, r1
 80108b6:	6831      	ldr	r1, [r6, #0]
 80108b8:	4605      	mov	r5, r0
 80108ba:	b911      	cbnz	r1, 80108c2 <sbrk_aligned+0x12>
 80108bc:	f000 fcc6 	bl	801124c <_sbrk_r>
 80108c0:	6030      	str	r0, [r6, #0]
 80108c2:	4621      	mov	r1, r4
 80108c4:	4628      	mov	r0, r5
 80108c6:	f000 fcc1 	bl	801124c <_sbrk_r>
 80108ca:	1c43      	adds	r3, r0, #1
 80108cc:	d103      	bne.n	80108d6 <sbrk_aligned+0x26>
 80108ce:	f04f 34ff 	mov.w	r4, #4294967295
 80108d2:	4620      	mov	r0, r4
 80108d4:	bd70      	pop	{r4, r5, r6, pc}
 80108d6:	1cc4      	adds	r4, r0, #3
 80108d8:	f024 0403 	bic.w	r4, r4, #3
 80108dc:	42a0      	cmp	r0, r4
 80108de:	d0f8      	beq.n	80108d2 <sbrk_aligned+0x22>
 80108e0:	1a21      	subs	r1, r4, r0
 80108e2:	4628      	mov	r0, r5
 80108e4:	f000 fcb2 	bl	801124c <_sbrk_r>
 80108e8:	3001      	adds	r0, #1
 80108ea:	d1f2      	bne.n	80108d2 <sbrk_aligned+0x22>
 80108ec:	e7ef      	b.n	80108ce <sbrk_aligned+0x1e>
 80108ee:	bf00      	nop
 80108f0:	20008574 	.word	0x20008574

080108f4 <_malloc_r>:
 80108f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108f8:	1ccd      	adds	r5, r1, #3
 80108fa:	f025 0503 	bic.w	r5, r5, #3
 80108fe:	3508      	adds	r5, #8
 8010900:	2d0c      	cmp	r5, #12
 8010902:	bf38      	it	cc
 8010904:	250c      	movcc	r5, #12
 8010906:	2d00      	cmp	r5, #0
 8010908:	4606      	mov	r6, r0
 801090a:	db01      	blt.n	8010910 <_malloc_r+0x1c>
 801090c:	42a9      	cmp	r1, r5
 801090e:	d904      	bls.n	801091a <_malloc_r+0x26>
 8010910:	230c      	movs	r3, #12
 8010912:	6033      	str	r3, [r6, #0]
 8010914:	2000      	movs	r0, #0
 8010916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801091a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80109f0 <_malloc_r+0xfc>
 801091e:	f000 f869 	bl	80109f4 <__malloc_lock>
 8010922:	f8d8 3000 	ldr.w	r3, [r8]
 8010926:	461c      	mov	r4, r3
 8010928:	bb44      	cbnz	r4, 801097c <_malloc_r+0x88>
 801092a:	4629      	mov	r1, r5
 801092c:	4630      	mov	r0, r6
 801092e:	f7ff ffbf 	bl	80108b0 <sbrk_aligned>
 8010932:	1c43      	adds	r3, r0, #1
 8010934:	4604      	mov	r4, r0
 8010936:	d158      	bne.n	80109ea <_malloc_r+0xf6>
 8010938:	f8d8 4000 	ldr.w	r4, [r8]
 801093c:	4627      	mov	r7, r4
 801093e:	2f00      	cmp	r7, #0
 8010940:	d143      	bne.n	80109ca <_malloc_r+0xd6>
 8010942:	2c00      	cmp	r4, #0
 8010944:	d04b      	beq.n	80109de <_malloc_r+0xea>
 8010946:	6823      	ldr	r3, [r4, #0]
 8010948:	4639      	mov	r1, r7
 801094a:	4630      	mov	r0, r6
 801094c:	eb04 0903 	add.w	r9, r4, r3
 8010950:	f000 fc7c 	bl	801124c <_sbrk_r>
 8010954:	4581      	cmp	r9, r0
 8010956:	d142      	bne.n	80109de <_malloc_r+0xea>
 8010958:	6821      	ldr	r1, [r4, #0]
 801095a:	1a6d      	subs	r5, r5, r1
 801095c:	4629      	mov	r1, r5
 801095e:	4630      	mov	r0, r6
 8010960:	f7ff ffa6 	bl	80108b0 <sbrk_aligned>
 8010964:	3001      	adds	r0, #1
 8010966:	d03a      	beq.n	80109de <_malloc_r+0xea>
 8010968:	6823      	ldr	r3, [r4, #0]
 801096a:	442b      	add	r3, r5
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	f8d8 3000 	ldr.w	r3, [r8]
 8010972:	685a      	ldr	r2, [r3, #4]
 8010974:	bb62      	cbnz	r2, 80109d0 <_malloc_r+0xdc>
 8010976:	f8c8 7000 	str.w	r7, [r8]
 801097a:	e00f      	b.n	801099c <_malloc_r+0xa8>
 801097c:	6822      	ldr	r2, [r4, #0]
 801097e:	1b52      	subs	r2, r2, r5
 8010980:	d420      	bmi.n	80109c4 <_malloc_r+0xd0>
 8010982:	2a0b      	cmp	r2, #11
 8010984:	d917      	bls.n	80109b6 <_malloc_r+0xc2>
 8010986:	1961      	adds	r1, r4, r5
 8010988:	42a3      	cmp	r3, r4
 801098a:	6025      	str	r5, [r4, #0]
 801098c:	bf18      	it	ne
 801098e:	6059      	strne	r1, [r3, #4]
 8010990:	6863      	ldr	r3, [r4, #4]
 8010992:	bf08      	it	eq
 8010994:	f8c8 1000 	streq.w	r1, [r8]
 8010998:	5162      	str	r2, [r4, r5]
 801099a:	604b      	str	r3, [r1, #4]
 801099c:	4630      	mov	r0, r6
 801099e:	f000 f82f 	bl	8010a00 <__malloc_unlock>
 80109a2:	f104 000b 	add.w	r0, r4, #11
 80109a6:	1d23      	adds	r3, r4, #4
 80109a8:	f020 0007 	bic.w	r0, r0, #7
 80109ac:	1ac2      	subs	r2, r0, r3
 80109ae:	bf1c      	itt	ne
 80109b0:	1a1b      	subne	r3, r3, r0
 80109b2:	50a3      	strne	r3, [r4, r2]
 80109b4:	e7af      	b.n	8010916 <_malloc_r+0x22>
 80109b6:	6862      	ldr	r2, [r4, #4]
 80109b8:	42a3      	cmp	r3, r4
 80109ba:	bf0c      	ite	eq
 80109bc:	f8c8 2000 	streq.w	r2, [r8]
 80109c0:	605a      	strne	r2, [r3, #4]
 80109c2:	e7eb      	b.n	801099c <_malloc_r+0xa8>
 80109c4:	4623      	mov	r3, r4
 80109c6:	6864      	ldr	r4, [r4, #4]
 80109c8:	e7ae      	b.n	8010928 <_malloc_r+0x34>
 80109ca:	463c      	mov	r4, r7
 80109cc:	687f      	ldr	r7, [r7, #4]
 80109ce:	e7b6      	b.n	801093e <_malloc_r+0x4a>
 80109d0:	461a      	mov	r2, r3
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	42a3      	cmp	r3, r4
 80109d6:	d1fb      	bne.n	80109d0 <_malloc_r+0xdc>
 80109d8:	2300      	movs	r3, #0
 80109da:	6053      	str	r3, [r2, #4]
 80109dc:	e7de      	b.n	801099c <_malloc_r+0xa8>
 80109de:	230c      	movs	r3, #12
 80109e0:	6033      	str	r3, [r6, #0]
 80109e2:	4630      	mov	r0, r6
 80109e4:	f000 f80c 	bl	8010a00 <__malloc_unlock>
 80109e8:	e794      	b.n	8010914 <_malloc_r+0x20>
 80109ea:	6005      	str	r5, [r0, #0]
 80109ec:	e7d6      	b.n	801099c <_malloc_r+0xa8>
 80109ee:	bf00      	nop
 80109f0:	20008578 	.word	0x20008578

080109f4 <__malloc_lock>:
 80109f4:	4801      	ldr	r0, [pc, #4]	@ (80109fc <__malloc_lock+0x8>)
 80109f6:	f7ff beda 	b.w	80107ae <__retarget_lock_acquire_recursive>
 80109fa:	bf00      	nop
 80109fc:	20008570 	.word	0x20008570

08010a00 <__malloc_unlock>:
 8010a00:	4801      	ldr	r0, [pc, #4]	@ (8010a08 <__malloc_unlock+0x8>)
 8010a02:	f7ff bed5 	b.w	80107b0 <__retarget_lock_release_recursive>
 8010a06:	bf00      	nop
 8010a08:	20008570 	.word	0x20008570

08010a0c <__sfputc_r>:
 8010a0c:	6893      	ldr	r3, [r2, #8]
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	b410      	push	{r4}
 8010a14:	6093      	str	r3, [r2, #8]
 8010a16:	da08      	bge.n	8010a2a <__sfputc_r+0x1e>
 8010a18:	6994      	ldr	r4, [r2, #24]
 8010a1a:	42a3      	cmp	r3, r4
 8010a1c:	db01      	blt.n	8010a22 <__sfputc_r+0x16>
 8010a1e:	290a      	cmp	r1, #10
 8010a20:	d103      	bne.n	8010a2a <__sfputc_r+0x1e>
 8010a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a26:	f000 bb7d 	b.w	8011124 <__swbuf_r>
 8010a2a:	6813      	ldr	r3, [r2, #0]
 8010a2c:	1c58      	adds	r0, r3, #1
 8010a2e:	6010      	str	r0, [r2, #0]
 8010a30:	7019      	strb	r1, [r3, #0]
 8010a32:	4608      	mov	r0, r1
 8010a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a38:	4770      	bx	lr

08010a3a <__sfputs_r>:
 8010a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a3c:	4606      	mov	r6, r0
 8010a3e:	460f      	mov	r7, r1
 8010a40:	4614      	mov	r4, r2
 8010a42:	18d5      	adds	r5, r2, r3
 8010a44:	42ac      	cmp	r4, r5
 8010a46:	d101      	bne.n	8010a4c <__sfputs_r+0x12>
 8010a48:	2000      	movs	r0, #0
 8010a4a:	e007      	b.n	8010a5c <__sfputs_r+0x22>
 8010a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a50:	463a      	mov	r2, r7
 8010a52:	4630      	mov	r0, r6
 8010a54:	f7ff ffda 	bl	8010a0c <__sfputc_r>
 8010a58:	1c43      	adds	r3, r0, #1
 8010a5a:	d1f3      	bne.n	8010a44 <__sfputs_r+0xa>
 8010a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a60 <_vfiprintf_r>:
 8010a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a64:	460d      	mov	r5, r1
 8010a66:	b09d      	sub	sp, #116	@ 0x74
 8010a68:	4614      	mov	r4, r2
 8010a6a:	4698      	mov	r8, r3
 8010a6c:	4606      	mov	r6, r0
 8010a6e:	b118      	cbz	r0, 8010a78 <_vfiprintf_r+0x18>
 8010a70:	6a03      	ldr	r3, [r0, #32]
 8010a72:	b90b      	cbnz	r3, 8010a78 <_vfiprintf_r+0x18>
 8010a74:	f7ff fd8c 	bl	8010590 <__sinit>
 8010a78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a7a:	07d9      	lsls	r1, r3, #31
 8010a7c:	d405      	bmi.n	8010a8a <_vfiprintf_r+0x2a>
 8010a7e:	89ab      	ldrh	r3, [r5, #12]
 8010a80:	059a      	lsls	r2, r3, #22
 8010a82:	d402      	bmi.n	8010a8a <_vfiprintf_r+0x2a>
 8010a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a86:	f7ff fe92 	bl	80107ae <__retarget_lock_acquire_recursive>
 8010a8a:	89ab      	ldrh	r3, [r5, #12]
 8010a8c:	071b      	lsls	r3, r3, #28
 8010a8e:	d501      	bpl.n	8010a94 <_vfiprintf_r+0x34>
 8010a90:	692b      	ldr	r3, [r5, #16]
 8010a92:	b99b      	cbnz	r3, 8010abc <_vfiprintf_r+0x5c>
 8010a94:	4629      	mov	r1, r5
 8010a96:	4630      	mov	r0, r6
 8010a98:	f000 fb82 	bl	80111a0 <__swsetup_r>
 8010a9c:	b170      	cbz	r0, 8010abc <_vfiprintf_r+0x5c>
 8010a9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010aa0:	07dc      	lsls	r4, r3, #31
 8010aa2:	d504      	bpl.n	8010aae <_vfiprintf_r+0x4e>
 8010aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa8:	b01d      	add	sp, #116	@ 0x74
 8010aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aae:	89ab      	ldrh	r3, [r5, #12]
 8010ab0:	0598      	lsls	r0, r3, #22
 8010ab2:	d4f7      	bmi.n	8010aa4 <_vfiprintf_r+0x44>
 8010ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ab6:	f7ff fe7b 	bl	80107b0 <__retarget_lock_release_recursive>
 8010aba:	e7f3      	b.n	8010aa4 <_vfiprintf_r+0x44>
 8010abc:	2300      	movs	r3, #0
 8010abe:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ac0:	2320      	movs	r3, #32
 8010ac2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ac6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010aca:	2330      	movs	r3, #48	@ 0x30
 8010acc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010c7c <_vfiprintf_r+0x21c>
 8010ad0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ad4:	f04f 0901 	mov.w	r9, #1
 8010ad8:	4623      	mov	r3, r4
 8010ada:	469a      	mov	sl, r3
 8010adc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ae0:	b10a      	cbz	r2, 8010ae6 <_vfiprintf_r+0x86>
 8010ae2:	2a25      	cmp	r2, #37	@ 0x25
 8010ae4:	d1f9      	bne.n	8010ada <_vfiprintf_r+0x7a>
 8010ae6:	ebba 0b04 	subs.w	fp, sl, r4
 8010aea:	d00b      	beq.n	8010b04 <_vfiprintf_r+0xa4>
 8010aec:	465b      	mov	r3, fp
 8010aee:	4622      	mov	r2, r4
 8010af0:	4629      	mov	r1, r5
 8010af2:	4630      	mov	r0, r6
 8010af4:	f7ff ffa1 	bl	8010a3a <__sfputs_r>
 8010af8:	3001      	adds	r0, #1
 8010afa:	f000 80a7 	beq.w	8010c4c <_vfiprintf_r+0x1ec>
 8010afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b00:	445a      	add	r2, fp
 8010b02:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b04:	f89a 3000 	ldrb.w	r3, [sl]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	f000 809f 	beq.w	8010c4c <_vfiprintf_r+0x1ec>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	f04f 32ff 	mov.w	r2, #4294967295
 8010b14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b18:	f10a 0a01 	add.w	sl, sl, #1
 8010b1c:	9304      	str	r3, [sp, #16]
 8010b1e:	9307      	str	r3, [sp, #28]
 8010b20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b24:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b26:	4654      	mov	r4, sl
 8010b28:	2205      	movs	r2, #5
 8010b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b2e:	4853      	ldr	r0, [pc, #332]	@ (8010c7c <_vfiprintf_r+0x21c>)
 8010b30:	f7ef fb4e 	bl	80001d0 <memchr>
 8010b34:	9a04      	ldr	r2, [sp, #16]
 8010b36:	b9d8      	cbnz	r0, 8010b70 <_vfiprintf_r+0x110>
 8010b38:	06d1      	lsls	r1, r2, #27
 8010b3a:	bf44      	itt	mi
 8010b3c:	2320      	movmi	r3, #32
 8010b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b42:	0713      	lsls	r3, r2, #28
 8010b44:	bf44      	itt	mi
 8010b46:	232b      	movmi	r3, #43	@ 0x2b
 8010b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8010b50:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b52:	d015      	beq.n	8010b80 <_vfiprintf_r+0x120>
 8010b54:	9a07      	ldr	r2, [sp, #28]
 8010b56:	4654      	mov	r4, sl
 8010b58:	2000      	movs	r0, #0
 8010b5a:	f04f 0c0a 	mov.w	ip, #10
 8010b5e:	4621      	mov	r1, r4
 8010b60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b64:	3b30      	subs	r3, #48	@ 0x30
 8010b66:	2b09      	cmp	r3, #9
 8010b68:	d94b      	bls.n	8010c02 <_vfiprintf_r+0x1a2>
 8010b6a:	b1b0      	cbz	r0, 8010b9a <_vfiprintf_r+0x13a>
 8010b6c:	9207      	str	r2, [sp, #28]
 8010b6e:	e014      	b.n	8010b9a <_vfiprintf_r+0x13a>
 8010b70:	eba0 0308 	sub.w	r3, r0, r8
 8010b74:	fa09 f303 	lsl.w	r3, r9, r3
 8010b78:	4313      	orrs	r3, r2
 8010b7a:	9304      	str	r3, [sp, #16]
 8010b7c:	46a2      	mov	sl, r4
 8010b7e:	e7d2      	b.n	8010b26 <_vfiprintf_r+0xc6>
 8010b80:	9b03      	ldr	r3, [sp, #12]
 8010b82:	1d19      	adds	r1, r3, #4
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	9103      	str	r1, [sp, #12]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	bfbb      	ittet	lt
 8010b8c:	425b      	neglt	r3, r3
 8010b8e:	f042 0202 	orrlt.w	r2, r2, #2
 8010b92:	9307      	strge	r3, [sp, #28]
 8010b94:	9307      	strlt	r3, [sp, #28]
 8010b96:	bfb8      	it	lt
 8010b98:	9204      	strlt	r2, [sp, #16]
 8010b9a:	7823      	ldrb	r3, [r4, #0]
 8010b9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b9e:	d10a      	bne.n	8010bb6 <_vfiprintf_r+0x156>
 8010ba0:	7863      	ldrb	r3, [r4, #1]
 8010ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ba4:	d132      	bne.n	8010c0c <_vfiprintf_r+0x1ac>
 8010ba6:	9b03      	ldr	r3, [sp, #12]
 8010ba8:	1d1a      	adds	r2, r3, #4
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	9203      	str	r2, [sp, #12]
 8010bae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010bb2:	3402      	adds	r4, #2
 8010bb4:	9305      	str	r3, [sp, #20]
 8010bb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010c8c <_vfiprintf_r+0x22c>
 8010bba:	7821      	ldrb	r1, [r4, #0]
 8010bbc:	2203      	movs	r2, #3
 8010bbe:	4650      	mov	r0, sl
 8010bc0:	f7ef fb06 	bl	80001d0 <memchr>
 8010bc4:	b138      	cbz	r0, 8010bd6 <_vfiprintf_r+0x176>
 8010bc6:	9b04      	ldr	r3, [sp, #16]
 8010bc8:	eba0 000a 	sub.w	r0, r0, sl
 8010bcc:	2240      	movs	r2, #64	@ 0x40
 8010bce:	4082      	lsls	r2, r0
 8010bd0:	4313      	orrs	r3, r2
 8010bd2:	3401      	adds	r4, #1
 8010bd4:	9304      	str	r3, [sp, #16]
 8010bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bda:	4829      	ldr	r0, [pc, #164]	@ (8010c80 <_vfiprintf_r+0x220>)
 8010bdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010be0:	2206      	movs	r2, #6
 8010be2:	f7ef faf5 	bl	80001d0 <memchr>
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d03f      	beq.n	8010c6a <_vfiprintf_r+0x20a>
 8010bea:	4b26      	ldr	r3, [pc, #152]	@ (8010c84 <_vfiprintf_r+0x224>)
 8010bec:	bb1b      	cbnz	r3, 8010c36 <_vfiprintf_r+0x1d6>
 8010bee:	9b03      	ldr	r3, [sp, #12]
 8010bf0:	3307      	adds	r3, #7
 8010bf2:	f023 0307 	bic.w	r3, r3, #7
 8010bf6:	3308      	adds	r3, #8
 8010bf8:	9303      	str	r3, [sp, #12]
 8010bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bfc:	443b      	add	r3, r7
 8010bfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c00:	e76a      	b.n	8010ad8 <_vfiprintf_r+0x78>
 8010c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c06:	460c      	mov	r4, r1
 8010c08:	2001      	movs	r0, #1
 8010c0a:	e7a8      	b.n	8010b5e <_vfiprintf_r+0xfe>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	3401      	adds	r4, #1
 8010c10:	9305      	str	r3, [sp, #20]
 8010c12:	4619      	mov	r1, r3
 8010c14:	f04f 0c0a 	mov.w	ip, #10
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c1e:	3a30      	subs	r2, #48	@ 0x30
 8010c20:	2a09      	cmp	r2, #9
 8010c22:	d903      	bls.n	8010c2c <_vfiprintf_r+0x1cc>
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d0c6      	beq.n	8010bb6 <_vfiprintf_r+0x156>
 8010c28:	9105      	str	r1, [sp, #20]
 8010c2a:	e7c4      	b.n	8010bb6 <_vfiprintf_r+0x156>
 8010c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c30:	4604      	mov	r4, r0
 8010c32:	2301      	movs	r3, #1
 8010c34:	e7f0      	b.n	8010c18 <_vfiprintf_r+0x1b8>
 8010c36:	ab03      	add	r3, sp, #12
 8010c38:	9300      	str	r3, [sp, #0]
 8010c3a:	462a      	mov	r2, r5
 8010c3c:	4b12      	ldr	r3, [pc, #72]	@ (8010c88 <_vfiprintf_r+0x228>)
 8010c3e:	a904      	add	r1, sp, #16
 8010c40:	4630      	mov	r0, r6
 8010c42:	f3af 8000 	nop.w
 8010c46:	4607      	mov	r7, r0
 8010c48:	1c78      	adds	r0, r7, #1
 8010c4a:	d1d6      	bne.n	8010bfa <_vfiprintf_r+0x19a>
 8010c4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c4e:	07d9      	lsls	r1, r3, #31
 8010c50:	d405      	bmi.n	8010c5e <_vfiprintf_r+0x1fe>
 8010c52:	89ab      	ldrh	r3, [r5, #12]
 8010c54:	059a      	lsls	r2, r3, #22
 8010c56:	d402      	bmi.n	8010c5e <_vfiprintf_r+0x1fe>
 8010c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c5a:	f7ff fda9 	bl	80107b0 <__retarget_lock_release_recursive>
 8010c5e:	89ab      	ldrh	r3, [r5, #12]
 8010c60:	065b      	lsls	r3, r3, #25
 8010c62:	f53f af1f 	bmi.w	8010aa4 <_vfiprintf_r+0x44>
 8010c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c68:	e71e      	b.n	8010aa8 <_vfiprintf_r+0x48>
 8010c6a:	ab03      	add	r3, sp, #12
 8010c6c:	9300      	str	r3, [sp, #0]
 8010c6e:	462a      	mov	r2, r5
 8010c70:	4b05      	ldr	r3, [pc, #20]	@ (8010c88 <_vfiprintf_r+0x228>)
 8010c72:	a904      	add	r1, sp, #16
 8010c74:	4630      	mov	r0, r6
 8010c76:	f000 f879 	bl	8010d6c <_printf_i>
 8010c7a:	e7e4      	b.n	8010c46 <_vfiprintf_r+0x1e6>
 8010c7c:	08014369 	.word	0x08014369
 8010c80:	08014373 	.word	0x08014373
 8010c84:	00000000 	.word	0x00000000
 8010c88:	08010a3b 	.word	0x08010a3b
 8010c8c:	0801436f 	.word	0x0801436f

08010c90 <_printf_common>:
 8010c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c94:	4616      	mov	r6, r2
 8010c96:	4698      	mov	r8, r3
 8010c98:	688a      	ldr	r2, [r1, #8]
 8010c9a:	690b      	ldr	r3, [r1, #16]
 8010c9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	bfb8      	it	lt
 8010ca4:	4613      	movlt	r3, r2
 8010ca6:	6033      	str	r3, [r6, #0]
 8010ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010cac:	4607      	mov	r7, r0
 8010cae:	460c      	mov	r4, r1
 8010cb0:	b10a      	cbz	r2, 8010cb6 <_printf_common+0x26>
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	6033      	str	r3, [r6, #0]
 8010cb6:	6823      	ldr	r3, [r4, #0]
 8010cb8:	0699      	lsls	r1, r3, #26
 8010cba:	bf42      	ittt	mi
 8010cbc:	6833      	ldrmi	r3, [r6, #0]
 8010cbe:	3302      	addmi	r3, #2
 8010cc0:	6033      	strmi	r3, [r6, #0]
 8010cc2:	6825      	ldr	r5, [r4, #0]
 8010cc4:	f015 0506 	ands.w	r5, r5, #6
 8010cc8:	d106      	bne.n	8010cd8 <_printf_common+0x48>
 8010cca:	f104 0a19 	add.w	sl, r4, #25
 8010cce:	68e3      	ldr	r3, [r4, #12]
 8010cd0:	6832      	ldr	r2, [r6, #0]
 8010cd2:	1a9b      	subs	r3, r3, r2
 8010cd4:	42ab      	cmp	r3, r5
 8010cd6:	dc26      	bgt.n	8010d26 <_printf_common+0x96>
 8010cd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010cdc:	6822      	ldr	r2, [r4, #0]
 8010cde:	3b00      	subs	r3, #0
 8010ce0:	bf18      	it	ne
 8010ce2:	2301      	movne	r3, #1
 8010ce4:	0692      	lsls	r2, r2, #26
 8010ce6:	d42b      	bmi.n	8010d40 <_printf_common+0xb0>
 8010ce8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010cec:	4641      	mov	r1, r8
 8010cee:	4638      	mov	r0, r7
 8010cf0:	47c8      	blx	r9
 8010cf2:	3001      	adds	r0, #1
 8010cf4:	d01e      	beq.n	8010d34 <_printf_common+0xa4>
 8010cf6:	6823      	ldr	r3, [r4, #0]
 8010cf8:	6922      	ldr	r2, [r4, #16]
 8010cfa:	f003 0306 	and.w	r3, r3, #6
 8010cfe:	2b04      	cmp	r3, #4
 8010d00:	bf02      	ittt	eq
 8010d02:	68e5      	ldreq	r5, [r4, #12]
 8010d04:	6833      	ldreq	r3, [r6, #0]
 8010d06:	1aed      	subeq	r5, r5, r3
 8010d08:	68a3      	ldr	r3, [r4, #8]
 8010d0a:	bf0c      	ite	eq
 8010d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d10:	2500      	movne	r5, #0
 8010d12:	4293      	cmp	r3, r2
 8010d14:	bfc4      	itt	gt
 8010d16:	1a9b      	subgt	r3, r3, r2
 8010d18:	18ed      	addgt	r5, r5, r3
 8010d1a:	2600      	movs	r6, #0
 8010d1c:	341a      	adds	r4, #26
 8010d1e:	42b5      	cmp	r5, r6
 8010d20:	d11a      	bne.n	8010d58 <_printf_common+0xc8>
 8010d22:	2000      	movs	r0, #0
 8010d24:	e008      	b.n	8010d38 <_printf_common+0xa8>
 8010d26:	2301      	movs	r3, #1
 8010d28:	4652      	mov	r2, sl
 8010d2a:	4641      	mov	r1, r8
 8010d2c:	4638      	mov	r0, r7
 8010d2e:	47c8      	blx	r9
 8010d30:	3001      	adds	r0, #1
 8010d32:	d103      	bne.n	8010d3c <_printf_common+0xac>
 8010d34:	f04f 30ff 	mov.w	r0, #4294967295
 8010d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d3c:	3501      	adds	r5, #1
 8010d3e:	e7c6      	b.n	8010cce <_printf_common+0x3e>
 8010d40:	18e1      	adds	r1, r4, r3
 8010d42:	1c5a      	adds	r2, r3, #1
 8010d44:	2030      	movs	r0, #48	@ 0x30
 8010d46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010d4a:	4422      	add	r2, r4
 8010d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010d50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010d54:	3302      	adds	r3, #2
 8010d56:	e7c7      	b.n	8010ce8 <_printf_common+0x58>
 8010d58:	2301      	movs	r3, #1
 8010d5a:	4622      	mov	r2, r4
 8010d5c:	4641      	mov	r1, r8
 8010d5e:	4638      	mov	r0, r7
 8010d60:	47c8      	blx	r9
 8010d62:	3001      	adds	r0, #1
 8010d64:	d0e6      	beq.n	8010d34 <_printf_common+0xa4>
 8010d66:	3601      	adds	r6, #1
 8010d68:	e7d9      	b.n	8010d1e <_printf_common+0x8e>
	...

08010d6c <_printf_i>:
 8010d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d70:	7e0f      	ldrb	r7, [r1, #24]
 8010d72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010d74:	2f78      	cmp	r7, #120	@ 0x78
 8010d76:	4691      	mov	r9, r2
 8010d78:	4680      	mov	r8, r0
 8010d7a:	460c      	mov	r4, r1
 8010d7c:	469a      	mov	sl, r3
 8010d7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010d82:	d807      	bhi.n	8010d94 <_printf_i+0x28>
 8010d84:	2f62      	cmp	r7, #98	@ 0x62
 8010d86:	d80a      	bhi.n	8010d9e <_printf_i+0x32>
 8010d88:	2f00      	cmp	r7, #0
 8010d8a:	f000 80d1 	beq.w	8010f30 <_printf_i+0x1c4>
 8010d8e:	2f58      	cmp	r7, #88	@ 0x58
 8010d90:	f000 80b8 	beq.w	8010f04 <_printf_i+0x198>
 8010d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010d98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010d9c:	e03a      	b.n	8010e14 <_printf_i+0xa8>
 8010d9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010da2:	2b15      	cmp	r3, #21
 8010da4:	d8f6      	bhi.n	8010d94 <_printf_i+0x28>
 8010da6:	a101      	add	r1, pc, #4	@ (adr r1, 8010dac <_printf_i+0x40>)
 8010da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010dac:	08010e05 	.word	0x08010e05
 8010db0:	08010e19 	.word	0x08010e19
 8010db4:	08010d95 	.word	0x08010d95
 8010db8:	08010d95 	.word	0x08010d95
 8010dbc:	08010d95 	.word	0x08010d95
 8010dc0:	08010d95 	.word	0x08010d95
 8010dc4:	08010e19 	.word	0x08010e19
 8010dc8:	08010d95 	.word	0x08010d95
 8010dcc:	08010d95 	.word	0x08010d95
 8010dd0:	08010d95 	.word	0x08010d95
 8010dd4:	08010d95 	.word	0x08010d95
 8010dd8:	08010f17 	.word	0x08010f17
 8010ddc:	08010e43 	.word	0x08010e43
 8010de0:	08010ed1 	.word	0x08010ed1
 8010de4:	08010d95 	.word	0x08010d95
 8010de8:	08010d95 	.word	0x08010d95
 8010dec:	08010f39 	.word	0x08010f39
 8010df0:	08010d95 	.word	0x08010d95
 8010df4:	08010e43 	.word	0x08010e43
 8010df8:	08010d95 	.word	0x08010d95
 8010dfc:	08010d95 	.word	0x08010d95
 8010e00:	08010ed9 	.word	0x08010ed9
 8010e04:	6833      	ldr	r3, [r6, #0]
 8010e06:	1d1a      	adds	r2, r3, #4
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	6032      	str	r2, [r6, #0]
 8010e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010e14:	2301      	movs	r3, #1
 8010e16:	e09c      	b.n	8010f52 <_printf_i+0x1e6>
 8010e18:	6833      	ldr	r3, [r6, #0]
 8010e1a:	6820      	ldr	r0, [r4, #0]
 8010e1c:	1d19      	adds	r1, r3, #4
 8010e1e:	6031      	str	r1, [r6, #0]
 8010e20:	0606      	lsls	r6, r0, #24
 8010e22:	d501      	bpl.n	8010e28 <_printf_i+0xbc>
 8010e24:	681d      	ldr	r5, [r3, #0]
 8010e26:	e003      	b.n	8010e30 <_printf_i+0xc4>
 8010e28:	0645      	lsls	r5, r0, #25
 8010e2a:	d5fb      	bpl.n	8010e24 <_printf_i+0xb8>
 8010e2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010e30:	2d00      	cmp	r5, #0
 8010e32:	da03      	bge.n	8010e3c <_printf_i+0xd0>
 8010e34:	232d      	movs	r3, #45	@ 0x2d
 8010e36:	426d      	negs	r5, r5
 8010e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010e3c:	4858      	ldr	r0, [pc, #352]	@ (8010fa0 <_printf_i+0x234>)
 8010e3e:	230a      	movs	r3, #10
 8010e40:	e011      	b.n	8010e66 <_printf_i+0xfa>
 8010e42:	6821      	ldr	r1, [r4, #0]
 8010e44:	6833      	ldr	r3, [r6, #0]
 8010e46:	0608      	lsls	r0, r1, #24
 8010e48:	f853 5b04 	ldr.w	r5, [r3], #4
 8010e4c:	d402      	bmi.n	8010e54 <_printf_i+0xe8>
 8010e4e:	0649      	lsls	r1, r1, #25
 8010e50:	bf48      	it	mi
 8010e52:	b2ad      	uxthmi	r5, r5
 8010e54:	2f6f      	cmp	r7, #111	@ 0x6f
 8010e56:	4852      	ldr	r0, [pc, #328]	@ (8010fa0 <_printf_i+0x234>)
 8010e58:	6033      	str	r3, [r6, #0]
 8010e5a:	bf14      	ite	ne
 8010e5c:	230a      	movne	r3, #10
 8010e5e:	2308      	moveq	r3, #8
 8010e60:	2100      	movs	r1, #0
 8010e62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010e66:	6866      	ldr	r6, [r4, #4]
 8010e68:	60a6      	str	r6, [r4, #8]
 8010e6a:	2e00      	cmp	r6, #0
 8010e6c:	db05      	blt.n	8010e7a <_printf_i+0x10e>
 8010e6e:	6821      	ldr	r1, [r4, #0]
 8010e70:	432e      	orrs	r6, r5
 8010e72:	f021 0104 	bic.w	r1, r1, #4
 8010e76:	6021      	str	r1, [r4, #0]
 8010e78:	d04b      	beq.n	8010f12 <_printf_i+0x1a6>
 8010e7a:	4616      	mov	r6, r2
 8010e7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e80:	fb03 5711 	mls	r7, r3, r1, r5
 8010e84:	5dc7      	ldrb	r7, [r0, r7]
 8010e86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e8a:	462f      	mov	r7, r5
 8010e8c:	42bb      	cmp	r3, r7
 8010e8e:	460d      	mov	r5, r1
 8010e90:	d9f4      	bls.n	8010e7c <_printf_i+0x110>
 8010e92:	2b08      	cmp	r3, #8
 8010e94:	d10b      	bne.n	8010eae <_printf_i+0x142>
 8010e96:	6823      	ldr	r3, [r4, #0]
 8010e98:	07df      	lsls	r7, r3, #31
 8010e9a:	d508      	bpl.n	8010eae <_printf_i+0x142>
 8010e9c:	6923      	ldr	r3, [r4, #16]
 8010e9e:	6861      	ldr	r1, [r4, #4]
 8010ea0:	4299      	cmp	r1, r3
 8010ea2:	bfde      	ittt	le
 8010ea4:	2330      	movle	r3, #48	@ 0x30
 8010ea6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010eaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010eae:	1b92      	subs	r2, r2, r6
 8010eb0:	6122      	str	r2, [r4, #16]
 8010eb2:	f8cd a000 	str.w	sl, [sp]
 8010eb6:	464b      	mov	r3, r9
 8010eb8:	aa03      	add	r2, sp, #12
 8010eba:	4621      	mov	r1, r4
 8010ebc:	4640      	mov	r0, r8
 8010ebe:	f7ff fee7 	bl	8010c90 <_printf_common>
 8010ec2:	3001      	adds	r0, #1
 8010ec4:	d14a      	bne.n	8010f5c <_printf_i+0x1f0>
 8010ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eca:	b004      	add	sp, #16
 8010ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ed0:	6823      	ldr	r3, [r4, #0]
 8010ed2:	f043 0320 	orr.w	r3, r3, #32
 8010ed6:	6023      	str	r3, [r4, #0]
 8010ed8:	4832      	ldr	r0, [pc, #200]	@ (8010fa4 <_printf_i+0x238>)
 8010eda:	2778      	movs	r7, #120	@ 0x78
 8010edc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010ee0:	6823      	ldr	r3, [r4, #0]
 8010ee2:	6831      	ldr	r1, [r6, #0]
 8010ee4:	061f      	lsls	r7, r3, #24
 8010ee6:	f851 5b04 	ldr.w	r5, [r1], #4
 8010eea:	d402      	bmi.n	8010ef2 <_printf_i+0x186>
 8010eec:	065f      	lsls	r7, r3, #25
 8010eee:	bf48      	it	mi
 8010ef0:	b2ad      	uxthmi	r5, r5
 8010ef2:	6031      	str	r1, [r6, #0]
 8010ef4:	07d9      	lsls	r1, r3, #31
 8010ef6:	bf44      	itt	mi
 8010ef8:	f043 0320 	orrmi.w	r3, r3, #32
 8010efc:	6023      	strmi	r3, [r4, #0]
 8010efe:	b11d      	cbz	r5, 8010f08 <_printf_i+0x19c>
 8010f00:	2310      	movs	r3, #16
 8010f02:	e7ad      	b.n	8010e60 <_printf_i+0xf4>
 8010f04:	4826      	ldr	r0, [pc, #152]	@ (8010fa0 <_printf_i+0x234>)
 8010f06:	e7e9      	b.n	8010edc <_printf_i+0x170>
 8010f08:	6823      	ldr	r3, [r4, #0]
 8010f0a:	f023 0320 	bic.w	r3, r3, #32
 8010f0e:	6023      	str	r3, [r4, #0]
 8010f10:	e7f6      	b.n	8010f00 <_printf_i+0x194>
 8010f12:	4616      	mov	r6, r2
 8010f14:	e7bd      	b.n	8010e92 <_printf_i+0x126>
 8010f16:	6833      	ldr	r3, [r6, #0]
 8010f18:	6825      	ldr	r5, [r4, #0]
 8010f1a:	6961      	ldr	r1, [r4, #20]
 8010f1c:	1d18      	adds	r0, r3, #4
 8010f1e:	6030      	str	r0, [r6, #0]
 8010f20:	062e      	lsls	r6, r5, #24
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	d501      	bpl.n	8010f2a <_printf_i+0x1be>
 8010f26:	6019      	str	r1, [r3, #0]
 8010f28:	e002      	b.n	8010f30 <_printf_i+0x1c4>
 8010f2a:	0668      	lsls	r0, r5, #25
 8010f2c:	d5fb      	bpl.n	8010f26 <_printf_i+0x1ba>
 8010f2e:	8019      	strh	r1, [r3, #0]
 8010f30:	2300      	movs	r3, #0
 8010f32:	6123      	str	r3, [r4, #16]
 8010f34:	4616      	mov	r6, r2
 8010f36:	e7bc      	b.n	8010eb2 <_printf_i+0x146>
 8010f38:	6833      	ldr	r3, [r6, #0]
 8010f3a:	1d1a      	adds	r2, r3, #4
 8010f3c:	6032      	str	r2, [r6, #0]
 8010f3e:	681e      	ldr	r6, [r3, #0]
 8010f40:	6862      	ldr	r2, [r4, #4]
 8010f42:	2100      	movs	r1, #0
 8010f44:	4630      	mov	r0, r6
 8010f46:	f7ef f943 	bl	80001d0 <memchr>
 8010f4a:	b108      	cbz	r0, 8010f50 <_printf_i+0x1e4>
 8010f4c:	1b80      	subs	r0, r0, r6
 8010f4e:	6060      	str	r0, [r4, #4]
 8010f50:	6863      	ldr	r3, [r4, #4]
 8010f52:	6123      	str	r3, [r4, #16]
 8010f54:	2300      	movs	r3, #0
 8010f56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f5a:	e7aa      	b.n	8010eb2 <_printf_i+0x146>
 8010f5c:	6923      	ldr	r3, [r4, #16]
 8010f5e:	4632      	mov	r2, r6
 8010f60:	4649      	mov	r1, r9
 8010f62:	4640      	mov	r0, r8
 8010f64:	47d0      	blx	sl
 8010f66:	3001      	adds	r0, #1
 8010f68:	d0ad      	beq.n	8010ec6 <_printf_i+0x15a>
 8010f6a:	6823      	ldr	r3, [r4, #0]
 8010f6c:	079b      	lsls	r3, r3, #30
 8010f6e:	d413      	bmi.n	8010f98 <_printf_i+0x22c>
 8010f70:	68e0      	ldr	r0, [r4, #12]
 8010f72:	9b03      	ldr	r3, [sp, #12]
 8010f74:	4298      	cmp	r0, r3
 8010f76:	bfb8      	it	lt
 8010f78:	4618      	movlt	r0, r3
 8010f7a:	e7a6      	b.n	8010eca <_printf_i+0x15e>
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	4632      	mov	r2, r6
 8010f80:	4649      	mov	r1, r9
 8010f82:	4640      	mov	r0, r8
 8010f84:	47d0      	blx	sl
 8010f86:	3001      	adds	r0, #1
 8010f88:	d09d      	beq.n	8010ec6 <_printf_i+0x15a>
 8010f8a:	3501      	adds	r5, #1
 8010f8c:	68e3      	ldr	r3, [r4, #12]
 8010f8e:	9903      	ldr	r1, [sp, #12]
 8010f90:	1a5b      	subs	r3, r3, r1
 8010f92:	42ab      	cmp	r3, r5
 8010f94:	dcf2      	bgt.n	8010f7c <_printf_i+0x210>
 8010f96:	e7eb      	b.n	8010f70 <_printf_i+0x204>
 8010f98:	2500      	movs	r5, #0
 8010f9a:	f104 0619 	add.w	r6, r4, #25
 8010f9e:	e7f5      	b.n	8010f8c <_printf_i+0x220>
 8010fa0:	0801437a 	.word	0x0801437a
 8010fa4:	0801438b 	.word	0x0801438b

08010fa8 <__sflush_r>:
 8010fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fb0:	0716      	lsls	r6, r2, #28
 8010fb2:	4605      	mov	r5, r0
 8010fb4:	460c      	mov	r4, r1
 8010fb6:	d454      	bmi.n	8011062 <__sflush_r+0xba>
 8010fb8:	684b      	ldr	r3, [r1, #4]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	dc02      	bgt.n	8010fc4 <__sflush_r+0x1c>
 8010fbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	dd48      	ble.n	8011056 <__sflush_r+0xae>
 8010fc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010fc6:	2e00      	cmp	r6, #0
 8010fc8:	d045      	beq.n	8011056 <__sflush_r+0xae>
 8010fca:	2300      	movs	r3, #0
 8010fcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010fd0:	682f      	ldr	r7, [r5, #0]
 8010fd2:	6a21      	ldr	r1, [r4, #32]
 8010fd4:	602b      	str	r3, [r5, #0]
 8010fd6:	d030      	beq.n	801103a <__sflush_r+0x92>
 8010fd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010fda:	89a3      	ldrh	r3, [r4, #12]
 8010fdc:	0759      	lsls	r1, r3, #29
 8010fde:	d505      	bpl.n	8010fec <__sflush_r+0x44>
 8010fe0:	6863      	ldr	r3, [r4, #4]
 8010fe2:	1ad2      	subs	r2, r2, r3
 8010fe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010fe6:	b10b      	cbz	r3, 8010fec <__sflush_r+0x44>
 8010fe8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010fea:	1ad2      	subs	r2, r2, r3
 8010fec:	2300      	movs	r3, #0
 8010fee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ff0:	6a21      	ldr	r1, [r4, #32]
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	47b0      	blx	r6
 8010ff6:	1c43      	adds	r3, r0, #1
 8010ff8:	89a3      	ldrh	r3, [r4, #12]
 8010ffa:	d106      	bne.n	801100a <__sflush_r+0x62>
 8010ffc:	6829      	ldr	r1, [r5, #0]
 8010ffe:	291d      	cmp	r1, #29
 8011000:	d82b      	bhi.n	801105a <__sflush_r+0xb2>
 8011002:	4a2a      	ldr	r2, [pc, #168]	@ (80110ac <__sflush_r+0x104>)
 8011004:	40ca      	lsrs	r2, r1
 8011006:	07d6      	lsls	r6, r2, #31
 8011008:	d527      	bpl.n	801105a <__sflush_r+0xb2>
 801100a:	2200      	movs	r2, #0
 801100c:	6062      	str	r2, [r4, #4]
 801100e:	04d9      	lsls	r1, r3, #19
 8011010:	6922      	ldr	r2, [r4, #16]
 8011012:	6022      	str	r2, [r4, #0]
 8011014:	d504      	bpl.n	8011020 <__sflush_r+0x78>
 8011016:	1c42      	adds	r2, r0, #1
 8011018:	d101      	bne.n	801101e <__sflush_r+0x76>
 801101a:	682b      	ldr	r3, [r5, #0]
 801101c:	b903      	cbnz	r3, 8011020 <__sflush_r+0x78>
 801101e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011022:	602f      	str	r7, [r5, #0]
 8011024:	b1b9      	cbz	r1, 8011056 <__sflush_r+0xae>
 8011026:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801102a:	4299      	cmp	r1, r3
 801102c:	d002      	beq.n	8011034 <__sflush_r+0x8c>
 801102e:	4628      	mov	r0, r5
 8011030:	f7ff fbec 	bl	801080c <_free_r>
 8011034:	2300      	movs	r3, #0
 8011036:	6363      	str	r3, [r4, #52]	@ 0x34
 8011038:	e00d      	b.n	8011056 <__sflush_r+0xae>
 801103a:	2301      	movs	r3, #1
 801103c:	4628      	mov	r0, r5
 801103e:	47b0      	blx	r6
 8011040:	4602      	mov	r2, r0
 8011042:	1c50      	adds	r0, r2, #1
 8011044:	d1c9      	bne.n	8010fda <__sflush_r+0x32>
 8011046:	682b      	ldr	r3, [r5, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d0c6      	beq.n	8010fda <__sflush_r+0x32>
 801104c:	2b1d      	cmp	r3, #29
 801104e:	d001      	beq.n	8011054 <__sflush_r+0xac>
 8011050:	2b16      	cmp	r3, #22
 8011052:	d11e      	bne.n	8011092 <__sflush_r+0xea>
 8011054:	602f      	str	r7, [r5, #0]
 8011056:	2000      	movs	r0, #0
 8011058:	e022      	b.n	80110a0 <__sflush_r+0xf8>
 801105a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801105e:	b21b      	sxth	r3, r3
 8011060:	e01b      	b.n	801109a <__sflush_r+0xf2>
 8011062:	690f      	ldr	r7, [r1, #16]
 8011064:	2f00      	cmp	r7, #0
 8011066:	d0f6      	beq.n	8011056 <__sflush_r+0xae>
 8011068:	0793      	lsls	r3, r2, #30
 801106a:	680e      	ldr	r6, [r1, #0]
 801106c:	bf08      	it	eq
 801106e:	694b      	ldreq	r3, [r1, #20]
 8011070:	600f      	str	r7, [r1, #0]
 8011072:	bf18      	it	ne
 8011074:	2300      	movne	r3, #0
 8011076:	eba6 0807 	sub.w	r8, r6, r7
 801107a:	608b      	str	r3, [r1, #8]
 801107c:	f1b8 0f00 	cmp.w	r8, #0
 8011080:	dde9      	ble.n	8011056 <__sflush_r+0xae>
 8011082:	6a21      	ldr	r1, [r4, #32]
 8011084:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011086:	4643      	mov	r3, r8
 8011088:	463a      	mov	r2, r7
 801108a:	4628      	mov	r0, r5
 801108c:	47b0      	blx	r6
 801108e:	2800      	cmp	r0, #0
 8011090:	dc08      	bgt.n	80110a4 <__sflush_r+0xfc>
 8011092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801109a:	81a3      	strh	r3, [r4, #12]
 801109c:	f04f 30ff 	mov.w	r0, #4294967295
 80110a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110a4:	4407      	add	r7, r0
 80110a6:	eba8 0800 	sub.w	r8, r8, r0
 80110aa:	e7e7      	b.n	801107c <__sflush_r+0xd4>
 80110ac:	20400001 	.word	0x20400001

080110b0 <_fflush_r>:
 80110b0:	b538      	push	{r3, r4, r5, lr}
 80110b2:	690b      	ldr	r3, [r1, #16]
 80110b4:	4605      	mov	r5, r0
 80110b6:	460c      	mov	r4, r1
 80110b8:	b913      	cbnz	r3, 80110c0 <_fflush_r+0x10>
 80110ba:	2500      	movs	r5, #0
 80110bc:	4628      	mov	r0, r5
 80110be:	bd38      	pop	{r3, r4, r5, pc}
 80110c0:	b118      	cbz	r0, 80110ca <_fflush_r+0x1a>
 80110c2:	6a03      	ldr	r3, [r0, #32]
 80110c4:	b90b      	cbnz	r3, 80110ca <_fflush_r+0x1a>
 80110c6:	f7ff fa63 	bl	8010590 <__sinit>
 80110ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d0f3      	beq.n	80110ba <_fflush_r+0xa>
 80110d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80110d4:	07d0      	lsls	r0, r2, #31
 80110d6:	d404      	bmi.n	80110e2 <_fflush_r+0x32>
 80110d8:	0599      	lsls	r1, r3, #22
 80110da:	d402      	bmi.n	80110e2 <_fflush_r+0x32>
 80110dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80110de:	f7ff fb66 	bl	80107ae <__retarget_lock_acquire_recursive>
 80110e2:	4628      	mov	r0, r5
 80110e4:	4621      	mov	r1, r4
 80110e6:	f7ff ff5f 	bl	8010fa8 <__sflush_r>
 80110ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80110ec:	07da      	lsls	r2, r3, #31
 80110ee:	4605      	mov	r5, r0
 80110f0:	d4e4      	bmi.n	80110bc <_fflush_r+0xc>
 80110f2:	89a3      	ldrh	r3, [r4, #12]
 80110f4:	059b      	lsls	r3, r3, #22
 80110f6:	d4e1      	bmi.n	80110bc <_fflush_r+0xc>
 80110f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80110fa:	f7ff fb59 	bl	80107b0 <__retarget_lock_release_recursive>
 80110fe:	e7dd      	b.n	80110bc <_fflush_r+0xc>

08011100 <fiprintf>:
 8011100:	b40e      	push	{r1, r2, r3}
 8011102:	b503      	push	{r0, r1, lr}
 8011104:	4601      	mov	r1, r0
 8011106:	ab03      	add	r3, sp, #12
 8011108:	4805      	ldr	r0, [pc, #20]	@ (8011120 <fiprintf+0x20>)
 801110a:	f853 2b04 	ldr.w	r2, [r3], #4
 801110e:	6800      	ldr	r0, [r0, #0]
 8011110:	9301      	str	r3, [sp, #4]
 8011112:	f7ff fca5 	bl	8010a60 <_vfiprintf_r>
 8011116:	b002      	add	sp, #8
 8011118:	f85d eb04 	ldr.w	lr, [sp], #4
 801111c:	b003      	add	sp, #12
 801111e:	4770      	bx	lr
 8011120:	2000003c 	.word	0x2000003c

08011124 <__swbuf_r>:
 8011124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011126:	460e      	mov	r6, r1
 8011128:	4614      	mov	r4, r2
 801112a:	4605      	mov	r5, r0
 801112c:	b118      	cbz	r0, 8011136 <__swbuf_r+0x12>
 801112e:	6a03      	ldr	r3, [r0, #32]
 8011130:	b90b      	cbnz	r3, 8011136 <__swbuf_r+0x12>
 8011132:	f7ff fa2d 	bl	8010590 <__sinit>
 8011136:	69a3      	ldr	r3, [r4, #24]
 8011138:	60a3      	str	r3, [r4, #8]
 801113a:	89a3      	ldrh	r3, [r4, #12]
 801113c:	071a      	lsls	r2, r3, #28
 801113e:	d501      	bpl.n	8011144 <__swbuf_r+0x20>
 8011140:	6923      	ldr	r3, [r4, #16]
 8011142:	b943      	cbnz	r3, 8011156 <__swbuf_r+0x32>
 8011144:	4621      	mov	r1, r4
 8011146:	4628      	mov	r0, r5
 8011148:	f000 f82a 	bl	80111a0 <__swsetup_r>
 801114c:	b118      	cbz	r0, 8011156 <__swbuf_r+0x32>
 801114e:	f04f 37ff 	mov.w	r7, #4294967295
 8011152:	4638      	mov	r0, r7
 8011154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011156:	6823      	ldr	r3, [r4, #0]
 8011158:	6922      	ldr	r2, [r4, #16]
 801115a:	1a98      	subs	r0, r3, r2
 801115c:	6963      	ldr	r3, [r4, #20]
 801115e:	b2f6      	uxtb	r6, r6
 8011160:	4283      	cmp	r3, r0
 8011162:	4637      	mov	r7, r6
 8011164:	dc05      	bgt.n	8011172 <__swbuf_r+0x4e>
 8011166:	4621      	mov	r1, r4
 8011168:	4628      	mov	r0, r5
 801116a:	f7ff ffa1 	bl	80110b0 <_fflush_r>
 801116e:	2800      	cmp	r0, #0
 8011170:	d1ed      	bne.n	801114e <__swbuf_r+0x2a>
 8011172:	68a3      	ldr	r3, [r4, #8]
 8011174:	3b01      	subs	r3, #1
 8011176:	60a3      	str	r3, [r4, #8]
 8011178:	6823      	ldr	r3, [r4, #0]
 801117a:	1c5a      	adds	r2, r3, #1
 801117c:	6022      	str	r2, [r4, #0]
 801117e:	701e      	strb	r6, [r3, #0]
 8011180:	6962      	ldr	r2, [r4, #20]
 8011182:	1c43      	adds	r3, r0, #1
 8011184:	429a      	cmp	r2, r3
 8011186:	d004      	beq.n	8011192 <__swbuf_r+0x6e>
 8011188:	89a3      	ldrh	r3, [r4, #12]
 801118a:	07db      	lsls	r3, r3, #31
 801118c:	d5e1      	bpl.n	8011152 <__swbuf_r+0x2e>
 801118e:	2e0a      	cmp	r6, #10
 8011190:	d1df      	bne.n	8011152 <__swbuf_r+0x2e>
 8011192:	4621      	mov	r1, r4
 8011194:	4628      	mov	r0, r5
 8011196:	f7ff ff8b 	bl	80110b0 <_fflush_r>
 801119a:	2800      	cmp	r0, #0
 801119c:	d0d9      	beq.n	8011152 <__swbuf_r+0x2e>
 801119e:	e7d6      	b.n	801114e <__swbuf_r+0x2a>

080111a0 <__swsetup_r>:
 80111a0:	b538      	push	{r3, r4, r5, lr}
 80111a2:	4b29      	ldr	r3, [pc, #164]	@ (8011248 <__swsetup_r+0xa8>)
 80111a4:	4605      	mov	r5, r0
 80111a6:	6818      	ldr	r0, [r3, #0]
 80111a8:	460c      	mov	r4, r1
 80111aa:	b118      	cbz	r0, 80111b4 <__swsetup_r+0x14>
 80111ac:	6a03      	ldr	r3, [r0, #32]
 80111ae:	b90b      	cbnz	r3, 80111b4 <__swsetup_r+0x14>
 80111b0:	f7ff f9ee 	bl	8010590 <__sinit>
 80111b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111b8:	0719      	lsls	r1, r3, #28
 80111ba:	d422      	bmi.n	8011202 <__swsetup_r+0x62>
 80111bc:	06da      	lsls	r2, r3, #27
 80111be:	d407      	bmi.n	80111d0 <__swsetup_r+0x30>
 80111c0:	2209      	movs	r2, #9
 80111c2:	602a      	str	r2, [r5, #0]
 80111c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111c8:	81a3      	strh	r3, [r4, #12]
 80111ca:	f04f 30ff 	mov.w	r0, #4294967295
 80111ce:	e033      	b.n	8011238 <__swsetup_r+0x98>
 80111d0:	0758      	lsls	r0, r3, #29
 80111d2:	d512      	bpl.n	80111fa <__swsetup_r+0x5a>
 80111d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80111d6:	b141      	cbz	r1, 80111ea <__swsetup_r+0x4a>
 80111d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80111dc:	4299      	cmp	r1, r3
 80111de:	d002      	beq.n	80111e6 <__swsetup_r+0x46>
 80111e0:	4628      	mov	r0, r5
 80111e2:	f7ff fb13 	bl	801080c <_free_r>
 80111e6:	2300      	movs	r3, #0
 80111e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80111ea:	89a3      	ldrh	r3, [r4, #12]
 80111ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80111f0:	81a3      	strh	r3, [r4, #12]
 80111f2:	2300      	movs	r3, #0
 80111f4:	6063      	str	r3, [r4, #4]
 80111f6:	6923      	ldr	r3, [r4, #16]
 80111f8:	6023      	str	r3, [r4, #0]
 80111fa:	89a3      	ldrh	r3, [r4, #12]
 80111fc:	f043 0308 	orr.w	r3, r3, #8
 8011200:	81a3      	strh	r3, [r4, #12]
 8011202:	6923      	ldr	r3, [r4, #16]
 8011204:	b94b      	cbnz	r3, 801121a <__swsetup_r+0x7a>
 8011206:	89a3      	ldrh	r3, [r4, #12]
 8011208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801120c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011210:	d003      	beq.n	801121a <__swsetup_r+0x7a>
 8011212:	4621      	mov	r1, r4
 8011214:	4628      	mov	r0, r5
 8011216:	f000 f856 	bl	80112c6 <__smakebuf_r>
 801121a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801121e:	f013 0201 	ands.w	r2, r3, #1
 8011222:	d00a      	beq.n	801123a <__swsetup_r+0x9a>
 8011224:	2200      	movs	r2, #0
 8011226:	60a2      	str	r2, [r4, #8]
 8011228:	6962      	ldr	r2, [r4, #20]
 801122a:	4252      	negs	r2, r2
 801122c:	61a2      	str	r2, [r4, #24]
 801122e:	6922      	ldr	r2, [r4, #16]
 8011230:	b942      	cbnz	r2, 8011244 <__swsetup_r+0xa4>
 8011232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011236:	d1c5      	bne.n	80111c4 <__swsetup_r+0x24>
 8011238:	bd38      	pop	{r3, r4, r5, pc}
 801123a:	0799      	lsls	r1, r3, #30
 801123c:	bf58      	it	pl
 801123e:	6962      	ldrpl	r2, [r4, #20]
 8011240:	60a2      	str	r2, [r4, #8]
 8011242:	e7f4      	b.n	801122e <__swsetup_r+0x8e>
 8011244:	2000      	movs	r0, #0
 8011246:	e7f7      	b.n	8011238 <__swsetup_r+0x98>
 8011248:	2000003c 	.word	0x2000003c

0801124c <_sbrk_r>:
 801124c:	b538      	push	{r3, r4, r5, lr}
 801124e:	4d06      	ldr	r5, [pc, #24]	@ (8011268 <_sbrk_r+0x1c>)
 8011250:	2300      	movs	r3, #0
 8011252:	4604      	mov	r4, r0
 8011254:	4608      	mov	r0, r1
 8011256:	602b      	str	r3, [r5, #0]
 8011258:	f7ef fc42 	bl	8000ae0 <_sbrk>
 801125c:	1c43      	adds	r3, r0, #1
 801125e:	d102      	bne.n	8011266 <_sbrk_r+0x1a>
 8011260:	682b      	ldr	r3, [r5, #0]
 8011262:	b103      	cbz	r3, 8011266 <_sbrk_r+0x1a>
 8011264:	6023      	str	r3, [r4, #0]
 8011266:	bd38      	pop	{r3, r4, r5, pc}
 8011268:	2000856c 	.word	0x2000856c

0801126c <abort>:
 801126c:	b508      	push	{r3, lr}
 801126e:	2006      	movs	r0, #6
 8011270:	f000 f88e 	bl	8011390 <raise>
 8011274:	2001      	movs	r0, #1
 8011276:	f7ef fbbb 	bl	80009f0 <_exit>

0801127a <__swhatbuf_r>:
 801127a:	b570      	push	{r4, r5, r6, lr}
 801127c:	460c      	mov	r4, r1
 801127e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011282:	2900      	cmp	r1, #0
 8011284:	b096      	sub	sp, #88	@ 0x58
 8011286:	4615      	mov	r5, r2
 8011288:	461e      	mov	r6, r3
 801128a:	da0d      	bge.n	80112a8 <__swhatbuf_r+0x2e>
 801128c:	89a3      	ldrh	r3, [r4, #12]
 801128e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011292:	f04f 0100 	mov.w	r1, #0
 8011296:	bf14      	ite	ne
 8011298:	2340      	movne	r3, #64	@ 0x40
 801129a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801129e:	2000      	movs	r0, #0
 80112a0:	6031      	str	r1, [r6, #0]
 80112a2:	602b      	str	r3, [r5, #0]
 80112a4:	b016      	add	sp, #88	@ 0x58
 80112a6:	bd70      	pop	{r4, r5, r6, pc}
 80112a8:	466a      	mov	r2, sp
 80112aa:	f000 f879 	bl	80113a0 <_fstat_r>
 80112ae:	2800      	cmp	r0, #0
 80112b0:	dbec      	blt.n	801128c <__swhatbuf_r+0x12>
 80112b2:	9901      	ldr	r1, [sp, #4]
 80112b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80112b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80112bc:	4259      	negs	r1, r3
 80112be:	4159      	adcs	r1, r3
 80112c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80112c4:	e7eb      	b.n	801129e <__swhatbuf_r+0x24>

080112c6 <__smakebuf_r>:
 80112c6:	898b      	ldrh	r3, [r1, #12]
 80112c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80112ca:	079d      	lsls	r5, r3, #30
 80112cc:	4606      	mov	r6, r0
 80112ce:	460c      	mov	r4, r1
 80112d0:	d507      	bpl.n	80112e2 <__smakebuf_r+0x1c>
 80112d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80112d6:	6023      	str	r3, [r4, #0]
 80112d8:	6123      	str	r3, [r4, #16]
 80112da:	2301      	movs	r3, #1
 80112dc:	6163      	str	r3, [r4, #20]
 80112de:	b003      	add	sp, #12
 80112e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112e2:	ab01      	add	r3, sp, #4
 80112e4:	466a      	mov	r2, sp
 80112e6:	f7ff ffc8 	bl	801127a <__swhatbuf_r>
 80112ea:	9f00      	ldr	r7, [sp, #0]
 80112ec:	4605      	mov	r5, r0
 80112ee:	4639      	mov	r1, r7
 80112f0:	4630      	mov	r0, r6
 80112f2:	f7ff faff 	bl	80108f4 <_malloc_r>
 80112f6:	b948      	cbnz	r0, 801130c <__smakebuf_r+0x46>
 80112f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112fc:	059a      	lsls	r2, r3, #22
 80112fe:	d4ee      	bmi.n	80112de <__smakebuf_r+0x18>
 8011300:	f023 0303 	bic.w	r3, r3, #3
 8011304:	f043 0302 	orr.w	r3, r3, #2
 8011308:	81a3      	strh	r3, [r4, #12]
 801130a:	e7e2      	b.n	80112d2 <__smakebuf_r+0xc>
 801130c:	89a3      	ldrh	r3, [r4, #12]
 801130e:	6020      	str	r0, [r4, #0]
 8011310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011314:	81a3      	strh	r3, [r4, #12]
 8011316:	9b01      	ldr	r3, [sp, #4]
 8011318:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801131c:	b15b      	cbz	r3, 8011336 <__smakebuf_r+0x70>
 801131e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011322:	4630      	mov	r0, r6
 8011324:	f000 f84e 	bl	80113c4 <_isatty_r>
 8011328:	b128      	cbz	r0, 8011336 <__smakebuf_r+0x70>
 801132a:	89a3      	ldrh	r3, [r4, #12]
 801132c:	f023 0303 	bic.w	r3, r3, #3
 8011330:	f043 0301 	orr.w	r3, r3, #1
 8011334:	81a3      	strh	r3, [r4, #12]
 8011336:	89a3      	ldrh	r3, [r4, #12]
 8011338:	431d      	orrs	r5, r3
 801133a:	81a5      	strh	r5, [r4, #12]
 801133c:	e7cf      	b.n	80112de <__smakebuf_r+0x18>

0801133e <_raise_r>:
 801133e:	291f      	cmp	r1, #31
 8011340:	b538      	push	{r3, r4, r5, lr}
 8011342:	4605      	mov	r5, r0
 8011344:	460c      	mov	r4, r1
 8011346:	d904      	bls.n	8011352 <_raise_r+0x14>
 8011348:	2316      	movs	r3, #22
 801134a:	6003      	str	r3, [r0, #0]
 801134c:	f04f 30ff 	mov.w	r0, #4294967295
 8011350:	bd38      	pop	{r3, r4, r5, pc}
 8011352:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011354:	b112      	cbz	r2, 801135c <_raise_r+0x1e>
 8011356:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801135a:	b94b      	cbnz	r3, 8011370 <_raise_r+0x32>
 801135c:	4628      	mov	r0, r5
 801135e:	f000 f853 	bl	8011408 <_getpid_r>
 8011362:	4622      	mov	r2, r4
 8011364:	4601      	mov	r1, r0
 8011366:	4628      	mov	r0, r5
 8011368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801136c:	f000 b83a 	b.w	80113e4 <_kill_r>
 8011370:	2b01      	cmp	r3, #1
 8011372:	d00a      	beq.n	801138a <_raise_r+0x4c>
 8011374:	1c59      	adds	r1, r3, #1
 8011376:	d103      	bne.n	8011380 <_raise_r+0x42>
 8011378:	2316      	movs	r3, #22
 801137a:	6003      	str	r3, [r0, #0]
 801137c:	2001      	movs	r0, #1
 801137e:	e7e7      	b.n	8011350 <_raise_r+0x12>
 8011380:	2100      	movs	r1, #0
 8011382:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011386:	4620      	mov	r0, r4
 8011388:	4798      	blx	r3
 801138a:	2000      	movs	r0, #0
 801138c:	e7e0      	b.n	8011350 <_raise_r+0x12>
	...

08011390 <raise>:
 8011390:	4b02      	ldr	r3, [pc, #8]	@ (801139c <raise+0xc>)
 8011392:	4601      	mov	r1, r0
 8011394:	6818      	ldr	r0, [r3, #0]
 8011396:	f7ff bfd2 	b.w	801133e <_raise_r>
 801139a:	bf00      	nop
 801139c:	2000003c 	.word	0x2000003c

080113a0 <_fstat_r>:
 80113a0:	b538      	push	{r3, r4, r5, lr}
 80113a2:	4d07      	ldr	r5, [pc, #28]	@ (80113c0 <_fstat_r+0x20>)
 80113a4:	2300      	movs	r3, #0
 80113a6:	4604      	mov	r4, r0
 80113a8:	4608      	mov	r0, r1
 80113aa:	4611      	mov	r1, r2
 80113ac:	602b      	str	r3, [r5, #0]
 80113ae:	f7ef fb6f 	bl	8000a90 <_fstat>
 80113b2:	1c43      	adds	r3, r0, #1
 80113b4:	d102      	bne.n	80113bc <_fstat_r+0x1c>
 80113b6:	682b      	ldr	r3, [r5, #0]
 80113b8:	b103      	cbz	r3, 80113bc <_fstat_r+0x1c>
 80113ba:	6023      	str	r3, [r4, #0]
 80113bc:	bd38      	pop	{r3, r4, r5, pc}
 80113be:	bf00      	nop
 80113c0:	2000856c 	.word	0x2000856c

080113c4 <_isatty_r>:
 80113c4:	b538      	push	{r3, r4, r5, lr}
 80113c6:	4d06      	ldr	r5, [pc, #24]	@ (80113e0 <_isatty_r+0x1c>)
 80113c8:	2300      	movs	r3, #0
 80113ca:	4604      	mov	r4, r0
 80113cc:	4608      	mov	r0, r1
 80113ce:	602b      	str	r3, [r5, #0]
 80113d0:	f7ef fb6e 	bl	8000ab0 <_isatty>
 80113d4:	1c43      	adds	r3, r0, #1
 80113d6:	d102      	bne.n	80113de <_isatty_r+0x1a>
 80113d8:	682b      	ldr	r3, [r5, #0]
 80113da:	b103      	cbz	r3, 80113de <_isatty_r+0x1a>
 80113dc:	6023      	str	r3, [r4, #0]
 80113de:	bd38      	pop	{r3, r4, r5, pc}
 80113e0:	2000856c 	.word	0x2000856c

080113e4 <_kill_r>:
 80113e4:	b538      	push	{r3, r4, r5, lr}
 80113e6:	4d07      	ldr	r5, [pc, #28]	@ (8011404 <_kill_r+0x20>)
 80113e8:	2300      	movs	r3, #0
 80113ea:	4604      	mov	r4, r0
 80113ec:	4608      	mov	r0, r1
 80113ee:	4611      	mov	r1, r2
 80113f0:	602b      	str	r3, [r5, #0]
 80113f2:	f7ef faeb 	bl	80009cc <_kill>
 80113f6:	1c43      	adds	r3, r0, #1
 80113f8:	d102      	bne.n	8011400 <_kill_r+0x1c>
 80113fa:	682b      	ldr	r3, [r5, #0]
 80113fc:	b103      	cbz	r3, 8011400 <_kill_r+0x1c>
 80113fe:	6023      	str	r3, [r4, #0]
 8011400:	bd38      	pop	{r3, r4, r5, pc}
 8011402:	bf00      	nop
 8011404:	2000856c 	.word	0x2000856c

08011408 <_getpid_r>:
 8011408:	f7ef bad8 	b.w	80009bc <_getpid>

0801140c <_init>:
 801140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801140e:	bf00      	nop
 8011410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011412:	bc08      	pop	{r3}
 8011414:	469e      	mov	lr, r3
 8011416:	4770      	bx	lr

08011418 <_fini>:
 8011418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801141a:	bf00      	nop
 801141c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801141e:	bc08      	pop	{r3}
 8011420:	469e      	mov	lr, r3
 8011422:	4770      	bx	lr


STM32F407-MODBUS-OVER-ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e30  0801278c  0801278c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155bc  080155bc  00017108  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080155bc  080155bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155c4  080155c4  00017108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155c4  080155c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080155c8  080155c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  080155cc  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00017108  2**0
                  CONTENTS
 10 .bss          000085dc  20000108  20000108  00017108  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200086e4  200086e4  00017108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00017108  2**0
                  CONTENTS, READONLY
 13 .debug_info   000258b0  00000000  00000000  00017138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006742  00000000  00000000  0003c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d60  00000000  00000000  00043130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001751  00000000  00000000  00044e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030c3f  00000000  00000000  000465e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f7da  00000000  00000000  00077220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2502  00000000  00000000  000a69fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00198efc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000081f4  00000000  00000000  00198f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001a1134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012774 	.word	0x08012774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	08012774 	.word	0x08012774

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fdc7 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f8bd 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f9ed 	bl	8000988 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005ae:	f004 fbaf 	bl	8004d10 <MX_LWIP_Init>
  MX_UART4_Init();
 80005b2:	f000 f9bf 	bl	8000934 <MX_UART4_Init>
  MX_ADC1_Init();
 80005b6:	f000 f91d 	bl	80007f4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005ba:	f000 f96d 	bl	8000898 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80005be:	484d      	ldr	r0, [pc, #308]	@ (80006f4 <main+0x158>)
 80005c0:	f003 fcae 	bl	8003f20 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 80005c4:	484c      	ldr	r0, [pc, #304]	@ (80006f8 <main+0x15c>)
 80005c6:	f000 fe8f 	bl	80012e8 <HAL_ADC_Start_IT>

	eMBErrorCode err;
	err = eMBTCPInit(502);
 80005ca:	f44f 70fb 	mov.w	r0, #502	@ 0x1f6
 80005ce:	f00f fffd 	bl	80105cc <eMBTCPInit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	77fb      	strb	r3, [r7, #31]
	if (err != MB_ENOERR) {
 80005d6:	7ffb      	ldrb	r3, [r7, #31]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d016      	beq.n	800060a <main+0x6e>
		DEBUG_PRINTF("eMBTCPInit failed: %d\r\n", err);
 80005dc:	7ffb      	ldrb	r3, [r7, #31]
 80005de:	4a47      	ldr	r2, [pc, #284]	@ (80006fc <main+0x160>)
 80005e0:	2140      	movs	r1, #64	@ 0x40
 80005e2:	4847      	ldr	r0, [pc, #284]	@ (8000700 <main+0x164>)
 80005e4:	f011 f824 	bl	8011630 <sniprintf>
 80005e8:	6038      	str	r0, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f2:	4943      	ldr	r1, [pc, #268]	@ (8000700 <main+0x164>)
 80005f4:	4843      	ldr	r0, [pc, #268]	@ (8000704 <main+0x168>)
 80005f6:	f003 ffcf 	bl	8004598 <HAL_UART_Transmit>
		LED_ON(LED_RED_PIN);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000600:	4841      	ldr	r0, [pc, #260]	@ (8000708 <main+0x16c>)
 8000602:	f002 ffa7 	bl	8003554 <HAL_GPIO_WritePin>
		while (1); // hang on error
 8000606:	bf00      	nop
 8000608:	e7fd      	b.n	8000606 <main+0x6a>
	} else {
		DEBUG_PRINTF("eMBTCPInit OK.\r\n");
 800060a:	4a40      	ldr	r2, [pc, #256]	@ (800070c <main+0x170>)
 800060c:	2140      	movs	r1, #64	@ 0x40
 800060e:	483c      	ldr	r0, [pc, #240]	@ (8000700 <main+0x164>)
 8000610:	f011 f80e 	bl	8011630 <sniprintf>
 8000614:	61b8      	str	r0, [r7, #24]
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	b29a      	uxth	r2, r3
 800061a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061e:	4938      	ldr	r1, [pc, #224]	@ (8000700 <main+0x164>)
 8000620:	4838      	ldr	r0, [pc, #224]	@ (8000704 <main+0x168>)
 8000622:	f003 ffb9 	bl	8004598 <HAL_UART_Transmit>
	}

	err = eMBEnable();
 8000626:	f010 f823 	bl	8010670 <eMBEnable>
 800062a:	4603      	mov	r3, r0
 800062c:	77fb      	strb	r3, [r7, #31]
	if (err != MB_ENOERR) {
 800062e:	7ffb      	ldrb	r3, [r7, #31]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d016      	beq.n	8000662 <main+0xc6>
		DEBUG_PRINTF("eMBEnable failed: %d\r\n", err);
 8000634:	7ffb      	ldrb	r3, [r7, #31]
 8000636:	4a36      	ldr	r2, [pc, #216]	@ (8000710 <main+0x174>)
 8000638:	2140      	movs	r1, #64	@ 0x40
 800063a:	4831      	ldr	r0, [pc, #196]	@ (8000700 <main+0x164>)
 800063c:	f010 fff8 	bl	8011630 <sniprintf>
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	b29a      	uxth	r2, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064a:	492d      	ldr	r1, [pc, #180]	@ (8000700 <main+0x164>)
 800064c:	482d      	ldr	r0, [pc, #180]	@ (8000704 <main+0x168>)
 800064e:	f003 ffa3 	bl	8004598 <HAL_UART_Transmit>
		LED_ON(LED_RED_PIN);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000658:	482b      	ldr	r0, [pc, #172]	@ (8000708 <main+0x16c>)
 800065a:	f002 ff7b 	bl	8003554 <HAL_GPIO_WritePin>
		while (1);
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0xc2>
	} else {
		DEBUG_PRINTF("eMBEnable OK.\r\n");
 8000662:	4a2c      	ldr	r2, [pc, #176]	@ (8000714 <main+0x178>)
 8000664:	2140      	movs	r1, #64	@ 0x40
 8000666:	4826      	ldr	r0, [pc, #152]	@ (8000700 <main+0x164>)
 8000668:	f010 ffe2 	bl	8011630 <sniprintf>
 800066c:	6178      	str	r0, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	b29a      	uxth	r2, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000676:	4922      	ldr	r1, [pc, #136]	@ (8000700 <main+0x164>)
 8000678:	4822      	ldr	r0, [pc, #136]	@ (8000704 <main+0x168>)
 800067a:	f003 ff8d 	bl	8004598 <HAL_UART_Transmit>
	}
	Modbus_InitCallbacks();
 800067e:	f010 f923 	bl	80108c8 <Modbus_InitCallbacks>
	DEBUG_PRINTF("Callbacks registered.\r\n");
 8000682:	4a25      	ldr	r2, [pc, #148]	@ (8000718 <main+0x17c>)
 8000684:	2140      	movs	r1, #64	@ 0x40
 8000686:	481e      	ldr	r0, [pc, #120]	@ (8000700 <main+0x164>)
 8000688:	f010 ffd2 	bl	8011630 <sniprintf>
 800068c:	6138      	str	r0, [r7, #16]
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	b29a      	uxth	r2, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000696:	491a      	ldr	r1, [pc, #104]	@ (8000700 <main+0x164>)
 8000698:	481a      	ldr	r0, [pc, #104]	@ (8000704 <main+0x168>)
 800069a:	f003 ff7d 	bl	8004598 <HAL_UART_Transmit>

	Modbus_SetHolding(0, 65);
 800069e:	2141      	movs	r1, #65	@ 0x41
 80006a0:	2000      	movs	r0, #0
 80006a2:	f010 faf9 	bl	8010c98 <Modbus_SetHolding>
	DEBUG_PRINTF("Holding[0] = 65 set.\r\n");
 80006a6:	4a1d      	ldr	r2, [pc, #116]	@ (800071c <main+0x180>)
 80006a8:	2140      	movs	r1, #64	@ 0x40
 80006aa:	4815      	ldr	r0, [pc, #84]	@ (8000700 <main+0x164>)
 80006ac:	f010 ffc0 	bl	8011630 <sniprintf>
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ba:	4911      	ldr	r1, [pc, #68]	@ (8000700 <main+0x164>)
 80006bc:	4811      	ldr	r0, [pc, #68]	@ (8000704 <main+0x168>)
 80006be:	f003 ff6b 	bl	8004598 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_LWIP_Process();
 80006c2:	f004 fc65 	bl	8004f90 <MX_LWIP_Process>

		err = eMBPoll();
 80006c6:	f00f ffef 	bl	80106a8 <eMBPoll>
 80006ca:	4603      	mov	r3, r0
 80006cc:	77fb      	strb	r3, [r7, #31]
		if (err != MB_ENOERR) {
 80006ce:	7ffb      	ldrb	r3, [r7, #31]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0f6      	beq.n	80006c2 <main+0x126>
			DEBUG_PRINTF("eMBPoll error: %d\r\n", err);
 80006d4:	7ffb      	ldrb	r3, [r7, #31]
 80006d6:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <main+0x184>)
 80006d8:	2140      	movs	r1, #64	@ 0x40
 80006da:	4809      	ldr	r0, [pc, #36]	@ (8000700 <main+0x164>)
 80006dc:	f010 ffa8 	bl	8011630 <sniprintf>
 80006e0:	60b8      	str	r0, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ea:	4905      	ldr	r1, [pc, #20]	@ (8000700 <main+0x164>)
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <main+0x168>)
 80006ee:	f003 ff53 	bl	8004598 <HAL_UART_Transmit>
		MX_LWIP_Process();
 80006f2:	e7e6      	b.n	80006c2 <main+0x126>
 80006f4:	2000016c 	.word	0x2000016c
 80006f8:	20000124 	.word	0x20000124
 80006fc:	0801278c 	.word	0x0801278c
 8000700:	200001fc 	.word	0x200001fc
 8000704:	200001b4 	.word	0x200001b4
 8000708:	40020c00 	.word	0x40020c00
 800070c:	080127a4 	.word	0x080127a4
 8000710:	080127b8 	.word	0x080127b8
 8000714:	080127d0 	.word	0x080127d0
 8000718:	080127e0 	.word	0x080127e0
 800071c:	080127f8 	.word	0x080127f8
 8000720:	08012810 	.word	0x08012810

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	@ 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f011 f81f 	bl	8011776 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <SystemClock_Config+0xc8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	4a26      	ldr	r2, [pc, #152]	@ (80007ec <SystemClock_Config+0xc8>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	@ 0x40
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <SystemClock_Config+0xc8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <SystemClock_Config+0xcc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a20      	ldr	r2, [pc, #128]	@ (80007f0 <SystemClock_Config+0xcc>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <SystemClock_Config+0xcc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2310      	movs	r3, #16
 800078a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000794:	2308      	movs	r3, #8
 8000796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000798:	2340      	movs	r3, #64	@ 0x40
 800079a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 ff11 	bl	80035d0 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b4:	f000 f9aa 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007c0:	2380      	movs	r3, #128	@ 0x80
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2101      	movs	r1, #1
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 f974 	bl	8003ac0 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007de:	f000 f995 	bl	8000b0c <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	@ 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007fa:	463b      	mov	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000808:	4a22      	ldr	r2, [pc, #136]	@ (8000894 <MX_ADC1_Init+0xa0>)
 800080a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800080c:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <MX_ADC1_Init+0x9c>)
 800080e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000812:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000814:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800081a:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_ADC1_Init+0x9c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000822:	2200      	movs	r2, #0
 8000824:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000836:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000838:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800083c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000846:	2201      	movs	r2, #1
 8000848:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_ADC1_Init+0x9c>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000854:	2201      	movs	r2, #1
 8000856:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000858:	480d      	ldr	r0, [pc, #52]	@ (8000890 <MX_ADC1_Init+0x9c>)
 800085a:	f000 fd01 	bl	8001260 <HAL_ADC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000864:	f000 f952 	bl	8000b0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000868:	2310      	movs	r3, #16
 800086a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000870:	2307      	movs	r3, #7
 8000872:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_ADC1_Init+0x9c>)
 800087a:	f000 ff45 	bl	8001708 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000884:	f000 f942 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000124 	.word	0x20000124
 8000894:	40012000 	.word	0x40012000

08000898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	463b      	mov	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <MX_TIM2_Init+0x98>)
 80008b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <MX_TIM2_Init+0x98>)
 80008be:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80008c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_TIM2_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <MX_TIM2_Init+0x98>)
 80008cc:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80008d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_TIM2_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_TIM2_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008de:	4814      	ldr	r0, [pc, #80]	@ (8000930 <MX_TIM2_Init+0x98>)
 80008e0:	f003 face 	bl	8003e80 <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008ea:	f000 f90f 	bl	8000b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	@ (8000930 <MX_TIM2_Init+0x98>)
 80008fc:	f003 fb78 	bl	8003ff0 <HAL_TIM_ConfigClockSource>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000906:	f000 f901 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800090a:	2320      	movs	r3, #32
 800090c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	@ (8000930 <MX_TIM2_Init+0x98>)
 8000918:	f003 fd72 	bl	8004400 <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000922:	f000 f8f3 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000016c 	.word	0x2000016c

08000934 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_UART4_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <MX_UART4_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <MX_UART4_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_UART4_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_UART4_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_UART4_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_UART4_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_UART4_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_UART4_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_UART4_Init+0x4c>)
 800096c:	f003 fdc4 	bl	80044f8 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 f8c9 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001b4 	.word	0x200001b4
 8000984:	40004c00 	.word	0x40004c00

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b32      	ldr	r3, [pc, #200]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a31      	ldr	r2, [pc, #196]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b2f      	ldr	r3, [pc, #188]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b28      	ldr	r3, [pc, #160]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a23      	ldr	r2, [pc, #140]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_GPIO_Init+0xe4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000a14:	4816      	ldr	r0, [pc, #88]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 8000a16:	f002 fd9d 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4811      	ldr	r0, [pc, #68]	@ (8000a74 <MX_GPIO_Init+0xec>)
 8000a30:	f002 fbf4 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a34:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4808      	ldr	r0, [pc, #32]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 8000a4e:	f002 fbe5 	bl	800321c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2006      	movs	r0, #6
 8000a58:	f001 f959 	bl	8001d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a5c:	2006      	movs	r0, #6
 8000a5e:	f001 f972 	bl	8001d46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	40020000 	.word	0x40020000

08000a78 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1c      	ldr	r2, [pc, #112]	@ (8000af8 <HAL_ADC_ConvCpltCallback+0x80>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d132      	bne.n	8000af0 <HAL_ADC_ConvCpltCallback+0x78>
    {
        uint32_t raw = HAL_ADC_GetValue(hadc);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 fe1a 	bl	80016c4 <HAL_ADC_GetValue>
 8000a90:	6178      	str	r0, [r7, #20]

        float Vsense = ((float)raw) * 3.3f / 4095.0f;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a9c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000afc <HAL_ADC_ConvCpltCallback+0x84>
 8000aa0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000aa4:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000b00 <HAL_ADC_ConvCpltCallback+0x88>
 8000aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aac:	edc7 7a04 	vstr	s15, [r7, #16]
        float temperature = ((Vsense - 0.76f) / 0.0025f) + 25.0f;
 8000ab0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ab4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000b04 <HAL_ADC_ConvCpltCallback+0x8c>
 8000ab8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000abc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000b08 <HAL_ADC_ConvCpltCallback+0x90>
 8000ac0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ac4:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000acc:	edc7 7a03 	vstr	s15, [r7, #12]

        uint16_t temp_scaled = (uint16_t)(temperature * 10.0f);
 8000ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ad4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ae0:	ee17 3a90 	vmov	r3, s15
 8000ae4:	817b      	strh	r3, [r7, #10]

        Modbus_SetHolding(1, temp_scaled);
 8000ae6:	897b      	ldrh	r3, [r7, #10]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	2001      	movs	r0, #1
 8000aec:	f010 f8d4 	bl	8010c98 <Modbus_SetHolding>
    }
}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40012000 	.word	0x40012000
 8000afc:	40533333 	.word	0x40533333
 8000b00:	457ff000 	.word	0x457ff000
 8000b04:	3f428f5c 	.word	0x3f428f5c
 8000b08:	3b23d70a 	.word	0x3b23d70a

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	4a0f      	ldr	r2, [pc, #60]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb0 <HAL_ADC_MspInit+0x48>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d115      	bne.n	8000ba6 <HAL_ADC_MspInit+0x3e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <HAL_ADC_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <HAL_ADC_MspInit+0x4c>)
 8000b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <HAL_ADC_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2012      	movs	r0, #18
 8000b9c:	f001 f8b7 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ba0:	2012      	movs	r0, #18
 8000ba2:	f001 f8d0 	bl	8001d46 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40012000 	.word	0x40012000
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bc8:	d10d      	bne.n	8000be6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	@ (8000c7c <HAL_UART_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12c      	bne.n	8000c74 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	4a17      	ldr	r2, [pc, #92]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c52:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c64:	2308      	movs	r3, #8
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <HAL_UART_MspInit+0x8c>)
 8000c70:	f002 fad4 	bl	800321c <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	@ 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40004c00 	.word	0x40004c00
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020800 	.word	0x40020800

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <NMI_Handler+0x4>

08000c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <MemManage_Handler+0x4>

08000ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <UsageFault_Handler+0x4>

08000cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cde:	f000 fa7b 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f002 fc4c 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <ADC_IRQHandler+0x10>)
 8000cfa:	f000 fbd3 	bl	80014a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000124 	.word	0x20000124

08000d08 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <ETH_IRQHandler+0x10>)
 8000d0e:	f001 fb97 	bl	8002440 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20004d60 	.word	0x20004d60

08000d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return 1;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_kill>:

int _kill(int pid, int sig)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d36:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <_kill+0x20>)
 8000d38:	2216      	movs	r2, #22
 8000d3a:	601a      	str	r2, [r3, #0]
  return -1;
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	200086d4 	.word	0x200086d4

08000d50 <_exit>:

void _exit (int status)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ffe5 	bl	8000d2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d62:	bf00      	nop
 8000d64:	e7fd      	b.n	8000d62 <_exit+0x12>

08000d66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e00a      	b.n	8000d8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d78:	f3af 8000 	nop.w
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1c5a      	adds	r2, r3, #1
 8000d82:	60ba      	str	r2, [r7, #8]
 8000d84:	b2ca      	uxtb	r2, r1
 8000d86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dbf0      	blt.n	8000d78 <_read+0x12>
  }

  return len;
 8000d96:	687b      	ldr	r3, [r7, #4]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e009      	b.n	8000dc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	60ba      	str	r2, [r7, #8]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	dbf1      	blt.n	8000db2 <_write+0x12>
  }
  return len;
 8000dce:	687b      	ldr	r3, [r7, #4]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_close>:

int _close(int file)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e00:	605a      	str	r2, [r3, #4]
  return 0;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_isatty>:

int _isatty(int file)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e18:	2301      	movs	r3, #1
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b085      	sub	sp, #20
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	@ (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d205      	bcs.n	8000e7c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <_sbrk+0x6c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	e009      	b.n	8000e90 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a06      	ldr	r2, [pc, #24]	@ (8000ea4 <_sbrk+0x64>)
 8000e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20020000 	.word	0x20020000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	2000023c 	.word	0x2000023c
 8000ea8:	200086e8 	.word	0x200086e8
 8000eac:	200086d4 	.word	0x200086d4

08000eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ed8:	f7ff ffea 	bl	8000eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	@ (8000f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f010 fc87 	bl	8011814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fb49 	bl	800059c <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000f18:	080155cc 	.word	0x080155cc
  ldr r2, =_sbss
 8000f1c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000f20:	200086e4 	.word	0x200086e4

08000f24 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <CAN1_RX0_IRQHandler>

08000f26 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00b      	beq.n	8000f4e <LAN8742_RegisterBusIO+0x28>
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d007      	beq.n	8000f4e <LAN8742_RegisterBusIO+0x28>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <LAN8742_RegisterBusIO+0x28>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e014      	b.n	8000f7e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d139      	bne.n	800101a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e01c      	b.n	8000ffa <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	2112      	movs	r1, #18
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	4798      	blx	r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	da03      	bge.n	8000fdc <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000fd4:	f06f 0304 	mvn.w	r3, #4
 8000fd8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000fda:	e00b      	b.n	8000ff4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d105      	bne.n	8000ff4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
         break;
 8000ff2:	e005      	b.n	8001000 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b1f      	cmp	r3, #31
 8000ffe:	d9df      	bls.n	8000fc0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b1f      	cmp	r3, #31
 8001006:	d902      	bls.n	800100e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001008:	f06f 0302 	mvn.w	r3, #2
 800100c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800101a:	693b      	ldr	r3, [r7, #16]
 }
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6810      	ldr	r0, [r2, #0]
 8001038:	f107 020c 	add.w	r2, r7, #12
 800103c:	2101      	movs	r1, #1
 800103e:	4798      	blx	r3
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	da02      	bge.n	800104c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001046:	f06f 0304 	mvn.w	r3, #4
 800104a:	e06e      	b.n	800112a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6810      	ldr	r0, [r2, #0]
 8001054:	f107 020c 	add.w	r2, r7, #12
 8001058:	2101      	movs	r1, #1
 800105a:	4798      	blx	r3
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	da02      	bge.n	8001068 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001062:	f06f 0304 	mvn.w	r3, #4
 8001066:	e060      	b.n	800112a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001072:	2301      	movs	r3, #1
 8001074:	e059      	b.n	800112a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6810      	ldr	r0, [r2, #0]
 800107e:	f107 020c 	add.w	r2, r7, #12
 8001082:	2100      	movs	r1, #0
 8001084:	4798      	blx	r3
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	da02      	bge.n	8001092 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800108c:	f06f 0304 	mvn.w	r3, #4
 8001090:	e04b      	b.n	800112a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d11b      	bne.n	80010d4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d006      	beq.n	80010b4 <LAN8742_GetLinkState+0x90>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010b0:	2302      	movs	r3, #2
 80010b2:	e03a      	b.n	800112a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010be:	2303      	movs	r3, #3
 80010c0:	e033      	b.n	800112a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010cc:	2304      	movs	r3, #4
 80010ce:	e02c      	b.n	800112a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010d0:	2305      	movs	r3, #5
 80010d2:	e02a      	b.n	800112a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	6810      	ldr	r0, [r2, #0]
 80010dc:	f107 020c 	add.w	r2, r7, #12
 80010e0:	211f      	movs	r1, #31
 80010e2:	4798      	blx	r3
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	da02      	bge.n	80010f0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010ea:	f06f 0304 	mvn.w	r3, #4
 80010ee:	e01c      	b.n	800112a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010fa:	2306      	movs	r3, #6
 80010fc:	e015      	b.n	800112a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f003 031c 	and.w	r3, r3, #28
 8001104:	2b18      	cmp	r3, #24
 8001106:	d101      	bne.n	800110c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001108:	2302      	movs	r3, #2
 800110a:	e00e      	b.n	800112a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 031c 	and.w	r3, r3, #28
 8001112:	2b08      	cmp	r3, #8
 8001114:	d101      	bne.n	800111a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001116:	2303      	movs	r3, #3
 8001118:	e007      	b.n	800112a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f003 031c 	and.w	r3, r3, #28
 8001120:	2b14      	cmp	r3, #20
 8001122:	d101      	bne.n	8001128 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001124:	2304      	movs	r3, #4
 8001126:	e000      	b.n	800112a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001128:	2305      	movs	r3, #5
    }
  }
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <HAL_Init+0x40>)
 800113e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <HAL_Init+0x40>)
 800114a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800114e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <HAL_Init+0x40>)
 8001156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800115a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 fdcb 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	200f      	movs	r0, #15
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fcd6 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023c00 	.word	0x40023c00

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fde3 	bl	8001d62 <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 fdab 	bl	8001d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000240 	.word	0x20000240

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000240 	.word	0x20000240

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff ffee 	bl	8001200 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_Delay+0x44>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffde 	bl	8001200 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008

08001260 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e033      	b.n	80012de <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fc72 	bl	8000b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	f003 0310 	and.w	r3, r3, #16
 800129a:	2b00      	cmp	r3, #0
 800129c:	d118      	bne.n	80012d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012a6:	f023 0302 	bic.w	r3, r3, #2
 80012aa:	f043 0202 	orr.w	r2, r3, #2
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fb4a 	bl	800194c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f023 0303 	bic.w	r3, r3, #3
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80012ce:	e001      	b.n	80012d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d101      	bne.n	8001302 <HAL_ADC_Start_IT+0x1a>
 80012fe:	2302      	movs	r3, #2
 8001300:	e0bd      	b.n	800147e <HAL_ADC_Start_IT+0x196>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	d018      	beq.n	800134a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001328:	4b58      	ldr	r3, [pc, #352]	@ (800148c <HAL_ADC_Start_IT+0x1a4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a58      	ldr	r2, [pc, #352]	@ (8001490 <HAL_ADC_Start_IT+0x1a8>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	0c9a      	lsrs	r2, r3, #18
 8001334:	4613      	mov	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800133c:	e002      	b.n	8001344 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3b01      	subs	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f9      	bne.n	800133e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b01      	cmp	r3, #1
 8001356:	f040 8085 	bne.w	8001464 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001384:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001398:	d106      	bne.n	80013a8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f023 0206 	bic.w	r2, r3, #6
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80013a6:	e002      	b.n	80013ae <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b6:	4b37      	ldr	r3, [pc, #220]	@ (8001494 <HAL_ADC_Start_IT+0x1ac>)
 80013b8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013c2:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013d2:	f043 0320 	orr.w	r3, r3, #32
 80013d6:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 031f 	and.w	r3, r3, #31
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d12a      	bne.n	800143a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001498 <HAL_ADC_Start_IT+0x1b0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d015      	beq.n	800141a <HAL_ADC_Start_IT+0x132>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a2a      	ldr	r2, [pc, #168]	@ (800149c <HAL_ADC_Start_IT+0x1b4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d105      	bne.n	8001404 <HAL_ADC_Start_IT+0x11c>
 80013f8:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <HAL_ADC_Start_IT+0x1ac>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00a      	beq.n	800141a <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a25      	ldr	r2, [pc, #148]	@ (80014a0 <HAL_ADC_Start_IT+0x1b8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d136      	bne.n	800147c <HAL_ADC_Start_IT+0x194>
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <HAL_ADC_Start_IT+0x1ac>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2b00      	cmp	r3, #0
 8001418:	d130      	bne.n	800147c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d129      	bne.n	800147c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	e020      	b.n	800147c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a16      	ldr	r2, [pc, #88]	@ (8001498 <HAL_ADC_Start_IT+0x1b0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d11b      	bne.n	800147c <HAL_ADC_Start_IT+0x194>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d114      	bne.n	800147c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	e00b      	b.n	800147c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	f043 0210 	orr.w	r2, r3, #16
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000000 	.word	0x20000000
 8001490:	431bde83 	.word	0x431bde83
 8001494:	40012300 	.word	0x40012300
 8001498:	40012000 	.word	0x40012000
 800149c:	40012100 	.word	0x40012100
 80014a0:	40012200 	.word	0x40012200

080014a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d049      	beq.n	800156e <HAL_ADC_IRQHandler+0xca>
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d046      	beq.n	800156e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d12b      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800150a:	2b00      	cmp	r3, #0
 800150c:	d127      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001514:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001526:	2b00      	cmp	r3, #0
 8001528:	d119      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0220 	bic.w	r2, r2, #32
 8001538:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f043 0201 	orr.w	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fa8a 	bl	8000a78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0212 	mvn.w	r2, #18
 800156c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d057      	beq.n	8001634 <HAL_ADC_IRQHandler+0x190>
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d054      	beq.n	8001634 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	2b00      	cmp	r3, #0
 8001594:	d105      	bne.n	80015a2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d139      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d12b      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d124      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11d      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d119      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015fe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fa8d 	bl	8001b44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f06f 020c 	mvn.w	r2, #12
 8001632:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001642:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d017      	beq.n	800167a <HAL_ADC_IRQHandler+0x1d6>
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d014      	beq.n	800167a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d10d      	bne.n	800167a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f837 	bl	80016de <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f06f 0201 	mvn.w	r2, #1
 8001678:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001688:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d015      	beq.n	80016bc <HAL_ADC_IRQHandler+0x218>
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d012      	beq.n	80016bc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f043 0202 	orr.w	r2, r3, #2
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f06f 0220 	mvn.w	r2, #32
 80016aa:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f820 	bl	80016f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f06f 0220 	mvn.w	r2, #32
 80016ba:	601a      	str	r2, [r3, #0]
  }
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1c>
 8001720:	2302      	movs	r3, #2
 8001722:	e105      	b.n	8001930 <HAL_ADC_ConfigChannel+0x228>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d925      	bls.n	8001780 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68d9      	ldr	r1, [r3, #12]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	3b1e      	subs	r3, #30
 800174a:	2207      	movs	r2, #7
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43da      	mvns	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	400a      	ands	r2, r1
 8001758:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68d9      	ldr	r1, [r3, #12]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	4603      	mov	r3, r0
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4403      	add	r3, r0
 8001772:	3b1e      	subs	r3, #30
 8001774:	409a      	lsls	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	e022      	b.n	80017c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6919      	ldr	r1, [r3, #16]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	2207      	movs	r2, #7
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	400a      	ands	r2, r1
 80017a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6919      	ldr	r1, [r3, #16]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4403      	add	r3, r0
 80017bc:	409a      	lsls	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d824      	bhi.n	8001818 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3b05      	subs	r3, #5
 80017e0:	221f      	movs	r2, #31
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	400a      	ands	r2, r1
 80017ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	3b05      	subs	r3, #5
 800180a:	fa00 f203 	lsl.w	r2, r0, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	635a      	str	r2, [r3, #52]	@ 0x34
 8001816:	e04c      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d824      	bhi.n	800186a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	3b23      	subs	r3, #35	@ 0x23
 8001832:	221f      	movs	r2, #31
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43da      	mvns	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	400a      	ands	r2, r1
 8001840:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	3b23      	subs	r3, #35	@ 0x23
 800185c:	fa00 f203 	lsl.w	r2, r0, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	631a      	str	r2, [r3, #48]	@ 0x30
 8001868:	e023      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	3b41      	subs	r3, #65	@ 0x41
 800187c:	221f      	movs	r2, #31
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	400a      	ands	r2, r1
 800188a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	4618      	mov	r0, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3b41      	subs	r3, #65	@ 0x41
 80018a6:	fa00 f203 	lsl.w	r2, r0, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018b2:	4b22      	ldr	r3, [pc, #136]	@ (800193c <HAL_ADC_ConfigChannel+0x234>)
 80018b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a21      	ldr	r2, [pc, #132]	@ (8001940 <HAL_ADC_ConfigChannel+0x238>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d109      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1cc>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b12      	cmp	r3, #18
 80018c6:	d105      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a19      	ldr	r2, [pc, #100]	@ (8001940 <HAL_ADC_ConfigChannel+0x238>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d123      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x21e>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b10      	cmp	r3, #16
 80018e4:	d003      	beq.n	80018ee <HAL_ADC_ConfigChannel+0x1e6>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b11      	cmp	r3, #17
 80018ec:	d11b      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d111      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <HAL_ADC_ConfigChannel+0x23c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a10      	ldr	r2, [pc, #64]	@ (8001948 <HAL_ADC_ConfigChannel+0x240>)
 8001908:	fba2 2303 	umull	r2, r3, r2, r3
 800190c:	0c9a      	lsrs	r2, r3, #18
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001918:	e002      	b.n	8001920 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	3b01      	subs	r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f9      	bne.n	800191a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40012300 	.word	0x40012300
 8001940:	40012000 	.word	0x40012000
 8001944:	20000000 	.word	0x20000000
 8001948:	431bde83 	.word	0x431bde83

0800194c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001954:	4b79      	ldr	r3, [pc, #484]	@ (8001b3c <ADC_Init+0x1f0>)
 8001956:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	431a      	orrs	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001980:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	021a      	lsls	r2, r3, #8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80019a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6899      	ldr	r1, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	4a58      	ldr	r2, [pc, #352]	@ (8001b40 <ADC_Init+0x1f4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d022      	beq.n	8001a2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6899      	ldr	r1, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6899      	ldr	r1, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	e00f      	b.n	8001a4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a48:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0202 	bic.w	r2, r2, #2
 8001a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6899      	ldr	r1, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7e1b      	ldrb	r3, [r3, #24]
 8001a64:	005a      	lsls	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01b      	beq.n	8001ab0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a86:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6859      	ldr	r1, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	035a      	lsls	r2, r3, #13
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	e007      	b.n	8001ac0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001abe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	051a      	lsls	r2, r3, #20
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001af4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6899      	ldr	r1, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b02:	025a      	lsls	r2, r3, #9
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6899      	ldr	r1, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	029a      	lsls	r2, r3, #10
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	609a      	str	r2, [r3, #8]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	40012300 	.word	0x40012300
 8001b40:	0f000001 	.word	0x0f000001

08001b44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4907      	ldr	r1, [pc, #28]	@ (8001bf4 <__NVIC_EnableIRQ+0x38>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	@ (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	@ (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ff8e 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff29 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff3e 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff8e 	bl	8001c4c <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff31 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffa2 	bl	8001cb4 <SysTick_Config>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e08a      	b.n	8001ea4 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d106      	bne.n	8001da6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f003 fab9 	bl	8005318 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	4b40      	ldr	r3, [pc, #256]	@ (8001eac <HAL_ETH_Init+0x130>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	4a3f      	ldr	r2, [pc, #252]	@ (8001eac <HAL_ETH_Init+0x130>)
 8001db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eac <HAL_ETH_Init+0x130>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb0 <HAL_ETH_Init+0x134>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb0 <HAL_ETH_Init+0x134>)
 8001dc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001dcc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001dce:	4b38      	ldr	r3, [pc, #224]	@ (8001eb0 <HAL_ETH_Init+0x134>)
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4936      	ldr	r1, [pc, #216]	@ (8001eb0 <HAL_ETH_Init+0x134>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ddc:	4b34      	ldr	r3, [pc, #208]	@ (8001eb0 <HAL_ETH_Init+0x134>)
 8001dde:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001df6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df8:	f7ff fa02 	bl	8001200 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001dfe:	e011      	b.n	8001e24 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e00:	f7ff f9fe 	bl	8001200 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e0e:	d909      	bls.n	8001e24 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2204      	movs	r2, #4
 8001e14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	22e0      	movs	r2, #224	@ 0xe0
 8001e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e03f      	b.n	8001ea4 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1e4      	bne.n	8001e00 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 ff32 	bl	8002ca0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 ffdd 	bl	8002dfc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f001 f833 	bl	8002eae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2100      	movs	r1, #0
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 ff9b 	bl	8002d8c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001e64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e76:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e7a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001e8e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40013800 	.word	0x40013800

08001eb4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d161      	bne.n	8001f8a <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fa2c 	bl	8002338 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7ff f995 	bl	8001218 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f0c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f24:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fd56 	bl	80029d8 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0208 	orr.w	r2, r2, #8
 8001f3a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f7ff f967 	bl	8001218 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0204 	orr.w	r2, r2, #4
 8001f60:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001f74:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001f78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f7c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2240      	movs	r2, #64	@ 0x40
 8001f82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fa2:	2b40      	cmp	r3, #64	@ 0x40
 8001fa4:	d170      	bne.n	8002088 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001fc0:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001fc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fc8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001fdc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fe0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	f023 0302 	bic.w	r3, r3, #2
 8001ff4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ff8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0204 	bic.w	r2, r2, #4
 8002008:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002012:	2001      	movs	r0, #1
 8002014:	f7ff f900 	bl	8001218 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fcd9 	bl	80029d8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0208 	bic.w	r2, r2, #8
 8002034:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff f8ea 	bl	8001218 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e00e      	b.n	8002070 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	3212      	adds	r2, #18
 8002058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d9ed      	bls.n	8002052 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2210      	movs	r2, #16
 8002080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	e000      	b.n	800208a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
  }
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e07c      	b.n	80021b2 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020be:	2b40      	cmp	r3, #64	@ 0x40
 80020c0:	d176      	bne.n	80021b0 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80020c2:	2200      	movs	r2, #0
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 ff60 	bl	8002f8c <ETH_Prepare_Tx_Descriptors>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	f043 0202 	orr.w	r2, r3, #2
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e065      	b.n	80021b2 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80020e6:	f3bf 8f4f 	dsb	sy
}
 80020ea:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3206      	adds	r2, #6
 80020f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f8:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	2b03      	cmp	r3, #3
 800210a:	d904      	bls.n	8002116 <HAL_ETH_Transmit+0x84>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002110:	1f1a      	subs	r2, r3, #4
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3106      	adds	r1, #6
 8002122:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002126:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800212a:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800212c:	f7ff f868 	bl	8001200 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002132:	e037      	b.n	80021a4 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d011      	beq.n	800216a <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214c:	f043 0208 	orr.w	r2, r3, #8
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e023      	b.n	80021b2 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d018      	beq.n	80021a4 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002172:	f7ff f845 	bl	8001200 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	d302      	bcc.n	8002188 <HAL_ETH_Transmit+0xf6>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10d      	bne.n	80021a4 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218e:	f043 0204 	orr.w	r2, r3, #4
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800219e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e006      	b.n	80021b2 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	dbc3      	blt.n	8002134 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b088      	sub	sp, #32
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0a4      	b.n	8002330 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ec:	2b40      	cmp	r3, #64	@ 0x40
 80021ee:	d001      	beq.n	80021f4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e09d      	b.n	8002330 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	3212      	adds	r2, #18
 8002200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002204:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800220a:	f1c3 0304 	rsb	r3, r3, #4
 800220e:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002210:	e066      	b.n	80022e0 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <HAL_ETH_ReadData+0x88>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d03c      	beq.n	80022bc <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002264:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	b29b      	uxth	r3, r3
 800229c:	f003 f9f4 	bl	8005688 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	441a      	add	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	3301      	adds	r3, #1
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d902      	bls.n	80022ce <HAL_ETH_ReadData+0x114>
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	3b04      	subs	r3, #4
 80022cc:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	3212      	adds	r2, #18
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db06      	blt.n	80022f6 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d202      	bcs.n	80022f6 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d08d      	beq.n	8002212 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f814 	bl	8002338 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d108      	bne.n	800232e <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002344:	2301      	movs	r3, #1
 8002346:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800234c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	3212      	adds	r2, #18
 8002354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002358:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800235e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002360:	e044      	b.n	80023ec <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d112      	bne.n	8002390 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	4618      	mov	r0, r3
 8002370:	f003 f95a 	bl	8005628 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	74fb      	strb	r3, [r7, #19]
 800237e:	e007      	b.n	8002390 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	461a      	mov	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	461a      	mov	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d02a      	beq.n	80023ec <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	2b00      	cmp	r3, #0
 800239c:	d108      	bne.n	80023b0 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	6053      	str	r3, [r2, #4]
 80023ae:	e005      	b.n	80023bc <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3301      	adds	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d902      	bls.n	80023da <ETH_UpdateDescriptor+0xa2>
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	3b04      	subs	r3, #4
 80023d8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	3212      	adds	r2, #18
 80023e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e4:	617b      	str	r3, [r7, #20]
      desccount--;
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <ETH_UpdateDescriptor+0xc0>
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1b4      	bne.n	8002362 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d01a      	beq.n	8002438 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3303      	adds	r3, #3
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800240c:	f3bf 8f5f 	dmb	sy
}
 8002410:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6919      	ldr	r1, [r3, #16]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	18ca      	adds	r2, r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800242a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002438:	bf00      	nop
 800243a:	3720      	adds	r7, #32
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002468:	4b4b      	ldr	r3, [pc, #300]	@ (8002598 <HAL_ETH_IRQHandler+0x158>)
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00e      	beq.n	8002496 <HAL_ETH_IRQHandler+0x56>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800248a:	461a      	mov	r2, r3
 800248c:	4b43      	ldr	r3, [pc, #268]	@ (800259c <HAL_ETH_IRQHandler+0x15c>)
 800248e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f891 	bl	80025b8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00f      	beq.n	80024c0 <HAL_ETH_IRQHandler+0x80>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024b2:	461a      	mov	r2, r3
 80024b4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80024b8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f872 	bl	80025a4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d042      	beq.n	8002550 <HAL_ETH_IRQHandler+0x110>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d03d      	beq.n	8002550 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024da:	f043 0208 	orr.w	r2, r3, #8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01a      	beq.n	8002524 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	4b29      	ldr	r3, [pc, #164]	@ (80025a0 <HAL_ETH_IRQHandler+0x160>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002514:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002518:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	22e0      	movs	r2, #224	@ 0xe0
 800251e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002522:	e012      	b.n	800254a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002532:	4013      	ands	r3, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002542:	461a      	mov	r2, r3
 8002544:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002548:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f83e 	bl	80025cc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00e      	beq.n	8002578 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f838 	bl	80025e0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d006      	beq.n	8002590 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002582:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_ETH_IRQHandler+0x158>)
 8002584:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002588:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f832 	bl	80025f4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002590:	bf00      	nop
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40013c00 	.word	0x40013c00
 800259c:	00010040 	.word	0x00010040
 80025a0:	007e2000 	.word	0x007e2000

080025a4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 031c 	and.w	r3, r3, #28
 8002624:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	02db      	lsls	r3, r3, #11
 800262a:	b29b      	uxth	r3, r3
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	019b      	lsls	r3, r3, #6
 8002636:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f023 0302 	bic.w	r3, r3, #2
 8002646:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002658:	f7fe fdd2 	bl	8001200 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800265e:	e00d      	b.n	800267c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002660:	f7fe fdce 	bl	8001200 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266e:	d301      	bcc.n	8002674 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e010      	b.n	8002696 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1ec      	bne.n	8002660 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	b29b      	uxth	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f003 031c 	and.w	r3, r3, #28
 80026ba:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	02db      	lsls	r3, r3, #11
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	019b      	lsls	r3, r3, #6
 80026cc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f8:	f7fe fd82 	bl	8001200 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026fe:	e00d      	b.n	800271c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002700:	f7fe fd7e 	bl	8001200 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800270e:	d301      	bcc.n	8002714 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e009      	b.n	8002728 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ec      	bne.n	8002700 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0e6      	b.n	8002912 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf14      	ite	ne
 8002752:	2301      	movne	r3, #1
 8002754:	2300      	moveq	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf14      	ite	ne
 8002798:	2301      	movne	r3, #1
 800279a:	2300      	moveq	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf14      	ite	ne
 800285e:	2301      	movne	r3, #1
 8002860:	2300      	moveq	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	bf14      	ite	ne
 8002892:	2301      	movne	r3, #1
 8002894:	2300      	moveq	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf0c      	ite	eq
 80028ae:	2301      	moveq	r3, #1
 80028b0:	2300      	movne	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e00b      	b.n	800294a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002938:	2b10      	cmp	r3, #16
 800293a:	d105      	bne.n	8002948 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800293c:	6839      	ldr	r1, [r7, #0]
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f870 	bl	8002a24 <ETH_SetMACConfig>

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 031c 	bic.w	r3, r3, #28
 800296a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800296c:	f001 fa54 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8002970:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4a14      	ldr	r2, [pc, #80]	@ (80029c8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d804      	bhi.n	8002984 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e019      	b.n	80029b8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4a11      	ldr	r2, [pc, #68]	@ (80029cc <HAL_ETH_SetMDIOClockRange+0x78>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d204      	bcs.n	8002996 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f043 030c 	orr.w	r3, r3, #12
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e010      	b.n	80029b8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4a0d      	ldr	r2, [pc, #52]	@ (80029d0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d90c      	bls.n	80029b8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	4a0c      	ldr	r2, [pc, #48]	@ (80029d4 <HAL_ETH_SetMDIOClockRange+0x80>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d804      	bhi.n	80029b0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e003      	b.n	80029b8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f043 0310 	orr.w	r3, r3, #16
 80029b6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	611a      	str	r2, [r3, #16]
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	02160ebf 	.word	0x02160ebf
 80029cc:	03938700 	.word	0x03938700
 80029d0:	05f5e0ff 	.word	0x05f5e0ff
 80029d4:	08f0d17f 	.word	0x08f0d17f

080029d8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029fa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f7fe fc05 	bl	8001218 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a18:	6193      	str	r3, [r2, #24]
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4b53      	ldr	r3, [pc, #332]	@ (8002b88 <ETH_SetMACConfig+0x164>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	7b9b      	ldrb	r3, [r3, #14]
 8002a42:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	7c12      	ldrb	r2, [r2, #16]
 8002a48:	2a00      	cmp	r2, #0
 8002a4a:	d102      	bne.n	8002a52 <ETH_SetMACConfig+0x2e>
 8002a4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a50:	e000      	b.n	8002a54 <ETH_SetMACConfig+0x30>
 8002a52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	7c52      	ldrb	r2, [r2, #17]
 8002a5a:	2a00      	cmp	r2, #0
 8002a5c:	d102      	bne.n	8002a64 <ETH_SetMACConfig+0x40>
 8002a5e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002a62:	e000      	b.n	8002a66 <ETH_SetMACConfig+0x42>
 8002a64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	7fdb      	ldrb	r3, [r3, #31]
 8002a72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	7f92      	ldrb	r2, [r2, #30]
 8002a80:	2a00      	cmp	r2, #0
 8002a82:	d102      	bne.n	8002a8a <ETH_SetMACConfig+0x66>
 8002a84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a88:	e000      	b.n	8002a8c <ETH_SetMACConfig+0x68>
 8002a8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	7f1b      	ldrb	r3, [r3, #28]
 8002a92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	791b      	ldrb	r3, [r3, #4]
 8002aa0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002aa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002aaa:	2a00      	cmp	r2, #0
 8002aac:	d102      	bne.n	8002ab4 <ETH_SetMACConfig+0x90>
 8002aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab2:	e000      	b.n	8002ab6 <ETH_SetMACConfig+0x92>
 8002ab4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ab6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	7bdb      	ldrb	r3, [r3, #15]
 8002abc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002abe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ac4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002acc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f7fe fb96 	bl	8001218 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002b02:	4013      	ands	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002b12:	2a00      	cmp	r2, #0
 8002b14:	d101      	bne.n	8002b1a <ETH_SetMACConfig+0xf6>
 8002b16:	2280      	movs	r2, #128	@ 0x80
 8002b18:	e000      	b.n	8002b1c <ETH_SetMACConfig+0xf8>
 8002b1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002b2a:	2a01      	cmp	r2, #1
 8002b2c:	d101      	bne.n	8002b32 <ETH_SetMACConfig+0x10e>
 8002b2e:	2208      	movs	r2, #8
 8002b30:	e000      	b.n	8002b34 <ETH_SetMACConfig+0x110>
 8002b32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002b3c:	2a01      	cmp	r2, #1
 8002b3e:	d101      	bne.n	8002b44 <ETH_SetMACConfig+0x120>
 8002b40:	2204      	movs	r2, #4
 8002b42:	e000      	b.n	8002b46 <ETH_SetMACConfig+0x122>
 8002b44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002b4e:	2a01      	cmp	r2, #1
 8002b50:	d101      	bne.n	8002b56 <ETH_SetMACConfig+0x132>
 8002b52:	2202      	movs	r2, #2
 8002b54:	e000      	b.n	8002b58 <ETH_SetMACConfig+0x134>
 8002b56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b70:	2001      	movs	r0, #1
 8002b72:	f7fe fb51 	bl	8001218 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	619a      	str	r2, [r3, #24]
}
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	fd20810f 	.word	0xfd20810f

08002b8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8002c9c <ETH_SetDMAConfig+0x110>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	7b1b      	ldrb	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <ETH_SetDMAConfig+0x2c>
 8002bb2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bb6:	e000      	b.n	8002bba <ETH_SetDMAConfig+0x2e>
 8002bb8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	7b5b      	ldrb	r3, [r3, #13]
 8002bbe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bc0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	7f52      	ldrb	r2, [r2, #29]
 8002bc6:	2a00      	cmp	r2, #0
 8002bc8:	d102      	bne.n	8002bd0 <ETH_SetDMAConfig+0x44>
 8002bca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002bce:	e000      	b.n	8002bd2 <ETH_SetDMAConfig+0x46>
 8002bd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	7b9b      	ldrb	r3, [r3, #14]
 8002bd8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bda:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002be0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	7f1b      	ldrb	r3, [r3, #28]
 8002be6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002be8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	7f9b      	ldrb	r3, [r3, #30]
 8002bee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bf0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bf6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bfe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c00:	4313      	orrs	r3, r2
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c10:	461a      	mov	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f7fe faf8 	bl	8001218 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c30:	461a      	mov	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	791b      	ldrb	r3, [r3, #4]
 8002c3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c80:	2001      	movs	r0, #1
 8002c82:	f7fe fac9 	bl	8001218 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	f8de3f23 	.word	0xf8de3f23

08002ca0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b0a6      	sub	sp, #152	@ 0x98
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff fe7f 	bl	8002a24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d26:	2301      	movs	r3, #1
 8002d28:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d52:	2301      	movs	r3, #1
 8002d54:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d5c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d60:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d66:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d76:	f107 0308 	add.w	r3, r7, #8
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff05 	bl	8002b8c <ETH_SetDMAConfig>
}
 8002d82:	bf00      	nop
 8002d84:	3798      	adds	r7, #152	@ 0x98
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3305      	adds	r3, #5
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	3204      	adds	r2, #4
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	4b11      	ldr	r3, [pc, #68]	@ (8002df4 <ETH_MACAddressConfig+0x68>)
 8002dae:	4413      	add	r3, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3303      	adds	r3, #3
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	061a      	lsls	r2, r3, #24
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	7812      	ldrb	r2, [r2, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <ETH_MACAddressConfig+0x6c>)
 8002dde:	4413      	add	r3, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	6013      	str	r3, [r2, #0]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40028040 	.word	0x40028040
 8002df8:	40028044 	.word	0x40028044

08002dfc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e03e      	b.n	8002e88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68d9      	ldr	r1, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2200      	movs	r2, #0
 8002e26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	3206      	adds	r2, #6
 8002e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d80c      	bhi.n	8002e6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68d9      	ldr	r1, [r3, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	440b      	add	r3, r1
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	e004      	b.n	8002e76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	461a      	mov	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3301      	adds	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d9bd      	bls.n	8002e0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea0:	611a      	str	r2, [r3, #16]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e048      	b.n	8002f4e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6919      	ldr	r1, [r3, #16]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002ef8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	3212      	adds	r2, #18
 8002f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d80c      	bhi.n	8002f3e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6919      	ldr	r1, [r3, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	461a      	mov	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60da      	str	r2, [r3, #12]
 8002f3c:	e004      	b.n	8002f48 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d9b3      	bls.n	8002ebc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f7e:	60da      	str	r2, [r3, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b091      	sub	sp, #68	@ 0x44
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3318      	adds	r3, #24
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fce:	d007      	beq.n	8002fe0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e115      	b.n	8003210 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002ffc:	f023 031f 	bic.w	r3, r3, #31
 8003000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003002:	6852      	ldr	r2, [r2, #4]
 8003004:	431a      	orrs	r2, r3
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003008:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	431a      	orrs	r2, r3
 8003024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003026:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	431a      	orrs	r2, r3
 8003042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003044:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800306a:	e084      	b.n	8003176 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800306c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003076:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d006      	beq.n	800308c <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800307e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e005      	b.n	8003098 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800308c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003096:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800309a:	3301      	adds	r3, #1
 800309c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800309e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d902      	bls.n	80030aa <ETH_Prepare_Tx_Descriptors+0x11e>
 80030a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a6:	3b04      	subs	r3, #4
 80030a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80030b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030c0:	d007      	beq.n	80030d2 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80030c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030c6:	3304      	adds	r3, #4
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d029      	beq.n	8003126 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80030e0:	2300      	movs	r3, #0
 80030e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030e4:	e019      	b.n	800311a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80030e6:	f3bf 8f5f 	dmb	sy
}
 80030ea:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80030ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80030f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030fa:	3301      	adds	r3, #1
 80030fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003100:	2b03      	cmp	r3, #3
 8003102:	d902      	bls.n	800310a <ETH_Prepare_Tx_Descriptors+0x17e>
 8003104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003106:	3b04      	subs	r3, #4
 8003108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800310e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003112:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003116:	3301      	adds	r3, #1
 8003118:	63bb      	str	r3, [r7, #56]	@ 0x38
 800311a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800311c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311e:	429a      	cmp	r2, r3
 8003120:	d3e1      	bcc.n	80030e6 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8003122:	2302      	movs	r3, #2
 8003124:	e074      	b.n	8003210 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800312e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003130:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	3301      	adds	r3, #1
 8003136:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800313e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003150:	f023 031f 	bic.w	r3, r3, #31
 8003154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003156:	6852      	ldr	r2, [r2, #4]
 8003158:	431a      	orrs	r2, r3
 800315a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003160:	3301      	adds	r3, #1
 8003162:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003164:	f3bf 8f5f 	dmb	sy
}
 8003168:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003174:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f47f af76 	bne.w	800306c <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800318e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	e005      	b.n	80031a0 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800319c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80031a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80031a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	6a3a      	ldr	r2, [r7, #32]
 80031b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80031b6:	f3bf 8f5f 	dmb	sy
}
 80031ba:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80031bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d0:	3304      	adds	r3, #4
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031dc:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031de:	f3ef 8310 	mrs	r3, PRIMASK
 80031e2:	613b      	str	r3, [r7, #16]
  return(result);
 80031e4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	2301      	movs	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f383 8810 	msr	PRIMASK, r3
}
 80031f2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fa:	4413      	add	r3, r2
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	629a      	str	r2, [r3, #40]	@ 0x28
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	f383 8810 	msr	PRIMASK, r3
}
 800320c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3744      	adds	r7, #68	@ 0x44
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800321c:	b480      	push	{r7}
 800321e:	b089      	sub	sp, #36	@ 0x24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e16b      	b.n	8003510 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	f040 815a 	bne.w	800350a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d005      	beq.n	800326e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800326a:	2b02      	cmp	r3, #2
 800326c:	d130      	bne.n	80032d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	2203      	movs	r2, #3
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a4:	2201      	movs	r2, #1
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 0201 	and.w	r2, r3, #1
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d017      	beq.n	800330c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d123      	bne.n	8003360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	08da      	lsrs	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3208      	adds	r2, #8
 8003320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	220f      	movs	r2, #15
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	08da      	lsrs	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3208      	adds	r2, #8
 800335a:	69b9      	ldr	r1, [r7, #24]
 800335c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0203 	and.w	r2, r3, #3
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80b4 	beq.w	800350a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	4b60      	ldr	r3, [pc, #384]	@ (8003528 <HAL_GPIO_Init+0x30c>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003528 <HAL_GPIO_Init+0x30c>)
 80033ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003528 <HAL_GPIO_Init+0x30c>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033be:	4a5b      	ldr	r2, [pc, #364]	@ (800352c <HAL_GPIO_Init+0x310>)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	3302      	adds	r3, #2
 80033c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	220f      	movs	r2, #15
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a52      	ldr	r2, [pc, #328]	@ (8003530 <HAL_GPIO_Init+0x314>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d02b      	beq.n	8003442 <HAL_GPIO_Init+0x226>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a51      	ldr	r2, [pc, #324]	@ (8003534 <HAL_GPIO_Init+0x318>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d025      	beq.n	800343e <HAL_GPIO_Init+0x222>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a50      	ldr	r2, [pc, #320]	@ (8003538 <HAL_GPIO_Init+0x31c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01f      	beq.n	800343a <HAL_GPIO_Init+0x21e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a4f      	ldr	r2, [pc, #316]	@ (800353c <HAL_GPIO_Init+0x320>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d019      	beq.n	8003436 <HAL_GPIO_Init+0x21a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a4e      	ldr	r2, [pc, #312]	@ (8003540 <HAL_GPIO_Init+0x324>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_GPIO_Init+0x216>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a4d      	ldr	r2, [pc, #308]	@ (8003544 <HAL_GPIO_Init+0x328>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00d      	beq.n	800342e <HAL_GPIO_Init+0x212>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a4c      	ldr	r2, [pc, #304]	@ (8003548 <HAL_GPIO_Init+0x32c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <HAL_GPIO_Init+0x20e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a4b      	ldr	r2, [pc, #300]	@ (800354c <HAL_GPIO_Init+0x330>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_GPIO_Init+0x20a>
 8003422:	2307      	movs	r3, #7
 8003424:	e00e      	b.n	8003444 <HAL_GPIO_Init+0x228>
 8003426:	2308      	movs	r3, #8
 8003428:	e00c      	b.n	8003444 <HAL_GPIO_Init+0x228>
 800342a:	2306      	movs	r3, #6
 800342c:	e00a      	b.n	8003444 <HAL_GPIO_Init+0x228>
 800342e:	2305      	movs	r3, #5
 8003430:	e008      	b.n	8003444 <HAL_GPIO_Init+0x228>
 8003432:	2304      	movs	r3, #4
 8003434:	e006      	b.n	8003444 <HAL_GPIO_Init+0x228>
 8003436:	2303      	movs	r3, #3
 8003438:	e004      	b.n	8003444 <HAL_GPIO_Init+0x228>
 800343a:	2302      	movs	r3, #2
 800343c:	e002      	b.n	8003444 <HAL_GPIO_Init+0x228>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_GPIO_Init+0x228>
 8003442:	2300      	movs	r3, #0
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	f002 0203 	and.w	r2, r2, #3
 800344a:	0092      	lsls	r2, r2, #2
 800344c:	4093      	lsls	r3, r2
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003454:	4935      	ldr	r1, [pc, #212]	@ (800352c <HAL_GPIO_Init+0x310>)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	3302      	adds	r3, #2
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003462:	4b3b      	ldr	r3, [pc, #236]	@ (8003550 <HAL_GPIO_Init+0x334>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003486:	4a32      	ldr	r2, [pc, #200]	@ (8003550 <HAL_GPIO_Init+0x334>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800348c:	4b30      	ldr	r3, [pc, #192]	@ (8003550 <HAL_GPIO_Init+0x334>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034b0:	4a27      	ldr	r2, [pc, #156]	@ (8003550 <HAL_GPIO_Init+0x334>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034b6:	4b26      	ldr	r3, [pc, #152]	@ (8003550 <HAL_GPIO_Init+0x334>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034da:	4a1d      	ldr	r2, [pc, #116]	@ (8003550 <HAL_GPIO_Init+0x334>)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <HAL_GPIO_Init+0x334>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003504:	4a12      	ldr	r2, [pc, #72]	@ (8003550 <HAL_GPIO_Init+0x334>)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3301      	adds	r3, #1
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	f67f ae90 	bls.w	8003238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3724      	adds	r7, #36	@ 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	40013800 	.word	0x40013800
 8003530:	40020000 	.word	0x40020000
 8003534:	40020400 	.word	0x40020400
 8003538:	40020800 	.word	0x40020800
 800353c:	40020c00 	.word	0x40020c00
 8003540:	40021000 	.word	0x40021000
 8003544:	40021400 	.word	0x40021400
 8003548:	40021800 	.word	0x40021800
 800354c:	40021c00 	.word	0x40021c00
 8003550:	40013c00 	.word	0x40013c00

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
 8003560:	4613      	mov	r3, r2
 8003562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003564:	787b      	ldrb	r3, [r7, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003570:	e003      	b.n	800357a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	041a      	lsls	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	619a      	str	r2, [r3, #24]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003592:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800359e:	4a05      	ldr	r2, [pc, #20]	@ (80035b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f806 	bl	80035b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40013c00 	.word	0x40013c00

080035b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e267      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d075      	beq.n	80036da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035ee:	4b88      	ldr	r3, [pc, #544]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d00c      	beq.n	8003614 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fa:	4b85      	ldr	r3, [pc, #532]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003602:	2b08      	cmp	r3, #8
 8003604:	d112      	bne.n	800362c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003606:	4b82      	ldr	r3, [pc, #520]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003612:	d10b      	bne.n	800362c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	4b7e      	ldr	r3, [pc, #504]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d05b      	beq.n	80036d8 <HAL_RCC_OscConfig+0x108>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d157      	bne.n	80036d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e242      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003634:	d106      	bne.n	8003644 <HAL_RCC_OscConfig+0x74>
 8003636:	4b76      	ldr	r3, [pc, #472]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a75      	ldr	r2, [pc, #468]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e01d      	b.n	8003680 <HAL_RCC_OscConfig+0xb0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x98>
 800364e:	4b70      	ldr	r3, [pc, #448]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6f      	ldr	r2, [pc, #444]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 8003654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b6d      	ldr	r3, [pc, #436]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6c      	ldr	r2, [pc, #432]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0xb0>
 8003668:	4b69      	ldr	r3, [pc, #420]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a68      	ldr	r2, [pc, #416]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 800366e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b66      	ldr	r3, [pc, #408]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a65      	ldr	r2, [pc, #404]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 800367a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800367e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fd fdba 	bl	8001200 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003690:	f7fd fdb6 	bl	8001200 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	@ 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e207      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0xc0>
 80036ae:	e014      	b.n	80036da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fd fda6 	bl	8001200 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fd fda2 	bl	8001200 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	@ 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1f3      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	4b51      	ldr	r3, [pc, #324]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0xe8>
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d063      	beq.n	80037ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f2:	4b47      	ldr	r3, [pc, #284]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d11c      	bne.n	8003738 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fe:	4b44      	ldr	r3, [pc, #272]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d116      	bne.n	8003738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370a:	4b41      	ldr	r3, [pc, #260]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_RCC_OscConfig+0x152>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e1c7      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003722:	4b3b      	ldr	r3, [pc, #236]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4937      	ldr	r1, [pc, #220]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003736:	e03a      	b.n	80037ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003740:	4b34      	ldr	r3, [pc, #208]	@ (8003814 <HAL_RCC_OscConfig+0x244>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fd fd5b 	bl	8001200 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374e:	f7fd fd57 	bl	8001200 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e1a8      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	4b2b      	ldr	r3, [pc, #172]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376c:	4b28      	ldr	r3, [pc, #160]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4925      	ldr	r1, [pc, #148]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]
 8003780:	e015      	b.n	80037ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003782:	4b24      	ldr	r3, [pc, #144]	@ (8003814 <HAL_RCC_OscConfig+0x244>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fd fd3a 	bl	8001200 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003790:	f7fd fd36 	bl	8001200 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e187      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d036      	beq.n	8003828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d016      	beq.n	80037f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c2:	4b15      	ldr	r3, [pc, #84]	@ (8003818 <HAL_RCC_OscConfig+0x248>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fd fd1a 	bl	8001200 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d0:	f7fd fd16 	bl	8001200 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e167      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003810 <HAL_RCC_OscConfig+0x240>)
 80037e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x200>
 80037ee:	e01b      	b.n	8003828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f0:	4b09      	ldr	r3, [pc, #36]	@ (8003818 <HAL_RCC_OscConfig+0x248>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f6:	f7fd fd03 	bl	8001200 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037fc:	e00e      	b.n	800381c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fe:	f7fd fcff 	bl	8001200 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d907      	bls.n	800381c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e150      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
 8003810:	40023800 	.word	0x40023800
 8003814:	42470000 	.word	0x42470000
 8003818:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381c:	4b88      	ldr	r3, [pc, #544]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ea      	bne.n	80037fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8097 	beq.w	8003964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4b81      	ldr	r3, [pc, #516]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	4b7d      	ldr	r3, [pc, #500]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	@ 0x40
 8003856:	4b7a      	ldr	r3, [pc, #488]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003866:	4b77      	ldr	r3, [pc, #476]	@ (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003872:	4b74      	ldr	r3, [pc, #464]	@ (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a73      	ldr	r2, [pc, #460]	@ (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7fd fcbf 	bl	8001200 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fd fcbb 	bl	8001200 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e10c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	4b6a      	ldr	r3, [pc, #424]	@ (8003a44 <HAL_RCC_OscConfig+0x474>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d106      	bne.n	80038ba <HAL_RCC_OscConfig+0x2ea>
 80038ac:	4b64      	ldr	r3, [pc, #400]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	4a63      	ldr	r2, [pc, #396]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b8:	e01c      	b.n	80038f4 <HAL_RCC_OscConfig+0x324>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x30c>
 80038c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038c8:	f043 0304 	orr.w	r3, r3, #4
 80038cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0x324>
 80038dc:	4b58      	ldr	r3, [pc, #352]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e0:	4a57      	ldr	r2, [pc, #348]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e8:	4b55      	ldr	r3, [pc, #340]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ec:	4a54      	ldr	r2, [pc, #336]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ee:	f023 0304 	bic.w	r3, r3, #4
 80038f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fd fc80 	bl	8001200 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003902:	e00a      	b.n	800391a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fd fc7c 	bl	8001200 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e0cb      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391a:	4b49      	ldr	r3, [pc, #292]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ee      	beq.n	8003904 <HAL_RCC_OscConfig+0x334>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003928:	f7fd fc6a 	bl	8001200 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392e:	e00a      	b.n	8003946 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fd fc66 	bl	8001200 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0b5      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003946:	4b3e      	ldr	r3, [pc, #248]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ee      	bne.n	8003930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003958:	4b39      	ldr	r3, [pc, #228]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	4a38      	ldr	r2, [pc, #224]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 800395e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003962:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a1 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800396e:	4b34      	ldr	r3, [pc, #208]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b08      	cmp	r3, #8
 8003978:	d05c      	beq.n	8003a34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d141      	bne.n	8003a06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003982:	4b31      	ldr	r3, [pc, #196]	@ (8003a48 <HAL_RCC_OscConfig+0x478>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fd fc3a 	bl	8001200 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003990:	f7fd fc36 	bl	8001200 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e087      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	019b      	lsls	r3, r3, #6
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	3b01      	subs	r3, #1
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	491b      	ldr	r1, [pc, #108]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <HAL_RCC_OscConfig+0x478>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039de:	f7fd fc0f 	bl	8001200 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fd fc0b 	bl	8001200 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e05c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f8:	4b11      	ldr	r3, [pc, #68]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x416>
 8003a04:	e054      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a06:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <HAL_RCC_OscConfig+0x478>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fbf8 	bl	8001200 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fd fbf4 	bl	8001200 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e045      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x444>
 8003a32:	e03d      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e038      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40007000 	.word	0x40007000
 8003a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003abc <HAL_RCC_OscConfig+0x4ec>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d028      	beq.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d121      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d11a      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d111      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	3b01      	subs	r3, #1
 8003a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0cc      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b68      	ldr	r3, [pc, #416]	@ (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d90c      	bls.n	8003afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b65      	ldr	r3, [pc, #404]	@ (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b63      	ldr	r3, [pc, #396]	@ (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0b8      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b14:	4b59      	ldr	r3, [pc, #356]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a58      	ldr	r2, [pc, #352]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b2c:	4b53      	ldr	r3, [pc, #332]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a52      	ldr	r2, [pc, #328]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b38:	4b50      	ldr	r3, [pc, #320]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	494d      	ldr	r1, [pc, #308]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d044      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b47      	ldr	r3, [pc, #284]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d119      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e07f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e06f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e067      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b37      	ldr	r3, [pc, #220]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4934      	ldr	r1, [pc, #208]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fd fb26 	bl	8001200 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fd fb22 	bl	8001200 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e04f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b2b      	ldr	r3, [pc, #172]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b25      	ldr	r3, [pc, #148]	@ (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d20c      	bcs.n	8003c08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b22      	ldr	r3, [pc, #136]	@ (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e032      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c14:	4b19      	ldr	r3, [pc, #100]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4916      	ldr	r1, [pc, #88]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c32:	4b12      	ldr	r3, [pc, #72]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	490e      	ldr	r1, [pc, #56]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c46:	f000 f821 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	490a      	ldr	r1, [pc, #40]	@ (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003c58:	5ccb      	ldrb	r3, [r1, r3]
 8003c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5e:	4a09      	ldr	r2, [pc, #36]	@ (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c62:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd fa86 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023c00 	.word	0x40023c00
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	08015358 	.word	0x08015358
 8003c84:	20000000 	.word	0x20000000
 8003c88:	20000004 	.word	0x20000004

08003c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c90:	b090      	sub	sp, #64	@ 0x40
 8003c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca4:	4b59      	ldr	r3, [pc, #356]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d00d      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0x40>
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	f200 80a1 	bhi.w	8003df8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cbe:	e09b      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc0:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cc4:	e09b      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc6:	4b53      	ldr	r3, [pc, #332]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cca:	e098      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd6:	4b4d      	ldr	r3, [pc, #308]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d028      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	2200      	movs	r2, #0
 8003cea:	623b      	str	r3, [r7, #32]
 8003cec:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4b47      	ldr	r3, [pc, #284]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cf8:	fb03 f201 	mul.w	r2, r3, r1
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	fb00 f303 	mul.w	r3, r0, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	4a43      	ldr	r2, [pc, #268]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d06:	fba0 1202 	umull	r1, r2, r0, r2
 8003d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d12:	4413      	add	r3, r2
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d18:	2200      	movs	r2, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	61fa      	str	r2, [r7, #28]
 8003d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d26:	f7fc faa3 	bl	8000270 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4613      	mov	r3, r2
 8003d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d32:	e053      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d34:	4b35      	ldr	r3, [pc, #212]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	099b      	lsrs	r3, r3, #6
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	617a      	str	r2, [r7, #20]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d46:	f04f 0b00 	mov.w	fp, #0
 8003d4a:	4652      	mov	r2, sl
 8003d4c:	465b      	mov	r3, fp
 8003d4e:	f04f 0000 	mov.w	r0, #0
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	0159      	lsls	r1, r3, #5
 8003d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5c:	0150      	lsls	r0, r2, #5
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	ebb2 080a 	subs.w	r8, r2, sl
 8003d66:	eb63 090b 	sbc.w	r9, r3, fp
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d82:	eb63 0509 	sbc.w	r5, r3, r9
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	00eb      	lsls	r3, r5, #3
 8003d90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d94:	00e2      	lsls	r2, r4, #3
 8003d96:	4614      	mov	r4, r2
 8003d98:	461d      	mov	r5, r3
 8003d9a:	eb14 030a 	adds.w	r3, r4, sl
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	eb45 030b 	adc.w	r3, r5, fp
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003db2:	4629      	mov	r1, r5
 8003db4:	028b      	lsls	r3, r1, #10
 8003db6:	4621      	mov	r1, r4
 8003db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	028a      	lsls	r2, r1, #10
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	60fa      	str	r2, [r7, #12]
 8003dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd0:	f7fc fa4e 	bl	8000270 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	3301      	adds	r3, #1
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003dec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3740      	adds	r7, #64	@ 0x40
 8003e04:	46bd      	mov	sp, r7
 8003e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	017d7840 	.word	0x017d7840

08003e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	@ (8003e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000000 	.word	0x20000000

08003e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e34:	f7ff fff0 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	@ (8003e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0a9b      	lsrs	r3, r3, #10
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4903      	ldr	r1, [pc, #12]	@ (8003e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	08015368 	.word	0x08015368

08003e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e5c:	f7ff ffdc 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0b5b      	lsrs	r3, r3, #13
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	@ (8003e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	08015368 	.word	0x08015368

08003e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e041      	b.n	8003f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fc fe86 	bl	8000bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 f95e 	bl	8004180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d001      	beq.n	8003f38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e046      	b.n	8003fc6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a23      	ldr	r2, [pc, #140]	@ (8003fd4 <HAL_TIM_Base_Start+0xb4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d022      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f52:	d01d      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd8 <HAL_TIM_Base_Start+0xb8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d018      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1e      	ldr	r2, [pc, #120]	@ (8003fdc <HAL_TIM_Base_Start+0xbc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe0 <HAL_TIM_Base_Start+0xc0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00e      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe4 <HAL_TIM_Base_Start+0xc4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a19      	ldr	r2, [pc, #100]	@ (8003fe8 <HAL_TIM_Base_Start+0xc8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a18      	ldr	r2, [pc, #96]	@ (8003fec <HAL_TIM_Base_Start+0xcc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d111      	bne.n	8003fb4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d010      	beq.n	8003fc4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0201 	orr.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb2:	e007      	b.n	8003fc4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40010400 	.word	0x40010400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40001800 	.word	0x40001800

08003ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIM_ConfigClockSource+0x1c>
 8004008:	2302      	movs	r3, #2
 800400a:	e0b4      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x186>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800402a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004044:	d03e      	beq.n	80040c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800404a:	f200 8087 	bhi.w	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004052:	f000 8086 	beq.w	8004162 <HAL_TIM_ConfigClockSource+0x172>
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800405a:	d87f      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b70      	cmp	r3, #112	@ 0x70
 800405e:	d01a      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0xa6>
 8004060:	2b70      	cmp	r3, #112	@ 0x70
 8004062:	d87b      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b60      	cmp	r3, #96	@ 0x60
 8004066:	d050      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x11a>
 8004068:	2b60      	cmp	r3, #96	@ 0x60
 800406a:	d877      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b50      	cmp	r3, #80	@ 0x50
 800406e:	d03c      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0xfa>
 8004070:	2b50      	cmp	r3, #80	@ 0x50
 8004072:	d873      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b40      	cmp	r3, #64	@ 0x40
 8004076:	d058      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x13a>
 8004078:	2b40      	cmp	r3, #64	@ 0x40
 800407a:	d86f      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b30      	cmp	r3, #48	@ 0x30
 800407e:	d064      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004080:	2b30      	cmp	r3, #48	@ 0x30
 8004082:	d86b      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b20      	cmp	r3, #32
 8004086:	d060      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004088:	2b20      	cmp	r3, #32
 800408a:	d867      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d05c      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004090:	2b10      	cmp	r3, #16
 8004092:	d05a      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004094:	e062      	b.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040a6:	f000 f98b 	bl	80043c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	609a      	str	r2, [r3, #8]
      break;
 80040c2:	e04f      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040d4:	f000 f974 	bl	80043c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040e6:	609a      	str	r2, [r3, #8]
      break;
 80040e8:	e03c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	461a      	mov	r2, r3
 80040f8:	f000 f8e8 	bl	80042cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2150      	movs	r1, #80	@ 0x50
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f941 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8004108:	e02c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004116:	461a      	mov	r2, r3
 8004118:	f000 f907 	bl	800432a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2160      	movs	r1, #96	@ 0x60
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f931 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8004128:	e01c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004136:	461a      	mov	r2, r3
 8004138:	f000 f8c8 	bl	80042cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2140      	movs	r1, #64	@ 0x40
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f921 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8004148:	e00c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f000 f918 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 800415a:	e003      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      break;
 8004160:	e000      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a43      	ldr	r2, [pc, #268]	@ (80042a0 <TIM_Base_SetConfig+0x120>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d013      	beq.n	80041c0 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419e:	d00f      	beq.n	80041c0 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a40      	ldr	r2, [pc, #256]	@ (80042a4 <TIM_Base_SetConfig+0x124>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00b      	beq.n	80041c0 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a3f      	ldr	r2, [pc, #252]	@ (80042a8 <TIM_Base_SetConfig+0x128>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d007      	beq.n	80041c0 <TIM_Base_SetConfig+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a3e      	ldr	r2, [pc, #248]	@ (80042ac <TIM_Base_SetConfig+0x12c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a3d      	ldr	r2, [pc, #244]	@ (80042b0 <TIM_Base_SetConfig+0x130>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d108      	bne.n	80041d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a32      	ldr	r2, [pc, #200]	@ (80042a0 <TIM_Base_SetConfig+0x120>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02b      	beq.n	8004232 <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e0:	d027      	beq.n	8004232 <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a2f      	ldr	r2, [pc, #188]	@ (80042a4 <TIM_Base_SetConfig+0x124>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d023      	beq.n	8004232 <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a2e      	ldr	r2, [pc, #184]	@ (80042a8 <TIM_Base_SetConfig+0x128>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01f      	beq.n	8004232 <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a2d      	ldr	r2, [pc, #180]	@ (80042ac <TIM_Base_SetConfig+0x12c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01b      	beq.n	8004232 <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a2c      	ldr	r2, [pc, #176]	@ (80042b0 <TIM_Base_SetConfig+0x130>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d017      	beq.n	8004232 <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a2b      	ldr	r2, [pc, #172]	@ (80042b4 <TIM_Base_SetConfig+0x134>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a2a      	ldr	r2, [pc, #168]	@ (80042b8 <TIM_Base_SetConfig+0x138>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00f      	beq.n	8004232 <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a29      	ldr	r2, [pc, #164]	@ (80042bc <TIM_Base_SetConfig+0x13c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00b      	beq.n	8004232 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a28      	ldr	r2, [pc, #160]	@ (80042c0 <TIM_Base_SetConfig+0x140>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d007      	beq.n	8004232 <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a27      	ldr	r2, [pc, #156]	@ (80042c4 <TIM_Base_SetConfig+0x144>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d003      	beq.n	8004232 <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a26      	ldr	r2, [pc, #152]	@ (80042c8 <TIM_Base_SetConfig+0x148>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d108      	bne.n	8004244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a0e      	ldr	r2, [pc, #56]	@ (80042a0 <TIM_Base_SetConfig+0x120>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d003      	beq.n	8004272 <TIM_Base_SetConfig+0xf2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a10      	ldr	r2, [pc, #64]	@ (80042b0 <TIM_Base_SetConfig+0x130>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d103      	bne.n	800427a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f043 0204 	orr.w	r2, r3, #4
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	601a      	str	r2, [r3, #0]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40010000 	.word	0x40010000
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40000800 	.word	0x40000800
 80042ac:	40000c00 	.word	0x40000c00
 80042b0:	40010400 	.word	0x40010400
 80042b4:	40014000 	.word	0x40014000
 80042b8:	40014400 	.word	0x40014400
 80042bc:	40014800 	.word	0x40014800
 80042c0:	40001800 	.word	0x40001800
 80042c4:	40001c00 	.word	0x40001c00
 80042c8:	40002000 	.word	0x40002000

080042cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0201 	bic.w	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 030a 	bic.w	r3, r3, #10
 8004308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432a:	b480      	push	{r7}
 800432c:	b087      	sub	sp, #28
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f023 0210 	bic.w	r2, r3, #16
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	031b      	lsls	r3, r3, #12
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004366:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f043 0307 	orr.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	021a      	lsls	r2, r3, #8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004414:	2302      	movs	r3, #2
 8004416:	e05a      	b.n	80044ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a21      	ldr	r2, [pc, #132]	@ (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d022      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004464:	d01d      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1d      	ldr	r2, [pc, #116]	@ (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d018      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1b      	ldr	r2, [pc, #108]	@ (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d013      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1a      	ldr	r2, [pc, #104]	@ (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00e      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a18      	ldr	r2, [pc, #96]	@ (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d009      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a17      	ldr	r2, [pc, #92]	@ (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d004      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a15      	ldr	r2, [pc, #84]	@ (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d10c      	bne.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40000800 	.word	0x40000800
 80044e8:	40000c00 	.word	0x40000c00
 80044ec:	40010400 	.word	0x40010400
 80044f0:	40014000 	.word	0x40014000
 80044f4:	40001800 	.word	0x40001800

080044f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e042      	b.n	8004590 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc fb6a 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	@ 0x24
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800453a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f973 	bl	8004828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	@ 0x28
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d175      	bne.n	80046a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_UART_Transmit+0x2c>
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e06e      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2221      	movs	r2, #33	@ 0x21
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d6:	f7fc fe13 	bl	8001200 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f0:	d108      	bne.n	8004604 <HAL_UART_Transmit+0x6c>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e003      	b.n	800460c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004608:	2300      	movs	r3, #0
 800460a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800460c:	e02e      	b.n	800466c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2200      	movs	r2, #0
 8004616:	2180      	movs	r1, #128	@ 0x80
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f848 	bl	80046ae <UART_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e03a      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004644:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	3302      	adds	r3, #2
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	e007      	b.n	800465e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	781a      	ldrb	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3301      	adds	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1cb      	bne.n	800460e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	2140      	movs	r1, #64	@ 0x40
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f814 	bl	80046ae <UART_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e006      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	4613      	mov	r3, r2
 80046bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046be:	e03b      	b.n	8004738 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d037      	beq.n	8004738 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c8:	f7fc fd9a 	bl	8001200 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	6a3a      	ldr	r2, [r7, #32]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <UART_WaitOnFlagUntilTimeout+0x30>
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e03a      	b.n	8004758 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d023      	beq.n	8004738 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b80      	cmp	r3, #128	@ 0x80
 80046f4:	d020      	beq.n	8004738 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b40      	cmp	r3, #64	@ 0x40
 80046fa:	d01d      	beq.n	8004738 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b08      	cmp	r3, #8
 8004708:	d116      	bne.n	8004738 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f81d 	bl	8004760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2208      	movs	r2, #8
 800472a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e00f      	b.n	8004758 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4013      	ands	r3, r2
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	bf0c      	ite	eq
 8004748:	2301      	moveq	r3, #1
 800474a:	2300      	movne	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	429a      	cmp	r2, r3
 8004754:	d0b4      	beq.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b095      	sub	sp, #84	@ 0x54
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800477e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004788:	643a      	str	r2, [r7, #64]	@ 0x40
 800478a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800478e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3314      	adds	r3, #20
 80047a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3314      	adds	r3, #20
 80047ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e5      	bne.n	800479c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d119      	bne.n	800480c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f023 0310 	bic.w	r3, r3, #16
 80047ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047f8:	61ba      	str	r2, [r7, #24]
 80047fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6979      	ldr	r1, [r7, #20]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	613b      	str	r3, [r7, #16]
   return(result);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800481a:	bf00      	nop
 800481c:	3754      	adds	r7, #84	@ 0x54
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800482c:	b0c0      	sub	sp, #256	@ 0x100
 800482e:	af00      	add	r7, sp, #0
 8004830:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004844:	68d9      	ldr	r1, [r3, #12]
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	ea40 0301 	orr.w	r3, r0, r1
 8004850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	431a      	orrs	r2, r3
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	431a      	orrs	r2, r3
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004880:	f021 010c 	bic.w	r1, r1, #12
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800488e:	430b      	orrs	r3, r1
 8004890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800489e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a2:	6999      	ldr	r1, [r3, #24]
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	ea40 0301 	orr.w	r3, r0, r1
 80048ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b8f      	ldr	r3, [pc, #572]	@ (8004af4 <UART_SetConfig+0x2cc>)
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d005      	beq.n	80048c8 <UART_SetConfig+0xa0>
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b8d      	ldr	r3, [pc, #564]	@ (8004af8 <UART_SetConfig+0x2d0>)
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d104      	bne.n	80048d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048c8:	f7ff fac6 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 80048cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80048d0:	e003      	b.n	80048da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048d2:	f7ff faad 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 80048d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048e4:	f040 810c 	bne.w	8004b00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ec:	2200      	movs	r2, #0
 80048ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048fa:	4622      	mov	r2, r4
 80048fc:	462b      	mov	r3, r5
 80048fe:	1891      	adds	r1, r2, r2
 8004900:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004902:	415b      	adcs	r3, r3
 8004904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800490a:	4621      	mov	r1, r4
 800490c:	eb12 0801 	adds.w	r8, r2, r1
 8004910:	4629      	mov	r1, r5
 8004912:	eb43 0901 	adc.w	r9, r3, r1
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800492a:	4690      	mov	r8, r2
 800492c:	4699      	mov	r9, r3
 800492e:	4623      	mov	r3, r4
 8004930:	eb18 0303 	adds.w	r3, r8, r3
 8004934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004938:	462b      	mov	r3, r5
 800493a:	eb49 0303 	adc.w	r3, r9, r3
 800493e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800494e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004956:	460b      	mov	r3, r1
 8004958:	18db      	adds	r3, r3, r3
 800495a:	653b      	str	r3, [r7, #80]	@ 0x50
 800495c:	4613      	mov	r3, r2
 800495e:	eb42 0303 	adc.w	r3, r2, r3
 8004962:	657b      	str	r3, [r7, #84]	@ 0x54
 8004964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004968:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800496c:	f7fb fc80 	bl	8000270 <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4b61      	ldr	r3, [pc, #388]	@ (8004afc <UART_SetConfig+0x2d4>)
 8004976:	fba3 2302 	umull	r2, r3, r3, r2
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	011c      	lsls	r4, r3, #4
 800497e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004982:	2200      	movs	r2, #0
 8004984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004988:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800498c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004990:	4642      	mov	r2, r8
 8004992:	464b      	mov	r3, r9
 8004994:	1891      	adds	r1, r2, r2
 8004996:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004998:	415b      	adcs	r3, r3
 800499a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800499c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049a0:	4641      	mov	r1, r8
 80049a2:	eb12 0a01 	adds.w	sl, r2, r1
 80049a6:	4649      	mov	r1, r9
 80049a8:	eb43 0b01 	adc.w	fp, r3, r1
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049c0:	4692      	mov	sl, r2
 80049c2:	469b      	mov	fp, r3
 80049c4:	4643      	mov	r3, r8
 80049c6:	eb1a 0303 	adds.w	r3, sl, r3
 80049ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049ce:	464b      	mov	r3, r9
 80049d0:	eb4b 0303 	adc.w	r3, fp, r3
 80049d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80049e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049ec:	460b      	mov	r3, r1
 80049ee:	18db      	adds	r3, r3, r3
 80049f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049f2:	4613      	mov	r3, r2
 80049f4:	eb42 0303 	adc.w	r3, r2, r3
 80049f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a02:	f7fb fc35 	bl	8000270 <__aeabi_uldivmod>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004afc <UART_SetConfig+0x2d4>)
 8004a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	2264      	movs	r2, #100	@ 0x64
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	1acb      	subs	r3, r1, r3
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a22:	4b36      	ldr	r3, [pc, #216]	@ (8004afc <UART_SetConfig+0x2d4>)
 8004a24:	fba3 2302 	umull	r2, r3, r3, r2
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a30:	441c      	add	r4, r3
 8004a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a44:	4642      	mov	r2, r8
 8004a46:	464b      	mov	r3, r9
 8004a48:	1891      	adds	r1, r2, r2
 8004a4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a4c:	415b      	adcs	r3, r3
 8004a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a54:	4641      	mov	r1, r8
 8004a56:	1851      	adds	r1, r2, r1
 8004a58:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	414b      	adcs	r3, r1
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a6c:	4659      	mov	r1, fp
 8004a6e:	00cb      	lsls	r3, r1, #3
 8004a70:	4651      	mov	r1, sl
 8004a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a76:	4651      	mov	r1, sl
 8004a78:	00ca      	lsls	r2, r1, #3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4642      	mov	r2, r8
 8004a82:	189b      	adds	r3, r3, r2
 8004a84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a88:	464b      	mov	r3, r9
 8004a8a:	460a      	mov	r2, r1
 8004a8c:	eb42 0303 	adc.w	r3, r2, r3
 8004a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004aa0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004aa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	18db      	adds	r3, r3, r3
 8004aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aae:	4613      	mov	r3, r2
 8004ab0:	eb42 0303 	adc.w	r3, r2, r3
 8004ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004aba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004abe:	f7fb fbd7 	bl	8000270 <__aeabi_uldivmod>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8004afc <UART_SetConfig+0x2d4>)
 8004ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	2164      	movs	r1, #100	@ 0x64
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	3332      	adds	r3, #50	@ 0x32
 8004ada:	4a08      	ldr	r2, [pc, #32]	@ (8004afc <UART_SetConfig+0x2d4>)
 8004adc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	f003 0207 	and.w	r2, r3, #7
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4422      	add	r2, r4
 8004aee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004af0:	e106      	b.n	8004d00 <UART_SetConfig+0x4d8>
 8004af2:	bf00      	nop
 8004af4:	40011000 	.word	0x40011000
 8004af8:	40011400 	.word	0x40011400
 8004afc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b12:	4642      	mov	r2, r8
 8004b14:	464b      	mov	r3, r9
 8004b16:	1891      	adds	r1, r2, r2
 8004b18:	6239      	str	r1, [r7, #32]
 8004b1a:	415b      	adcs	r3, r3
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b22:	4641      	mov	r1, r8
 8004b24:	1854      	adds	r4, r2, r1
 8004b26:	4649      	mov	r1, r9
 8004b28:	eb43 0501 	adc.w	r5, r3, r1
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	00eb      	lsls	r3, r5, #3
 8004b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b3a:	00e2      	lsls	r2, r4, #3
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	461d      	mov	r5, r3
 8004b40:	4643      	mov	r3, r8
 8004b42:	18e3      	adds	r3, r4, r3
 8004b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b48:	464b      	mov	r3, r9
 8004b4a:	eb45 0303 	adc.w	r3, r5, r3
 8004b4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b6e:	4629      	mov	r1, r5
 8004b70:	008b      	lsls	r3, r1, #2
 8004b72:	4621      	mov	r1, r4
 8004b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b78:	4621      	mov	r1, r4
 8004b7a:	008a      	lsls	r2, r1, #2
 8004b7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b80:	f7fb fb76 	bl	8000270 <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4b60      	ldr	r3, [pc, #384]	@ (8004d0c <UART_SetConfig+0x4e4>)
 8004b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	011c      	lsls	r4, r3, #4
 8004b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	61b9      	str	r1, [r7, #24]
 8004bac:	415b      	adcs	r3, r3
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	1851      	adds	r1, r2, r1
 8004bb8:	6139      	str	r1, [r7, #16]
 8004bba:	4649      	mov	r1, r9
 8004bbc:	414b      	adcs	r3, r1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bcc:	4659      	mov	r1, fp
 8004bce:	00cb      	lsls	r3, r1, #3
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	00ca      	lsls	r2, r1, #3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4603      	mov	r3, r0
 8004be0:	4642      	mov	r2, r8
 8004be2:	189b      	adds	r3, r3, r2
 8004be4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004be8:	464b      	mov	r3, r9
 8004bea:	460a      	mov	r2, r1
 8004bec:	eb42 0303 	adc.w	r3, r2, r3
 8004bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	008b      	lsls	r3, r1, #2
 8004c10:	4641      	mov	r1, r8
 8004c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c16:	4641      	mov	r1, r8
 8004c18:	008a      	lsls	r2, r1, #2
 8004c1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c1e:	f7fb fb27 	bl	8000270 <__aeabi_uldivmod>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	4b38      	ldr	r3, [pc, #224]	@ (8004d0c <UART_SetConfig+0x4e4>)
 8004c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	2264      	movs	r2, #100	@ 0x64
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	1acb      	subs	r3, r1, r3
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	3332      	adds	r3, #50	@ 0x32
 8004c3c:	4a33      	ldr	r2, [pc, #204]	@ (8004d0c <UART_SetConfig+0x4e4>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c48:	441c      	add	r4, r3
 8004c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c4e:	2200      	movs	r2, #0
 8004c50:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c52:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c58:	4642      	mov	r2, r8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	1891      	adds	r1, r2, r2
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	415b      	adcs	r3, r3
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c68:	4641      	mov	r1, r8
 8004c6a:	1851      	adds	r1, r2, r1
 8004c6c:	6039      	str	r1, [r7, #0]
 8004c6e:	4649      	mov	r1, r9
 8004c70:	414b      	adcs	r3, r1
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c80:	4659      	mov	r1, fp
 8004c82:	00cb      	lsls	r3, r1, #3
 8004c84:	4651      	mov	r1, sl
 8004c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	00ca      	lsls	r2, r1, #3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	4642      	mov	r2, r8
 8004c96:	189b      	adds	r3, r3, r2
 8004c98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	460a      	mov	r2, r1
 8004c9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cae:	667a      	str	r2, [r7, #100]	@ 0x64
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cbc:	4649      	mov	r1, r9
 8004cbe:	008b      	lsls	r3, r1, #2
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	008a      	lsls	r2, r1, #2
 8004cca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004cce:	f7fb facf 	bl	8000270 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <UART_SetConfig+0x4e4>)
 8004cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	2164      	movs	r1, #100	@ 0x64
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	3332      	adds	r3, #50	@ 0x32
 8004cea:	4a08      	ldr	r2, [pc, #32]	@ (8004d0c <UART_SetConfig+0x4e4>)
 8004cec:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	f003 020f 	and.w	r2, r3, #15
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4422      	add	r2, r4
 8004cfe:	609a      	str	r2, [r3, #8]
}
 8004d00:	bf00      	nop
 8004d02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d06:	46bd      	mov	sp, r7
 8004d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d0c:	51eb851f 	.word	0x51eb851f

08004d10 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004d16:	4b87      	ldr	r3, [pc, #540]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d18:	22c0      	movs	r2, #192	@ 0xc0
 8004d1a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004d1c:	4b85      	ldr	r3, [pc, #532]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d1e:	22a8      	movs	r2, #168	@ 0xa8
 8004d20:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004d22:	4b84      	ldr	r3, [pc, #528]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 8004d28:	4b82      	ldr	r3, [pc, #520]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d2a:	2232      	movs	r2, #50	@ 0x32
 8004d2c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004d2e:	4b82      	ldr	r3, [pc, #520]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004d30:	22ff      	movs	r2, #255	@ 0xff
 8004d32:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004d34:	4b80      	ldr	r3, [pc, #512]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004d36:	22ff      	movs	r2, #255	@ 0xff
 8004d38:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004d3c:	22ff      	movs	r2, #255	@ 0xff
 8004d3e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004d40:	4b7d      	ldr	r3, [pc, #500]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004d46:	4b7d      	ldr	r3, [pc, #500]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004d48:	22c0      	movs	r2, #192	@ 0xc0
 8004d4a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004d4c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004d4e:	22a8      	movs	r2, #168	@ 0xa8
 8004d50:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004d52:	4b7a      	ldr	r3, [pc, #488]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004d58:	4b78      	ldr	r3, [pc, #480]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8004d5e:	f000 fd02 	bl	8005766 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004d62:	4b74      	ldr	r3, [pc, #464]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	061a      	lsls	r2, r3, #24
 8004d68:	4b72      	ldr	r3, [pc, #456]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d6a:	785b      	ldrb	r3, [r3, #1]
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	4b70      	ldr	r3, [pc, #448]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d72:	789b      	ldrb	r3, [r3, #2]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	4313      	orrs	r3, r2
 8004d78:	4a6e      	ldr	r2, [pc, #440]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d7a:	78d2      	ldrb	r2, [r2, #3]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	061a      	lsls	r2, r3, #24
 8004d80:	4b6c      	ldr	r3, [pc, #432]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	0619      	lsls	r1, r3, #24
 8004d86:	4b6b      	ldr	r3, [pc, #428]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	041b      	lsls	r3, r3, #16
 8004d8c:	4319      	orrs	r1, r3
 8004d8e:	4b69      	ldr	r3, [pc, #420]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d90:	789b      	ldrb	r3, [r3, #2]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	430b      	orrs	r3, r1
 8004d96:	4967      	ldr	r1, [pc, #412]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004d98:	78c9      	ldrb	r1, [r1, #3]
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004da2:	431a      	orrs	r2, r3
 8004da4:	4b63      	ldr	r3, [pc, #396]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	0619      	lsls	r1, r3, #24
 8004daa:	4b62      	ldr	r3, [pc, #392]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	4319      	orrs	r1, r3
 8004db2:	4b60      	ldr	r3, [pc, #384]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004db4:	789b      	ldrb	r3, [r3, #2]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	430b      	orrs	r3, r1
 8004dba:	495e      	ldr	r1, [pc, #376]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004dbc:	78c9      	ldrb	r1, [r1, #3]
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	0619      	lsls	r1, r3, #24
 8004dce:	4b59      	ldr	r3, [pc, #356]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004dd0:	785b      	ldrb	r3, [r3, #1]
 8004dd2:	041b      	lsls	r3, r3, #16
 8004dd4:	4319      	orrs	r1, r3
 8004dd6:	4b57      	ldr	r3, [pc, #348]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004dd8:	789b      	ldrb	r3, [r3, #2]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	4955      	ldr	r1, [pc, #340]	@ (8004f34 <MX_LWIP_Init+0x224>)
 8004de0:	78c9      	ldrb	r1, [r1, #3]
 8004de2:	430b      	orrs	r3, r1
 8004de4:	0e1b      	lsrs	r3, r3, #24
 8004de6:	4313      	orrs	r3, r2
 8004de8:	4a55      	ldr	r2, [pc, #340]	@ (8004f40 <MX_LWIP_Init+0x230>)
 8004dea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004dec:	4b52      	ldr	r3, [pc, #328]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	061a      	lsls	r2, r3, #24
 8004df2:	4b51      	ldr	r3, [pc, #324]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004df4:	785b      	ldrb	r3, [r3, #1]
 8004df6:	041b      	lsls	r3, r3, #16
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004dfc:	789b      	ldrb	r3, [r3, #2]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	4313      	orrs	r3, r2
 8004e02:	4a4d      	ldr	r2, [pc, #308]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e04:	78d2      	ldrb	r2, [r2, #3]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	061a      	lsls	r2, r3, #24
 8004e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	0619      	lsls	r1, r3, #24
 8004e10:	4b49      	ldr	r3, [pc, #292]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	041b      	lsls	r3, r3, #16
 8004e16:	4319      	orrs	r1, r3
 8004e18:	4b47      	ldr	r3, [pc, #284]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e1a:	789b      	ldrb	r3, [r3, #2]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	4945      	ldr	r1, [pc, #276]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e22:	78c9      	ldrb	r1, [r1, #3]
 8004e24:	430b      	orrs	r3, r1
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	4b42      	ldr	r3, [pc, #264]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	0619      	lsls	r1, r3, #24
 8004e34:	4b40      	ldr	r3, [pc, #256]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	4319      	orrs	r1, r3
 8004e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e3e:	789b      	ldrb	r3, [r3, #2]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	430b      	orrs	r3, r1
 8004e44:	493c      	ldr	r1, [pc, #240]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e46:	78c9      	ldrb	r1, [r1, #3]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e50:	431a      	orrs	r2, r3
 8004e52:	4b39      	ldr	r3, [pc, #228]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	0619      	lsls	r1, r3, #24
 8004e58:	4b37      	ldr	r3, [pc, #220]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	041b      	lsls	r3, r3, #16
 8004e5e:	4319      	orrs	r1, r3
 8004e60:	4b35      	ldr	r3, [pc, #212]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e62:	789b      	ldrb	r3, [r3, #2]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	430b      	orrs	r3, r1
 8004e68:	4933      	ldr	r1, [pc, #204]	@ (8004f38 <MX_LWIP_Init+0x228>)
 8004e6a:	78c9      	ldrb	r1, [r1, #3]
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	0e1b      	lsrs	r3, r3, #24
 8004e70:	4313      	orrs	r3, r2
 8004e72:	4a34      	ldr	r2, [pc, #208]	@ (8004f44 <MX_LWIP_Init+0x234>)
 8004e74:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004e76:	4b31      	ldr	r3, [pc, #196]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	061a      	lsls	r2, r3, #24
 8004e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	041b      	lsls	r3, r3, #16
 8004e82:	431a      	orrs	r2, r3
 8004e84:	4b2d      	ldr	r3, [pc, #180]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004e86:	789b      	ldrb	r3, [r3, #2]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004e8e:	78d2      	ldrb	r2, [r2, #3]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	061a      	lsls	r2, r3, #24
 8004e94:	4b29      	ldr	r3, [pc, #164]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	0619      	lsls	r1, r3, #24
 8004e9a:	4b28      	ldr	r3, [pc, #160]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	4319      	orrs	r1, r3
 8004ea2:	4b26      	ldr	r3, [pc, #152]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004ea4:	789b      	ldrb	r3, [r3, #2]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	4924      	ldr	r1, [pc, #144]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004eac:	78c9      	ldrb	r1, [r1, #3]
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	4b20      	ldr	r3, [pc, #128]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	0619      	lsls	r1, r3, #24
 8004ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004ec0:	785b      	ldrb	r3, [r3, #1]
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	4319      	orrs	r1, r3
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004ec8:	789b      	ldrb	r3, [r3, #2]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	491b      	ldr	r1, [pc, #108]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004ed0:	78c9      	ldrb	r1, [r1, #3]
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	0a1b      	lsrs	r3, r3, #8
 8004ed6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004eda:	431a      	orrs	r2, r3
 8004edc:	4b17      	ldr	r3, [pc, #92]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	0619      	lsls	r1, r3, #24
 8004ee2:	4b16      	ldr	r3, [pc, #88]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	041b      	lsls	r3, r3, #16
 8004ee8:	4319      	orrs	r1, r3
 8004eea:	4b14      	ldr	r3, [pc, #80]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004eec:	789b      	ldrb	r3, [r3, #2]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	4912      	ldr	r1, [pc, #72]	@ (8004f3c <MX_LWIP_Init+0x22c>)
 8004ef4:	78c9      	ldrb	r1, [r1, #3]
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	0e1b      	lsrs	r3, r3, #24
 8004efa:	4313      	orrs	r3, r2
 8004efc:	4a12      	ldr	r2, [pc, #72]	@ (8004f48 <MX_LWIP_Init+0x238>)
 8004efe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004f00:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <MX_LWIP_Init+0x23c>)
 8004f02:	9302      	str	r3, [sp, #8]
 8004f04:	4b12      	ldr	r3, [pc, #72]	@ (8004f50 <MX_LWIP_Init+0x240>)
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f48 <MX_LWIP_Init+0x238>)
 8004f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f44 <MX_LWIP_Init+0x234>)
 8004f10:	490b      	ldr	r1, [pc, #44]	@ (8004f40 <MX_LWIP_Init+0x230>)
 8004f12:	4810      	ldr	r0, [pc, #64]	@ (8004f54 <MX_LWIP_Init+0x244>)
 8004f14:	f001 f912 	bl	800613c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004f18:	480e      	ldr	r0, [pc, #56]	@ (8004f54 <MX_LWIP_Init+0x244>)
 8004f1a:	f001 fac1 	bl	80064a0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004f1e:	480d      	ldr	r0, [pc, #52]	@ (8004f54 <MX_LWIP_Init+0x244>)
 8004f20:	f001 face 	bl	80064c0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004f24:	490c      	ldr	r1, [pc, #48]	@ (8004f58 <MX_LWIP_Init+0x248>)
 8004f26:	480b      	ldr	r0, [pc, #44]	@ (8004f54 <MX_LWIP_Init+0x244>)
 8004f28:	f001 fbcc 	bl	80066c4 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000288 	.word	0x20000288
 8004f38:	2000028c 	.word	0x2000028c
 8004f3c:	20000290 	.word	0x20000290
 8004f40:	2000027c 	.word	0x2000027c
 8004f44:	20000280 	.word	0x20000280
 8004f48:	20000284 	.word	0x20000284
 8004f4c:	0800fc21 	.word	0x0800fc21
 8004f50:	08005279 	.word	0x08005279
 8004f54:	20000248 	.word	0x20000248
 8004f58:	08004fad 	.word	0x08004fad

08004f5c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004f64:	f7fc f94c 	bl	8001200 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	4b08      	ldr	r3, [pc, #32]	@ (8004f8c <Ethernet_Link_Periodic_Handle+0x30>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b63      	cmp	r3, #99	@ 0x63
 8004f72:	d907      	bls.n	8004f84 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004f74:	f7fc f944 	bl	8001200 <HAL_GetTick>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	4a04      	ldr	r2, [pc, #16]	@ (8004f8c <Ethernet_Link_Periodic_Handle+0x30>)
 8004f7c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fac6 	bl	8005510 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000244 	.word	0x20000244

08004f90 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004f94:	4804      	ldr	r0, [pc, #16]	@ (8004fa8 <MX_LWIP_Process+0x18>)
 8004f96:	f000 f94f 	bl	8005238 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004f9a:	f008 fa55 	bl	800d448 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004f9e:	4802      	ldr	r0, [pc, #8]	@ (8004fa8 <MX_LWIP_Process+0x18>)
 8004fa0:	f7ff ffdc 	bl	8004f5c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004fa4:	bf00      	nop
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000248 	.word	0x20000248

08004fac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004fcc:	4b44      	ldr	r3, [pc, #272]	@ (80050e0 <low_level_init+0x120>)
 8004fce:	4a45      	ldr	r2, [pc, #276]	@ (80050e4 <low_level_init+0x124>)
 8004fd0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004fd6:	2380      	movs	r3, #128	@ 0x80
 8004fd8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004fda:	23e1      	movs	r3, #225	@ 0xe1
 8004fdc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004fea:	4a3d      	ldr	r2, [pc, #244]	@ (80050e0 <low_level_init+0x120>)
 8004fec:	f107 0308 	add.w	r3, r7, #8
 8004ff0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80050e0 <low_level_init+0x120>)
 8004ff4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ff8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004ffa:	4b39      	ldr	r3, [pc, #228]	@ (80050e0 <low_level_init+0x120>)
 8004ffc:	4a3a      	ldr	r2, [pc, #232]	@ (80050e8 <low_level_init+0x128>)
 8004ffe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005000:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <low_level_init+0x120>)
 8005002:	4a3a      	ldr	r2, [pc, #232]	@ (80050ec <low_level_init+0x12c>)
 8005004:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005006:	4b36      	ldr	r3, [pc, #216]	@ (80050e0 <low_level_init+0x120>)
 8005008:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800500c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800500e:	4834      	ldr	r0, [pc, #208]	@ (80050e0 <low_level_init+0x120>)
 8005010:	f7fc feb4 	bl	8001d7c <HAL_ETH_Init>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005018:	2238      	movs	r2, #56	@ 0x38
 800501a:	2100      	movs	r1, #0
 800501c:	4834      	ldr	r0, [pc, #208]	@ (80050f0 <low_level_init+0x130>)
 800501e:	f00c fbaa 	bl	8011776 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005022:	4b33      	ldr	r3, [pc, #204]	@ (80050f0 <low_level_init+0x130>)
 8005024:	2221      	movs	r2, #33	@ 0x21
 8005026:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005028:	4b31      	ldr	r3, [pc, #196]	@ (80050f0 <low_level_init+0x130>)
 800502a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800502e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005030:	4b2f      	ldr	r3, [pc, #188]	@ (80050f0 <low_level_init+0x130>)
 8005032:	2200      	movs	r2, #0
 8005034:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005036:	482f      	ldr	r0, [pc, #188]	@ (80050f4 <low_level_init+0x134>)
 8005038:	f000 ff48 	bl	8005ecc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2206      	movs	r2, #6
 8005040:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005044:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <low_level_init+0x120>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	781a      	ldrb	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005050:	4b23      	ldr	r3, [pc, #140]	@ (80050e0 <low_level_init+0x120>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	785a      	ldrb	r2, [r3, #1]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800505c:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <low_level_init+0x120>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	789a      	ldrb	r2, [r3, #2]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005068:	4b1d      	ldr	r3, [pc, #116]	@ (80050e0 <low_level_init+0x120>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	78da      	ldrb	r2, [r3, #3]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005074:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <low_level_init+0x120>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	791a      	ldrb	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005080:	4b17      	ldr	r3, [pc, #92]	@ (80050e0 <low_level_init+0x120>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	795a      	ldrb	r2, [r3, #5]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005092:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800509a:	f043 030a 	orr.w	r3, r3, #10
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80050a6:	4914      	ldr	r1, [pc, #80]	@ (80050f8 <low_level_init+0x138>)
 80050a8:	4814      	ldr	r0, [pc, #80]	@ (80050fc <low_level_init+0x13c>)
 80050aa:	f7fb ff3c 	bl	8000f26 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80050ae:	4813      	ldr	r0, [pc, #76]	@ (80050fc <low_level_init+0x13c>)
 80050b0:	f7fb ff6b 	bl	8000f8a <LAN8742_Init>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d006      	beq.n	80050c8 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f001 fad2 	bl	8006664 <netif_set_link_down>
    netif_set_down(netif);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f001 fa69 	bl	8006598 <netif_set_down>
 80050c6:	e008      	b.n	80050da <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d103      	bne.n	80050d6 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fa1e 	bl	8005510 <ethernet_link_check_state>
 80050d4:	e001      	b.n	80050da <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80050d6:	f7fb fd19 	bl	8000b0c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20004d60 	.word	0x20004d60
 80050e4:	40028000 	.word	0x40028000
 80050e8:	20004cc0 	.word	0x20004cc0
 80050ec:	20004c20 	.word	0x20004c20
 80050f0:	20004e10 	.word	0x20004e10
 80050f4:	08015370 	.word	0x08015370
 80050f8:	2000000c 	.word	0x2000000c
 80050fc:	20004e48 	.word	0x20004e48

08005100 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b092      	sub	sp, #72	@ 0x48
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005118:	f107 030c 	add.w	r3, r7, #12
 800511c:	2230      	movs	r2, #48	@ 0x30
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f00c fb28 	bl	8011776 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005126:	f107 030c 	add.w	r3, r7, #12
 800512a:	2230      	movs	r2, #48	@ 0x30
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f00c fb21 	bl	8011776 <memset>

  for(q = p; q != NULL; q = q->next)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	643b      	str	r3, [r7, #64]	@ 0x40
 8005138:	e045      	b.n	80051c6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800513a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800513c:	2b03      	cmp	r3, #3
 800513e:	d902      	bls.n	8005146 <low_level_output+0x46>
      return ERR_IF;
 8005140:	f06f 030b 	mvn.w	r3, #11
 8005144:	e055      	b.n	80051f2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005148:	6859      	ldr	r1, [r3, #4]
 800514a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800514c:	4613      	mov	r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	3348      	adds	r3, #72	@ 0x48
 8005156:	443b      	add	r3, r7
 8005158:	3b3c      	subs	r3, #60	@ 0x3c
 800515a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800515c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800515e:	895b      	ldrh	r3, [r3, #10]
 8005160:	4619      	mov	r1, r3
 8005162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005164:	4613      	mov	r3, r2
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	3348      	adds	r3, #72	@ 0x48
 800516e:	443b      	add	r3, r7
 8005170:	3b38      	subs	r3, #56	@ 0x38
 8005172:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005176:	2b00      	cmp	r3, #0
 8005178:	d011      	beq.n	800519e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800517a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517c:	1e5a      	subs	r2, r3, #1
 800517e:	f107 000c 	add.w	r0, r7, #12
 8005182:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005184:	460b      	mov	r3, r1
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	440b      	add	r3, r1
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	18c1      	adds	r1, r0, r3
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	3348      	adds	r3, #72	@ 0x48
 8005198:	443b      	add	r3, r7
 800519a:	3b34      	subs	r3, #52	@ 0x34
 800519c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800519e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80051a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051a8:	4613      	mov	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	3348      	adds	r3, #72	@ 0x48
 80051b2:	443b      	add	r3, r7
 80051b4:	3b34      	subs	r3, #52	@ 0x34
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80051ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051bc:	3301      	adds	r3, #1
 80051be:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80051c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1b6      	bne.n	800513a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	891b      	ldrh	r3, [r3, #8]
 80051d0:	461a      	mov	r2, r3
 80051d2:	4b0a      	ldr	r3, [pc, #40]	@ (80051fc <low_level_output+0xfc>)
 80051d4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80051d6:	4a09      	ldr	r2, [pc, #36]	@ (80051fc <low_level_output+0xfc>)
 80051d8:	f107 030c 	add.w	r3, r7, #12
 80051dc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80051de:	4a07      	ldr	r2, [pc, #28]	@ (80051fc <low_level_output+0xfc>)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80051e4:	2214      	movs	r2, #20
 80051e6:	4905      	ldr	r1, [pc, #20]	@ (80051fc <low_level_output+0xfc>)
 80051e8:	4805      	ldr	r0, [pc, #20]	@ (8005200 <low_level_output+0x100>)
 80051ea:	f7fc ff52 	bl	8002092 <HAL_ETH_Transmit>

  return errval;
 80051ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3748      	adds	r7, #72	@ 0x48
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20004e10 	.word	0x20004e10
 8005200:	20004d60 	.word	0x20004d60

08005204 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005210:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <low_level_input+0x2c>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d105      	bne.n	8005224 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005218:	f107 030c 	add.w	r3, r7, #12
 800521c:	4619      	mov	r1, r3
 800521e:	4805      	ldr	r0, [pc, #20]	@ (8005234 <low_level_input+0x30>)
 8005220:	f7fc ffcb 	bl	80021ba <HAL_ETH_ReadData>
  }

  return p;
 8005224:	68fb      	ldr	r3, [r7, #12]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20004c1c 	.word	0x20004c1c
 8005234:	20004d60 	.word	0x20004d60

08005238 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ffdd 	bl	8005204 <low_level_input>
 800524a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	4798      	blx	r3
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f001 fdae 	bl	8006dc4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1ea      	bne.n	8005244 <ethernetif_input+0xc>
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <ethernetif_init+0x1c>
 8005286:	4b0e      	ldr	r3, [pc, #56]	@ (80052c0 <ethernetif_init+0x48>)
 8005288:	f240 126f 	movw	r2, #367	@ 0x16f
 800528c:	490d      	ldr	r1, [pc, #52]	@ (80052c4 <ethernetif_init+0x4c>)
 800528e:	480e      	ldr	r0, [pc, #56]	@ (80052c8 <ethernetif_init+0x50>)
 8005290:	f00c f9bc 	bl	801160c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2273      	movs	r2, #115	@ 0x73
 8005298:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2274      	movs	r2, #116	@ 0x74
 80052a0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a09      	ldr	r2, [pc, #36]	@ (80052cc <ethernetif_init+0x54>)
 80052a8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a08      	ldr	r2, [pc, #32]	@ (80052d0 <ethernetif_init+0x58>)
 80052ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff fe85 	bl	8004fc0 <low_level_init>

  return ERR_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	08012824 	.word	0x08012824
 80052c4:	08012840 	.word	0x08012840
 80052c8:	08012850 	.word	0x08012850
 80052cc:	0800e0d9 	.word	0x0800e0d9
 80052d0:	08005101 	.word	0x08005101

080052d4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80052e0:	68f9      	ldr	r1, [r7, #12]
 80052e2:	4807      	ldr	r0, [pc, #28]	@ (8005300 <pbuf_free_custom+0x2c>)
 80052e4:	f000 fed4 	bl	8006090 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80052e8:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <pbuf_free_custom+0x30>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d102      	bne.n	80052f6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80052f0:	4b04      	ldr	r3, [pc, #16]	@ (8005304 <pbuf_free_custom+0x30>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
  }
}
 80052f6:	bf00      	nop
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	08015370 	.word	0x08015370
 8005304:	20004c1c 	.word	0x20004c1c

08005308 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800530c:	f7fb ff78 	bl	8001200 <HAL_GetTick>
 8005310:	4603      	mov	r3, r0
}
 8005312:	4618      	mov	r0, r3
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08e      	sub	sp, #56	@ 0x38
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	609a      	str	r2, [r3, #8]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a4a      	ldr	r2, [pc, #296]	@ (8005460 <HAL_ETH_MspInit+0x148>)
 8005336:	4293      	cmp	r3, r2
 8005338:	f040 808d 	bne.w	8005456 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800533c:	2300      	movs	r3, #0
 800533e:	623b      	str	r3, [r7, #32]
 8005340:	4b48      	ldr	r3, [pc, #288]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	4a47      	ldr	r2, [pc, #284]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 8005346:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800534a:	6313      	str	r3, [r2, #48]	@ 0x30
 800534c:	4b45      	ldr	r3, [pc, #276]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 800534e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005354:	623b      	str	r3, [r7, #32]
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	4b41      	ldr	r3, [pc, #260]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005360:	4a40      	ldr	r2, [pc, #256]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 8005362:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005366:	6313      	str	r3, [r2, #48]	@ 0x30
 8005368:	4b3e      	ldr	r3, [pc, #248]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2300      	movs	r3, #0
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	4b3a      	ldr	r3, [pc, #232]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537c:	4a39      	ldr	r2, [pc, #228]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 800537e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005382:	6313      	str	r3, [r2, #48]	@ 0x30
 8005384:	4b37      	ldr	r3, [pc, #220]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	4b33      	ldr	r3, [pc, #204]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 8005396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005398:	4a32      	ldr	r2, [pc, #200]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 800539a:	f043 0304 	orr.w	r3, r3, #4
 800539e:	6313      	str	r3, [r2, #48]	@ 0x30
 80053a0:	4b30      	ldr	r3, [pc, #192]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 80053a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ac:	2300      	movs	r3, #0
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80053bc:	4b29      	ldr	r3, [pc, #164]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	4b25      	ldr	r3, [pc, #148]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d0:	4a24      	ldr	r2, [pc, #144]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 80053d2:	f043 0302 	orr.w	r3, r3, #2
 80053d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80053d8:	4b22      	ldr	r3, [pc, #136]	@ (8005464 <HAL_ETH_MspInit+0x14c>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80053e4:	2332      	movs	r3, #50	@ 0x32
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e8:	2302      	movs	r3, #2
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f0:	2303      	movs	r3, #3
 80053f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053f4:	230b      	movs	r3, #11
 80053f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053fc:	4619      	mov	r1, r3
 80053fe:	481a      	ldr	r0, [pc, #104]	@ (8005468 <HAL_ETH_MspInit+0x150>)
 8005400:	f7fd ff0c 	bl	800321c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005404:	2386      	movs	r3, #134	@ 0x86
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005408:	2302      	movs	r3, #2
 800540a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	2300      	movs	r3, #0
 800540e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005410:	2303      	movs	r3, #3
 8005412:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005414:	230b      	movs	r3, #11
 8005416:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800541c:	4619      	mov	r1, r3
 800541e:	4813      	ldr	r0, [pc, #76]	@ (800546c <HAL_ETH_MspInit+0x154>)
 8005420:	f7fd fefc 	bl	800321c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005424:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542a:	2302      	movs	r3, #2
 800542c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542e:	2300      	movs	r3, #0
 8005430:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005432:	2303      	movs	r3, #3
 8005434:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005436:	230b      	movs	r3, #11
 8005438:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800543a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800543e:	4619      	mov	r1, r3
 8005440:	480b      	ldr	r0, [pc, #44]	@ (8005470 <HAL_ETH_MspInit+0x158>)
 8005442:	f7fd feeb 	bl	800321c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8005446:	2200      	movs	r2, #0
 8005448:	2100      	movs	r1, #0
 800544a:	203d      	movs	r0, #61	@ 0x3d
 800544c:	f7fc fc5f 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005450:	203d      	movs	r0, #61	@ 0x3d
 8005452:	f7fc fc78 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005456:	bf00      	nop
 8005458:	3738      	adds	r7, #56	@ 0x38
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40028000 	.word	0x40028000
 8005464:	40023800 	.word	0x40023800
 8005468:	40020800 	.word	0x40020800
 800546c:	40020000 	.word	0x40020000
 8005470:	40020400 	.word	0x40020400

08005474 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005478:	4802      	ldr	r0, [pc, #8]	@ (8005484 <ETH_PHY_IO_Init+0x10>)
 800547a:	f7fd fa6b 	bl	8002954 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20004d60 	.word	0x20004d60

08005488 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  return 0;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	68f9      	ldr	r1, [r7, #12]
 80054aa:	4807      	ldr	r0, [pc, #28]	@ (80054c8 <ETH_PHY_IO_ReadReg+0x30>)
 80054ac:	f7fd f8ac 	bl	8002608 <HAL_ETH_ReadPHYRegister>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80054b6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ba:	e000      	b.n	80054be <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20004d60 	.word	0x20004d60

080054cc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	4807      	ldr	r0, [pc, #28]	@ (80054fc <ETH_PHY_IO_WriteReg+0x30>)
 80054e0:	f7fd f8dd 	bl	800269e <HAL_ETH_WritePHYRegister>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80054ea:	f04f 33ff 	mov.w	r3, #4294967295
 80054ee:	e000      	b.n	80054f2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20004d60 	.word	0x20004d60

08005500 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005504:	f7fb fe7c 	bl	8001200 <HAL_GetTick>
 8005508:	4603      	mov	r3, r0
}
 800550a:	4618      	mov	r0, r3
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b0a0      	sub	sp, #128	@ 0x80
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005518:	f107 030c 	add.w	r3, r7, #12
 800551c:	2264      	movs	r2, #100	@ 0x64
 800551e:	2100      	movs	r1, #0
 8005520:	4618      	mov	r0, r3
 8005522:	f00c f928 	bl	8011776 <memset>
  int32_t PHYLinkState = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800552e:	2300      	movs	r3, #0
 8005530:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005532:	2300      	movs	r3, #0
 8005534:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005536:	483a      	ldr	r0, [pc, #232]	@ (8005620 <ethernet_link_check_state+0x110>)
 8005538:	f7fb fd74 	bl	8001024 <LAN8742_GetLinkState>
 800553c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005544:	089b      	lsrs	r3, r3, #2
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00c      	beq.n	800556a <ethernet_link_check_state+0x5a>
 8005550:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005552:	2b01      	cmp	r3, #1
 8005554:	dc09      	bgt.n	800556a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8005556:	4833      	ldr	r0, [pc, #204]	@ (8005624 <ethernet_link_check_state+0x114>)
 8005558:	f7fc fd1c 	bl	8001f94 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f001 f81b 	bl	8006598 <netif_set_down>
    netif_set_link_down(netif);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f001 f87e 	bl	8006664 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005568:	e055      	b.n	8005616 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d14e      	bne.n	8005616 <ethernet_link_check_state+0x106>
 8005578:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800557a:	2b01      	cmp	r3, #1
 800557c:	dd4b      	ble.n	8005616 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800557e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005580:	3b02      	subs	r3, #2
 8005582:	2b03      	cmp	r3, #3
 8005584:	d82a      	bhi.n	80055dc <ethernet_link_check_state+0xcc>
 8005586:	a201      	add	r2, pc, #4	@ (adr r2, 800558c <ethernet_link_check_state+0x7c>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	0800559d 	.word	0x0800559d
 8005590:	080055af 	.word	0x080055af
 8005594:	080055bf 	.word	0x080055bf
 8005598:	080055cf 	.word	0x080055cf
      duplex = ETH_FULLDUPLEX_MODE;
 800559c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80055a0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80055a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80055a6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80055a8:	2301      	movs	r3, #1
 80055aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80055ac:	e017      	b.n	80055de <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80055b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80055b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80055b8:	2301      	movs	r3, #1
 80055ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80055bc:	e00f      	b.n	80055de <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80055be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80055c2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80055c4:	2300      	movs	r3, #0
 80055c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80055c8:	2301      	movs	r3, #1
 80055ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80055cc:	e007      	b.n	80055de <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80055d2:	2300      	movs	r3, #0
 80055d4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80055d6:	2301      	movs	r3, #1
 80055d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80055da:	e000      	b.n	80055de <ethernet_link_check_state+0xce>
      break;
 80055dc:	bf00      	nop
    if(linkchanged)
 80055de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d018      	beq.n	8005616 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80055e4:	f107 030c 	add.w	r3, r7, #12
 80055e8:	4619      	mov	r1, r3
 80055ea:	480e      	ldr	r0, [pc, #56]	@ (8005624 <ethernet_link_check_state+0x114>)
 80055ec:	f7fd f8a0 	bl	8002730 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80055f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80055f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055f6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80055f8:	f107 030c 	add.w	r3, r7, #12
 80055fc:	4619      	mov	r1, r3
 80055fe:	4809      	ldr	r0, [pc, #36]	@ (8005624 <ethernet_link_check_state+0x114>)
 8005600:	f7fd f98d 	bl	800291e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005604:	4807      	ldr	r0, [pc, #28]	@ (8005624 <ethernet_link_check_state+0x114>)
 8005606:	f7fc fc55 	bl	8001eb4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 ff58 	bl	80064c0 <netif_set_up>
      netif_set_link_up(netif);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fff3 	bl	80065fc <netif_set_link_up>
}
 8005616:	bf00      	nop
 8005618:	3780      	adds	r7, #128	@ 0x80
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20004e48 	.word	0x20004e48
 8005624:	20004d60 	.word	0x20004d60

08005628 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af02      	add	r7, sp, #8
 800562e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005630:	4812      	ldr	r0, [pc, #72]	@ (800567c <HAL_ETH_RxAllocateCallback+0x54>)
 8005632:	f000 fcbf 	bl	8005fb4 <memp_malloc_pool>
 8005636:	60f8      	str	r0, [r7, #12]
  if (p)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d014      	beq.n	8005668 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f103 0220 	add.w	r2, r3, #32
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4a0d      	ldr	r2, [pc, #52]	@ (8005680 <HAL_ETH_RxAllocateCallback+0x58>)
 800564c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005656:	9201      	str	r2, [sp, #4]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2241      	movs	r2, #65	@ 0x41
 800565e:	2100      	movs	r1, #0
 8005660:	2000      	movs	r0, #0
 8005662:	f001 f9f5 	bl	8006a50 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005666:	e005      	b.n	8005674 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005668:	4b06      	ldr	r3, [pc, #24]	@ (8005684 <HAL_ETH_RxAllocateCallback+0x5c>)
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	08015370 	.word	0x08015370
 8005680:	080052d5 	.word	0x080052d5
 8005684:	20004c1c 	.word	0x20004c1c

08005688 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005688:	b480      	push	{r7}
 800568a:	b089      	sub	sp, #36	@ 0x24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3b20      	subs	r3, #32
 80056a6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2200      	movs	r2, #0
 80056b2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	887a      	ldrh	r2, [r7, #2]
 80056b8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d103      	bne.n	80056ca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	e003      	b.n	80056d2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	e009      	b.n	80056f4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	891a      	ldrh	r2, [r3, #8]
 80056e4:	887b      	ldrh	r3, [r7, #2]
 80056e6:	4413      	add	r3, r2
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f2      	bne.n	80056e0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80056fa:	bf00      	nop
 80056fc:	bf00      	nop
 80056fe:	3724      	adds	r7, #36	@ 0x24
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	b21a      	sxth	r2, r3
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	0a1b      	lsrs	r3, r3, #8
 800571e:	b29b      	uxth	r3, r3
 8005720:	b21b      	sxth	r3, r3
 8005722:	4313      	orrs	r3, r2
 8005724:	b21b      	sxth	r3, r3
 8005726:	b29b      	uxth	r3, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	061a      	lsls	r2, r3, #24
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	0a1b      	lsrs	r3, r3, #8
 800574e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	0e1b      	lsrs	r3, r3, #24
 8005758:	4313      	orrs	r3, r2
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005770:	f000 f8d4 	bl	800591c <mem_init>
  memp_init();
 8005774:	f000 fbda 	bl	8005f2c <memp_init>
  pbuf_init();
  netif_init();
 8005778:	f000 fcd8 	bl	800612c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800577c:	f007 fea6 	bl	800d4cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005780:	f001 fdae 	bl	80072e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005784:	f007 fe18 	bl	800d3b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800579a:	4b05      	ldr	r3, [pc, #20]	@ (80057b0 <ptr_to_mem+0x20>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	4413      	add	r3, r2
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	200054d4 	.word	0x200054d4

080057b4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80057bc:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <mem_to_ptr+0x20>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	b29b      	uxth	r3, r3
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	200054d4 	.word	0x200054d4

080057d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80057e0:	4b45      	ldr	r3, [pc, #276]	@ (80058f8 <plug_holes+0x120>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d206      	bcs.n	80057f8 <plug_holes+0x20>
 80057ea:	4b44      	ldr	r3, [pc, #272]	@ (80058fc <plug_holes+0x124>)
 80057ec:	f240 12df 	movw	r2, #479	@ 0x1df
 80057f0:	4943      	ldr	r1, [pc, #268]	@ (8005900 <plug_holes+0x128>)
 80057f2:	4844      	ldr	r0, [pc, #272]	@ (8005904 <plug_holes+0x12c>)
 80057f4:	f00b ff0a 	bl	801160c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80057f8:	4b43      	ldr	r3, [pc, #268]	@ (8005908 <plug_holes+0x130>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d306      	bcc.n	8005810 <plug_holes+0x38>
 8005802:	4b3e      	ldr	r3, [pc, #248]	@ (80058fc <plug_holes+0x124>)
 8005804:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005808:	4940      	ldr	r1, [pc, #256]	@ (800590c <plug_holes+0x134>)
 800580a:	483e      	ldr	r0, [pc, #248]	@ (8005904 <plug_holes+0x12c>)
 800580c:	f00b fefe 	bl	801160c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	791b      	ldrb	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d006      	beq.n	8005826 <plug_holes+0x4e>
 8005818:	4b38      	ldr	r3, [pc, #224]	@ (80058fc <plug_holes+0x124>)
 800581a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800581e:	493c      	ldr	r1, [pc, #240]	@ (8005910 <plug_holes+0x138>)
 8005820:	4838      	ldr	r0, [pc, #224]	@ (8005904 <plug_holes+0x12c>)
 8005822:	f00b fef3 	bl	801160c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800582e:	d906      	bls.n	800583e <plug_holes+0x66>
 8005830:	4b32      	ldr	r3, [pc, #200]	@ (80058fc <plug_holes+0x124>)
 8005832:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8005836:	4937      	ldr	r1, [pc, #220]	@ (8005914 <plug_holes+0x13c>)
 8005838:	4832      	ldr	r0, [pc, #200]	@ (8005904 <plug_holes+0x12c>)
 800583a:	f00b fee7 	bl	801160c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff ffa4 	bl	8005790 <ptr_to_mem>
 8005848:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	429a      	cmp	r2, r3
 8005850:	d024      	beq.n	800589c <plug_holes+0xc4>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	791b      	ldrb	r3, [r3, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d120      	bne.n	800589c <plug_holes+0xc4>
 800585a:	4b2b      	ldr	r3, [pc, #172]	@ (8005908 <plug_holes+0x130>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	429a      	cmp	r2, r3
 8005862:	d01b      	beq.n	800589c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005864:	4b2c      	ldr	r3, [pc, #176]	@ (8005918 <plug_holes+0x140>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	429a      	cmp	r2, r3
 800586c:	d102      	bne.n	8005874 <plug_holes+0x9c>
      lfree = mem;
 800586e:	4a2a      	ldr	r2, [pc, #168]	@ (8005918 <plug_holes+0x140>)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	881a      	ldrh	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005884:	d00a      	beq.n	800589c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff ff80 	bl	8005790 <ptr_to_mem>
 8005890:	4604      	mov	r4, r0
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff ff8e 	bl	80057b4 <mem_to_ptr>
 8005898:	4603      	mov	r3, r0
 800589a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	885b      	ldrh	r3, [r3, #2]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff ff75 	bl	8005790 <ptr_to_mem>
 80058a6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d01f      	beq.n	80058f0 <plug_holes+0x118>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	791b      	ldrb	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d11b      	bne.n	80058f0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80058b8:	4b17      	ldr	r3, [pc, #92]	@ (8005918 <plug_holes+0x140>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d102      	bne.n	80058c8 <plug_holes+0xf0>
      lfree = pmem;
 80058c2:	4a15      	ldr	r2, [pc, #84]	@ (8005918 <plug_holes+0x140>)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	881a      	ldrh	r2, [r3, #0]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80058d8:	d00a      	beq.n	80058f0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ff56 	bl	8005790 <ptr_to_mem>
 80058e4:	4604      	mov	r4, r0
 80058e6:	68b8      	ldr	r0, [r7, #8]
 80058e8:	f7ff ff64 	bl	80057b4 <mem_to_ptr>
 80058ec:	4603      	mov	r3, r0
 80058ee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd90      	pop	{r4, r7, pc}
 80058f8:	200054d4 	.word	0x200054d4
 80058fc:	08012878 	.word	0x08012878
 8005900:	080128a8 	.word	0x080128a8
 8005904:	080128c0 	.word	0x080128c0
 8005908:	200054d8 	.word	0x200054d8
 800590c:	080128e8 	.word	0x080128e8
 8005910:	08012904 	.word	0x08012904
 8005914:	08012920 	.word	0x08012920
 8005918:	200054dc 	.word	0x200054dc

0800591c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005922:	4b18      	ldr	r3, [pc, #96]	@ (8005984 <mem_init+0x68>)
 8005924:	3303      	adds	r3, #3
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	461a      	mov	r2, r3
 800592c:	4b16      	ldr	r3, [pc, #88]	@ (8005988 <mem_init+0x6c>)
 800592e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005930:	4b15      	ldr	r3, [pc, #84]	@ (8005988 <mem_init+0x6c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800593c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800594a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800594e:	f7ff ff1f 	bl	8005790 <ptr_to_mem>
 8005952:	4603      	mov	r3, r0
 8005954:	4a0d      	ldr	r2, [pc, #52]	@ (800598c <mem_init+0x70>)
 8005956:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005958:	4b0c      	ldr	r3, [pc, #48]	@ (800598c <mem_init+0x70>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2201      	movs	r2, #1
 800595e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005960:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <mem_init+0x70>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005968:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800596a:	4b08      	ldr	r3, [pc, #32]	@ (800598c <mem_init+0x70>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005972:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005974:	4b04      	ldr	r3, [pc, #16]	@ (8005988 <mem_init+0x6c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a05      	ldr	r2, [pc, #20]	@ (8005990 <mem_init+0x74>)
 800597a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20004e80 	.word	0x20004e80
 8005988:	200054d4 	.word	0x200054d4
 800598c:	200054d8 	.word	0x200054d8
 8005990:	200054dc 	.word	0x200054dc

08005994 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff ff09 	bl	80057b4 <mem_to_ptr>
 80059a2:	4603      	mov	r3, r0
 80059a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fef0 	bl	8005790 <ptr_to_mem>
 80059b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	885b      	ldrh	r3, [r3, #2]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff feea 	bl	8005790 <ptr_to_mem>
 80059bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80059c6:	d818      	bhi.n	80059fa <mem_link_valid+0x66>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	885b      	ldrh	r3, [r3, #2]
 80059cc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80059d0:	d813      	bhi.n	80059fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80059d6:	8afa      	ldrh	r2, [r7, #22]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d004      	beq.n	80059e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	8afa      	ldrh	r2, [r7, #22]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d109      	bne.n	80059fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80059e6:	4b08      	ldr	r3, [pc, #32]	@ (8005a08 <mem_link_valid+0x74>)
 80059e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d006      	beq.n	80059fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	885b      	ldrh	r3, [r3, #2]
 80059f4:	8afa      	ldrh	r2, [r7, #22]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d001      	beq.n	80059fe <mem_link_valid+0x6a>
    return 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e000      	b.n	8005a00 <mem_link_valid+0x6c>
  }
  return 1;
 80059fe:	2301      	movs	r3, #1
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	200054d8 	.word	0x200054d8

08005a0c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d04c      	beq.n	8005ab4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f003 0303 	and.w	r3, r3, #3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005a24:	4b25      	ldr	r3, [pc, #148]	@ (8005abc <mem_free+0xb0>)
 8005a26:	f240 2273 	movw	r2, #627	@ 0x273
 8005a2a:	4925      	ldr	r1, [pc, #148]	@ (8005ac0 <mem_free+0xb4>)
 8005a2c:	4825      	ldr	r0, [pc, #148]	@ (8005ac4 <mem_free+0xb8>)
 8005a2e:	f00b fded 	bl	801160c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a32:	e040      	b.n	8005ab6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3b08      	subs	r3, #8
 8005a38:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005a3a:	4b23      	ldr	r3, [pc, #140]	@ (8005ac8 <mem_free+0xbc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d306      	bcc.n	8005a52 <mem_free+0x46>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f103 020c 	add.w	r2, r3, #12
 8005a4a:	4b20      	ldr	r3, [pc, #128]	@ (8005acc <mem_free+0xc0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d907      	bls.n	8005a62 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005a52:	4b1a      	ldr	r3, [pc, #104]	@ (8005abc <mem_free+0xb0>)
 8005a54:	f240 227f 	movw	r2, #639	@ 0x27f
 8005a58:	491d      	ldr	r1, [pc, #116]	@ (8005ad0 <mem_free+0xc4>)
 8005a5a:	481a      	ldr	r0, [pc, #104]	@ (8005ac4 <mem_free+0xb8>)
 8005a5c:	f00b fdd6 	bl	801160c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a60:	e029      	b.n	8005ab6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	791b      	ldrb	r3, [r3, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d107      	bne.n	8005a7a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005a6a:	4b14      	ldr	r3, [pc, #80]	@ (8005abc <mem_free+0xb0>)
 8005a6c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8005a70:	4918      	ldr	r1, [pc, #96]	@ (8005ad4 <mem_free+0xc8>)
 8005a72:	4814      	ldr	r0, [pc, #80]	@ (8005ac4 <mem_free+0xb8>)
 8005a74:	f00b fdca 	bl	801160c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a78:	e01d      	b.n	8005ab6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7ff ff8a 	bl	8005994 <mem_link_valid>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d107      	bne.n	8005a96 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <mem_free+0xb0>)
 8005a88:	f240 2295 	movw	r2, #661	@ 0x295
 8005a8c:	4912      	ldr	r1, [pc, #72]	@ (8005ad8 <mem_free+0xcc>)
 8005a8e:	480d      	ldr	r0, [pc, #52]	@ (8005ac4 <mem_free+0xb8>)
 8005a90:	f00b fdbc 	bl	801160c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a94:	e00f      	b.n	8005ab6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005adc <mem_free+0xd0>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d202      	bcs.n	8005aac <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8005adc <mem_free+0xd0>)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7ff fe93 	bl	80057d8 <plug_holes>
 8005ab2:	e000      	b.n	8005ab6 <mem_free+0xaa>
    return;
 8005ab4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	08012878 	.word	0x08012878
 8005ac0:	0801294c 	.word	0x0801294c
 8005ac4:	080128c0 	.word	0x080128c0
 8005ac8:	200054d4 	.word	0x200054d4
 8005acc:	200054d8 	.word	0x200054d8
 8005ad0:	08012970 	.word	0x08012970
 8005ad4:	0801298c 	.word	0x0801298c
 8005ad8:	080129b4 	.word	0x080129b4
 8005adc:	200054dc 	.word	0x200054dc

08005ae0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005aec:	887b      	ldrh	r3, [r7, #2]
 8005aee:	3303      	adds	r3, #3
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005af8:	8bfb      	ldrh	r3, [r7, #30]
 8005afa:	2b0b      	cmp	r3, #11
 8005afc:	d801      	bhi.n	8005b02 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005afe:	230c      	movs	r3, #12
 8005b00:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005b02:	8bfb      	ldrh	r3, [r7, #30]
 8005b04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005b08:	d803      	bhi.n	8005b12 <mem_trim+0x32>
 8005b0a:	8bfa      	ldrh	r2, [r7, #30]
 8005b0c:	887b      	ldrh	r3, [r7, #2]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d201      	bcs.n	8005b16 <mem_trim+0x36>
    return NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e0cc      	b.n	8005cb0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005b16:	4b68      	ldr	r3, [pc, #416]	@ (8005cb8 <mem_trim+0x1d8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d304      	bcc.n	8005b2a <mem_trim+0x4a>
 8005b20:	4b66      	ldr	r3, [pc, #408]	@ (8005cbc <mem_trim+0x1dc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d306      	bcc.n	8005b38 <mem_trim+0x58>
 8005b2a:	4b65      	ldr	r3, [pc, #404]	@ (8005cc0 <mem_trim+0x1e0>)
 8005b2c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8005b30:	4964      	ldr	r1, [pc, #400]	@ (8005cc4 <mem_trim+0x1e4>)
 8005b32:	4865      	ldr	r0, [pc, #404]	@ (8005cc8 <mem_trim+0x1e8>)
 8005b34:	f00b fd6a 	bl	801160c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005b38:	4b5f      	ldr	r3, [pc, #380]	@ (8005cb8 <mem_trim+0x1d8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d304      	bcc.n	8005b4c <mem_trim+0x6c>
 8005b42:	4b5e      	ldr	r3, [pc, #376]	@ (8005cbc <mem_trim+0x1dc>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d301      	bcc.n	8005b50 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	e0af      	b.n	8005cb0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3b08      	subs	r3, #8
 8005b54:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005b56:	69b8      	ldr	r0, [r7, #24]
 8005b58:	f7ff fe2c 	bl	80057b4 <mem_to_ptr>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	881a      	ldrh	r2, [r3, #0]
 8005b64:	8afb      	ldrh	r3, [r7, #22]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b08      	subs	r3, #8
 8005b6c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005b6e:	8bfa      	ldrh	r2, [r7, #30]
 8005b70:	8abb      	ldrh	r3, [r7, #20]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d906      	bls.n	8005b84 <mem_trim+0xa4>
 8005b76:	4b52      	ldr	r3, [pc, #328]	@ (8005cc0 <mem_trim+0x1e0>)
 8005b78:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8005b7c:	4953      	ldr	r1, [pc, #332]	@ (8005ccc <mem_trim+0x1ec>)
 8005b7e:	4852      	ldr	r0, [pc, #328]	@ (8005cc8 <mem_trim+0x1e8>)
 8005b80:	f00b fd44 	bl	801160c <iprintf>
  if (newsize > size) {
 8005b84:	8bfa      	ldrh	r2, [r7, #30]
 8005b86:	8abb      	ldrh	r3, [r7, #20]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d901      	bls.n	8005b90 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e08f      	b.n	8005cb0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005b90:	8bfa      	ldrh	r2, [r7, #30]
 8005b92:	8abb      	ldrh	r3, [r7, #20]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d101      	bne.n	8005b9c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	e089      	b.n	8005cb0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fdf5 	bl	8005790 <ptr_to_mem>
 8005ba6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	791b      	ldrb	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d13f      	bne.n	8005c30 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005bb8:	d106      	bne.n	8005bc8 <mem_trim+0xe8>
 8005bba:	4b41      	ldr	r3, [pc, #260]	@ (8005cc0 <mem_trim+0x1e0>)
 8005bbc:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005bc0:	4943      	ldr	r1, [pc, #268]	@ (8005cd0 <mem_trim+0x1f0>)
 8005bc2:	4841      	ldr	r0, [pc, #260]	@ (8005cc8 <mem_trim+0x1e8>)
 8005bc4:	f00b fd22 	bl	801160c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005bce:	8afa      	ldrh	r2, [r7, #22]
 8005bd0:	8bfb      	ldrh	r3, [r7, #30]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005bda:	4b3e      	ldr	r3, [pc, #248]	@ (8005cd4 <mem_trim+0x1f4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d106      	bne.n	8005bf2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005be4:	89fb      	ldrh	r3, [r7, #14]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fdd2 	bl	8005790 <ptr_to_mem>
 8005bec:	4603      	mov	r3, r0
 8005bee:	4a39      	ldr	r2, [pc, #228]	@ (8005cd4 <mem_trim+0x1f4>)
 8005bf0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005bf2:	89fb      	ldrh	r3, [r7, #14]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fdcb 	bl	8005790 <ptr_to_mem>
 8005bfa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	89ba      	ldrh	r2, [r7, #12]
 8005c06:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	8afa      	ldrh	r2, [r7, #22]
 8005c0c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	89fa      	ldrh	r2, [r7, #14]
 8005c12:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c1c:	d047      	beq.n	8005cae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff fdb4 	bl	8005790 <ptr_to_mem>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	89fb      	ldrh	r3, [r7, #14]
 8005c2c:	8053      	strh	r3, [r2, #2]
 8005c2e:	e03e      	b.n	8005cae <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005c30:	8bfb      	ldrh	r3, [r7, #30]
 8005c32:	f103 0214 	add.w	r2, r3, #20
 8005c36:	8abb      	ldrh	r3, [r7, #20]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d838      	bhi.n	8005cae <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005c3c:	8afa      	ldrh	r2, [r7, #22]
 8005c3e:	8bfb      	ldrh	r3, [r7, #30]
 8005c40:	4413      	add	r3, r2
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3308      	adds	r3, #8
 8005c46:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c50:	d106      	bne.n	8005c60 <mem_trim+0x180>
 8005c52:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc0 <mem_trim+0x1e0>)
 8005c54:	f240 3216 	movw	r2, #790	@ 0x316
 8005c58:	491d      	ldr	r1, [pc, #116]	@ (8005cd0 <mem_trim+0x1f0>)
 8005c5a:	481b      	ldr	r0, [pc, #108]	@ (8005cc8 <mem_trim+0x1e8>)
 8005c5c:	f00b fcd6 	bl	801160c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005c60:	89fb      	ldrh	r3, [r7, #14]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fd94 	bl	8005790 <ptr_to_mem>
 8005c68:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd4 <mem_trim+0x1f4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d202      	bcs.n	8005c7a <mem_trim+0x19a>
      lfree = mem2;
 8005c74:	4a17      	ldr	r2, [pc, #92]	@ (8005cd4 <mem_trim+0x1f4>)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	881a      	ldrh	r2, [r3, #0]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	8afa      	ldrh	r2, [r7, #22]
 8005c8c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	89fa      	ldrh	r2, [r7, #14]
 8005c92:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c9c:	d007      	beq.n	8005cae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff fd74 	bl	8005790 <ptr_to_mem>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	89fb      	ldrh	r3, [r7, #14]
 8005cac:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005cae:	687b      	ldr	r3, [r7, #4]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	200054d4 	.word	0x200054d4
 8005cbc:	200054d8 	.word	0x200054d8
 8005cc0:	08012878 	.word	0x08012878
 8005cc4:	080129e8 	.word	0x080129e8
 8005cc8:	080128c0 	.word	0x080128c0
 8005ccc:	08012a00 	.word	0x08012a00
 8005cd0:	08012a20 	.word	0x08012a20
 8005cd4:	200054dc 	.word	0x200054dc

08005cd8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <mem_malloc+0x14>
    return NULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e0d9      	b.n	8005ea0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005cec:	88fb      	ldrh	r3, [r7, #6]
 8005cee:	3303      	adds	r3, #3
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005cf8:	8bbb      	ldrh	r3, [r7, #28]
 8005cfa:	2b0b      	cmp	r3, #11
 8005cfc:	d801      	bhi.n	8005d02 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005cfe:	230c      	movs	r3, #12
 8005d00:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005d02:	8bbb      	ldrh	r3, [r7, #28]
 8005d04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005d08:	d803      	bhi.n	8005d12 <mem_malloc+0x3a>
 8005d0a:	8bba      	ldrh	r2, [r7, #28]
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d201      	bcs.n	8005d16 <mem_malloc+0x3e>
    return NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e0c4      	b.n	8005ea0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005d16:	4b64      	ldr	r3, [pc, #400]	@ (8005ea8 <mem_malloc+0x1d0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff fd4a 	bl	80057b4 <mem_to_ptr>
 8005d20:	4603      	mov	r3, r0
 8005d22:	83fb      	strh	r3, [r7, #30]
 8005d24:	e0b4      	b.n	8005e90 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005d26:	8bfb      	ldrh	r3, [r7, #30]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fd31 	bl	8005790 <ptr_to_mem>
 8005d2e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	791b      	ldrb	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f040 80a4 	bne.w	8005e82 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	8bfb      	ldrh	r3, [r7, #30]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f1a3 0208 	sub.w	r2, r3, #8
 8005d48:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	f0c0 8099 	bcc.w	8005e82 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	8bfb      	ldrh	r3, [r7, #30]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f1a3 0208 	sub.w	r2, r3, #8
 8005d5e:	8bbb      	ldrh	r3, [r7, #28]
 8005d60:	3314      	adds	r3, #20
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d333      	bcc.n	8005dce <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005d66:	8bfa      	ldrh	r2, [r7, #30]
 8005d68:	8bbb      	ldrh	r3, [r7, #28]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3308      	adds	r3, #8
 8005d70:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005d72:	8a7b      	ldrh	r3, [r7, #18]
 8005d74:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005d78:	d106      	bne.n	8005d88 <mem_malloc+0xb0>
 8005d7a:	4b4c      	ldr	r3, [pc, #304]	@ (8005eac <mem_malloc+0x1d4>)
 8005d7c:	f240 3287 	movw	r2, #903	@ 0x387
 8005d80:	494b      	ldr	r1, [pc, #300]	@ (8005eb0 <mem_malloc+0x1d8>)
 8005d82:	484c      	ldr	r0, [pc, #304]	@ (8005eb4 <mem_malloc+0x1dc>)
 8005d84:	f00b fc42 	bl	801160c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005d88:	8a7b      	ldrh	r3, [r7, #18]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff fd00 	bl	8005790 <ptr_to_mem>
 8005d90:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	881a      	ldrh	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8bfa      	ldrh	r2, [r7, #30]
 8005da4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	8a7a      	ldrh	r2, [r7, #18]
 8005daa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2201      	movs	r2, #1
 8005db0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005dba:	d00b      	beq.n	8005dd4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fce5 	bl	8005790 <ptr_to_mem>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	8a7b      	ldrh	r3, [r7, #18]
 8005dca:	8053      	strh	r3, [r2, #2]
 8005dcc:	e002      	b.n	8005dd4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005dd4:	4b34      	ldr	r3, [pc, #208]	@ (8005ea8 <mem_malloc+0x1d0>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d127      	bne.n	8005e2e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005dde:	4b32      	ldr	r3, [pc, #200]	@ (8005ea8 <mem_malloc+0x1d0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005de4:	e005      	b.n	8005df2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fcd0 	bl	8005790 <ptr_to_mem>
 8005df0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	791b      	ldrb	r3, [r3, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d004      	beq.n	8005e04 <mem_malloc+0x12c>
 8005dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb8 <mem_malloc+0x1e0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d1f0      	bne.n	8005de6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005e04:	4a28      	ldr	r2, [pc, #160]	@ (8005ea8 <mem_malloc+0x1d0>)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005e0a:	4b27      	ldr	r3, [pc, #156]	@ (8005ea8 <mem_malloc+0x1d0>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8005eb8 <mem_malloc+0x1e0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d00b      	beq.n	8005e2e <mem_malloc+0x156>
 8005e16:	4b24      	ldr	r3, [pc, #144]	@ (8005ea8 <mem_malloc+0x1d0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	791b      	ldrb	r3, [r3, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d006      	beq.n	8005e2e <mem_malloc+0x156>
 8005e20:	4b22      	ldr	r3, [pc, #136]	@ (8005eac <mem_malloc+0x1d4>)
 8005e22:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8005e26:	4925      	ldr	r1, [pc, #148]	@ (8005ebc <mem_malloc+0x1e4>)
 8005e28:	4822      	ldr	r0, [pc, #136]	@ (8005eb4 <mem_malloc+0x1dc>)
 8005e2a:	f00b fbef 	bl	801160c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005e2e:	8bba      	ldrh	r2, [r7, #28]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	4413      	add	r3, r2
 8005e34:	3308      	adds	r3, #8
 8005e36:	4a20      	ldr	r2, [pc, #128]	@ (8005eb8 <mem_malloc+0x1e0>)
 8005e38:	6812      	ldr	r2, [r2, #0]
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d906      	bls.n	8005e4c <mem_malloc+0x174>
 8005e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005eac <mem_malloc+0x1d4>)
 8005e40:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8005e44:	491e      	ldr	r1, [pc, #120]	@ (8005ec0 <mem_malloc+0x1e8>)
 8005e46:	481b      	ldr	r0, [pc, #108]	@ (8005eb4 <mem_malloc+0x1dc>)
 8005e48:	f00b fbe0 	bl	801160c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d006      	beq.n	8005e64 <mem_malloc+0x18c>
 8005e56:	4b15      	ldr	r3, [pc, #84]	@ (8005eac <mem_malloc+0x1d4>)
 8005e58:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8005e5c:	4919      	ldr	r1, [pc, #100]	@ (8005ec4 <mem_malloc+0x1ec>)
 8005e5e:	4815      	ldr	r0, [pc, #84]	@ (8005eb4 <mem_malloc+0x1dc>)
 8005e60:	f00b fbd4 	bl	801160c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d006      	beq.n	8005e7c <mem_malloc+0x1a4>
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005eac <mem_malloc+0x1d4>)
 8005e70:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8005e74:	4914      	ldr	r1, [pc, #80]	@ (8005ec8 <mem_malloc+0x1f0>)
 8005e76:	480f      	ldr	r0, [pc, #60]	@ (8005eb4 <mem_malloc+0x1dc>)
 8005e78:	f00b fbc8 	bl	801160c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	e00e      	b.n	8005ea0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005e82:	8bfb      	ldrh	r3, [r7, #30]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fc83 	bl	8005790 <ptr_to_mem>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005e90:	8bfa      	ldrh	r2, [r7, #30]
 8005e92:	8bbb      	ldrh	r3, [r7, #28]
 8005e94:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	f4ff af44 	bcc.w	8005d26 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	200054dc 	.word	0x200054dc
 8005eac:	08012878 	.word	0x08012878
 8005eb0:	08012a20 	.word	0x08012a20
 8005eb4:	080128c0 	.word	0x080128c0
 8005eb8:	200054d8 	.word	0x200054d8
 8005ebc:	08012a34 	.word	0x08012a34
 8005ec0:	08012a50 	.word	0x08012a50
 8005ec4:	08012a80 	.word	0x08012a80
 8005ec8:	08012ab0 	.word	0x08012ab0

08005ecc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	3303      	adds	r3, #3
 8005ee2:	f023 0303 	bic.w	r3, r3, #3
 8005ee6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e011      	b.n	8005f12 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4413      	add	r3, r2
 8005f0a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	885b      	ldrh	r3, [r3, #2]
 8005f16:	461a      	mov	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	dbe7      	blt.n	8005eee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005f32:	2300      	movs	r3, #0
 8005f34:	80fb      	strh	r3, [r7, #6]
 8005f36:	e009      	b.n	8005f4c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005f38:	88fb      	ldrh	r3, [r7, #6]
 8005f3a:	4a08      	ldr	r2, [pc, #32]	@ (8005f5c <memp_init+0x30>)
 8005f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff ffc3 	bl	8005ecc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	80fb      	strh	r3, [r7, #6]
 8005f4c:	88fb      	ldrh	r3, [r7, #6]
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d9f2      	bls.n	8005f38 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005f52:	bf00      	nop
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	080153e8 	.word	0x080153e8

08005f60 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d012      	beq.n	8005f9c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	6812      	ldr	r2, [r2, #0]
 8005f7e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d006      	beq.n	8005f98 <do_memp_malloc_pool+0x38>
 8005f8a:	4b07      	ldr	r3, [pc, #28]	@ (8005fa8 <do_memp_malloc_pool+0x48>)
 8005f8c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005f90:	4906      	ldr	r1, [pc, #24]	@ (8005fac <do_memp_malloc_pool+0x4c>)
 8005f92:	4807      	ldr	r0, [pc, #28]	@ (8005fb0 <do_memp_malloc_pool+0x50>)
 8005f94:	f00b fb3a 	bl	801160c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	e000      	b.n	8005f9e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	08012ad4 	.word	0x08012ad4
 8005fac:	08012b04 	.word	0x08012b04
 8005fb0:	08012b28 	.word	0x08012b28

08005fb4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <memp_malloc_pool+0x1c>
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fec <memp_malloc_pool+0x38>)
 8005fc4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8005fc8:	4909      	ldr	r1, [pc, #36]	@ (8005ff0 <memp_malloc_pool+0x3c>)
 8005fca:	480a      	ldr	r0, [pc, #40]	@ (8005ff4 <memp_malloc_pool+0x40>)
 8005fcc:	f00b fb1e 	bl	801160c <iprintf>
  if (desc == NULL) {
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <memp_malloc_pool+0x26>
    return NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e003      	b.n	8005fe2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff ffc0 	bl	8005f60 <do_memp_malloc_pool>
 8005fe0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	08012ad4 	.word	0x08012ad4
 8005ff0:	08012b50 	.word	0x08012b50
 8005ff4:	08012b28 	.word	0x08012b28

08005ff8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	2b08      	cmp	r3, #8
 8006006:	d908      	bls.n	800601a <memp_malloc+0x22>
 8006008:	4b0a      	ldr	r3, [pc, #40]	@ (8006034 <memp_malloc+0x3c>)
 800600a:	f240 1257 	movw	r2, #343	@ 0x157
 800600e:	490a      	ldr	r1, [pc, #40]	@ (8006038 <memp_malloc+0x40>)
 8006010:	480a      	ldr	r0, [pc, #40]	@ (800603c <memp_malloc+0x44>)
 8006012:	f00b fafb 	bl	801160c <iprintf>
 8006016:	2300      	movs	r3, #0
 8006018:	e008      	b.n	800602c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	4a08      	ldr	r2, [pc, #32]	@ (8006040 <memp_malloc+0x48>)
 800601e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff ff9c 	bl	8005f60 <do_memp_malloc_pool>
 8006028:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800602a:	68fb      	ldr	r3, [r7, #12]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	08012ad4 	.word	0x08012ad4
 8006038:	08012b64 	.word	0x08012b64
 800603c:	08012b28 	.word	0x08012b28
 8006040:	080153e8 	.word	0x080153e8

08006044 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d006      	beq.n	8006066 <do_memp_free_pool+0x22>
 8006058:	4b0a      	ldr	r3, [pc, #40]	@ (8006084 <do_memp_free_pool+0x40>)
 800605a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800605e:	490a      	ldr	r1, [pc, #40]	@ (8006088 <do_memp_free_pool+0x44>)
 8006060:	480a      	ldr	r0, [pc, #40]	@ (800608c <do_memp_free_pool+0x48>)
 8006062:	f00b fad3 	bl	801160c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800607c:	bf00      	nop
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	08012ad4 	.word	0x08012ad4
 8006088:	08012b84 	.word	0x08012b84
 800608c:	08012b28 	.word	0x08012b28

08006090 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <memp_free_pool+0x1e>
 80060a0:	4b0a      	ldr	r3, [pc, #40]	@ (80060cc <memp_free_pool+0x3c>)
 80060a2:	f240 1295 	movw	r2, #405	@ 0x195
 80060a6:	490a      	ldr	r1, [pc, #40]	@ (80060d0 <memp_free_pool+0x40>)
 80060a8:	480a      	ldr	r0, [pc, #40]	@ (80060d4 <memp_free_pool+0x44>)
 80060aa:	f00b faaf 	bl	801160c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <memp_free_pool+0x34>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ffc1 	bl	8006044 <do_memp_free_pool>
 80060c2:	e000      	b.n	80060c6 <memp_free_pool+0x36>
    return;
 80060c4:	bf00      	nop
}
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	08012ad4 	.word	0x08012ad4
 80060d0:	08012b50 	.word	0x08012b50
 80060d4:	08012b28 	.word	0x08012b28

080060d8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	6039      	str	r1, [r7, #0]
 80060e2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	2b08      	cmp	r3, #8
 80060e8:	d907      	bls.n	80060fa <memp_free+0x22>
 80060ea:	4b0c      	ldr	r3, [pc, #48]	@ (800611c <memp_free+0x44>)
 80060ec:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80060f0:	490b      	ldr	r1, [pc, #44]	@ (8006120 <memp_free+0x48>)
 80060f2:	480c      	ldr	r0, [pc, #48]	@ (8006124 <memp_free+0x4c>)
 80060f4:	f00b fa8a 	bl	801160c <iprintf>
 80060f8:	e00c      	b.n	8006114 <memp_free+0x3c>

  if (mem == NULL) {
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d008      	beq.n	8006112 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	4a09      	ldr	r2, [pc, #36]	@ (8006128 <memp_free+0x50>)
 8006104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff ff9a 	bl	8006044 <do_memp_free_pool>
 8006110:	e000      	b.n	8006114 <memp_free+0x3c>
    return;
 8006112:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	08012ad4 	.word	0x08012ad4
 8006120:	08012ba4 	.word	0x08012ba4
 8006124:	08012b28 	.word	0x08012b28
 8006128:	080153e8 	.word	0x080153e8

0800612c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006130:	bf00      	nop
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d108      	bne.n	8006162 <netif_add+0x26>
 8006150:	4b57      	ldr	r3, [pc, #348]	@ (80062b0 <netif_add+0x174>)
 8006152:	f240 1227 	movw	r2, #295	@ 0x127
 8006156:	4957      	ldr	r1, [pc, #348]	@ (80062b4 <netif_add+0x178>)
 8006158:	4857      	ldr	r0, [pc, #348]	@ (80062b8 <netif_add+0x17c>)
 800615a:	f00b fa57 	bl	801160c <iprintf>
 800615e:	2300      	movs	r3, #0
 8006160:	e0a2      	b.n	80062a8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	d108      	bne.n	800617a <netif_add+0x3e>
 8006168:	4b51      	ldr	r3, [pc, #324]	@ (80062b0 <netif_add+0x174>)
 800616a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800616e:	4953      	ldr	r1, [pc, #332]	@ (80062bc <netif_add+0x180>)
 8006170:	4851      	ldr	r0, [pc, #324]	@ (80062b8 <netif_add+0x17c>)
 8006172:	f00b fa4b 	bl	801160c <iprintf>
 8006176:	2300      	movs	r3, #0
 8006178:	e096      	b.n	80062a8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006180:	4b4f      	ldr	r3, [pc, #316]	@ (80062c0 <netif_add+0x184>)
 8006182:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800618a:	4b4d      	ldr	r3, [pc, #308]	@ (80062c0 <netif_add+0x184>)
 800618c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006194:	4b4a      	ldr	r3, [pc, #296]	@ (80062c0 <netif_add+0x184>)
 8006196:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4a45      	ldr	r2, [pc, #276]	@ (80062c4 <netif_add+0x188>)
 80061ae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a3a      	ldr	r2, [r7, #32]
 80061c8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80061ca:	4b3f      	ldr	r3, [pc, #252]	@ (80062c8 <netif_add+0x18c>)
 80061cc:	781a      	ldrb	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061d8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f913 	bl	800640c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	4798      	blx	r3
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <netif_add+0xba>
    return NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e058      	b.n	80062a8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80061fc:	2bff      	cmp	r3, #255	@ 0xff
 80061fe:	d103      	bne.n	8006208 <netif_add+0xcc>
        netif->num = 0;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800620c:	4b2f      	ldr	r3, [pc, #188]	@ (80062cc <netif_add+0x190>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	e02b      	b.n	800626c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	429a      	cmp	r2, r3
 800621a:	d106      	bne.n	800622a <netif_add+0xee>
 800621c:	4b24      	ldr	r3, [pc, #144]	@ (80062b0 <netif_add+0x174>)
 800621e:	f240 128b 	movw	r2, #395	@ 0x18b
 8006222:	492b      	ldr	r1, [pc, #172]	@ (80062d0 <netif_add+0x194>)
 8006224:	4824      	ldr	r0, [pc, #144]	@ (80062b8 <netif_add+0x17c>)
 8006226:	f00b f9f1 	bl	801160c <iprintf>
        num_netifs++;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	3301      	adds	r3, #1
 800622e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2bff      	cmp	r3, #255	@ 0xff
 8006234:	dd06      	ble.n	8006244 <netif_add+0x108>
 8006236:	4b1e      	ldr	r3, [pc, #120]	@ (80062b0 <netif_add+0x174>)
 8006238:	f240 128d 	movw	r2, #397	@ 0x18d
 800623c:	4925      	ldr	r1, [pc, #148]	@ (80062d4 <netif_add+0x198>)
 800623e:	481e      	ldr	r0, [pc, #120]	@ (80062b8 <netif_add+0x17c>)
 8006240:	f00b f9e4 	bl	801160c <iprintf>
        if (netif2->num == netif->num) {
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006250:	429a      	cmp	r2, r3
 8006252:	d108      	bne.n	8006266 <netif_add+0x12a>
          netif->num++;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800625a:	3301      	adds	r3, #1
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8006264:	e005      	b.n	8006272 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1d0      	bne.n	8006214 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1be      	bne.n	80061f6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800627e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006280:	d103      	bne.n	800628a <netif_add+0x14e>
    netif_num = 0;
 8006282:	4b11      	ldr	r3, [pc, #68]	@ (80062c8 <netif_add+0x18c>)
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	e006      	b.n	8006298 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006290:	3301      	adds	r3, #1
 8006292:	b2da      	uxtb	r2, r3
 8006294:	4b0c      	ldr	r3, [pc, #48]	@ (80062c8 <netif_add+0x18c>)
 8006296:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006298:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <netif_add+0x190>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80062a0:	4a0a      	ldr	r2, [pc, #40]	@ (80062cc <netif_add+0x190>)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80062a6:	68fb      	ldr	r3, [r7, #12]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	08012bc0 	.word	0x08012bc0
 80062b4:	08012c54 	.word	0x08012c54
 80062b8:	08012c10 	.word	0x08012c10
 80062bc:	08012c70 	.word	0x08012c70
 80062c0:	0801544c 	.word	0x0801544c
 80062c4:	080066e7 	.word	0x080066e7
 80062c8:	200083d4 	.word	0x200083d4
 80062cc:	200083cc 	.word	0x200083cc
 80062d0:	08012c94 	.word	0x08012c94
 80062d4:	08012ca8 	.word	0x08012ca8

080062d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f002 fd41 	bl	8008d6c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f007 fa77 	bl	800d7e0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80062f2:	bf00      	nop
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <netif_do_set_ipaddr+0x20>
 800630e:	4b1d      	ldr	r3, [pc, #116]	@ (8006384 <netif_do_set_ipaddr+0x88>)
 8006310:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006314:	491c      	ldr	r1, [pc, #112]	@ (8006388 <netif_do_set_ipaddr+0x8c>)
 8006316:	481d      	ldr	r0, [pc, #116]	@ (800638c <netif_do_set_ipaddr+0x90>)
 8006318:	f00b f978 	bl	801160c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <netif_do_set_ipaddr+0x34>
 8006322:	4b18      	ldr	r3, [pc, #96]	@ (8006384 <netif_do_set_ipaddr+0x88>)
 8006324:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006328:	4917      	ldr	r1, [pc, #92]	@ (8006388 <netif_do_set_ipaddr+0x8c>)
 800632a:	4818      	ldr	r0, [pc, #96]	@ (800638c <netif_do_set_ipaddr+0x90>)
 800632c:	f00b f96e 	bl	801160c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3304      	adds	r3, #4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d01c      	beq.n	8006378 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3304      	adds	r3, #4
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800634e:	f107 0314 	add.w	r3, r7, #20
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff ffbf 	bl	80062d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <netif_do_set_ipaddr+0x6a>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	e000      	b.n	8006368 <netif_do_set_ipaddr+0x6c>
 8006366:	2300      	movs	r3, #0
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800636c:	2101      	movs	r1, #1
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 f8d2 	bl	8006518 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	08012bc0 	.word	0x08012bc0
 8006388:	08012cd8 	.word	0x08012cd8
 800638c:	08012c10 	.word	0x08012c10

08006390 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3308      	adds	r3, #8
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d00a      	beq.n	80063c0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <netif_do_set_netmask+0x26>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	e000      	b.n	80063b8 <netif_do_set_netmask+0x28>
 80063b6:	2300      	movs	r3, #0
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	330c      	adds	r3, #12
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d00a      	beq.n	80063fe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <netif_do_set_gw+0x26>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	e000      	b.n	80063f6 <netif_do_set_gw+0x28>
 80063f4:	2300      	movs	r3, #0
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006428:	4b1c      	ldr	r3, [pc, #112]	@ (800649c <netif_set_addr+0x90>)
 800642a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006432:	4b1a      	ldr	r3, [pc, #104]	@ (800649c <netif_set_addr+0x90>)
 8006434:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800643c:	4b17      	ldr	r3, [pc, #92]	@ (800649c <netif_set_addr+0x90>)
 800643e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <netif_set_addr+0x42>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <netif_set_addr+0x46>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <netif_set_addr+0x48>
 8006452:	2300      	movs	r3, #0
 8006454:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d006      	beq.n	800646a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800645c:	f107 0310 	add.w	r3, r7, #16
 8006460:	461a      	mov	r2, r3
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f7ff ff49 	bl	80062fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff ff8e 	bl	8006390 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f7ff ffa8 	bl	80063ce <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006484:	f107 0310 	add.w	r3, r7, #16
 8006488:	461a      	mov	r2, r3
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff ff35 	bl	80062fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006492:	bf00      	nop
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	0801544c 	.word	0x0801544c

080064a0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80064a8:	4a04      	ldr	r2, [pc, #16]	@ (80064bc <netif_set_default+0x1c>)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	200083d0 	.word	0x200083d0

080064c0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d107      	bne.n	80064de <netif_set_up+0x1e>
 80064ce:	4b0f      	ldr	r3, [pc, #60]	@ (800650c <netif_set_up+0x4c>)
 80064d0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80064d4:	490e      	ldr	r1, [pc, #56]	@ (8006510 <netif_set_up+0x50>)
 80064d6:	480f      	ldr	r0, [pc, #60]	@ (8006514 <netif_set_up+0x54>)
 80064d8:	f00b f898 	bl	801160c <iprintf>
 80064dc:	e013      	b.n	8006506 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10c      	bne.n	8006506 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80064f2:	f043 0301 	orr.w	r3, r3, #1
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80064fe:	2103      	movs	r1, #3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f809 	bl	8006518 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	08012bc0 	.word	0x08012bc0
 8006510:	08012d48 	.word	0x08012d48
 8006514:	08012c10 	.word	0x08012c10

08006518 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <netif_issue_reports+0x20>
 800652a:	4b18      	ldr	r3, [pc, #96]	@ (800658c <netif_issue_reports+0x74>)
 800652c:	f240 326d 	movw	r2, #877	@ 0x36d
 8006530:	4917      	ldr	r1, [pc, #92]	@ (8006590 <netif_issue_reports+0x78>)
 8006532:	4818      	ldr	r0, [pc, #96]	@ (8006594 <netif_issue_reports+0x7c>)
 8006534:	f00b f86a 	bl	801160c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01e      	beq.n	8006584 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800654c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006550:	2b00      	cmp	r3, #0
 8006552:	d017      	beq.n	8006584 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d013      	beq.n	8006586 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3304      	adds	r3, #4
 8006562:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00e      	beq.n	8006586 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d007      	beq.n	8006586 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3304      	adds	r3, #4
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f008 f899 	bl	800e6b4 <etharp_request>
 8006582:	e000      	b.n	8006586 <netif_issue_reports+0x6e>
    return;
 8006584:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	08012bc0 	.word	0x08012bc0
 8006590:	08012d64 	.word	0x08012d64
 8006594:	08012c10 	.word	0x08012c10

08006598 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d107      	bne.n	80065b6 <netif_set_down+0x1e>
 80065a6:	4b12      	ldr	r3, [pc, #72]	@ (80065f0 <netif_set_down+0x58>)
 80065a8:	f240 329b 	movw	r2, #923	@ 0x39b
 80065ac:	4911      	ldr	r1, [pc, #68]	@ (80065f4 <netif_set_down+0x5c>)
 80065ae:	4812      	ldr	r0, [pc, #72]	@ (80065f8 <netif_set_down+0x60>)
 80065b0:	f00b f82c 	bl	801160c <iprintf>
 80065b4:	e019      	b.n	80065ea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d012      	beq.n	80065ea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f007 fc23 	bl	800de30 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	08012bc0 	.word	0x08012bc0
 80065f4:	08012d88 	.word	0x08012d88
 80065f8:	08012c10 	.word	0x08012c10

080065fc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d107      	bne.n	800661a <netif_set_link_up+0x1e>
 800660a:	4b13      	ldr	r3, [pc, #76]	@ (8006658 <netif_set_link_up+0x5c>)
 800660c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8006610:	4912      	ldr	r1, [pc, #72]	@ (800665c <netif_set_link_up+0x60>)
 8006612:	4813      	ldr	r0, [pc, #76]	@ (8006660 <netif_set_link_up+0x64>)
 8006614:	f00a fffa 	bl	801160c <iprintf>
 8006618:	e01b      	b.n	8006652 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d114      	bne.n	8006652 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800662e:	f043 0304 	orr.w	r3, r3, #4
 8006632:	b2da      	uxtb	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800663a:	2103      	movs	r1, #3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ff6b 	bl	8006518 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <netif_set_link_up+0x56>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	08012bc0 	.word	0x08012bc0
 800665c:	08012da8 	.word	0x08012da8
 8006660:	08012c10 	.word	0x08012c10

08006664 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d107      	bne.n	8006682 <netif_set_link_down+0x1e>
 8006672:	4b11      	ldr	r3, [pc, #68]	@ (80066b8 <netif_set_link_down+0x54>)
 8006674:	f240 4206 	movw	r2, #1030	@ 0x406
 8006678:	4910      	ldr	r1, [pc, #64]	@ (80066bc <netif_set_link_down+0x58>)
 800667a:	4811      	ldr	r0, [pc, #68]	@ (80066c0 <netif_set_link_down+0x5c>)
 800667c:	f00a ffc6 	bl	801160c <iprintf>
 8006680:	e017      	b.n	80066b2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d010      	beq.n	80066b2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006696:	f023 0304 	bic.w	r3, r3, #4
 800669a:	b2da      	uxtb	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <netif_set_link_down+0x4e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	08012bc0 	.word	0x08012bc0
 80066bc:	08012dcc 	.word	0x08012dcc
 80066c0:	08012c10 	.word	0x08012c10

080066c4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	61da      	str	r2, [r3, #28]
  }
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80066f2:	f06f 030b 	mvn.w	r3, #11
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d013      	beq.n	800673c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006714:	4b0d      	ldr	r3, [pc, #52]	@ (800674c <netif_get_by_index+0x48>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e00c      	b.n	8006736 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006722:	3301      	adds	r3, #1
 8006724:	b2db      	uxtb	r3, r3
 8006726:	79fa      	ldrb	r2, [r7, #7]
 8006728:	429a      	cmp	r2, r3
 800672a:	d101      	bne.n	8006730 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	e006      	b.n	800673e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1ef      	bne.n	800671c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	200083cc 	.word	0x200083cc

08006750 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006756:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <pbuf_free_ooseq+0x38>)
 8006758:	2200      	movs	r2, #0
 800675a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800675c:	4b0b      	ldr	r3, [pc, #44]	@ (800678c <pbuf_free_ooseq+0x3c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	607b      	str	r3, [r7, #4]
 8006762:	e00a      	b.n	800677a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f002 fb3b 	bl	8008de8 <tcp_free_ooseq>
      return;
 8006772:	e005      	b.n	8006780 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1f1      	bne.n	8006764 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200083d5 	.word	0x200083d5
 800678c:	200083e4 	.word	0x200083e4

08006790 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006794:	4b03      	ldr	r3, [pc, #12]	@ (80067a4 <pbuf_pool_is_empty+0x14>)
 8006796:	2201      	movs	r2, #1
 8006798:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800679a:	bf00      	nop
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	200083d5 	.word	0x200083d5

080067a8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	4611      	mov	r1, r2
 80067b4:	461a      	mov	r2, r3
 80067b6:	460b      	mov	r3, r1
 80067b8:	80fb      	strh	r3, [r7, #6]
 80067ba:	4613      	mov	r3, r2
 80067bc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	88fa      	ldrh	r2, [r7, #6]
 80067ce:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	88ba      	ldrh	r2, [r7, #4]
 80067d4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80067d6:	8b3b      	ldrh	r3, [r7, #24]
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	7f3a      	ldrb	r2, [r7, #28]
 80067e2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	73da      	strb	r2, [r3, #15]
}
 80067f0:	bf00      	nop
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08c      	sub	sp, #48	@ 0x30
 8006800:	af02      	add	r7, sp, #8
 8006802:	4603      	mov	r3, r0
 8006804:	71fb      	strb	r3, [r7, #7]
 8006806:	460b      	mov	r3, r1
 8006808:	80bb      	strh	r3, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006812:	887b      	ldrh	r3, [r7, #2]
 8006814:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006818:	d07f      	beq.n	800691a <pbuf_alloc+0x11e>
 800681a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800681e:	f300 80c8 	bgt.w	80069b2 <pbuf_alloc+0x1b6>
 8006822:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006826:	d010      	beq.n	800684a <pbuf_alloc+0x4e>
 8006828:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800682c:	f300 80c1 	bgt.w	80069b2 <pbuf_alloc+0x1b6>
 8006830:	2b01      	cmp	r3, #1
 8006832:	d002      	beq.n	800683a <pbuf_alloc+0x3e>
 8006834:	2b41      	cmp	r3, #65	@ 0x41
 8006836:	f040 80bc 	bne.w	80069b2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800683a:	887a      	ldrh	r2, [r7, #2]
 800683c:	88bb      	ldrh	r3, [r7, #4]
 800683e:	4619      	mov	r1, r3
 8006840:	2000      	movs	r0, #0
 8006842:	f000 f8d1 	bl	80069e8 <pbuf_alloc_reference>
 8006846:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8006848:	e0bd      	b.n	80069c6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006852:	88bb      	ldrh	r3, [r7, #4]
 8006854:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006856:	2008      	movs	r0, #8
 8006858:	f7ff fbce 	bl	8005ff8 <memp_malloc>
 800685c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006864:	f7ff ff94 	bl	8006790 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <pbuf_alloc+0x78>
            pbuf_free(p);
 800686e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006870:	f000 faa8 	bl	8006dc4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006874:	2300      	movs	r3, #0
 8006876:	e0a7      	b.n	80069c8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006878:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800687a:	3303      	adds	r3, #3
 800687c:	b29b      	uxth	r3, r3
 800687e:	f023 0303 	bic.w	r3, r3, #3
 8006882:	b29b      	uxth	r3, r3
 8006884:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8006888:	b29b      	uxth	r3, r3
 800688a:	8b7a      	ldrh	r2, [r7, #26]
 800688c:	4293      	cmp	r3, r2
 800688e:	bf28      	it	cs
 8006890:	4613      	movcs	r3, r2
 8006892:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006894:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006896:	3310      	adds	r3, #16
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4413      	add	r3, r2
 800689c:	3303      	adds	r3, #3
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	4618      	mov	r0, r3
 80068a4:	89f9      	ldrh	r1, [r7, #14]
 80068a6:	8b7a      	ldrh	r2, [r7, #26]
 80068a8:	2300      	movs	r3, #0
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	887b      	ldrh	r3, [r7, #2]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	460b      	mov	r3, r1
 80068b2:	4601      	mov	r1, r0
 80068b4:	6938      	ldr	r0, [r7, #16]
 80068b6:	f7ff ff77 	bl	80067a8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d006      	beq.n	80068d4 <pbuf_alloc+0xd8>
 80068c6:	4b42      	ldr	r3, [pc, #264]	@ (80069d0 <pbuf_alloc+0x1d4>)
 80068c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068cc:	4941      	ldr	r1, [pc, #260]	@ (80069d4 <pbuf_alloc+0x1d8>)
 80068ce:	4842      	ldr	r0, [pc, #264]	@ (80069d8 <pbuf_alloc+0x1dc>)
 80068d0:	f00a fe9c 	bl	801160c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80068d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80068d6:	3303      	adds	r3, #3
 80068d8:	f023 0303 	bic.w	r3, r3, #3
 80068dc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80068e0:	d106      	bne.n	80068f0 <pbuf_alloc+0xf4>
 80068e2:	4b3b      	ldr	r3, [pc, #236]	@ (80069d0 <pbuf_alloc+0x1d4>)
 80068e4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80068e8:	493c      	ldr	r1, [pc, #240]	@ (80069dc <pbuf_alloc+0x1e0>)
 80068ea:	483b      	ldr	r0, [pc, #236]	@ (80069d8 <pbuf_alloc+0x1dc>)
 80068ec:	f00a fe8e 	bl	801160c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068fa:	e002      	b.n	8006902 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006906:	8b7a      	ldrh	r2, [r7, #26]
 8006908:	89fb      	ldrh	r3, [r7, #14]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8006912:	8b7b      	ldrh	r3, [r7, #26]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d19e      	bne.n	8006856 <pbuf_alloc+0x5a>
      break;
 8006918:	e055      	b.n	80069c6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800691a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800691c:	3303      	adds	r3, #3
 800691e:	b29b      	uxth	r3, r3
 8006920:	f023 0303 	bic.w	r3, r3, #3
 8006924:	b29a      	uxth	r2, r3
 8006926:	88bb      	ldrh	r3, [r7, #4]
 8006928:	3303      	adds	r3, #3
 800692a:	b29b      	uxth	r3, r3
 800692c:	f023 0303 	bic.w	r3, r3, #3
 8006930:	b29b      	uxth	r3, r3
 8006932:	4413      	add	r3, r2
 8006934:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006936:	8b3b      	ldrh	r3, [r7, #24]
 8006938:	3310      	adds	r3, #16
 800693a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800693c:	8b3a      	ldrh	r2, [r7, #24]
 800693e:	88bb      	ldrh	r3, [r7, #4]
 8006940:	3303      	adds	r3, #3
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	429a      	cmp	r2, r3
 8006948:	d306      	bcc.n	8006958 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800694a:	8afa      	ldrh	r2, [r7, #22]
 800694c:	88bb      	ldrh	r3, [r7, #4]
 800694e:	3303      	adds	r3, #3
 8006950:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006954:	429a      	cmp	r2, r3
 8006956:	d201      	bcs.n	800695c <pbuf_alloc+0x160>
        return NULL;
 8006958:	2300      	movs	r3, #0
 800695a:	e035      	b.n	80069c8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800695c:	8afb      	ldrh	r3, [r7, #22]
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff f9ba 	bl	8005cd8 <mem_malloc>
 8006964:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <pbuf_alloc+0x174>
        return NULL;
 800696c:	2300      	movs	r3, #0
 800696e:	e02b      	b.n	80069c8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006970:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006972:	3310      	adds	r3, #16
 8006974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006976:	4413      	add	r3, r2
 8006978:	3303      	adds	r3, #3
 800697a:	f023 0303 	bic.w	r3, r3, #3
 800697e:	4618      	mov	r0, r3
 8006980:	88b9      	ldrh	r1, [r7, #4]
 8006982:	88ba      	ldrh	r2, [r7, #4]
 8006984:	2300      	movs	r3, #0
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	887b      	ldrh	r3, [r7, #2]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	460b      	mov	r3, r1
 800698e:	4601      	mov	r1, r0
 8006990:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006992:	f7ff ff09 	bl	80067a8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d010      	beq.n	80069c4 <pbuf_alloc+0x1c8>
 80069a2:	4b0b      	ldr	r3, [pc, #44]	@ (80069d0 <pbuf_alloc+0x1d4>)
 80069a4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80069a8:	490d      	ldr	r1, [pc, #52]	@ (80069e0 <pbuf_alloc+0x1e4>)
 80069aa:	480b      	ldr	r0, [pc, #44]	@ (80069d8 <pbuf_alloc+0x1dc>)
 80069ac:	f00a fe2e 	bl	801160c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80069b0:	e008      	b.n	80069c4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80069b2:	4b07      	ldr	r3, [pc, #28]	@ (80069d0 <pbuf_alloc+0x1d4>)
 80069b4:	f240 1227 	movw	r2, #295	@ 0x127
 80069b8:	490a      	ldr	r1, [pc, #40]	@ (80069e4 <pbuf_alloc+0x1e8>)
 80069ba:	4807      	ldr	r0, [pc, #28]	@ (80069d8 <pbuf_alloc+0x1dc>)
 80069bc:	f00a fe26 	bl	801160c <iprintf>
      return NULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e001      	b.n	80069c8 <pbuf_alloc+0x1cc>
      break;
 80069c4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3728      	adds	r7, #40	@ 0x28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	08012df0 	.word	0x08012df0
 80069d4:	08012e20 	.word	0x08012e20
 80069d8:	08012e50 	.word	0x08012e50
 80069dc:	08012e78 	.word	0x08012e78
 80069e0:	08012eac 	.word	0x08012eac
 80069e4:	08012ed8 	.word	0x08012ed8

080069e8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
 80069f4:	4613      	mov	r3, r2
 80069f6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80069f8:	883b      	ldrh	r3, [r7, #0]
 80069fa:	2b41      	cmp	r3, #65	@ 0x41
 80069fc:	d009      	beq.n	8006a12 <pbuf_alloc_reference+0x2a>
 80069fe:	883b      	ldrh	r3, [r7, #0]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d006      	beq.n	8006a12 <pbuf_alloc_reference+0x2a>
 8006a04:	4b0f      	ldr	r3, [pc, #60]	@ (8006a44 <pbuf_alloc_reference+0x5c>)
 8006a06:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8006a0a:	490f      	ldr	r1, [pc, #60]	@ (8006a48 <pbuf_alloc_reference+0x60>)
 8006a0c:	480f      	ldr	r0, [pc, #60]	@ (8006a4c <pbuf_alloc_reference+0x64>)
 8006a0e:	f00a fdfd 	bl	801160c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006a12:	2007      	movs	r0, #7
 8006a14:	f7ff faf0 	bl	8005ff8 <memp_malloc>
 8006a18:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	e00b      	b.n	8006a3c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006a24:	8879      	ldrh	r1, [r7, #2]
 8006a26:	887a      	ldrh	r2, [r7, #2]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	9301      	str	r3, [sp, #4]
 8006a2c:	883b      	ldrh	r3, [r7, #0]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	460b      	mov	r3, r1
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff feb7 	bl	80067a8 <pbuf_init_alloced_pbuf>
  return p;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	08012df0 	.word	0x08012df0
 8006a48:	08012ef4 	.word	0x08012ef4
 8006a4c:	08012e50 	.word	0x08012e50

08006a50 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	607b      	str	r3, [r7, #4]
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	81bb      	strh	r3, [r7, #12]
 8006a60:	4613      	mov	r3, r2
 8006a62:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006a68:	8a7b      	ldrh	r3, [r7, #18]
 8006a6a:	3303      	adds	r3, #3
 8006a6c:	f023 0203 	bic.w	r2, r3, #3
 8006a70:	89bb      	ldrh	r3, [r7, #12]
 8006a72:	441a      	add	r2, r3
 8006a74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d901      	bls.n	8006a7e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e018      	b.n	8006ab0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006a84:	8a7b      	ldrh	r3, [r7, #18]
 8006a86:	3303      	adds	r3, #3
 8006a88:	f023 0303 	bic.w	r3, r3, #3
 8006a8c:	6a3a      	ldr	r2, [r7, #32]
 8006a8e:	4413      	add	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	e001      	b.n	8006a98 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	89b9      	ldrh	r1, [r7, #12]
 8006a9c:	89ba      	ldrh	r2, [r7, #12]
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	897b      	ldrh	r3, [r7, #10]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	6979      	ldr	r1, [r7, #20]
 8006aaa:	f7ff fe7d 	bl	80067a8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006aae:	687b      	ldr	r3, [r7, #4]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <pbuf_realloc+0x20>
 8006aca:	4b3a      	ldr	r3, [pc, #232]	@ (8006bb4 <pbuf_realloc+0xfc>)
 8006acc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006ad0:	4939      	ldr	r1, [pc, #228]	@ (8006bb8 <pbuf_realloc+0x100>)
 8006ad2:	483a      	ldr	r0, [pc, #232]	@ (8006bbc <pbuf_realloc+0x104>)
 8006ad4:	f00a fd9a 	bl	801160c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	891b      	ldrh	r3, [r3, #8]
 8006adc:	887a      	ldrh	r2, [r7, #2]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d263      	bcs.n	8006baa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	891a      	ldrh	r2, [r3, #8]
 8006ae6:	887b      	ldrh	r3, [r7, #2]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	817b      	strh	r3, [r7, #10]
  q = p;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006af4:	e018      	b.n	8006b28 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	895b      	ldrh	r3, [r3, #10]
 8006afa:	897a      	ldrh	r2, [r7, #10]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	891a      	ldrh	r2, [r3, #8]
 8006b04:	893b      	ldrh	r3, [r7, #8]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <pbuf_realloc+0x70>
 8006b1a:	4b26      	ldr	r3, [pc, #152]	@ (8006bb4 <pbuf_realloc+0xfc>)
 8006b1c:	f240 12af 	movw	r2, #431	@ 0x1af
 8006b20:	4927      	ldr	r1, [pc, #156]	@ (8006bc0 <pbuf_realloc+0x108>)
 8006b22:	4826      	ldr	r0, [pc, #152]	@ (8006bbc <pbuf_realloc+0x104>)
 8006b24:	f00a fd72 	bl	801160c <iprintf>
  while (rem_len > q->len) {
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	895b      	ldrh	r3, [r3, #10]
 8006b2c:	897a      	ldrh	r2, [r7, #10]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d8e1      	bhi.n	8006af6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	7b1b      	ldrb	r3, [r3, #12]
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d121      	bne.n	8006b82 <pbuf_realloc+0xca>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	895b      	ldrh	r3, [r3, #10]
 8006b42:	897a      	ldrh	r2, [r7, #10]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d01c      	beq.n	8006b82 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	7b5b      	ldrb	r3, [r3, #13]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d116      	bne.n	8006b82 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	897b      	ldrh	r3, [r7, #10]
 8006b60:	4413      	add	r3, r2
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	4619      	mov	r1, r3
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7fe ffba 	bl	8005ae0 <mem_trim>
 8006b6c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d106      	bne.n	8006b82 <pbuf_realloc+0xca>
 8006b74:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb4 <pbuf_realloc+0xfc>)
 8006b76:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8006b7a:	4912      	ldr	r1, [pc, #72]	@ (8006bc4 <pbuf_realloc+0x10c>)
 8006b7c:	480f      	ldr	r0, [pc, #60]	@ (8006bbc <pbuf_realloc+0x104>)
 8006b7e:	f00a fd45 	bl	801160c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	897a      	ldrh	r2, [r7, #10]
 8006b86:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	895a      	ldrh	r2, [r3, #10]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 f911 	bl	8006dc4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	e000      	b.n	8006bac <pbuf_realloc+0xf4>
    return;
 8006baa:	bf00      	nop

}
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08012df0 	.word	0x08012df0
 8006bb8:	08012f08 	.word	0x08012f08
 8006bbc:	08012e50 	.word	0x08012e50
 8006bc0:	08012f20 	.word	0x08012f20
 8006bc4:	08012f38 	.word	0x08012f38

08006bc8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d106      	bne.n	8006bea <pbuf_add_header_impl+0x22>
 8006bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8006c8c <pbuf_add_header_impl+0xc4>)
 8006bde:	f240 12df 	movw	r2, #479	@ 0x1df
 8006be2:	492b      	ldr	r1, [pc, #172]	@ (8006c90 <pbuf_add_header_impl+0xc8>)
 8006be4:	482b      	ldr	r0, [pc, #172]	@ (8006c94 <pbuf_add_header_impl+0xcc>)
 8006be6:	f00a fd11 	bl	801160c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <pbuf_add_header_impl+0x30>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf6:	d301      	bcc.n	8006bfc <pbuf_add_header_impl+0x34>
    return 1;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e043      	b.n	8006c84 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <pbuf_add_header_impl+0x3e>
    return 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e03e      	b.n	8006c84 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	891a      	ldrh	r2, [r3, #8]
 8006c0e:	8a7b      	ldrh	r3, [r7, #18]
 8006c10:	4413      	add	r3, r2
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8a7a      	ldrh	r2, [r7, #18]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d901      	bls.n	8006c1e <pbuf_add_header_impl+0x56>
    return 1;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e032      	b.n	8006c84 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	7b1b      	ldrb	r3, [r3, #12]
 8006c22:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006c24:	8a3b      	ldrh	r3, [r7, #16]
 8006c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00c      	beq.n	8006c48 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	425b      	negs	r3, r3
 8006c36:	4413      	add	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3310      	adds	r3, #16
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d20d      	bcs.n	8006c60 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e01d      	b.n	8006c84 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d006      	beq.n	8006c5c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	425b      	negs	r3, r3
 8006c56:	4413      	add	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]
 8006c5a:	e001      	b.n	8006c60 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e011      	b.n	8006c84 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	895a      	ldrh	r2, [r3, #10]
 8006c6a:	8a7b      	ldrh	r3, [r7, #18]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	891a      	ldrh	r2, [r3, #8]
 8006c78:	8a7b      	ldrh	r3, [r7, #18]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	811a      	strh	r2, [r3, #8]


  return 0;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	08012df0 	.word	0x08012df0
 8006c90:	08012f54 	.word	0x08012f54
 8006c94:	08012e50 	.word	0x08012e50

08006c98 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff ff8e 	bl	8006bc8 <pbuf_add_header_impl>
 8006cac:	4603      	mov	r3, r0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d106      	bne.n	8006cd6 <pbuf_remove_header+0x1e>
 8006cc8:	4b20      	ldr	r3, [pc, #128]	@ (8006d4c <pbuf_remove_header+0x94>)
 8006cca:	f240 224b 	movw	r2, #587	@ 0x24b
 8006cce:	4920      	ldr	r1, [pc, #128]	@ (8006d50 <pbuf_remove_header+0x98>)
 8006cd0:	4820      	ldr	r0, [pc, #128]	@ (8006d54 <pbuf_remove_header+0x9c>)
 8006cd2:	f00a fc9b 	bl	801160c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <pbuf_remove_header+0x2c>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce2:	d301      	bcc.n	8006ce8 <pbuf_remove_header+0x30>
    return 1;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e02c      	b.n	8006d42 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <pbuf_remove_header+0x3a>
    return 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e027      	b.n	8006d42 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	895b      	ldrh	r3, [r3, #10]
 8006cfa:	89fa      	ldrh	r2, [r7, #14]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d908      	bls.n	8006d12 <pbuf_remove_header+0x5a>
 8006d00:	4b12      	ldr	r3, [pc, #72]	@ (8006d4c <pbuf_remove_header+0x94>)
 8006d02:	f240 2255 	movw	r2, #597	@ 0x255
 8006d06:	4914      	ldr	r1, [pc, #80]	@ (8006d58 <pbuf_remove_header+0xa0>)
 8006d08:	4812      	ldr	r0, [pc, #72]	@ (8006d54 <pbuf_remove_header+0x9c>)
 8006d0a:	f00a fc7f 	bl	801160c <iprintf>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e017      	b.n	8006d42 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	441a      	add	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	895a      	ldrh	r2, [r3, #10]
 8006d28:	89fb      	ldrh	r3, [r7, #14]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	891a      	ldrh	r2, [r3, #8]
 8006d36:	89fb      	ldrh	r3, [r7, #14]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	08012df0 	.word	0x08012df0
 8006d50:	08012f54 	.word	0x08012f54
 8006d54:	08012e50 	.word	0x08012e50
 8006d58:	08012f60 	.word	0x08012f60

08006d5c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	807b      	strh	r3, [r7, #2]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006d6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	da08      	bge.n	8006d86 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006d74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d78:	425b      	negs	r3, r3
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7ff ff9b 	bl	8006cb8 <pbuf_remove_header>
 8006d82:	4603      	mov	r3, r0
 8006d84:	e007      	b.n	8006d96 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006d86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d8a:	787a      	ldrb	r2, [r7, #1]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff ff1a 	bl	8006bc8 <pbuf_add_header_impl>
 8006d94:	4603      	mov	r3, r0
  }
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	460b      	mov	r3, r1
 8006da8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006daa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006dae:	2201      	movs	r2, #1
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7ff ffd2 	bl	8006d5c <pbuf_header_impl>
 8006db8:	4603      	mov	r3, r0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d106      	bne.n	8006de6 <pbuf_free+0x22>
 8006dd8:	4b38      	ldr	r3, [pc, #224]	@ (8006ebc <pbuf_free+0xf8>)
 8006dda:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8006dde:	4938      	ldr	r1, [pc, #224]	@ (8006ec0 <pbuf_free+0xfc>)
 8006de0:	4838      	ldr	r0, [pc, #224]	@ (8006ec4 <pbuf_free+0x100>)
 8006de2:	f00a fc13 	bl	801160c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e063      	b.n	8006eb2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006dee:	e05c      	b.n	8006eaa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	7b9b      	ldrb	r3, [r3, #14]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d106      	bne.n	8006e06 <pbuf_free+0x42>
 8006df8:	4b30      	ldr	r3, [pc, #192]	@ (8006ebc <pbuf_free+0xf8>)
 8006dfa:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8006dfe:	4932      	ldr	r1, [pc, #200]	@ (8006ec8 <pbuf_free+0x104>)
 8006e00:	4830      	ldr	r0, [pc, #192]	@ (8006ec4 <pbuf_free+0x100>)
 8006e02:	f00a fc03 	bl	801160c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7b9b      	ldrb	r3, [r3, #14]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	739a      	strb	r2, [r3, #14]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	7b9b      	ldrb	r3, [r3, #14]
 8006e16:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006e18:	7dbb      	ldrb	r3, [r7, #22]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d143      	bne.n	8006ea6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	7b1b      	ldrb	r3, [r3, #12]
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	7b5b      	ldrb	r3, [r3, #13]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d011      	beq.n	8006e5e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <pbuf_free+0x90>
 8006e46:	4b1d      	ldr	r3, [pc, #116]	@ (8006ebc <pbuf_free+0xf8>)
 8006e48:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8006e4c:	491f      	ldr	r1, [pc, #124]	@ (8006ecc <pbuf_free+0x108>)
 8006e4e:	481d      	ldr	r0, [pc, #116]	@ (8006ec4 <pbuf_free+0x100>)
 8006e50:	f00a fbdc 	bl	801160c <iprintf>
        pc->custom_free_function(p);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
 8006e5c:	e01d      	b.n	8006e9a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d104      	bne.n	8006e6e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	2008      	movs	r0, #8
 8006e68:	f7ff f936 	bl	80060d8 <memp_free>
 8006e6c:	e015      	b.n	8006e9a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d104      	bne.n	8006e7e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	2007      	movs	r0, #7
 8006e78:	f7ff f92e 	bl	80060d8 <memp_free>
 8006e7c:	e00d      	b.n	8006e9a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d103      	bne.n	8006e8c <pbuf_free+0xc8>
          mem_free(p);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fe fdc1 	bl	8005a0c <mem_free>
 8006e8a:	e006      	b.n	8006e9a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006ebc <pbuf_free+0xf8>)
 8006e8e:	f240 320f 	movw	r2, #783	@ 0x30f
 8006e92:	490f      	ldr	r1, [pc, #60]	@ (8006ed0 <pbuf_free+0x10c>)
 8006e94:	480b      	ldr	r0, [pc, #44]	@ (8006ec4 <pbuf_free+0x100>)
 8006e96:	f00a fbb9 	bl	801160c <iprintf>
        }
      }
      count++;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	607b      	str	r3, [r7, #4]
 8006ea4:	e001      	b.n	8006eaa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d19f      	bne.n	8006df0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	08012df0 	.word	0x08012df0
 8006ec0:	08012f54 	.word	0x08012f54
 8006ec4:	08012e50 	.word	0x08012e50
 8006ec8:	08012f80 	.word	0x08012f80
 8006ecc:	08012f98 	.word	0x08012f98
 8006ed0:	08012fbc 	.word	0x08012fbc

08006ed4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006ee0:	e005      	b.n	8006eee <pbuf_clen+0x1a>
    ++len;
 8006ee2:	89fb      	ldrh	r3, [r7, #14]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1f6      	bne.n	8006ee2 <pbuf_clen+0xe>
  }
  return len;
 8006ef4:	89fb      	ldrh	r3, [r7, #14]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
	...

08006f04 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d010      	beq.n	8006f34 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	7b9b      	ldrb	r3, [r3, #14]
 8006f16:	3301      	adds	r3, #1
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	7b9b      	ldrb	r3, [r3, #14]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <pbuf_ref+0x30>
 8006f26:	4b05      	ldr	r3, [pc, #20]	@ (8006f3c <pbuf_ref+0x38>)
 8006f28:	f240 3242 	movw	r2, #834	@ 0x342
 8006f2c:	4904      	ldr	r1, [pc, #16]	@ (8006f40 <pbuf_ref+0x3c>)
 8006f2e:	4805      	ldr	r0, [pc, #20]	@ (8006f44 <pbuf_ref+0x40>)
 8006f30:	f00a fb6c 	bl	801160c <iprintf>
  }
}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	08012df0 	.word	0x08012df0
 8006f40:	08012fd0 	.word	0x08012fd0
 8006f44:	08012e50 	.word	0x08012e50

08006f48 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <pbuf_cat+0x16>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d107      	bne.n	8006f6e <pbuf_cat+0x26>
 8006f5e:	4b20      	ldr	r3, [pc, #128]	@ (8006fe0 <pbuf_cat+0x98>)
 8006f60:	f240 3259 	movw	r2, #857	@ 0x359
 8006f64:	491f      	ldr	r1, [pc, #124]	@ (8006fe4 <pbuf_cat+0x9c>)
 8006f66:	4820      	ldr	r0, [pc, #128]	@ (8006fe8 <pbuf_cat+0xa0>)
 8006f68:	f00a fb50 	bl	801160c <iprintf>
 8006f6c:	e034      	b.n	8006fd8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	e00a      	b.n	8006f8a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	891a      	ldrh	r2, [r3, #8]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	891b      	ldrh	r3, [r3, #8]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1f0      	bne.n	8006f74 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	891a      	ldrh	r2, [r3, #8]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	895b      	ldrh	r3, [r3, #10]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d006      	beq.n	8006fac <pbuf_cat+0x64>
 8006f9e:	4b10      	ldr	r3, [pc, #64]	@ (8006fe0 <pbuf_cat+0x98>)
 8006fa0:	f240 3262 	movw	r2, #866	@ 0x362
 8006fa4:	4911      	ldr	r1, [pc, #68]	@ (8006fec <pbuf_cat+0xa4>)
 8006fa6:	4810      	ldr	r0, [pc, #64]	@ (8006fe8 <pbuf_cat+0xa0>)
 8006fa8:	f00a fb30 	bl	801160c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d006      	beq.n	8006fc2 <pbuf_cat+0x7a>
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe0 <pbuf_cat+0x98>)
 8006fb6:	f240 3263 	movw	r2, #867	@ 0x363
 8006fba:	490d      	ldr	r1, [pc, #52]	@ (8006ff0 <pbuf_cat+0xa8>)
 8006fbc:	480a      	ldr	r0, [pc, #40]	@ (8006fe8 <pbuf_cat+0xa0>)
 8006fbe:	f00a fb25 	bl	801160c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	891a      	ldrh	r2, [r3, #8]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	891b      	ldrh	r3, [r3, #8]
 8006fca:	4413      	add	r3, r2
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	08012df0 	.word	0x08012df0
 8006fe4:	08012fe4 	.word	0x08012fe4
 8006fe8:	08012e50 	.word	0x08012e50
 8006fec:	0801301c 	.word	0x0801301c
 8006ff0:	0801304c 	.word	0x0801304c

08006ff4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	2300      	movs	r3, #0
 8007004:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d008      	beq.n	800701e <pbuf_copy+0x2a>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <pbuf_copy+0x2a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	891a      	ldrh	r2, [r3, #8]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	891b      	ldrh	r3, [r3, #8]
 800701a:	429a      	cmp	r2, r3
 800701c:	d209      	bcs.n	8007032 <pbuf_copy+0x3e>
 800701e:	4b57      	ldr	r3, [pc, #348]	@ (800717c <pbuf_copy+0x188>)
 8007020:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007024:	4956      	ldr	r1, [pc, #344]	@ (8007180 <pbuf_copy+0x18c>)
 8007026:	4857      	ldr	r0, [pc, #348]	@ (8007184 <pbuf_copy+0x190>)
 8007028:	f00a faf0 	bl	801160c <iprintf>
 800702c:	f06f 030f 	mvn.w	r3, #15
 8007030:	e09f      	b.n	8007172 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	895b      	ldrh	r3, [r3, #10]
 8007036:	461a      	mov	r2, r3
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	1ad2      	subs	r2, r2, r3
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	895b      	ldrh	r3, [r3, #10]
 8007040:	4619      	mov	r1, r3
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1acb      	subs	r3, r1, r3
 8007046:	429a      	cmp	r2, r3
 8007048:	d306      	bcc.n	8007058 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	895b      	ldrh	r3, [r3, #10]
 800704e:	461a      	mov	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	e005      	b.n	8007064 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	895b      	ldrh	r3, [r3, #10]
 800705c:	461a      	mov	r2, r3
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	18d0      	adds	r0, r2, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4619      	mov	r1, r3
 8007078:	f00a fbf3 	bl	8011862 <memcpy>
    offset_to += len;
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	895b      	ldrh	r3, [r3, #10]
 8007090:	461a      	mov	r2, r3
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	4293      	cmp	r3, r2
 8007096:	d906      	bls.n	80070a6 <pbuf_copy+0xb2>
 8007098:	4b38      	ldr	r3, [pc, #224]	@ (800717c <pbuf_copy+0x188>)
 800709a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800709e:	493a      	ldr	r1, [pc, #232]	@ (8007188 <pbuf_copy+0x194>)
 80070a0:	4838      	ldr	r0, [pc, #224]	@ (8007184 <pbuf_copy+0x190>)
 80070a2:	f00a fab3 	bl	801160c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	895b      	ldrh	r3, [r3, #10]
 80070aa:	461a      	mov	r2, r3
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d906      	bls.n	80070c0 <pbuf_copy+0xcc>
 80070b2:	4b32      	ldr	r3, [pc, #200]	@ (800717c <pbuf_copy+0x188>)
 80070b4:	f240 32da 	movw	r2, #986	@ 0x3da
 80070b8:	4934      	ldr	r1, [pc, #208]	@ (800718c <pbuf_copy+0x198>)
 80070ba:	4832      	ldr	r0, [pc, #200]	@ (8007184 <pbuf_copy+0x190>)
 80070bc:	f00a faa6 	bl	801160c <iprintf>
    if (offset_from >= p_from->len) {
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	895b      	ldrh	r3, [r3, #10]
 80070c4:	461a      	mov	r2, r3
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d304      	bcc.n	80070d6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	895b      	ldrh	r3, [r3, #10]
 80070da:	461a      	mov	r2, r3
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	4293      	cmp	r3, r2
 80070e0:	d114      	bne.n	800710c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10c      	bne.n	800710c <pbuf_copy+0x118>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d009      	beq.n	800710c <pbuf_copy+0x118>
 80070f8:	4b20      	ldr	r3, [pc, #128]	@ (800717c <pbuf_copy+0x188>)
 80070fa:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80070fe:	4924      	ldr	r1, [pc, #144]	@ (8007190 <pbuf_copy+0x19c>)
 8007100:	4820      	ldr	r0, [pc, #128]	@ (8007184 <pbuf_copy+0x190>)
 8007102:	f00a fa83 	bl	801160c <iprintf>
 8007106:	f06f 030f 	mvn.w	r3, #15
 800710a:	e032      	b.n	8007172 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d013      	beq.n	800713a <pbuf_copy+0x146>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	895a      	ldrh	r2, [r3, #10]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	891b      	ldrh	r3, [r3, #8]
 800711a:	429a      	cmp	r2, r3
 800711c:	d10d      	bne.n	800713a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <pbuf_copy+0x146>
 8007126:	4b15      	ldr	r3, [pc, #84]	@ (800717c <pbuf_copy+0x188>)
 8007128:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800712c:	4919      	ldr	r1, [pc, #100]	@ (8007194 <pbuf_copy+0x1a0>)
 800712e:	4815      	ldr	r0, [pc, #84]	@ (8007184 <pbuf_copy+0x190>)
 8007130:	f00a fa6c 	bl	801160c <iprintf>
 8007134:	f06f 0305 	mvn.w	r3, #5
 8007138:	e01b      	b.n	8007172 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d013      	beq.n	8007168 <pbuf_copy+0x174>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	895a      	ldrh	r2, [r3, #10]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	891b      	ldrh	r3, [r3, #8]
 8007148:	429a      	cmp	r2, r3
 800714a:	d10d      	bne.n	8007168 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d009      	beq.n	8007168 <pbuf_copy+0x174>
 8007154:	4b09      	ldr	r3, [pc, #36]	@ (800717c <pbuf_copy+0x188>)
 8007156:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800715a:	490e      	ldr	r1, [pc, #56]	@ (8007194 <pbuf_copy+0x1a0>)
 800715c:	4809      	ldr	r0, [pc, #36]	@ (8007184 <pbuf_copy+0x190>)
 800715e:	f00a fa55 	bl	801160c <iprintf>
 8007162:	f06f 0305 	mvn.w	r3, #5
 8007166:	e004      	b.n	8007172 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f47f af61 	bne.w	8007032 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	08012df0 	.word	0x08012df0
 8007180:	08013098 	.word	0x08013098
 8007184:	08012e50 	.word	0x08012e50
 8007188:	080130c8 	.word	0x080130c8
 800718c:	080130e0 	.word	0x080130e0
 8007190:	080130fc 	.word	0x080130fc
 8007194:	0801310c 	.word	0x0801310c

08007198 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4611      	mov	r1, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	460b      	mov	r3, r1
 80071a8:	80fb      	strh	r3, [r7, #6]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d108      	bne.n	80071ce <pbuf_copy_partial+0x36>
 80071bc:	4b2b      	ldr	r3, [pc, #172]	@ (800726c <pbuf_copy_partial+0xd4>)
 80071be:	f240 420a 	movw	r2, #1034	@ 0x40a
 80071c2:	492b      	ldr	r1, [pc, #172]	@ (8007270 <pbuf_copy_partial+0xd8>)
 80071c4:	482b      	ldr	r0, [pc, #172]	@ (8007274 <pbuf_copy_partial+0xdc>)
 80071c6:	f00a fa21 	bl	801160c <iprintf>
 80071ca:	2300      	movs	r3, #0
 80071cc:	e04a      	b.n	8007264 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d108      	bne.n	80071e6 <pbuf_copy_partial+0x4e>
 80071d4:	4b25      	ldr	r3, [pc, #148]	@ (800726c <pbuf_copy_partial+0xd4>)
 80071d6:	f240 420b 	movw	r2, #1035	@ 0x40b
 80071da:	4927      	ldr	r1, [pc, #156]	@ (8007278 <pbuf_copy_partial+0xe0>)
 80071dc:	4825      	ldr	r0, [pc, #148]	@ (8007274 <pbuf_copy_partial+0xdc>)
 80071de:	f00a fa15 	bl	801160c <iprintf>
 80071e2:	2300      	movs	r3, #0
 80071e4:	e03e      	b.n	8007264 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	e034      	b.n	8007256 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80071ec:	88bb      	ldrh	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <pbuf_copy_partial+0x70>
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	895b      	ldrh	r3, [r3, #10]
 80071f6:	88ba      	ldrh	r2, [r7, #4]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d305      	bcc.n	8007208 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	895b      	ldrh	r3, [r3, #10]
 8007200:	88ba      	ldrh	r2, [r7, #4]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	80bb      	strh	r3, [r7, #4]
 8007206:	e023      	b.n	8007250 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	895a      	ldrh	r2, [r3, #10]
 800720c:	88bb      	ldrh	r3, [r7, #4]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007212:	8b3a      	ldrh	r2, [r7, #24]
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	429a      	cmp	r2, r3
 8007218:	d901      	bls.n	800721e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800721e:	8b7b      	ldrh	r3, [r7, #26]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	18d0      	adds	r0, r2, r3
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	88bb      	ldrh	r3, [r7, #4]
 800722a:	4413      	add	r3, r2
 800722c:	8b3a      	ldrh	r2, [r7, #24]
 800722e:	4619      	mov	r1, r3
 8007230:	f00a fb17 	bl	8011862 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007234:	8afa      	ldrh	r2, [r7, #22]
 8007236:	8b3b      	ldrh	r3, [r7, #24]
 8007238:	4413      	add	r3, r2
 800723a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800723c:	8b7a      	ldrh	r2, [r7, #26]
 800723e:	8b3b      	ldrh	r3, [r7, #24]
 8007240:	4413      	add	r3, r2
 8007242:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007244:	88fa      	ldrh	r2, [r7, #6]
 8007246:	8b3b      	ldrh	r3, [r7, #24]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800724c:	2300      	movs	r3, #0
 800724e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <pbuf_copy_partial+0xca>
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1c4      	bne.n	80071ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007262:	8afb      	ldrh	r3, [r7, #22]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3720      	adds	r7, #32
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	08012df0 	.word	0x08012df0
 8007270:	08013138 	.word	0x08013138
 8007274:	08012e50 	.word	0x08012e50
 8007278:	08013158 	.word	0x08013158

0800727c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	603a      	str	r2, [r7, #0]
 8007286:	71fb      	strb	r3, [r7, #7]
 8007288:	460b      	mov	r3, r1
 800728a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	8919      	ldrh	r1, [r3, #8]
 8007290:	88ba      	ldrh	r2, [r7, #4]
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff fab1 	bl	80067fc <pbuf_alloc>
 800729a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <pbuf_clone+0x2a>
    return NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	e011      	b.n	80072ca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff fea3 	bl	8006ff4 <pbuf_copy>
 80072ae:	4603      	mov	r3, r0
 80072b0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80072b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d006      	beq.n	80072c8 <pbuf_clone+0x4c>
 80072ba:	4b06      	ldr	r3, [pc, #24]	@ (80072d4 <pbuf_clone+0x58>)
 80072bc:	f240 5224 	movw	r2, #1316	@ 0x524
 80072c0:	4905      	ldr	r1, [pc, #20]	@ (80072d8 <pbuf_clone+0x5c>)
 80072c2:	4806      	ldr	r0, [pc, #24]	@ (80072dc <pbuf_clone+0x60>)
 80072c4:	f00a f9a2 	bl	801160c <iprintf>
  return q;
 80072c8:	68fb      	ldr	r3, [r7, #12]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	08012df0 	.word	0x08012df0
 80072d8:	08013264 	.word	0x08013264
 80072dc:	08012e50 	.word	0x08012e50

080072e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80072e4:	f00a f880 	bl	80113e8 <rand>
 80072e8:	4603      	mov	r3, r0
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	4b01      	ldr	r3, [pc, #4]	@ (8007300 <tcp_init+0x20>)
 80072fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80072fc:	bf00      	nop
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000020 	.word	0x20000020

08007304 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	7d1b      	ldrb	r3, [r3, #20]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d105      	bne.n	8007320 <tcp_free+0x1c>
 8007314:	4b06      	ldr	r3, [pc, #24]	@ (8007330 <tcp_free+0x2c>)
 8007316:	22d4      	movs	r2, #212	@ 0xd4
 8007318:	4906      	ldr	r1, [pc, #24]	@ (8007334 <tcp_free+0x30>)
 800731a:	4807      	ldr	r0, [pc, #28]	@ (8007338 <tcp_free+0x34>)
 800731c:	f00a f976 	bl	801160c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	2001      	movs	r0, #1
 8007324:	f7fe fed8 	bl	80060d8 <memp_free>
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	080132f0 	.word	0x080132f0
 8007334:	08013320 	.word	0x08013320
 8007338:	08013334 	.word	0x08013334

0800733c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7d1b      	ldrb	r3, [r3, #20]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d105      	bne.n	8007358 <tcp_free_listen+0x1c>
 800734c:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <tcp_free_listen+0x2c>)
 800734e:	22df      	movs	r2, #223	@ 0xdf
 8007350:	4906      	ldr	r1, [pc, #24]	@ (800736c <tcp_free_listen+0x30>)
 8007352:	4807      	ldr	r0, [pc, #28]	@ (8007370 <tcp_free_listen+0x34>)
 8007354:	f00a f95a 	bl	801160c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	2002      	movs	r0, #2
 800735c:	f7fe febc 	bl	80060d8 <memp_free>
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	080132f0 	.word	0x080132f0
 800736c:	0801335c 	.word	0x0801335c
 8007370:	08013334 	.word	0x08013334

08007374 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007378:	f001 f85e 	bl	8008438 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800737c:	4b07      	ldr	r3, [pc, #28]	@ (800739c <tcp_tmr+0x28>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	b2da      	uxtb	r2, r3
 8007384:	4b05      	ldr	r3, [pc, #20]	@ (800739c <tcp_tmr+0x28>)
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	4b04      	ldr	r3, [pc, #16]	@ (800739c <tcp_tmr+0x28>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d001      	beq.n	8007398 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007394:	f000 fd0e 	bl	8007db4 <tcp_slowtmr>
  }
}
 8007398:	bf00      	nop
 800739a:	bd80      	pop	{r7, pc}
 800739c:	200083ed 	.word	0x200083ed

080073a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d105      	bne.n	80073bc <tcp_remove_listener+0x1c>
 80073b0:	4b0d      	ldr	r3, [pc, #52]	@ (80073e8 <tcp_remove_listener+0x48>)
 80073b2:	22ff      	movs	r2, #255	@ 0xff
 80073b4:	490d      	ldr	r1, [pc, #52]	@ (80073ec <tcp_remove_listener+0x4c>)
 80073b6:	480e      	ldr	r0, [pc, #56]	@ (80073f0 <tcp_remove_listener+0x50>)
 80073b8:	f00a f928 	bl	801160c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	e00a      	b.n	80073d8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d102      	bne.n	80073d2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f1      	bne.n	80073c2 <tcp_remove_listener+0x22>
    }
  }
}
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	080132f0 	.word	0x080132f0
 80073ec:	08013378 	.word	0x08013378
 80073f0:	08013334 	.word	0x08013334

080073f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <tcp_listen_closed+0x1c>
 8007402:	4b14      	ldr	r3, [pc, #80]	@ (8007454 <tcp_listen_closed+0x60>)
 8007404:	f240 1211 	movw	r2, #273	@ 0x111
 8007408:	4913      	ldr	r1, [pc, #76]	@ (8007458 <tcp_listen_closed+0x64>)
 800740a:	4814      	ldr	r0, [pc, #80]	@ (800745c <tcp_listen_closed+0x68>)
 800740c:	f00a f8fe 	bl	801160c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	7d1b      	ldrb	r3, [r3, #20]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d006      	beq.n	8007426 <tcp_listen_closed+0x32>
 8007418:	4b0e      	ldr	r3, [pc, #56]	@ (8007454 <tcp_listen_closed+0x60>)
 800741a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800741e:	4910      	ldr	r1, [pc, #64]	@ (8007460 <tcp_listen_closed+0x6c>)
 8007420:	480e      	ldr	r0, [pc, #56]	@ (800745c <tcp_listen_closed+0x68>)
 8007422:	f00a f8f3 	bl	801160c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007426:	2301      	movs	r3, #1
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	e00b      	b.n	8007444 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800742c:	4a0d      	ldr	r2, [pc, #52]	@ (8007464 <tcp_listen_closed+0x70>)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff ffb1 	bl	80073a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b03      	cmp	r3, #3
 8007448:	d9f0      	bls.n	800742c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800744a:	bf00      	nop
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	080132f0 	.word	0x080132f0
 8007458:	080133a0 	.word	0x080133a0
 800745c:	08013334 	.word	0x08013334
 8007460:	080133ac 	.word	0x080133ac
 8007464:	08015424 	.word	0x08015424

08007468 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007468:	b5b0      	push	{r4, r5, r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af04      	add	r7, sp, #16
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d106      	bne.n	8007488 <tcp_close_shutdown+0x20>
 800747a:	4b63      	ldr	r3, [pc, #396]	@ (8007608 <tcp_close_shutdown+0x1a0>)
 800747c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8007480:	4962      	ldr	r1, [pc, #392]	@ (800760c <tcp_close_shutdown+0x1a4>)
 8007482:	4863      	ldr	r0, [pc, #396]	@ (8007610 <tcp_close_shutdown+0x1a8>)
 8007484:	f00a f8c2 	bl	801160c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d066      	beq.n	800755c <tcp_close_shutdown+0xf4>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	7d1b      	ldrb	r3, [r3, #20]
 8007492:	2b04      	cmp	r3, #4
 8007494:	d003      	beq.n	800749e <tcp_close_shutdown+0x36>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7d1b      	ldrb	r3, [r3, #20]
 800749a:	2b07      	cmp	r3, #7
 800749c:	d15e      	bne.n	800755c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d104      	bne.n	80074b0 <tcp_close_shutdown+0x48>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074aa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80074ae:	d055      	beq.n	800755c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8b5b      	ldrh	r3, [r3, #26]
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <tcp_close_shutdown+0x62>
 80074bc:	4b52      	ldr	r3, [pc, #328]	@ (8007608 <tcp_close_shutdown+0x1a0>)
 80074be:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80074c2:	4954      	ldr	r1, [pc, #336]	@ (8007614 <tcp_close_shutdown+0x1ac>)
 80074c4:	4852      	ldr	r0, [pc, #328]	@ (8007610 <tcp_close_shutdown+0x1a8>)
 80074c6:	f00a f8a1 	bl	801160c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80074d2:	687d      	ldr	r5, [r7, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	8ad2      	ldrh	r2, [r2, #22]
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	8b09      	ldrh	r1, [r1, #24]
 80074e0:	9102      	str	r1, [sp, #8]
 80074e2:	9201      	str	r2, [sp, #4]
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	462b      	mov	r3, r5
 80074e8:	4622      	mov	r2, r4
 80074ea:	4601      	mov	r1, r0
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f005 fce1 	bl	800ceb4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 fac4 	bl	8008a80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80074f8:	4b47      	ldr	r3, [pc, #284]	@ (8007618 <tcp_close_shutdown+0x1b0>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d105      	bne.n	800750e <tcp_close_shutdown+0xa6>
 8007502:	4b45      	ldr	r3, [pc, #276]	@ (8007618 <tcp_close_shutdown+0x1b0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	4a43      	ldr	r2, [pc, #268]	@ (8007618 <tcp_close_shutdown+0x1b0>)
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	e013      	b.n	8007536 <tcp_close_shutdown+0xce>
 800750e:	4b42      	ldr	r3, [pc, #264]	@ (8007618 <tcp_close_shutdown+0x1b0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	e00c      	b.n	8007530 <tcp_close_shutdown+0xc8>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	429a      	cmp	r2, r3
 800751e:	d104      	bne.n	800752a <tcp_close_shutdown+0xc2>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	60da      	str	r2, [r3, #12]
 8007528:	e005      	b.n	8007536 <tcp_close_shutdown+0xce>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1ef      	bne.n	8007516 <tcp_close_shutdown+0xae>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	60da      	str	r2, [r3, #12]
 800753c:	4b37      	ldr	r3, [pc, #220]	@ (800761c <tcp_close_shutdown+0x1b4>)
 800753e:	2201      	movs	r2, #1
 8007540:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007542:	4b37      	ldr	r3, [pc, #220]	@ (8007620 <tcp_close_shutdown+0x1b8>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	429a      	cmp	r2, r3
 800754a:	d102      	bne.n	8007552 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800754c:	f003 ff58 	bl	800b400 <tcp_trigger_input_pcb_close>
 8007550:	e002      	b.n	8007558 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7ff fed6 	bl	8007304 <tcp_free>
      }
      return ERR_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	e050      	b.n	80075fe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	7d1b      	ldrb	r3, [r3, #20]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d03b      	beq.n	80075dc <tcp_close_shutdown+0x174>
 8007564:	2b02      	cmp	r3, #2
 8007566:	dc44      	bgt.n	80075f2 <tcp_close_shutdown+0x18a>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <tcp_close_shutdown+0x10a>
 800756c:	2b01      	cmp	r3, #1
 800756e:	d02a      	beq.n	80075c6 <tcp_close_shutdown+0x15e>
 8007570:	e03f      	b.n	80075f2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8adb      	ldrh	r3, [r3, #22]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d021      	beq.n	80075be <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800757a:	4b2a      	ldr	r3, [pc, #168]	@ (8007624 <tcp_close_shutdown+0x1bc>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	d105      	bne.n	8007590 <tcp_close_shutdown+0x128>
 8007584:	4b27      	ldr	r3, [pc, #156]	@ (8007624 <tcp_close_shutdown+0x1bc>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	4a26      	ldr	r2, [pc, #152]	@ (8007624 <tcp_close_shutdown+0x1bc>)
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	e013      	b.n	80075b8 <tcp_close_shutdown+0x150>
 8007590:	4b24      	ldr	r3, [pc, #144]	@ (8007624 <tcp_close_shutdown+0x1bc>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60bb      	str	r3, [r7, #8]
 8007596:	e00c      	b.n	80075b2 <tcp_close_shutdown+0x14a>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d104      	bne.n	80075ac <tcp_close_shutdown+0x144>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	60da      	str	r2, [r3, #12]
 80075aa:	e005      	b.n	80075b8 <tcp_close_shutdown+0x150>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1ef      	bne.n	8007598 <tcp_close_shutdown+0x130>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff fea0 	bl	8007304 <tcp_free>
      break;
 80075c4:	e01a      	b.n	80075fc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff ff14 	bl	80073f4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	4816      	ldr	r0, [pc, #88]	@ (8007628 <tcp_close_shutdown+0x1c0>)
 80075d0:	f001 faa6 	bl	8008b20 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff feb1 	bl	800733c <tcp_free_listen>
      break;
 80075da:	e00f      	b.n	80075fc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	480e      	ldr	r0, [pc, #56]	@ (8007618 <tcp_close_shutdown+0x1b0>)
 80075e0:	f001 fa9e 	bl	8008b20 <tcp_pcb_remove>
 80075e4:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <tcp_close_shutdown+0x1b4>)
 80075e6:	2201      	movs	r2, #1
 80075e8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff fe8a 	bl	8007304 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80075f0:	e004      	b.n	80075fc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f81a 	bl	800762c <tcp_close_shutdown_fin>
 80075f8:	4603      	mov	r3, r0
 80075fa:	e000      	b.n	80075fe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bdb0      	pop	{r4, r5, r7, pc}
 8007606:	bf00      	nop
 8007608:	080132f0 	.word	0x080132f0
 800760c:	080133c4 	.word	0x080133c4
 8007610:	08013334 	.word	0x08013334
 8007614:	080133e4 	.word	0x080133e4
 8007618:	200083e4 	.word	0x200083e4
 800761c:	200083ec 	.word	0x200083ec
 8007620:	20008424 	.word	0x20008424
 8007624:	200083dc 	.word	0x200083dc
 8007628:	200083e0 	.word	0x200083e0

0800762c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <tcp_close_shutdown_fin+0x1c>
 800763a:	4b2e      	ldr	r3, [pc, #184]	@ (80076f4 <tcp_close_shutdown_fin+0xc8>)
 800763c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007640:	492d      	ldr	r1, [pc, #180]	@ (80076f8 <tcp_close_shutdown_fin+0xcc>)
 8007642:	482e      	ldr	r0, [pc, #184]	@ (80076fc <tcp_close_shutdown_fin+0xd0>)
 8007644:	f009 ffe2 	bl	801160c <iprintf>

  switch (pcb->state) {
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	7d1b      	ldrb	r3, [r3, #20]
 800764c:	2b07      	cmp	r3, #7
 800764e:	d020      	beq.n	8007692 <tcp_close_shutdown_fin+0x66>
 8007650:	2b07      	cmp	r3, #7
 8007652:	dc2b      	bgt.n	80076ac <tcp_close_shutdown_fin+0x80>
 8007654:	2b03      	cmp	r3, #3
 8007656:	d002      	beq.n	800765e <tcp_close_shutdown_fin+0x32>
 8007658:	2b04      	cmp	r3, #4
 800765a:	d00d      	beq.n	8007678 <tcp_close_shutdown_fin+0x4c>
 800765c:	e026      	b.n	80076ac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f004 fd36 	bl	800c0d0 <tcp_send_fin>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d11f      	bne.n	80076b0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2205      	movs	r2, #5
 8007674:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007676:	e01b      	b.n	80076b0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f004 fd29 	bl	800c0d0 <tcp_send_fin>
 800767e:	4603      	mov	r3, r0
 8007680:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d114      	bne.n	80076b4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2205      	movs	r2, #5
 800768e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007690:	e010      	b.n	80076b4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f004 fd1c 	bl	800c0d0 <tcp_send_fin>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800769c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d109      	bne.n	80076b8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2209      	movs	r2, #9
 80076a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80076aa:	e005      	b.n	80076b8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	e01c      	b.n	80076ea <tcp_close_shutdown_fin+0xbe>
      break;
 80076b0:	bf00      	nop
 80076b2:	e002      	b.n	80076ba <tcp_close_shutdown_fin+0x8e>
      break;
 80076b4:	bf00      	nop
 80076b6:	e000      	b.n	80076ba <tcp_close_shutdown_fin+0x8e>
      break;
 80076b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80076ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d103      	bne.n	80076ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f004 fe42 	bl	800c34c <tcp_output>
 80076c8:	e00d      	b.n	80076e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80076ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d2:	d108      	bne.n	80076e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8b5b      	ldrh	r3, [r3, #26]
 80076d8:	f043 0308 	orr.w	r3, r3, #8
 80076dc:	b29a      	uxth	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e001      	b.n	80076ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80076e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	080132f0 	.word	0x080132f0
 80076f8:	080133a0 	.word	0x080133a0
 80076fc:	08013334 	.word	0x08013334

08007700 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d109      	bne.n	8007722 <tcp_close+0x22>
 800770e:	4b0f      	ldr	r3, [pc, #60]	@ (800774c <tcp_close+0x4c>)
 8007710:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8007714:	490e      	ldr	r1, [pc, #56]	@ (8007750 <tcp_close+0x50>)
 8007716:	480f      	ldr	r0, [pc, #60]	@ (8007754 <tcp_close+0x54>)
 8007718:	f009 ff78 	bl	801160c <iprintf>
 800771c:	f06f 030f 	mvn.w	r3, #15
 8007720:	e00f      	b.n	8007742 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	7d1b      	ldrb	r3, [r3, #20]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d006      	beq.n	8007738 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8b5b      	ldrh	r3, [r3, #26]
 800772e:	f043 0310 	orr.w	r3, r3, #16
 8007732:	b29a      	uxth	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007738:	2101      	movs	r1, #1
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fe94 	bl	8007468 <tcp_close_shutdown>
 8007740:	4603      	mov	r3, r0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	080132f0 	.word	0x080132f0
 8007750:	08013400 	.word	0x08013400
 8007754:	08013334 	.word	0x08013334

08007758 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08e      	sub	sp, #56	@ 0x38
 800775c:	af04      	add	r7, sp, #16
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d107      	bne.n	8007778 <tcp_abandon+0x20>
 8007768:	4b52      	ldr	r3, [pc, #328]	@ (80078b4 <tcp_abandon+0x15c>)
 800776a:	f240 223d 	movw	r2, #573	@ 0x23d
 800776e:	4952      	ldr	r1, [pc, #328]	@ (80078b8 <tcp_abandon+0x160>)
 8007770:	4852      	ldr	r0, [pc, #328]	@ (80078bc <tcp_abandon+0x164>)
 8007772:	f009 ff4b 	bl	801160c <iprintf>
 8007776:	e099      	b.n	80078ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	7d1b      	ldrb	r3, [r3, #20]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d106      	bne.n	800778e <tcp_abandon+0x36>
 8007780:	4b4c      	ldr	r3, [pc, #304]	@ (80078b4 <tcp_abandon+0x15c>)
 8007782:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8007786:	494e      	ldr	r1, [pc, #312]	@ (80078c0 <tcp_abandon+0x168>)
 8007788:	484c      	ldr	r0, [pc, #304]	@ (80078bc <tcp_abandon+0x164>)
 800778a:	f009 ff3f 	bl	801160c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7d1b      	ldrb	r3, [r3, #20]
 8007792:	2b0a      	cmp	r3, #10
 8007794:	d107      	bne.n	80077a6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	484a      	ldr	r0, [pc, #296]	@ (80078c4 <tcp_abandon+0x16c>)
 800779a:	f001 f9c1 	bl	8008b20 <tcp_pcb_remove>
    tcp_free(pcb);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff fdb0 	bl	8007304 <tcp_free>
 80077a4:	e082      	b.n	80078ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	7d1b      	ldrb	r3, [r3, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d126      	bne.n	800781e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	8adb      	ldrh	r3, [r3, #22]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d02e      	beq.n	8007836 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80077d8:	4b3b      	ldr	r3, [pc, #236]	@ (80078c8 <tcp_abandon+0x170>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d105      	bne.n	80077ee <tcp_abandon+0x96>
 80077e2:	4b39      	ldr	r3, [pc, #228]	@ (80078c8 <tcp_abandon+0x170>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	4a37      	ldr	r2, [pc, #220]	@ (80078c8 <tcp_abandon+0x170>)
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	e013      	b.n	8007816 <tcp_abandon+0xbe>
 80077ee:	4b36      	ldr	r3, [pc, #216]	@ (80078c8 <tcp_abandon+0x170>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	61fb      	str	r3, [r7, #28]
 80077f4:	e00c      	b.n	8007810 <tcp_abandon+0xb8>
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d104      	bne.n	800780a <tcp_abandon+0xb2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	60da      	str	r2, [r3, #12]
 8007808:	e005      	b.n	8007816 <tcp_abandon+0xbe>
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1ef      	bne.n	80077f6 <tcp_abandon+0x9e>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	60da      	str	r2, [r3, #12]
 800781c:	e00b      	b.n	8007836 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	8adb      	ldrh	r3, [r3, #22]
 8007826:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4828      	ldr	r0, [pc, #160]	@ (80078cc <tcp_abandon+0x174>)
 800782c:	f001 f978 	bl	8008b20 <tcp_pcb_remove>
 8007830:	4b27      	ldr	r3, [pc, #156]	@ (80078d0 <tcp_abandon+0x178>)
 8007832:	2201      	movs	r2, #1
 8007834:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800783a:	2b00      	cmp	r3, #0
 800783c:	d004      	beq.n	8007848 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007842:	4618      	mov	r0, r3
 8007844:	f000 fed8 	bl	80085f8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fecf 	bl	80085f8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800785e:	2b00      	cmp	r3, #0
 8007860:	d004      	beq.n	800786c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007866:	4618      	mov	r0, r3
 8007868:	f000 fec6 	bl	80085f8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00e      	beq.n	8007890 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3304      	adds	r3, #4
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	8b12      	ldrh	r2, [r2, #24]
 800787c:	9202      	str	r2, [sp, #8]
 800787e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007880:	9201      	str	r2, [sp, #4]
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	460b      	mov	r3, r1
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	69b9      	ldr	r1, [r7, #24]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f005 fb12 	bl	800ceb4 <tcp_rst>
    }
    last_state = pcb->state;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	7d1b      	ldrb	r3, [r3, #20]
 8007894:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff fd34 	bl	8007304 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d004      	beq.n	80078ac <tcp_abandon+0x154>
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f06f 010c 	mvn.w	r1, #12
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	4798      	blx	r3
  }
}
 80078ac:	3728      	adds	r7, #40	@ 0x28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	080132f0 	.word	0x080132f0
 80078b8:	08013434 	.word	0x08013434
 80078bc:	08013334 	.word	0x08013334
 80078c0:	08013450 	.word	0x08013450
 80078c4:	200083e8 	.word	0x200083e8
 80078c8:	200083dc 	.word	0x200083dc
 80078cc:	200083e4 	.word	0x200083e4
 80078d0:	200083ec 	.word	0x200083ec

080078d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80078dc:	2101      	movs	r1, #1
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff ff3a 	bl	8007758 <tcp_abandon>
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b088      	sub	sp, #32
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80078fa:	2304      	movs	r3, #4
 80078fc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007904:	4b3e      	ldr	r3, [pc, #248]	@ (8007a00 <tcp_bind+0x114>)
 8007906:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d109      	bne.n	8007922 <tcp_bind+0x36>
 800790e:	4b3d      	ldr	r3, [pc, #244]	@ (8007a04 <tcp_bind+0x118>)
 8007910:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8007914:	493c      	ldr	r1, [pc, #240]	@ (8007a08 <tcp_bind+0x11c>)
 8007916:	483d      	ldr	r0, [pc, #244]	@ (8007a0c <tcp_bind+0x120>)
 8007918:	f009 fe78 	bl	801160c <iprintf>
 800791c:	f06f 030f 	mvn.w	r3, #15
 8007920:	e06a      	b.n	80079f8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	7d1b      	ldrb	r3, [r3, #20]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <tcp_bind+0x52>
 800792a:	4b36      	ldr	r3, [pc, #216]	@ (8007a04 <tcp_bind+0x118>)
 800792c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8007930:	4937      	ldr	r1, [pc, #220]	@ (8007a10 <tcp_bind+0x124>)
 8007932:	4836      	ldr	r0, [pc, #216]	@ (8007a0c <tcp_bind+0x120>)
 8007934:	f009 fe6a 	bl	801160c <iprintf>
 8007938:	f06f 0305 	mvn.w	r3, #5
 800793c:	e05c      	b.n	80079f8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800793e:	88fb      	ldrh	r3, [r7, #6]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d109      	bne.n	8007958 <tcp_bind+0x6c>
    port = tcp_new_port();
 8007944:	f000 f9f0 	bl	8007d28 <tcp_new_port>
 8007948:	4603      	mov	r3, r0
 800794a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d135      	bne.n	80079be <tcp_bind+0xd2>
      return ERR_BUF;
 8007952:	f06f 0301 	mvn.w	r3, #1
 8007956:	e04f      	b.n	80079f8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007958:	2300      	movs	r3, #0
 800795a:	61fb      	str	r3, [r7, #28]
 800795c:	e02b      	b.n	80079b6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800795e:	4a2d      	ldr	r2, [pc, #180]	@ (8007a14 <tcp_bind+0x128>)
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	61bb      	str	r3, [r7, #24]
 800796a:	e01e      	b.n	80079aa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	8adb      	ldrh	r3, [r3, #22]
 8007970:	88fa      	ldrh	r2, [r7, #6]
 8007972:	429a      	cmp	r2, r3
 8007974:	d116      	bne.n	80079a4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007976:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007978:	2b00      	cmp	r3, #0
 800797a:	d010      	beq.n	800799e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00c      	beq.n	800799e <tcp_bind+0xb2>
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d009      	beq.n	800799e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800799a:	429a      	cmp	r2, r3
 800799c:	d102      	bne.n	80079a4 <tcp_bind+0xb8>
              return ERR_USE;
 800799e:	f06f 0307 	mvn.w	r3, #7
 80079a2:	e029      	b.n	80079f8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	61bb      	str	r3, [r7, #24]
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1dd      	bne.n	800796c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	3301      	adds	r3, #1
 80079b4:	61fb      	str	r3, [r7, #28]
 80079b6:	69fa      	ldr	r2, [r7, #28]
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	dbcf      	blt.n	800795e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00c      	beq.n	80079de <tcp_bind+0xf2>
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d008      	beq.n	80079de <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <tcp_bind+0xec>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	e000      	b.n	80079da <tcp_bind+0xee>
 80079d8:	2300      	movs	r3, #0
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	88fa      	ldrh	r2, [r7, #6]
 80079e2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80079e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007a18 <tcp_bind+0x12c>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	60da      	str	r2, [r3, #12]
 80079ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007a18 <tcp_bind+0x12c>)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	f005 fc21 	bl	800d238 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	0801544c 	.word	0x0801544c
 8007a04:	080132f0 	.word	0x080132f0
 8007a08:	08013484 	.word	0x08013484
 8007a0c:	08013334 	.word	0x08013334
 8007a10:	0801349c 	.word	0x0801349c
 8007a14:	08015424 	.word	0x08015424
 8007a18:	200083dc 	.word	0x200083dc

08007a1c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d106      	bne.n	8007a3e <tcp_accept_null+0x22>
 8007a30:	4b07      	ldr	r3, [pc, #28]	@ (8007a50 <tcp_accept_null+0x34>)
 8007a32:	f240 320f 	movw	r2, #783	@ 0x30f
 8007a36:	4907      	ldr	r1, [pc, #28]	@ (8007a54 <tcp_accept_null+0x38>)
 8007a38:	4807      	ldr	r0, [pc, #28]	@ (8007a58 <tcp_accept_null+0x3c>)
 8007a3a:	f009 fde7 	bl	801160c <iprintf>

  tcp_abort(pcb);
 8007a3e:	68b8      	ldr	r0, [r7, #8]
 8007a40:	f7ff ff48 	bl	80078d4 <tcp_abort>

  return ERR_ABRT;
 8007a44:	f06f 030c 	mvn.w	r3, #12
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	080132f0 	.word	0x080132f0
 8007a54:	080134c4 	.word	0x080134c4
 8007a58:	08013334 	.word	0x08013334

08007a5c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007a68:	78fb      	ldrb	r3, [r7, #3]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f806 	bl	8007a80 <tcp_listen_with_backlog_and_err>
 8007a74:	4603      	mov	r3, r0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d109      	bne.n	8007aac <tcp_listen_with_backlog_and_err+0x2c>
 8007a98:	4b47      	ldr	r3, [pc, #284]	@ (8007bb8 <tcp_listen_with_backlog_and_err+0x138>)
 8007a9a:	f240 3259 	movw	r2, #857	@ 0x359
 8007a9e:	4947      	ldr	r1, [pc, #284]	@ (8007bbc <tcp_listen_with_backlog_and_err+0x13c>)
 8007aa0:	4847      	ldr	r0, [pc, #284]	@ (8007bc0 <tcp_listen_with_backlog_and_err+0x140>)
 8007aa2:	f009 fdb3 	bl	801160c <iprintf>
 8007aa6:	23f0      	movs	r3, #240	@ 0xf0
 8007aa8:	76fb      	strb	r3, [r7, #27]
 8007aaa:	e079      	b.n	8007ba0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	7d1b      	ldrb	r3, [r3, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d009      	beq.n	8007ac8 <tcp_listen_with_backlog_and_err+0x48>
 8007ab4:	4b40      	ldr	r3, [pc, #256]	@ (8007bb8 <tcp_listen_with_backlog_and_err+0x138>)
 8007ab6:	f240 325a 	movw	r2, #858	@ 0x35a
 8007aba:	4942      	ldr	r1, [pc, #264]	@ (8007bc4 <tcp_listen_with_backlog_and_err+0x144>)
 8007abc:	4840      	ldr	r0, [pc, #256]	@ (8007bc0 <tcp_listen_with_backlog_and_err+0x140>)
 8007abe:	f009 fda5 	bl	801160c <iprintf>
 8007ac2:	23f1      	movs	r3, #241	@ 0xf1
 8007ac4:	76fb      	strb	r3, [r7, #27]
 8007ac6:	e06b      	b.n	8007ba0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	7d1b      	ldrb	r3, [r3, #20]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d104      	bne.n	8007ada <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007ad4:	23f7      	movs	r3, #247	@ 0xf7
 8007ad6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007ad8:	e062      	b.n	8007ba0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007ada:	2002      	movs	r0, #2
 8007adc:	f7fe fa8c 	bl	8005ff8 <memp_malloc>
 8007ae0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007ae8:	23ff      	movs	r3, #255	@ 0xff
 8007aea:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007aec:	e058      	b.n	8007ba0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	691a      	ldr	r2, [r3, #16]
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8ada      	ldrh	r2, [r3, #22]
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	2201      	movs	r2, #1
 8007b02:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	7d5a      	ldrb	r2, [r3, #21]
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	7a5a      	ldrb	r2, [r3, #9]
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	2200      	movs	r2, #0
 8007b18:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	7ada      	ldrb	r2, [r3, #11]
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	7a9a      	ldrb	r2, [r3, #10]
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8adb      	ldrh	r3, [r3, #22]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d021      	beq.n	8007b7e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007b3a:	4b23      	ldr	r3, [pc, #140]	@ (8007bc8 <tcp_listen_with_backlog_and_err+0x148>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d105      	bne.n	8007b50 <tcp_listen_with_backlog_and_err+0xd0>
 8007b44:	4b20      	ldr	r3, [pc, #128]	@ (8007bc8 <tcp_listen_with_backlog_and_err+0x148>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007bc8 <tcp_listen_with_backlog_and_err+0x148>)
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	e013      	b.n	8007b78 <tcp_listen_with_backlog_and_err+0xf8>
 8007b50:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc8 <tcp_listen_with_backlog_and_err+0x148>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	e00c      	b.n	8007b72 <tcp_listen_with_backlog_and_err+0xf2>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d104      	bne.n	8007b6c <tcp_listen_with_backlog_and_err+0xec>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	60da      	str	r2, [r3, #12]
 8007b6a:	e005      	b.n	8007b78 <tcp_listen_with_backlog_and_err+0xf8>
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	617b      	str	r3, [r7, #20]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1ef      	bne.n	8007b58 <tcp_listen_with_backlog_and_err+0xd8>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7ff fbc0 	bl	8007304 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	4a11      	ldr	r2, [pc, #68]	@ (8007bcc <tcp_listen_with_backlog_and_err+0x14c>)
 8007b88:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007b8a:	4b11      	ldr	r3, [pc, #68]	@ (8007bd0 <tcp_listen_with_backlog_and_err+0x150>)
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	60da      	str	r2, [r3, #12]
 8007b92:	4a0f      	ldr	r2, [pc, #60]	@ (8007bd0 <tcp_listen_with_backlog_and_err+0x150>)
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	f005 fb4e 	bl	800d238 <tcp_timer_needed>
  res = ERR_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	7efa      	ldrb	r2, [r7, #27]
 8007baa:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007bac:	69fb      	ldr	r3, [r7, #28]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3720      	adds	r7, #32
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	080132f0 	.word	0x080132f0
 8007bbc:	080134e4 	.word	0x080134e4
 8007bc0:	08013334 	.word	0x08013334
 8007bc4:	08013514 	.word	0x08013514
 8007bc8:	200083dc 	.word	0x200083dc
 8007bcc:	08007a1d 	.word	0x08007a1d
 8007bd0:	200083e0 	.word	0x200083e0

08007bd4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <tcp_update_rcv_ann_wnd+0x1c>
 8007be2:	4b25      	ldr	r3, [pc, #148]	@ (8007c78 <tcp_update_rcv_ann_wnd+0xa4>)
 8007be4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8007be8:	4924      	ldr	r1, [pc, #144]	@ (8007c7c <tcp_update_rcv_ann_wnd+0xa8>)
 8007bea:	4825      	ldr	r0, [pc, #148]	@ (8007c80 <tcp_update_rcv_ann_wnd+0xac>)
 8007bec:	f009 fd0e 	bl	801160c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007bf8:	4413      	add	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007c04:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007c08:	bf28      	it	cs
 8007c0a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	4413      	add	r3, r2
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	db08      	blt.n	8007c2c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	e020      	b.n	8007c6e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dd03      	ble.n	8007c42 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007c40:	e014      	b.n	8007c6c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c54:	d306      	bcc.n	8007c64 <tcp_update_rcv_ann_wnd+0x90>
 8007c56:	4b08      	ldr	r3, [pc, #32]	@ (8007c78 <tcp_update_rcv_ann_wnd+0xa4>)
 8007c58:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8007c5c:	4909      	ldr	r1, [pc, #36]	@ (8007c84 <tcp_update_rcv_ann_wnd+0xb0>)
 8007c5e:	4808      	ldr	r0, [pc, #32]	@ (8007c80 <tcp_update_rcv_ann_wnd+0xac>)
 8007c60:	f009 fcd4 	bl	801160c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8007c6c:	2300      	movs	r3, #0
  }
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	080132f0 	.word	0x080132f0
 8007c7c:	0801354c 	.word	0x0801354c
 8007c80:	08013334 	.word	0x08013334
 8007c84:	08013570 	.word	0x08013570

08007c88 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d107      	bne.n	8007caa <tcp_recved+0x22>
 8007c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007d18 <tcp_recved+0x90>)
 8007c9c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8007ca0:	491e      	ldr	r1, [pc, #120]	@ (8007d1c <tcp_recved+0x94>)
 8007ca2:	481f      	ldr	r0, [pc, #124]	@ (8007d20 <tcp_recved+0x98>)
 8007ca4:	f009 fcb2 	bl	801160c <iprintf>
 8007ca8:	e032      	b.n	8007d10 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	7d1b      	ldrb	r3, [r3, #20]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d106      	bne.n	8007cc0 <tcp_recved+0x38>
 8007cb2:	4b19      	ldr	r3, [pc, #100]	@ (8007d18 <tcp_recved+0x90>)
 8007cb4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8007cb8:	491a      	ldr	r1, [pc, #104]	@ (8007d24 <tcp_recved+0x9c>)
 8007cba:	4819      	ldr	r0, [pc, #100]	@ (8007d20 <tcp_recved+0x98>)
 8007cbc:	f009 fca6 	bl	801160c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007cc4:	887b      	ldrh	r3, [r7, #2]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007cca:	89fb      	ldrh	r3, [r7, #14]
 8007ccc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007cd0:	d804      	bhi.n	8007cdc <tcp_recved+0x54>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cd6:	89fa      	ldrh	r2, [r7, #14]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d204      	bcs.n	8007ce6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007ce4:	e002      	b.n	8007cec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	89fa      	ldrh	r2, [r7, #14]
 8007cea:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff ff71 	bl	8007bd4 <tcp_update_rcv_ann_wnd>
 8007cf2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8007cfa:	d309      	bcc.n	8007d10 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	8b5b      	ldrh	r3, [r3, #26]
 8007d00:	f043 0302 	orr.w	r3, r3, #2
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f004 fb1e 	bl	800c34c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	080132f0 	.word	0x080132f0
 8007d1c:	0801358c 	.word	0x0801358c
 8007d20:	08013334 	.word	0x08013334
 8007d24:	080135a4 	.word	0x080135a4

08007d28 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007d32:	4b1e      	ldr	r3, [pc, #120]	@ (8007dac <tcp_new_port+0x84>)
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	3301      	adds	r3, #1
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8007dac <tcp_new_port+0x84>)
 8007d3c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8007dac <tcp_new_port+0x84>)
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d103      	bne.n	8007d52 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007d4a:	4b18      	ldr	r3, [pc, #96]	@ (8007dac <tcp_new_port+0x84>)
 8007d4c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8007d50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007d52:	2300      	movs	r3, #0
 8007d54:	71fb      	strb	r3, [r7, #7]
 8007d56:	e01e      	b.n	8007d96 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	4a15      	ldr	r2, [pc, #84]	@ (8007db0 <tcp_new_port+0x88>)
 8007d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	e011      	b.n	8007d8a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	8ada      	ldrh	r2, [r3, #22]
 8007d6a:	4b10      	ldr	r3, [pc, #64]	@ (8007dac <tcp_new_port+0x84>)
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d108      	bne.n	8007d84 <tcp_new_port+0x5c>
        n++;
 8007d72:	88bb      	ldrh	r3, [r7, #4]
 8007d74:	3301      	adds	r3, #1
 8007d76:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007d78:	88bb      	ldrh	r3, [r7, #4]
 8007d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d7e:	d3d8      	bcc.n	8007d32 <tcp_new_port+0xa>
          return 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e00d      	b.n	8007da0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	603b      	str	r3, [r7, #0]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1ea      	bne.n	8007d66 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007d90:	79fb      	ldrb	r3, [r7, #7]
 8007d92:	3301      	adds	r3, #1
 8007d94:	71fb      	strb	r3, [r7, #7]
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d9dd      	bls.n	8007d58 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007d9c:	4b03      	ldr	r3, [pc, #12]	@ (8007dac <tcp_new_port+0x84>)
 8007d9e:	881b      	ldrh	r3, [r3, #0]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	20000020 	.word	0x20000020
 8007db0:	08015424 	.word	0x08015424

08007db4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007db4:	b5b0      	push	{r4, r5, r7, lr}
 8007db6:	b090      	sub	sp, #64	@ 0x40
 8007db8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8007dc0:	4b95      	ldr	r3, [pc, #596]	@ (8008018 <tcp_slowtmr+0x264>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4a94      	ldr	r2, [pc, #592]	@ (8008018 <tcp_slowtmr+0x264>)
 8007dc8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007dca:	4b94      	ldr	r3, [pc, #592]	@ (800801c <tcp_slowtmr+0x268>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	4b92      	ldr	r3, [pc, #584]	@ (800801c <tcp_slowtmr+0x268>)
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e000      	b.n	8007dda <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8007dd8:	bf00      	nop
  prev = NULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8007dde:	4b90      	ldr	r3, [pc, #576]	@ (8008020 <tcp_slowtmr+0x26c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007de4:	e29f      	b.n	8008326 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de8:	7d1b      	ldrb	r3, [r3, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d106      	bne.n	8007dfc <tcp_slowtmr+0x48>
 8007dee:	4b8d      	ldr	r3, [pc, #564]	@ (8008024 <tcp_slowtmr+0x270>)
 8007df0:	f240 42be 	movw	r2, #1214	@ 0x4be
 8007df4:	498c      	ldr	r1, [pc, #560]	@ (8008028 <tcp_slowtmr+0x274>)
 8007df6:	488d      	ldr	r0, [pc, #564]	@ (800802c <tcp_slowtmr+0x278>)
 8007df8:	f009 fc08 	bl	801160c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfe:	7d1b      	ldrb	r3, [r3, #20]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d106      	bne.n	8007e12 <tcp_slowtmr+0x5e>
 8007e04:	4b87      	ldr	r3, [pc, #540]	@ (8008024 <tcp_slowtmr+0x270>)
 8007e06:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8007e0a:	4989      	ldr	r1, [pc, #548]	@ (8008030 <tcp_slowtmr+0x27c>)
 8007e0c:	4887      	ldr	r0, [pc, #540]	@ (800802c <tcp_slowtmr+0x278>)
 8007e0e:	f009 fbfd 	bl	801160c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e14:	7d1b      	ldrb	r3, [r3, #20]
 8007e16:	2b0a      	cmp	r3, #10
 8007e18:	d106      	bne.n	8007e28 <tcp_slowtmr+0x74>
 8007e1a:	4b82      	ldr	r3, [pc, #520]	@ (8008024 <tcp_slowtmr+0x270>)
 8007e1c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007e20:	4984      	ldr	r1, [pc, #528]	@ (8008034 <tcp_slowtmr+0x280>)
 8007e22:	4882      	ldr	r0, [pc, #520]	@ (800802c <tcp_slowtmr+0x278>)
 8007e24:	f009 fbf2 	bl	801160c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2a:	7f9a      	ldrb	r2, [r3, #30]
 8007e2c:	4b7b      	ldr	r3, [pc, #492]	@ (800801c <tcp_slowtmr+0x268>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d105      	bne.n	8007e40 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e36:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8007e3e:	e272      	b.n	8008326 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8007e40:	4b76      	ldr	r3, [pc, #472]	@ (800801c <tcp_slowtmr+0x268>)
 8007e42:	781a      	ldrb	r2, [r3, #0]
 8007e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e46:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e56:	7d1b      	ldrb	r3, [r3, #20]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d10a      	bne.n	8007e72 <tcp_slowtmr+0xbe>
 8007e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e62:	2b05      	cmp	r3, #5
 8007e64:	d905      	bls.n	8007e72 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007e66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007e70:	e11e      	b.n	80080b0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e78:	2b0b      	cmp	r3, #11
 8007e7a:	d905      	bls.n	8007e88 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8007e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e80:	3301      	adds	r3, #1
 8007e82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007e86:	e113      	b.n	80080b0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8007e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d075      	beq.n	8007f7e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d006      	beq.n	8007ea8 <tcp_slowtmr+0xf4>
 8007e9a:	4b62      	ldr	r3, [pc, #392]	@ (8008024 <tcp_slowtmr+0x270>)
 8007e9c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8007ea0:	4965      	ldr	r1, [pc, #404]	@ (8008038 <tcp_slowtmr+0x284>)
 8007ea2:	4862      	ldr	r0, [pc, #392]	@ (800802c <tcp_slowtmr+0x278>)
 8007ea4:	f009 fbb2 	bl	801160c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d106      	bne.n	8007ebe <tcp_slowtmr+0x10a>
 8007eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8008024 <tcp_slowtmr+0x270>)
 8007eb2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8007eb6:	4961      	ldr	r1, [pc, #388]	@ (800803c <tcp_slowtmr+0x288>)
 8007eb8:	485c      	ldr	r0, [pc, #368]	@ (800802c <tcp_slowtmr+0x278>)
 8007eba:	f009 fba7 	bl	801160c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8007ec4:	2b0b      	cmp	r3, #11
 8007ec6:	d905      	bls.n	8007ed4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8007ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ecc:	3301      	adds	r3, #1
 8007ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007ed2:	e0ed      	b.n	80080b0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007eda:	3b01      	subs	r3, #1
 8007edc:	4a58      	ldr	r2, [pc, #352]	@ (8008040 <tcp_slowtmr+0x28c>)
 8007ede:	5cd3      	ldrb	r3, [r2, r3]
 8007ee0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007ee8:	7c7a      	ldrb	r2, [r7, #17]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d907      	bls.n	8007efe <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8007eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8007efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f00:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007f04:	7c7a      	ldrb	r2, [r7, #17]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	f200 80d2 	bhi.w	80080b0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8007f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d108      	bne.n	8007f2c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007f1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f1c:	f005 f8be 	bl	800d09c <tcp_zero_window_probe>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d014      	beq.n	8007f50 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8007f26:	2300      	movs	r3, #0
 8007f28:	623b      	str	r3, [r7, #32]
 8007f2a:	e011      	b.n	8007f50 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f32:	4619      	mov	r1, r3
 8007f34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f36:	f003 ff83 	bl	800be40 <tcp_split_unsent_seg>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d107      	bne.n	8007f50 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007f40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f42:	f004 fa03 	bl	800c34c <tcp_output>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 80ac 	beq.w	80080b0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f62:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007f66:	2b06      	cmp	r3, #6
 8007f68:	f200 80a2 	bhi.w	80080b0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8007f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007f72:	3301      	adds	r3, #1
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f78:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8007f7c:	e098      	b.n	80080b0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	db0f      	blt.n	8007fa8 <tcp_slowtmr+0x1f4>
 8007f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f8a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007f8e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d008      	beq.n	8007fa8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	b21a      	sxth	r2, r3
 8007fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8007fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007faa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8007fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	db7b      	blt.n	80080b0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007fb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fba:	f004 fcbb 	bl	800c934 <tcp_rexmit_rto_prepare>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d007      	beq.n	8007fd4 <tcp_slowtmr+0x220>
 8007fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d171      	bne.n	80080b0 <tcp_slowtmr+0x2fc>
 8007fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d06d      	beq.n	80080b0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8007fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd6:	7d1b      	ldrb	r3, [r3, #20]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d03a      	beq.n	8008052 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fe2:	2b0c      	cmp	r3, #12
 8007fe4:	bf28      	it	cs
 8007fe6:	230c      	movcs	r3, #12
 8007fe8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8007ff0:	10db      	asrs	r3, r3, #3
 8007ff2:	b21b      	sxth	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007ffc:	4413      	add	r3, r2
 8007ffe:	7efa      	ldrb	r2, [r7, #27]
 8008000:	4910      	ldr	r1, [pc, #64]	@ (8008044 <tcp_slowtmr+0x290>)
 8008002:	5c8a      	ldrb	r2, [r1, r2]
 8008004:	4093      	lsls	r3, r2
 8008006:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800800e:	4293      	cmp	r3, r2
 8008010:	dc1a      	bgt.n	8008048 <tcp_slowtmr+0x294>
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	b21a      	sxth	r2, r3
 8008016:	e019      	b.n	800804c <tcp_slowtmr+0x298>
 8008018:	200083d8 	.word	0x200083d8
 800801c:	200083ee 	.word	0x200083ee
 8008020:	200083e4 	.word	0x200083e4
 8008024:	080132f0 	.word	0x080132f0
 8008028:	08013634 	.word	0x08013634
 800802c:	08013334 	.word	0x08013334
 8008030:	08013660 	.word	0x08013660
 8008034:	0801368c 	.word	0x0801368c
 8008038:	080136bc 	.word	0x080136bc
 800803c:	080136f0 	.word	0x080136f0
 8008040:	0801541c 	.word	0x0801541c
 8008044:	0801540c 	.word	0x0801540c
 8008048:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800804c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008054:	2200      	movs	r2, #0
 8008056:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800805e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008060:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008064:	4293      	cmp	r3, r2
 8008066:	bf28      	it	cs
 8008068:	4613      	movcs	r3, r2
 800806a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800806c:	8a7b      	ldrh	r3, [r7, #18]
 800806e:	085b      	lsrs	r3, r3, #1
 8008070:	b29a      	uxth	r2, r3
 8008072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008074:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800807e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008080:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	b29b      	uxth	r3, r3
 8008086:	429a      	cmp	r2, r3
 8008088:	d206      	bcs.n	8008098 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800808a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008094:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800809a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800809c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800809e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80080a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a4:	2200      	movs	r2, #0
 80080a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80080aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080ac:	f004 fcb2 	bl	800ca14 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80080b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b2:	7d1b      	ldrb	r3, [r3, #20]
 80080b4:	2b06      	cmp	r3, #6
 80080b6:	d111      	bne.n	80080dc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80080b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ba:	8b5b      	ldrh	r3, [r3, #26]
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00b      	beq.n	80080dc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080c4:	4b9d      	ldr	r3, [pc, #628]	@ (800833c <tcp_slowtmr+0x588>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b28      	cmp	r3, #40	@ 0x28
 80080d0:	d904      	bls.n	80080dc <tcp_slowtmr+0x328>
          ++pcb_remove;
 80080d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080d6:	3301      	adds	r3, #1
 80080d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80080dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080de:	7a5b      	ldrb	r3, [r3, #9]
 80080e0:	f003 0308 	and.w	r3, r3, #8
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d04c      	beq.n	8008182 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80080e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d003      	beq.n	80080f8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80080f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80080f4:	2b07      	cmp	r3, #7
 80080f6:	d144      	bne.n	8008182 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080f8:	4b90      	ldr	r3, [pc, #576]	@ (800833c <tcp_slowtmr+0x588>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008108:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800810c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8008110:	498b      	ldr	r1, [pc, #556]	@ (8008340 <tcp_slowtmr+0x58c>)
 8008112:	fba1 1303 	umull	r1, r3, r1, r3
 8008116:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008118:	429a      	cmp	r2, r3
 800811a:	d90a      	bls.n	8008132 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800811c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008120:	3301      	adds	r3, #1
 8008122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008126:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800812a:	3301      	adds	r3, #1
 800812c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008130:	e027      	b.n	8008182 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008132:	4b82      	ldr	r3, [pc, #520]	@ (800833c <tcp_slowtmr+0x588>)
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800813c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008144:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008148:	4618      	mov	r0, r3
 800814a:	4b7e      	ldr	r3, [pc, #504]	@ (8008344 <tcp_slowtmr+0x590>)
 800814c:	fb00 f303 	mul.w	r3, r0, r3
 8008150:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008152:	497b      	ldr	r1, [pc, #492]	@ (8008340 <tcp_slowtmr+0x58c>)
 8008154:	fba1 1303 	umull	r1, r3, r1, r3
 8008158:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800815a:	429a      	cmp	r2, r3
 800815c:	d911      	bls.n	8008182 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800815e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008160:	f004 ff5c 	bl	800d01c <tcp_keepalive>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800816a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800816e:	2b00      	cmp	r3, #0
 8008170:	d107      	bne.n	8008182 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8008172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008174:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008178:	3301      	adds	r3, #1
 800817a:	b2da      	uxtb	r2, r3
 800817c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008186:	2b00      	cmp	r3, #0
 8008188:	d011      	beq.n	80081ae <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800818a:	4b6c      	ldr	r3, [pc, #432]	@ (800833c <tcp_slowtmr+0x588>)
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	1ad2      	subs	r2, r2, r3
 8008194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008196:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800819a:	4619      	mov	r1, r3
 800819c:	460b      	mov	r3, r1
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	440b      	add	r3, r1
 80081a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d302      	bcc.n	80081ae <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80081a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081aa:	f000 fe1d 	bl	8008de8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80081ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b0:	7d1b      	ldrb	r3, [r3, #20]
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d10b      	bne.n	80081ce <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80081b6:	4b61      	ldr	r3, [pc, #388]	@ (800833c <tcp_slowtmr+0x588>)
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	2b28      	cmp	r3, #40	@ 0x28
 80081c2:	d904      	bls.n	80081ce <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80081c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081c8:	3301      	adds	r3, #1
 80081ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80081ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d0:	7d1b      	ldrb	r3, [r3, #20]
 80081d2:	2b09      	cmp	r3, #9
 80081d4:	d10b      	bne.n	80081ee <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80081d6:	4b59      	ldr	r3, [pc, #356]	@ (800833c <tcp_slowtmr+0x588>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2bf0      	cmp	r3, #240	@ 0xf0
 80081e2:	d904      	bls.n	80081ee <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80081e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081e8:	3301      	adds	r3, #1
 80081ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80081ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d060      	beq.n	80082b8 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80081f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081fc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80081fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008200:	f000 fc3e 	bl	8008a80 <tcp_pcb_purge>
      if (prev != NULL) {
 8008204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008206:	2b00      	cmp	r3, #0
 8008208:	d010      	beq.n	800822c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800820a:	4b4f      	ldr	r3, [pc, #316]	@ (8008348 <tcp_slowtmr+0x594>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008210:	429a      	cmp	r2, r3
 8008212:	d106      	bne.n	8008222 <tcp_slowtmr+0x46e>
 8008214:	4b4d      	ldr	r3, [pc, #308]	@ (800834c <tcp_slowtmr+0x598>)
 8008216:	f240 526d 	movw	r2, #1389	@ 0x56d
 800821a:	494d      	ldr	r1, [pc, #308]	@ (8008350 <tcp_slowtmr+0x59c>)
 800821c:	484d      	ldr	r0, [pc, #308]	@ (8008354 <tcp_slowtmr+0x5a0>)
 800821e:	f009 f9f5 	bl	801160c <iprintf>
        prev->next = pcb->next;
 8008222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008228:	60da      	str	r2, [r3, #12]
 800822a:	e00f      	b.n	800824c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800822c:	4b46      	ldr	r3, [pc, #280]	@ (8008348 <tcp_slowtmr+0x594>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008232:	429a      	cmp	r2, r3
 8008234:	d006      	beq.n	8008244 <tcp_slowtmr+0x490>
 8008236:	4b45      	ldr	r3, [pc, #276]	@ (800834c <tcp_slowtmr+0x598>)
 8008238:	f240 5271 	movw	r2, #1393	@ 0x571
 800823c:	4946      	ldr	r1, [pc, #280]	@ (8008358 <tcp_slowtmr+0x5a4>)
 800823e:	4845      	ldr	r0, [pc, #276]	@ (8008354 <tcp_slowtmr+0x5a0>)
 8008240:	f009 f9e4 	bl	801160c <iprintf>
        tcp_active_pcbs = pcb->next;
 8008244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	4a3f      	ldr	r2, [pc, #252]	@ (8008348 <tcp_slowtmr+0x594>)
 800824a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800824c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008250:	2b00      	cmp	r3, #0
 8008252:	d013      	beq.n	800827c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008256:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800825c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800825e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008260:	3304      	adds	r3, #4
 8008262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008264:	8ad2      	ldrh	r2, [r2, #22]
 8008266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008268:	8b09      	ldrh	r1, [r1, #24]
 800826a:	9102      	str	r1, [sp, #8]
 800826c:	9201      	str	r2, [sp, #4]
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	462b      	mov	r3, r5
 8008272:	4622      	mov	r2, r4
 8008274:	4601      	mov	r1, r0
 8008276:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008278:	f004 fe1c 	bl	800ceb4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800827c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008284:	7d1b      	ldrb	r3, [r3, #20]
 8008286:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800828c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008292:	6838      	ldr	r0, [r7, #0]
 8008294:	f7ff f836 	bl	8007304 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008298:	4b30      	ldr	r3, [pc, #192]	@ (800835c <tcp_slowtmr+0x5a8>)
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <tcp_slowtmr+0x4fa>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f06f 010c 	mvn.w	r1, #12
 80082aa:	68b8      	ldr	r0, [r7, #8]
 80082ac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80082ae:	4b2b      	ldr	r3, [pc, #172]	@ (800835c <tcp_slowtmr+0x5a8>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d037      	beq.n	8008326 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80082b6:	e590      	b.n	8007dda <tcp_slowtmr+0x26>
      prev = pcb;
 80082b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80082bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80082c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c4:	7f1b      	ldrb	r3, [r3, #28]
 80082c6:	3301      	adds	r3, #1
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082cc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80082ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d0:	7f1a      	ldrb	r2, [r3, #28]
 80082d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d4:	7f5b      	ldrb	r3, [r3, #29]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d325      	bcc.n	8008326 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	2200      	movs	r2, #0
 80082de:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80082e0:	4b1e      	ldr	r3, [pc, #120]	@ (800835c <tcp_slowtmr+0x5a8>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80082e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <tcp_slowtmr+0x554>
 80082f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082f8:	6912      	ldr	r2, [r2, #16]
 80082fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	4603      	mov	r3, r0
 8008302:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008306:	e002      	b.n	800830e <tcp_slowtmr+0x55a>
 8008308:	2300      	movs	r3, #0
 800830a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800830e:	4b13      	ldr	r3, [pc, #76]	@ (800835c <tcp_slowtmr+0x5a8>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f47f ad60 	bne.w	8007dd8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008318:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8008320:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008322:	f004 f813 	bl	800c34c <tcp_output>
  while (pcb != NULL) {
 8008326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008328:	2b00      	cmp	r3, #0
 800832a:	f47f ad5c 	bne.w	8007de6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800832e:	2300      	movs	r3, #0
 8008330:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008332:	4b0b      	ldr	r3, [pc, #44]	@ (8008360 <tcp_slowtmr+0x5ac>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008338:	e067      	b.n	800840a <tcp_slowtmr+0x656>
 800833a:	bf00      	nop
 800833c:	200083d8 	.word	0x200083d8
 8008340:	10624dd3 	.word	0x10624dd3
 8008344:	000124f8 	.word	0x000124f8
 8008348:	200083e4 	.word	0x200083e4
 800834c:	080132f0 	.word	0x080132f0
 8008350:	08013728 	.word	0x08013728
 8008354:	08013334 	.word	0x08013334
 8008358:	08013754 	.word	0x08013754
 800835c:	200083ec 	.word	0x200083ec
 8008360:	200083e8 	.word	0x200083e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008366:	7d1b      	ldrb	r3, [r3, #20]
 8008368:	2b0a      	cmp	r3, #10
 800836a:	d006      	beq.n	800837a <tcp_slowtmr+0x5c6>
 800836c:	4b2b      	ldr	r3, [pc, #172]	@ (800841c <tcp_slowtmr+0x668>)
 800836e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008372:	492b      	ldr	r1, [pc, #172]	@ (8008420 <tcp_slowtmr+0x66c>)
 8008374:	482b      	ldr	r0, [pc, #172]	@ (8008424 <tcp_slowtmr+0x670>)
 8008376:	f009 f949 	bl	801160c <iprintf>
    pcb_remove = 0;
 800837a:	2300      	movs	r3, #0
 800837c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008380:	4b29      	ldr	r3, [pc, #164]	@ (8008428 <tcp_slowtmr+0x674>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2bf0      	cmp	r3, #240	@ 0xf0
 800838c:	d904      	bls.n	8008398 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800838e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008392:	3301      	adds	r3, #1
 8008394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800839c:	2b00      	cmp	r3, #0
 800839e:	d02f      	beq.n	8008400 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80083a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80083a2:	f000 fb6d 	bl	8008a80 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80083a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d010      	beq.n	80083ce <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80083ac:	4b1f      	ldr	r3, [pc, #124]	@ (800842c <tcp_slowtmr+0x678>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d106      	bne.n	80083c4 <tcp_slowtmr+0x610>
 80083b6:	4b19      	ldr	r3, [pc, #100]	@ (800841c <tcp_slowtmr+0x668>)
 80083b8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80083bc:	491c      	ldr	r1, [pc, #112]	@ (8008430 <tcp_slowtmr+0x67c>)
 80083be:	4819      	ldr	r0, [pc, #100]	@ (8008424 <tcp_slowtmr+0x670>)
 80083c0:	f009 f924 	bl	801160c <iprintf>
        prev->next = pcb->next;
 80083c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ca:	60da      	str	r2, [r3, #12]
 80083cc:	e00f      	b.n	80083ee <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80083ce:	4b17      	ldr	r3, [pc, #92]	@ (800842c <tcp_slowtmr+0x678>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d006      	beq.n	80083e6 <tcp_slowtmr+0x632>
 80083d8:	4b10      	ldr	r3, [pc, #64]	@ (800841c <tcp_slowtmr+0x668>)
 80083da:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80083de:	4915      	ldr	r1, [pc, #84]	@ (8008434 <tcp_slowtmr+0x680>)
 80083e0:	4810      	ldr	r0, [pc, #64]	@ (8008424 <tcp_slowtmr+0x670>)
 80083e2:	f009 f913 	bl	801160c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80083e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	4a10      	ldr	r2, [pc, #64]	@ (800842c <tcp_slowtmr+0x678>)
 80083ec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80083ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80083f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80083f8:	69f8      	ldr	r0, [r7, #28]
 80083fa:	f7fe ff83 	bl	8007304 <tcp_free>
 80083fe:	e004      	b.n	800840a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008402:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800840a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1a9      	bne.n	8008364 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008410:	bf00      	nop
 8008412:	bf00      	nop
 8008414:	3730      	adds	r7, #48	@ 0x30
 8008416:	46bd      	mov	sp, r7
 8008418:	bdb0      	pop	{r4, r5, r7, pc}
 800841a:	bf00      	nop
 800841c:	080132f0 	.word	0x080132f0
 8008420:	08013780 	.word	0x08013780
 8008424:	08013334 	.word	0x08013334
 8008428:	200083d8 	.word	0x200083d8
 800842c:	200083e8 	.word	0x200083e8
 8008430:	080137b0 	.word	0x080137b0
 8008434:	080137d8 	.word	0x080137d8

08008438 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800843e:	4b2d      	ldr	r3, [pc, #180]	@ (80084f4 <tcp_fasttmr+0xbc>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	3301      	adds	r3, #1
 8008444:	b2da      	uxtb	r2, r3
 8008446:	4b2b      	ldr	r3, [pc, #172]	@ (80084f4 <tcp_fasttmr+0xbc>)
 8008448:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800844a:	4b2b      	ldr	r3, [pc, #172]	@ (80084f8 <tcp_fasttmr+0xc0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008450:	e048      	b.n	80084e4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	7f9a      	ldrb	r2, [r3, #30]
 8008456:	4b27      	ldr	r3, [pc, #156]	@ (80084f4 <tcp_fasttmr+0xbc>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	429a      	cmp	r2, r3
 800845c:	d03f      	beq.n	80084de <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800845e:	4b25      	ldr	r3, [pc, #148]	@ (80084f4 <tcp_fasttmr+0xbc>)
 8008460:	781a      	ldrb	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	8b5b      	ldrh	r3, [r3, #26]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d010      	beq.n	8008494 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	8b5b      	ldrh	r3, [r3, #26]
 8008476:	f043 0302 	orr.w	r3, r3, #2
 800847a:	b29a      	uxth	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f003 ff63 	bl	800c34c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	8b5b      	ldrh	r3, [r3, #26]
 800848a:	f023 0303 	bic.w	r3, r3, #3
 800848e:	b29a      	uxth	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	8b5b      	ldrh	r3, [r3, #26]
 8008498:	f003 0308 	and.w	r3, r3, #8
 800849c:	2b00      	cmp	r3, #0
 800849e:	d009      	beq.n	80084b4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	8b5b      	ldrh	r3, [r3, #26]
 80084a4:	f023 0308 	bic.w	r3, r3, #8
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff f8bc 	bl	800762c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80084c2:	4b0e      	ldr	r3, [pc, #56]	@ (80084fc <tcp_fasttmr+0xc4>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f819 	bl	8008500 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80084ce:	4b0b      	ldr	r3, [pc, #44]	@ (80084fc <tcp_fasttmr+0xc4>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d000      	beq.n	80084d8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80084d6:	e7b8      	b.n	800844a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	607b      	str	r3, [r7, #4]
 80084dc:	e002      	b.n	80084e4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1b3      	bne.n	8008452 <tcp_fasttmr+0x1a>
    }
  }
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	200083ee 	.word	0x200083ee
 80084f8:	200083e4 	.word	0x200083e4
 80084fc:	200083ec 	.word	0x200083ec

08008500 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008500:	b590      	push	{r4, r7, lr}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <tcp_process_refused_data+0x22>
 800850e:	4b37      	ldr	r3, [pc, #220]	@ (80085ec <tcp_process_refused_data+0xec>)
 8008510:	f240 6209 	movw	r2, #1545	@ 0x609
 8008514:	4936      	ldr	r1, [pc, #216]	@ (80085f0 <tcp_process_refused_data+0xf0>)
 8008516:	4837      	ldr	r0, [pc, #220]	@ (80085f4 <tcp_process_refused_data+0xf4>)
 8008518:	f009 f878 	bl	801160c <iprintf>
 800851c:	f06f 030f 	mvn.w	r3, #15
 8008520:	e060      	b.n	80085e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008526:	7b5b      	ldrb	r3, [r3, #13]
 8008528:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800852e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <tcp_process_refused_data+0x58>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6918      	ldr	r0, [r3, #16]
 800854a:	2300      	movs	r3, #0
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	47a0      	blx	r4
 8008552:	4603      	mov	r3, r0
 8008554:	73fb      	strb	r3, [r7, #15]
 8008556:	e007      	b.n	8008568 <tcp_process_refused_data+0x68>
 8008558:	2300      	movs	r3, #0
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	2000      	movs	r0, #0
 8008560:	f000 f8a4 	bl	80086ac <tcp_recv_null>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d12a      	bne.n	80085c6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	f003 0320 	and.w	r3, r3, #32
 8008576:	2b00      	cmp	r3, #0
 8008578:	d033      	beq.n	80085e2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800857e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008582:	d005      	beq.n	8008590 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008588:	3301      	adds	r3, #1
 800858a:	b29a      	uxth	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00b      	beq.n	80085b2 <tcp_process_refused_data+0xb2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6918      	ldr	r0, [r3, #16]
 80085a4:	2300      	movs	r3, #0
 80085a6:	2200      	movs	r2, #0
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	47a0      	blx	r4
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]
 80085b0:	e001      	b.n	80085b6 <tcp_process_refused_data+0xb6>
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80085b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ba:	f113 0f0d 	cmn.w	r3, #13
 80085be:	d110      	bne.n	80085e2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80085c0:	f06f 030c 	mvn.w	r3, #12
 80085c4:	e00e      	b.n	80085e4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80085c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ca:	f113 0f0d 	cmn.w	r3, #13
 80085ce:	d102      	bne.n	80085d6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80085d0:	f06f 030c 	mvn.w	r3, #12
 80085d4:	e006      	b.n	80085e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80085dc:	f06f 0304 	mvn.w	r3, #4
 80085e0:	e000      	b.n	80085e4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd90      	pop	{r4, r7, pc}
 80085ec:	080132f0 	.word	0x080132f0
 80085f0:	08013800 	.word	0x08013800
 80085f4:	08013334 	.word	0x08013334

080085f8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008600:	e007      	b.n	8008612 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f80a 	bl	8008622 <tcp_seg_free>
    seg = next;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1f4      	bne.n	8008602 <tcp_segs_free+0xa>
  }
}
 8008618:	bf00      	nop
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00c      	beq.n	800864a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d004      	beq.n	8008642 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	4618      	mov	r0, r3
 800863e:	f7fe fbc1 	bl	8006dc4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	2003      	movs	r0, #3
 8008646:	f7fd fd47 	bl	80060d8 <memp_free>
  }
}
 800864a:	bf00      	nop
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d106      	bne.n	8008670 <tcp_seg_copy+0x1c>
 8008662:	4b0f      	ldr	r3, [pc, #60]	@ (80086a0 <tcp_seg_copy+0x4c>)
 8008664:	f240 6282 	movw	r2, #1666	@ 0x682
 8008668:	490e      	ldr	r1, [pc, #56]	@ (80086a4 <tcp_seg_copy+0x50>)
 800866a:	480f      	ldr	r0, [pc, #60]	@ (80086a8 <tcp_seg_copy+0x54>)
 800866c:	f008 ffce 	bl	801160c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008670:	2003      	movs	r0, #3
 8008672:	f7fd fcc1 	bl	8005ff8 <memp_malloc>
 8008676:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <tcp_seg_copy+0x2e>
    return NULL;
 800867e:	2300      	movs	r3, #0
 8008680:	e00a      	b.n	8008698 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008682:	2210      	movs	r2, #16
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f009 f8eb 	bl	8011862 <memcpy>
  pbuf_ref(cseg->p);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	4618      	mov	r0, r3
 8008692:	f7fe fc37 	bl	8006f04 <pbuf_ref>
  return cseg;
 8008696:	68fb      	ldr	r3, [r7, #12]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	080132f0 	.word	0x080132f0
 80086a4:	08013844 	.word	0x08013844
 80086a8:	08013334 	.word	0x08013334

080086ac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <tcp_recv_null+0x28>
 80086c0:	4b12      	ldr	r3, [pc, #72]	@ (800870c <tcp_recv_null+0x60>)
 80086c2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80086c6:	4912      	ldr	r1, [pc, #72]	@ (8008710 <tcp_recv_null+0x64>)
 80086c8:	4812      	ldr	r0, [pc, #72]	@ (8008714 <tcp_recv_null+0x68>)
 80086ca:	f008 ff9f 	bl	801160c <iprintf>
 80086ce:	f06f 030f 	mvn.w	r3, #15
 80086d2:	e016      	b.n	8008702 <tcp_recv_null+0x56>

  if (p != NULL) {
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	891b      	ldrh	r3, [r3, #8]
 80086de:	4619      	mov	r1, r3
 80086e0:	68b8      	ldr	r0, [r7, #8]
 80086e2:	f7ff fad1 	bl	8007c88 <tcp_recved>
    pbuf_free(p);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7fe fb6c 	bl	8006dc4 <pbuf_free>
 80086ec:	e008      	b.n	8008700 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80086ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d104      	bne.n	8008700 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80086f6:	68b8      	ldr	r0, [r7, #8]
 80086f8:	f7ff f802 	bl	8007700 <tcp_close>
 80086fc:	4603      	mov	r3, r0
 80086fe:	e000      	b.n	8008702 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	080132f0 	.word	0x080132f0
 8008710:	08013860 	.word	0x08013860
 8008714:	08013334 	.word	0x08013334

08008718 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008726:	2b00      	cmp	r3, #0
 8008728:	db01      	blt.n	800872e <tcp_kill_prio+0x16>
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	e000      	b.n	8008730 <tcp_kill_prio+0x18>
 800872e:	237f      	movs	r3, #127	@ 0x7f
 8008730:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008732:	7afb      	ldrb	r3, [r7, #11]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d034      	beq.n	80087a2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008738:	7afb      	ldrb	r3, [r7, #11]
 800873a:	3b01      	subs	r3, #1
 800873c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008746:	4b19      	ldr	r3, [pc, #100]	@ (80087ac <tcp_kill_prio+0x94>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	617b      	str	r3, [r7, #20]
 800874c:	e01f      	b.n	800878e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	7d5b      	ldrb	r3, [r3, #21]
 8008752:	7afa      	ldrb	r2, [r7, #11]
 8008754:	429a      	cmp	r2, r3
 8008756:	d80c      	bhi.n	8008772 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800875c:	7afa      	ldrb	r2, [r7, #11]
 800875e:	429a      	cmp	r2, r3
 8008760:	d112      	bne.n	8008788 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008762:	4b13      	ldr	r3, [pc, #76]	@ (80087b0 <tcp_kill_prio+0x98>)
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	429a      	cmp	r2, r3
 8008770:	d80a      	bhi.n	8008788 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008772:	4b0f      	ldr	r3, [pc, #60]	@ (80087b0 <tcp_kill_prio+0x98>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	7d5b      	ldrb	r3, [r3, #21]
 8008786:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1dc      	bne.n	800874e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d004      	beq.n	80087a4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800879a:	6938      	ldr	r0, [r7, #16]
 800879c:	f7ff f89a 	bl	80078d4 <tcp_abort>
 80087a0:	e000      	b.n	80087a4 <tcp_kill_prio+0x8c>
    return;
 80087a2:	bf00      	nop
  }
}
 80087a4:	3718      	adds	r7, #24
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200083e4 	.word	0x200083e4
 80087b0:	200083d8 	.word	0x200083d8

080087b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4603      	mov	r3, r0
 80087bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	2b08      	cmp	r3, #8
 80087c2:	d009      	beq.n	80087d8 <tcp_kill_state+0x24>
 80087c4:	79fb      	ldrb	r3, [r7, #7]
 80087c6:	2b09      	cmp	r3, #9
 80087c8:	d006      	beq.n	80087d8 <tcp_kill_state+0x24>
 80087ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008834 <tcp_kill_state+0x80>)
 80087cc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80087d0:	4919      	ldr	r1, [pc, #100]	@ (8008838 <tcp_kill_state+0x84>)
 80087d2:	481a      	ldr	r0, [pc, #104]	@ (800883c <tcp_kill_state+0x88>)
 80087d4:	f008 ff1a 	bl	801160c <iprintf>

  inactivity = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80087dc:	2300      	movs	r3, #0
 80087de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087e0:	4b17      	ldr	r3, [pc, #92]	@ (8008840 <tcp_kill_state+0x8c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	617b      	str	r3, [r7, #20]
 80087e6:	e017      	b.n	8008818 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	7d1b      	ldrb	r3, [r3, #20]
 80087ec:	79fa      	ldrb	r2, [r7, #7]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d10f      	bne.n	8008812 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80087f2:	4b14      	ldr	r3, [pc, #80]	@ (8008844 <tcp_kill_state+0x90>)
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d807      	bhi.n	8008812 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008802:	4b10      	ldr	r3, [pc, #64]	@ (8008844 <tcp_kill_state+0x90>)
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e4      	bne.n	80087e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008824:	2100      	movs	r1, #0
 8008826:	6938      	ldr	r0, [r7, #16]
 8008828:	f7fe ff96 	bl	8007758 <tcp_abandon>
  }
}
 800882c:	bf00      	nop
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	080132f0 	.word	0x080132f0
 8008838:	0801387c 	.word	0x0801387c
 800883c:	08013334 	.word	0x08013334
 8008840:	200083e4 	.word	0x200083e4
 8008844:	200083d8 	.word	0x200083d8

08008848 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008852:	2300      	movs	r3, #0
 8008854:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008856:	4b12      	ldr	r3, [pc, #72]	@ (80088a0 <tcp_kill_timewait+0x58>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	e012      	b.n	8008884 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800885e:	4b11      	ldr	r3, [pc, #68]	@ (80088a4 <tcp_kill_timewait+0x5c>)
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	429a      	cmp	r2, r3
 800886c:	d807      	bhi.n	800887e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800886e:	4b0d      	ldr	r3, [pc, #52]	@ (80088a4 <tcp_kill_timewait+0x5c>)
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1e9      	bne.n	800885e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008890:	68b8      	ldr	r0, [r7, #8]
 8008892:	f7ff f81f 	bl	80078d4 <tcp_abort>
  }
}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	200083e8 	.word	0x200083e8
 80088a4:	200083d8 	.word	0x200083d8

080088a8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80088ae:	4b10      	ldr	r3, [pc, #64]	@ (80088f0 <tcp_handle_closepend+0x48>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80088b4:	e014      	b.n	80088e0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	8b5b      	ldrh	r3, [r3, #26]
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d009      	beq.n	80088dc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	8b5b      	ldrh	r3, [r3, #26]
 80088cc:	f023 0308 	bic.w	r3, r3, #8
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fe fea8 	bl	800762c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1e7      	bne.n	80088b6 <tcp_handle_closepend+0xe>
  }
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	200083e4 	.word	0x200083e4

080088f4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80088fe:	2001      	movs	r0, #1
 8008900:	f7fd fb7a 	bl	8005ff8 <memp_malloc>
 8008904:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d126      	bne.n	800895a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800890c:	f7ff ffcc 	bl	80088a8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008910:	f7ff ff9a 	bl	8008848 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008914:	2001      	movs	r0, #1
 8008916:	f7fd fb6f 	bl	8005ff8 <memp_malloc>
 800891a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d11b      	bne.n	800895a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008922:	2009      	movs	r0, #9
 8008924:	f7ff ff46 	bl	80087b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008928:	2001      	movs	r0, #1
 800892a:	f7fd fb65 	bl	8005ff8 <memp_malloc>
 800892e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d111      	bne.n	800895a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008936:	2008      	movs	r0, #8
 8008938:	f7ff ff3c 	bl	80087b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800893c:	2001      	movs	r0, #1
 800893e:	f7fd fb5b 	bl	8005ff8 <memp_malloc>
 8008942:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d107      	bne.n	800895a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fee3 	bl	8008718 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008952:	2001      	movs	r0, #1
 8008954:	f7fd fb50 	bl	8005ff8 <memp_malloc>
 8008958:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d03f      	beq.n	80089e0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008960:	229c      	movs	r2, #156	@ 0x9c
 8008962:	2100      	movs	r1, #0
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f008 ff06 	bl	8011776 <memset>
    pcb->prio = prio;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	79fa      	ldrb	r2, [r7, #7]
 800896e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008976:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008980:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	22ff      	movs	r2, #255	@ 0xff
 800898e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8008996:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2206      	movs	r2, #6
 800899c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2206      	movs	r2, #6
 80089a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80089ac:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80089b6:	4b0d      	ldr	r3, [pc, #52]	@ (80089ec <tcp_alloc+0xf8>)
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80089be:	4b0c      	ldr	r3, [pc, #48]	@ (80089f0 <tcp_alloc+0xfc>)
 80089c0:	781a      	ldrb	r2, [r3, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80089cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4a08      	ldr	r2, [pc, #32]	@ (80089f4 <tcp_alloc+0x100>)
 80089d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4a07      	ldr	r2, [pc, #28]	@ (80089f8 <tcp_alloc+0x104>)
 80089dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80089e0:	68fb      	ldr	r3, [r7, #12]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	200083d8 	.word	0x200083d8
 80089f0:	200083ee 	.word	0x200083ee
 80089f4:	080086ad 	.word	0x080086ad
 80089f8:	006ddd00 	.word	0x006ddd00

080089fc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008a00:	2040      	movs	r0, #64	@ 0x40
 8008a02:	f7ff ff77 	bl	80088f4 <tcp_alloc>
 8008a06:	4603      	mov	r3, r0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00e      	beq.n	8008a3a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	7d1b      	ldrb	r3, [r3, #20]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d106      	bne.n	8008a32 <tcp_recv+0x26>
 8008a24:	4b07      	ldr	r3, [pc, #28]	@ (8008a44 <tcp_recv+0x38>)
 8008a26:	f240 72df 	movw	r2, #2015	@ 0x7df
 8008a2a:	4907      	ldr	r1, [pc, #28]	@ (8008a48 <tcp_recv+0x3c>)
 8008a2c:	4807      	ldr	r0, [pc, #28]	@ (8008a4c <tcp_recv+0x40>)
 8008a2e:	f008 fded 	bl	801160c <iprintf>
    pcb->recv = recv;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	080132f0 	.word	0x080132f0
 8008a48:	0801388c 	.word	0x0801388c
 8008a4c:	08013334 	.word	0x08013334

08008a50 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d008      	beq.n	8008a72 <tcp_accept+0x22>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	7d1b      	ldrb	r3, [r3, #20]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d104      	bne.n	8008a72 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	619a      	str	r2, [r3, #24]
  }
}
 8008a72:	bf00      	nop
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
	...

08008a80 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d107      	bne.n	8008a9e <tcp_pcb_purge+0x1e>
 8008a8e:	4b21      	ldr	r3, [pc, #132]	@ (8008b14 <tcp_pcb_purge+0x94>)
 8008a90:	f640 0251 	movw	r2, #2129	@ 0x851
 8008a94:	4920      	ldr	r1, [pc, #128]	@ (8008b18 <tcp_pcb_purge+0x98>)
 8008a96:	4821      	ldr	r0, [pc, #132]	@ (8008b1c <tcp_pcb_purge+0x9c>)
 8008a98:	f008 fdb8 	bl	801160c <iprintf>
 8008a9c:	e037      	b.n	8008b0e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7d1b      	ldrb	r3, [r3, #20]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d033      	beq.n	8008b0e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008aaa:	2b0a      	cmp	r3, #10
 8008aac:	d02f      	beq.n	8008b0e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d02b      	beq.n	8008b0e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d007      	beq.n	8008ace <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe f97e 	bl	8006dc4 <pbuf_free>
      pcb->refused_data = NULL;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f986 	bl	8008de8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ae2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fd85 	bl	80085f8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff fd80 	bl	80085f8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	080132f0 	.word	0x080132f0
 8008b18:	0801393c 	.word	0x0801393c
 8008b1c:	08013334 	.word	0x08013334

08008b20 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d106      	bne.n	8008b3e <tcp_pcb_remove+0x1e>
 8008b30:	4b3e      	ldr	r3, [pc, #248]	@ (8008c2c <tcp_pcb_remove+0x10c>)
 8008b32:	f640 0283 	movw	r2, #2179	@ 0x883
 8008b36:	493e      	ldr	r1, [pc, #248]	@ (8008c30 <tcp_pcb_remove+0x110>)
 8008b38:	483e      	ldr	r0, [pc, #248]	@ (8008c34 <tcp_pcb_remove+0x114>)
 8008b3a:	f008 fd67 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d106      	bne.n	8008b52 <tcp_pcb_remove+0x32>
 8008b44:	4b39      	ldr	r3, [pc, #228]	@ (8008c2c <tcp_pcb_remove+0x10c>)
 8008b46:	f640 0284 	movw	r2, #2180	@ 0x884
 8008b4a:	493b      	ldr	r1, [pc, #236]	@ (8008c38 <tcp_pcb_remove+0x118>)
 8008b4c:	4839      	ldr	r0, [pc, #228]	@ (8008c34 <tcp_pcb_remove+0x114>)
 8008b4e:	f008 fd5d 	bl	801160c <iprintf>

  TCP_RMV(pcblist, pcb);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d105      	bne.n	8008b68 <tcp_pcb_remove+0x48>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	e013      	b.n	8008b90 <tcp_pcb_remove+0x70>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	e00c      	b.n	8008b8a <tcp_pcb_remove+0x6a>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d104      	bne.n	8008b84 <tcp_pcb_remove+0x64>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	60da      	str	r2, [r3, #12]
 8008b82:	e005      	b.n	8008b90 <tcp_pcb_remove+0x70>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1ef      	bne.n	8008b70 <tcp_pcb_remove+0x50>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2200      	movs	r2, #0
 8008b94:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008b96:	6838      	ldr	r0, [r7, #0]
 8008b98:	f7ff ff72 	bl	8008a80 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	7d1b      	ldrb	r3, [r3, #20]
 8008ba0:	2b0a      	cmp	r3, #10
 8008ba2:	d013      	beq.n	8008bcc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d00f      	beq.n	8008bcc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	8b5b      	ldrh	r3, [r3, #26]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d009      	beq.n	8008bcc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	8b5b      	ldrh	r3, [r3, #26]
 8008bbc:	f043 0302 	orr.w	r3, r3, #2
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008bc6:	6838      	ldr	r0, [r7, #0]
 8008bc8:	f003 fbc0 	bl	800c34c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	7d1b      	ldrb	r3, [r3, #20]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d020      	beq.n	8008c16 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d006      	beq.n	8008bea <tcp_pcb_remove+0xca>
 8008bdc:	4b13      	ldr	r3, [pc, #76]	@ (8008c2c <tcp_pcb_remove+0x10c>)
 8008bde:	f640 0293 	movw	r2, #2195	@ 0x893
 8008be2:	4916      	ldr	r1, [pc, #88]	@ (8008c3c <tcp_pcb_remove+0x11c>)
 8008be4:	4813      	ldr	r0, [pc, #76]	@ (8008c34 <tcp_pcb_remove+0x114>)
 8008be6:	f008 fd11 	bl	801160c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d006      	beq.n	8008c00 <tcp_pcb_remove+0xe0>
 8008bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c2c <tcp_pcb_remove+0x10c>)
 8008bf4:	f640 0294 	movw	r2, #2196	@ 0x894
 8008bf8:	4911      	ldr	r1, [pc, #68]	@ (8008c40 <tcp_pcb_remove+0x120>)
 8008bfa:	480e      	ldr	r0, [pc, #56]	@ (8008c34 <tcp_pcb_remove+0x114>)
 8008bfc:	f008 fd06 	bl	801160c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d006      	beq.n	8008c16 <tcp_pcb_remove+0xf6>
 8008c08:	4b08      	ldr	r3, [pc, #32]	@ (8008c2c <tcp_pcb_remove+0x10c>)
 8008c0a:	f640 0296 	movw	r2, #2198	@ 0x896
 8008c0e:	490d      	ldr	r1, [pc, #52]	@ (8008c44 <tcp_pcb_remove+0x124>)
 8008c10:	4808      	ldr	r0, [pc, #32]	@ (8008c34 <tcp_pcb_remove+0x114>)
 8008c12:	f008 fcfb 	bl	801160c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008c22:	bf00      	nop
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	080132f0 	.word	0x080132f0
 8008c30:	08013958 	.word	0x08013958
 8008c34:	08013334 	.word	0x08013334
 8008c38:	08013974 	.word	0x08013974
 8008c3c:	08013994 	.word	0x08013994
 8008c40:	080139ac 	.word	0x080139ac
 8008c44:	080139c8 	.word	0x080139c8

08008c48 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d106      	bne.n	8008c64 <tcp_next_iss+0x1c>
 8008c56:	4b0a      	ldr	r3, [pc, #40]	@ (8008c80 <tcp_next_iss+0x38>)
 8008c58:	f640 02af 	movw	r2, #2223	@ 0x8af
 8008c5c:	4909      	ldr	r1, [pc, #36]	@ (8008c84 <tcp_next_iss+0x3c>)
 8008c5e:	480a      	ldr	r0, [pc, #40]	@ (8008c88 <tcp_next_iss+0x40>)
 8008c60:	f008 fcd4 	bl	801160c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008c64:	4b09      	ldr	r3, [pc, #36]	@ (8008c8c <tcp_next_iss+0x44>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	4b09      	ldr	r3, [pc, #36]	@ (8008c90 <tcp_next_iss+0x48>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	4a07      	ldr	r2, [pc, #28]	@ (8008c8c <tcp_next_iss+0x44>)
 8008c70:	6013      	str	r3, [r2, #0]
  return iss;
 8008c72:	4b06      	ldr	r3, [pc, #24]	@ (8008c8c <tcp_next_iss+0x44>)
 8008c74:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	080132f0 	.word	0x080132f0
 8008c84:	080139e0 	.word	0x080139e0
 8008c88:	08013334 	.word	0x08013334
 8008c8c:	20000024 	.word	0x20000024
 8008c90:	200083d8 	.word	0x200083d8

08008c94 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d106      	bne.n	8008cb6 <tcp_eff_send_mss_netif+0x22>
 8008ca8:	4b14      	ldr	r3, [pc, #80]	@ (8008cfc <tcp_eff_send_mss_netif+0x68>)
 8008caa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8008cae:	4914      	ldr	r1, [pc, #80]	@ (8008d00 <tcp_eff_send_mss_netif+0x6c>)
 8008cb0:	4814      	ldr	r0, [pc, #80]	@ (8008d04 <tcp_eff_send_mss_netif+0x70>)
 8008cb2:	f008 fcab 	bl	801160c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008cbc:	89fb      	ldrh	r3, [r7, #14]
 8008cbe:	e019      	b.n	8008cf4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008cc4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008cc6:	8afb      	ldrh	r3, [r7, #22]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d012      	beq.n	8008cf2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008ccc:	2328      	movs	r3, #40	@ 0x28
 8008cce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008cd0:	8afa      	ldrh	r2, [r7, #22]
 8008cd2:	8abb      	ldrh	r3, [r7, #20]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d904      	bls.n	8008ce2 <tcp_eff_send_mss_netif+0x4e>
 8008cd8:	8afa      	ldrh	r2, [r7, #22]
 8008cda:	8abb      	ldrh	r3, [r7, #20]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	e000      	b.n	8008ce4 <tcp_eff_send_mss_netif+0x50>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008ce6:	8a7a      	ldrh	r2, [r7, #18]
 8008ce8:	89fb      	ldrh	r3, [r7, #14]
 8008cea:	4293      	cmp	r3, r2
 8008cec:	bf28      	it	cs
 8008cee:	4613      	movcs	r3, r2
 8008cf0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008cf2:	89fb      	ldrh	r3, [r7, #14]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	080132f0 	.word	0x080132f0
 8008d00:	080139fc 	.word	0x080139fc
 8008d04:	08013334 	.word	0x08013334

08008d08 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d119      	bne.n	8008d50 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008d1c:	4b10      	ldr	r3, [pc, #64]	@ (8008d60 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008d1e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8008d22:	4910      	ldr	r1, [pc, #64]	@ (8008d64 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008d24:	4810      	ldr	r0, [pc, #64]	@ (8008d68 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008d26:	f008 fc71 	bl	801160c <iprintf>

  while (pcb != NULL) {
 8008d2a:	e011      	b.n	8008d50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d108      	bne.n	8008d4a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f7fe fdc8 	bl	80078d4 <tcp_abort>
      pcb = next;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	e002      	b.n	8008d50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1ea      	bne.n	8008d2c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	080132f0 	.word	0x080132f0
 8008d64:	08013a24 	.word	0x08013a24
 8008d68:	08013334 	.word	0x08013334

08008d6c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d02a      	beq.n	8008dd2 <tcp_netif_ip_addr_changed+0x66>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d026      	beq.n	8008dd2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008d84:	4b15      	ldr	r3, [pc, #84]	@ (8008ddc <tcp_netif_ip_addr_changed+0x70>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7ff ffbc 	bl	8008d08 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008d90:	4b13      	ldr	r3, [pc, #76]	@ (8008de0 <tcp_netif_ip_addr_changed+0x74>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff ffb6 	bl	8008d08 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d017      	beq.n	8008dd2 <tcp_netif_ip_addr_changed+0x66>
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d013      	beq.n	8008dd2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008daa:	4b0e      	ldr	r3, [pc, #56]	@ (8008de4 <tcp_netif_ip_addr_changed+0x78>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	e00c      	b.n	8008dcc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d103      	bne.n	8008dc6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1ef      	bne.n	8008db2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	200083e4 	.word	0x200083e4
 8008de0:	200083dc 	.word	0x200083dc
 8008de4:	200083e0 	.word	0x200083e0

08008de8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d007      	beq.n	8008e08 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7ff fbfb 	bl	80085f8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008e10:	b590      	push	{r4, r7, lr}
 8008e12:	b08d      	sub	sp, #52	@ 0x34
 8008e14:	af04      	add	r7, sp, #16
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d105      	bne.n	8008e2c <tcp_input+0x1c>
 8008e20:	4b9b      	ldr	r3, [pc, #620]	@ (8009090 <tcp_input+0x280>)
 8008e22:	2283      	movs	r2, #131	@ 0x83
 8008e24:	499b      	ldr	r1, [pc, #620]	@ (8009094 <tcp_input+0x284>)
 8008e26:	489c      	ldr	r0, [pc, #624]	@ (8009098 <tcp_input+0x288>)
 8008e28:	f008 fbf0 	bl	801160c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	4a9a      	ldr	r2, [pc, #616]	@ (800909c <tcp_input+0x28c>)
 8008e32:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	895b      	ldrh	r3, [r3, #10]
 8008e38:	2b13      	cmp	r3, #19
 8008e3a:	f240 83d1 	bls.w	80095e0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008e3e:	4b98      	ldr	r3, [pc, #608]	@ (80090a0 <tcp_input+0x290>)
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	4a97      	ldr	r2, [pc, #604]	@ (80090a0 <tcp_input+0x290>)
 8008e44:	6812      	ldr	r2, [r2, #0]
 8008e46:	4611      	mov	r1, r2
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f006 f869 	bl	800ef20 <ip4_addr_isbroadcast_u32>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f040 83c7 	bne.w	80095e4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008e56:	4b92      	ldr	r3, [pc, #584]	@ (80090a0 <tcp_input+0x290>)
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008e5e:	2be0      	cmp	r3, #224	@ 0xe0
 8008e60:	f000 83c0 	beq.w	80095e4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008e64:	4b8d      	ldr	r3, [pc, #564]	@ (800909c <tcp_input+0x28c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	899b      	ldrh	r3, [r3, #12]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fc fc4b 	bl	8005708 <lwip_htons>
 8008e72:	4603      	mov	r3, r0
 8008e74:	0b1b      	lsrs	r3, r3, #12
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008e7e:	7cbb      	ldrb	r3, [r7, #18]
 8008e80:	2b13      	cmp	r3, #19
 8008e82:	f240 83b1 	bls.w	80095e8 <tcp_input+0x7d8>
 8008e86:	7cbb      	ldrb	r3, [r7, #18]
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	891b      	ldrh	r3, [r3, #8]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	f200 83aa 	bhi.w	80095e8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008e94:	7cbb      	ldrb	r3, [r7, #18]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	3b14      	subs	r3, #20
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	4b81      	ldr	r3, [pc, #516]	@ (80090a4 <tcp_input+0x294>)
 8008e9e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008ea0:	4b81      	ldr	r3, [pc, #516]	@ (80090a8 <tcp_input+0x298>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	895a      	ldrh	r2, [r3, #10]
 8008eaa:	7cbb      	ldrb	r3, [r7, #18]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d309      	bcc.n	8008ec6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80090a4 <tcp_input+0x294>)
 8008eb4:	881a      	ldrh	r2, [r3, #0]
 8008eb6:	4b7d      	ldr	r3, [pc, #500]	@ (80090ac <tcp_input+0x29c>)
 8008eb8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008eba:	7cbb      	ldrb	r3, [r7, #18]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7fd fefa 	bl	8006cb8 <pbuf_remove_header>
 8008ec4:	e04e      	b.n	8008f64 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d105      	bne.n	8008eda <tcp_input+0xca>
 8008ece:	4b70      	ldr	r3, [pc, #448]	@ (8009090 <tcp_input+0x280>)
 8008ed0:	22c2      	movs	r2, #194	@ 0xc2
 8008ed2:	4977      	ldr	r1, [pc, #476]	@ (80090b0 <tcp_input+0x2a0>)
 8008ed4:	4870      	ldr	r0, [pc, #448]	@ (8009098 <tcp_input+0x288>)
 8008ed6:	f008 fb99 	bl	801160c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008eda:	2114      	movs	r1, #20
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7fd feeb 	bl	8006cb8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	895a      	ldrh	r2, [r3, #10]
 8008ee6:	4b71      	ldr	r3, [pc, #452]	@ (80090ac <tcp_input+0x29c>)
 8008ee8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008eea:	4b6e      	ldr	r3, [pc, #440]	@ (80090a4 <tcp_input+0x294>)
 8008eec:	881a      	ldrh	r2, [r3, #0]
 8008eee:	4b6f      	ldr	r3, [pc, #444]	@ (80090ac <tcp_input+0x29c>)
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80090ac <tcp_input+0x29c>)
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7fd fedb 	bl	8006cb8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	895b      	ldrh	r3, [r3, #10]
 8008f08:	8a3a      	ldrh	r2, [r7, #16]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	f200 836e 	bhi.w	80095ec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	4a64      	ldr	r2, [pc, #400]	@ (80090a8 <tcp_input+0x298>)
 8008f18:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	8a3a      	ldrh	r2, [r7, #16]
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fd fec8 	bl	8006cb8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	891a      	ldrh	r2, [r3, #8]
 8008f2c:	8a3b      	ldrh	r3, [r7, #16]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	895b      	ldrh	r3, [r3, #10]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <tcp_input+0x13a>
 8008f3e:	4b54      	ldr	r3, [pc, #336]	@ (8009090 <tcp_input+0x280>)
 8008f40:	22df      	movs	r2, #223	@ 0xdf
 8008f42:	495c      	ldr	r1, [pc, #368]	@ (80090b4 <tcp_input+0x2a4>)
 8008f44:	4854      	ldr	r0, [pc, #336]	@ (8009098 <tcp_input+0x288>)
 8008f46:	f008 fb61 	bl	801160c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	891a      	ldrh	r2, [r3, #8]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	891b      	ldrh	r3, [r3, #8]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d005      	beq.n	8008f64 <tcp_input+0x154>
 8008f58:	4b4d      	ldr	r3, [pc, #308]	@ (8009090 <tcp_input+0x280>)
 8008f5a:	22e0      	movs	r2, #224	@ 0xe0
 8008f5c:	4956      	ldr	r1, [pc, #344]	@ (80090b8 <tcp_input+0x2a8>)
 8008f5e:	484e      	ldr	r0, [pc, #312]	@ (8009098 <tcp_input+0x288>)
 8008f60:	f008 fb54 	bl	801160c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008f64:	4b4d      	ldr	r3, [pc, #308]	@ (800909c <tcp_input+0x28c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	4a4b      	ldr	r2, [pc, #300]	@ (800909c <tcp_input+0x28c>)
 8008f6e:	6814      	ldr	r4, [r2, #0]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fc fbc9 	bl	8005708 <lwip_htons>
 8008f76:	4603      	mov	r3, r0
 8008f78:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008f7a:	4b48      	ldr	r3, [pc, #288]	@ (800909c <tcp_input+0x28c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	885b      	ldrh	r3, [r3, #2]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	4a46      	ldr	r2, [pc, #280]	@ (800909c <tcp_input+0x28c>)
 8008f84:	6814      	ldr	r4, [r2, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fc fbbe 	bl	8005708 <lwip_htons>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008f90:	4b42      	ldr	r3, [pc, #264]	@ (800909c <tcp_input+0x28c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	4a41      	ldr	r2, [pc, #260]	@ (800909c <tcp_input+0x28c>)
 8008f98:	6814      	ldr	r4, [r2, #0]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fc fbca 	bl	8005734 <lwip_htonl>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	6063      	str	r3, [r4, #4]
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	4a45      	ldr	r2, [pc, #276]	@ (80090bc <tcp_input+0x2ac>)
 8008fa8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008faa:	4b3c      	ldr	r3, [pc, #240]	@ (800909c <tcp_input+0x28c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800909c <tcp_input+0x28c>)
 8008fb2:	6814      	ldr	r4, [r2, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fc fbbd 	bl	8005734 <lwip_htonl>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	60a3      	str	r3, [r4, #8]
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	4a3f      	ldr	r2, [pc, #252]	@ (80090c0 <tcp_input+0x2b0>)
 8008fc2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008fc4:	4b35      	ldr	r3, [pc, #212]	@ (800909c <tcp_input+0x28c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	89db      	ldrh	r3, [r3, #14]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	4a33      	ldr	r2, [pc, #204]	@ (800909c <tcp_input+0x28c>)
 8008fce:	6814      	ldr	r4, [r2, #0]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fc fb99 	bl	8005708 <lwip_htons>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008fda:	4b30      	ldr	r3, [pc, #192]	@ (800909c <tcp_input+0x28c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	899b      	ldrh	r3, [r3, #12]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fc fb90 	bl	8005708 <lwip_htons>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	4b34      	ldr	r3, [pc, #208]	@ (80090c4 <tcp_input+0x2b4>)
 8008ff4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	891a      	ldrh	r2, [r3, #8]
 8008ffa:	4b33      	ldr	r3, [pc, #204]	@ (80090c8 <tcp_input+0x2b8>)
 8008ffc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008ffe:	4b31      	ldr	r3, [pc, #196]	@ (80090c4 <tcp_input+0x2b4>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00c      	beq.n	8009024 <tcp_input+0x214>
    tcplen++;
 800900a:	4b2f      	ldr	r3, [pc, #188]	@ (80090c8 <tcp_input+0x2b8>)
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	3301      	adds	r3, #1
 8009010:	b29a      	uxth	r2, r3
 8009012:	4b2d      	ldr	r3, [pc, #180]	@ (80090c8 <tcp_input+0x2b8>)
 8009014:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	891a      	ldrh	r2, [r3, #8]
 800901a:	4b2b      	ldr	r3, [pc, #172]	@ (80090c8 <tcp_input+0x2b8>)
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	429a      	cmp	r2, r3
 8009020:	f200 82e6 	bhi.w	80095f0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009024:	2300      	movs	r3, #0
 8009026:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009028:	4b28      	ldr	r3, [pc, #160]	@ (80090cc <tcp_input+0x2bc>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	61fb      	str	r3, [r7, #28]
 800902e:	e09d      	b.n	800916c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	7d1b      	ldrb	r3, [r3, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d105      	bne.n	8009044 <tcp_input+0x234>
 8009038:	4b15      	ldr	r3, [pc, #84]	@ (8009090 <tcp_input+0x280>)
 800903a:	22fb      	movs	r2, #251	@ 0xfb
 800903c:	4924      	ldr	r1, [pc, #144]	@ (80090d0 <tcp_input+0x2c0>)
 800903e:	4816      	ldr	r0, [pc, #88]	@ (8009098 <tcp_input+0x288>)
 8009040:	f008 fae4 	bl	801160c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	7d1b      	ldrb	r3, [r3, #20]
 8009048:	2b0a      	cmp	r3, #10
 800904a:	d105      	bne.n	8009058 <tcp_input+0x248>
 800904c:	4b10      	ldr	r3, [pc, #64]	@ (8009090 <tcp_input+0x280>)
 800904e:	22fc      	movs	r2, #252	@ 0xfc
 8009050:	4920      	ldr	r1, [pc, #128]	@ (80090d4 <tcp_input+0x2c4>)
 8009052:	4811      	ldr	r0, [pc, #68]	@ (8009098 <tcp_input+0x288>)
 8009054:	f008 fada 	bl	801160c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	7d1b      	ldrb	r3, [r3, #20]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d105      	bne.n	800906c <tcp_input+0x25c>
 8009060:	4b0b      	ldr	r3, [pc, #44]	@ (8009090 <tcp_input+0x280>)
 8009062:	22fd      	movs	r2, #253	@ 0xfd
 8009064:	491c      	ldr	r1, [pc, #112]	@ (80090d8 <tcp_input+0x2c8>)
 8009066:	480c      	ldr	r0, [pc, #48]	@ (8009098 <tcp_input+0x288>)
 8009068:	f008 fad0 	bl	801160c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	7a1b      	ldrb	r3, [r3, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d033      	beq.n	80090dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	7a1a      	ldrb	r2, [r3, #8]
 8009078:	4b09      	ldr	r3, [pc, #36]	@ (80090a0 <tcp_input+0x290>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009080:	3301      	adds	r3, #1
 8009082:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009084:	429a      	cmp	r2, r3
 8009086:	d029      	beq.n	80090dc <tcp_input+0x2cc>
      prev = pcb;
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	61bb      	str	r3, [r7, #24]
      continue;
 800908c:	e06b      	b.n	8009166 <tcp_input+0x356>
 800908e:	bf00      	nop
 8009090:	08013a58 	.word	0x08013a58
 8009094:	08013a8c 	.word	0x08013a8c
 8009098:	08013aa4 	.word	0x08013aa4
 800909c:	20008400 	.word	0x20008400
 80090a0:	20004e68 	.word	0x20004e68
 80090a4:	20008404 	.word	0x20008404
 80090a8:	20008408 	.word	0x20008408
 80090ac:	20008406 	.word	0x20008406
 80090b0:	08013acc 	.word	0x08013acc
 80090b4:	08013adc 	.word	0x08013adc
 80090b8:	08013ae8 	.word	0x08013ae8
 80090bc:	20008410 	.word	0x20008410
 80090c0:	20008414 	.word	0x20008414
 80090c4:	2000841c 	.word	0x2000841c
 80090c8:	2000841a 	.word	0x2000841a
 80090cc:	200083e4 	.word	0x200083e4
 80090d0:	08013b08 	.word	0x08013b08
 80090d4:	08013b30 	.word	0x08013b30
 80090d8:	08013b5c 	.word	0x08013b5c
    }

    if (pcb->remote_port == tcphdr->src &&
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	8b1a      	ldrh	r2, [r3, #24]
 80090e0:	4b72      	ldr	r3, [pc, #456]	@ (80092ac <tcp_input+0x49c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d13a      	bne.n	8009162 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	8ada      	ldrh	r2, [r3, #22]
 80090f0:	4b6e      	ldr	r3, [pc, #440]	@ (80092ac <tcp_input+0x49c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	885b      	ldrh	r3, [r3, #2]
 80090f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d132      	bne.n	8009162 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	4b6b      	ldr	r3, [pc, #428]	@ (80092b0 <tcp_input+0x4a0>)
 8009102:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009104:	429a      	cmp	r2, r3
 8009106:	d12c      	bne.n	8009162 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	4b68      	ldr	r3, [pc, #416]	@ (80092b0 <tcp_input+0x4a0>)
 800910e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009110:	429a      	cmp	r2, r3
 8009112:	d126      	bne.n	8009162 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	429a      	cmp	r2, r3
 800911c:	d106      	bne.n	800912c <tcp_input+0x31c>
 800911e:	4b65      	ldr	r3, [pc, #404]	@ (80092b4 <tcp_input+0x4a4>)
 8009120:	f240 120d 	movw	r2, #269	@ 0x10d
 8009124:	4964      	ldr	r1, [pc, #400]	@ (80092b8 <tcp_input+0x4a8>)
 8009126:	4865      	ldr	r0, [pc, #404]	@ (80092bc <tcp_input+0x4ac>)
 8009128:	f008 fa70 	bl	801160c <iprintf>
      if (prev != NULL) {
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <tcp_input+0x338>
        prev->next = pcb->next;
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	68da      	ldr	r2, [r3, #12]
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800913a:	4b61      	ldr	r3, [pc, #388]	@ (80092c0 <tcp_input+0x4b0>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009142:	4a5f      	ldr	r2, [pc, #380]	@ (80092c0 <tcp_input+0x4b0>)
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	69fa      	ldr	r2, [r7, #28]
 800914e:	429a      	cmp	r2, r3
 8009150:	d111      	bne.n	8009176 <tcp_input+0x366>
 8009152:	4b58      	ldr	r3, [pc, #352]	@ (80092b4 <tcp_input+0x4a4>)
 8009154:	f240 1215 	movw	r2, #277	@ 0x115
 8009158:	495a      	ldr	r1, [pc, #360]	@ (80092c4 <tcp_input+0x4b4>)
 800915a:	4858      	ldr	r0, [pc, #352]	@ (80092bc <tcp_input+0x4ac>)
 800915c:	f008 fa56 	bl	801160c <iprintf>
      break;
 8009160:	e009      	b.n	8009176 <tcp_input+0x366>
    }
    prev = pcb;
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	61fb      	str	r3, [r7, #28]
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	2b00      	cmp	r3, #0
 8009170:	f47f af5e 	bne.w	8009030 <tcp_input+0x220>
 8009174:	e000      	b.n	8009178 <tcp_input+0x368>
      break;
 8009176:	bf00      	nop
  }

  if (pcb == NULL) {
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	2b00      	cmp	r3, #0
 800917c:	f040 80aa 	bne.w	80092d4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009180:	4b51      	ldr	r3, [pc, #324]	@ (80092c8 <tcp_input+0x4b8>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	61fb      	str	r3, [r7, #28]
 8009186:	e03f      	b.n	8009208 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	7d1b      	ldrb	r3, [r3, #20]
 800918c:	2b0a      	cmp	r3, #10
 800918e:	d006      	beq.n	800919e <tcp_input+0x38e>
 8009190:	4b48      	ldr	r3, [pc, #288]	@ (80092b4 <tcp_input+0x4a4>)
 8009192:	f240 121f 	movw	r2, #287	@ 0x11f
 8009196:	494d      	ldr	r1, [pc, #308]	@ (80092cc <tcp_input+0x4bc>)
 8009198:	4848      	ldr	r0, [pc, #288]	@ (80092bc <tcp_input+0x4ac>)
 800919a:	f008 fa37 	bl	801160c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	7a1b      	ldrb	r3, [r3, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d009      	beq.n	80091ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	7a1a      	ldrb	r2, [r3, #8]
 80091aa:	4b41      	ldr	r3, [pc, #260]	@ (80092b0 <tcp_input+0x4a0>)
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80091b2:	3301      	adds	r3, #1
 80091b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d122      	bne.n	8009200 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	8b1a      	ldrh	r2, [r3, #24]
 80091be:	4b3b      	ldr	r3, [pc, #236]	@ (80092ac <tcp_input+0x49c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d11b      	bne.n	8009202 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	8ada      	ldrh	r2, [r3, #22]
 80091ce:	4b37      	ldr	r3, [pc, #220]	@ (80092ac <tcp_input+0x49c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	885b      	ldrh	r3, [r3, #2]
 80091d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d113      	bne.n	8009202 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	4b34      	ldr	r3, [pc, #208]	@ (80092b0 <tcp_input+0x4a0>)
 80091e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d10d      	bne.n	8009202 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	4b31      	ldr	r3, [pc, #196]	@ (80092b0 <tcp_input+0x4a0>)
 80091ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d107      	bne.n	8009202 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80091f2:	69f8      	ldr	r0, [r7, #28]
 80091f4:	f000 fb56 	bl	80098a4 <tcp_timewait_input>
        }
        pbuf_free(p);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7fd fde3 	bl	8006dc4 <pbuf_free>
        return;
 80091fe:	e1fd      	b.n	80095fc <tcp_input+0x7ec>
        continue;
 8009200:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	61fb      	str	r3, [r7, #28]
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1bc      	bne.n	8009188 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800920e:	2300      	movs	r3, #0
 8009210:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009212:	4b2f      	ldr	r3, [pc, #188]	@ (80092d0 <tcp_input+0x4c0>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	e02a      	b.n	8009270 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	7a1b      	ldrb	r3, [r3, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00c      	beq.n	800923c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	7a1a      	ldrb	r2, [r3, #8]
 8009226:	4b22      	ldr	r3, [pc, #136]	@ (80092b0 <tcp_input+0x4a0>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800922e:	3301      	adds	r3, #1
 8009230:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009232:	429a      	cmp	r2, r3
 8009234:	d002      	beq.n	800923c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	61bb      	str	r3, [r7, #24]
        continue;
 800923a:	e016      	b.n	800926a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	8ada      	ldrh	r2, [r3, #22]
 8009240:	4b1a      	ldr	r3, [pc, #104]	@ (80092ac <tcp_input+0x49c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	885b      	ldrh	r3, [r3, #2]
 8009246:	b29b      	uxth	r3, r3
 8009248:	429a      	cmp	r2, r3
 800924a:	d10c      	bne.n	8009266 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	4b17      	ldr	r3, [pc, #92]	@ (80092b0 <tcp_input+0x4a0>)
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	429a      	cmp	r2, r3
 8009256:	d00f      	beq.n	8009278 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00d      	beq.n	800927a <tcp_input+0x46a>
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d009      	beq.n	800927a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1d1      	bne.n	800921a <tcp_input+0x40a>
 8009276:	e000      	b.n	800927a <tcp_input+0x46a>
            break;
 8009278:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d029      	beq.n	80092d4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800928e:	4b10      	ldr	r3, [pc, #64]	@ (80092d0 <tcp_input+0x4c0>)
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009296:	4a0e      	ldr	r2, [pc, #56]	@ (80092d0 <tcp_input+0x4c0>)
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800929c:	6978      	ldr	r0, [r7, #20]
 800929e:	f000 fa03 	bl	80096a8 <tcp_listen_input>
      }
      pbuf_free(p);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7fd fd8e 	bl	8006dc4 <pbuf_free>
      return;
 80092a8:	e1a8      	b.n	80095fc <tcp_input+0x7ec>
 80092aa:	bf00      	nop
 80092ac:	20008400 	.word	0x20008400
 80092b0:	20004e68 	.word	0x20004e68
 80092b4:	08013a58 	.word	0x08013a58
 80092b8:	08013b84 	.word	0x08013b84
 80092bc:	08013aa4 	.word	0x08013aa4
 80092c0:	200083e4 	.word	0x200083e4
 80092c4:	08013bb0 	.word	0x08013bb0
 80092c8:	200083e8 	.word	0x200083e8
 80092cc:	08013bdc 	.word	0x08013bdc
 80092d0:	200083e0 	.word	0x200083e0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f000 8158 	beq.w	800958c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80092dc:	4b95      	ldr	r3, [pc, #596]	@ (8009534 <tcp_input+0x724>)
 80092de:	2200      	movs	r2, #0
 80092e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	891a      	ldrh	r2, [r3, #8]
 80092e6:	4b93      	ldr	r3, [pc, #588]	@ (8009534 <tcp_input+0x724>)
 80092e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80092ea:	4a92      	ldr	r2, [pc, #584]	@ (8009534 <tcp_input+0x724>)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80092f0:	4b91      	ldr	r3, [pc, #580]	@ (8009538 <tcp_input+0x728>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a8f      	ldr	r2, [pc, #572]	@ (8009534 <tcp_input+0x724>)
 80092f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80092f8:	4b90      	ldr	r3, [pc, #576]	@ (800953c <tcp_input+0x72c>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80092fe:	4b90      	ldr	r3, [pc, #576]	@ (8009540 <tcp_input+0x730>)
 8009300:	2200      	movs	r2, #0
 8009302:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009304:	4b8f      	ldr	r3, [pc, #572]	@ (8009544 <tcp_input+0x734>)
 8009306:	2200      	movs	r2, #0
 8009308:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800930a:	4b8f      	ldr	r3, [pc, #572]	@ (8009548 <tcp_input+0x738>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d006      	beq.n	8009324 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	7b5b      	ldrb	r3, [r3, #13]
 800931a:	f043 0301 	orr.w	r3, r3, #1
 800931e:	b2da      	uxtb	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009328:	2b00      	cmp	r3, #0
 800932a:	d017      	beq.n	800935c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800932c:	69f8      	ldr	r0, [r7, #28]
 800932e:	f7ff f8e7 	bl	8008500 <tcp_process_refused_data>
 8009332:	4603      	mov	r3, r0
 8009334:	f113 0f0d 	cmn.w	r3, #13
 8009338:	d007      	beq.n	800934a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00c      	beq.n	800935c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009342:	4b82      	ldr	r3, [pc, #520]	@ (800954c <tcp_input+0x73c>)
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d008      	beq.n	800935c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800934e:	2b00      	cmp	r3, #0
 8009350:	f040 80e3 	bne.w	800951a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009354:	69f8      	ldr	r0, [r7, #28]
 8009356:	f003 fdff 	bl	800cf58 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800935a:	e0de      	b.n	800951a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800935c:	4a7c      	ldr	r2, [pc, #496]	@ (8009550 <tcp_input+0x740>)
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009362:	69f8      	ldr	r0, [r7, #28]
 8009364:	f000 fb18 	bl	8009998 <tcp_process>
 8009368:	4603      	mov	r3, r0
 800936a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800936c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009370:	f113 0f0d 	cmn.w	r3, #13
 8009374:	f000 80d3 	beq.w	800951e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009378:	4b71      	ldr	r3, [pc, #452]	@ (8009540 <tcp_input+0x730>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 0308 	and.w	r3, r3, #8
 8009380:	2b00      	cmp	r3, #0
 8009382:	d015      	beq.n	80093b0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800938a:	2b00      	cmp	r3, #0
 800938c:	d008      	beq.n	80093a0 <tcp_input+0x590>
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009394:	69fa      	ldr	r2, [r7, #28]
 8009396:	6912      	ldr	r2, [r2, #16]
 8009398:	f06f 010d 	mvn.w	r1, #13
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80093a0:	69f9      	ldr	r1, [r7, #28]
 80093a2:	486c      	ldr	r0, [pc, #432]	@ (8009554 <tcp_input+0x744>)
 80093a4:	f7ff fbbc 	bl	8008b20 <tcp_pcb_remove>
        tcp_free(pcb);
 80093a8:	69f8      	ldr	r0, [r7, #28]
 80093aa:	f7fd ffab 	bl	8007304 <tcp_free>
 80093ae:	e0da      	b.n	8009566 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80093b4:	4b63      	ldr	r3, [pc, #396]	@ (8009544 <tcp_input+0x734>)
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d01d      	beq.n	80093f8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80093bc:	4b61      	ldr	r3, [pc, #388]	@ (8009544 <tcp_input+0x734>)
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00a      	beq.n	80093e2 <tcp_input+0x5d2>
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093d2:	69fa      	ldr	r2, [r7, #28]
 80093d4:	6910      	ldr	r0, [r2, #16]
 80093d6:	89fa      	ldrh	r2, [r7, #14]
 80093d8:	69f9      	ldr	r1, [r7, #28]
 80093da:	4798      	blx	r3
 80093dc:	4603      	mov	r3, r0
 80093de:	74fb      	strb	r3, [r7, #19]
 80093e0:	e001      	b.n	80093e6 <tcp_input+0x5d6>
 80093e2:	2300      	movs	r3, #0
 80093e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80093e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093ea:	f113 0f0d 	cmn.w	r3, #13
 80093ee:	f000 8098 	beq.w	8009522 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80093f2:	4b54      	ldr	r3, [pc, #336]	@ (8009544 <tcp_input+0x734>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80093f8:	69f8      	ldr	r0, [r7, #28]
 80093fa:	f000 f915 	bl	8009628 <tcp_input_delayed_close>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	f040 8090 	bne.w	8009526 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009406:	4b4d      	ldr	r3, [pc, #308]	@ (800953c <tcp_input+0x72c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d041      	beq.n	8009492 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009412:	2b00      	cmp	r3, #0
 8009414:	d006      	beq.n	8009424 <tcp_input+0x614>
 8009416:	4b50      	ldr	r3, [pc, #320]	@ (8009558 <tcp_input+0x748>)
 8009418:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800941c:	494f      	ldr	r1, [pc, #316]	@ (800955c <tcp_input+0x74c>)
 800941e:	4850      	ldr	r0, [pc, #320]	@ (8009560 <tcp_input+0x750>)
 8009420:	f008 f8f4 	bl	801160c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	8b5b      	ldrh	r3, [r3, #26]
 8009428:	f003 0310 	and.w	r3, r3, #16
 800942c:	2b00      	cmp	r3, #0
 800942e:	d008      	beq.n	8009442 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009430:	4b42      	ldr	r3, [pc, #264]	@ (800953c <tcp_input+0x72c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4618      	mov	r0, r3
 8009436:	f7fd fcc5 	bl	8006dc4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800943a:	69f8      	ldr	r0, [r7, #28]
 800943c:	f7fe fa4a 	bl	80078d4 <tcp_abort>
            goto aborted;
 8009440:	e091      	b.n	8009566 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00c      	beq.n	8009466 <tcp_input+0x656>
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	6918      	ldr	r0, [r3, #16]
 8009456:	4b39      	ldr	r3, [pc, #228]	@ (800953c <tcp_input+0x72c>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	2300      	movs	r3, #0
 800945c:	69f9      	ldr	r1, [r7, #28]
 800945e:	47a0      	blx	r4
 8009460:	4603      	mov	r3, r0
 8009462:	74fb      	strb	r3, [r7, #19]
 8009464:	e008      	b.n	8009478 <tcp_input+0x668>
 8009466:	4b35      	ldr	r3, [pc, #212]	@ (800953c <tcp_input+0x72c>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	2300      	movs	r3, #0
 800946c:	69f9      	ldr	r1, [r7, #28]
 800946e:	2000      	movs	r0, #0
 8009470:	f7ff f91c 	bl	80086ac <tcp_recv_null>
 8009474:	4603      	mov	r3, r0
 8009476:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009478:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800947c:	f113 0f0d 	cmn.w	r3, #13
 8009480:	d053      	beq.n	800952a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009482:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800948a:	4b2c      	ldr	r3, [pc, #176]	@ (800953c <tcp_input+0x72c>)
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009492:	4b2b      	ldr	r3, [pc, #172]	@ (8009540 <tcp_input+0x730>)
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d030      	beq.n	8009500 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d009      	beq.n	80094ba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094aa:	7b5a      	ldrb	r2, [r3, #13]
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094b0:	f042 0220 	orr.w	r2, r2, #32
 80094b4:	b2d2      	uxtb	r2, r2
 80094b6:	735a      	strb	r2, [r3, #13]
 80094b8:	e022      	b.n	8009500 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094be:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80094c2:	d005      	beq.n	80094d0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094c8:	3301      	adds	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00b      	beq.n	80094f2 <tcp_input+0x6e2>
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	6918      	ldr	r0, [r3, #16]
 80094e4:	2300      	movs	r3, #0
 80094e6:	2200      	movs	r2, #0
 80094e8:	69f9      	ldr	r1, [r7, #28]
 80094ea:	47a0      	blx	r4
 80094ec:	4603      	mov	r3, r0
 80094ee:	74fb      	strb	r3, [r7, #19]
 80094f0:	e001      	b.n	80094f6 <tcp_input+0x6e6>
 80094f2:	2300      	movs	r3, #0
 80094f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80094f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094fa:	f113 0f0d 	cmn.w	r3, #13
 80094fe:	d016      	beq.n	800952e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009500:	4b13      	ldr	r3, [pc, #76]	@ (8009550 <tcp_input+0x740>)
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009506:	69f8      	ldr	r0, [r7, #28]
 8009508:	f000 f88e 	bl	8009628 <tcp_input_delayed_close>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d128      	bne.n	8009564 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009512:	69f8      	ldr	r0, [r7, #28]
 8009514:	f002 ff1a 	bl	800c34c <tcp_output>
 8009518:	e025      	b.n	8009566 <tcp_input+0x756>
        goto aborted;
 800951a:	bf00      	nop
 800951c:	e023      	b.n	8009566 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800951e:	bf00      	nop
 8009520:	e021      	b.n	8009566 <tcp_input+0x756>
              goto aborted;
 8009522:	bf00      	nop
 8009524:	e01f      	b.n	8009566 <tcp_input+0x756>
          goto aborted;
 8009526:	bf00      	nop
 8009528:	e01d      	b.n	8009566 <tcp_input+0x756>
            goto aborted;
 800952a:	bf00      	nop
 800952c:	e01b      	b.n	8009566 <tcp_input+0x756>
              goto aborted;
 800952e:	bf00      	nop
 8009530:	e019      	b.n	8009566 <tcp_input+0x756>
 8009532:	bf00      	nop
 8009534:	200083f0 	.word	0x200083f0
 8009538:	20008400 	.word	0x20008400
 800953c:	20008420 	.word	0x20008420
 8009540:	2000841d 	.word	0x2000841d
 8009544:	20008418 	.word	0x20008418
 8009548:	2000841c 	.word	0x2000841c
 800954c:	2000841a 	.word	0x2000841a
 8009550:	20008424 	.word	0x20008424
 8009554:	200083e4 	.word	0x200083e4
 8009558:	08013a58 	.word	0x08013a58
 800955c:	08013c0c 	.word	0x08013c0c
 8009560:	08013aa4 	.word	0x08013aa4
          goto aborted;
 8009564:	bf00      	nop
    tcp_input_pcb = NULL;
 8009566:	4b27      	ldr	r3, [pc, #156]	@ (8009604 <tcp_input+0x7f4>)
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800956c:	4b26      	ldr	r3, [pc, #152]	@ (8009608 <tcp_input+0x7f8>)
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009572:	4b26      	ldr	r3, [pc, #152]	@ (800960c <tcp_input+0x7fc>)
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d03f      	beq.n	80095fa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800957a:	4b24      	ldr	r3, [pc, #144]	@ (800960c <tcp_input+0x7fc>)
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	4618      	mov	r0, r3
 8009580:	f7fd fc20 	bl	8006dc4 <pbuf_free>
      inseg.p = NULL;
 8009584:	4b21      	ldr	r3, [pc, #132]	@ (800960c <tcp_input+0x7fc>)
 8009586:	2200      	movs	r2, #0
 8009588:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800958a:	e036      	b.n	80095fa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800958c:	4b20      	ldr	r3, [pc, #128]	@ (8009610 <tcp_input+0x800>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	899b      	ldrh	r3, [r3, #12]
 8009592:	b29b      	uxth	r3, r3
 8009594:	4618      	mov	r0, r3
 8009596:	f7fc f8b7 	bl	8005708 <lwip_htons>
 800959a:	4603      	mov	r3, r0
 800959c:	b2db      	uxtb	r3, r3
 800959e:	f003 0304 	and.w	r3, r3, #4
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d118      	bne.n	80095d8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095a6:	4b1b      	ldr	r3, [pc, #108]	@ (8009614 <tcp_input+0x804>)
 80095a8:	6819      	ldr	r1, [r3, #0]
 80095aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009618 <tcp_input+0x808>)
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	4b1a      	ldr	r3, [pc, #104]	@ (800961c <tcp_input+0x80c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095b6:	4b16      	ldr	r3, [pc, #88]	@ (8009610 <tcp_input+0x800>)
 80095b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095ba:	885b      	ldrh	r3, [r3, #2]
 80095bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095be:	4a14      	ldr	r2, [pc, #80]	@ (8009610 <tcp_input+0x800>)
 80095c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095c2:	8812      	ldrh	r2, [r2, #0]
 80095c4:	b292      	uxth	r2, r2
 80095c6:	9202      	str	r2, [sp, #8]
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	4b15      	ldr	r3, [pc, #84]	@ (8009620 <tcp_input+0x810>)
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	4b15      	ldr	r3, [pc, #84]	@ (8009624 <tcp_input+0x814>)
 80095d0:	4602      	mov	r2, r0
 80095d2:	2000      	movs	r0, #0
 80095d4:	f003 fc6e 	bl	800ceb4 <tcp_rst>
    pbuf_free(p);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7fd fbf3 	bl	8006dc4 <pbuf_free>
  return;
 80095de:	e00c      	b.n	80095fa <tcp_input+0x7ea>
    goto dropped;
 80095e0:	bf00      	nop
 80095e2:	e006      	b.n	80095f2 <tcp_input+0x7e2>
    goto dropped;
 80095e4:	bf00      	nop
 80095e6:	e004      	b.n	80095f2 <tcp_input+0x7e2>
    goto dropped;
 80095e8:	bf00      	nop
 80095ea:	e002      	b.n	80095f2 <tcp_input+0x7e2>
      goto dropped;
 80095ec:	bf00      	nop
 80095ee:	e000      	b.n	80095f2 <tcp_input+0x7e2>
      goto dropped;
 80095f0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7fd fbe6 	bl	8006dc4 <pbuf_free>
 80095f8:	e000      	b.n	80095fc <tcp_input+0x7ec>
  return;
 80095fa:	bf00      	nop
}
 80095fc:	3724      	adds	r7, #36	@ 0x24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd90      	pop	{r4, r7, pc}
 8009602:	bf00      	nop
 8009604:	20008424 	.word	0x20008424
 8009608:	20008420 	.word	0x20008420
 800960c:	200083f0 	.word	0x200083f0
 8009610:	20008400 	.word	0x20008400
 8009614:	20008414 	.word	0x20008414
 8009618:	2000841a 	.word	0x2000841a
 800961c:	20008410 	.word	0x20008410
 8009620:	20004e78 	.word	0x20004e78
 8009624:	20004e7c 	.word	0x20004e7c

08009628 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d106      	bne.n	8009644 <tcp_input_delayed_close+0x1c>
 8009636:	4b17      	ldr	r3, [pc, #92]	@ (8009694 <tcp_input_delayed_close+0x6c>)
 8009638:	f240 225a 	movw	r2, #602	@ 0x25a
 800963c:	4916      	ldr	r1, [pc, #88]	@ (8009698 <tcp_input_delayed_close+0x70>)
 800963e:	4817      	ldr	r0, [pc, #92]	@ (800969c <tcp_input_delayed_close+0x74>)
 8009640:	f007 ffe4 	bl	801160c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009644:	4b16      	ldr	r3, [pc, #88]	@ (80096a0 <tcp_input_delayed_close+0x78>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	f003 0310 	and.w	r3, r3, #16
 800964c:	2b00      	cmp	r3, #0
 800964e:	d01c      	beq.n	800968a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	8b5b      	ldrh	r3, [r3, #26]
 8009654:	f003 0310 	and.w	r3, r3, #16
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10d      	bne.n	8009678 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009662:	2b00      	cmp	r3, #0
 8009664:	d008      	beq.n	8009678 <tcp_input_delayed_close+0x50>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	6912      	ldr	r2, [r2, #16]
 8009670:	f06f 010e 	mvn.w	r1, #14
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	480a      	ldr	r0, [pc, #40]	@ (80096a4 <tcp_input_delayed_close+0x7c>)
 800967c:	f7ff fa50 	bl	8008b20 <tcp_pcb_remove>
    tcp_free(pcb);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fd fe3f 	bl	8007304 <tcp_free>
    return 1;
 8009686:	2301      	movs	r3, #1
 8009688:	e000      	b.n	800968c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	08013a58 	.word	0x08013a58
 8009698:	08013c28 	.word	0x08013c28
 800969c:	08013aa4 	.word	0x08013aa4
 80096a0:	2000841d 	.word	0x2000841d
 80096a4:	200083e4 	.word	0x200083e4

080096a8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80096a8:	b590      	push	{r4, r7, lr}
 80096aa:	b08b      	sub	sp, #44	@ 0x2c
 80096ac:	af04      	add	r7, sp, #16
 80096ae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80096b0:	4b6f      	ldr	r3, [pc, #444]	@ (8009870 <tcp_listen_input+0x1c8>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f040 80d2 	bne.w	8009862 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d106      	bne.n	80096d2 <tcp_listen_input+0x2a>
 80096c4:	4b6b      	ldr	r3, [pc, #428]	@ (8009874 <tcp_listen_input+0x1cc>)
 80096c6:	f240 2281 	movw	r2, #641	@ 0x281
 80096ca:	496b      	ldr	r1, [pc, #428]	@ (8009878 <tcp_listen_input+0x1d0>)
 80096cc:	486b      	ldr	r0, [pc, #428]	@ (800987c <tcp_listen_input+0x1d4>)
 80096ce:	f007 ff9d 	bl	801160c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80096d2:	4b67      	ldr	r3, [pc, #412]	@ (8009870 <tcp_listen_input+0x1c8>)
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	f003 0310 	and.w	r3, r3, #16
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d019      	beq.n	8009712 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096de:	4b68      	ldr	r3, [pc, #416]	@ (8009880 <tcp_listen_input+0x1d8>)
 80096e0:	6819      	ldr	r1, [r3, #0]
 80096e2:	4b68      	ldr	r3, [pc, #416]	@ (8009884 <tcp_listen_input+0x1dc>)
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	4b67      	ldr	r3, [pc, #412]	@ (8009888 <tcp_listen_input+0x1e0>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096ee:	4b67      	ldr	r3, [pc, #412]	@ (800988c <tcp_listen_input+0x1e4>)
 80096f0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096f2:	885b      	ldrh	r3, [r3, #2]
 80096f4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096f6:	4a65      	ldr	r2, [pc, #404]	@ (800988c <tcp_listen_input+0x1e4>)
 80096f8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096fa:	8812      	ldrh	r2, [r2, #0]
 80096fc:	b292      	uxth	r2, r2
 80096fe:	9202      	str	r2, [sp, #8]
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	4b63      	ldr	r3, [pc, #396]	@ (8009890 <tcp_listen_input+0x1e8>)
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	4b63      	ldr	r3, [pc, #396]	@ (8009894 <tcp_listen_input+0x1ec>)
 8009708:	4602      	mov	r2, r0
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f003 fbd2 	bl	800ceb4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009710:	e0a9      	b.n	8009866 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009712:	4b57      	ldr	r3, [pc, #348]	@ (8009870 <tcp_listen_input+0x1c8>)
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	f003 0302 	and.w	r3, r3, #2
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 80a3 	beq.w	8009866 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	7d5b      	ldrb	r3, [r3, #21]
 8009724:	4618      	mov	r0, r3
 8009726:	f7ff f8e5 	bl	80088f4 <tcp_alloc>
 800972a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d111      	bne.n	8009756 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00a      	beq.n	8009750 <tcp_listen_input+0xa8>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	6910      	ldr	r0, [r2, #16]
 8009742:	f04f 32ff 	mov.w	r2, #4294967295
 8009746:	2100      	movs	r1, #0
 8009748:	4798      	blx	r3
 800974a:	4603      	mov	r3, r0
 800974c:	73bb      	strb	r3, [r7, #14]
      return;
 800974e:	e08b      	b.n	8009868 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009750:	23f0      	movs	r3, #240	@ 0xf0
 8009752:	73bb      	strb	r3, [r7, #14]
      return;
 8009754:	e088      	b.n	8009868 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009756:	4b50      	ldr	r3, [pc, #320]	@ (8009898 <tcp_listen_input+0x1f0>)
 8009758:	695a      	ldr	r2, [r3, #20]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800975e:	4b4e      	ldr	r3, [pc, #312]	@ (8009898 <tcp_listen_input+0x1f0>)
 8009760:	691a      	ldr	r2, [r3, #16]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	8ada      	ldrh	r2, [r3, #22]
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800976e:	4b47      	ldr	r3, [pc, #284]	@ (800988c <tcp_listen_input+0x1e4>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	b29a      	uxth	r2, r3
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2203      	movs	r2, #3
 800977e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009780:	4b41      	ldr	r3, [pc, #260]	@ (8009888 <tcp_listen_input+0x1e0>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8009792:	6978      	ldr	r0, [r7, #20]
 8009794:	f7ff fa58 	bl	8008c48 <tcp_next_iss>
 8009798:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80097b2:	4b35      	ldr	r3, [pc, #212]	@ (8009888 <tcp_listen_input+0x1e0>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	1e5a      	subs	r2, r3, #1
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	7a5b      	ldrb	r3, [r3, #9]
 80097ce:	f003 030c 	and.w	r3, r3, #12
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	7a1a      	ldrb	r2, [r3, #8]
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80097e0:	4b2e      	ldr	r3, [pc, #184]	@ (800989c <tcp_listen_input+0x1f4>)
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	60da      	str	r2, [r3, #12]
 80097e8:	4a2c      	ldr	r2, [pc, #176]	@ (800989c <tcp_listen_input+0x1f4>)
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	f003 fd23 	bl	800d238 <tcp_timer_needed>
 80097f2:	4b2b      	ldr	r3, [pc, #172]	@ (80098a0 <tcp_listen_input+0x1f8>)
 80097f4:	2201      	movs	r2, #1
 80097f6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80097f8:	6978      	ldr	r0, [r7, #20]
 80097fa:	f001 fd8b 	bl	800b314 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80097fe:	4b23      	ldr	r3, [pc, #140]	@ (800988c <tcp_listen_input+0x1e4>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	89db      	ldrh	r3, [r3, #14]
 8009804:	b29a      	uxth	r2, r3
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	3304      	adds	r3, #4
 8009820:	4618      	mov	r0, r3
 8009822:	f005 f8e7 	bl	800e9f4 <ip4_route>
 8009826:	4601      	mov	r1, r0
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	3304      	adds	r3, #4
 800982c:	461a      	mov	r2, r3
 800982e:	4620      	mov	r0, r4
 8009830:	f7ff fa30 	bl	8008c94 <tcp_eff_send_mss_netif>
 8009834:	4603      	mov	r3, r0
 8009836:	461a      	mov	r2, r3
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800983c:	2112      	movs	r1, #18
 800983e:	6978      	ldr	r0, [r7, #20]
 8009840:	f002 fc96 	bl	800c170 <tcp_enqueue_flags>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d004      	beq.n	800985a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009850:	2100      	movs	r1, #0
 8009852:	6978      	ldr	r0, [r7, #20]
 8009854:	f7fd ff80 	bl	8007758 <tcp_abandon>
      return;
 8009858:	e006      	b.n	8009868 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800985a:	6978      	ldr	r0, [r7, #20]
 800985c:	f002 fd76 	bl	800c34c <tcp_output>
  return;
 8009860:	e001      	b.n	8009866 <tcp_listen_input+0x1be>
    return;
 8009862:	bf00      	nop
 8009864:	e000      	b.n	8009868 <tcp_listen_input+0x1c0>
  return;
 8009866:	bf00      	nop
}
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	bd90      	pop	{r4, r7, pc}
 800986e:	bf00      	nop
 8009870:	2000841c 	.word	0x2000841c
 8009874:	08013a58 	.word	0x08013a58
 8009878:	08013c50 	.word	0x08013c50
 800987c:	08013aa4 	.word	0x08013aa4
 8009880:	20008414 	.word	0x20008414
 8009884:	2000841a 	.word	0x2000841a
 8009888:	20008410 	.word	0x20008410
 800988c:	20008400 	.word	0x20008400
 8009890:	20004e78 	.word	0x20004e78
 8009894:	20004e7c 	.word	0x20004e7c
 8009898:	20004e68 	.word	0x20004e68
 800989c:	200083e4 	.word	0x200083e4
 80098a0:	200083ec 	.word	0x200083ec

080098a4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af04      	add	r7, sp, #16
 80098aa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80098ac:	4b2f      	ldr	r3, [pc, #188]	@ (800996c <tcp_timewait_input+0xc8>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d153      	bne.n	8009960 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <tcp_timewait_input+0x28>
 80098be:	4b2c      	ldr	r3, [pc, #176]	@ (8009970 <tcp_timewait_input+0xcc>)
 80098c0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80098c4:	492b      	ldr	r1, [pc, #172]	@ (8009974 <tcp_timewait_input+0xd0>)
 80098c6:	482c      	ldr	r0, [pc, #176]	@ (8009978 <tcp_timewait_input+0xd4>)
 80098c8:	f007 fea0 	bl	801160c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80098cc:	4b27      	ldr	r3, [pc, #156]	@ (800996c <tcp_timewait_input+0xc8>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	f003 0302 	and.w	r3, r3, #2
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d02a      	beq.n	800992e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80098d8:	4b28      	ldr	r3, [pc, #160]	@ (800997c <tcp_timewait_input+0xd8>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	db2d      	blt.n	8009942 <tcp_timewait_input+0x9e>
 80098e6:	4b25      	ldr	r3, [pc, #148]	@ (800997c <tcp_timewait_input+0xd8>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80098f2:	440b      	add	r3, r1
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	dc23      	bgt.n	8009942 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098fa:	4b21      	ldr	r3, [pc, #132]	@ (8009980 <tcp_timewait_input+0xdc>)
 80098fc:	6819      	ldr	r1, [r3, #0]
 80098fe:	4b21      	ldr	r3, [pc, #132]	@ (8009984 <tcp_timewait_input+0xe0>)
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	4b1d      	ldr	r3, [pc, #116]	@ (800997c <tcp_timewait_input+0xd8>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800990a:	4b1f      	ldr	r3, [pc, #124]	@ (8009988 <tcp_timewait_input+0xe4>)
 800990c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800990e:	885b      	ldrh	r3, [r3, #2]
 8009910:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009912:	4a1d      	ldr	r2, [pc, #116]	@ (8009988 <tcp_timewait_input+0xe4>)
 8009914:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009916:	8812      	ldrh	r2, [r2, #0]
 8009918:	b292      	uxth	r2, r2
 800991a:	9202      	str	r2, [sp, #8]
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	4b1b      	ldr	r3, [pc, #108]	@ (800998c <tcp_timewait_input+0xe8>)
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	4b1b      	ldr	r3, [pc, #108]	@ (8009990 <tcp_timewait_input+0xec>)
 8009924:	4602      	mov	r2, r0
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f003 fac4 	bl	800ceb4 <tcp_rst>
      return;
 800992c:	e01b      	b.n	8009966 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800992e:	4b0f      	ldr	r3, [pc, #60]	@ (800996c <tcp_timewait_input+0xc8>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800993a:	4b16      	ldr	r3, [pc, #88]	@ (8009994 <tcp_timewait_input+0xf0>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009942:	4b10      	ldr	r3, [pc, #64]	@ (8009984 <tcp_timewait_input+0xe0>)
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00c      	beq.n	8009964 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	8b5b      	ldrh	r3, [r3, #26]
 800994e:	f043 0302 	orr.w	r3, r3, #2
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f002 fcf7 	bl	800c34c <tcp_output>
  }
  return;
 800995e:	e001      	b.n	8009964 <tcp_timewait_input+0xc0>
    return;
 8009960:	bf00      	nop
 8009962:	e000      	b.n	8009966 <tcp_timewait_input+0xc2>
  return;
 8009964:	bf00      	nop
}
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	2000841c 	.word	0x2000841c
 8009970:	08013a58 	.word	0x08013a58
 8009974:	08013c70 	.word	0x08013c70
 8009978:	08013aa4 	.word	0x08013aa4
 800997c:	20008410 	.word	0x20008410
 8009980:	20008414 	.word	0x20008414
 8009984:	2000841a 	.word	0x2000841a
 8009988:	20008400 	.word	0x20008400
 800998c:	20004e78 	.word	0x20004e78
 8009990:	20004e7c 	.word	0x20004e7c
 8009994:	200083d8 	.word	0x200083d8

08009998 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009998:	b590      	push	{r4, r7, lr}
 800999a:	b08d      	sub	sp, #52	@ 0x34
 800999c:	af04      	add	r7, sp, #16
 800999e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d106      	bne.n	80099bc <tcp_process+0x24>
 80099ae:	4b9d      	ldr	r3, [pc, #628]	@ (8009c24 <tcp_process+0x28c>)
 80099b0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80099b4:	499c      	ldr	r1, [pc, #624]	@ (8009c28 <tcp_process+0x290>)
 80099b6:	489d      	ldr	r0, [pc, #628]	@ (8009c2c <tcp_process+0x294>)
 80099b8:	f007 fe28 	bl	801160c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80099bc:	4b9c      	ldr	r3, [pc, #624]	@ (8009c30 <tcp_process+0x298>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d04e      	beq.n	8009a66 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	7d1b      	ldrb	r3, [r3, #20]
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d108      	bne.n	80099e2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099d4:	4b97      	ldr	r3, [pc, #604]	@ (8009c34 <tcp_process+0x29c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d123      	bne.n	8009a24 <tcp_process+0x8c>
        acceptable = 1;
 80099dc:	2301      	movs	r3, #1
 80099de:	76fb      	strb	r3, [r7, #27]
 80099e0:	e020      	b.n	8009a24 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099e6:	4b94      	ldr	r3, [pc, #592]	@ (8009c38 <tcp_process+0x2a0>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d102      	bne.n	80099f4 <tcp_process+0x5c>
        acceptable = 1;
 80099ee:	2301      	movs	r3, #1
 80099f0:	76fb      	strb	r3, [r7, #27]
 80099f2:	e017      	b.n	8009a24 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80099f4:	4b90      	ldr	r3, [pc, #576]	@ (8009c38 <tcp_process+0x2a0>)
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	db10      	blt.n	8009a24 <tcp_process+0x8c>
 8009a02:	4b8d      	ldr	r3, [pc, #564]	@ (8009c38 <tcp_process+0x2a0>)
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0a:	6879      	ldr	r1, [r7, #4]
 8009a0c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009a0e:	440b      	add	r3, r1
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	dc06      	bgt.n	8009a24 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	8b5b      	ldrh	r3, [r3, #26]
 8009a1a:	f043 0302 	orr.w	r3, r3, #2
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009a24:	7efb      	ldrb	r3, [r7, #27]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d01b      	beq.n	8009a62 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	7d1b      	ldrb	r3, [r3, #20]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d106      	bne.n	8009a40 <tcp_process+0xa8>
 8009a32:	4b7c      	ldr	r3, [pc, #496]	@ (8009c24 <tcp_process+0x28c>)
 8009a34:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8009a38:	4980      	ldr	r1, [pc, #512]	@ (8009c3c <tcp_process+0x2a4>)
 8009a3a:	487c      	ldr	r0, [pc, #496]	@ (8009c2c <tcp_process+0x294>)
 8009a3c:	f007 fde6 	bl	801160c <iprintf>
      recv_flags |= TF_RESET;
 8009a40:	4b7f      	ldr	r3, [pc, #508]	@ (8009c40 <tcp_process+0x2a8>)
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	f043 0308 	orr.w	r3, r3, #8
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	4b7d      	ldr	r3, [pc, #500]	@ (8009c40 <tcp_process+0x2a8>)
 8009a4c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	8b5b      	ldrh	r3, [r3, #26]
 8009a52:	f023 0301 	bic.w	r3, r3, #1
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009a5c:	f06f 030d 	mvn.w	r3, #13
 8009a60:	e37a      	b.n	800a158 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	e378      	b.n	800a158 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009a66:	4b72      	ldr	r3, [pc, #456]	@ (8009c30 <tcp_process+0x298>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d010      	beq.n	8009a94 <tcp_process+0xfc>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	7d1b      	ldrb	r3, [r3, #20]
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d00c      	beq.n	8009a94 <tcp_process+0xfc>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	7d1b      	ldrb	r3, [r3, #20]
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d008      	beq.n	8009a94 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	8b5b      	ldrh	r3, [r3, #26]
 8009a86:	f043 0302 	orr.w	r3, r3, #2
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	e361      	b.n	800a158 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	8b5b      	ldrh	r3, [r3, #26]
 8009a98:	f003 0310 	and.w	r3, r3, #16
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d103      	bne.n	8009aa8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009aa0:	4b68      	ldr	r3, [pc, #416]	@ (8009c44 <tcp_process+0x2ac>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f001 fc2b 	bl	800b314 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	7d1b      	ldrb	r3, [r3, #20]
 8009ac2:	3b02      	subs	r3, #2
 8009ac4:	2b07      	cmp	r3, #7
 8009ac6:	f200 8337 	bhi.w	800a138 <tcp_process+0x7a0>
 8009aca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <tcp_process+0x138>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009af1 	.word	0x08009af1
 8009ad4:	08009d21 	.word	0x08009d21
 8009ad8:	08009e99 	.word	0x08009e99
 8009adc:	08009ec3 	.word	0x08009ec3
 8009ae0:	08009fe7 	.word	0x08009fe7
 8009ae4:	08009e99 	.word	0x08009e99
 8009ae8:	0800a073 	.word	0x0800a073
 8009aec:	0800a103 	.word	0x0800a103
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009af0:	4b4f      	ldr	r3, [pc, #316]	@ (8009c30 <tcp_process+0x298>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	f003 0310 	and.w	r3, r3, #16
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 80e4 	beq.w	8009cc6 <tcp_process+0x32e>
 8009afe:	4b4c      	ldr	r3, [pc, #304]	@ (8009c30 <tcp_process+0x298>)
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 80dd 	beq.w	8009cc6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	4b48      	ldr	r3, [pc, #288]	@ (8009c34 <tcp_process+0x29c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	f040 80d5 	bne.w	8009cc6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009b1c:	4b46      	ldr	r3, [pc, #280]	@ (8009c38 <tcp_process+0x2a0>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8009b2e:	4b41      	ldr	r3, [pc, #260]	@ (8009c34 <tcp_process+0x29c>)
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009b36:	4b44      	ldr	r3, [pc, #272]	@ (8009c48 <tcp_process+0x2b0>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	89db      	ldrh	r3, [r3, #14]
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009b50:	4b39      	ldr	r3, [pc, #228]	@ (8009c38 <tcp_process+0x2a0>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	1e5a      	subs	r2, r3, #1
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2204      	movs	r2, #4
 8009b5e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3304      	adds	r3, #4
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f004 ff43 	bl	800e9f4 <ip4_route>
 8009b6e:	4601      	mov	r1, r0
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3304      	adds	r3, #4
 8009b74:	461a      	mov	r2, r3
 8009b76:	4620      	mov	r0, r4
 8009b78:	f7ff f88c 	bl	8008c94 <tcp_eff_send_mss_netif>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	461a      	mov	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b88:	009a      	lsls	r2, r3, #2
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b8e:	005b      	lsls	r3, r3, #1
 8009b90:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009b94:	428b      	cmp	r3, r1
 8009b96:	bf38      	it	cc
 8009b98:	460b      	movcc	r3, r1
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d204      	bcs.n	8009ba8 <tcp_process+0x210>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	e00d      	b.n	8009bc4 <tcp_process+0x22c>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d904      	bls.n	8009bc0 <tcp_process+0x228>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	e001      	b.n	8009bc4 <tcp_process+0x22c>
 8009bc0:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d106      	bne.n	8009be2 <tcp_process+0x24a>
 8009bd4:	4b13      	ldr	r3, [pc, #76]	@ (8009c24 <tcp_process+0x28c>)
 8009bd6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8009bda:	491c      	ldr	r1, [pc, #112]	@ (8009c4c <tcp_process+0x2b4>)
 8009bdc:	4813      	ldr	r0, [pc, #76]	@ (8009c2c <tcp_process+0x294>)
 8009bde:	f007 fd15 	bl	801160c <iprintf>
        --pcb->snd_queuelen;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009be8:	3b01      	subs	r3, #1
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bf6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d12a      	bne.n	8009c54 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c02:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d106      	bne.n	8009c18 <tcp_process+0x280>
 8009c0a:	4b06      	ldr	r3, [pc, #24]	@ (8009c24 <tcp_process+0x28c>)
 8009c0c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8009c10:	490f      	ldr	r1, [pc, #60]	@ (8009c50 <tcp_process+0x2b8>)
 8009c12:	4806      	ldr	r0, [pc, #24]	@ (8009c2c <tcp_process+0x294>)
 8009c14:	f007 fcfa 	bl	801160c <iprintf>
          pcb->unsent = rseg->next;
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009c20:	e01c      	b.n	8009c5c <tcp_process+0x2c4>
 8009c22:	bf00      	nop
 8009c24:	08013a58 	.word	0x08013a58
 8009c28:	08013c90 	.word	0x08013c90
 8009c2c:	08013aa4 	.word	0x08013aa4
 8009c30:	2000841c 	.word	0x2000841c
 8009c34:	20008414 	.word	0x20008414
 8009c38:	20008410 	.word	0x20008410
 8009c3c:	08013cac 	.word	0x08013cac
 8009c40:	2000841d 	.word	0x2000841d
 8009c44:	200083d8 	.word	0x200083d8
 8009c48:	20008400 	.word	0x20008400
 8009c4c:	08013ccc 	.word	0x08013ccc
 8009c50:	08013ce4 	.word	0x08013ce4
        } else {
          pcb->unacked = rseg->next;
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8009c5c:	69f8      	ldr	r0, [r7, #28]
 8009c5e:	f7fe fce0 	bl	8008622 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d104      	bne.n	8009c74 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009c70:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009c72:	e006      	b.n	8009c82 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00a      	beq.n	8009ca2 <tcp_process+0x30a>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	6910      	ldr	r0, [r2, #16]
 8009c96:	2200      	movs	r2, #0
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4798      	blx	r3
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	76bb      	strb	r3, [r7, #26]
 8009ca0:	e001      	b.n	8009ca6 <tcp_process+0x30e>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009ca6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009caa:	f113 0f0d 	cmn.w	r3, #13
 8009cae:	d102      	bne.n	8009cb6 <tcp_process+0x31e>
          return ERR_ABRT;
 8009cb0:	f06f 030c 	mvn.w	r3, #12
 8009cb4:	e250      	b.n	800a158 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	8b5b      	ldrh	r3, [r3, #26]
 8009cba:	f043 0302 	orr.w	r3, r3, #2
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009cc4:	e23a      	b.n	800a13c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009cc6:	4b98      	ldr	r3, [pc, #608]	@ (8009f28 <tcp_process+0x590>)
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	f003 0310 	and.w	r3, r3, #16
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 8234 	beq.w	800a13c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cd4:	4b95      	ldr	r3, [pc, #596]	@ (8009f2c <tcp_process+0x594>)
 8009cd6:	6819      	ldr	r1, [r3, #0]
 8009cd8:	4b95      	ldr	r3, [pc, #596]	@ (8009f30 <tcp_process+0x598>)
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	4b95      	ldr	r3, [pc, #596]	@ (8009f34 <tcp_process+0x59c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ce4:	4b94      	ldr	r3, [pc, #592]	@ (8009f38 <tcp_process+0x5a0>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ce8:	885b      	ldrh	r3, [r3, #2]
 8009cea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009cec:	4a92      	ldr	r2, [pc, #584]	@ (8009f38 <tcp_process+0x5a0>)
 8009cee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cf0:	8812      	ldrh	r2, [r2, #0]
 8009cf2:	b292      	uxth	r2, r2
 8009cf4:	9202      	str	r2, [sp, #8]
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	4b90      	ldr	r3, [pc, #576]	@ (8009f3c <tcp_process+0x5a4>)
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	4b90      	ldr	r3, [pc, #576]	@ (8009f40 <tcp_process+0x5a8>)
 8009cfe:	4602      	mov	r2, r0
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f003 f8d7 	bl	800ceb4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d0c:	2b05      	cmp	r3, #5
 8009d0e:	f200 8215 	bhi.w	800a13c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f002 fea3 	bl	800ca64 <tcp_rexmit_rto>
      break;
 8009d1e:	e20d      	b.n	800a13c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009d20:	4b81      	ldr	r3, [pc, #516]	@ (8009f28 <tcp_process+0x590>)
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	f003 0310 	and.w	r3, r3, #16
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 80a1 	beq.w	8009e70 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8009f2c <tcp_process+0x594>)
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	db7e      	blt.n	8009e3c <tcp_process+0x4a4>
 8009d3e:	4b7b      	ldr	r3, [pc, #492]	@ (8009f2c <tcp_process+0x594>)
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	dc77      	bgt.n	8009e3c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2204      	movs	r2, #4
 8009d50:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d102      	bne.n	8009d60 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009d5a:	23fa      	movs	r3, #250	@ 0xfa
 8009d5c:	76bb      	strb	r3, [r7, #26]
 8009d5e:	e01d      	b.n	8009d9c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d106      	bne.n	8009d78 <tcp_process+0x3e0>
 8009d6a:	4b76      	ldr	r3, [pc, #472]	@ (8009f44 <tcp_process+0x5ac>)
 8009d6c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8009d70:	4975      	ldr	r1, [pc, #468]	@ (8009f48 <tcp_process+0x5b0>)
 8009d72:	4876      	ldr	r0, [pc, #472]	@ (8009f4c <tcp_process+0x5b4>)
 8009d74:	f007 fc4a 	bl	801160c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00a      	beq.n	8009d98 <tcp_process+0x400>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	6910      	ldr	r0, [r2, #16]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	4798      	blx	r3
 8009d92:	4603      	mov	r3, r0
 8009d94:	76bb      	strb	r3, [r7, #26]
 8009d96:	e001      	b.n	8009d9c <tcp_process+0x404>
 8009d98:	23f0      	movs	r3, #240	@ 0xf0
 8009d9a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009d9c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00a      	beq.n	8009dba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009da4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009da8:	f113 0f0d 	cmn.w	r3, #13
 8009dac:	d002      	beq.n	8009db4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7fd fd90 	bl	80078d4 <tcp_abort>
            }
            return ERR_ABRT;
 8009db4:	f06f 030c 	mvn.w	r3, #12
 8009db8:	e1ce      	b.n	800a158 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fae0 	bl	800a380 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009dc0:	4b63      	ldr	r3, [pc, #396]	@ (8009f50 <tcp_process+0x5b8>)
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d005      	beq.n	8009dd4 <tcp_process+0x43c>
            recv_acked--;
 8009dc8:	4b61      	ldr	r3, [pc, #388]	@ (8009f50 <tcp_process+0x5b8>)
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	4b5f      	ldr	r3, [pc, #380]	@ (8009f50 <tcp_process+0x5b8>)
 8009dd2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009dd8:	009a      	lsls	r2, r3, #2
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009de4:	428b      	cmp	r3, r1
 8009de6:	bf38      	it	cc
 8009de8:	460b      	movcc	r3, r1
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d204      	bcs.n	8009df8 <tcp_process+0x460>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	e00d      	b.n	8009e14 <tcp_process+0x47c>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009dfc:	005b      	lsls	r3, r3, #1
 8009dfe:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d904      	bls.n	8009e10 <tcp_process+0x478>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009e0a:	005b      	lsls	r3, r3, #1
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	e001      	b.n	8009e14 <tcp_process+0x47c>
 8009e10:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009e1a:	4b4e      	ldr	r3, [pc, #312]	@ (8009f54 <tcp_process+0x5bc>)
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	f003 0320 	and.w	r3, r3, #32
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d037      	beq.n	8009e96 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	8b5b      	ldrh	r3, [r3, #26]
 8009e2a:	f043 0302 	orr.w	r3, r3, #2
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2207      	movs	r2, #7
 8009e38:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009e3a:	e02c      	b.n	8009e96 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8009f2c <tcp_process+0x594>)
 8009e3e:	6819      	ldr	r1, [r3, #0]
 8009e40:	4b3b      	ldr	r3, [pc, #236]	@ (8009f30 <tcp_process+0x598>)
 8009e42:	881b      	ldrh	r3, [r3, #0]
 8009e44:	461a      	mov	r2, r3
 8009e46:	4b3b      	ldr	r3, [pc, #236]	@ (8009f34 <tcp_process+0x59c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8009f38 <tcp_process+0x5a0>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e50:	885b      	ldrh	r3, [r3, #2]
 8009e52:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e54:	4a38      	ldr	r2, [pc, #224]	@ (8009f38 <tcp_process+0x5a0>)
 8009e56:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e58:	8812      	ldrh	r2, [r2, #0]
 8009e5a:	b292      	uxth	r2, r2
 8009e5c:	9202      	str	r2, [sp, #8]
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	4b36      	ldr	r3, [pc, #216]	@ (8009f3c <tcp_process+0x5a4>)
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	4b36      	ldr	r3, [pc, #216]	@ (8009f40 <tcp_process+0x5a8>)
 8009e66:	4602      	mov	r2, r0
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f003 f823 	bl	800ceb4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009e6e:	e167      	b.n	800a140 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009e70:	4b2d      	ldr	r3, [pc, #180]	@ (8009f28 <tcp_process+0x590>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	f003 0302 	and.w	r3, r3, #2
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 8161 	beq.w	800a140 <tcp_process+0x7a8>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e82:	1e5a      	subs	r2, r3, #1
 8009e84:	4b2b      	ldr	r3, [pc, #172]	@ (8009f34 <tcp_process+0x59c>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	f040 8159 	bne.w	800a140 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f002 fe0a 	bl	800caa8 <tcp_rexmit>
      break;
 8009e94:	e154      	b.n	800a140 <tcp_process+0x7a8>
 8009e96:	e153      	b.n	800a140 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fa71 	bl	800a380 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8009f54 <tcp_process+0x5bc>)
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	f003 0320 	and.w	r3, r3, #32
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 814c 	beq.w	800a144 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	8b5b      	ldrh	r3, [r3, #26]
 8009eb0:	f043 0302 	orr.w	r3, r3, #2
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2207      	movs	r2, #7
 8009ebe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009ec0:	e140      	b.n	800a144 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa5c 	bl	800a380 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009ec8:	4b22      	ldr	r3, [pc, #136]	@ (8009f54 <tcp_process+0x5bc>)
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	f003 0320 	and.w	r3, r3, #32
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d071      	beq.n	8009fb8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ed4:	4b14      	ldr	r3, [pc, #80]	@ (8009f28 <tcp_process+0x590>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	f003 0310 	and.w	r3, r3, #16
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d060      	beq.n	8009fa2 <tcp_process+0x60a>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ee4:	4b11      	ldr	r3, [pc, #68]	@ (8009f2c <tcp_process+0x594>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d15a      	bne.n	8009fa2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d156      	bne.n	8009fa2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	8b5b      	ldrh	r3, [r3, #26]
 8009ef8:	f043 0302 	orr.w	r3, r3, #2
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7fe fdbc 	bl	8008a80 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009f08:	4b13      	ldr	r3, [pc, #76]	@ (8009f58 <tcp_process+0x5c0>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d105      	bne.n	8009f1e <tcp_process+0x586>
 8009f12:	4b11      	ldr	r3, [pc, #68]	@ (8009f58 <tcp_process+0x5c0>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	4a0f      	ldr	r2, [pc, #60]	@ (8009f58 <tcp_process+0x5c0>)
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	e02e      	b.n	8009f7c <tcp_process+0x5e4>
 8009f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f58 <tcp_process+0x5c0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	617b      	str	r3, [r7, #20]
 8009f24:	e027      	b.n	8009f76 <tcp_process+0x5de>
 8009f26:	bf00      	nop
 8009f28:	2000841c 	.word	0x2000841c
 8009f2c:	20008414 	.word	0x20008414
 8009f30:	2000841a 	.word	0x2000841a
 8009f34:	20008410 	.word	0x20008410
 8009f38:	20008400 	.word	0x20008400
 8009f3c:	20004e78 	.word	0x20004e78
 8009f40:	20004e7c 	.word	0x20004e7c
 8009f44:	08013a58 	.word	0x08013a58
 8009f48:	08013cf8 	.word	0x08013cf8
 8009f4c:	08013aa4 	.word	0x08013aa4
 8009f50:	20008418 	.word	0x20008418
 8009f54:	2000841d 	.word	0x2000841d
 8009f58:	200083e4 	.word	0x200083e4
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d104      	bne.n	8009f70 <tcp_process+0x5d8>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68da      	ldr	r2, [r3, #12]
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	60da      	str	r2, [r3, #12]
 8009f6e:	e005      	b.n	8009f7c <tcp_process+0x5e4>
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	617b      	str	r3, [r7, #20]
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1ef      	bne.n	8009f5c <tcp_process+0x5c4>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	60da      	str	r2, [r3, #12]
 8009f82:	4b77      	ldr	r3, [pc, #476]	@ (800a160 <tcp_process+0x7c8>)
 8009f84:	2201      	movs	r2, #1
 8009f86:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	220a      	movs	r2, #10
 8009f8c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009f8e:	4b75      	ldr	r3, [pc, #468]	@ (800a164 <tcp_process+0x7cc>)
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	60da      	str	r2, [r3, #12]
 8009f96:	4a73      	ldr	r2, [pc, #460]	@ (800a164 <tcp_process+0x7cc>)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	f003 f94c 	bl	800d238 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009fa0:	e0d2      	b.n	800a148 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	8b5b      	ldrh	r3, [r3, #26]
 8009fa6:	f043 0302 	orr.w	r3, r3, #2
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2208      	movs	r2, #8
 8009fb4:	751a      	strb	r2, [r3, #20]
      break;
 8009fb6:	e0c7      	b.n	800a148 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009fb8:	4b6b      	ldr	r3, [pc, #428]	@ (800a168 <tcp_process+0x7d0>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	f003 0310 	and.w	r3, r3, #16
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 80c1 	beq.w	800a148 <tcp_process+0x7b0>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009fca:	4b68      	ldr	r3, [pc, #416]	@ (800a16c <tcp_process+0x7d4>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	f040 80ba 	bne.w	800a148 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f040 80b5 	bne.w	800a148 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2206      	movs	r2, #6
 8009fe2:	751a      	strb	r2, [r3, #20]
      break;
 8009fe4:	e0b0      	b.n	800a148 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f9ca 	bl	800a380 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009fec:	4b60      	ldr	r3, [pc, #384]	@ (800a170 <tcp_process+0x7d8>)
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	f003 0320 	and.w	r3, r3, #32
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 80a9 	beq.w	800a14c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	8b5b      	ldrh	r3, [r3, #26]
 8009ffe:	f043 0302 	orr.w	r3, r3, #2
 800a002:	b29a      	uxth	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7fe fd39 	bl	8008a80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a00e:	4b59      	ldr	r3, [pc, #356]	@ (800a174 <tcp_process+0x7dc>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	429a      	cmp	r2, r3
 800a016:	d105      	bne.n	800a024 <tcp_process+0x68c>
 800a018:	4b56      	ldr	r3, [pc, #344]	@ (800a174 <tcp_process+0x7dc>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	4a55      	ldr	r2, [pc, #340]	@ (800a174 <tcp_process+0x7dc>)
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	e013      	b.n	800a04c <tcp_process+0x6b4>
 800a024:	4b53      	ldr	r3, [pc, #332]	@ (800a174 <tcp_process+0x7dc>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	613b      	str	r3, [r7, #16]
 800a02a:	e00c      	b.n	800a046 <tcp_process+0x6ae>
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	429a      	cmp	r2, r3
 800a034:	d104      	bne.n	800a040 <tcp_process+0x6a8>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	60da      	str	r2, [r3, #12]
 800a03e:	e005      	b.n	800a04c <tcp_process+0x6b4>
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	613b      	str	r3, [r7, #16]
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1ef      	bne.n	800a02c <tcp_process+0x694>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	60da      	str	r2, [r3, #12]
 800a052:	4b43      	ldr	r3, [pc, #268]	@ (800a160 <tcp_process+0x7c8>)
 800a054:	2201      	movs	r2, #1
 800a056:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	220a      	movs	r2, #10
 800a05c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a05e:	4b41      	ldr	r3, [pc, #260]	@ (800a164 <tcp_process+0x7cc>)
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	60da      	str	r2, [r3, #12]
 800a066:	4a3f      	ldr	r2, [pc, #252]	@ (800a164 <tcp_process+0x7cc>)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	f003 f8e4 	bl	800d238 <tcp_timer_needed>
      }
      break;
 800a070:	e06c      	b.n	800a14c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f984 	bl	800a380 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a078:	4b3b      	ldr	r3, [pc, #236]	@ (800a168 <tcp_process+0x7d0>)
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	f003 0310 	and.w	r3, r3, #16
 800a080:	2b00      	cmp	r3, #0
 800a082:	d065      	beq.n	800a150 <tcp_process+0x7b8>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a088:	4b38      	ldr	r3, [pc, #224]	@ (800a16c <tcp_process+0x7d4>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d15f      	bne.n	800a150 <tcp_process+0x7b8>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a094:	2b00      	cmp	r3, #0
 800a096:	d15b      	bne.n	800a150 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7fe fcf1 	bl	8008a80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a09e:	4b35      	ldr	r3, [pc, #212]	@ (800a174 <tcp_process+0x7dc>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d105      	bne.n	800a0b4 <tcp_process+0x71c>
 800a0a8:	4b32      	ldr	r3, [pc, #200]	@ (800a174 <tcp_process+0x7dc>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	4a31      	ldr	r2, [pc, #196]	@ (800a174 <tcp_process+0x7dc>)
 800a0b0:	6013      	str	r3, [r2, #0]
 800a0b2:	e013      	b.n	800a0dc <tcp_process+0x744>
 800a0b4:	4b2f      	ldr	r3, [pc, #188]	@ (800a174 <tcp_process+0x7dc>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	e00c      	b.n	800a0d6 <tcp_process+0x73e>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d104      	bne.n	800a0d0 <tcp_process+0x738>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	60da      	str	r2, [r3, #12]
 800a0ce:	e005      	b.n	800a0dc <tcp_process+0x744>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	60fb      	str	r3, [r7, #12]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1ef      	bne.n	800a0bc <tcp_process+0x724>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	60da      	str	r2, [r3, #12]
 800a0e2:	4b1f      	ldr	r3, [pc, #124]	@ (800a160 <tcp_process+0x7c8>)
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	220a      	movs	r2, #10
 800a0ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a0ee:	4b1d      	ldr	r3, [pc, #116]	@ (800a164 <tcp_process+0x7cc>)
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	60da      	str	r2, [r3, #12]
 800a0f6:	4a1b      	ldr	r2, [pc, #108]	@ (800a164 <tcp_process+0x7cc>)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6013      	str	r3, [r2, #0]
 800a0fc:	f003 f89c 	bl	800d238 <tcp_timer_needed>
      }
      break;
 800a100:	e026      	b.n	800a150 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f93c 	bl	800a380 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a108:	4b17      	ldr	r3, [pc, #92]	@ (800a168 <tcp_process+0x7d0>)
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	f003 0310 	and.w	r3, r3, #16
 800a110:	2b00      	cmp	r3, #0
 800a112:	d01f      	beq.n	800a154 <tcp_process+0x7bc>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a118:	4b14      	ldr	r3, [pc, #80]	@ (800a16c <tcp_process+0x7d4>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d119      	bne.n	800a154 <tcp_process+0x7bc>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d115      	bne.n	800a154 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a128:	4b11      	ldr	r3, [pc, #68]	@ (800a170 <tcp_process+0x7d8>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	f043 0310 	orr.w	r3, r3, #16
 800a130:	b2da      	uxtb	r2, r3
 800a132:	4b0f      	ldr	r3, [pc, #60]	@ (800a170 <tcp_process+0x7d8>)
 800a134:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a136:	e00d      	b.n	800a154 <tcp_process+0x7bc>
    default:
      break;
 800a138:	bf00      	nop
 800a13a:	e00c      	b.n	800a156 <tcp_process+0x7be>
      break;
 800a13c:	bf00      	nop
 800a13e:	e00a      	b.n	800a156 <tcp_process+0x7be>
      break;
 800a140:	bf00      	nop
 800a142:	e008      	b.n	800a156 <tcp_process+0x7be>
      break;
 800a144:	bf00      	nop
 800a146:	e006      	b.n	800a156 <tcp_process+0x7be>
      break;
 800a148:	bf00      	nop
 800a14a:	e004      	b.n	800a156 <tcp_process+0x7be>
      break;
 800a14c:	bf00      	nop
 800a14e:	e002      	b.n	800a156 <tcp_process+0x7be>
      break;
 800a150:	bf00      	nop
 800a152:	e000      	b.n	800a156 <tcp_process+0x7be>
      break;
 800a154:	bf00      	nop
  }
  return ERR_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3724      	adds	r7, #36	@ 0x24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd90      	pop	{r4, r7, pc}
 800a160:	200083ec 	.word	0x200083ec
 800a164:	200083e8 	.word	0x200083e8
 800a168:	2000841c 	.word	0x2000841c
 800a16c:	20008414 	.word	0x20008414
 800a170:	2000841d 	.word	0x2000841d
 800a174:	200083e4 	.word	0x200083e4

0800a178 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a178:	b590      	push	{r4, r7, lr}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d106      	bne.n	800a196 <tcp_oos_insert_segment+0x1e>
 800a188:	4b3b      	ldr	r3, [pc, #236]	@ (800a278 <tcp_oos_insert_segment+0x100>)
 800a18a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800a18e:	493b      	ldr	r1, [pc, #236]	@ (800a27c <tcp_oos_insert_segment+0x104>)
 800a190:	483b      	ldr	r0, [pc, #236]	@ (800a280 <tcp_oos_insert_segment+0x108>)
 800a192:	f007 fa3b 	bl	801160c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	899b      	ldrh	r3, [r3, #12]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fb fab2 	bl	8005708 <lwip_htons>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d028      	beq.n	800a202 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a1b0:	6838      	ldr	r0, [r7, #0]
 800a1b2:	f7fe fa21 	bl	80085f8 <tcp_segs_free>
    next = NULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	603b      	str	r3, [r7, #0]
 800a1ba:	e056      	b.n	800a26a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	899b      	ldrh	r3, [r3, #12]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fb fa9f 	bl	8005708 <lwip_htons>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00d      	beq.n	800a1f2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	899b      	ldrh	r3, [r3, #12]
 800a1dc:	b29c      	uxth	r4, r3
 800a1de:	2001      	movs	r0, #1
 800a1e0:	f7fb fa92 	bl	8005708 <lwip_htons>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	4322      	orrs	r2, r4
 800a1ee:	b292      	uxth	r2, r2
 800a1f0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7fe fa10 	bl	8008622 <tcp_seg_free>
    while (next &&
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00e      	beq.n	800a226 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	891b      	ldrh	r3, [r3, #8]
 800a20c:	461a      	mov	r2, r3
 800a20e:	4b1d      	ldr	r3, [pc, #116]	@ (800a284 <tcp_oos_insert_segment+0x10c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	441a      	add	r2, r3
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	8909      	ldrh	r1, [r1, #8]
 800a21e:	440b      	add	r3, r1
 800a220:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a222:	2b00      	cmp	r3, #0
 800a224:	daca      	bge.n	800a1bc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d01e      	beq.n	800a26a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	891b      	ldrh	r3, [r3, #8]
 800a230:	461a      	mov	r2, r3
 800a232:	4b14      	ldr	r3, [pc, #80]	@ (800a284 <tcp_oos_insert_segment+0x10c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	441a      	add	r2, r3
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a240:	2b00      	cmp	r3, #0
 800a242:	dd12      	ble.n	800a26a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	4b0d      	ldr	r3, [pc, #52]	@ (800a284 <tcp_oos_insert_segment+0x10c>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	b29b      	uxth	r3, r3
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	b29a      	uxth	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	891b      	ldrh	r3, [r3, #8]
 800a262:	4619      	mov	r1, r3
 800a264:	4610      	mov	r0, r2
 800a266:	f7fc fc27 	bl	8006ab8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	601a      	str	r2, [r3, #0]
}
 800a270:	bf00      	nop
 800a272:	3714      	adds	r7, #20
 800a274:	46bd      	mov	sp, r7
 800a276:	bd90      	pop	{r4, r7, pc}
 800a278:	08013a58 	.word	0x08013a58
 800a27c:	08013d18 	.word	0x08013d18
 800a280:	08013aa4 	.word	0x08013aa4
 800a284:	20008410 	.word	0x20008410

0800a288 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a288:	b5b0      	push	{r4, r5, r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a296:	e03e      	b.n	800a316 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fc fe14 	bl	8006ed4 <pbuf_clen>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a2b6:	8a7a      	ldrh	r2, [r7, #18]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d906      	bls.n	800a2ca <tcp_free_acked_segments+0x42>
 800a2bc:	4b2a      	ldr	r3, [pc, #168]	@ (800a368 <tcp_free_acked_segments+0xe0>)
 800a2be:	f240 4257 	movw	r2, #1111	@ 0x457
 800a2c2:	492a      	ldr	r1, [pc, #168]	@ (800a36c <tcp_free_acked_segments+0xe4>)
 800a2c4:	482a      	ldr	r0, [pc, #168]	@ (800a370 <tcp_free_acked_segments+0xe8>)
 800a2c6:	f007 f9a1 	bl	801160c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800a2d0:	8a7b      	ldrh	r3, [r7, #18]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	891a      	ldrh	r2, [r3, #8]
 800a2e0:	4b24      	ldr	r3, [pc, #144]	@ (800a374 <tcp_free_acked_segments+0xec>)
 800a2e2:	881b      	ldrh	r3, [r3, #0]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	4b22      	ldr	r3, [pc, #136]	@ (800a374 <tcp_free_acked_segments+0xec>)
 800a2ea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a2ec:	6978      	ldr	r0, [r7, #20]
 800a2ee:	f7fe f998 	bl	8008622 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00c      	beq.n	800a316 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d109      	bne.n	800a316 <tcp_free_acked_segments+0x8e>
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d106      	bne.n	800a316 <tcp_free_acked_segments+0x8e>
 800a308:	4b17      	ldr	r3, [pc, #92]	@ (800a368 <tcp_free_acked_segments+0xe0>)
 800a30a:	f240 4261 	movw	r2, #1121	@ 0x461
 800a30e:	491a      	ldr	r1, [pc, #104]	@ (800a378 <tcp_free_acked_segments+0xf0>)
 800a310:	4817      	ldr	r0, [pc, #92]	@ (800a370 <tcp_free_acked_segments+0xe8>)
 800a312:	f007 f97b 	bl	801160c <iprintf>
  while (seg_list != NULL &&
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d020      	beq.n	800a35e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	4618      	mov	r0, r3
 800a324:	f7fb fa06 	bl	8005734 <lwip_htonl>
 800a328:	4604      	mov	r4, r0
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	891b      	ldrh	r3, [r3, #8]
 800a32e:	461d      	mov	r5, r3
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	899b      	ldrh	r3, [r3, #12]
 800a336:	b29b      	uxth	r3, r3
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fb f9e5 	bl	8005708 <lwip_htons>
 800a33e:	4603      	mov	r3, r0
 800a340:	b2db      	uxtb	r3, r3
 800a342:	f003 0303 	and.w	r3, r3, #3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <tcp_free_acked_segments+0xc6>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <tcp_free_acked_segments+0xc8>
 800a34e:	2300      	movs	r3, #0
 800a350:	442b      	add	r3, r5
 800a352:	18e2      	adds	r2, r4, r3
 800a354:	4b09      	ldr	r3, [pc, #36]	@ (800a37c <tcp_free_acked_segments+0xf4>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	dd9c      	ble.n	800a298 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a35e:	68bb      	ldr	r3, [r7, #8]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bdb0      	pop	{r4, r5, r7, pc}
 800a368:	08013a58 	.word	0x08013a58
 800a36c:	08013d40 	.word	0x08013d40
 800a370:	08013aa4 	.word	0x08013aa4
 800a374:	20008418 	.word	0x20008418
 800a378:	08013d68 	.word	0x08013d68
 800a37c:	20008414 	.word	0x20008414

0800a380 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a380:	b5b0      	push	{r4, r5, r7, lr}
 800a382:	b094      	sub	sp, #80	@ 0x50
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d106      	bne.n	800a3a0 <tcp_receive+0x20>
 800a392:	4b91      	ldr	r3, [pc, #580]	@ (800a5d8 <tcp_receive+0x258>)
 800a394:	f240 427b 	movw	r2, #1147	@ 0x47b
 800a398:	4990      	ldr	r1, [pc, #576]	@ (800a5dc <tcp_receive+0x25c>)
 800a39a:	4891      	ldr	r0, [pc, #580]	@ (800a5e0 <tcp_receive+0x260>)
 800a39c:	f007 f936 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	7d1b      	ldrb	r3, [r3, #20]
 800a3a4:	2b03      	cmp	r3, #3
 800a3a6:	d806      	bhi.n	800a3b6 <tcp_receive+0x36>
 800a3a8:	4b8b      	ldr	r3, [pc, #556]	@ (800a5d8 <tcp_receive+0x258>)
 800a3aa:	f240 427c 	movw	r2, #1148	@ 0x47c
 800a3ae:	498d      	ldr	r1, [pc, #564]	@ (800a5e4 <tcp_receive+0x264>)
 800a3b0:	488b      	ldr	r0, [pc, #556]	@ (800a5e0 <tcp_receive+0x260>)
 800a3b2:	f007 f92b 	bl	801160c <iprintf>

  if (flags & TCP_ACK) {
 800a3b6:	4b8c      	ldr	r3, [pc, #560]	@ (800a5e8 <tcp_receive+0x268>)
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	f003 0310 	and.w	r3, r3, #16
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 8264 	beq.w	800a88c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3d0:	4413      	add	r3, r2
 800a3d2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3d8:	4b84      	ldr	r3, [pc, #528]	@ (800a5ec <tcp_receive+0x26c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	db1b      	blt.n	800a41a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3e6:	4b81      	ldr	r3, [pc, #516]	@ (800a5ec <tcp_receive+0x26c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d106      	bne.n	800a3fc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a3f2:	4b7f      	ldr	r3, [pc, #508]	@ (800a5f0 <tcp_receive+0x270>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	db0e      	blt.n	800a41a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a400:	4b7b      	ldr	r3, [pc, #492]	@ (800a5f0 <tcp_receive+0x270>)
 800a402:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a404:	429a      	cmp	r2, r3
 800a406:	d125      	bne.n	800a454 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a408:	4b7a      	ldr	r3, [pc, #488]	@ (800a5f4 <tcp_receive+0x274>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	89db      	ldrh	r3, [r3, #14]
 800a40e:	b29a      	uxth	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a416:	429a      	cmp	r2, r3
 800a418:	d91c      	bls.n	800a454 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a41a:	4b76      	ldr	r3, [pc, #472]	@ (800a5f4 <tcp_receive+0x274>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	89db      	ldrh	r3, [r3, #14]
 800a420:	b29a      	uxth	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a434:	429a      	cmp	r2, r3
 800a436:	d205      	bcs.n	800a444 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800a444:	4b69      	ldr	r3, [pc, #420]	@ (800a5ec <tcp_receive+0x26c>)
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800a44c:	4b68      	ldr	r3, [pc, #416]	@ (800a5f0 <tcp_receive+0x270>)
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a454:	4b66      	ldr	r3, [pc, #408]	@ (800a5f0 <tcp_receive+0x270>)
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	dc58      	bgt.n	800a514 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a462:	4b65      	ldr	r3, [pc, #404]	@ (800a5f8 <tcp_receive+0x278>)
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d14b      	bne.n	800a502 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800a474:	4413      	add	r3, r2
 800a476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a478:	429a      	cmp	r2, r3
 800a47a:	d142      	bne.n	800a502 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a482:	2b00      	cmp	r3, #0
 800a484:	db3d      	blt.n	800a502 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a48a:	4b59      	ldr	r3, [pc, #356]	@ (800a5f0 <tcp_receive+0x270>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d137      	bne.n	800a502 <tcp_receive+0x182>
              found_dupack = 1;
 800a492:	2301      	movs	r3, #1
 800a494:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a49c:	2bff      	cmp	r3, #255	@ 0xff
 800a49e:	d007      	beq.n	800a4b0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d91b      	bls.n	800a4f2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a4c4:	4413      	add	r3, r2
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d30a      	bcc.n	800a4e8 <tcp_receive+0x168>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a4dc:	4413      	add	r3, r2
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a4e6:	e004      	b.n	800a4f2 <tcp_receive+0x172>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4ee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d902      	bls.n	800a502 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f002 fb3f 	bl	800cb80 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a504:	2b00      	cmp	r3, #0
 800a506:	f040 8161 	bne.w	800a7cc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a512:	e15b      	b.n	800a7cc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a514:	4b36      	ldr	r3, [pc, #216]	@ (800a5f0 <tcp_receive+0x270>)
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	3b01      	subs	r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	f2c0 814e 	blt.w	800a7c2 <tcp_receive+0x442>
 800a526:	4b32      	ldr	r3, [pc, #200]	@ (800a5f0 <tcp_receive+0x270>)
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	2b00      	cmp	r3, #0
 800a532:	f300 8146 	bgt.w	800a7c2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	8b5b      	ldrh	r3, [r3, #26]
 800a53a:	f003 0304 	and.w	r3, r3, #4
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d010      	beq.n	800a564 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	8b5b      	ldrh	r3, [r3, #26]
 800a546:	f023 0304 	bic.w	r3, r3, #4
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a572:	10db      	asrs	r3, r3, #3
 800a574:	b21b      	sxth	r3, r3
 800a576:	b29a      	uxth	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a57e:	b29b      	uxth	r3, r3
 800a580:	4413      	add	r3, r2
 800a582:	b29b      	uxth	r3, r3
 800a584:	b21a      	sxth	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a58c:	4b18      	ldr	r3, [pc, #96]	@ (800a5f0 <tcp_receive+0x270>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	b29a      	uxth	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a596:	b29b      	uxth	r3, r3
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800a5a4:	4b12      	ldr	r3, [pc, #72]	@ (800a5f0 <tcp_receive+0x270>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	7d1b      	ldrb	r3, [r3, #20]
 800a5b0:	2b03      	cmp	r3, #3
 800a5b2:	f240 8097 	bls.w	800a6e4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d245      	bcs.n	800a652 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	8b5b      	ldrh	r3, [r3, #26]
 800a5ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d014      	beq.n	800a5fc <tcp_receive+0x27c>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e013      	b.n	800a5fe <tcp_receive+0x27e>
 800a5d6:	bf00      	nop
 800a5d8:	08013a58 	.word	0x08013a58
 800a5dc:	08013d88 	.word	0x08013d88
 800a5e0:	08013aa4 	.word	0x08013aa4
 800a5e4:	08013da4 	.word	0x08013da4
 800a5e8:	2000841c 	.word	0x2000841c
 800a5ec:	20008410 	.word	0x20008410
 800a5f0:	20008414 	.word	0x20008414
 800a5f4:	20008400 	.word	0x20008400
 800a5f8:	2000841a 	.word	0x2000841a
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a602:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a606:	b29a      	uxth	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a60c:	fb12 f303 	smulbb	r3, r2, r3
 800a610:	b29b      	uxth	r3, r3
 800a612:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a614:	4293      	cmp	r3, r2
 800a616:	bf28      	it	cs
 800a618:	4613      	movcs	r3, r2
 800a61a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a622:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a624:	4413      	add	r3, r2
 800a626:	b29a      	uxth	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a62e:	429a      	cmp	r2, r3
 800a630:	d309      	bcc.n	800a646 <tcp_receive+0x2c6>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a638:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a63a:	4413      	add	r3, r2
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a644:	e04e      	b.n	800a6e4 <tcp_receive+0x364>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a64c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a650:	e048      	b.n	800a6e4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a658:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a65a:	4413      	add	r3, r2
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a664:	429a      	cmp	r2, r3
 800a666:	d309      	bcc.n	800a67c <tcp_receive+0x2fc>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a66e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a670:	4413      	add	r3, r2
 800a672:	b29a      	uxth	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a67a:	e004      	b.n	800a686 <tcp_receive+0x306>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a682:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a692:	429a      	cmp	r2, r3
 800a694:	d326      	bcc.n	800a6e4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a6b6:	4413      	add	r3, r2
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d30a      	bcc.n	800a6da <tcp_receive+0x35a>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a6ce:	4413      	add	r3, r2
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a6d8:	e004      	b.n	800a6e4 <tcp_receive+0x364>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ec:	4a98      	ldr	r2, [pc, #608]	@ (800a950 <tcp_receive+0x5d0>)
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff fdca 	bl	800a288 <tcp_free_acked_segments>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a702:	4a94      	ldr	r2, [pc, #592]	@ (800a954 <tcp_receive+0x5d4>)
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff fdbf 	bl	800a288 <tcp_free_acked_segments>
 800a70a:	4602      	mov	r2, r0
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a714:	2b00      	cmp	r3, #0
 800a716:	d104      	bne.n	800a722 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a71e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a720:	e002      	b.n	800a728 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a732:	2b00      	cmp	r3, #0
 800a734:	d103      	bne.n	800a73e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800a744:	4b84      	ldr	r3, [pc, #528]	@ (800a958 <tcp_receive+0x5d8>)
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	4413      	add	r3, r2
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	8b5b      	ldrh	r3, [r3, #26]
 800a756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d035      	beq.n	800a7ca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a762:	2b00      	cmp	r3, #0
 800a764:	d118      	bne.n	800a798 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00c      	beq.n	800a788 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fa ffda 	bl	8005734 <lwip_htonl>
 800a780:	4603      	mov	r3, r0
 800a782:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a784:	2b00      	cmp	r3, #0
 800a786:	dc20      	bgt.n	800a7ca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	8b5b      	ldrh	r3, [r3, #26]
 800a78c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a790:	b29a      	uxth	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a796:	e018      	b.n	800a7ca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fa ffc5 	bl	8005734 <lwip_htonl>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	1ae3      	subs	r3, r4, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	dc0b      	bgt.n	800a7ca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	8b5b      	ldrh	r3, [r3, #26]
 800a7b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a7c0:	e003      	b.n	800a7ca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f002 fbc8 	bl	800cf58 <tcp_send_empty_ack>
 800a7c8:	e000      	b.n	800a7cc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a7ca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d05b      	beq.n	800a88c <tcp_receive+0x50c>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7d8:	4b60      	ldr	r3, [pc, #384]	@ (800a95c <tcp_receive+0x5dc>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	da54      	bge.n	800a88c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a7e2:	4b5f      	ldr	r3, [pc, #380]	@ (800a960 <tcp_receive+0x5e0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a7f6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a800:	10db      	asrs	r3, r3, #3
 800a802:	b21b      	sxth	r3, r3
 800a804:	b29b      	uxth	r3, r3
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	b29b      	uxth	r3, r3
 800a80a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a814:	b29a      	uxth	r2, r3
 800a816:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a81a:	4413      	add	r3, r2
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	b21a      	sxth	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800a824:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a828:	2b00      	cmp	r3, #0
 800a82a:	da05      	bge.n	800a838 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a82c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a830:	425b      	negs	r3, r3
 800a832:	b29b      	uxth	r3, r3
 800a834:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a838:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a842:	109b      	asrs	r3, r3, #2
 800a844:	b21b      	sxth	r3, r3
 800a846:	b29b      	uxth	r3, r3
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a856:	b29a      	uxth	r2, r3
 800a858:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a85c:	4413      	add	r3, r2
 800a85e:	b29b      	uxth	r3, r3
 800a860:	b21a      	sxth	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a86c:	10db      	asrs	r3, r3, #3
 800a86e:	b21b      	sxth	r3, r3
 800a870:	b29a      	uxth	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a878:	b29b      	uxth	r3, r3
 800a87a:	4413      	add	r3, r2
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	b21a      	sxth	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a88c:	4b35      	ldr	r3, [pc, #212]	@ (800a964 <tcp_receive+0x5e4>)
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 84df 	beq.w	800b254 <tcp_receive+0xed4>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	7d1b      	ldrb	r3, [r3, #20]
 800a89a:	2b06      	cmp	r3, #6
 800a89c:	f200 84da 	bhi.w	800b254 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a8a4:	4b30      	ldr	r3, [pc, #192]	@ (800a968 <tcp_receive+0x5e8>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f2c0 808f 	blt.w	800a9d0 <tcp_receive+0x650>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a8b6:	4b2b      	ldr	r3, [pc, #172]	@ (800a964 <tcp_receive+0x5e4>)
 800a8b8:	881b      	ldrh	r3, [r3, #0]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	4b2a      	ldr	r3, [pc, #168]	@ (800a968 <tcp_receive+0x5e8>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	440b      	add	r3, r1
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f300 8082 	bgt.w	800a9d0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a8cc:	4b27      	ldr	r3, [pc, #156]	@ (800a96c <tcp_receive+0x5ec>)
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a8d6:	4b24      	ldr	r3, [pc, #144]	@ (800a968 <tcp_receive+0x5e8>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a8de:	4b23      	ldr	r3, [pc, #140]	@ (800a96c <tcp_receive+0x5ec>)
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d106      	bne.n	800a8f4 <tcp_receive+0x574>
 800a8e6:	4b22      	ldr	r3, [pc, #136]	@ (800a970 <tcp_receive+0x5f0>)
 800a8e8:	f240 5294 	movw	r2, #1428	@ 0x594
 800a8ec:	4921      	ldr	r1, [pc, #132]	@ (800a974 <tcp_receive+0x5f4>)
 800a8ee:	4822      	ldr	r0, [pc, #136]	@ (800a978 <tcp_receive+0x5f8>)
 800a8f0:	f006 fe8c 	bl	801160c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d906      	bls.n	800a90c <tcp_receive+0x58c>
 800a8fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a970 <tcp_receive+0x5f0>)
 800a900:	f240 5295 	movw	r2, #1429	@ 0x595
 800a904:	491d      	ldr	r1, [pc, #116]	@ (800a97c <tcp_receive+0x5fc>)
 800a906:	481c      	ldr	r0, [pc, #112]	@ (800a978 <tcp_receive+0x5f8>)
 800a908:	f006 fe80 	bl	801160c <iprintf>
      off = (u16_t)off32;
 800a90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a912:	4b16      	ldr	r3, [pc, #88]	@ (800a96c <tcp_receive+0x5ec>)
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	891b      	ldrh	r3, [r3, #8]
 800a918:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d906      	bls.n	800a92e <tcp_receive+0x5ae>
 800a920:	4b13      	ldr	r3, [pc, #76]	@ (800a970 <tcp_receive+0x5f0>)
 800a922:	f240 5297 	movw	r2, #1431	@ 0x597
 800a926:	4916      	ldr	r1, [pc, #88]	@ (800a980 <tcp_receive+0x600>)
 800a928:	4813      	ldr	r0, [pc, #76]	@ (800a978 <tcp_receive+0x5f8>)
 800a92a:	f006 fe6f 	bl	801160c <iprintf>
      inseg.len -= off;
 800a92e:	4b0f      	ldr	r3, [pc, #60]	@ (800a96c <tcp_receive+0x5ec>)
 800a930:	891a      	ldrh	r2, [r3, #8]
 800a932:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	b29a      	uxth	r2, r3
 800a93a:	4b0c      	ldr	r3, [pc, #48]	@ (800a96c <tcp_receive+0x5ec>)
 800a93c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a93e:	4b0b      	ldr	r3, [pc, #44]	@ (800a96c <tcp_receive+0x5ec>)
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	891a      	ldrh	r2, [r3, #8]
 800a944:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800a94c:	e02a      	b.n	800a9a4 <tcp_receive+0x624>
 800a94e:	bf00      	nop
 800a950:	08013dc0 	.word	0x08013dc0
 800a954:	08013dc8 	.word	0x08013dc8
 800a958:	20008418 	.word	0x20008418
 800a95c:	20008414 	.word	0x20008414
 800a960:	200083d8 	.word	0x200083d8
 800a964:	2000841a 	.word	0x2000841a
 800a968:	20008410 	.word	0x20008410
 800a96c:	200083f0 	.word	0x200083f0
 800a970:	08013a58 	.word	0x08013a58
 800a974:	08013dd0 	.word	0x08013dd0
 800a978:	08013aa4 	.word	0x08013aa4
 800a97c:	08013de0 	.word	0x08013de0
 800a980:	08013df0 	.word	0x08013df0
        off -= p->len;
 800a984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a986:	895b      	ldrh	r3, [r3, #10]
 800a988:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a994:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a996:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a99a:	2200      	movs	r2, #0
 800a99c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a99e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800a9a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9a6:	895b      	ldrh	r3, [r3, #10]
 800a9a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d8e9      	bhi.n	800a984 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a9b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a9b8:	f7fc f97e 	bl	8006cb8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c0:	4a90      	ldr	r2, [pc, #576]	@ (800ac04 <tcp_receive+0x884>)
 800a9c2:	6013      	str	r3, [r2, #0]
 800a9c4:	4b90      	ldr	r3, [pc, #576]	@ (800ac08 <tcp_receive+0x888>)
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	4a8e      	ldr	r2, [pc, #568]	@ (800ac04 <tcp_receive+0x884>)
 800a9ca:	6812      	ldr	r2, [r2, #0]
 800a9cc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a9ce:	e00d      	b.n	800a9ec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a9d0:	4b8c      	ldr	r3, [pc, #560]	@ (800ac04 <tcp_receive+0x884>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	da06      	bge.n	800a9ec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	8b5b      	ldrh	r3, [r3, #26]
 800a9e2:	f043 0302 	orr.w	r3, r3, #2
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a9ec:	4b85      	ldr	r3, [pc, #532]	@ (800ac04 <tcp_receive+0x884>)
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f2c0 8427 	blt.w	800b24a <tcp_receive+0xeca>
 800a9fc:	4b81      	ldr	r3, [pc, #516]	@ (800ac04 <tcp_receive+0x884>)
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa04:	6879      	ldr	r1, [r7, #4]
 800aa06:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800aa08:	440b      	add	r3, r1
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f300 841b 	bgt.w	800b24a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa18:	4b7a      	ldr	r3, [pc, #488]	@ (800ac04 <tcp_receive+0x884>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	f040 8298 	bne.w	800af52 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800aa22:	4b79      	ldr	r3, [pc, #484]	@ (800ac08 <tcp_receive+0x888>)
 800aa24:	891c      	ldrh	r4, [r3, #8]
 800aa26:	4b78      	ldr	r3, [pc, #480]	@ (800ac08 <tcp_receive+0x888>)
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	899b      	ldrh	r3, [r3, #12]
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fa fe6a 	bl	8005708 <lwip_htons>
 800aa34:	4603      	mov	r3, r0
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	f003 0303 	and.w	r3, r3, #3
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d001      	beq.n	800aa44 <tcp_receive+0x6c4>
 800aa40:	2301      	movs	r3, #1
 800aa42:	e000      	b.n	800aa46 <tcp_receive+0x6c6>
 800aa44:	2300      	movs	r3, #0
 800aa46:	4423      	add	r3, r4
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	4b70      	ldr	r3, [pc, #448]	@ (800ac0c <tcp_receive+0x88c>)
 800aa4c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800aa52:	4b6e      	ldr	r3, [pc, #440]	@ (800ac0c <tcp_receive+0x88c>)
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d274      	bcs.n	800ab44 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa5a:	4b6b      	ldr	r3, [pc, #428]	@ (800ac08 <tcp_receive+0x888>)
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	899b      	ldrh	r3, [r3, #12]
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fa fe50 	bl	8005708 <lwip_htons>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	f003 0301 	and.w	r3, r3, #1
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d01e      	beq.n	800aab2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800aa74:	4b64      	ldr	r3, [pc, #400]	@ (800ac08 <tcp_receive+0x888>)
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	899b      	ldrh	r3, [r3, #12]
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	b21b      	sxth	r3, r3
 800aa7e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aa82:	b21c      	sxth	r4, r3
 800aa84:	4b60      	ldr	r3, [pc, #384]	@ (800ac08 <tcp_receive+0x888>)
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	899b      	ldrh	r3, [r3, #12]
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fa fe3b 	bl	8005708 <lwip_htons>
 800aa92:	4603      	mov	r3, r0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fa fe33 	bl	8005708 <lwip_htons>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	b21b      	sxth	r3, r3
 800aaa6:	4323      	orrs	r3, r4
 800aaa8:	b21a      	sxth	r2, r3
 800aaaa:	4b57      	ldr	r3, [pc, #348]	@ (800ac08 <tcp_receive+0x888>)
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	b292      	uxth	r2, r2
 800aab0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800aab6:	4b54      	ldr	r3, [pc, #336]	@ (800ac08 <tcp_receive+0x888>)
 800aab8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aaba:	4b53      	ldr	r3, [pc, #332]	@ (800ac08 <tcp_receive+0x888>)
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	899b      	ldrh	r3, [r3, #12]
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fa fe20 	bl	8005708 <lwip_htons>
 800aac8:	4603      	mov	r3, r0
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	f003 0302 	and.w	r3, r3, #2
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d005      	beq.n	800aae0 <tcp_receive+0x760>
            inseg.len -= 1;
 800aad4:	4b4c      	ldr	r3, [pc, #304]	@ (800ac08 <tcp_receive+0x888>)
 800aad6:	891b      	ldrh	r3, [r3, #8]
 800aad8:	3b01      	subs	r3, #1
 800aada:	b29a      	uxth	r2, r3
 800aadc:	4b4a      	ldr	r3, [pc, #296]	@ (800ac08 <tcp_receive+0x888>)
 800aade:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800aae0:	4b49      	ldr	r3, [pc, #292]	@ (800ac08 <tcp_receive+0x888>)
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	4a48      	ldr	r2, [pc, #288]	@ (800ac08 <tcp_receive+0x888>)
 800aae6:	8912      	ldrh	r2, [r2, #8]
 800aae8:	4611      	mov	r1, r2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fb ffe4 	bl	8006ab8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aaf0:	4b45      	ldr	r3, [pc, #276]	@ (800ac08 <tcp_receive+0x888>)
 800aaf2:	891c      	ldrh	r4, [r3, #8]
 800aaf4:	4b44      	ldr	r3, [pc, #272]	@ (800ac08 <tcp_receive+0x888>)
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	899b      	ldrh	r3, [r3, #12]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fa fe03 	bl	8005708 <lwip_htons>
 800ab02:	4603      	mov	r3, r0
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	f003 0303 	and.w	r3, r3, #3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <tcp_receive+0x792>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e000      	b.n	800ab14 <tcp_receive+0x794>
 800ab12:	2300      	movs	r3, #0
 800ab14:	4423      	add	r3, r4
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	4b3c      	ldr	r3, [pc, #240]	@ (800ac0c <tcp_receive+0x88c>)
 800ab1a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ab1c:	4b3b      	ldr	r3, [pc, #236]	@ (800ac0c <tcp_receive+0x88c>)
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	461a      	mov	r2, r3
 800ab22:	4b38      	ldr	r3, [pc, #224]	@ (800ac04 <tcp_receive+0x884>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	441a      	add	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ab30:	440b      	add	r3, r1
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d006      	beq.n	800ab44 <tcp_receive+0x7c4>
 800ab36:	4b36      	ldr	r3, [pc, #216]	@ (800ac10 <tcp_receive+0x890>)
 800ab38:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800ab3c:	4935      	ldr	r1, [pc, #212]	@ (800ac14 <tcp_receive+0x894>)
 800ab3e:	4836      	ldr	r0, [pc, #216]	@ (800ac18 <tcp_receive+0x898>)
 800ab40:	f006 fd64 	bl	801160c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 80e6 	beq.w	800ad1a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ab4e:	4b2e      	ldr	r3, [pc, #184]	@ (800ac08 <tcp_receive+0x888>)
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	899b      	ldrh	r3, [r3, #12]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fa fdd6 	bl	8005708 <lwip_htons>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d010      	beq.n	800ab8a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ab68:	e00a      	b.n	800ab80 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab6e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f7fd fd51 	bl	8008622 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1f0      	bne.n	800ab6a <tcp_receive+0x7ea>
 800ab88:	e0c7      	b.n	800ad1a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ab90:	e051      	b.n	800ac36 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ab92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	899b      	ldrh	r3, [r3, #12]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fa fdb4 	bl	8005708 <lwip_htons>
 800aba0:	4603      	mov	r3, r0
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d03c      	beq.n	800ac26 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800abac:	4b16      	ldr	r3, [pc, #88]	@ (800ac08 <tcp_receive+0x888>)
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	899b      	ldrh	r3, [r3, #12]
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fa fda7 	bl	8005708 <lwip_htons>
 800abba:	4603      	mov	r3, r0
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d12f      	bne.n	800ac26 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800abc6:	4b10      	ldr	r3, [pc, #64]	@ (800ac08 <tcp_receive+0x888>)
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	899b      	ldrh	r3, [r3, #12]
 800abcc:	b29c      	uxth	r4, r3
 800abce:	2001      	movs	r0, #1
 800abd0:	f7fa fd9a 	bl	8005708 <lwip_htons>
 800abd4:	4603      	mov	r3, r0
 800abd6:	461a      	mov	r2, r3
 800abd8:	4b0b      	ldr	r3, [pc, #44]	@ (800ac08 <tcp_receive+0x888>)
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	4322      	orrs	r2, r4
 800abde:	b292      	uxth	r2, r2
 800abe0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800abe2:	4b09      	ldr	r3, [pc, #36]	@ (800ac08 <tcp_receive+0x888>)
 800abe4:	891c      	ldrh	r4, [r3, #8]
 800abe6:	4b08      	ldr	r3, [pc, #32]	@ (800ac08 <tcp_receive+0x888>)
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	899b      	ldrh	r3, [r3, #12]
 800abec:	b29b      	uxth	r3, r3
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fa fd8a 	bl	8005708 <lwip_htons>
 800abf4:	4603      	mov	r3, r0
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	f003 0303 	and.w	r3, r3, #3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00d      	beq.n	800ac1c <tcp_receive+0x89c>
 800ac00:	2301      	movs	r3, #1
 800ac02:	e00c      	b.n	800ac1e <tcp_receive+0x89e>
 800ac04:	20008410 	.word	0x20008410
 800ac08:	200083f0 	.word	0x200083f0
 800ac0c:	2000841a 	.word	0x2000841a
 800ac10:	08013a58 	.word	0x08013a58
 800ac14:	08013e00 	.word	0x08013e00
 800ac18:	08013aa4 	.word	0x08013aa4
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	4423      	add	r3, r4
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	4b98      	ldr	r3, [pc, #608]	@ (800ae84 <tcp_receive+0xb04>)
 800ac24:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ac26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac28:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ac2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800ac30:	6938      	ldr	r0, [r7, #16]
 800ac32:	f7fd fcf6 	bl	8008622 <tcp_seg_free>
            while (next &&
 800ac36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00e      	beq.n	800ac5a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ac3c:	4b91      	ldr	r3, [pc, #580]	@ (800ae84 <tcp_receive+0xb04>)
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	461a      	mov	r2, r3
 800ac42:	4b91      	ldr	r3, [pc, #580]	@ (800ae88 <tcp_receive+0xb08>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	441a      	add	r2, r3
 800ac48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac50:	8909      	ldrh	r1, [r1, #8]
 800ac52:	440b      	add	r3, r1
 800ac54:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	da9b      	bge.n	800ab92 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ac5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d059      	beq.n	800ad14 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ac60:	4b88      	ldr	r3, [pc, #544]	@ (800ae84 <tcp_receive+0xb04>)
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	461a      	mov	r2, r3
 800ac66:	4b88      	ldr	r3, [pc, #544]	@ (800ae88 <tcp_receive+0xb08>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	441a      	add	r2, r3
 800ac6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	dd4d      	ble.n	800ad14 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	4b81      	ldr	r3, [pc, #516]	@ (800ae88 <tcp_receive+0xb08>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	4b80      	ldr	r3, [pc, #512]	@ (800ae8c <tcp_receive+0xb0c>)
 800ac8c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ac8e:	4b7f      	ldr	r3, [pc, #508]	@ (800ae8c <tcp_receive+0xb0c>)
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	899b      	ldrh	r3, [r3, #12]
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fa fd36 	bl	8005708 <lwip_htons>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	f003 0302 	and.w	r3, r3, #2
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d005      	beq.n	800acb4 <tcp_receive+0x934>
                inseg.len -= 1;
 800aca8:	4b78      	ldr	r3, [pc, #480]	@ (800ae8c <tcp_receive+0xb0c>)
 800acaa:	891b      	ldrh	r3, [r3, #8]
 800acac:	3b01      	subs	r3, #1
 800acae:	b29a      	uxth	r2, r3
 800acb0:	4b76      	ldr	r3, [pc, #472]	@ (800ae8c <tcp_receive+0xb0c>)
 800acb2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800acb4:	4b75      	ldr	r3, [pc, #468]	@ (800ae8c <tcp_receive+0xb0c>)
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	4a74      	ldr	r2, [pc, #464]	@ (800ae8c <tcp_receive+0xb0c>)
 800acba:	8912      	ldrh	r2, [r2, #8]
 800acbc:	4611      	mov	r1, r2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fb fefa 	bl	8006ab8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800acc4:	4b71      	ldr	r3, [pc, #452]	@ (800ae8c <tcp_receive+0xb0c>)
 800acc6:	891c      	ldrh	r4, [r3, #8]
 800acc8:	4b70      	ldr	r3, [pc, #448]	@ (800ae8c <tcp_receive+0xb0c>)
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	899b      	ldrh	r3, [r3, #12]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fa fd19 	bl	8005708 <lwip_htons>
 800acd6:	4603      	mov	r3, r0
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	f003 0303 	and.w	r3, r3, #3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <tcp_receive+0x966>
 800ace2:	2301      	movs	r3, #1
 800ace4:	e000      	b.n	800ace8 <tcp_receive+0x968>
 800ace6:	2300      	movs	r3, #0
 800ace8:	4423      	add	r3, r4
 800acea:	b29a      	uxth	r2, r3
 800acec:	4b65      	ldr	r3, [pc, #404]	@ (800ae84 <tcp_receive+0xb04>)
 800acee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800acf0:	4b64      	ldr	r3, [pc, #400]	@ (800ae84 <tcp_receive+0xb04>)
 800acf2:	881b      	ldrh	r3, [r3, #0]
 800acf4:	461a      	mov	r2, r3
 800acf6:	4b64      	ldr	r3, [pc, #400]	@ (800ae88 <tcp_receive+0xb08>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	441a      	add	r2, r3
 800acfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d006      	beq.n	800ad14 <tcp_receive+0x994>
 800ad06:	4b62      	ldr	r3, [pc, #392]	@ (800ae90 <tcp_receive+0xb10>)
 800ad08:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800ad0c:	4961      	ldr	r1, [pc, #388]	@ (800ae94 <tcp_receive+0xb14>)
 800ad0e:	4862      	ldr	r0, [pc, #392]	@ (800ae98 <tcp_receive+0xb18>)
 800ad10:	f006 fc7c 	bl	801160c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad18:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ad1a:	4b5a      	ldr	r3, [pc, #360]	@ (800ae84 <tcp_receive+0xb04>)
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	4b59      	ldr	r3, [pc, #356]	@ (800ae88 <tcp_receive+0xb08>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	441a      	add	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ad2e:	4b55      	ldr	r3, [pc, #340]	@ (800ae84 <tcp_receive+0xb04>)
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d206      	bcs.n	800ad44 <tcp_receive+0x9c4>
 800ad36:	4b56      	ldr	r3, [pc, #344]	@ (800ae90 <tcp_receive+0xb10>)
 800ad38:	f240 6207 	movw	r2, #1543	@ 0x607
 800ad3c:	4957      	ldr	r1, [pc, #348]	@ (800ae9c <tcp_receive+0xb1c>)
 800ad3e:	4856      	ldr	r0, [pc, #344]	@ (800ae98 <tcp_receive+0xb18>)
 800ad40:	f006 fc64 	bl	801160c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ad48:	4b4e      	ldr	r3, [pc, #312]	@ (800ae84 <tcp_receive+0xb04>)
 800ad4a:	881b      	ldrh	r3, [r3, #0]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7fc ff3d 	bl	8007bd4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ad5a:	4b4c      	ldr	r3, [pc, #304]	@ (800ae8c <tcp_receive+0xb0c>)
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	891b      	ldrh	r3, [r3, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d006      	beq.n	800ad72 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ad64:	4b49      	ldr	r3, [pc, #292]	@ (800ae8c <tcp_receive+0xb0c>)
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	4a4d      	ldr	r2, [pc, #308]	@ (800aea0 <tcp_receive+0xb20>)
 800ad6a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ad6c:	4b47      	ldr	r3, [pc, #284]	@ (800ae8c <tcp_receive+0xb0c>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ad72:	4b46      	ldr	r3, [pc, #280]	@ (800ae8c <tcp_receive+0xb0c>)
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	899b      	ldrh	r3, [r3, #12]
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fa fcc4 	bl	8005708 <lwip_htons>
 800ad80:	4603      	mov	r3, r0
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 80b8 	beq.w	800aefe <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ad8e:	4b45      	ldr	r3, [pc, #276]	@ (800aea4 <tcp_receive+0xb24>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	f043 0320 	orr.w	r3, r3, #32
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	4b42      	ldr	r3, [pc, #264]	@ (800aea4 <tcp_receive+0xb24>)
 800ad9a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ad9c:	e0af      	b.n	800aefe <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ada2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	4a36      	ldr	r2, [pc, #216]	@ (800ae88 <tcp_receive+0xb08>)
 800adae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	891b      	ldrh	r3, [r3, #8]
 800adb4:	461c      	mov	r4, r3
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	899b      	ldrh	r3, [r3, #12]
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fa fca2 	bl	8005708 <lwip_htons>
 800adc4:	4603      	mov	r3, r0
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	f003 0303 	and.w	r3, r3, #3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <tcp_receive+0xa54>
 800add0:	2301      	movs	r3, #1
 800add2:	e000      	b.n	800add6 <tcp_receive+0xa56>
 800add4:	2300      	movs	r3, #0
 800add6:	191a      	adds	r2, r3, r4
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800addc:	441a      	add	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ade6:	461c      	mov	r4, r3
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	891b      	ldrh	r3, [r3, #8]
 800adec:	461d      	mov	r5, r3
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	899b      	ldrh	r3, [r3, #12]
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fa fc86 	bl	8005708 <lwip_htons>
 800adfc:	4603      	mov	r3, r0
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	f003 0303 	and.w	r3, r3, #3
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <tcp_receive+0xa8c>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e000      	b.n	800ae0e <tcp_receive+0xa8e>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	442b      	add	r3, r5
 800ae10:	429c      	cmp	r4, r3
 800ae12:	d206      	bcs.n	800ae22 <tcp_receive+0xaa2>
 800ae14:	4b1e      	ldr	r3, [pc, #120]	@ (800ae90 <tcp_receive+0xb10>)
 800ae16:	f240 622b 	movw	r2, #1579	@ 0x62b
 800ae1a:	4923      	ldr	r1, [pc, #140]	@ (800aea8 <tcp_receive+0xb28>)
 800ae1c:	481e      	ldr	r0, [pc, #120]	@ (800ae98 <tcp_receive+0xb18>)
 800ae1e:	f006 fbf5 	bl	801160c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	891b      	ldrh	r3, [r3, #8]
 800ae26:	461c      	mov	r4, r3
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	899b      	ldrh	r3, [r3, #12]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fa fc69 	bl	8005708 <lwip_htons>
 800ae36:	4603      	mov	r3, r0
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	f003 0303 	and.w	r3, r3, #3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d001      	beq.n	800ae46 <tcp_receive+0xac6>
 800ae42:	2301      	movs	r3, #1
 800ae44:	e000      	b.n	800ae48 <tcp_receive+0xac8>
 800ae46:	2300      	movs	r3, #0
 800ae48:	1919      	adds	r1, r3, r4
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ae4e:	b28b      	uxth	r3, r1
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7fc febb 	bl	8007bd4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	891b      	ldrh	r3, [r3, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d028      	beq.n	800aeba <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ae68:	4b0d      	ldr	r3, [pc, #52]	@ (800aea0 <tcp_receive+0xb20>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d01d      	beq.n	800aeac <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ae70:	4b0b      	ldr	r3, [pc, #44]	@ (800aea0 <tcp_receive+0xb20>)
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	f7fc f864 	bl	8006f48 <pbuf_cat>
 800ae80:	e018      	b.n	800aeb4 <tcp_receive+0xb34>
 800ae82:	bf00      	nop
 800ae84:	2000841a 	.word	0x2000841a
 800ae88:	20008410 	.word	0x20008410
 800ae8c:	200083f0 	.word	0x200083f0
 800ae90:	08013a58 	.word	0x08013a58
 800ae94:	08013e38 	.word	0x08013e38
 800ae98:	08013aa4 	.word	0x08013aa4
 800ae9c:	08013e74 	.word	0x08013e74
 800aea0:	20008420 	.word	0x20008420
 800aea4:	2000841d 	.word	0x2000841d
 800aea8:	08013e94 	.word	0x08013e94
            } else {
              recv_data = cseg->p;
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	4a70      	ldr	r2, [pc, #448]	@ (800b074 <tcp_receive+0xcf4>)
 800aeb2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	899b      	ldrh	r3, [r3, #12]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fa fc20 	bl	8005708 <lwip_htons>
 800aec8:	4603      	mov	r3, r0
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f003 0301 	and.w	r3, r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00d      	beq.n	800aef0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800aed4:	4b68      	ldr	r3, [pc, #416]	@ (800b078 <tcp_receive+0xcf8>)
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	f043 0320 	orr.w	r3, r3, #32
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	4b66      	ldr	r3, [pc, #408]	@ (800b078 <tcp_receive+0xcf8>)
 800aee0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	7d1b      	ldrb	r3, [r3, #20]
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	d102      	bne.n	800aef0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2207      	movs	r2, #7
 800aeee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800aef8:	68b8      	ldr	r0, [r7, #8]
 800aefa:	f7fd fb92 	bl	8008622 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af02:	2b00      	cmp	r3, #0
 800af04:	d008      	beq.n	800af18 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800af12:	429a      	cmp	r2, r3
 800af14:	f43f af43 	beq.w	800ad9e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	8b5b      	ldrh	r3, [r3, #26]
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00e      	beq.n	800af42 <tcp_receive+0xbc2>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	8b5b      	ldrh	r3, [r3, #26]
 800af28:	f023 0301 	bic.w	r3, r3, #1
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	835a      	strh	r2, [r3, #26]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	8b5b      	ldrh	r3, [r3, #26]
 800af36:	f043 0302 	orr.w	r3, r3, #2
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800af40:	e187      	b.n	800b252 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	8b5b      	ldrh	r3, [r3, #26]
 800af46:	f043 0301 	orr.w	r3, r3, #1
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800af50:	e17f      	b.n	800b252 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af56:	2b00      	cmp	r3, #0
 800af58:	d106      	bne.n	800af68 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800af5a:	4848      	ldr	r0, [pc, #288]	@ (800b07c <tcp_receive+0xcfc>)
 800af5c:	f7fd fb7a 	bl	8008654 <tcp_seg_copy>
 800af60:	4602      	mov	r2, r0
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	675a      	str	r2, [r3, #116]	@ 0x74
 800af66:	e16c      	b.n	800b242 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800af68:	2300      	movs	r3, #0
 800af6a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af70:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af72:	e156      	b.n	800b222 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800af74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	4b41      	ldr	r3, [pc, #260]	@ (800b080 <tcp_receive+0xd00>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d11d      	bne.n	800afbe <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800af82:	4b3e      	ldr	r3, [pc, #248]	@ (800b07c <tcp_receive+0xcfc>)
 800af84:	891a      	ldrh	r2, [r3, #8]
 800af86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af88:	891b      	ldrh	r3, [r3, #8]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	f240 814e 	bls.w	800b22c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800af90:	483a      	ldr	r0, [pc, #232]	@ (800b07c <tcp_receive+0xcfc>)
 800af92:	f7fd fb5f 	bl	8008654 <tcp_seg_copy>
 800af96:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 8148 	beq.w	800b230 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800afa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d003      	beq.n	800afae <tcp_receive+0xc2e>
                    prev->next = cseg;
 800afa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afa8:	697a      	ldr	r2, [r7, #20]
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	e002      	b.n	800afb4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800afb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800afb6:	6978      	ldr	r0, [r7, #20]
 800afb8:	f7ff f8de 	bl	800a178 <tcp_oos_insert_segment>
                }
                break;
 800afbc:	e138      	b.n	800b230 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800afbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d117      	bne.n	800aff4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800afc4:	4b2e      	ldr	r3, [pc, #184]	@ (800b080 <tcp_receive+0xd00>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	da57      	bge.n	800b084 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800afd4:	4829      	ldr	r0, [pc, #164]	@ (800b07c <tcp_receive+0xcfc>)
 800afd6:	f7fd fb3d 	bl	8008654 <tcp_seg_copy>
 800afda:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 8128 	beq.w	800b234 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	69ba      	ldr	r2, [r7, #24]
 800afe8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800afea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800afec:	69b8      	ldr	r0, [r7, #24]
 800afee:	f7ff f8c3 	bl	800a178 <tcp_oos_insert_segment>
                  }
                  break;
 800aff2:	e11f      	b.n	800b234 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800aff4:	4b22      	ldr	r3, [pc, #136]	@ (800b080 <tcp_receive+0xd00>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	3b01      	subs	r3, #1
 800b002:	2b00      	cmp	r3, #0
 800b004:	db3e      	blt.n	800b084 <tcp_receive+0xd04>
 800b006:	4b1e      	ldr	r3, [pc, #120]	@ (800b080 <tcp_receive+0xd00>)
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	3301      	adds	r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	dc35      	bgt.n	800b084 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b018:	4818      	ldr	r0, [pc, #96]	@ (800b07c <tcp_receive+0xcfc>)
 800b01a:	f7fd fb1b 	bl	8008654 <tcp_seg_copy>
 800b01e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	2b00      	cmp	r3, #0
 800b024:	f000 8108 	beq.w	800b238 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b030:	8912      	ldrh	r2, [r2, #8]
 800b032:	441a      	add	r2, r3
 800b034:	4b12      	ldr	r3, [pc, #72]	@ (800b080 <tcp_receive+0xd00>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	dd12      	ble.n	800b064 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b03e:	4b10      	ldr	r3, [pc, #64]	@ (800b080 <tcp_receive+0xd00>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	b29a      	uxth	r2, r3
 800b044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	b29a      	uxth	r2, r3
 800b050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b052:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b05a:	891b      	ldrh	r3, [r3, #8]
 800b05c:	4619      	mov	r1, r3
 800b05e:	4610      	mov	r0, r2
 800b060:	f7fb fd2a 	bl	8006ab8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b066:	69fa      	ldr	r2, [r7, #28]
 800b068:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b06a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b06c:	69f8      	ldr	r0, [r7, #28]
 800b06e:	f7ff f883 	bl	800a178 <tcp_oos_insert_segment>
                  }
                  break;
 800b072:	e0e1      	b.n	800b238 <tcp_receive+0xeb8>
 800b074:	20008420 	.word	0x20008420
 800b078:	2000841d 	.word	0x2000841d
 800b07c:	200083f0 	.word	0x200083f0
 800b080:	20008410 	.word	0x20008410
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b086:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f040 80c5 	bne.w	800b21c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b092:	4b7f      	ldr	r3, [pc, #508]	@ (800b290 <tcp_receive+0xf10>)
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f340 80bc 	ble.w	800b21c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	899b      	ldrh	r3, [r3, #12]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fa fb2b 	bl	8005708 <lwip_htons>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f040 80be 	bne.w	800b23c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b0c0:	4874      	ldr	r0, [pc, #464]	@ (800b294 <tcp_receive+0xf14>)
 800b0c2:	f7fd fac7 	bl	8008654 <tcp_seg_copy>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 80b5 	beq.w	800b240 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0de:	8912      	ldrh	r2, [r2, #8]
 800b0e0:	441a      	add	r2, r3
 800b0e2:	4b6b      	ldr	r3, [pc, #428]	@ (800b290 <tcp_receive+0xf10>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dd12      	ble.n	800b112 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b0ec:	4b68      	ldr	r3, [pc, #416]	@ (800b290 <tcp_receive+0xf10>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b100:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b108:	891b      	ldrh	r3, [r3, #8]
 800b10a:	4619      	mov	r1, r3
 800b10c:	4610      	mov	r0, r2
 800b10e:	f7fb fcd3 	bl	8006ab8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b112:	4b61      	ldr	r3, [pc, #388]	@ (800b298 <tcp_receive+0xf18>)
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	4b5d      	ldr	r3, [pc, #372]	@ (800b290 <tcp_receive+0xf10>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	441a      	add	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b122:	6879      	ldr	r1, [r7, #4]
 800b124:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b126:	440b      	add	r3, r1
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f340 8088 	ble.w	800b240 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	899b      	ldrh	r3, [r3, #12]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fa fae4 	bl	8005708 <lwip_htons>
 800b140:	4603      	mov	r3, r0
 800b142:	b2db      	uxtb	r3, r3
 800b144:	f003 0301 	and.w	r3, r3, #1
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d021      	beq.n	800b190 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	899b      	ldrh	r3, [r3, #12]
 800b154:	b29b      	uxth	r3, r3
 800b156:	b21b      	sxth	r3, r3
 800b158:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b15c:	b21c      	sxth	r4, r3
 800b15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	899b      	ldrh	r3, [r3, #12]
 800b166:	b29b      	uxth	r3, r3
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fa facd 	bl	8005708 <lwip_htons>
 800b16e:	4603      	mov	r3, r0
 800b170:	b2db      	uxtb	r3, r3
 800b172:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b176:	b29b      	uxth	r3, r3
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fa fac5 	bl	8005708 <lwip_htons>
 800b17e:	4603      	mov	r3, r0
 800b180:	b21b      	sxth	r3, r3
 800b182:	4323      	orrs	r3, r4
 800b184:	b21a      	sxth	r2, r3
 800b186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	b292      	uxth	r2, r2
 800b18e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b194:	b29a      	uxth	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b19a:	4413      	add	r3, r2
 800b19c:	b299      	uxth	r1, r3
 800b19e:	4b3c      	ldr	r3, [pc, #240]	@ (800b290 <tcp_receive+0xf10>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	1a8a      	subs	r2, r1, r2
 800b1aa:	b292      	uxth	r2, r2
 800b1ac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	891b      	ldrh	r3, [r3, #8]
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	4610      	mov	r0, r2
 800b1be:	f7fb fc7b 	bl	8006ab8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	891c      	ldrh	r4, [r3, #8]
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	899b      	ldrh	r3, [r3, #12]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fa fa98 	bl	8005708 <lwip_htons>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	f003 0303 	and.w	r3, r3, #3
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d001      	beq.n	800b1e8 <tcp_receive+0xe68>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e000      	b.n	800b1ea <tcp_receive+0xe6a>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	4423      	add	r3, r4
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	4b2a      	ldr	r3, [pc, #168]	@ (800b298 <tcp_receive+0xf18>)
 800b1f0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b1f2:	4b29      	ldr	r3, [pc, #164]	@ (800b298 <tcp_receive+0xf18>)
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	4b25      	ldr	r3, [pc, #148]	@ (800b290 <tcp_receive+0xf10>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	441a      	add	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b202:	6879      	ldr	r1, [r7, #4]
 800b204:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b206:	440b      	add	r3, r1
 800b208:	429a      	cmp	r2, r3
 800b20a:	d019      	beq.n	800b240 <tcp_receive+0xec0>
 800b20c:	4b23      	ldr	r3, [pc, #140]	@ (800b29c <tcp_receive+0xf1c>)
 800b20e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800b212:	4923      	ldr	r1, [pc, #140]	@ (800b2a0 <tcp_receive+0xf20>)
 800b214:	4823      	ldr	r0, [pc, #140]	@ (800b2a4 <tcp_receive+0xf24>)
 800b216:	f006 f9f9 	bl	801160c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b21a:	e011      	b.n	800b240 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b224:	2b00      	cmp	r3, #0
 800b226:	f47f aea5 	bne.w	800af74 <tcp_receive+0xbf4>
 800b22a:	e00a      	b.n	800b242 <tcp_receive+0xec2>
                break;
 800b22c:	bf00      	nop
 800b22e:	e008      	b.n	800b242 <tcp_receive+0xec2>
                break;
 800b230:	bf00      	nop
 800b232:	e006      	b.n	800b242 <tcp_receive+0xec2>
                  break;
 800b234:	bf00      	nop
 800b236:	e004      	b.n	800b242 <tcp_receive+0xec2>
                  break;
 800b238:	bf00      	nop
 800b23a:	e002      	b.n	800b242 <tcp_receive+0xec2>
                  break;
 800b23c:	bf00      	nop
 800b23e:	e000      	b.n	800b242 <tcp_receive+0xec2>
                break;
 800b240:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f001 fe88 	bl	800cf58 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b248:	e003      	b.n	800b252 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f001 fe84 	bl	800cf58 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b250:	e01a      	b.n	800b288 <tcp_receive+0xf08>
 800b252:	e019      	b.n	800b288 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b254:	4b0e      	ldr	r3, [pc, #56]	@ (800b290 <tcp_receive+0xf10>)
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	db0a      	blt.n	800b278 <tcp_receive+0xef8>
 800b262:	4b0b      	ldr	r3, [pc, #44]	@ (800b290 <tcp_receive+0xf10>)
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b26a:	6879      	ldr	r1, [r7, #4]
 800b26c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b26e:	440b      	add	r3, r1
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	3301      	adds	r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	dd07      	ble.n	800b288 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	8b5b      	ldrh	r3, [r3, #26]
 800b27c:	f043 0302 	orr.w	r3, r3, #2
 800b280:	b29a      	uxth	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b286:	e7ff      	b.n	800b288 <tcp_receive+0xf08>
 800b288:	bf00      	nop
 800b28a:	3750      	adds	r7, #80	@ 0x50
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bdb0      	pop	{r4, r5, r7, pc}
 800b290:	20008410 	.word	0x20008410
 800b294:	200083f0 	.word	0x200083f0
 800b298:	2000841a 	.word	0x2000841a
 800b29c:	08013a58 	.word	0x08013a58
 800b2a0:	08013e00 	.word	0x08013e00
 800b2a4:	08013aa4 	.word	0x08013aa4

0800b2a8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b2ae:	4b15      	ldr	r3, [pc, #84]	@ (800b304 <tcp_get_next_optbyte+0x5c>)
 800b2b0:	881b      	ldrh	r3, [r3, #0]
 800b2b2:	1c5a      	adds	r2, r3, #1
 800b2b4:	b291      	uxth	r1, r2
 800b2b6:	4a13      	ldr	r2, [pc, #76]	@ (800b304 <tcp_get_next_optbyte+0x5c>)
 800b2b8:	8011      	strh	r1, [r2, #0]
 800b2ba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b2bc:	4b12      	ldr	r3, [pc, #72]	@ (800b308 <tcp_get_next_optbyte+0x60>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d004      	beq.n	800b2ce <tcp_get_next_optbyte+0x26>
 800b2c4:	4b11      	ldr	r3, [pc, #68]	@ (800b30c <tcp_get_next_optbyte+0x64>)
 800b2c6:	881b      	ldrh	r3, [r3, #0]
 800b2c8:	88fa      	ldrh	r2, [r7, #6]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d208      	bcs.n	800b2e0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b2ce:	4b10      	ldr	r3, [pc, #64]	@ (800b310 <tcp_get_next_optbyte+0x68>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3314      	adds	r3, #20
 800b2d4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b2d6:	88fb      	ldrh	r3, [r7, #6]
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	4413      	add	r3, r2
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	e00b      	b.n	800b2f8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b2e0:	88fb      	ldrh	r3, [r7, #6]
 800b2e2:	b2da      	uxtb	r2, r3
 800b2e4:	4b09      	ldr	r3, [pc, #36]	@ (800b30c <tcp_get_next_optbyte+0x64>)
 800b2e6:	881b      	ldrh	r3, [r3, #0]
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b2ee:	4b06      	ldr	r3, [pc, #24]	@ (800b308 <tcp_get_next_optbyte+0x60>)
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	797b      	ldrb	r3, [r7, #5]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr
 800b304:	2000840c 	.word	0x2000840c
 800b308:	20008408 	.word	0x20008408
 800b30c:	20008406 	.word	0x20008406
 800b310:	20008400 	.word	0x20008400

0800b314 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d106      	bne.n	800b330 <tcp_parseopt+0x1c>
 800b322:	4b32      	ldr	r3, [pc, #200]	@ (800b3ec <tcp_parseopt+0xd8>)
 800b324:	f240 727d 	movw	r2, #1917	@ 0x77d
 800b328:	4931      	ldr	r1, [pc, #196]	@ (800b3f0 <tcp_parseopt+0xdc>)
 800b32a:	4832      	ldr	r0, [pc, #200]	@ (800b3f4 <tcp_parseopt+0xe0>)
 800b32c:	f006 f96e 	bl	801160c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b330:	4b31      	ldr	r3, [pc, #196]	@ (800b3f8 <tcp_parseopt+0xe4>)
 800b332:	881b      	ldrh	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d056      	beq.n	800b3e6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b338:	4b30      	ldr	r3, [pc, #192]	@ (800b3fc <tcp_parseopt+0xe8>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	801a      	strh	r2, [r3, #0]
 800b33e:	e046      	b.n	800b3ce <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800b340:	f7ff ffb2 	bl	800b2a8 <tcp_get_next_optbyte>
 800b344:	4603      	mov	r3, r0
 800b346:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b348:	7bfb      	ldrb	r3, [r7, #15]
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d006      	beq.n	800b35c <tcp_parseopt+0x48>
 800b34e:	2b02      	cmp	r3, #2
 800b350:	dc2a      	bgt.n	800b3a8 <tcp_parseopt+0x94>
 800b352:	2b00      	cmp	r3, #0
 800b354:	d042      	beq.n	800b3dc <tcp_parseopt+0xc8>
 800b356:	2b01      	cmp	r3, #1
 800b358:	d038      	beq.n	800b3cc <tcp_parseopt+0xb8>
 800b35a:	e025      	b.n	800b3a8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b35c:	f7ff ffa4 	bl	800b2a8 <tcp_get_next_optbyte>
 800b360:	4603      	mov	r3, r0
 800b362:	2b04      	cmp	r3, #4
 800b364:	d13c      	bne.n	800b3e0 <tcp_parseopt+0xcc>
 800b366:	4b25      	ldr	r3, [pc, #148]	@ (800b3fc <tcp_parseopt+0xe8>)
 800b368:	881b      	ldrh	r3, [r3, #0]
 800b36a:	3301      	adds	r3, #1
 800b36c:	4a22      	ldr	r2, [pc, #136]	@ (800b3f8 <tcp_parseopt+0xe4>)
 800b36e:	8812      	ldrh	r2, [r2, #0]
 800b370:	4293      	cmp	r3, r2
 800b372:	da35      	bge.n	800b3e0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b374:	f7ff ff98 	bl	800b2a8 <tcp_get_next_optbyte>
 800b378:	4603      	mov	r3, r0
 800b37a:	021b      	lsls	r3, r3, #8
 800b37c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b37e:	f7ff ff93 	bl	800b2a8 <tcp_get_next_optbyte>
 800b382:	4603      	mov	r3, r0
 800b384:	461a      	mov	r2, r3
 800b386:	89bb      	ldrh	r3, [r7, #12]
 800b388:	4313      	orrs	r3, r2
 800b38a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b38c:	89bb      	ldrh	r3, [r7, #12]
 800b38e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800b392:	d804      	bhi.n	800b39e <tcp_parseopt+0x8a>
 800b394:	89bb      	ldrh	r3, [r7, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <tcp_parseopt+0x8a>
 800b39a:	89ba      	ldrh	r2, [r7, #12]
 800b39c:	e001      	b.n	800b3a2 <tcp_parseopt+0x8e>
 800b39e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800b3a6:	e012      	b.n	800b3ce <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b3a8:	f7ff ff7e 	bl	800b2a8 <tcp_get_next_optbyte>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b3b0:	7afb      	ldrb	r3, [r7, #11]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d916      	bls.n	800b3e4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b3b6:	7afb      	ldrb	r3, [r7, #11]
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	4b10      	ldr	r3, [pc, #64]	@ (800b3fc <tcp_parseopt+0xe8>)
 800b3bc:	881b      	ldrh	r3, [r3, #0]
 800b3be:	4413      	add	r3, r2
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	3b02      	subs	r3, #2
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3fc <tcp_parseopt+0xe8>)
 800b3c8:	801a      	strh	r2, [r3, #0]
 800b3ca:	e000      	b.n	800b3ce <tcp_parseopt+0xba>
          break;
 800b3cc:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b3ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b3fc <tcp_parseopt+0xe8>)
 800b3d0:	881a      	ldrh	r2, [r3, #0]
 800b3d2:	4b09      	ldr	r3, [pc, #36]	@ (800b3f8 <tcp_parseopt+0xe4>)
 800b3d4:	881b      	ldrh	r3, [r3, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d3b2      	bcc.n	800b340 <tcp_parseopt+0x2c>
 800b3da:	e004      	b.n	800b3e6 <tcp_parseopt+0xd2>
          return;
 800b3dc:	bf00      	nop
 800b3de:	e002      	b.n	800b3e6 <tcp_parseopt+0xd2>
            return;
 800b3e0:	bf00      	nop
 800b3e2:	e000      	b.n	800b3e6 <tcp_parseopt+0xd2>
            return;
 800b3e4:	bf00      	nop
      }
    }
  }
}
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	08013a58 	.word	0x08013a58
 800b3f0:	08013ebc 	.word	0x08013ebc
 800b3f4:	08013aa4 	.word	0x08013aa4
 800b3f8:	20008404 	.word	0x20008404
 800b3fc:	2000840c 	.word	0x2000840c

0800b400 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b400:	b480      	push	{r7}
 800b402:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b404:	4b05      	ldr	r3, [pc, #20]	@ (800b41c <tcp_trigger_input_pcb_close+0x1c>)
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	f043 0310 	orr.w	r3, r3, #16
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	4b03      	ldr	r3, [pc, #12]	@ (800b41c <tcp_trigger_input_pcb_close+0x1c>)
 800b410:	701a      	strb	r2, [r3, #0]
}
 800b412:	bf00      	nop
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr
 800b41c:	2000841d 	.word	0x2000841d

0800b420 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00a      	beq.n	800b448 <tcp_route+0x28>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	7a1b      	ldrb	r3, [r3, #8]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d006      	beq.n	800b448 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	7a1b      	ldrb	r3, [r3, #8]
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fb f960 	bl	8006704 <netif_get_by_index>
 800b444:	4603      	mov	r3, r0
 800b446:	e003      	b.n	800b450 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f003 fad3 	bl	800e9f4 <ip4_route>
 800b44e:	4603      	mov	r3, r0
  }
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b458:	b590      	push	{r4, r7, lr}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	603b      	str	r3, [r7, #0]
 800b464:	4613      	mov	r3, r2
 800b466:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d105      	bne.n	800b47a <tcp_create_segment+0x22>
 800b46e:	4b43      	ldr	r3, [pc, #268]	@ (800b57c <tcp_create_segment+0x124>)
 800b470:	22a3      	movs	r2, #163	@ 0xa3
 800b472:	4943      	ldr	r1, [pc, #268]	@ (800b580 <tcp_create_segment+0x128>)
 800b474:	4843      	ldr	r0, [pc, #268]	@ (800b584 <tcp_create_segment+0x12c>)
 800b476:	f006 f8c9 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d105      	bne.n	800b48c <tcp_create_segment+0x34>
 800b480:	4b3e      	ldr	r3, [pc, #248]	@ (800b57c <tcp_create_segment+0x124>)
 800b482:	22a4      	movs	r2, #164	@ 0xa4
 800b484:	4940      	ldr	r1, [pc, #256]	@ (800b588 <tcp_create_segment+0x130>)
 800b486:	483f      	ldr	r0, [pc, #252]	@ (800b584 <tcp_create_segment+0x12c>)
 800b488:	f006 f8c0 	bl	801160c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b48c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	b2db      	uxtb	r3, r3
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b49a:	2003      	movs	r0, #3
 800b49c:	f7fa fdac 	bl	8005ff8 <memp_malloc>
 800b4a0:	6138      	str	r0, [r7, #16]
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d104      	bne.n	800b4b2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b4a8:	68b8      	ldr	r0, [r7, #8]
 800b4aa:	f7fb fc8b 	bl	8006dc4 <pbuf_free>
    return NULL;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	e060      	b.n	800b574 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800b4b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	891a      	ldrh	r2, [r3, #8]
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d205      	bcs.n	800b4de <tcp_create_segment+0x86>
 800b4d2:	4b2a      	ldr	r3, [pc, #168]	@ (800b57c <tcp_create_segment+0x124>)
 800b4d4:	22b0      	movs	r2, #176	@ 0xb0
 800b4d6:	492d      	ldr	r1, [pc, #180]	@ (800b58c <tcp_create_segment+0x134>)
 800b4d8:	482a      	ldr	r0, [pc, #168]	@ (800b584 <tcp_create_segment+0x12c>)
 800b4da:	f006 f897 	bl	801160c <iprintf>
  seg->len = p->tot_len - optlen;
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	891a      	ldrh	r2, [r3, #8]
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b4ee:	2114      	movs	r1, #20
 800b4f0:	68b8      	ldr	r0, [r7, #8]
 800b4f2:	f7fb fbd1 	bl	8006c98 <pbuf_add_header>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d004      	beq.n	800b506 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b4fc:	6938      	ldr	r0, [r7, #16]
 800b4fe:	f7fd f890 	bl	8008622 <tcp_seg_free>
    return NULL;
 800b502:	2300      	movs	r3, #0
 800b504:	e036      	b.n	800b574 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	8ada      	ldrh	r2, [r3, #22]
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	68dc      	ldr	r4, [r3, #12]
 800b518:	4610      	mov	r0, r2
 800b51a:	f7fa f8f5 	bl	8005708 <lwip_htons>
 800b51e:	4603      	mov	r3, r0
 800b520:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	8b1a      	ldrh	r2, [r3, #24]
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	68dc      	ldr	r4, [r3, #12]
 800b52a:	4610      	mov	r0, r2
 800b52c:	f7fa f8ec 	bl	8005708 <lwip_htons>
 800b530:	4603      	mov	r3, r0
 800b532:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	68dc      	ldr	r4, [r3, #12]
 800b538:	6838      	ldr	r0, [r7, #0]
 800b53a:	f7fa f8fb 	bl	8005734 <lwip_htonl>
 800b53e:	4603      	mov	r3, r0
 800b540:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	089b      	lsrs	r3, r3, #2
 800b546:	b2db      	uxtb	r3, r3
 800b548:	3305      	adds	r3, #5
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	031b      	lsls	r3, r3, #12
 800b54e:	b29a      	uxth	r2, r3
 800b550:	79fb      	ldrb	r3, [r7, #7]
 800b552:	b29b      	uxth	r3, r3
 800b554:	4313      	orrs	r3, r2
 800b556:	b29a      	uxth	r2, r3
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	68dc      	ldr	r4, [r3, #12]
 800b55c:	4610      	mov	r0, r2
 800b55e:	f7fa f8d3 	bl	8005708 <lwip_htons>
 800b562:	4603      	mov	r3, r0
 800b564:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	749a      	strb	r2, [r3, #18]
 800b56e:	2200      	movs	r2, #0
 800b570:	74da      	strb	r2, [r3, #19]
  return seg;
 800b572:	693b      	ldr	r3, [r7, #16]
}
 800b574:	4618      	mov	r0, r3
 800b576:	371c      	adds	r7, #28
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd90      	pop	{r4, r7, pc}
 800b57c:	08013ed8 	.word	0x08013ed8
 800b580:	08013f0c 	.word	0x08013f0c
 800b584:	08013f2c 	.word	0x08013f2c
 800b588:	08013f54 	.word	0x08013f54
 800b58c:	08013f78 	.word	0x08013f78

0800b590 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	607b      	str	r3, [r7, #4]
 800b598:	4603      	mov	r3, r0
 800b59a:	73fb      	strb	r3, [r7, #15]
 800b59c:	460b      	mov	r3, r1
 800b59e:	81bb      	strh	r3, [r7, #12]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b5a4:	89bb      	ldrh	r3, [r7, #12]
 800b5a6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d105      	bne.n	800b5ba <tcp_pbuf_prealloc+0x2a>
 800b5ae:	4b30      	ldr	r3, [pc, #192]	@ (800b670 <tcp_pbuf_prealloc+0xe0>)
 800b5b0:	22e8      	movs	r2, #232	@ 0xe8
 800b5b2:	4930      	ldr	r1, [pc, #192]	@ (800b674 <tcp_pbuf_prealloc+0xe4>)
 800b5b4:	4830      	ldr	r0, [pc, #192]	@ (800b678 <tcp_pbuf_prealloc+0xe8>)
 800b5b6:	f006 f829 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b5ba:	6a3b      	ldr	r3, [r7, #32]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d105      	bne.n	800b5cc <tcp_pbuf_prealloc+0x3c>
 800b5c0:	4b2b      	ldr	r3, [pc, #172]	@ (800b670 <tcp_pbuf_prealloc+0xe0>)
 800b5c2:	22e9      	movs	r2, #233	@ 0xe9
 800b5c4:	492d      	ldr	r1, [pc, #180]	@ (800b67c <tcp_pbuf_prealloc+0xec>)
 800b5c6:	482c      	ldr	r0, [pc, #176]	@ (800b678 <tcp_pbuf_prealloc+0xe8>)
 800b5c8:	f006 f820 	bl	801160c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b5cc:	89ba      	ldrh	r2, [r7, #12]
 800b5ce:	897b      	ldrh	r3, [r7, #10]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d221      	bcs.n	800b618 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b5d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b5d8:	f003 0302 	and.w	r3, r3, #2
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d111      	bne.n	800b604 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b5e0:	6a3b      	ldr	r3, [r7, #32]
 800b5e2:	8b5b      	ldrh	r3, [r3, #26]
 800b5e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d115      	bne.n	800b618 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b5ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d007      	beq.n	800b604 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b5f4:	6a3b      	ldr	r3, [r7, #32]
 800b5f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d103      	bne.n	800b604 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b5fc:	6a3b      	ldr	r3, [r7, #32]
 800b5fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800b600:	2b00      	cmp	r3, #0
 800b602:	d009      	beq.n	800b618 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b604:	89bb      	ldrh	r3, [r7, #12]
 800b606:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800b60a:	f023 0203 	bic.w	r2, r3, #3
 800b60e:	897b      	ldrh	r3, [r7, #10]
 800b610:	4293      	cmp	r3, r2
 800b612:	bf28      	it	cs
 800b614:	4613      	movcs	r3, r2
 800b616:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b618:	8af9      	ldrh	r1, [r7, #22]
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
 800b61c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b620:	4618      	mov	r0, r3
 800b622:	f7fb f8eb 	bl	80067fc <pbuf_alloc>
 800b626:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b62e:	2300      	movs	r3, #0
 800b630:	e019      	b.n	800b666 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d006      	beq.n	800b648 <tcp_pbuf_prealloc+0xb8>
 800b63a:	4b0d      	ldr	r3, [pc, #52]	@ (800b670 <tcp_pbuf_prealloc+0xe0>)
 800b63c:	f240 120b 	movw	r2, #267	@ 0x10b
 800b640:	490f      	ldr	r1, [pc, #60]	@ (800b680 <tcp_pbuf_prealloc+0xf0>)
 800b642:	480d      	ldr	r0, [pc, #52]	@ (800b678 <tcp_pbuf_prealloc+0xe8>)
 800b644:	f005 ffe2 	bl	801160c <iprintf>
  *oversize = p->len - length;
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	895a      	ldrh	r2, [r3, #10]
 800b64c:	89bb      	ldrh	r3, [r7, #12]
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	b29a      	uxth	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	89ba      	ldrh	r2, [r7, #12]
 800b65a:	811a      	strh	r2, [r3, #8]
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	891a      	ldrh	r2, [r3, #8]
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	815a      	strh	r2, [r3, #10]
  return p;
 800b664:	693b      	ldr	r3, [r7, #16]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3718      	adds	r7, #24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	08013ed8 	.word	0x08013ed8
 800b674:	08013f90 	.word	0x08013f90
 800b678:	08013f2c 	.word	0x08013f2c
 800b67c:	08013fb4 	.word	0x08013fb4
 800b680:	08013fd4 	.word	0x08013fd4

0800b684 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	460b      	mov	r3, r1
 800b68e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d106      	bne.n	800b6a4 <tcp_write_checks+0x20>
 800b696:	4b33      	ldr	r3, [pc, #204]	@ (800b764 <tcp_write_checks+0xe0>)
 800b698:	f240 1233 	movw	r2, #307	@ 0x133
 800b69c:	4932      	ldr	r1, [pc, #200]	@ (800b768 <tcp_write_checks+0xe4>)
 800b69e:	4833      	ldr	r0, [pc, #204]	@ (800b76c <tcp_write_checks+0xe8>)
 800b6a0:	f005 ffb4 	bl	801160c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	7d1b      	ldrb	r3, [r3, #20]
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d00e      	beq.n	800b6ca <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b6b0:	2b07      	cmp	r3, #7
 800b6b2:	d00a      	beq.n	800b6ca <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d006      	beq.n	800b6ca <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b6c0:	2b03      	cmp	r3, #3
 800b6c2:	d002      	beq.n	800b6ca <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b6c4:	f06f 030a 	mvn.w	r3, #10
 800b6c8:	e048      	b.n	800b75c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b6ca:	887b      	ldrh	r3, [r7, #2]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <tcp_write_checks+0x50>
    return ERR_OK;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	e043      	b.n	800b75c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b6da:	887a      	ldrh	r2, [r7, #2]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d909      	bls.n	800b6f4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	8b5b      	ldrh	r3, [r3, #26]
 800b6e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b6f2:	e033      	b.n	800b75c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b6fa:	2b08      	cmp	r3, #8
 800b6fc:	d909      	bls.n	800b712 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	8b5b      	ldrh	r3, [r3, #26]
 800b702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b706:	b29a      	uxth	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b70c:	f04f 33ff 	mov.w	r3, #4294967295
 800b710:	e024      	b.n	800b75c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00f      	beq.n	800b73c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b720:	2b00      	cmp	r3, #0
 800b722:	d11a      	bne.n	800b75a <tcp_write_checks+0xd6>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d116      	bne.n	800b75a <tcp_write_checks+0xd6>
 800b72c:	4b0d      	ldr	r3, [pc, #52]	@ (800b764 <tcp_write_checks+0xe0>)
 800b72e:	f240 1255 	movw	r2, #341	@ 0x155
 800b732:	490f      	ldr	r1, [pc, #60]	@ (800b770 <tcp_write_checks+0xec>)
 800b734:	480d      	ldr	r0, [pc, #52]	@ (800b76c <tcp_write_checks+0xe8>)
 800b736:	f005 ff69 	bl	801160c <iprintf>
 800b73a:	e00e      	b.n	800b75a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b740:	2b00      	cmp	r3, #0
 800b742:	d103      	bne.n	800b74c <tcp_write_checks+0xc8>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d006      	beq.n	800b75a <tcp_write_checks+0xd6>
 800b74c:	4b05      	ldr	r3, [pc, #20]	@ (800b764 <tcp_write_checks+0xe0>)
 800b74e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800b752:	4908      	ldr	r1, [pc, #32]	@ (800b774 <tcp_write_checks+0xf0>)
 800b754:	4805      	ldr	r0, [pc, #20]	@ (800b76c <tcp_write_checks+0xe8>)
 800b756:	f005 ff59 	bl	801160c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	08013ed8 	.word	0x08013ed8
 800b768:	08013fe8 	.word	0x08013fe8
 800b76c:	08013f2c 	.word	0x08013f2c
 800b770:	08014008 	.word	0x08014008
 800b774:	08014044 	.word	0x08014044

0800b778 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b778:	b590      	push	{r4, r7, lr}
 800b77a:	b09b      	sub	sp, #108	@ 0x6c
 800b77c:	af04      	add	r7, sp, #16
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	4611      	mov	r1, r2
 800b784:	461a      	mov	r2, r3
 800b786:	460b      	mov	r3, r1
 800b788:	80fb      	strh	r3, [r7, #6]
 800b78a:	4613      	mov	r3, r2
 800b78c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b792:	2300      	movs	r3, #0
 800b794:	653b      	str	r3, [r7, #80]	@ 0x50
 800b796:	2300      	movs	r3, #0
 800b798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b79a:	2300      	movs	r3, #0
 800b79c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b79e:	2300      	movs	r3, #0
 800b7a0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d109      	bne.n	800b7d4 <tcp_write+0x5c>
 800b7c0:	4ba4      	ldr	r3, [pc, #656]	@ (800ba54 <tcp_write+0x2dc>)
 800b7c2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800b7c6:	49a4      	ldr	r1, [pc, #656]	@ (800ba58 <tcp_write+0x2e0>)
 800b7c8:	48a4      	ldr	r0, [pc, #656]	@ (800ba5c <tcp_write+0x2e4>)
 800b7ca:	f005 ff1f 	bl	801160c <iprintf>
 800b7ce:	f06f 030f 	mvn.w	r3, #15
 800b7d2:	e32a      	b.n	800be2a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7da:	085b      	lsrs	r3, r3, #1
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	bf28      	it	cs
 800b7e6:	4613      	movcs	r3, r2
 800b7e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b7ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d102      	bne.n	800b7f6 <tcp_write+0x7e>
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b7f4:	e000      	b.n	800b7f8 <tcp_write+0x80>
 800b7f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d109      	bne.n	800b814 <tcp_write+0x9c>
 800b800:	4b94      	ldr	r3, [pc, #592]	@ (800ba54 <tcp_write+0x2dc>)
 800b802:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800b806:	4996      	ldr	r1, [pc, #600]	@ (800ba60 <tcp_write+0x2e8>)
 800b808:	4894      	ldr	r0, [pc, #592]	@ (800ba5c <tcp_write+0x2e4>)
 800b80a:	f005 feff 	bl	801160c <iprintf>
 800b80e:	f06f 030f 	mvn.w	r3, #15
 800b812:	e30a      	b.n	800be2a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b814:	88fb      	ldrh	r3, [r7, #6]
 800b816:	4619      	mov	r1, r3
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f7ff ff33 	bl	800b684 <tcp_write_checks>
 800b81e:	4603      	mov	r3, r0
 800b820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800b824:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <tcp_write+0xba>
    return err;
 800b82c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800b830:	e2fb      	b.n	800be2a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b838:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b83c:	2300      	movs	r3, #0
 800b83e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b846:	2b00      	cmp	r3, #0
 800b848:	f000 80f6 	beq.w	800ba38 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b850:	653b      	str	r3, [r7, #80]	@ 0x50
 800b852:	e002      	b.n	800b85a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b85a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1f8      	bne.n	800b854 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b864:	7a9b      	ldrb	r3, [r3, #10]
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	b29b      	uxth	r3, r3
 800b86a:	f003 0304 	and.w	r3, r3, #4
 800b86e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b870:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b874:	891b      	ldrh	r3, [r3, #8]
 800b876:	4619      	mov	r1, r3
 800b878:	8c3b      	ldrh	r3, [r7, #32]
 800b87a:	440b      	add	r3, r1
 800b87c:	429a      	cmp	r2, r3
 800b87e:	da06      	bge.n	800b88e <tcp_write+0x116>
 800b880:	4b74      	ldr	r3, [pc, #464]	@ (800ba54 <tcp_write+0x2dc>)
 800b882:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800b886:	4977      	ldr	r1, [pc, #476]	@ (800ba64 <tcp_write+0x2ec>)
 800b888:	4874      	ldr	r0, [pc, #464]	@ (800ba5c <tcp_write+0x2e4>)
 800b88a:	f005 febf 	bl	801160c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b88e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b890:	891a      	ldrh	r2, [r3, #8]
 800b892:	8c3b      	ldrh	r3, [r7, #32]
 800b894:	4413      	add	r3, r2
 800b896:	b29b      	uxth	r3, r3
 800b898:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b8a4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b8a6:	8a7b      	ldrh	r3, [r7, #18]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d026      	beq.n	800b8fa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b8ac:	8a7b      	ldrh	r3, [r7, #18]
 800b8ae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d206      	bcs.n	800b8c2 <tcp_write+0x14a>
 800b8b4:	4b67      	ldr	r3, [pc, #412]	@ (800ba54 <tcp_write+0x2dc>)
 800b8b6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800b8ba:	496b      	ldr	r1, [pc, #428]	@ (800ba68 <tcp_write+0x2f0>)
 800b8bc:	4867      	ldr	r0, [pc, #412]	@ (800ba5c <tcp_write+0x2e4>)
 800b8be:	f005 fea5 	bl	801160c <iprintf>
      seg = last_unsent;
 800b8c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b8c6:	8a7b      	ldrh	r3, [r7, #18]
 800b8c8:	88fa      	ldrh	r2, [r7, #6]
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	bf28      	it	cs
 800b8ce:	4613      	movcs	r3, r2
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	bf28      	it	cs
 800b8d8:	4613      	movcs	r3, r2
 800b8da:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800b8dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b8e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800b8e8:	8a7a      	ldrh	r2, [r7, #18]
 800b8ea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b8f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b8f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b8fa:	8a7b      	ldrh	r3, [r7, #18]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00b      	beq.n	800b918 <tcp_write+0x1a0>
 800b900:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b904:	88fb      	ldrh	r3, [r7, #6]
 800b906:	429a      	cmp	r2, r3
 800b908:	d006      	beq.n	800b918 <tcp_write+0x1a0>
 800b90a:	4b52      	ldr	r3, [pc, #328]	@ (800ba54 <tcp_write+0x2dc>)
 800b90c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b910:	4956      	ldr	r1, [pc, #344]	@ (800ba6c <tcp_write+0x2f4>)
 800b912:	4852      	ldr	r0, [pc, #328]	@ (800ba5c <tcp_write+0x2e4>)
 800b914:	f005 fe7a 	bl	801160c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b918:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b91c:	88fb      	ldrh	r3, [r7, #6]
 800b91e:	429a      	cmp	r2, r3
 800b920:	f080 8167 	bcs.w	800bbf2 <tcp_write+0x47a>
 800b924:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b926:	2b00      	cmp	r3, #0
 800b928:	f000 8163 	beq.w	800bbf2 <tcp_write+0x47a>
 800b92c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b92e:	891b      	ldrh	r3, [r3, #8]
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 815e 	beq.w	800bbf2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b936:	88fa      	ldrh	r2, [r7, #6]
 800b938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b93c:	1ad2      	subs	r2, r2, r3
 800b93e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b940:	4293      	cmp	r3, r2
 800b942:	bfa8      	it	ge
 800b944:	4613      	movge	r3, r2
 800b946:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b94a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b94c:	797b      	ldrb	r3, [r7, #5]
 800b94e:	f003 0301 	and.w	r3, r3, #1
 800b952:	2b00      	cmp	r3, #0
 800b954:	d027      	beq.n	800b9a6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b956:	f107 0012 	add.w	r0, r7, #18
 800b95a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b95c:	8bf9      	ldrh	r1, [r7, #30]
 800b95e:	2301      	movs	r3, #1
 800b960:	9302      	str	r3, [sp, #8]
 800b962:	797b      	ldrb	r3, [r7, #5]
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	4603      	mov	r3, r0
 800b96c:	2000      	movs	r0, #0
 800b96e:	f7ff fe0f 	bl	800b590 <tcp_pbuf_prealloc>
 800b972:	6578      	str	r0, [r7, #84]	@ 0x54
 800b974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 8225 	beq.w	800bdc6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b97c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b97e:	6858      	ldr	r0, [r3, #4]
 800b980:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	4413      	add	r3, r2
 800b988:	8bfa      	ldrh	r2, [r7, #30]
 800b98a:	4619      	mov	r1, r3
 800b98c:	f005 ff69 	bl	8011862 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b990:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b992:	f7fb fa9f 	bl	8006ed4 <pbuf_clen>
 800b996:	4603      	mov	r3, r0
 800b998:	461a      	mov	r2, r3
 800b99a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b99e:	4413      	add	r3, r2
 800b9a0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800b9a4:	e041      	b.n	800ba2a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b9a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9ac:	e002      	b.n	800b9b4 <tcp_write+0x23c>
 800b9ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1f8      	bne.n	800b9ae <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9be:	7b1b      	ldrb	r3, [r3, #12]
 800b9c0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d115      	bne.n	800b9f4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9ce:	8952      	ldrh	r2, [r2, #10]
 800b9d0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d10d      	bne.n	800b9f4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b9d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d006      	beq.n	800b9ee <tcp_write+0x276>
 800b9e0:	4b1c      	ldr	r3, [pc, #112]	@ (800ba54 <tcp_write+0x2dc>)
 800b9e2:	f240 2231 	movw	r2, #561	@ 0x231
 800b9e6:	4922      	ldr	r1, [pc, #136]	@ (800ba70 <tcp_write+0x2f8>)
 800b9e8:	481c      	ldr	r0, [pc, #112]	@ (800ba5c <tcp_write+0x2e4>)
 800b9ea:	f005 fe0f 	bl	801160c <iprintf>
          extendlen = seglen;
 800b9ee:	8bfb      	ldrh	r3, [r7, #30]
 800b9f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800b9f2:	e01a      	b.n	800ba2a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b9f4:	8bfb      	ldrh	r3, [r7, #30]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	f7fa fefe 	bl	80067fc <pbuf_alloc>
 800ba00:	6578      	str	r0, [r7, #84]	@ 0x54
 800ba02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 81e0 	beq.w	800bdca <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ba0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	441a      	add	r2, r3
 800ba12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba14:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ba16:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ba18:	f7fb fa5c 	bl	8006ed4 <pbuf_clen>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	461a      	mov	r2, r3
 800ba20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ba24:	4413      	add	r3, r2
 800ba26:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ba2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ba2e:	8bfb      	ldrh	r3, [r7, #30]
 800ba30:	4413      	add	r3, r2
 800ba32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800ba36:	e0dc      	b.n	800bbf2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f000 80d7 	beq.w	800bbf2 <tcp_write+0x47a>
 800ba44:	4b03      	ldr	r3, [pc, #12]	@ (800ba54 <tcp_write+0x2dc>)
 800ba46:	f240 224a 	movw	r2, #586	@ 0x24a
 800ba4a:	490a      	ldr	r1, [pc, #40]	@ (800ba74 <tcp_write+0x2fc>)
 800ba4c:	4803      	ldr	r0, [pc, #12]	@ (800ba5c <tcp_write+0x2e4>)
 800ba4e:	f005 fddd 	bl	801160c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ba52:	e0ce      	b.n	800bbf2 <tcp_write+0x47a>
 800ba54:	08013ed8 	.word	0x08013ed8
 800ba58:	08014078 	.word	0x08014078
 800ba5c:	08013f2c 	.word	0x08013f2c
 800ba60:	08014090 	.word	0x08014090
 800ba64:	080140c4 	.word	0x080140c4
 800ba68:	080140dc 	.word	0x080140dc
 800ba6c:	080140fc 	.word	0x080140fc
 800ba70:	0801411c 	.word	0x0801411c
 800ba74:	08014148 	.word	0x08014148
    struct pbuf *p;
    u16_t left = len - pos;
 800ba78:	88fa      	ldrh	r2, [r7, #6]
 800ba7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ba82:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ba8e:	8b7a      	ldrh	r2, [r7, #26]
 800ba90:	8bbb      	ldrh	r3, [r7, #28]
 800ba92:	4293      	cmp	r3, r2
 800ba94:	bf28      	it	cs
 800ba96:	4613      	movcs	r3, r2
 800ba98:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ba9a:	797b      	ldrb	r3, [r7, #5]
 800ba9c:	f003 0301 	and.w	r3, r3, #1
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d036      	beq.n	800bb12 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800baa4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	8b3b      	ldrh	r3, [r7, #24]
 800baac:	4413      	add	r3, r2
 800baae:	b299      	uxth	r1, r3
 800bab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	bf0c      	ite	eq
 800bab6:	2301      	moveq	r3, #1
 800bab8:	2300      	movne	r3, #0
 800baba:	b2db      	uxtb	r3, r3
 800babc:	f107 0012 	add.w	r0, r7, #18
 800bac0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bac2:	9302      	str	r3, [sp, #8]
 800bac4:	797b      	ldrb	r3, [r7, #5]
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	4603      	mov	r3, r0
 800bace:	2036      	movs	r0, #54	@ 0x36
 800bad0:	f7ff fd5e 	bl	800b590 <tcp_pbuf_prealloc>
 800bad4:	6338      	str	r0, [r7, #48]	@ 0x30
 800bad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 8178 	beq.w	800bdce <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae0:	895b      	ldrh	r3, [r3, #10]
 800bae2:	8b3a      	ldrh	r2, [r7, #24]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d906      	bls.n	800baf6 <tcp_write+0x37e>
 800bae8:	4b8c      	ldr	r3, [pc, #560]	@ (800bd1c <tcp_write+0x5a4>)
 800baea:	f240 2266 	movw	r2, #614	@ 0x266
 800baee:	498c      	ldr	r1, [pc, #560]	@ (800bd20 <tcp_write+0x5a8>)
 800baf0:	488c      	ldr	r0, [pc, #560]	@ (800bd24 <tcp_write+0x5ac>)
 800baf2:	f005 fd8b 	bl	801160c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800baf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bafe:	18d0      	adds	r0, r2, r3
 800bb00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	4413      	add	r3, r2
 800bb08:	8b3a      	ldrh	r2, [r7, #24]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	f005 fea9 	bl	8011862 <memcpy>
 800bb10:	e02f      	b.n	800bb72 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bb12:	8a7b      	ldrh	r3, [r7, #18]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d006      	beq.n	800bb26 <tcp_write+0x3ae>
 800bb18:	4b80      	ldr	r3, [pc, #512]	@ (800bd1c <tcp_write+0x5a4>)
 800bb1a:	f240 2271 	movw	r2, #625	@ 0x271
 800bb1e:	4982      	ldr	r1, [pc, #520]	@ (800bd28 <tcp_write+0x5b0>)
 800bb20:	4880      	ldr	r0, [pc, #512]	@ (800bd24 <tcp_write+0x5ac>)
 800bb22:	f005 fd73 	bl	801160c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bb26:	8b3b      	ldrh	r3, [r7, #24]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	2036      	movs	r0, #54	@ 0x36
 800bb2e:	f7fa fe65 	bl	80067fc <pbuf_alloc>
 800bb32:	6178      	str	r0, [r7, #20]
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f000 814b 	beq.w	800bdd2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bb3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	441a      	add	r2, r3
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bb48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bb52:	4619      	mov	r1, r3
 800bb54:	2036      	movs	r0, #54	@ 0x36
 800bb56:	f7fa fe51 	bl	80067fc <pbuf_alloc>
 800bb5a:	6338      	str	r0, [r7, #48]	@ 0x30
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d103      	bne.n	800bb6a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800bb62:	6978      	ldr	r0, [r7, #20]
 800bb64:	f7fb f92e 	bl	8006dc4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800bb68:	e136      	b.n	800bdd8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800bb6a:	6979      	ldr	r1, [r7, #20]
 800bb6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb6e:	f7fb f9eb 	bl	8006f48 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800bb72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb74:	f7fb f9ae 	bl	8006ed4 <pbuf_clen>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bb80:	4413      	add	r3, r2
 800bb82:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bb86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bb8a:	2b09      	cmp	r3, #9
 800bb8c:	d903      	bls.n	800bb96 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800bb8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb90:	f7fb f918 	bl	8006dc4 <pbuf_free>
      goto memerr;
 800bb94:	e120      	b.n	800bdd8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bb9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bb9e:	441a      	add	r2, r3
 800bba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	4613      	mov	r3, r2
 800bba8:	2200      	movs	r2, #0
 800bbaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f7ff fc53 	bl	800b458 <tcp_create_segment>
 800bbb2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800bbb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 810d 	beq.w	800bdd6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800bbbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d102      	bne.n	800bbc8 <tcp_write+0x450>
      queue = seg;
 800bbc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbc4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbc6:	e00c      	b.n	800bbe2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bbc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d106      	bne.n	800bbdc <tcp_write+0x464>
 800bbce:	4b53      	ldr	r3, [pc, #332]	@ (800bd1c <tcp_write+0x5a4>)
 800bbd0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800bbd4:	4955      	ldr	r1, [pc, #340]	@ (800bd2c <tcp_write+0x5b4>)
 800bbd6:	4853      	ldr	r0, [pc, #332]	@ (800bd24 <tcp_write+0x5ac>)
 800bbd8:	f005 fd18 	bl	801160c <iprintf>
      prev_seg->next = seg;
 800bbdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bbe0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800bbe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbe4:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800bbe6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bbea:	8b3b      	ldrh	r3, [r7, #24]
 800bbec:	4413      	add	r3, r2
 800bbee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800bbf2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bbf6:	88fb      	ldrh	r3, [r7, #6]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	f4ff af3d 	bcc.w	800ba78 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800bbfe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d02c      	beq.n	800bc5e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800bc04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc0a:	e01e      	b.n	800bc4a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800bc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0e:	891a      	ldrh	r2, [r3, #8]
 800bc10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bc12:	4413      	add	r3, r2
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc18:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800bc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d110      	bne.n	800bc44 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800bc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc28:	8952      	ldrh	r2, [r2, #10]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800bc2e:	68b9      	ldr	r1, [r7, #8]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f005 fe16 	bl	8011862 <memcpy>
        p->len += oversize_used;
 800bc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc38:	895a      	ldrh	r2, [r3, #10]
 800bc3a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bc3c:	4413      	add	r3, r2
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc42:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800bc44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d1dd      	bne.n	800bc0c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800bc50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc52:	891a      	ldrh	r2, [r3, #8]
 800bc54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bc56:	4413      	add	r3, r2
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc5c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800bc5e:	8a7a      	ldrh	r2, [r7, #18]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800bc66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d018      	beq.n	800bc9e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bc6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d106      	bne.n	800bc80 <tcp_write+0x508>
 800bc72:	4b2a      	ldr	r3, [pc, #168]	@ (800bd1c <tcp_write+0x5a4>)
 800bc74:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800bc78:	492d      	ldr	r1, [pc, #180]	@ (800bd30 <tcp_write+0x5b8>)
 800bc7a:	482a      	ldr	r0, [pc, #168]	@ (800bd24 <tcp_write+0x5ac>)
 800bc7c:	f005 fcc6 	bl	801160c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800bc80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fb f95e 	bl	8006f48 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800bc8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc8e:	891a      	ldrh	r2, [r3, #8]
 800bc90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc92:	891b      	ldrh	r3, [r3, #8]
 800bc94:	4413      	add	r3, r2
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc9a:	811a      	strh	r2, [r3, #8]
 800bc9c:	e037      	b.n	800bd0e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800bc9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d034      	beq.n	800bd0e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d003      	beq.n	800bcb2 <tcp_write+0x53a>
 800bcaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d106      	bne.n	800bcc0 <tcp_write+0x548>
 800bcb2:	4b1a      	ldr	r3, [pc, #104]	@ (800bd1c <tcp_write+0x5a4>)
 800bcb4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800bcb8:	491e      	ldr	r1, [pc, #120]	@ (800bd34 <tcp_write+0x5bc>)
 800bcba:	481a      	ldr	r0, [pc, #104]	@ (800bd24 <tcp_write+0x5ac>)
 800bcbc:	f005 fca6 	bl	801160c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bcc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bcc6:	e009      	b.n	800bcdc <tcp_write+0x564>
      p->tot_len += extendlen;
 800bcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcca:	891a      	ldrh	r2, [r3, #8]
 800bccc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bcce:	4413      	add	r3, r2
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bcd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bcdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1f1      	bne.n	800bcc8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800bce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce6:	891a      	ldrh	r2, [r3, #8]
 800bce8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bcea:	4413      	add	r3, r2
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800bcf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf4:	895a      	ldrh	r2, [r3, #10]
 800bcf6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bcf8:	4413      	add	r3, r2
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800bd00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd02:	891a      	ldrh	r2, [r3, #8]
 800bd04:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bd06:	4413      	add	r3, r2
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd0c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800bd0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d111      	bne.n	800bd38 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd18:	66da      	str	r2, [r3, #108]	@ 0x6c
 800bd1a:	e010      	b.n	800bd3e <tcp_write+0x5c6>
 800bd1c:	08013ed8 	.word	0x08013ed8
 800bd20:	08014178 	.word	0x08014178
 800bd24:	08013f2c 	.word	0x08013f2c
 800bd28:	080141b8 	.word	0x080141b8
 800bd2c:	080141c8 	.word	0x080141c8
 800bd30:	080141dc 	.word	0x080141dc
 800bd34:	08014214 	.word	0x08014214
  } else {
    last_unsent->next = queue;
 800bd38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd3c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd42:	88fb      	ldrh	r3, [r7, #6]
 800bd44:	441a      	add	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800bd50:	88fb      	ldrh	r3, [r7, #6]
 800bd52:	1ad3      	subs	r3, r2, r3
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800bd62:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d00e      	beq.n	800bd8e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10a      	bne.n	800bd8e <tcp_write+0x616>
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d106      	bne.n	800bd8e <tcp_write+0x616>
 800bd80:	4b2c      	ldr	r3, [pc, #176]	@ (800be34 <tcp_write+0x6bc>)
 800bd82:	f240 3212 	movw	r2, #786	@ 0x312
 800bd86:	492c      	ldr	r1, [pc, #176]	@ (800be38 <tcp_write+0x6c0>)
 800bd88:	482c      	ldr	r0, [pc, #176]	@ (800be3c <tcp_write+0x6c4>)
 800bd8a:	f005 fc3f 	bl	801160c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bd8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d016      	beq.n	800bdc2 <tcp_write+0x64a>
 800bd94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d012      	beq.n	800bdc2 <tcp_write+0x64a>
 800bd9c:	797b      	ldrb	r3, [r7, #5]
 800bd9e:	f003 0302 	and.w	r3, r3, #2
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10d      	bne.n	800bdc2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bda6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	899b      	ldrh	r3, [r3, #12]
 800bdac:	b29c      	uxth	r4, r3
 800bdae:	2008      	movs	r0, #8
 800bdb0:	f7f9 fcaa 	bl	8005708 <lwip_htons>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	4322      	orrs	r2, r4
 800bdbe:	b292      	uxth	r2, r2
 800bdc0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e031      	b.n	800be2a <tcp_write+0x6b2>
          goto memerr;
 800bdc6:	bf00      	nop
 800bdc8:	e006      	b.n	800bdd8 <tcp_write+0x660>
            goto memerr;
 800bdca:	bf00      	nop
 800bdcc:	e004      	b.n	800bdd8 <tcp_write+0x660>
        goto memerr;
 800bdce:	bf00      	nop
 800bdd0:	e002      	b.n	800bdd8 <tcp_write+0x660>
        goto memerr;
 800bdd2:	bf00      	nop
 800bdd4:	e000      	b.n	800bdd8 <tcp_write+0x660>
      goto memerr;
 800bdd6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	8b5b      	ldrh	r3, [r3, #26]
 800bddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800bde6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800bdec:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bdee:	f7fa ffe9 	bl	8006dc4 <pbuf_free>
  }
  if (queue != NULL) {
 800bdf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <tcp_write+0x686>
    tcp_segs_free(queue);
 800bdf8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800bdfa:	f7fc fbfd 	bl	80085f8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00e      	beq.n	800be26 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10a      	bne.n	800be26 <tcp_write+0x6ae>
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be14:	2b00      	cmp	r3, #0
 800be16:	d106      	bne.n	800be26 <tcp_write+0x6ae>
 800be18:	4b06      	ldr	r3, [pc, #24]	@ (800be34 <tcp_write+0x6bc>)
 800be1a:	f240 3227 	movw	r2, #807	@ 0x327
 800be1e:	4906      	ldr	r1, [pc, #24]	@ (800be38 <tcp_write+0x6c0>)
 800be20:	4806      	ldr	r0, [pc, #24]	@ (800be3c <tcp_write+0x6c4>)
 800be22:	f005 fbf3 	bl	801160c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800be26:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	375c      	adds	r7, #92	@ 0x5c
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd90      	pop	{r4, r7, pc}
 800be32:	bf00      	nop
 800be34:	08013ed8 	.word	0x08013ed8
 800be38:	0801424c 	.word	0x0801424c
 800be3c:	08013f2c 	.word	0x08013f2c

0800be40 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800be40:	b590      	push	{r4, r7, lr}
 800be42:	b08b      	sub	sp, #44	@ 0x2c
 800be44:	af02      	add	r7, sp, #8
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800be4c:	2300      	movs	r3, #0
 800be4e:	61fb      	str	r3, [r7, #28]
 800be50:	2300      	movs	r3, #0
 800be52:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800be54:	2300      	movs	r3, #0
 800be56:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d106      	bne.n	800be6c <tcp_split_unsent_seg+0x2c>
 800be5e:	4b95      	ldr	r3, [pc, #596]	@ (800c0b4 <tcp_split_unsent_seg+0x274>)
 800be60:	f240 324b 	movw	r2, #843	@ 0x34b
 800be64:	4994      	ldr	r1, [pc, #592]	@ (800c0b8 <tcp_split_unsent_seg+0x278>)
 800be66:	4895      	ldr	r0, [pc, #596]	@ (800c0bc <tcp_split_unsent_seg+0x27c>)
 800be68:	f005 fbd0 	bl	801160c <iprintf>

  useg = pcb->unsent;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be70:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d102      	bne.n	800be7e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800be78:	f04f 33ff 	mov.w	r3, #4294967295
 800be7c:	e116      	b.n	800c0ac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800be7e:	887b      	ldrh	r3, [r7, #2]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d109      	bne.n	800be98 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800be84:	4b8b      	ldr	r3, [pc, #556]	@ (800c0b4 <tcp_split_unsent_seg+0x274>)
 800be86:	f240 3253 	movw	r2, #851	@ 0x353
 800be8a:	498d      	ldr	r1, [pc, #564]	@ (800c0c0 <tcp_split_unsent_seg+0x280>)
 800be8c:	488b      	ldr	r0, [pc, #556]	@ (800c0bc <tcp_split_unsent_seg+0x27c>)
 800be8e:	f005 fbbd 	bl	801160c <iprintf>
    return ERR_VAL;
 800be92:	f06f 0305 	mvn.w	r3, #5
 800be96:	e109      	b.n	800c0ac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	891b      	ldrh	r3, [r3, #8]
 800be9c:	887a      	ldrh	r2, [r7, #2]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d301      	bcc.n	800bea6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	e102      	b.n	800c0ac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800beaa:	887a      	ldrh	r2, [r7, #2]
 800beac:	429a      	cmp	r2, r3
 800beae:	d906      	bls.n	800bebe <tcp_split_unsent_seg+0x7e>
 800beb0:	4b80      	ldr	r3, [pc, #512]	@ (800c0b4 <tcp_split_unsent_seg+0x274>)
 800beb2:	f240 325b 	movw	r2, #859	@ 0x35b
 800beb6:	4983      	ldr	r1, [pc, #524]	@ (800c0c4 <tcp_split_unsent_seg+0x284>)
 800beb8:	4880      	ldr	r0, [pc, #512]	@ (800c0bc <tcp_split_unsent_seg+0x27c>)
 800beba:	f005 fba7 	bl	801160c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	891b      	ldrh	r3, [r3, #8]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d106      	bne.n	800bed4 <tcp_split_unsent_seg+0x94>
 800bec6:	4b7b      	ldr	r3, [pc, #492]	@ (800c0b4 <tcp_split_unsent_seg+0x274>)
 800bec8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800becc:	497e      	ldr	r1, [pc, #504]	@ (800c0c8 <tcp_split_unsent_seg+0x288>)
 800bece:	487b      	ldr	r0, [pc, #492]	@ (800c0bc <tcp_split_unsent_seg+0x27c>)
 800bed0:	f005 fb9c 	bl	801160c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	7a9b      	ldrb	r3, [r3, #10]
 800bed8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	f003 0304 	and.w	r3, r3, #4
 800bee4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	891a      	ldrh	r2, [r3, #8]
 800beea:	887b      	ldrh	r3, [r7, #2]
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	89bb      	ldrh	r3, [r7, #12]
 800bef6:	4413      	add	r3, r2
 800bef8:	b29b      	uxth	r3, r3
 800befa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800befe:	4619      	mov	r1, r3
 800bf00:	2036      	movs	r0, #54	@ 0x36
 800bf02:	f7fa fc7b 	bl	80067fc <pbuf_alloc>
 800bf06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 80b7 	beq.w	800c07e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	891a      	ldrh	r2, [r3, #8]
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	891b      	ldrh	r3, [r3, #8]
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	887b      	ldrh	r3, [r7, #2]
 800bf20:	4413      	add	r3, r2
 800bf22:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	6858      	ldr	r0, [r3, #4]
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	685a      	ldr	r2, [r3, #4]
 800bf2c:	7bbb      	ldrb	r3, [r7, #14]
 800bf2e:	18d1      	adds	r1, r2, r3
 800bf30:	897b      	ldrh	r3, [r7, #10]
 800bf32:	89ba      	ldrh	r2, [r7, #12]
 800bf34:	f7fb f930 	bl	8007198 <pbuf_copy_partial>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	89bb      	ldrh	r3, [r7, #12]
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	f040 809f 	bne.w	800c082 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	899b      	ldrh	r3, [r3, #12]
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7f9 fbdb 	bl	8005708 <lwip_htons>
 800bf52:	4603      	mov	r3, r0
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf5a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800bf60:	7efb      	ldrb	r3, [r7, #27]
 800bf62:	f003 0308 	and.w	r3, r3, #8
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d007      	beq.n	800bf7a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800bf6a:	7efb      	ldrb	r3, [r7, #27]
 800bf6c:	f023 0308 	bic.w	r3, r3, #8
 800bf70:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800bf72:	7ebb      	ldrb	r3, [r7, #26]
 800bf74:	f043 0308 	orr.w	r3, r3, #8
 800bf78:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800bf7a:	7efb      	ldrb	r3, [r7, #27]
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d007      	beq.n	800bf94 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800bf84:	7efb      	ldrb	r3, [r7, #27]
 800bf86:	f023 0301 	bic.w	r3, r3, #1
 800bf8a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800bf8c:	7ebb      	ldrb	r3, [r7, #26]
 800bf8e:	f043 0301 	orr.w	r3, r3, #1
 800bf92:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7f9 fbca 	bl	8005734 <lwip_htonl>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	887b      	ldrh	r3, [r7, #2]
 800bfa4:	18d1      	adds	r1, r2, r3
 800bfa6:	7eba      	ldrb	r2, [r7, #26]
 800bfa8:	7bfb      	ldrb	r3, [r7, #15]
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	460b      	mov	r3, r1
 800bfae:	6939      	ldr	r1, [r7, #16]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f7ff fa51 	bl	800b458 <tcp_create_segment>
 800bfb6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d063      	beq.n	800c086 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fa ff86 	bl	8006ed4 <pbuf_clen>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	461a      	mov	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bfd2:	1a9b      	subs	r3, r3, r2
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	6858      	ldr	r0, [r3, #4]
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	891a      	ldrh	r2, [r3, #8]
 800bfe6:	89bb      	ldrh	r3, [r7, #12]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	4619      	mov	r1, r3
 800bfee:	f7fa fd63 	bl	8006ab8 <pbuf_realloc>
  useg->len -= remainder;
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	891a      	ldrh	r2, [r3, #8]
 800bff6:	89bb      	ldrh	r3, [r7, #12]
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	899b      	ldrh	r3, [r3, #12]
 800c006:	b29c      	uxth	r4, r3
 800c008:	7efb      	ldrb	r3, [r7, #27]
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7f9 fb7b 	bl	8005708 <lwip_htons>
 800c012:	4603      	mov	r3, r0
 800c014:	461a      	mov	r2, r3
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	4322      	orrs	r2, r4
 800c01c:	b292      	uxth	r2, r2
 800c01e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	4618      	mov	r0, r3
 800c026:	f7fa ff55 	bl	8006ed4 <pbuf_clen>
 800c02a:	4603      	mov	r3, r0
 800c02c:	461a      	mov	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c034:	4413      	add	r3, r2
 800c036:	b29a      	uxth	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	4618      	mov	r0, r3
 800c044:	f7fa ff46 	bl	8006ed4 <pbuf_clen>
 800c048:	4603      	mov	r3, r0
 800c04a:	461a      	mov	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c052:	4413      	add	r3, r2
 800c054:	b29a      	uxth	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	69fa      	ldr	r2, [r7, #28]
 800c068:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d103      	bne.n	800c07a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	e016      	b.n	800c0ac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c07e:	bf00      	nop
 800c080:	e002      	b.n	800c088 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c082:	bf00      	nop
 800c084:	e000      	b.n	800c088 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c086:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d006      	beq.n	800c09c <tcp_split_unsent_seg+0x25c>
 800c08e:	4b09      	ldr	r3, [pc, #36]	@ (800c0b4 <tcp_split_unsent_seg+0x274>)
 800c090:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800c094:	490d      	ldr	r1, [pc, #52]	@ (800c0cc <tcp_split_unsent_seg+0x28c>)
 800c096:	4809      	ldr	r0, [pc, #36]	@ (800c0bc <tcp_split_unsent_seg+0x27c>)
 800c098:	f005 fab8 	bl	801160c <iprintf>
  if (p != NULL) {
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d002      	beq.n	800c0a8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c0a2:	6938      	ldr	r0, [r7, #16]
 800c0a4:	f7fa fe8e 	bl	8006dc4 <pbuf_free>
  }

  return ERR_MEM;
 800c0a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3724      	adds	r7, #36	@ 0x24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd90      	pop	{r4, r7, pc}
 800c0b4:	08013ed8 	.word	0x08013ed8
 800c0b8:	0801426c 	.word	0x0801426c
 800c0bc:	08013f2c 	.word	0x08013f2c
 800c0c0:	08014290 	.word	0x08014290
 800c0c4:	080142b4 	.word	0x080142b4
 800c0c8:	080142c4 	.word	0x080142c4
 800c0cc:	080142d4 	.word	0x080142d4

0800c0d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c0d0:	b590      	push	{r4, r7, lr}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <tcp_send_fin+0x1c>
 800c0de:	4b21      	ldr	r3, [pc, #132]	@ (800c164 <tcp_send_fin+0x94>)
 800c0e0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800c0e4:	4920      	ldr	r1, [pc, #128]	@ (800c168 <tcp_send_fin+0x98>)
 800c0e6:	4821      	ldr	r0, [pc, #132]	@ (800c16c <tcp_send_fin+0x9c>)
 800c0e8:	f005 fa90 	bl	801160c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d02e      	beq.n	800c152 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	e002      	b.n	800c102 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1f8      	bne.n	800c0fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	68db      	ldr	r3, [r3, #12]
 800c10e:	899b      	ldrh	r3, [r3, #12]
 800c110:	b29b      	uxth	r3, r3
 800c112:	4618      	mov	r0, r3
 800c114:	f7f9 faf8 	bl	8005708 <lwip_htons>
 800c118:	4603      	mov	r3, r0
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	f003 0307 	and.w	r3, r3, #7
 800c120:	2b00      	cmp	r3, #0
 800c122:	d116      	bne.n	800c152 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	899b      	ldrh	r3, [r3, #12]
 800c12a:	b29c      	uxth	r4, r3
 800c12c:	2001      	movs	r0, #1
 800c12e:	f7f9 faeb 	bl	8005708 <lwip_htons>
 800c132:	4603      	mov	r3, r0
 800c134:	461a      	mov	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	4322      	orrs	r2, r4
 800c13c:	b292      	uxth	r2, r2
 800c13e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	8b5b      	ldrh	r3, [r3, #26]
 800c144:	f043 0320 	orr.w	r3, r3, #32
 800c148:	b29a      	uxth	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	e004      	b.n	800c15c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c152:	2101      	movs	r1, #1
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f80b 	bl	800c170 <tcp_enqueue_flags>
 800c15a:	4603      	mov	r3, r0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3714      	adds	r7, #20
 800c160:	46bd      	mov	sp, r7
 800c162:	bd90      	pop	{r4, r7, pc}
 800c164:	08013ed8 	.word	0x08013ed8
 800c168:	080142e0 	.word	0x080142e0
 800c16c:	08013f2c 	.word	0x08013f2c

0800c170 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b08a      	sub	sp, #40	@ 0x28
 800c174:	af02      	add	r7, sp, #8
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c180:	2300      	movs	r3, #0
 800c182:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c184:	78fb      	ldrb	r3, [r7, #3]
 800c186:	f003 0303 	and.w	r3, r3, #3
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <tcp_enqueue_flags+0x2c>
 800c18e:	4b67      	ldr	r3, [pc, #412]	@ (800c32c <tcp_enqueue_flags+0x1bc>)
 800c190:	f240 4211 	movw	r2, #1041	@ 0x411
 800c194:	4966      	ldr	r1, [pc, #408]	@ (800c330 <tcp_enqueue_flags+0x1c0>)
 800c196:	4867      	ldr	r0, [pc, #412]	@ (800c334 <tcp_enqueue_flags+0x1c4>)
 800c198:	f005 fa38 	bl	801160c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d106      	bne.n	800c1b0 <tcp_enqueue_flags+0x40>
 800c1a2:	4b62      	ldr	r3, [pc, #392]	@ (800c32c <tcp_enqueue_flags+0x1bc>)
 800c1a4:	f240 4213 	movw	r2, #1043	@ 0x413
 800c1a8:	4963      	ldr	r1, [pc, #396]	@ (800c338 <tcp_enqueue_flags+0x1c8>)
 800c1aa:	4862      	ldr	r0, [pc, #392]	@ (800c334 <tcp_enqueue_flags+0x1c4>)
 800c1ac:	f005 fa2e 	bl	801160c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c1b0:	78fb      	ldrb	r3, [r7, #3]
 800c1b2:	f003 0302 	and.w	r3, r3, #2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d001      	beq.n	800c1be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c1be:	7ffb      	ldrb	r3, [r7, #31]
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	f003 0304 	and.w	r3, r3, #4
 800c1c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c1ca:	7dfb      	ldrb	r3, [r7, #23]
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	2036      	movs	r0, #54	@ 0x36
 800c1d6:	f7fa fb11 	bl	80067fc <pbuf_alloc>
 800c1da:	6138      	str	r0, [r7, #16]
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d109      	bne.n	800c1f6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	8b5b      	ldrh	r3, [r3, #26]
 800c1e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f4:	e095      	b.n	800c322 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	895a      	ldrh	r2, [r3, #10]
 800c1fa:	7dfb      	ldrb	r3, [r7, #23]
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d206      	bcs.n	800c210 <tcp_enqueue_flags+0xa0>
 800c202:	4b4a      	ldr	r3, [pc, #296]	@ (800c32c <tcp_enqueue_flags+0x1bc>)
 800c204:	f240 4239 	movw	r2, #1081	@ 0x439
 800c208:	494c      	ldr	r1, [pc, #304]	@ (800c33c <tcp_enqueue_flags+0x1cc>)
 800c20a:	484a      	ldr	r0, [pc, #296]	@ (800c334 <tcp_enqueue_flags+0x1c4>)
 800c20c:	f005 f9fe 	bl	801160c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800c214:	78fa      	ldrb	r2, [r7, #3]
 800c216:	7ffb      	ldrb	r3, [r7, #31]
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	460b      	mov	r3, r1
 800c21c:	6939      	ldr	r1, [r7, #16]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7ff f91a 	bl	800b458 <tcp_create_segment>
 800c224:	60f8      	str	r0, [r7, #12]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d109      	bne.n	800c240 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	8b5b      	ldrh	r3, [r3, #26]
 800c230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c234:	b29a      	uxth	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c23a:	f04f 33ff 	mov.w	r3, #4294967295
 800c23e:	e070      	b.n	800c322 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	f003 0303 	and.w	r3, r3, #3
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d006      	beq.n	800c25a <tcp_enqueue_flags+0xea>
 800c24c:	4b37      	ldr	r3, [pc, #220]	@ (800c32c <tcp_enqueue_flags+0x1bc>)
 800c24e:	f240 4242 	movw	r2, #1090	@ 0x442
 800c252:	493b      	ldr	r1, [pc, #236]	@ (800c340 <tcp_enqueue_flags+0x1d0>)
 800c254:	4837      	ldr	r0, [pc, #220]	@ (800c334 <tcp_enqueue_flags+0x1c4>)
 800c256:	f005 f9d9 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	891b      	ldrh	r3, [r3, #8]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d006      	beq.n	800c270 <tcp_enqueue_flags+0x100>
 800c262:	4b32      	ldr	r3, [pc, #200]	@ (800c32c <tcp_enqueue_flags+0x1bc>)
 800c264:	f240 4243 	movw	r2, #1091	@ 0x443
 800c268:	4936      	ldr	r1, [pc, #216]	@ (800c344 <tcp_enqueue_flags+0x1d4>)
 800c26a:	4832      	ldr	r0, [pc, #200]	@ (800c334 <tcp_enqueue_flags+0x1c4>)
 800c26c:	f005 f9ce 	bl	801160c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c274:	2b00      	cmp	r3, #0
 800c276:	d103      	bne.n	800c280 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c27e:	e00d      	b.n	800c29c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c284:	61bb      	str	r3, [r7, #24]
 800c286:	e002      	b.n	800c28e <tcp_enqueue_flags+0x11e>
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	61bb      	str	r3, [r7, #24]
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1f8      	bne.n	800c288 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c2a4:	78fb      	ldrb	r3, [r7, #3]
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d104      	bne.n	800c2b8 <tcp_enqueue_flags+0x148>
 800c2ae:	78fb      	ldrb	r3, [r7, #3]
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d004      	beq.n	800c2c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2bc:	1c5a      	adds	r2, r3, #1
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c2c2:	78fb      	ldrb	r3, [r7, #3]
 800c2c4:	f003 0301 	and.w	r3, r3, #1
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d006      	beq.n	800c2da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	8b5b      	ldrh	r3, [r3, #26]
 800c2d0:	f043 0320 	orr.w	r3, r3, #32
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fa fdf8 	bl	8006ed4 <pbuf_clen>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c2ee:	4413      	add	r3, r2
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00e      	beq.n	800c320 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10a      	bne.n	800c320 <tcp_enqueue_flags+0x1b0>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d106      	bne.n	800c320 <tcp_enqueue_flags+0x1b0>
 800c312:	4b06      	ldr	r3, [pc, #24]	@ (800c32c <tcp_enqueue_flags+0x1bc>)
 800c314:	f240 4265 	movw	r2, #1125	@ 0x465
 800c318:	490b      	ldr	r1, [pc, #44]	@ (800c348 <tcp_enqueue_flags+0x1d8>)
 800c31a:	4806      	ldr	r0, [pc, #24]	@ (800c334 <tcp_enqueue_flags+0x1c4>)
 800c31c:	f005 f976 	bl	801160c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3720      	adds	r7, #32
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	08013ed8 	.word	0x08013ed8
 800c330:	080142fc 	.word	0x080142fc
 800c334:	08013f2c 	.word	0x08013f2c
 800c338:	08014354 	.word	0x08014354
 800c33c:	08014374 	.word	0x08014374
 800c340:	080143b0 	.word	0x080143b0
 800c344:	080143c8 	.word	0x080143c8
 800c348:	080143f4 	.word	0x080143f4

0800c34c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c34c:	b5b0      	push	{r4, r5, r7, lr}
 800c34e:	b08a      	sub	sp, #40	@ 0x28
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <tcp_output+0x1c>
 800c35a:	4b8a      	ldr	r3, [pc, #552]	@ (800c584 <tcp_output+0x238>)
 800c35c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800c360:	4989      	ldr	r1, [pc, #548]	@ (800c588 <tcp_output+0x23c>)
 800c362:	488a      	ldr	r0, [pc, #552]	@ (800c58c <tcp_output+0x240>)
 800c364:	f005 f952 	bl	801160c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	7d1b      	ldrb	r3, [r3, #20]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d106      	bne.n	800c37e <tcp_output+0x32>
 800c370:	4b84      	ldr	r3, [pc, #528]	@ (800c584 <tcp_output+0x238>)
 800c372:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800c376:	4986      	ldr	r1, [pc, #536]	@ (800c590 <tcp_output+0x244>)
 800c378:	4884      	ldr	r0, [pc, #528]	@ (800c58c <tcp_output+0x240>)
 800c37a:	f005 f947 	bl	801160c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c37e:	4b85      	ldr	r3, [pc, #532]	@ (800c594 <tcp_output+0x248>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	429a      	cmp	r2, r3
 800c386:	d101      	bne.n	800c38c <tcp_output+0x40>
    return ERR_OK;
 800c388:	2300      	movs	r3, #0
 800c38a:	e1ce      	b.n	800c72a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c398:	4293      	cmp	r3, r2
 800c39a:	bf28      	it	cs
 800c39c:	4613      	movcs	r3, r2
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10b      	bne.n	800c3c6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	8b5b      	ldrh	r3, [r3, #26]
 800c3b2:	f003 0302 	and.w	r3, r3, #2
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 81aa 	beq.w	800c710 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fdcb 	bl	800cf58 <tcp_send_empty_ack>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	e1b1      	b.n	800c72a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7ff f826 	bl	800b420 <tcp_route>
 800c3d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d102      	bne.n	800c3e2 <tcp_output+0x96>
    return ERR_RTE;
 800c3dc:	f06f 0303 	mvn.w	r3, #3
 800c3e0:	e1a3      	b.n	800c72a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d003      	beq.n	800c3f0 <tcp_output+0xa4>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d111      	bne.n	800c414 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d002      	beq.n	800c3fc <tcp_output+0xb0>
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	e000      	b.n	800c3fe <tcp_output+0xb2>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d102      	bne.n	800c40c <tcp_output+0xc0>
      return ERR_RTE;
 800c406:	f06f 0303 	mvn.w	r3, #3
 800c40a:	e18e      	b.n	800c72a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7f9 f98a 	bl	8005734 <lwip_htonl>
 800c420:	4602      	mov	r2, r0
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c426:	1ad3      	subs	r3, r2, r3
 800c428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c42a:	8912      	ldrh	r2, [r2, #8]
 800c42c:	4413      	add	r3, r2
 800c42e:	69ba      	ldr	r2, [r7, #24]
 800c430:	429a      	cmp	r2, r3
 800c432:	d227      	bcs.n	800c484 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c43a:	461a      	mov	r2, r3
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	4293      	cmp	r3, r2
 800c440:	d114      	bne.n	800c46c <tcp_output+0x120>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c446:	2b00      	cmp	r3, #0
 800c448:	d110      	bne.n	800c46c <tcp_output+0x120>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10b      	bne.n	800c46c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	8b5b      	ldrh	r3, [r3, #26]
 800c470:	f003 0302 	and.w	r3, r3, #2
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 814d 	beq.w	800c714 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fd6c 	bl	800cf58 <tcp_send_empty_ack>
 800c480:	4603      	mov	r3, r0
 800c482:	e152      	b.n	800c72a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c490:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	2b00      	cmp	r3, #0
 800c496:	f000 811c 	beq.w	800c6d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c49a:	e002      	b.n	800c4a2 <tcp_output+0x156>
 800c49c:	6a3b      	ldr	r3, [r7, #32]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	623b      	str	r3, [r7, #32]
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1f8      	bne.n	800c49c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c4aa:	e112      	b.n	800c6d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	899b      	ldrh	r3, [r3, #12]
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7f9 f927 	bl	8005708 <lwip_htons>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	f003 0304 	and.w	r3, r3, #4
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d006      	beq.n	800c4d4 <tcp_output+0x188>
 800c4c6:	4b2f      	ldr	r3, [pc, #188]	@ (800c584 <tcp_output+0x238>)
 800c4c8:	f240 5236 	movw	r2, #1334	@ 0x536
 800c4cc:	4932      	ldr	r1, [pc, #200]	@ (800c598 <tcp_output+0x24c>)
 800c4ce:	482f      	ldr	r0, [pc, #188]	@ (800c58c <tcp_output+0x240>)
 800c4d0:	f005 f89c 	bl	801160c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d01f      	beq.n	800c51c <tcp_output+0x1d0>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	8b5b      	ldrh	r3, [r3, #26]
 800c4e0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d119      	bne.n	800c51c <tcp_output+0x1d0>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00b      	beq.n	800c508 <tcp_output+0x1bc>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d110      	bne.n	800c51c <tcp_output+0x1d0>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4fe:	891a      	ldrh	r2, [r3, #8]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c504:	429a      	cmp	r2, r3
 800c506:	d209      	bcs.n	800c51c <tcp_output+0x1d0>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d004      	beq.n	800c51c <tcp_output+0x1d0>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c518:	2b08      	cmp	r3, #8
 800c51a:	d901      	bls.n	800c520 <tcp_output+0x1d4>
 800c51c:	2301      	movs	r3, #1
 800c51e:	e000      	b.n	800c522 <tcp_output+0x1d6>
 800c520:	2300      	movs	r3, #0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d106      	bne.n	800c534 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	8b5b      	ldrh	r3, [r3, #26]
 800c52a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 80e4 	beq.w	800c6fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	7d1b      	ldrb	r3, [r3, #20]
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d00d      	beq.n	800c558 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	899b      	ldrh	r3, [r3, #12]
 800c542:	b29c      	uxth	r4, r3
 800c544:	2010      	movs	r0, #16
 800c546:	f7f9 f8df 	bl	8005708 <lwip_htons>
 800c54a:	4603      	mov	r3, r0
 800c54c:	461a      	mov	r2, r3
 800c54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	4322      	orrs	r2, r4
 800c554:	b292      	uxth	r2, r2
 800c556:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c558:	697a      	ldr	r2, [r7, #20]
 800c55a:	6879      	ldr	r1, [r7, #4]
 800c55c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c55e:	f000 f909 	bl	800c774 <tcp_output_segment>
 800c562:	4603      	mov	r3, r0
 800c564:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d016      	beq.n	800c59c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	8b5b      	ldrh	r3, [r3, #26]
 800c572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c576:	b29a      	uxth	r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	835a      	strh	r2, [r3, #26]
      return err;
 800c57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c580:	e0d3      	b.n	800c72a <tcp_output+0x3de>
 800c582:	bf00      	nop
 800c584:	08013ed8 	.word	0x08013ed8
 800c588:	0801441c 	.word	0x0801441c
 800c58c:	08013f2c 	.word	0x08013f2c
 800c590:	08014434 	.word	0x08014434
 800c594:	20008424 	.word	0x20008424
 800c598:	0801445c 	.word	0x0801445c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	7d1b      	ldrb	r3, [r3, #20]
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d006      	beq.n	800c5ba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	8b5b      	ldrh	r3, [r3, #26]
 800c5b0:	f023 0303 	bic.w	r3, r3, #3
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7f9 f8b7 	bl	8005734 <lwip_htonl>
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ca:	891b      	ldrh	r3, [r3, #8]
 800c5cc:	461d      	mov	r5, r3
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	899b      	ldrh	r3, [r3, #12]
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7f9 f896 	bl	8005708 <lwip_htons>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	f003 0303 	and.w	r3, r3, #3
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d001      	beq.n	800c5ec <tcp_output+0x2a0>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e000      	b.n	800c5ee <tcp_output+0x2a2>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	442b      	add	r3, r5
 800c5f0:	4423      	add	r3, r4
 800c5f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	da02      	bge.n	800c606 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	68ba      	ldr	r2, [r7, #8]
 800c604:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c608:	891b      	ldrh	r3, [r3, #8]
 800c60a:	461c      	mov	r4, r3
 800c60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	899b      	ldrh	r3, [r3, #12]
 800c612:	b29b      	uxth	r3, r3
 800c614:	4618      	mov	r0, r3
 800c616:	f7f9 f877 	bl	8005708 <lwip_htons>
 800c61a:	4603      	mov	r3, r0
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	f003 0303 	and.w	r3, r3, #3
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <tcp_output+0x2de>
 800c626:	2301      	movs	r3, #1
 800c628:	e000      	b.n	800c62c <tcp_output+0x2e0>
 800c62a:	2300      	movs	r3, #0
 800c62c:	4423      	add	r3, r4
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d049      	beq.n	800c6c6 <tcp_output+0x37a>
      seg->next = NULL;
 800c632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c634:	2200      	movs	r2, #0
 800c636:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d105      	bne.n	800c64c <tcp_output+0x300>
        pcb->unacked = seg;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c644:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800c646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c648:	623b      	str	r3, [r7, #32]
 800c64a:	e03f      	b.n	800c6cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	4618      	mov	r0, r3
 800c654:	f7f9 f86e 	bl	8005734 <lwip_htonl>
 800c658:	4604      	mov	r4, r0
 800c65a:	6a3b      	ldr	r3, [r7, #32]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	4618      	mov	r0, r3
 800c662:	f7f9 f867 	bl	8005734 <lwip_htonl>
 800c666:	4603      	mov	r3, r0
 800c668:	1ae3      	subs	r3, r4, r3
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	da24      	bge.n	800c6b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	3370      	adds	r3, #112	@ 0x70
 800c672:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c674:	e002      	b.n	800c67c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d011      	beq.n	800c6a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7f9 f851 	bl	8005734 <lwip_htonl>
 800c692:	4604      	mov	r4, r0
 800c694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7f9 f84a 	bl	8005734 <lwip_htonl>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	dbe6      	blt.n	800c676 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	e009      	b.n	800c6cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c6b8:	6a3b      	ldr	r3, [r7, #32]
 800c6ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c6be:	6a3b      	ldr	r3, [r7, #32]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	623b      	str	r3, [r7, #32]
 800c6c4:	e002      	b.n	800c6cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c6c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c6c8:	f7fb ffab 	bl	8008622 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6d0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d012      	beq.n	800c6fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7f9 f828 	bl	8005734 <lwip_htonl>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6ee:	8912      	ldrh	r2, [r2, #8]
 800c6f0:	4413      	add	r3, r2
  while (seg != NULL &&
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	f4bf aed9 	bcs.w	800c4ac <tcp_output+0x160>
 800c6fa:	e000      	b.n	800c6fe <tcp_output+0x3b2>
      break;
 800c6fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c702:	2b00      	cmp	r3, #0
 800c704:	d108      	bne.n	800c718 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800c70e:	e004      	b.n	800c71a <tcp_output+0x3ce>
    goto output_done;
 800c710:	bf00      	nop
 800c712:	e002      	b.n	800c71a <tcp_output+0x3ce>
    goto output_done;
 800c714:	bf00      	nop
 800c716:	e000      	b.n	800c71a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c718:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	8b5b      	ldrh	r3, [r3, #26]
 800c71e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c722:	b29a      	uxth	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3728      	adds	r7, #40	@ 0x28
 800c72e:	46bd      	mov	sp, r7
 800c730:	bdb0      	pop	{r4, r5, r7, pc}
 800c732:	bf00      	nop

0800c734 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d106      	bne.n	800c750 <tcp_output_segment_busy+0x1c>
 800c742:	4b09      	ldr	r3, [pc, #36]	@ (800c768 <tcp_output_segment_busy+0x34>)
 800c744:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c748:	4908      	ldr	r1, [pc, #32]	@ (800c76c <tcp_output_segment_busy+0x38>)
 800c74a:	4809      	ldr	r0, [pc, #36]	@ (800c770 <tcp_output_segment_busy+0x3c>)
 800c74c:	f004 ff5e 	bl	801160c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	7b9b      	ldrb	r3, [r3, #14]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d001      	beq.n	800c75e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e000      	b.n	800c760 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c75e:	2300      	movs	r3, #0
}
 800c760:	4618      	mov	r0, r3
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	08013ed8 	.word	0x08013ed8
 800c76c:	08014474 	.word	0x08014474
 800c770:	08013f2c 	.word	0x08013f2c

0800c774 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c774:	b5b0      	push	{r4, r5, r7, lr}
 800c776:	b08c      	sub	sp, #48	@ 0x30
 800c778:	af04      	add	r7, sp, #16
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d106      	bne.n	800c794 <tcp_output_segment+0x20>
 800c786:	4b64      	ldr	r3, [pc, #400]	@ (800c918 <tcp_output_segment+0x1a4>)
 800c788:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800c78c:	4963      	ldr	r1, [pc, #396]	@ (800c91c <tcp_output_segment+0x1a8>)
 800c78e:	4864      	ldr	r0, [pc, #400]	@ (800c920 <tcp_output_segment+0x1ac>)
 800c790:	f004 ff3c 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d106      	bne.n	800c7a8 <tcp_output_segment+0x34>
 800c79a:	4b5f      	ldr	r3, [pc, #380]	@ (800c918 <tcp_output_segment+0x1a4>)
 800c79c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800c7a0:	4960      	ldr	r1, [pc, #384]	@ (800c924 <tcp_output_segment+0x1b0>)
 800c7a2:	485f      	ldr	r0, [pc, #380]	@ (800c920 <tcp_output_segment+0x1ac>)
 800c7a4:	f004 ff32 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d106      	bne.n	800c7bc <tcp_output_segment+0x48>
 800c7ae:	4b5a      	ldr	r3, [pc, #360]	@ (800c918 <tcp_output_segment+0x1a4>)
 800c7b0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800c7b4:	495c      	ldr	r1, [pc, #368]	@ (800c928 <tcp_output_segment+0x1b4>)
 800c7b6:	485a      	ldr	r0, [pc, #360]	@ (800c920 <tcp_output_segment+0x1ac>)
 800c7b8:	f004 ff28 	bl	801160c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f7ff ffb9 	bl	800c734 <tcp_output_segment_busy>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d001      	beq.n	800c7cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	e0a1      	b.n	800c910 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	68dc      	ldr	r4, [r3, #12]
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	f7f8 ffad 	bl	8005734 <lwip_htonl>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	68dc      	ldr	r4, [r3, #12]
 800c7e6:	4610      	mov	r0, r2
 800c7e8:	f7f8 ff8e 	bl	8005708 <lwip_htons>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c7f8:	441a      	add	r2, r3
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	3314      	adds	r3, #20
 800c804:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	7a9b      	ldrb	r3, [r3, #10]
 800c80a:	f003 0301 	and.w	r3, r3, #1
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d015      	beq.n	800c83e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	3304      	adds	r3, #4
 800c816:	461a      	mov	r2, r3
 800c818:	6879      	ldr	r1, [r7, #4]
 800c81a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800c81e:	f7fc fa39 	bl	8008c94 <tcp_eff_send_mss_netif>
 800c822:	4603      	mov	r3, r0
 800c824:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c826:	8b7b      	ldrh	r3, [r7, #26]
 800c828:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7f8 ff81 	bl	8005734 <lwip_htonl>
 800c832:	4602      	mov	r2, r0
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	3304      	adds	r3, #4
 800c83c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c844:	2b00      	cmp	r3, #0
 800c846:	da02      	bge.n	800c84e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	2200      	movs	r2, #0
 800c84c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10c      	bne.n	800c870 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c856:	4b35      	ldr	r3, [pc, #212]	@ (800c92c <tcp_output_segment+0x1b8>)
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	f7f8 ff65 	bl	8005734 <lwip_htonl>
 800c86a:	4602      	mov	r2, r0
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	68da      	ldr	r2, [r3, #12]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	1ad3      	subs	r3, r2, r3
 800c87c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	8959      	ldrh	r1, [r3, #10]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	8b3a      	ldrh	r2, [r7, #24]
 800c88a:	1a8a      	subs	r2, r1, r2
 800c88c:	b292      	uxth	r2, r2
 800c88e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	8919      	ldrh	r1, [r3, #8]
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	8b3a      	ldrh	r2, [r7, #24]
 800c89c:	1a8a      	subs	r2, r1, r2
 800c89e:	b292      	uxth	r2, r2
 800c8a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	68d2      	ldr	r2, [r2, #12]
 800c8aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	741a      	strb	r2, [r3, #16]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	68da      	ldr	r2, [r3, #12]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	7a9b      	ldrb	r3, [r3, #10]
 800c8c0:	f003 0301 	and.w	r3, r3, #1
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d001      	beq.n	800c8cc <tcp_output_segment+0x158>
 800c8c8:	2318      	movs	r3, #24
 800c8ca:	e000      	b.n	800c8ce <tcp_output_segment+0x15a>
 800c8cc:	2314      	movs	r3, #20
 800c8ce:	4413      	add	r3, r2
 800c8d0:	69fa      	ldr	r2, [r7, #28]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d006      	beq.n	800c8e4 <tcp_output_segment+0x170>
 800c8d6:	4b10      	ldr	r3, [pc, #64]	@ (800c918 <tcp_output_segment+0x1a4>)
 800c8d8:	f240 621c 	movw	r2, #1564	@ 0x61c
 800c8dc:	4914      	ldr	r1, [pc, #80]	@ (800c930 <tcp_output_segment+0x1bc>)
 800c8de:	4810      	ldr	r0, [pc, #64]	@ (800c920 <tcp_output_segment+0x1ac>)
 800c8e0:	f004 fe94 	bl	801160c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6858      	ldr	r0, [r3, #4]
 800c8e8:	68b9      	ldr	r1, [r7, #8]
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	1d1c      	adds	r4, r3, #4
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	7add      	ldrb	r5, [r3, #11]
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	7a9b      	ldrb	r3, [r3, #10]
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	9202      	str	r2, [sp, #8]
 800c8fa:	2206      	movs	r2, #6
 800c8fc:	9201      	str	r2, [sp, #4]
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	462b      	mov	r3, r5
 800c902:	4622      	mov	r2, r4
 800c904:	f002 fa34 	bl	800ed70 <ip4_output_if>
 800c908:	4603      	mov	r3, r0
 800c90a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c90c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3720      	adds	r7, #32
 800c914:	46bd      	mov	sp, r7
 800c916:	bdb0      	pop	{r4, r5, r7, pc}
 800c918:	08013ed8 	.word	0x08013ed8
 800c91c:	0801449c 	.word	0x0801449c
 800c920:	08013f2c 	.word	0x08013f2c
 800c924:	080144bc 	.word	0x080144bc
 800c928:	080144dc 	.word	0x080144dc
 800c92c:	200083d8 	.word	0x200083d8
 800c930:	08014500 	.word	0x08014500

0800c934 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c934:	b5b0      	push	{r4, r5, r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d106      	bne.n	800c950 <tcp_rexmit_rto_prepare+0x1c>
 800c942:	4b31      	ldr	r3, [pc, #196]	@ (800ca08 <tcp_rexmit_rto_prepare+0xd4>)
 800c944:	f240 6263 	movw	r2, #1635	@ 0x663
 800c948:	4930      	ldr	r1, [pc, #192]	@ (800ca0c <tcp_rexmit_rto_prepare+0xd8>)
 800c94a:	4831      	ldr	r0, [pc, #196]	@ (800ca10 <tcp_rexmit_rto_prepare+0xdc>)
 800c94c:	f004 fe5e 	bl	801160c <iprintf>

  if (pcb->unacked == NULL) {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c954:	2b00      	cmp	r3, #0
 800c956:	d102      	bne.n	800c95e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c958:	f06f 0305 	mvn.w	r3, #5
 800c95c:	e050      	b.n	800ca00 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c962:	60fb      	str	r3, [r7, #12]
 800c964:	e00b      	b.n	800c97e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	f7ff fee4 	bl	800c734 <tcp_output_segment_busy>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d002      	beq.n	800c978 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c972:	f06f 0305 	mvn.w	r3, #5
 800c976:	e043      	b.n	800ca00 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	60fb      	str	r3, [r7, #12]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1ef      	bne.n	800c966 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f7ff fed4 	bl	800c734 <tcp_output_segment_busy>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d002      	beq.n	800c998 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c992:	f06f 0305 	mvn.w	r3, #5
 800c996:	e033      	b.n	800ca00 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	8b5b      	ldrh	r3, [r3, #26]
 800c9b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7f8 feb6 	bl	8005734 <lwip_htonl>
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	891b      	ldrh	r3, [r3, #8]
 800c9ce:	461d      	mov	r5, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	899b      	ldrh	r3, [r3, #12]
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f8 fe95 	bl	8005708 <lwip_htons>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	f003 0303 	and.w	r3, r3, #3
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d001      	beq.n	800c9ee <tcp_rexmit_rto_prepare+0xba>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e000      	b.n	800c9f0 <tcp_rexmit_rto_prepare+0xbc>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	442b      	add	r3, r5
 800c9f2:	18e2      	adds	r2, r4, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bdb0      	pop	{r4, r5, r7, pc}
 800ca08:	08013ed8 	.word	0x08013ed8
 800ca0c:	08014514 	.word	0x08014514
 800ca10:	08013f2c 	.word	0x08013f2c

0800ca14 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d106      	bne.n	800ca30 <tcp_rexmit_rto_commit+0x1c>
 800ca22:	4b0d      	ldr	r3, [pc, #52]	@ (800ca58 <tcp_rexmit_rto_commit+0x44>)
 800ca24:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ca28:	490c      	ldr	r1, [pc, #48]	@ (800ca5c <tcp_rexmit_rto_commit+0x48>)
 800ca2a:	480d      	ldr	r0, [pc, #52]	@ (800ca60 <tcp_rexmit_rto_commit+0x4c>)
 800ca2c:	f004 fdee 	bl	801160c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ca36:	2bff      	cmp	r3, #255	@ 0xff
 800ca38:	d007      	beq.n	800ca4a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ca40:	3301      	adds	r3, #1
 800ca42:	b2da      	uxtb	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7ff fc7e 	bl	800c34c <tcp_output>
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	08013ed8 	.word	0x08013ed8
 800ca5c:	08014538 	.word	0x08014538
 800ca60:	08013f2c 	.word	0x08013f2c

0800ca64 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d106      	bne.n	800ca80 <tcp_rexmit_rto+0x1c>
 800ca72:	4b0a      	ldr	r3, [pc, #40]	@ (800ca9c <tcp_rexmit_rto+0x38>)
 800ca74:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800ca78:	4909      	ldr	r1, [pc, #36]	@ (800caa0 <tcp_rexmit_rto+0x3c>)
 800ca7a:	480a      	ldr	r0, [pc, #40]	@ (800caa4 <tcp_rexmit_rto+0x40>)
 800ca7c:	f004 fdc6 	bl	801160c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff ff57 	bl	800c934 <tcp_rexmit_rto_prepare>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d102      	bne.n	800ca92 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f7ff ffc1 	bl	800ca14 <tcp_rexmit_rto_commit>
  }
}
 800ca92:	bf00      	nop
 800ca94:	3708      	adds	r7, #8
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	08013ed8 	.word	0x08013ed8
 800caa0:	0801455c 	.word	0x0801455c
 800caa4:	08013f2c 	.word	0x08013f2c

0800caa8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800caa8:	b590      	push	{r4, r7, lr}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d106      	bne.n	800cac4 <tcp_rexmit+0x1c>
 800cab6:	4b2f      	ldr	r3, [pc, #188]	@ (800cb74 <tcp_rexmit+0xcc>)
 800cab8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800cabc:	492e      	ldr	r1, [pc, #184]	@ (800cb78 <tcp_rexmit+0xd0>)
 800cabe:	482f      	ldr	r0, [pc, #188]	@ (800cb7c <tcp_rexmit+0xd4>)
 800cac0:	f004 fda4 	bl	801160c <iprintf>

  if (pcb->unacked == NULL) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d102      	bne.n	800cad2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cacc:	f06f 0305 	mvn.w	r3, #5
 800cad0:	e04c      	b.n	800cb6c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cad6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cad8:	68b8      	ldr	r0, [r7, #8]
 800cada:	f7ff fe2b 	bl	800c734 <tcp_output_segment_busy>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cae4:	f06f 0305 	mvn.w	r3, #5
 800cae8:	e040      	b.n	800cb6c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	336c      	adds	r3, #108	@ 0x6c
 800caf6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800caf8:	e002      	b.n	800cb00 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d011      	beq.n	800cb2c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7f8 fe0f 	bl	8005734 <lwip_htonl>
 800cb16:	4604      	mov	r4, r0
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7f8 fe08 	bl	8005734 <lwip_htonl>
 800cb24:	4603      	mov	r3, r0
 800cb26:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	dbe6      	blt.n	800cafa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d103      	bne.n	800cb4a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb50:	2bff      	cmp	r3, #255	@ 0xff
 800cb52:	d007      	beq.n	800cb64 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3714      	adds	r7, #20
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd90      	pop	{r4, r7, pc}
 800cb74:	08013ed8 	.word	0x08013ed8
 800cb78:	08014578 	.word	0x08014578
 800cb7c:	08013f2c 	.word	0x08013f2c

0800cb80 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d106      	bne.n	800cb9c <tcp_rexmit_fast+0x1c>
 800cb8e:	4b2a      	ldr	r3, [pc, #168]	@ (800cc38 <tcp_rexmit_fast+0xb8>)
 800cb90:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800cb94:	4929      	ldr	r1, [pc, #164]	@ (800cc3c <tcp_rexmit_fast+0xbc>)
 800cb96:	482a      	ldr	r0, [pc, #168]	@ (800cc40 <tcp_rexmit_fast+0xc0>)
 800cb98:	f004 fd38 	bl	801160c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d044      	beq.n	800cc2e <tcp_rexmit_fast+0xae>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	8b5b      	ldrh	r3, [r3, #26]
 800cba8:	f003 0304 	and.w	r3, r3, #4
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d13e      	bne.n	800cc2e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7ff ff79 	bl	800caa8 <tcp_rexmit>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d138      	bne.n	800cc2e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	bf28      	it	cs
 800cbcc:	4613      	movcs	r3, r2
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	0fda      	lsrs	r2, r3, #31
 800cbd2:	4413      	add	r3, r2
 800cbd4:	105b      	asrs	r3, r3, #1
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cbea:	005b      	lsls	r3, r3, #1
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d206      	bcs.n	800cbfe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cc08:	4619      	mov	r1, r3
 800cc0a:	0049      	lsls	r1, r1, #1
 800cc0c:	440b      	add	r3, r1
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	4413      	add	r3, r2
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	8b5b      	ldrh	r3, [r3, #26]
 800cc1e:	f043 0304 	orr.w	r3, r3, #4
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800cc2e:	bf00      	nop
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	08013ed8 	.word	0x08013ed8
 800cc3c:	08014590 	.word	0x08014590
 800cc40:	08013f2c 	.word	0x08013f2c

0800cc44 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	607b      	str	r3, [r7, #4]
 800cc4e:	460b      	mov	r3, r1
 800cc50:	817b      	strh	r3, [r7, #10]
 800cc52:	4613      	mov	r3, r2
 800cc54:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cc56:	897a      	ldrh	r2, [r7, #10]
 800cc58:	893b      	ldrh	r3, [r7, #8]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	3314      	adds	r3, #20
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cc66:	4619      	mov	r1, r3
 800cc68:	2022      	movs	r0, #34	@ 0x22
 800cc6a:	f7f9 fdc7 	bl	80067fc <pbuf_alloc>
 800cc6e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d04d      	beq.n	800cd12 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cc76:	897b      	ldrh	r3, [r7, #10]
 800cc78:	3313      	adds	r3, #19
 800cc7a:	697a      	ldr	r2, [r7, #20]
 800cc7c:	8952      	ldrh	r2, [r2, #10]
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	db06      	blt.n	800cc90 <tcp_output_alloc_header_common+0x4c>
 800cc82:	4b26      	ldr	r3, [pc, #152]	@ (800cd1c <tcp_output_alloc_header_common+0xd8>)
 800cc84:	f240 7223 	movw	r2, #1827	@ 0x723
 800cc88:	4925      	ldr	r1, [pc, #148]	@ (800cd20 <tcp_output_alloc_header_common+0xdc>)
 800cc8a:	4826      	ldr	r0, [pc, #152]	@ (800cd24 <tcp_output_alloc_header_common+0xe0>)
 800cc8c:	f004 fcbe 	bl	801160c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cc96:	8c3b      	ldrh	r3, [r7, #32]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7f8 fd35 	bl	8005708 <lwip_htons>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	461a      	mov	r2, r3
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7f8 fd2d 	bl	8005708 <lwip_htons>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f7f8 fd39 	bl	8005734 <lwip_htonl>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ccc8:	897b      	ldrh	r3, [r7, #10]
 800ccca:	089b      	lsrs	r3, r3, #2
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	3305      	adds	r3, #5
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	031b      	lsls	r3, r3, #12
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7f8 fd11 	bl	8005708 <lwip_htons>
 800cce6:	4603      	mov	r3, r0
 800cce8:	461a      	mov	r2, r3
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ccee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7f8 fd09 	bl	8005708 <lwip_htons>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	2200      	movs	r2, #0
 800cd02:	741a      	strb	r2, [r3, #16]
 800cd04:	2200      	movs	r2, #0
 800cd06:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	749a      	strb	r2, [r3, #18]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cd12:	697b      	ldr	r3, [r7, #20]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3718      	adds	r7, #24
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	08013ed8 	.word	0x08013ed8
 800cd20:	080145b0 	.word	0x080145b0
 800cd24:	08013f2c 	.word	0x08013f2c

0800cd28 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800cd28:	b5b0      	push	{r4, r5, r7, lr}
 800cd2a:	b08a      	sub	sp, #40	@ 0x28
 800cd2c:	af04      	add	r7, sp, #16
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	607b      	str	r3, [r7, #4]
 800cd32:	460b      	mov	r3, r1
 800cd34:	817b      	strh	r3, [r7, #10]
 800cd36:	4613      	mov	r3, r2
 800cd38:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d106      	bne.n	800cd4e <tcp_output_alloc_header+0x26>
 800cd40:	4b15      	ldr	r3, [pc, #84]	@ (800cd98 <tcp_output_alloc_header+0x70>)
 800cd42:	f240 7242 	movw	r2, #1858	@ 0x742
 800cd46:	4915      	ldr	r1, [pc, #84]	@ (800cd9c <tcp_output_alloc_header+0x74>)
 800cd48:	4815      	ldr	r0, [pc, #84]	@ (800cda0 <tcp_output_alloc_header+0x78>)
 800cd4a:	f004 fc5f 	bl	801160c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	8adb      	ldrh	r3, [r3, #22]
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	8b12      	ldrh	r2, [r2, #24]
 800cd5a:	68f9      	ldr	r1, [r7, #12]
 800cd5c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800cd5e:	893d      	ldrh	r5, [r7, #8]
 800cd60:	897c      	ldrh	r4, [r7, #10]
 800cd62:	9103      	str	r1, [sp, #12]
 800cd64:	2110      	movs	r1, #16
 800cd66:	9102      	str	r1, [sp, #8]
 800cd68:	9201      	str	r2, [sp, #4]
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	462a      	mov	r2, r5
 800cd70:	4621      	mov	r1, r4
 800cd72:	f7ff ff67 	bl	800cc44 <tcp_output_alloc_header_common>
 800cd76:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d006      	beq.n	800cd8c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd82:	68fa      	ldr	r2, [r7, #12]
 800cd84:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800cd86:	441a      	add	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800cd8c:	697b      	ldr	r3, [r7, #20]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3718      	adds	r7, #24
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bdb0      	pop	{r4, r5, r7, pc}
 800cd96:	bf00      	nop
 800cd98:	08013ed8 	.word	0x08013ed8
 800cd9c:	080145e0 	.word	0x080145e0
 800cda0:	08013f2c 	.word	0x08013f2c

0800cda4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b088      	sub	sp, #32
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	4611      	mov	r1, r2
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	71fb      	strb	r3, [r7, #7]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d106      	bne.n	800cdd2 <tcp_output_fill_options+0x2e>
 800cdc4:	4b12      	ldr	r3, [pc, #72]	@ (800ce10 <tcp_output_fill_options+0x6c>)
 800cdc6:	f240 7256 	movw	r2, #1878	@ 0x756
 800cdca:	4912      	ldr	r1, [pc, #72]	@ (800ce14 <tcp_output_fill_options+0x70>)
 800cdcc:	4812      	ldr	r0, [pc, #72]	@ (800ce18 <tcp_output_fill_options+0x74>)
 800cdce:	f004 fc1d 	bl	801160c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	3314      	adds	r3, #20
 800cddc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cdde:	8bfb      	ldrh	r3, [r7, #30]
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	461a      	mov	r2, r3
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	f003 0304 	and.w	r3, r3, #4
 800cdec:	4413      	add	r3, r2
 800cdee:	3314      	adds	r3, #20
 800cdf0:	69ba      	ldr	r2, [r7, #24]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	697a      	ldr	r2, [r7, #20]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d006      	beq.n	800ce08 <tcp_output_fill_options+0x64>
 800cdfa:	4b05      	ldr	r3, [pc, #20]	@ (800ce10 <tcp_output_fill_options+0x6c>)
 800cdfc:	f240 7275 	movw	r2, #1909	@ 0x775
 800ce00:	4906      	ldr	r1, [pc, #24]	@ (800ce1c <tcp_output_fill_options+0x78>)
 800ce02:	4805      	ldr	r0, [pc, #20]	@ (800ce18 <tcp_output_fill_options+0x74>)
 800ce04:	f004 fc02 	bl	801160c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ce08:	bf00      	nop
 800ce0a:	3720      	adds	r7, #32
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	08013ed8 	.word	0x08013ed8
 800ce14:	08014608 	.word	0x08014608
 800ce18:	08013f2c 	.word	0x08013f2c
 800ce1c:	08014500 	.word	0x08014500

0800ce20 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b08a      	sub	sp, #40	@ 0x28
 800ce24:	af04      	add	r7, sp, #16
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
 800ce2c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d106      	bne.n	800ce42 <tcp_output_control_segment+0x22>
 800ce34:	4b1c      	ldr	r3, [pc, #112]	@ (800cea8 <tcp_output_control_segment+0x88>)
 800ce36:	f240 7287 	movw	r2, #1927	@ 0x787
 800ce3a:	491c      	ldr	r1, [pc, #112]	@ (800ceac <tcp_output_control_segment+0x8c>)
 800ce3c:	481c      	ldr	r0, [pc, #112]	@ (800ceb0 <tcp_output_control_segment+0x90>)
 800ce3e:	f004 fbe5 	bl	801160c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ce42:	683a      	ldr	r2, [r7, #0]
 800ce44:	6879      	ldr	r1, [r7, #4]
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f7fe faea 	bl	800b420 <tcp_route>
 800ce4c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d102      	bne.n	800ce5a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ce54:	23fc      	movs	r3, #252	@ 0xfc
 800ce56:	75fb      	strb	r3, [r7, #23]
 800ce58:	e01c      	b.n	800ce94 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d006      	beq.n	800ce6e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	7adb      	ldrb	r3, [r3, #11]
 800ce64:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	7a9b      	ldrb	r3, [r3, #10]
 800ce6a:	757b      	strb	r3, [r7, #21]
 800ce6c:	e003      	b.n	800ce76 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ce6e:	23ff      	movs	r3, #255	@ 0xff
 800ce70:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ce76:	7dba      	ldrb	r2, [r7, #22]
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	9302      	str	r3, [sp, #8]
 800ce7c:	2306      	movs	r3, #6
 800ce7e:	9301      	str	r3, [sp, #4]
 800ce80:	7d7b      	ldrb	r3, [r7, #21]
 800ce82:	9300      	str	r3, [sp, #0]
 800ce84:	4613      	mov	r3, r2
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	6879      	ldr	r1, [r7, #4]
 800ce8a:	68b8      	ldr	r0, [r7, #8]
 800ce8c:	f001 ff70 	bl	800ed70 <ip4_output_if>
 800ce90:	4603      	mov	r3, r0
 800ce92:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ce94:	68b8      	ldr	r0, [r7, #8]
 800ce96:	f7f9 ff95 	bl	8006dc4 <pbuf_free>
  return err;
 800ce9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3718      	adds	r7, #24
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	08013ed8 	.word	0x08013ed8
 800ceac:	08014630 	.word	0x08014630
 800ceb0:	08013f2c 	.word	0x08013f2c

0800ceb4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ceb4:	b590      	push	{r4, r7, lr}
 800ceb6:	b08b      	sub	sp, #44	@ 0x2c
 800ceb8:	af04      	add	r7, sp, #16
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d106      	bne.n	800ced6 <tcp_rst+0x22>
 800cec8:	4b1f      	ldr	r3, [pc, #124]	@ (800cf48 <tcp_rst+0x94>)
 800ceca:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800cece:	491f      	ldr	r1, [pc, #124]	@ (800cf4c <tcp_rst+0x98>)
 800ced0:	481f      	ldr	r0, [pc, #124]	@ (800cf50 <tcp_rst+0x9c>)
 800ced2:	f004 fb9b 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ced6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d106      	bne.n	800ceea <tcp_rst+0x36>
 800cedc:	4b1a      	ldr	r3, [pc, #104]	@ (800cf48 <tcp_rst+0x94>)
 800cede:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800cee2:	491c      	ldr	r1, [pc, #112]	@ (800cf54 <tcp_rst+0xa0>)
 800cee4:	481a      	ldr	r0, [pc, #104]	@ (800cf50 <tcp_rst+0x9c>)
 800cee6:	f004 fb91 	bl	801160c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ceea:	2300      	movs	r3, #0
 800ceec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ceee:	f246 0308 	movw	r3, #24584	@ 0x6008
 800cef2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cef4:	7dfb      	ldrb	r3, [r7, #23]
 800cef6:	b29c      	uxth	r4, r3
 800cef8:	68b8      	ldr	r0, [r7, #8]
 800cefa:	f7f8 fc1b 	bl	8005734 <lwip_htonl>
 800cefe:	4602      	mov	r2, r0
 800cf00:	8abb      	ldrh	r3, [r7, #20]
 800cf02:	9303      	str	r3, [sp, #12]
 800cf04:	2314      	movs	r3, #20
 800cf06:	9302      	str	r3, [sp, #8]
 800cf08:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800cf0a:	9301      	str	r3, [sp, #4]
 800cf0c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cf0e:	9300      	str	r3, [sp, #0]
 800cf10:	4613      	mov	r3, r2
 800cf12:	2200      	movs	r2, #0
 800cf14:	4621      	mov	r1, r4
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f7ff fe94 	bl	800cc44 <tcp_output_alloc_header_common>
 800cf1c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d00c      	beq.n	800cf3e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cf24:	7dfb      	ldrb	r3, [r7, #23]
 800cf26:	2200      	movs	r2, #0
 800cf28:	6939      	ldr	r1, [r7, #16]
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f7ff ff3a 	bl	800cda4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cf30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf32:	683a      	ldr	r2, [r7, #0]
 800cf34:	6939      	ldr	r1, [r7, #16]
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f7ff ff72 	bl	800ce20 <tcp_output_control_segment>
 800cf3c:	e000      	b.n	800cf40 <tcp_rst+0x8c>
    return;
 800cf3e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800cf40:	371c      	adds	r7, #28
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd90      	pop	{r4, r7, pc}
 800cf46:	bf00      	nop
 800cf48:	08013ed8 	.word	0x08013ed8
 800cf4c:	0801465c 	.word	0x0801465c
 800cf50:	08013f2c 	.word	0x08013f2c
 800cf54:	08014678 	.word	0x08014678

0800cf58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cf58:	b590      	push	{r4, r7, lr}
 800cf5a:	b087      	sub	sp, #28
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800cf60:	2300      	movs	r3, #0
 800cf62:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d106      	bne.n	800cf7c <tcp_send_empty_ack+0x24>
 800cf6e:	4b28      	ldr	r3, [pc, #160]	@ (800d010 <tcp_send_empty_ack+0xb8>)
 800cf70:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800cf74:	4927      	ldr	r1, [pc, #156]	@ (800d014 <tcp_send_empty_ack+0xbc>)
 800cf76:	4828      	ldr	r0, [pc, #160]	@ (800d018 <tcp_send_empty_ack+0xc0>)
 800cf78:	f004 fb48 	bl	801160c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cf7c:	7dfb      	ldrb	r3, [r7, #23]
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	f003 0304 	and.w	r3, r3, #4
 800cf86:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cf88:	7d7b      	ldrb	r3, [r7, #21]
 800cf8a:	b29c      	uxth	r4, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7f8 fbcf 	bl	8005734 <lwip_htonl>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2200      	movs	r2, #0
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f7ff fec3 	bl	800cd28 <tcp_output_alloc_header>
 800cfa2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d109      	bne.n	800cfbe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	8b5b      	ldrh	r3, [r3, #26]
 800cfae:	f043 0303 	orr.w	r3, r3, #3
 800cfb2:	b29a      	uxth	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cfb8:	f06f 0301 	mvn.w	r3, #1
 800cfbc:	e023      	b.n	800d006 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cfbe:	7dbb      	ldrb	r3, [r7, #22]
 800cfc0:	7dfa      	ldrb	r2, [r7, #23]
 800cfc2:	6939      	ldr	r1, [r7, #16]
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7ff feed 	bl	800cda4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	6939      	ldr	r1, [r7, #16]
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7ff ff24 	bl	800ce20 <tcp_output_control_segment>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cfdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d007      	beq.n	800cff4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	8b5b      	ldrh	r3, [r3, #26]
 800cfe8:	f043 0303 	orr.w	r3, r3, #3
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	835a      	strh	r2, [r3, #26]
 800cff2:	e006      	b.n	800d002 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	8b5b      	ldrh	r3, [r3, #26]
 800cff8:	f023 0303 	bic.w	r3, r3, #3
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d002:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d006:	4618      	mov	r0, r3
 800d008:	371c      	adds	r7, #28
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd90      	pop	{r4, r7, pc}
 800d00e:	bf00      	nop
 800d010:	08013ed8 	.word	0x08013ed8
 800d014:	08014694 	.word	0x08014694
 800d018:	08013f2c 	.word	0x08013f2c

0800d01c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d01c:	b590      	push	{r4, r7, lr}
 800d01e:	b087      	sub	sp, #28
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d024:	2300      	movs	r3, #0
 800d026:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d106      	bne.n	800d03c <tcp_keepalive+0x20>
 800d02e:	4b18      	ldr	r3, [pc, #96]	@ (800d090 <tcp_keepalive+0x74>)
 800d030:	f640 0224 	movw	r2, #2084	@ 0x824
 800d034:	4917      	ldr	r1, [pc, #92]	@ (800d094 <tcp_keepalive+0x78>)
 800d036:	4818      	ldr	r0, [pc, #96]	@ (800d098 <tcp_keepalive+0x7c>)
 800d038:	f004 fae8 	bl	801160c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
 800d03e:	b29c      	uxth	r4, r3
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d044:	3b01      	subs	r3, #1
 800d046:	4618      	mov	r0, r3
 800d048:	f7f8 fb74 	bl	8005734 <lwip_htonl>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2200      	movs	r2, #0
 800d050:	4621      	mov	r1, r4
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f7ff fe68 	bl	800cd28 <tcp_output_alloc_header>
 800d058:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d102      	bne.n	800d066 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d060:	f04f 33ff 	mov.w	r3, #4294967295
 800d064:	e010      	b.n	800d088 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d066:	7dfb      	ldrb	r3, [r7, #23]
 800d068:	2200      	movs	r2, #0
 800d06a:	6939      	ldr	r1, [r7, #16]
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7ff fe99 	bl	800cda4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	3304      	adds	r3, #4
 800d078:	6939      	ldr	r1, [r7, #16]
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7ff fed0 	bl	800ce20 <tcp_output_control_segment>
 800d080:	4603      	mov	r3, r0
 800d082:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d084:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	371c      	adds	r7, #28
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd90      	pop	{r4, r7, pc}
 800d090:	08013ed8 	.word	0x08013ed8
 800d094:	080146b4 	.word	0x080146b4
 800d098:	08013f2c 	.word	0x08013f2c

0800d09c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d09c:	b590      	push	{r4, r7, lr}
 800d09e:	b08b      	sub	sp, #44	@ 0x2c
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d106      	bne.n	800d0be <tcp_zero_window_probe+0x22>
 800d0b0:	4b4c      	ldr	r3, [pc, #304]	@ (800d1e4 <tcp_zero_window_probe+0x148>)
 800d0b2:	f640 024f 	movw	r2, #2127	@ 0x84f
 800d0b6:	494c      	ldr	r1, [pc, #304]	@ (800d1e8 <tcp_zero_window_probe+0x14c>)
 800d0b8:	484c      	ldr	r0, [pc, #304]	@ (800d1ec <tcp_zero_window_probe+0x150>)
 800d0ba:	f004 faa7 	bl	801160c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d0c4:	6a3b      	ldr	r3, [r7, #32]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d101      	bne.n	800d0ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	e086      	b.n	800d1dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d0d4:	2bff      	cmp	r3, #255	@ 0xff
 800d0d6:	d007      	beq.n	800d0e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d0de:	3301      	adds	r3, #1
 800d0e0:	b2da      	uxtb	r2, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d0e8:	6a3b      	ldr	r3, [r7, #32]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	899b      	ldrh	r3, [r3, #12]
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7f8 fb09 	bl	8005708 <lwip_htons>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	f003 0301 	and.w	r3, r3, #1
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d005      	beq.n	800d10e <tcp_zero_window_probe+0x72>
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	891b      	ldrh	r3, [r3, #8]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d101      	bne.n	800d10e <tcp_zero_window_probe+0x72>
 800d10a:	2301      	movs	r3, #1
 800d10c:	e000      	b.n	800d110 <tcp_zero_window_probe+0x74>
 800d10e:	2300      	movs	r3, #0
 800d110:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d112:	7ffb      	ldrb	r3, [r7, #31]
 800d114:	2b00      	cmp	r3, #0
 800d116:	bf0c      	ite	eq
 800d118:	2301      	moveq	r3, #1
 800d11a:	2300      	movne	r3, #0
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d124:	b299      	uxth	r1, r3
 800d126:	6a3b      	ldr	r3, [r7, #32]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	8bba      	ldrh	r2, [r7, #28]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7ff fdfa 	bl	800cd28 <tcp_output_alloc_header>
 800d134:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d102      	bne.n	800d142 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d13c:	f04f 33ff 	mov.w	r3, #4294967295
 800d140:	e04c      	b.n	800d1dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d148:	7ffb      	ldrb	r3, [r7, #31]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d011      	beq.n	800d172 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	899b      	ldrh	r3, [r3, #12]
 800d152:	b29b      	uxth	r3, r3
 800d154:	b21b      	sxth	r3, r3
 800d156:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d15a:	b21c      	sxth	r4, r3
 800d15c:	2011      	movs	r0, #17
 800d15e:	f7f8 fad3 	bl	8005708 <lwip_htons>
 800d162:	4603      	mov	r3, r0
 800d164:	b21b      	sxth	r3, r3
 800d166:	4323      	orrs	r3, r4
 800d168:	b21b      	sxth	r3, r3
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	819a      	strh	r2, [r3, #12]
 800d170:	e010      	b.n	800d194 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	3314      	adds	r3, #20
 800d178:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d17a:	6a3b      	ldr	r3, [r7, #32]
 800d17c:	6858      	ldr	r0, [r3, #4]
 800d17e:	6a3b      	ldr	r3, [r7, #32]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	891a      	ldrh	r2, [r3, #8]
 800d184:	6a3b      	ldr	r3, [r7, #32]
 800d186:	891b      	ldrh	r3, [r3, #8]
 800d188:	1ad3      	subs	r3, r2, r3
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	2201      	movs	r2, #1
 800d18e:	6939      	ldr	r1, [r7, #16]
 800d190:	f7fa f802 	bl	8007198 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7f8 faca 	bl	8005734 <lwip_htonl>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	da02      	bge.n	800d1b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1bc:	2200      	movs	r2, #0
 800d1be:	69b9      	ldr	r1, [r7, #24]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f7ff fdef 	bl	800cda4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	69b9      	ldr	r1, [r7, #24]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f7ff fe26 	bl	800ce20 <tcp_output_control_segment>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d1d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	372c      	adds	r7, #44	@ 0x2c
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd90      	pop	{r4, r7, pc}
 800d1e4:	08013ed8 	.word	0x08013ed8
 800d1e8:	080146d0 	.word	0x080146d0
 800d1ec:	08013f2c 	.word	0x08013f2c

0800d1f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d1f8:	f7fa f8bc 	bl	8007374 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d1fc:	4b0a      	ldr	r3, [pc, #40]	@ (800d228 <tcpip_tcp_timer+0x38>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d103      	bne.n	800d20c <tcpip_tcp_timer+0x1c>
 800d204:	4b09      	ldr	r3, [pc, #36]	@ (800d22c <tcpip_tcp_timer+0x3c>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d005      	beq.n	800d218 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d20c:	2200      	movs	r2, #0
 800d20e:	4908      	ldr	r1, [pc, #32]	@ (800d230 <tcpip_tcp_timer+0x40>)
 800d210:	20fa      	movs	r0, #250	@ 0xfa
 800d212:	f000 f8f3 	bl	800d3fc <sys_timeout>
 800d216:	e003      	b.n	800d220 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d218:	4b06      	ldr	r3, [pc, #24]	@ (800d234 <tcpip_tcp_timer+0x44>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	601a      	str	r2, [r3, #0]
  }
}
 800d21e:	bf00      	nop
 800d220:	bf00      	nop
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	200083e4 	.word	0x200083e4
 800d22c:	200083e8 	.word	0x200083e8
 800d230:	0800d1f1 	.word	0x0800d1f1
 800d234:	20008430 	.word	0x20008430

0800d238 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d23c:	4b0a      	ldr	r3, [pc, #40]	@ (800d268 <tcp_timer_needed+0x30>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d10f      	bne.n	800d264 <tcp_timer_needed+0x2c>
 800d244:	4b09      	ldr	r3, [pc, #36]	@ (800d26c <tcp_timer_needed+0x34>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d103      	bne.n	800d254 <tcp_timer_needed+0x1c>
 800d24c:	4b08      	ldr	r3, [pc, #32]	@ (800d270 <tcp_timer_needed+0x38>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d007      	beq.n	800d264 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d254:	4b04      	ldr	r3, [pc, #16]	@ (800d268 <tcp_timer_needed+0x30>)
 800d256:	2201      	movs	r2, #1
 800d258:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d25a:	2200      	movs	r2, #0
 800d25c:	4905      	ldr	r1, [pc, #20]	@ (800d274 <tcp_timer_needed+0x3c>)
 800d25e:	20fa      	movs	r0, #250	@ 0xfa
 800d260:	f000 f8cc 	bl	800d3fc <sys_timeout>
  }
}
 800d264:	bf00      	nop
 800d266:	bd80      	pop	{r7, pc}
 800d268:	20008430 	.word	0x20008430
 800d26c:	200083e4 	.word	0x200083e4
 800d270:	200083e8 	.word	0x200083e8
 800d274:	0800d1f1 	.word	0x0800d1f1

0800d278 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d284:	2006      	movs	r0, #6
 800d286:	f7f8 feb7 	bl	8005ff8 <memp_malloc>
 800d28a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d109      	bne.n	800d2a6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d151      	bne.n	800d33c <sys_timeout_abs+0xc4>
 800d298:	4b2a      	ldr	r3, [pc, #168]	@ (800d344 <sys_timeout_abs+0xcc>)
 800d29a:	22be      	movs	r2, #190	@ 0xbe
 800d29c:	492a      	ldr	r1, [pc, #168]	@ (800d348 <sys_timeout_abs+0xd0>)
 800d29e:	482b      	ldr	r0, [pc, #172]	@ (800d34c <sys_timeout_abs+0xd4>)
 800d2a0:	f004 f9b4 	bl	801160c <iprintf>
    return;
 800d2a4:	e04a      	b.n	800d33c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	68ba      	ldr	r2, [r7, #8]
 800d2b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d2be:	4b24      	ldr	r3, [pc, #144]	@ (800d350 <sys_timeout_abs+0xd8>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d103      	bne.n	800d2ce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d2c6:	4a22      	ldr	r2, [pc, #136]	@ (800d350 <sys_timeout_abs+0xd8>)
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	6013      	str	r3, [r2, #0]
    return;
 800d2cc:	e037      	b.n	800d33e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	685a      	ldr	r2, [r3, #4]
 800d2d2:	4b1f      	ldr	r3, [pc, #124]	@ (800d350 <sys_timeout_abs+0xd8>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	1ad3      	subs	r3, r2, r3
 800d2da:	0fdb      	lsrs	r3, r3, #31
 800d2dc:	f003 0301 	and.w	r3, r3, #1
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d007      	beq.n	800d2f6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d2e6:	4b1a      	ldr	r3, [pc, #104]	@ (800d350 <sys_timeout_abs+0xd8>)
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d2ee:	4a18      	ldr	r2, [pc, #96]	@ (800d350 <sys_timeout_abs+0xd8>)
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	6013      	str	r3, [r2, #0]
 800d2f4:	e023      	b.n	800d33e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d2f6:	4b16      	ldr	r3, [pc, #88]	@ (800d350 <sys_timeout_abs+0xd8>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	617b      	str	r3, [r7, #20]
 800d2fc:	e01a      	b.n	800d334 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00b      	beq.n	800d31e <sys_timeout_abs+0xa6>
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	685a      	ldr	r2, [r3, #4]
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	0fdb      	lsrs	r3, r3, #31
 800d314:	f003 0301 	and.w	r3, r3, #1
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d007      	beq.n	800d32e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	693a      	ldr	r2, [r7, #16]
 800d32a:	601a      	str	r2, [r3, #0]
        break;
 800d32c:	e007      	b.n	800d33e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	617b      	str	r3, [r7, #20]
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1e1      	bne.n	800d2fe <sys_timeout_abs+0x86>
 800d33a:	e000      	b.n	800d33e <sys_timeout_abs+0xc6>
    return;
 800d33c:	bf00      	nop
      }
    }
  }
}
 800d33e:	3718      	adds	r7, #24
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	080146f4 	.word	0x080146f4
 800d348:	08014728 	.word	0x08014728
 800d34c:	08014768 	.word	0x08014768
 800d350:	20008428 	.word	0x20008428

0800d354 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	4798      	blx	r3

  now = sys_now();
 800d366:	f7f7 ffcf 	bl	8005308 <sys_now>
 800d36a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	4b0f      	ldr	r3, [pc, #60]	@ (800d3b0 <lwip_cyclic_timer+0x5c>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4413      	add	r3, r2
 800d376:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	1ad3      	subs	r3, r2, r3
 800d37e:	0fdb      	lsrs	r3, r3, #31
 800d380:	f003 0301 	and.w	r3, r3, #1
 800d384:	b2db      	uxtb	r3, r3
 800d386:	2b00      	cmp	r3, #0
 800d388:	d009      	beq.n	800d39e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	4413      	add	r3, r2
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	4907      	ldr	r1, [pc, #28]	@ (800d3b4 <lwip_cyclic_timer+0x60>)
 800d396:	4618      	mov	r0, r3
 800d398:	f7ff ff6e 	bl	800d278 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d39c:	e004      	b.n	800d3a8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	4904      	ldr	r1, [pc, #16]	@ (800d3b4 <lwip_cyclic_timer+0x60>)
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f7ff ff68 	bl	800d278 <sys_timeout_abs>
}
 800d3a8:	bf00      	nop
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	2000842c 	.word	0x2000842c
 800d3b4:	0800d355 	.word	0x0800d355

0800d3b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d3be:	2301      	movs	r3, #1
 800d3c0:	607b      	str	r3, [r7, #4]
 800d3c2:	e00e      	b.n	800d3e2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d3c4:	4a0b      	ldr	r2, [pc, #44]	@ (800d3f4 <sys_timeouts_init+0x3c>)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	00db      	lsls	r3, r3, #3
 800d3d0:	4a08      	ldr	r2, [pc, #32]	@ (800d3f4 <sys_timeouts_init+0x3c>)
 800d3d2:	4413      	add	r3, r2
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	4908      	ldr	r1, [pc, #32]	@ (800d3f8 <sys_timeouts_init+0x40>)
 800d3d8:	f000 f810 	bl	800d3fc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	607b      	str	r3, [r7, #4]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b02      	cmp	r3, #2
 800d3e6:	d9ed      	bls.n	800d3c4 <sys_timeouts_init+0xc>
  }
}
 800d3e8:	bf00      	nop
 800d3ea:	bf00      	nop
 800d3ec:	3708      	adds	r7, #8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	08015434 	.word	0x08015434
 800d3f8:	0800d355 	.word	0x0800d355

0800d3fc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d40e:	d306      	bcc.n	800d41e <sys_timeout+0x22>
 800d410:	4b0a      	ldr	r3, [pc, #40]	@ (800d43c <sys_timeout+0x40>)
 800d412:	f240 1229 	movw	r2, #297	@ 0x129
 800d416:	490a      	ldr	r1, [pc, #40]	@ (800d440 <sys_timeout+0x44>)
 800d418:	480a      	ldr	r0, [pc, #40]	@ (800d444 <sys_timeout+0x48>)
 800d41a:	f004 f8f7 	bl	801160c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d41e:	f7f7 ff73 	bl	8005308 <sys_now>
 800d422:	4602      	mov	r2, r0
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	4413      	add	r3, r2
 800d428:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	68b9      	ldr	r1, [r7, #8]
 800d42e:	6978      	ldr	r0, [r7, #20]
 800d430:	f7ff ff22 	bl	800d278 <sys_timeout_abs>
#endif
}
 800d434:	bf00      	nop
 800d436:	3718      	adds	r7, #24
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	080146f4 	.word	0x080146f4
 800d440:	08014790 	.word	0x08014790
 800d444:	08014768 	.word	0x08014768

0800d448 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d44e:	f7f7 ff5b 	bl	8005308 <sys_now>
 800d452:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d454:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c0 <sys_check_timeouts+0x78>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d001      	beq.n	800d462 <sys_check_timeouts+0x1a>
 800d45e:	f7f9 f977 	bl	8006750 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d462:	4b18      	ldr	r3, [pc, #96]	@ (800d4c4 <sys_check_timeouts+0x7c>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d022      	beq.n	800d4b4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	0fdb      	lsrs	r3, r3, #31
 800d478:	f003 0301 	and.w	r3, r3, #1
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d11a      	bne.n	800d4b8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a0f      	ldr	r2, [pc, #60]	@ (800d4c4 <sys_check_timeouts+0x7c>)
 800d488:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	4a0b      	ldr	r2, [pc, #44]	@ (800d4c8 <sys_check_timeouts+0x80>)
 800d49c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d49e:	68b9      	ldr	r1, [r7, #8]
 800d4a0:	2006      	movs	r0, #6
 800d4a2:	f7f8 fe19 	bl	80060d8 <memp_free>
    if (handler != NULL) {
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d0d3      	beq.n	800d454 <sys_check_timeouts+0xc>
      handler(arg);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6838      	ldr	r0, [r7, #0]
 800d4b0:	4798      	blx	r3
  do {
 800d4b2:	e7cf      	b.n	800d454 <sys_check_timeouts+0xc>
      return;
 800d4b4:	bf00      	nop
 800d4b6:	e000      	b.n	800d4ba <sys_check_timeouts+0x72>
      return;
 800d4b8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	200083d5 	.word	0x200083d5
 800d4c4:	20008428 	.word	0x20008428
 800d4c8:	2000842c 	.word	0x2000842c

0800d4cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d4d0:	f003 ff8a 	bl	80113e8 <rand>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	4b01      	ldr	r3, [pc, #4]	@ (800d4ec <udp_init+0x20>)
 800d4e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d4e8:	bf00      	nop
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	20000028 	.word	0x20000028

0800d4f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d105      	bne.n	800d510 <udp_input_local_match+0x20>
 800d504:	4b27      	ldr	r3, [pc, #156]	@ (800d5a4 <udp_input_local_match+0xb4>)
 800d506:	2287      	movs	r2, #135	@ 0x87
 800d508:	4927      	ldr	r1, [pc, #156]	@ (800d5a8 <udp_input_local_match+0xb8>)
 800d50a:	4828      	ldr	r0, [pc, #160]	@ (800d5ac <udp_input_local_match+0xbc>)
 800d50c:	f004 f87e 	bl	801160c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d105      	bne.n	800d522 <udp_input_local_match+0x32>
 800d516:	4b23      	ldr	r3, [pc, #140]	@ (800d5a4 <udp_input_local_match+0xb4>)
 800d518:	2288      	movs	r2, #136	@ 0x88
 800d51a:	4925      	ldr	r1, [pc, #148]	@ (800d5b0 <udp_input_local_match+0xc0>)
 800d51c:	4823      	ldr	r0, [pc, #140]	@ (800d5ac <udp_input_local_match+0xbc>)
 800d51e:	f004 f875 	bl	801160c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	7a1b      	ldrb	r3, [r3, #8]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00b      	beq.n	800d542 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	7a1a      	ldrb	r2, [r3, #8]
 800d52e:	4b21      	ldr	r3, [pc, #132]	@ (800d5b4 <udp_input_local_match+0xc4>)
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d536:	3301      	adds	r3, #1
 800d538:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d001      	beq.n	800d542 <udp_input_local_match+0x52>
    return 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	e02b      	b.n	800d59a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d542:	79fb      	ldrb	r3, [r7, #7]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d018      	beq.n	800d57a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d013      	beq.n	800d576 <udp_input_local_match+0x86>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00f      	beq.n	800d576 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d556:	4b17      	ldr	r3, [pc, #92]	@ (800d5b4 <udp_input_local_match+0xc4>)
 800d558:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d55e:	d00a      	beq.n	800d576 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	4b13      	ldr	r3, [pc, #76]	@ (800d5b4 <udp_input_local_match+0xc4>)
 800d566:	695b      	ldr	r3, [r3, #20]
 800d568:	405a      	eors	r2, r3
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	3308      	adds	r3, #8
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d572:	2b00      	cmp	r3, #0
 800d574:	d110      	bne.n	800d598 <udp_input_local_match+0xa8>
          return 1;
 800d576:	2301      	movs	r3, #1
 800d578:	e00f      	b.n	800d59a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d009      	beq.n	800d594 <udp_input_local_match+0xa4>
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d005      	beq.n	800d594 <udp_input_local_match+0xa4>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	4b09      	ldr	r3, [pc, #36]	@ (800d5b4 <udp_input_local_match+0xc4>)
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	429a      	cmp	r2, r3
 800d592:	d101      	bne.n	800d598 <udp_input_local_match+0xa8>
        return 1;
 800d594:	2301      	movs	r3, #1
 800d596:	e000      	b.n	800d59a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d598:	2300      	movs	r3, #0
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	080147dc 	.word	0x080147dc
 800d5a8:	0801480c 	.word	0x0801480c
 800d5ac:	08014830 	.word	0x08014830
 800d5b0:	08014858 	.word	0x08014858
 800d5b4:	20004e68 	.word	0x20004e68

0800d5b8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d5b8:	b590      	push	{r4, r7, lr}
 800d5ba:	b08d      	sub	sp, #52	@ 0x34
 800d5bc:	af02      	add	r7, sp, #8
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d105      	bne.n	800d5d8 <udp_input+0x20>
 800d5cc:	4b7c      	ldr	r3, [pc, #496]	@ (800d7c0 <udp_input+0x208>)
 800d5ce:	22cf      	movs	r2, #207	@ 0xcf
 800d5d0:	497c      	ldr	r1, [pc, #496]	@ (800d7c4 <udp_input+0x20c>)
 800d5d2:	487d      	ldr	r0, [pc, #500]	@ (800d7c8 <udp_input+0x210>)
 800d5d4:	f004 f81a 	bl	801160c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d105      	bne.n	800d5ea <udp_input+0x32>
 800d5de:	4b78      	ldr	r3, [pc, #480]	@ (800d7c0 <udp_input+0x208>)
 800d5e0:	22d0      	movs	r2, #208	@ 0xd0
 800d5e2:	497a      	ldr	r1, [pc, #488]	@ (800d7cc <udp_input+0x214>)
 800d5e4:	4878      	ldr	r0, [pc, #480]	@ (800d7c8 <udp_input+0x210>)
 800d5e6:	f004 f811 	bl	801160c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	895b      	ldrh	r3, [r3, #10]
 800d5ee:	2b07      	cmp	r3, #7
 800d5f0:	d803      	bhi.n	800d5fa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7f9 fbe6 	bl	8006dc4 <pbuf_free>
    goto end;
 800d5f8:	e0de      	b.n	800d7b8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d600:	4b73      	ldr	r3, [pc, #460]	@ (800d7d0 <udp_input+0x218>)
 800d602:	695b      	ldr	r3, [r3, #20]
 800d604:	4a72      	ldr	r2, [pc, #456]	@ (800d7d0 <udp_input+0x218>)
 800d606:	6812      	ldr	r2, [r2, #0]
 800d608:	4611      	mov	r1, r2
 800d60a:	4618      	mov	r0, r3
 800d60c:	f001 fc88 	bl	800ef20 <ip4_addr_isbroadcast_u32>
 800d610:	4603      	mov	r3, r0
 800d612:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	881b      	ldrh	r3, [r3, #0]
 800d618:	b29b      	uxth	r3, r3
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7f8 f874 	bl	8005708 <lwip_htons>
 800d620:	4603      	mov	r3, r0
 800d622:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	885b      	ldrh	r3, [r3, #2]
 800d628:	b29b      	uxth	r3, r3
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7f8 f86c 	bl	8005708 <lwip_htons>
 800d630:	4603      	mov	r3, r0
 800d632:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d634:	2300      	movs	r3, #0
 800d636:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800d638:	2300      	movs	r3, #0
 800d63a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d63c:	2300      	movs	r3, #0
 800d63e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d640:	4b64      	ldr	r3, [pc, #400]	@ (800d7d4 <udp_input+0x21c>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	627b      	str	r3, [r7, #36]	@ 0x24
 800d646:	e054      	b.n	800d6f2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64a:	8a5b      	ldrh	r3, [r3, #18]
 800d64c:	89fa      	ldrh	r2, [r7, #14]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d14a      	bne.n	800d6e8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d652:	7cfb      	ldrb	r3, [r7, #19]
 800d654:	461a      	mov	r2, r3
 800d656:	6839      	ldr	r1, [r7, #0]
 800d658:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d65a:	f7ff ff49 	bl	800d4f0 <udp_input_local_match>
 800d65e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d660:	2b00      	cmp	r3, #0
 800d662:	d041      	beq.n	800d6e8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d666:	7c1b      	ldrb	r3, [r3, #16]
 800d668:	f003 0304 	and.w	r3, r3, #4
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d11d      	bne.n	800d6ac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d102      	bne.n	800d67c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d678:	61fb      	str	r3, [r7, #28]
 800d67a:	e017      	b.n	800d6ac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d67c:	7cfb      	ldrb	r3, [r7, #19]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d014      	beq.n	800d6ac <udp_input+0xf4>
 800d682:	4b53      	ldr	r3, [pc, #332]	@ (800d7d0 <udp_input+0x218>)
 800d684:	695b      	ldr	r3, [r3, #20]
 800d686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d68a:	d10f      	bne.n	800d6ac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	3304      	adds	r3, #4
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	429a      	cmp	r2, r3
 800d698:	d008      	beq.n	800d6ac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d101      	bne.n	800d6ac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6aa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ae:	8a9b      	ldrh	r3, [r3, #20]
 800d6b0:	8a3a      	ldrh	r2, [r7, #16]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d118      	bne.n	800d6e8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d005      	beq.n	800d6ca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c0:	685a      	ldr	r2, [r3, #4]
 800d6c2:	4b43      	ldr	r3, [pc, #268]	@ (800d7d0 <udp_input+0x218>)
 800d6c4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d10e      	bne.n	800d6e8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d6ca:	6a3b      	ldr	r3, [r7, #32]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d014      	beq.n	800d6fa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d2:	68da      	ldr	r2, [r3, #12]
 800d6d4:	6a3b      	ldr	r3, [r7, #32]
 800d6d6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d6d8:	4b3e      	ldr	r3, [pc, #248]	@ (800d7d4 <udp_input+0x21c>)
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6de:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d6e0:	4a3c      	ldr	r2, [pc, #240]	@ (800d7d4 <udp_input+0x21c>)
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d6e6:	e008      	b.n	800d6fa <udp_input+0x142>
      }
    }

    prev = pcb;
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1a7      	bne.n	800d648 <udp_input+0x90>
 800d6f8:	e000      	b.n	800d6fc <udp_input+0x144>
        break;
 800d6fa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d101      	bne.n	800d706 <udp_input+0x14e>
    pcb = uncon_pcb;
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d002      	beq.n	800d712 <udp_input+0x15a>
    for_us = 1;
 800d70c:	2301      	movs	r3, #1
 800d70e:	76fb      	strb	r3, [r7, #27]
 800d710:	e00a      	b.n	800d728 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	3304      	adds	r3, #4
 800d716:	681a      	ldr	r2, [r3, #0]
 800d718:	4b2d      	ldr	r3, [pc, #180]	@ (800d7d0 <udp_input+0x218>)
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	bf0c      	ite	eq
 800d720:	2301      	moveq	r3, #1
 800d722:	2300      	movne	r3, #0
 800d724:	b2db      	uxtb	r3, r3
 800d726:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d728:	7efb      	ldrb	r3, [r7, #27]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d041      	beq.n	800d7b2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d72e:	2108      	movs	r1, #8
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f7f9 fac1 	bl	8006cb8 <pbuf_remove_header>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00a      	beq.n	800d752 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d73c:	4b20      	ldr	r3, [pc, #128]	@ (800d7c0 <udp_input+0x208>)
 800d73e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800d742:	4925      	ldr	r1, [pc, #148]	@ (800d7d8 <udp_input+0x220>)
 800d744:	4820      	ldr	r0, [pc, #128]	@ (800d7c8 <udp_input+0x210>)
 800d746:	f003 ff61 	bl	801160c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7f9 fb3a 	bl	8006dc4 <pbuf_free>
      goto end;
 800d750:	e032      	b.n	800d7b8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d754:	2b00      	cmp	r3, #0
 800d756:	d012      	beq.n	800d77e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00a      	beq.n	800d776 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d762:	699c      	ldr	r4, [r3, #24]
 800d764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d766:	69d8      	ldr	r0, [r3, #28]
 800d768:	8a3b      	ldrh	r3, [r7, #16]
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	4b1b      	ldr	r3, [pc, #108]	@ (800d7dc <udp_input+0x224>)
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d772:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d774:	e021      	b.n	800d7ba <udp_input+0x202>
        pbuf_free(p);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f7f9 fb24 	bl	8006dc4 <pbuf_free>
        goto end;
 800d77c:	e01c      	b.n	800d7b8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d77e:	7cfb      	ldrb	r3, [r7, #19]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d112      	bne.n	800d7aa <udp_input+0x1f2>
 800d784:	4b12      	ldr	r3, [pc, #72]	@ (800d7d0 <udp_input+0x218>)
 800d786:	695b      	ldr	r3, [r3, #20]
 800d788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d78c:	2be0      	cmp	r3, #224	@ 0xe0
 800d78e:	d00c      	beq.n	800d7aa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d790:	4b0f      	ldr	r3, [pc, #60]	@ (800d7d0 <udp_input+0x218>)
 800d792:	899b      	ldrh	r3, [r3, #12]
 800d794:	3308      	adds	r3, #8
 800d796:	b29b      	uxth	r3, r3
 800d798:	b21b      	sxth	r3, r3
 800d79a:	4619      	mov	r1, r3
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7f9 fafe 	bl	8006d9e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d7a2:	2103      	movs	r1, #3
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f001 f89b 	bl	800e8e0 <icmp_dest_unreach>
      pbuf_free(p);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7f9 fb0a 	bl	8006dc4 <pbuf_free>
  return;
 800d7b0:	e003      	b.n	800d7ba <udp_input+0x202>
    pbuf_free(p);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7f9 fb06 	bl	8006dc4 <pbuf_free>
  return;
 800d7b8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d7ba:	372c      	adds	r7, #44	@ 0x2c
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd90      	pop	{r4, r7, pc}
 800d7c0:	080147dc 	.word	0x080147dc
 800d7c4:	08014880 	.word	0x08014880
 800d7c8:	08014830 	.word	0x08014830
 800d7cc:	08014898 	.word	0x08014898
 800d7d0:	20004e68 	.word	0x20004e68
 800d7d4:	20008434 	.word	0x20008434
 800d7d8:	080148b4 	.word	0x080148b4
 800d7dc:	20004e78 	.word	0x20004e78

0800d7e0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d01e      	beq.n	800d82e <udp_netif_ip_addr_changed+0x4e>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d01a      	beq.n	800d82e <udp_netif_ip_addr_changed+0x4e>
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d017      	beq.n	800d82e <udp_netif_ip_addr_changed+0x4e>
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d013      	beq.n	800d82e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d806:	4b0d      	ldr	r3, [pc, #52]	@ (800d83c <udp_netif_ip_addr_changed+0x5c>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	60fb      	str	r3, [r7, #12]
 800d80c:	e00c      	b.n	800d828 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	429a      	cmp	r2, r3
 800d818:	d103      	bne.n	800d822 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	68db      	ldr	r3, [r3, #12]
 800d826:	60fb      	str	r3, [r7, #12]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1ef      	bne.n	800d80e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d82e:	bf00      	nop
 800d830:	3714      	adds	r7, #20
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	20008434 	.word	0x20008434

0800d840 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d848:	4915      	ldr	r1, [pc, #84]	@ (800d8a0 <etharp_free_entry+0x60>)
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	4613      	mov	r3, r2
 800d84e:	005b      	lsls	r3, r3, #1
 800d850:	4413      	add	r3, r2
 800d852:	00db      	lsls	r3, r3, #3
 800d854:	440b      	add	r3, r1
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d013      	beq.n	800d884 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d85c:	4910      	ldr	r1, [pc, #64]	@ (800d8a0 <etharp_free_entry+0x60>)
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	4613      	mov	r3, r2
 800d862:	005b      	lsls	r3, r3, #1
 800d864:	4413      	add	r3, r2
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	440b      	add	r3, r1
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7f9 faa9 	bl	8006dc4 <pbuf_free>
    arp_table[i].q = NULL;
 800d872:	490b      	ldr	r1, [pc, #44]	@ (800d8a0 <etharp_free_entry+0x60>)
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	4613      	mov	r3, r2
 800d878:	005b      	lsls	r3, r3, #1
 800d87a:	4413      	add	r3, r2
 800d87c:	00db      	lsls	r3, r3, #3
 800d87e:	440b      	add	r3, r1
 800d880:	2200      	movs	r2, #0
 800d882:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d884:	4906      	ldr	r1, [pc, #24]	@ (800d8a0 <etharp_free_entry+0x60>)
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	4613      	mov	r3, r2
 800d88a:	005b      	lsls	r3, r3, #1
 800d88c:	4413      	add	r3, r2
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	440b      	add	r3, r1
 800d892:	3314      	adds	r3, #20
 800d894:	2200      	movs	r2, #0
 800d896:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d898:	bf00      	nop
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	20008438 	.word	0x20008438

0800d8a4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	607b      	str	r3, [r7, #4]
 800d8ae:	e096      	b.n	800d9de <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d8b0:	494f      	ldr	r1, [pc, #316]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	005b      	lsls	r3, r3, #1
 800d8b8:	4413      	add	r3, r2
 800d8ba:	00db      	lsls	r3, r3, #3
 800d8bc:	440b      	add	r3, r1
 800d8be:	3314      	adds	r3, #20
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d8c4:	78fb      	ldrb	r3, [r7, #3]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f000 8086 	beq.w	800d9d8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d8cc:	4948      	ldr	r1, [pc, #288]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	005b      	lsls	r3, r3, #1
 800d8d4:	4413      	add	r3, r2
 800d8d6:	00db      	lsls	r3, r3, #3
 800d8d8:	440b      	add	r3, r1
 800d8da:	3312      	adds	r3, #18
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	b298      	uxth	r0, r3
 800d8e2:	4943      	ldr	r1, [pc, #268]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	005b      	lsls	r3, r3, #1
 800d8ea:	4413      	add	r3, r2
 800d8ec:	00db      	lsls	r3, r3, #3
 800d8ee:	440b      	add	r3, r1
 800d8f0:	3312      	adds	r3, #18
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d8f6:	493e      	ldr	r1, [pc, #248]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	005b      	lsls	r3, r3, #1
 800d8fe:	4413      	add	r3, r2
 800d900:	00db      	lsls	r3, r3, #3
 800d902:	440b      	add	r3, r1
 800d904:	3312      	adds	r3, #18
 800d906:	881b      	ldrh	r3, [r3, #0]
 800d908:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d90c:	d215      	bcs.n	800d93a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d90e:	4938      	ldr	r1, [pc, #224]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	4613      	mov	r3, r2
 800d914:	005b      	lsls	r3, r3, #1
 800d916:	4413      	add	r3, r2
 800d918:	00db      	lsls	r3, r3, #3
 800d91a:	440b      	add	r3, r1
 800d91c:	3314      	adds	r3, #20
 800d91e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d920:	2b01      	cmp	r3, #1
 800d922:	d10e      	bne.n	800d942 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d924:	4932      	ldr	r1, [pc, #200]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	4613      	mov	r3, r2
 800d92a:	005b      	lsls	r3, r3, #1
 800d92c:	4413      	add	r3, r2
 800d92e:	00db      	lsls	r3, r3, #3
 800d930:	440b      	add	r3, r1
 800d932:	3312      	adds	r3, #18
 800d934:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d936:	2b04      	cmp	r3, #4
 800d938:	d903      	bls.n	800d942 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff ff80 	bl	800d840 <etharp_free_entry>
 800d940:	e04a      	b.n	800d9d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d942:	492b      	ldr	r1, [pc, #172]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	4613      	mov	r3, r2
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	4413      	add	r3, r2
 800d94c:	00db      	lsls	r3, r3, #3
 800d94e:	440b      	add	r3, r1
 800d950:	3314      	adds	r3, #20
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	2b03      	cmp	r3, #3
 800d956:	d10a      	bne.n	800d96e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d958:	4925      	ldr	r1, [pc, #148]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	4613      	mov	r3, r2
 800d95e:	005b      	lsls	r3, r3, #1
 800d960:	4413      	add	r3, r2
 800d962:	00db      	lsls	r3, r3, #3
 800d964:	440b      	add	r3, r1
 800d966:	3314      	adds	r3, #20
 800d968:	2204      	movs	r2, #4
 800d96a:	701a      	strb	r2, [r3, #0]
 800d96c:	e034      	b.n	800d9d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d96e:	4920      	ldr	r1, [pc, #128]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	4613      	mov	r3, r2
 800d974:	005b      	lsls	r3, r3, #1
 800d976:	4413      	add	r3, r2
 800d978:	00db      	lsls	r3, r3, #3
 800d97a:	440b      	add	r3, r1
 800d97c:	3314      	adds	r3, #20
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	2b04      	cmp	r3, #4
 800d982:	d10a      	bne.n	800d99a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d984:	491a      	ldr	r1, [pc, #104]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	4613      	mov	r3, r2
 800d98a:	005b      	lsls	r3, r3, #1
 800d98c:	4413      	add	r3, r2
 800d98e:	00db      	lsls	r3, r3, #3
 800d990:	440b      	add	r3, r1
 800d992:	3314      	adds	r3, #20
 800d994:	2202      	movs	r2, #2
 800d996:	701a      	strb	r2, [r3, #0]
 800d998:	e01e      	b.n	800d9d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d99a:	4915      	ldr	r1, [pc, #84]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	4613      	mov	r3, r2
 800d9a0:	005b      	lsls	r3, r3, #1
 800d9a2:	4413      	add	r3, r2
 800d9a4:	00db      	lsls	r3, r3, #3
 800d9a6:	440b      	add	r3, r1
 800d9a8:	3314      	adds	r3, #20
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d113      	bne.n	800d9d8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d9b0:	490f      	ldr	r1, [pc, #60]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	4413      	add	r3, r2
 800d9ba:	00db      	lsls	r3, r3, #3
 800d9bc:	440b      	add	r3, r1
 800d9be:	3308      	adds	r3, #8
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	687a      	ldr	r2, [r7, #4]
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	005b      	lsls	r3, r3, #1
 800d9c8:	4413      	add	r3, r2
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	4a08      	ldr	r2, [pc, #32]	@ (800d9f0 <etharp_tmr+0x14c>)
 800d9ce:	4413      	add	r3, r2
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	f000 fe6e 	bl	800e6b4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	607b      	str	r3, [r7, #4]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b09      	cmp	r3, #9
 800d9e2:	f77f af65 	ble.w	800d8b0 <etharp_tmr+0xc>
      }
    }
  }
}
 800d9e6:	bf00      	nop
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	20008438 	.word	0x20008438

0800d9f4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b08a      	sub	sp, #40	@ 0x28
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	607a      	str	r2, [r7, #4]
 800da00:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800da02:	230a      	movs	r3, #10
 800da04:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800da06:	230a      	movs	r3, #10
 800da08:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800da0a:	230a      	movs	r3, #10
 800da0c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800da0e:	2300      	movs	r3, #0
 800da10:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800da12:	230a      	movs	r3, #10
 800da14:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800da16:	2300      	movs	r3, #0
 800da18:	83bb      	strh	r3, [r7, #28]
 800da1a:	2300      	movs	r3, #0
 800da1c:	837b      	strh	r3, [r7, #26]
 800da1e:	2300      	movs	r3, #0
 800da20:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da22:	2300      	movs	r3, #0
 800da24:	843b      	strh	r3, [r7, #32]
 800da26:	e0ae      	b.n	800db86 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800da28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da2c:	49a6      	ldr	r1, [pc, #664]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800da2e:	4613      	mov	r3, r2
 800da30:	005b      	lsls	r3, r3, #1
 800da32:	4413      	add	r3, r2
 800da34:	00db      	lsls	r3, r3, #3
 800da36:	440b      	add	r3, r1
 800da38:	3314      	adds	r3, #20
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800da3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800da42:	2b0a      	cmp	r3, #10
 800da44:	d105      	bne.n	800da52 <etharp_find_entry+0x5e>
 800da46:	7dfb      	ldrb	r3, [r7, #23]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d102      	bne.n	800da52 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800da4c:	8c3b      	ldrh	r3, [r7, #32]
 800da4e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800da50:	e095      	b.n	800db7e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800da52:	7dfb      	ldrb	r3, [r7, #23]
 800da54:	2b00      	cmp	r3, #0
 800da56:	f000 8092 	beq.w	800db7e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800da5a:	7dfb      	ldrb	r3, [r7, #23]
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	d009      	beq.n	800da74 <etharp_find_entry+0x80>
 800da60:	7dfb      	ldrb	r3, [r7, #23]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d806      	bhi.n	800da74 <etharp_find_entry+0x80>
 800da66:	4b99      	ldr	r3, [pc, #612]	@ (800dccc <etharp_find_entry+0x2d8>)
 800da68:	f240 1223 	movw	r2, #291	@ 0x123
 800da6c:	4998      	ldr	r1, [pc, #608]	@ (800dcd0 <etharp_find_entry+0x2dc>)
 800da6e:	4899      	ldr	r0, [pc, #612]	@ (800dcd4 <etharp_find_entry+0x2e0>)
 800da70:	f003 fdcc 	bl	801160c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d020      	beq.n	800dabc <etharp_find_entry+0xc8>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6819      	ldr	r1, [r3, #0]
 800da7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da82:	4891      	ldr	r0, [pc, #580]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800da84:	4613      	mov	r3, r2
 800da86:	005b      	lsls	r3, r3, #1
 800da88:	4413      	add	r3, r2
 800da8a:	00db      	lsls	r3, r3, #3
 800da8c:	4403      	add	r3, r0
 800da8e:	3304      	adds	r3, #4
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4299      	cmp	r1, r3
 800da94:	d112      	bne.n	800dabc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00c      	beq.n	800dab6 <etharp_find_entry+0xc2>
 800da9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800daa0:	4989      	ldr	r1, [pc, #548]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800daa2:	4613      	mov	r3, r2
 800daa4:	005b      	lsls	r3, r3, #1
 800daa6:	4413      	add	r3, r2
 800daa8:	00db      	lsls	r3, r3, #3
 800daaa:	440b      	add	r3, r1
 800daac:	3308      	adds	r3, #8
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d102      	bne.n	800dabc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dab6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800daba:	e100      	b.n	800dcbe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dabc:	7dfb      	ldrb	r3, [r7, #23]
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d140      	bne.n	800db44 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800dac2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dac6:	4980      	ldr	r1, [pc, #512]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800dac8:	4613      	mov	r3, r2
 800daca:	005b      	lsls	r3, r3, #1
 800dacc:	4413      	add	r3, r2
 800dace:	00db      	lsls	r3, r3, #3
 800dad0:	440b      	add	r3, r1
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d01a      	beq.n	800db0e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800dad8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dadc:	497a      	ldr	r1, [pc, #488]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800dade:	4613      	mov	r3, r2
 800dae0:	005b      	lsls	r3, r3, #1
 800dae2:	4413      	add	r3, r2
 800dae4:	00db      	lsls	r3, r3, #3
 800dae6:	440b      	add	r3, r1
 800dae8:	3312      	adds	r3, #18
 800daea:	881b      	ldrh	r3, [r3, #0]
 800daec:	8bba      	ldrh	r2, [r7, #28]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d845      	bhi.n	800db7e <etharp_find_entry+0x18a>
            old_queue = i;
 800daf2:	8c3b      	ldrh	r3, [r7, #32]
 800daf4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800daf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dafa:	4973      	ldr	r1, [pc, #460]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800dafc:	4613      	mov	r3, r2
 800dafe:	005b      	lsls	r3, r3, #1
 800db00:	4413      	add	r3, r2
 800db02:	00db      	lsls	r3, r3, #3
 800db04:	440b      	add	r3, r1
 800db06:	3312      	adds	r3, #18
 800db08:	881b      	ldrh	r3, [r3, #0]
 800db0a:	83bb      	strh	r3, [r7, #28]
 800db0c:	e037      	b.n	800db7e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800db0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db12:	496d      	ldr	r1, [pc, #436]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800db14:	4613      	mov	r3, r2
 800db16:	005b      	lsls	r3, r3, #1
 800db18:	4413      	add	r3, r2
 800db1a:	00db      	lsls	r3, r3, #3
 800db1c:	440b      	add	r3, r1
 800db1e:	3312      	adds	r3, #18
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	8b7a      	ldrh	r2, [r7, #26]
 800db24:	429a      	cmp	r2, r3
 800db26:	d82a      	bhi.n	800db7e <etharp_find_entry+0x18a>
            old_pending = i;
 800db28:	8c3b      	ldrh	r3, [r7, #32]
 800db2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800db2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db30:	4965      	ldr	r1, [pc, #404]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800db32:	4613      	mov	r3, r2
 800db34:	005b      	lsls	r3, r3, #1
 800db36:	4413      	add	r3, r2
 800db38:	00db      	lsls	r3, r3, #3
 800db3a:	440b      	add	r3, r1
 800db3c:	3312      	adds	r3, #18
 800db3e:	881b      	ldrh	r3, [r3, #0]
 800db40:	837b      	strh	r3, [r7, #26]
 800db42:	e01c      	b.n	800db7e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800db44:	7dfb      	ldrb	r3, [r7, #23]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d919      	bls.n	800db7e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800db4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db4e:	495e      	ldr	r1, [pc, #376]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800db50:	4613      	mov	r3, r2
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	4413      	add	r3, r2
 800db56:	00db      	lsls	r3, r3, #3
 800db58:	440b      	add	r3, r1
 800db5a:	3312      	adds	r3, #18
 800db5c:	881b      	ldrh	r3, [r3, #0]
 800db5e:	8b3a      	ldrh	r2, [r7, #24]
 800db60:	429a      	cmp	r2, r3
 800db62:	d80c      	bhi.n	800db7e <etharp_find_entry+0x18a>
            old_stable = i;
 800db64:	8c3b      	ldrh	r3, [r7, #32]
 800db66:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800db68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db6c:	4956      	ldr	r1, [pc, #344]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800db6e:	4613      	mov	r3, r2
 800db70:	005b      	lsls	r3, r3, #1
 800db72:	4413      	add	r3, r2
 800db74:	00db      	lsls	r3, r3, #3
 800db76:	440b      	add	r3, r1
 800db78:	3312      	adds	r3, #18
 800db7a:	881b      	ldrh	r3, [r3, #0]
 800db7c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db7e:	8c3b      	ldrh	r3, [r7, #32]
 800db80:	3301      	adds	r3, #1
 800db82:	b29b      	uxth	r3, r3
 800db84:	843b      	strh	r3, [r7, #32]
 800db86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800db8a:	2b09      	cmp	r3, #9
 800db8c:	f77f af4c 	ble.w	800da28 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800db90:	7afb      	ldrb	r3, [r7, #11]
 800db92:	f003 0302 	and.w	r3, r3, #2
 800db96:	2b00      	cmp	r3, #0
 800db98:	d108      	bne.n	800dbac <etharp_find_entry+0x1b8>
 800db9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800db9e:	2b0a      	cmp	r3, #10
 800dba0:	d107      	bne.n	800dbb2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800dba2:	7afb      	ldrb	r3, [r7, #11]
 800dba4:	f003 0301 	and.w	r3, r3, #1
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d102      	bne.n	800dbb2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800dbac:	f04f 33ff 	mov.w	r3, #4294967295
 800dbb0:	e085      	b.n	800dcbe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800dbb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800dbb6:	2b09      	cmp	r3, #9
 800dbb8:	dc02      	bgt.n	800dbc0 <etharp_find_entry+0x1cc>
    i = empty;
 800dbba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbbc:	843b      	strh	r3, [r7, #32]
 800dbbe:	e039      	b.n	800dc34 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800dbc0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800dbc4:	2b09      	cmp	r3, #9
 800dbc6:	dc14      	bgt.n	800dbf2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800dbc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbca:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800dbcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dbd0:	493d      	ldr	r1, [pc, #244]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	005b      	lsls	r3, r3, #1
 800dbd6:	4413      	add	r3, r2
 800dbd8:	00db      	lsls	r3, r3, #3
 800dbda:	440b      	add	r3, r1
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d018      	beq.n	800dc14 <etharp_find_entry+0x220>
 800dbe2:	4b3a      	ldr	r3, [pc, #232]	@ (800dccc <etharp_find_entry+0x2d8>)
 800dbe4:	f240 126d 	movw	r2, #365	@ 0x16d
 800dbe8:	493b      	ldr	r1, [pc, #236]	@ (800dcd8 <etharp_find_entry+0x2e4>)
 800dbea:	483a      	ldr	r0, [pc, #232]	@ (800dcd4 <etharp_find_entry+0x2e0>)
 800dbec:	f003 fd0e 	bl	801160c <iprintf>
 800dbf0:	e010      	b.n	800dc14 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800dbf2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800dbf6:	2b09      	cmp	r3, #9
 800dbf8:	dc02      	bgt.n	800dc00 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800dbfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dbfc:	843b      	strh	r3, [r7, #32]
 800dbfe:	e009      	b.n	800dc14 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800dc00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dc04:	2b09      	cmp	r3, #9
 800dc06:	dc02      	bgt.n	800dc0e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800dc08:	8bfb      	ldrh	r3, [r7, #30]
 800dc0a:	843b      	strh	r3, [r7, #32]
 800dc0c:	e002      	b.n	800dc14 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800dc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc12:	e054      	b.n	800dcbe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dc14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dc18:	2b09      	cmp	r3, #9
 800dc1a:	dd06      	ble.n	800dc2a <etharp_find_entry+0x236>
 800dc1c:	4b2b      	ldr	r3, [pc, #172]	@ (800dccc <etharp_find_entry+0x2d8>)
 800dc1e:	f240 127f 	movw	r2, #383	@ 0x17f
 800dc22:	492e      	ldr	r1, [pc, #184]	@ (800dcdc <etharp_find_entry+0x2e8>)
 800dc24:	482b      	ldr	r0, [pc, #172]	@ (800dcd4 <etharp_find_entry+0x2e0>)
 800dc26:	f003 fcf1 	bl	801160c <iprintf>
    etharp_free_entry(i);
 800dc2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7ff fe06 	bl	800d840 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dc34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dc38:	2b09      	cmp	r3, #9
 800dc3a:	dd06      	ble.n	800dc4a <etharp_find_entry+0x256>
 800dc3c:	4b23      	ldr	r3, [pc, #140]	@ (800dccc <etharp_find_entry+0x2d8>)
 800dc3e:	f240 1283 	movw	r2, #387	@ 0x183
 800dc42:	4926      	ldr	r1, [pc, #152]	@ (800dcdc <etharp_find_entry+0x2e8>)
 800dc44:	4823      	ldr	r0, [pc, #140]	@ (800dcd4 <etharp_find_entry+0x2e0>)
 800dc46:	f003 fce1 	bl	801160c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800dc4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc4e:	491e      	ldr	r1, [pc, #120]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800dc50:	4613      	mov	r3, r2
 800dc52:	005b      	lsls	r3, r3, #1
 800dc54:	4413      	add	r3, r2
 800dc56:	00db      	lsls	r3, r3, #3
 800dc58:	440b      	add	r3, r1
 800dc5a:	3314      	adds	r3, #20
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d006      	beq.n	800dc70 <etharp_find_entry+0x27c>
 800dc62:	4b1a      	ldr	r3, [pc, #104]	@ (800dccc <etharp_find_entry+0x2d8>)
 800dc64:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800dc68:	491d      	ldr	r1, [pc, #116]	@ (800dce0 <etharp_find_entry+0x2ec>)
 800dc6a:	481a      	ldr	r0, [pc, #104]	@ (800dcd4 <etharp_find_entry+0x2e0>)
 800dc6c:	f003 fcce 	bl	801160c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00b      	beq.n	800dc8e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800dc76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6819      	ldr	r1, [r3, #0]
 800dc7e:	4812      	ldr	r0, [pc, #72]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800dc80:	4613      	mov	r3, r2
 800dc82:	005b      	lsls	r3, r3, #1
 800dc84:	4413      	add	r3, r2
 800dc86:	00db      	lsls	r3, r3, #3
 800dc88:	4403      	add	r3, r0
 800dc8a:	3304      	adds	r3, #4
 800dc8c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dc8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc92:	490d      	ldr	r1, [pc, #52]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800dc94:	4613      	mov	r3, r2
 800dc96:	005b      	lsls	r3, r3, #1
 800dc98:	4413      	add	r3, r2
 800dc9a:	00db      	lsls	r3, r3, #3
 800dc9c:	440b      	add	r3, r1
 800dc9e:	3312      	adds	r3, #18
 800dca0:	2200      	movs	r2, #0
 800dca2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800dca4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dca8:	4907      	ldr	r1, [pc, #28]	@ (800dcc8 <etharp_find_entry+0x2d4>)
 800dcaa:	4613      	mov	r3, r2
 800dcac:	005b      	lsls	r3, r3, #1
 800dcae:	4413      	add	r3, r2
 800dcb0:	00db      	lsls	r3, r3, #3
 800dcb2:	440b      	add	r3, r1
 800dcb4:	3308      	adds	r3, #8
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800dcba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3728      	adds	r7, #40	@ 0x28
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	20008438 	.word	0x20008438
 800dccc:	08014b40 	.word	0x08014b40
 800dcd0:	08014b78 	.word	0x08014b78
 800dcd4:	08014bb8 	.word	0x08014bb8
 800dcd8:	08014be0 	.word	0x08014be0
 800dcdc:	08014bf8 	.word	0x08014bf8
 800dce0:	08014c0c 	.word	0x08014c0c

0800dce4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b088      	sub	sp, #32
 800dce8:	af02      	add	r7, sp, #8
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
 800dcf0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dcf8:	2b06      	cmp	r3, #6
 800dcfa:	d006      	beq.n	800dd0a <etharp_update_arp_entry+0x26>
 800dcfc:	4b48      	ldr	r3, [pc, #288]	@ (800de20 <etharp_update_arp_entry+0x13c>)
 800dcfe:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800dd02:	4948      	ldr	r1, [pc, #288]	@ (800de24 <etharp_update_arp_entry+0x140>)
 800dd04:	4848      	ldr	r0, [pc, #288]	@ (800de28 <etharp_update_arp_entry+0x144>)
 800dd06:	f003 fc81 	bl	801160c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d012      	beq.n	800dd36 <etharp_update_arp_entry+0x52>
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00e      	beq.n	800dd36 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	68f9      	ldr	r1, [r7, #12]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f001 f8fe 	bl	800ef20 <ip4_addr_isbroadcast_u32>
 800dd24:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d105      	bne.n	800dd36 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd32:	2be0      	cmp	r3, #224	@ 0xe0
 800dd34:	d102      	bne.n	800dd3c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dd36:	f06f 030f 	mvn.w	r3, #15
 800dd3a:	e06c      	b.n	800de16 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800dd3c:	78fb      	ldrb	r3, [r7, #3]
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	4619      	mov	r1, r3
 800dd42:	68b8      	ldr	r0, [r7, #8]
 800dd44:	f7ff fe56 	bl	800d9f4 <etharp_find_entry>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dd4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	da02      	bge.n	800dd5a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800dd54:	8afb      	ldrh	r3, [r7, #22]
 800dd56:	b25b      	sxtb	r3, r3
 800dd58:	e05d      	b.n	800de16 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dd5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dd5e:	4933      	ldr	r1, [pc, #204]	@ (800de2c <etharp_update_arp_entry+0x148>)
 800dd60:	4613      	mov	r3, r2
 800dd62:	005b      	lsls	r3, r3, #1
 800dd64:	4413      	add	r3, r2
 800dd66:	00db      	lsls	r3, r3, #3
 800dd68:	440b      	add	r3, r1
 800dd6a:	3314      	adds	r3, #20
 800dd6c:	2202      	movs	r2, #2
 800dd6e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dd70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dd74:	492d      	ldr	r1, [pc, #180]	@ (800de2c <etharp_update_arp_entry+0x148>)
 800dd76:	4613      	mov	r3, r2
 800dd78:	005b      	lsls	r3, r3, #1
 800dd7a:	4413      	add	r3, r2
 800dd7c:	00db      	lsls	r3, r3, #3
 800dd7e:	440b      	add	r3, r1
 800dd80:	3308      	adds	r3, #8
 800dd82:	68fa      	ldr	r2, [r7, #12]
 800dd84:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dd86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	005b      	lsls	r3, r3, #1
 800dd8e:	4413      	add	r3, r2
 800dd90:	00db      	lsls	r3, r3, #3
 800dd92:	3308      	adds	r3, #8
 800dd94:	4a25      	ldr	r2, [pc, #148]	@ (800de2c <etharp_update_arp_entry+0x148>)
 800dd96:	4413      	add	r3, r2
 800dd98:	3304      	adds	r3, #4
 800dd9a:	2206      	movs	r2, #6
 800dd9c:	6879      	ldr	r1, [r7, #4]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f003 fd5f 	bl	8011862 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dda4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dda8:	4920      	ldr	r1, [pc, #128]	@ (800de2c <etharp_update_arp_entry+0x148>)
 800ddaa:	4613      	mov	r3, r2
 800ddac:	005b      	lsls	r3, r3, #1
 800ddae:	4413      	add	r3, r2
 800ddb0:	00db      	lsls	r3, r3, #3
 800ddb2:	440b      	add	r3, r1
 800ddb4:	3312      	adds	r3, #18
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ddba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ddbe:	491b      	ldr	r1, [pc, #108]	@ (800de2c <etharp_update_arp_entry+0x148>)
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	4413      	add	r3, r2
 800ddc6:	00db      	lsls	r3, r3, #3
 800ddc8:	440b      	add	r3, r1
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d021      	beq.n	800de14 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ddd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ddd4:	4915      	ldr	r1, [pc, #84]	@ (800de2c <etharp_update_arp_entry+0x148>)
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	005b      	lsls	r3, r3, #1
 800ddda:	4413      	add	r3, r2
 800dddc:	00db      	lsls	r3, r3, #3
 800ddde:	440b      	add	r3, r1
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800dde4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dde8:	4910      	ldr	r1, [pc, #64]	@ (800de2c <etharp_update_arp_entry+0x148>)
 800ddea:	4613      	mov	r3, r2
 800ddec:	005b      	lsls	r3, r3, #1
 800ddee:	4413      	add	r3, r2
 800ddf0:	00db      	lsls	r3, r3, #3
 800ddf2:	440b      	add	r3, r1
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ddfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6939      	ldr	r1, [r7, #16]
 800de08:	68f8      	ldr	r0, [r7, #12]
 800de0a:	f001 ff97 	bl	800fd3c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800de0e:	6938      	ldr	r0, [r7, #16]
 800de10:	f7f8 ffd8 	bl	8006dc4 <pbuf_free>
  }
  return ERR_OK;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3718      	adds	r7, #24
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	08014b40 	.word	0x08014b40
 800de24:	08014c38 	.word	0x08014c38
 800de28:	08014bb8 	.word	0x08014bb8
 800de2c:	20008438 	.word	0x20008438

0800de30 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de38:	2300      	movs	r3, #0
 800de3a:	60fb      	str	r3, [r7, #12]
 800de3c:	e01e      	b.n	800de7c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800de3e:	4913      	ldr	r1, [pc, #76]	@ (800de8c <etharp_cleanup_netif+0x5c>)
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	4613      	mov	r3, r2
 800de44:	005b      	lsls	r3, r3, #1
 800de46:	4413      	add	r3, r2
 800de48:	00db      	lsls	r3, r3, #3
 800de4a:	440b      	add	r3, r1
 800de4c:	3314      	adds	r3, #20
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800de52:	7afb      	ldrb	r3, [r7, #11]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00e      	beq.n	800de76 <etharp_cleanup_netif+0x46>
 800de58:	490c      	ldr	r1, [pc, #48]	@ (800de8c <etharp_cleanup_netif+0x5c>)
 800de5a:	68fa      	ldr	r2, [r7, #12]
 800de5c:	4613      	mov	r3, r2
 800de5e:	005b      	lsls	r3, r3, #1
 800de60:	4413      	add	r3, r2
 800de62:	00db      	lsls	r3, r3, #3
 800de64:	440b      	add	r3, r1
 800de66:	3308      	adds	r3, #8
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d102      	bne.n	800de76 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	f7ff fce5 	bl	800d840 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3301      	adds	r3, #1
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2b09      	cmp	r3, #9
 800de80:	dddd      	ble.n	800de3e <etharp_cleanup_netif+0xe>
    }
  }
}
 800de82:	bf00      	nop
 800de84:	bf00      	nop
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	20008438 	.word	0x20008438

0800de90 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800de90:	b5b0      	push	{r4, r5, r7, lr}
 800de92:	b08a      	sub	sp, #40	@ 0x28
 800de94:	af04      	add	r7, sp, #16
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d107      	bne.n	800deb0 <etharp_input+0x20>
 800dea0:	4b3d      	ldr	r3, [pc, #244]	@ (800df98 <etharp_input+0x108>)
 800dea2:	f240 228a 	movw	r2, #650	@ 0x28a
 800dea6:	493d      	ldr	r1, [pc, #244]	@ (800df9c <etharp_input+0x10c>)
 800dea8:	483d      	ldr	r0, [pc, #244]	@ (800dfa0 <etharp_input+0x110>)
 800deaa:	f003 fbaf 	bl	801160c <iprintf>
 800deae:	e06f      	b.n	800df90 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	881b      	ldrh	r3, [r3, #0]
 800deba:	b29b      	uxth	r3, r3
 800debc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dec0:	d10c      	bne.n	800dedc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dec6:	2b06      	cmp	r3, #6
 800dec8:	d108      	bne.n	800dedc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dece:	2b04      	cmp	r3, #4
 800ded0:	d104      	bne.n	800dedc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	885b      	ldrh	r3, [r3, #2]
 800ded6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ded8:	2b08      	cmp	r3, #8
 800deda:	d003      	beq.n	800dee4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f7f8 ff71 	bl	8006dc4 <pbuf_free>
    return;
 800dee2:	e055      	b.n	800df90 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	330e      	adds	r3, #14
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	3318      	adds	r3, #24
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	3304      	adds	r3, #4
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d102      	bne.n	800df04 <etharp_input+0x74>
    for_us = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	75fb      	strb	r3, [r7, #23]
 800df02:	e009      	b.n	800df18 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800df04:	68ba      	ldr	r2, [r7, #8]
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	3304      	adds	r3, #4
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	bf0c      	ite	eq
 800df10:	2301      	moveq	r3, #1
 800df12:	2300      	movne	r3, #0
 800df14:	b2db      	uxtb	r3, r3
 800df16:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	f103 0208 	add.w	r2, r3, #8
 800df1e:	7dfb      	ldrb	r3, [r7, #23]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d001      	beq.n	800df28 <etharp_input+0x98>
 800df24:	2301      	movs	r3, #1
 800df26:	e000      	b.n	800df2a <etharp_input+0x9a>
 800df28:	2302      	movs	r3, #2
 800df2a:	f107 010c 	add.w	r1, r7, #12
 800df2e:	6838      	ldr	r0, [r7, #0]
 800df30:	f7ff fed8 	bl	800dce4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	88db      	ldrh	r3, [r3, #6]
 800df38:	b29b      	uxth	r3, r3
 800df3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df3e:	d003      	beq.n	800df48 <etharp_input+0xb8>
 800df40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df44:	d01e      	beq.n	800df84 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800df46:	e020      	b.n	800df8a <etharp_input+0xfa>
      if (for_us) {
 800df48:	7dfb      	ldrb	r3, [r7, #23]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d01c      	beq.n	800df88 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800df64:	693a      	ldr	r2, [r7, #16]
 800df66:	3208      	adds	r2, #8
        etharp_raw(netif,
 800df68:	2102      	movs	r1, #2
 800df6a:	9103      	str	r1, [sp, #12]
 800df6c:	f107 010c 	add.w	r1, r7, #12
 800df70:	9102      	str	r1, [sp, #8]
 800df72:	9201      	str	r2, [sp, #4]
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	462b      	mov	r3, r5
 800df78:	4622      	mov	r2, r4
 800df7a:	4601      	mov	r1, r0
 800df7c:	6838      	ldr	r0, [r7, #0]
 800df7e:	f000 faeb 	bl	800e558 <etharp_raw>
      break;
 800df82:	e001      	b.n	800df88 <etharp_input+0xf8>
      break;
 800df84:	bf00      	nop
 800df86:	e000      	b.n	800df8a <etharp_input+0xfa>
      break;
 800df88:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7f8 ff1a 	bl	8006dc4 <pbuf_free>
}
 800df90:	3718      	adds	r7, #24
 800df92:	46bd      	mov	sp, r7
 800df94:	bdb0      	pop	{r4, r5, r7, pc}
 800df96:	bf00      	nop
 800df98:	08014b40 	.word	0x08014b40
 800df9c:	08014c90 	.word	0x08014c90
 800dfa0:	08014bb8 	.word	0x08014bb8

0800dfa4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b086      	sub	sp, #24
 800dfa8:	af02      	add	r7, sp, #8
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	4613      	mov	r3, r2
 800dfb0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dfb2:	79fa      	ldrb	r2, [r7, #7]
 800dfb4:	4944      	ldr	r1, [pc, #272]	@ (800e0c8 <etharp_output_to_arp_index+0x124>)
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	005b      	lsls	r3, r3, #1
 800dfba:	4413      	add	r3, r2
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	440b      	add	r3, r1
 800dfc0:	3314      	adds	r3, #20
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d806      	bhi.n	800dfd6 <etharp_output_to_arp_index+0x32>
 800dfc8:	4b40      	ldr	r3, [pc, #256]	@ (800e0cc <etharp_output_to_arp_index+0x128>)
 800dfca:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800dfce:	4940      	ldr	r1, [pc, #256]	@ (800e0d0 <etharp_output_to_arp_index+0x12c>)
 800dfd0:	4840      	ldr	r0, [pc, #256]	@ (800e0d4 <etharp_output_to_arp_index+0x130>)
 800dfd2:	f003 fb1b 	bl	801160c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dfd6:	79fa      	ldrb	r2, [r7, #7]
 800dfd8:	493b      	ldr	r1, [pc, #236]	@ (800e0c8 <etharp_output_to_arp_index+0x124>)
 800dfda:	4613      	mov	r3, r2
 800dfdc:	005b      	lsls	r3, r3, #1
 800dfde:	4413      	add	r3, r2
 800dfe0:	00db      	lsls	r3, r3, #3
 800dfe2:	440b      	add	r3, r1
 800dfe4:	3314      	adds	r3, #20
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	2b02      	cmp	r3, #2
 800dfea:	d153      	bne.n	800e094 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dfec:	79fa      	ldrb	r2, [r7, #7]
 800dfee:	4936      	ldr	r1, [pc, #216]	@ (800e0c8 <etharp_output_to_arp_index+0x124>)
 800dff0:	4613      	mov	r3, r2
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	4413      	add	r3, r2
 800dff6:	00db      	lsls	r3, r3, #3
 800dff8:	440b      	add	r3, r1
 800dffa:	3312      	adds	r3, #18
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800e002:	d919      	bls.n	800e038 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e004:	79fa      	ldrb	r2, [r7, #7]
 800e006:	4613      	mov	r3, r2
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	4413      	add	r3, r2
 800e00c:	00db      	lsls	r3, r3, #3
 800e00e:	4a2e      	ldr	r2, [pc, #184]	@ (800e0c8 <etharp_output_to_arp_index+0x124>)
 800e010:	4413      	add	r3, r2
 800e012:	3304      	adds	r3, #4
 800e014:	4619      	mov	r1, r3
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f000 fb4c 	bl	800e6b4 <etharp_request>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d138      	bne.n	800e094 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e022:	79fa      	ldrb	r2, [r7, #7]
 800e024:	4928      	ldr	r1, [pc, #160]	@ (800e0c8 <etharp_output_to_arp_index+0x124>)
 800e026:	4613      	mov	r3, r2
 800e028:	005b      	lsls	r3, r3, #1
 800e02a:	4413      	add	r3, r2
 800e02c:	00db      	lsls	r3, r3, #3
 800e02e:	440b      	add	r3, r1
 800e030:	3314      	adds	r3, #20
 800e032:	2203      	movs	r2, #3
 800e034:	701a      	strb	r2, [r3, #0]
 800e036:	e02d      	b.n	800e094 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e038:	79fa      	ldrb	r2, [r7, #7]
 800e03a:	4923      	ldr	r1, [pc, #140]	@ (800e0c8 <etharp_output_to_arp_index+0x124>)
 800e03c:	4613      	mov	r3, r2
 800e03e:	005b      	lsls	r3, r3, #1
 800e040:	4413      	add	r3, r2
 800e042:	00db      	lsls	r3, r3, #3
 800e044:	440b      	add	r3, r1
 800e046:	3312      	adds	r3, #18
 800e048:	881b      	ldrh	r3, [r3, #0]
 800e04a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800e04e:	d321      	bcc.n	800e094 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e050:	79fa      	ldrb	r2, [r7, #7]
 800e052:	4613      	mov	r3, r2
 800e054:	005b      	lsls	r3, r3, #1
 800e056:	4413      	add	r3, r2
 800e058:	00db      	lsls	r3, r3, #3
 800e05a:	4a1b      	ldr	r2, [pc, #108]	@ (800e0c8 <etharp_output_to_arp_index+0x124>)
 800e05c:	4413      	add	r3, r2
 800e05e:	1d19      	adds	r1, r3, #4
 800e060:	79fa      	ldrb	r2, [r7, #7]
 800e062:	4613      	mov	r3, r2
 800e064:	005b      	lsls	r3, r3, #1
 800e066:	4413      	add	r3, r2
 800e068:	00db      	lsls	r3, r3, #3
 800e06a:	3308      	adds	r3, #8
 800e06c:	4a16      	ldr	r2, [pc, #88]	@ (800e0c8 <etharp_output_to_arp_index+0x124>)
 800e06e:	4413      	add	r3, r2
 800e070:	3304      	adds	r3, #4
 800e072:	461a      	mov	r2, r3
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f000 fafb 	bl	800e670 <etharp_request_dst>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d109      	bne.n	800e094 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e080:	79fa      	ldrb	r2, [r7, #7]
 800e082:	4911      	ldr	r1, [pc, #68]	@ (800e0c8 <etharp_output_to_arp_index+0x124>)
 800e084:	4613      	mov	r3, r2
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	4413      	add	r3, r2
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	440b      	add	r3, r1
 800e08e:	3314      	adds	r3, #20
 800e090:	2203      	movs	r2, #3
 800e092:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800e09a:	79fa      	ldrb	r2, [r7, #7]
 800e09c:	4613      	mov	r3, r2
 800e09e:	005b      	lsls	r3, r3, #1
 800e0a0:	4413      	add	r3, r2
 800e0a2:	00db      	lsls	r3, r3, #3
 800e0a4:	3308      	adds	r3, #8
 800e0a6:	4a08      	ldr	r2, [pc, #32]	@ (800e0c8 <etharp_output_to_arp_index+0x124>)
 800e0a8:	4413      	add	r3, r2
 800e0aa:	3304      	adds	r3, #4
 800e0ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e0b0:	9200      	str	r2, [sp, #0]
 800e0b2:	460a      	mov	r2, r1
 800e0b4:	68b9      	ldr	r1, [r7, #8]
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f001 fe40 	bl	800fd3c <ethernet_output>
 800e0bc:	4603      	mov	r3, r0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3710      	adds	r7, #16
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	20008438 	.word	0x20008438
 800e0cc:	08014b40 	.word	0x08014b40
 800e0d0:	08014cb0 	.word	0x08014cb0
 800e0d4:	08014bb8 	.word	0x08014bb8

0800e0d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b08a      	sub	sp, #40	@ 0x28
 800e0dc:	af02      	add	r7, sp, #8
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d106      	bne.n	800e0fc <etharp_output+0x24>
 800e0ee:	4b73      	ldr	r3, [pc, #460]	@ (800e2bc <etharp_output+0x1e4>)
 800e0f0:	f240 321e 	movw	r2, #798	@ 0x31e
 800e0f4:	4972      	ldr	r1, [pc, #456]	@ (800e2c0 <etharp_output+0x1e8>)
 800e0f6:	4873      	ldr	r0, [pc, #460]	@ (800e2c4 <etharp_output+0x1ec>)
 800e0f8:	f003 fa88 	bl	801160c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d106      	bne.n	800e110 <etharp_output+0x38>
 800e102:	4b6e      	ldr	r3, [pc, #440]	@ (800e2bc <etharp_output+0x1e4>)
 800e104:	f240 321f 	movw	r2, #799	@ 0x31f
 800e108:	496f      	ldr	r1, [pc, #444]	@ (800e2c8 <etharp_output+0x1f0>)
 800e10a:	486e      	ldr	r0, [pc, #440]	@ (800e2c4 <etharp_output+0x1ec>)
 800e10c:	f003 fa7e 	bl	801160c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d106      	bne.n	800e124 <etharp_output+0x4c>
 800e116:	4b69      	ldr	r3, [pc, #420]	@ (800e2bc <etharp_output+0x1e4>)
 800e118:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800e11c:	496b      	ldr	r1, [pc, #428]	@ (800e2cc <etharp_output+0x1f4>)
 800e11e:	4869      	ldr	r0, [pc, #420]	@ (800e2c4 <etharp_output+0x1ec>)
 800e120:	f003 fa74 	bl	801160c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	68f9      	ldr	r1, [r7, #12]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 fef8 	bl	800ef20 <ip4_addr_isbroadcast_u32>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d002      	beq.n	800e13c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e136:	4b66      	ldr	r3, [pc, #408]	@ (800e2d0 <etharp_output+0x1f8>)
 800e138:	61fb      	str	r3, [r7, #28]
 800e13a:	e0af      	b.n	800e29c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e144:	2be0      	cmp	r3, #224	@ 0xe0
 800e146:	d118      	bne.n	800e17a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e148:	2301      	movs	r3, #1
 800e14a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e14c:	2300      	movs	r3, #0
 800e14e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e150:	235e      	movs	r3, #94	@ 0x5e
 800e152:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	3301      	adds	r3, #1
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	3302      	adds	r3, #2
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	3303      	adds	r3, #3
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e172:	f107 0310 	add.w	r3, r7, #16
 800e176:	61fb      	str	r3, [r7, #28]
 800e178:	e090      	b.n	800e29c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	3304      	adds	r3, #4
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	405a      	eors	r2, r3
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	3308      	adds	r3, #8
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	4013      	ands	r3, r2
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d012      	beq.n	800e1b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e198:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d00b      	beq.n	800e1b8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	330c      	adds	r3, #12
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d003      	beq.n	800e1b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	330c      	adds	r3, #12
 800e1ae:	61bb      	str	r3, [r7, #24]
 800e1b0:	e002      	b.n	800e1b8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e1b2:	f06f 0303 	mvn.w	r3, #3
 800e1b6:	e07d      	b.n	800e2b4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e1b8:	4b46      	ldr	r3, [pc, #280]	@ (800e2d4 <etharp_output+0x1fc>)
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	4619      	mov	r1, r3
 800e1be:	4a46      	ldr	r2, [pc, #280]	@ (800e2d8 <etharp_output+0x200>)
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	005b      	lsls	r3, r3, #1
 800e1c4:	440b      	add	r3, r1
 800e1c6:	00db      	lsls	r3, r3, #3
 800e1c8:	4413      	add	r3, r2
 800e1ca:	3314      	adds	r3, #20
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d925      	bls.n	800e21e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e1d2:	4b40      	ldr	r3, [pc, #256]	@ (800e2d4 <etharp_output+0x1fc>)
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	4a3f      	ldr	r2, [pc, #252]	@ (800e2d8 <etharp_output+0x200>)
 800e1da:	460b      	mov	r3, r1
 800e1dc:	005b      	lsls	r3, r3, #1
 800e1de:	440b      	add	r3, r1
 800e1e0:	00db      	lsls	r3, r3, #3
 800e1e2:	4413      	add	r3, r2
 800e1e4:	3308      	adds	r3, #8
 800e1e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d117      	bne.n	800e21e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e1ee:	69bb      	ldr	r3, [r7, #24]
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	4b38      	ldr	r3, [pc, #224]	@ (800e2d4 <etharp_output+0x1fc>)
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	4937      	ldr	r1, [pc, #220]	@ (800e2d8 <etharp_output+0x200>)
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	005b      	lsls	r3, r3, #1
 800e1fe:	4403      	add	r3, r0
 800e200:	00db      	lsls	r3, r3, #3
 800e202:	440b      	add	r3, r1
 800e204:	3304      	adds	r3, #4
 800e206:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e208:	429a      	cmp	r2, r3
 800e20a:	d108      	bne.n	800e21e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e20c:	4b31      	ldr	r3, [pc, #196]	@ (800e2d4 <etharp_output+0x1fc>)
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	461a      	mov	r2, r3
 800e212:	68b9      	ldr	r1, [r7, #8]
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f7ff fec5 	bl	800dfa4 <etharp_output_to_arp_index>
 800e21a:	4603      	mov	r3, r0
 800e21c:	e04a      	b.n	800e2b4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e21e:	2300      	movs	r3, #0
 800e220:	75fb      	strb	r3, [r7, #23]
 800e222:	e031      	b.n	800e288 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e224:	7dfa      	ldrb	r2, [r7, #23]
 800e226:	492c      	ldr	r1, [pc, #176]	@ (800e2d8 <etharp_output+0x200>)
 800e228:	4613      	mov	r3, r2
 800e22a:	005b      	lsls	r3, r3, #1
 800e22c:	4413      	add	r3, r2
 800e22e:	00db      	lsls	r3, r3, #3
 800e230:	440b      	add	r3, r1
 800e232:	3314      	adds	r3, #20
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	2b01      	cmp	r3, #1
 800e238:	d923      	bls.n	800e282 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e23a:	7dfa      	ldrb	r2, [r7, #23]
 800e23c:	4926      	ldr	r1, [pc, #152]	@ (800e2d8 <etharp_output+0x200>)
 800e23e:	4613      	mov	r3, r2
 800e240:	005b      	lsls	r3, r3, #1
 800e242:	4413      	add	r3, r2
 800e244:	00db      	lsls	r3, r3, #3
 800e246:	440b      	add	r3, r1
 800e248:	3308      	adds	r3, #8
 800e24a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d117      	bne.n	800e282 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	6819      	ldr	r1, [r3, #0]
 800e256:	7dfa      	ldrb	r2, [r7, #23]
 800e258:	481f      	ldr	r0, [pc, #124]	@ (800e2d8 <etharp_output+0x200>)
 800e25a:	4613      	mov	r3, r2
 800e25c:	005b      	lsls	r3, r3, #1
 800e25e:	4413      	add	r3, r2
 800e260:	00db      	lsls	r3, r3, #3
 800e262:	4403      	add	r3, r0
 800e264:	3304      	adds	r3, #4
 800e266:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e268:	4299      	cmp	r1, r3
 800e26a:	d10a      	bne.n	800e282 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e26c:	4a19      	ldr	r2, [pc, #100]	@ (800e2d4 <etharp_output+0x1fc>)
 800e26e:	7dfb      	ldrb	r3, [r7, #23]
 800e270:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e272:	7dfb      	ldrb	r3, [r7, #23]
 800e274:	461a      	mov	r2, r3
 800e276:	68b9      	ldr	r1, [r7, #8]
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f7ff fe93 	bl	800dfa4 <etharp_output_to_arp_index>
 800e27e:	4603      	mov	r3, r0
 800e280:	e018      	b.n	800e2b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e282:	7dfb      	ldrb	r3, [r7, #23]
 800e284:	3301      	adds	r3, #1
 800e286:	75fb      	strb	r3, [r7, #23]
 800e288:	7dfb      	ldrb	r3, [r7, #23]
 800e28a:	2b09      	cmp	r3, #9
 800e28c:	d9ca      	bls.n	800e224 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	69b9      	ldr	r1, [r7, #24]
 800e292:	68f8      	ldr	r0, [r7, #12]
 800e294:	f000 f822 	bl	800e2dc <etharp_query>
 800e298:	4603      	mov	r3, r0
 800e29a:	e00b      	b.n	800e2b4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e2a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	68b9      	ldr	r1, [r7, #8]
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f001 fd45 	bl	800fd3c <ethernet_output>
 800e2b2:	4603      	mov	r3, r0
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3720      	adds	r7, #32
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	08014b40 	.word	0x08014b40
 800e2c0:	08014c90 	.word	0x08014c90
 800e2c4:	08014bb8 	.word	0x08014bb8
 800e2c8:	08014ce0 	.word	0x08014ce0
 800e2cc:	08014c80 	.word	0x08014c80
 800e2d0:	08015450 	.word	0x08015450
 800e2d4:	20008528 	.word	0x20008528
 800e2d8:	20008438 	.word	0x20008438

0800e2dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b08c      	sub	sp, #48	@ 0x30
 800e2e0:	af02      	add	r7, sp, #8
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	3326      	adds	r3, #38	@ 0x26
 800e2ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e2ee:	23ff      	movs	r3, #255	@ 0xff
 800e2f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	68f9      	ldr	r1, [r7, #12]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f000 fe0e 	bl	800ef20 <ip4_addr_isbroadcast_u32>
 800e304:	4603      	mov	r3, r0
 800e306:	2b00      	cmp	r3, #0
 800e308:	d10c      	bne.n	800e324 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e312:	2be0      	cmp	r3, #224	@ 0xe0
 800e314:	d006      	beq.n	800e324 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d003      	beq.n	800e324 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d102      	bne.n	800e32a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e324:	f06f 030f 	mvn.w	r3, #15
 800e328:	e101      	b.n	800e52e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e32a:	68fa      	ldr	r2, [r7, #12]
 800e32c:	2101      	movs	r1, #1
 800e32e:	68b8      	ldr	r0, [r7, #8]
 800e330:	f7ff fb60 	bl	800d9f4 <etharp_find_entry>
 800e334:	4603      	mov	r3, r0
 800e336:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e338:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	da02      	bge.n	800e346 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e340:	8a7b      	ldrh	r3, [r7, #18]
 800e342:	b25b      	sxtb	r3, r3
 800e344:	e0f3      	b.n	800e52e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e346:	8a7b      	ldrh	r3, [r7, #18]
 800e348:	2b7e      	cmp	r3, #126	@ 0x7e
 800e34a:	d906      	bls.n	800e35a <etharp_query+0x7e>
 800e34c:	4b7a      	ldr	r3, [pc, #488]	@ (800e538 <etharp_query+0x25c>)
 800e34e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800e352:	497a      	ldr	r1, [pc, #488]	@ (800e53c <etharp_query+0x260>)
 800e354:	487a      	ldr	r0, [pc, #488]	@ (800e540 <etharp_query+0x264>)
 800e356:	f003 f959 	bl	801160c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e35a:	8a7b      	ldrh	r3, [r7, #18]
 800e35c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e35e:	7c7a      	ldrb	r2, [r7, #17]
 800e360:	4978      	ldr	r1, [pc, #480]	@ (800e544 <etharp_query+0x268>)
 800e362:	4613      	mov	r3, r2
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	4413      	add	r3, r2
 800e368:	00db      	lsls	r3, r3, #3
 800e36a:	440b      	add	r3, r1
 800e36c:	3314      	adds	r3, #20
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d115      	bne.n	800e3a0 <etharp_query+0xc4>
    is_new_entry = 1;
 800e374:	2301      	movs	r3, #1
 800e376:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e378:	7c7a      	ldrb	r2, [r7, #17]
 800e37a:	4972      	ldr	r1, [pc, #456]	@ (800e544 <etharp_query+0x268>)
 800e37c:	4613      	mov	r3, r2
 800e37e:	005b      	lsls	r3, r3, #1
 800e380:	4413      	add	r3, r2
 800e382:	00db      	lsls	r3, r3, #3
 800e384:	440b      	add	r3, r1
 800e386:	3314      	adds	r3, #20
 800e388:	2201      	movs	r2, #1
 800e38a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e38c:	7c7a      	ldrb	r2, [r7, #17]
 800e38e:	496d      	ldr	r1, [pc, #436]	@ (800e544 <etharp_query+0x268>)
 800e390:	4613      	mov	r3, r2
 800e392:	005b      	lsls	r3, r3, #1
 800e394:	4413      	add	r3, r2
 800e396:	00db      	lsls	r3, r3, #3
 800e398:	440b      	add	r3, r1
 800e39a:	3308      	adds	r3, #8
 800e39c:	68fa      	ldr	r2, [r7, #12]
 800e39e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e3a0:	7c7a      	ldrb	r2, [r7, #17]
 800e3a2:	4968      	ldr	r1, [pc, #416]	@ (800e544 <etharp_query+0x268>)
 800e3a4:	4613      	mov	r3, r2
 800e3a6:	005b      	lsls	r3, r3, #1
 800e3a8:	4413      	add	r3, r2
 800e3aa:	00db      	lsls	r3, r3, #3
 800e3ac:	440b      	add	r3, r1
 800e3ae:	3314      	adds	r3, #20
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d011      	beq.n	800e3da <etharp_query+0xfe>
 800e3b6:	7c7a      	ldrb	r2, [r7, #17]
 800e3b8:	4962      	ldr	r1, [pc, #392]	@ (800e544 <etharp_query+0x268>)
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	005b      	lsls	r3, r3, #1
 800e3be:	4413      	add	r3, r2
 800e3c0:	00db      	lsls	r3, r3, #3
 800e3c2:	440b      	add	r3, r1
 800e3c4:	3314      	adds	r3, #20
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d806      	bhi.n	800e3da <etharp_query+0xfe>
 800e3cc:	4b5a      	ldr	r3, [pc, #360]	@ (800e538 <etharp_query+0x25c>)
 800e3ce:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800e3d2:	495d      	ldr	r1, [pc, #372]	@ (800e548 <etharp_query+0x26c>)
 800e3d4:	485a      	ldr	r0, [pc, #360]	@ (800e540 <etharp_query+0x264>)
 800e3d6:	f003 f919 	bl	801160c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e3da:	6a3b      	ldr	r3, [r7, #32]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d102      	bne.n	800e3e6 <etharp_query+0x10a>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d10c      	bne.n	800e400 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e3e6:	68b9      	ldr	r1, [r7, #8]
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f000 f963 	bl	800e6b4 <etharp_request>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d102      	bne.n	800e400 <etharp_query+0x124>
      return result;
 800e3fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e3fe:	e096      	b.n	800e52e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d106      	bne.n	800e414 <etharp_query+0x138>
 800e406:	4b4c      	ldr	r3, [pc, #304]	@ (800e538 <etharp_query+0x25c>)
 800e408:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800e40c:	494f      	ldr	r1, [pc, #316]	@ (800e54c <etharp_query+0x270>)
 800e40e:	484c      	ldr	r0, [pc, #304]	@ (800e540 <etharp_query+0x264>)
 800e410:	f003 f8fc 	bl	801160c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e414:	7c7a      	ldrb	r2, [r7, #17]
 800e416:	494b      	ldr	r1, [pc, #300]	@ (800e544 <etharp_query+0x268>)
 800e418:	4613      	mov	r3, r2
 800e41a:	005b      	lsls	r3, r3, #1
 800e41c:	4413      	add	r3, r2
 800e41e:	00db      	lsls	r3, r3, #3
 800e420:	440b      	add	r3, r1
 800e422:	3314      	adds	r3, #20
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d917      	bls.n	800e45a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e42a:	4a49      	ldr	r2, [pc, #292]	@ (800e550 <etharp_query+0x274>)
 800e42c:	7c7b      	ldrb	r3, [r7, #17]
 800e42e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e430:	7c7a      	ldrb	r2, [r7, #17]
 800e432:	4613      	mov	r3, r2
 800e434:	005b      	lsls	r3, r3, #1
 800e436:	4413      	add	r3, r2
 800e438:	00db      	lsls	r3, r3, #3
 800e43a:	3308      	adds	r3, #8
 800e43c:	4a41      	ldr	r2, [pc, #260]	@ (800e544 <etharp_query+0x268>)
 800e43e:	4413      	add	r3, r2
 800e440:	3304      	adds	r3, #4
 800e442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e446:	9200      	str	r2, [sp, #0]
 800e448:	697a      	ldr	r2, [r7, #20]
 800e44a:	6879      	ldr	r1, [r7, #4]
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f001 fc75 	bl	800fd3c <ethernet_output>
 800e452:	4603      	mov	r3, r0
 800e454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e458:	e067      	b.n	800e52a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e45a:	7c7a      	ldrb	r2, [r7, #17]
 800e45c:	4939      	ldr	r1, [pc, #228]	@ (800e544 <etharp_query+0x268>)
 800e45e:	4613      	mov	r3, r2
 800e460:	005b      	lsls	r3, r3, #1
 800e462:	4413      	add	r3, r2
 800e464:	00db      	lsls	r3, r3, #3
 800e466:	440b      	add	r3, r1
 800e468:	3314      	adds	r3, #20
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d15c      	bne.n	800e52a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e470:	2300      	movs	r3, #0
 800e472:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e478:	e01c      	b.n	800e4b4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	895a      	ldrh	r2, [r3, #10]
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	891b      	ldrh	r3, [r3, #8]
 800e482:	429a      	cmp	r2, r3
 800e484:	d10a      	bne.n	800e49c <etharp_query+0x1c0>
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d006      	beq.n	800e49c <etharp_query+0x1c0>
 800e48e:	4b2a      	ldr	r3, [pc, #168]	@ (800e538 <etharp_query+0x25c>)
 800e490:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800e494:	492f      	ldr	r1, [pc, #188]	@ (800e554 <etharp_query+0x278>)
 800e496:	482a      	ldr	r0, [pc, #168]	@ (800e540 <etharp_query+0x264>)
 800e498:	f003 f8b8 	bl	801160c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	7b1b      	ldrb	r3, [r3, #12]
 800e4a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d002      	beq.n	800e4ae <etharp_query+0x1d2>
        copy_needed = 1;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	61bb      	str	r3, [r7, #24]
        break;
 800e4ac:	e005      	b.n	800e4ba <etharp_query+0x1de>
      }
      p = p->next;
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1df      	bne.n	800e47a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d007      	beq.n	800e4d0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e4c6:	200e      	movs	r0, #14
 800e4c8:	f7f8 fed8 	bl	800727c <pbuf_clone>
 800e4cc:	61f8      	str	r0, [r7, #28]
 800e4ce:	e004      	b.n	800e4da <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e4d4:	69f8      	ldr	r0, [r7, #28]
 800e4d6:	f7f8 fd15 	bl	8006f04 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d021      	beq.n	800e524 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e4e0:	7c7a      	ldrb	r2, [r7, #17]
 800e4e2:	4918      	ldr	r1, [pc, #96]	@ (800e544 <etharp_query+0x268>)
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	005b      	lsls	r3, r3, #1
 800e4e8:	4413      	add	r3, r2
 800e4ea:	00db      	lsls	r3, r3, #3
 800e4ec:	440b      	add	r3, r1
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00a      	beq.n	800e50a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e4f4:	7c7a      	ldrb	r2, [r7, #17]
 800e4f6:	4913      	ldr	r1, [pc, #76]	@ (800e544 <etharp_query+0x268>)
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	005b      	lsls	r3, r3, #1
 800e4fc:	4413      	add	r3, r2
 800e4fe:	00db      	lsls	r3, r3, #3
 800e500:	440b      	add	r3, r1
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4618      	mov	r0, r3
 800e506:	f7f8 fc5d 	bl	8006dc4 <pbuf_free>
      }
      arp_table[i].q = p;
 800e50a:	7c7a      	ldrb	r2, [r7, #17]
 800e50c:	490d      	ldr	r1, [pc, #52]	@ (800e544 <etharp_query+0x268>)
 800e50e:	4613      	mov	r3, r2
 800e510:	005b      	lsls	r3, r3, #1
 800e512:	4413      	add	r3, r2
 800e514:	00db      	lsls	r3, r3, #3
 800e516:	440b      	add	r3, r1
 800e518:	69fa      	ldr	r2, [r7, #28]
 800e51a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e522:	e002      	b.n	800e52a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e524:	23ff      	movs	r3, #255	@ 0xff
 800e526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800e52a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3728      	adds	r7, #40	@ 0x28
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	08014b40 	.word	0x08014b40
 800e53c:	08014cec 	.word	0x08014cec
 800e540:	08014bb8 	.word	0x08014bb8
 800e544:	20008438 	.word	0x20008438
 800e548:	08014cfc 	.word	0x08014cfc
 800e54c:	08014ce0 	.word	0x08014ce0
 800e550:	20008528 	.word	0x20008528
 800e554:	08014d24 	.word	0x08014d24

0800e558 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b08a      	sub	sp, #40	@ 0x28
 800e55c:	af02      	add	r7, sp, #8
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
 800e564:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e566:	2300      	movs	r3, #0
 800e568:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d106      	bne.n	800e57e <etharp_raw+0x26>
 800e570:	4b3a      	ldr	r3, [pc, #232]	@ (800e65c <etharp_raw+0x104>)
 800e572:	f240 4257 	movw	r2, #1111	@ 0x457
 800e576:	493a      	ldr	r1, [pc, #232]	@ (800e660 <etharp_raw+0x108>)
 800e578:	483a      	ldr	r0, [pc, #232]	@ (800e664 <etharp_raw+0x10c>)
 800e57a:	f003 f847 	bl	801160c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e57e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e582:	211c      	movs	r1, #28
 800e584:	200e      	movs	r0, #14
 800e586:	f7f8 f939 	bl	80067fc <pbuf_alloc>
 800e58a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d102      	bne.n	800e598 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e592:	f04f 33ff 	mov.w	r3, #4294967295
 800e596:	e05d      	b.n	800e654 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e598:	69bb      	ldr	r3, [r7, #24]
 800e59a:	895b      	ldrh	r3, [r3, #10]
 800e59c:	2b1b      	cmp	r3, #27
 800e59e:	d806      	bhi.n	800e5ae <etharp_raw+0x56>
 800e5a0:	4b2e      	ldr	r3, [pc, #184]	@ (800e65c <etharp_raw+0x104>)
 800e5a2:	f240 4262 	movw	r2, #1122	@ 0x462
 800e5a6:	4930      	ldr	r1, [pc, #192]	@ (800e668 <etharp_raw+0x110>)
 800e5a8:	482e      	ldr	r0, [pc, #184]	@ (800e664 <etharp_raw+0x10c>)
 800e5aa:	f003 f82f 	bl	801160c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e5ae:	69bb      	ldr	r3, [r7, #24]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e5b4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7f7 f8a6 	bl	8005708 <lwip_htons>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	461a      	mov	r2, r3
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e5ca:	2b06      	cmp	r3, #6
 800e5cc:	d006      	beq.n	800e5dc <etharp_raw+0x84>
 800e5ce:	4b23      	ldr	r3, [pc, #140]	@ (800e65c <etharp_raw+0x104>)
 800e5d0:	f240 4269 	movw	r2, #1129	@ 0x469
 800e5d4:	4925      	ldr	r1, [pc, #148]	@ (800e66c <etharp_raw+0x114>)
 800e5d6:	4823      	ldr	r0, [pc, #140]	@ (800e664 <etharp_raw+0x10c>)
 800e5d8:	f003 f818 	bl	801160c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	3308      	adds	r3, #8
 800e5e0:	2206      	movs	r2, #6
 800e5e2:	6839      	ldr	r1, [r7, #0]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f003 f93c 	bl	8011862 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	3312      	adds	r3, #18
 800e5ee:	2206      	movs	r2, #6
 800e5f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f003 f935 	bl	8011862 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	330e      	adds	r3, #14
 800e5fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5fe:	6812      	ldr	r2, [r2, #0]
 800e600:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	3318      	adds	r3, #24
 800e606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e608:	6812      	ldr	r2, [r2, #0]
 800e60a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	2200      	movs	r2, #0
 800e610:	701a      	strb	r2, [r3, #0]
 800e612:	2200      	movs	r2, #0
 800e614:	f042 0201 	orr.w	r2, r2, #1
 800e618:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f042 0208 	orr.w	r2, r2, #8
 800e622:	709a      	strb	r2, [r3, #2]
 800e624:	2200      	movs	r2, #0
 800e626:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	2206      	movs	r2, #6
 800e62c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	2204      	movs	r2, #4
 800e632:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e634:	f640 0306 	movw	r3, #2054	@ 0x806
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	69b9      	ldr	r1, [r7, #24]
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f001 fb7b 	bl	800fd3c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e646:	69b8      	ldr	r0, [r7, #24]
 800e648:	f7f8 fbbc 	bl	8006dc4 <pbuf_free>
  p = NULL;
 800e64c:	2300      	movs	r3, #0
 800e64e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e650:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e654:	4618      	mov	r0, r3
 800e656:	3720      	adds	r7, #32
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	08014b40 	.word	0x08014b40
 800e660:	08014c90 	.word	0x08014c90
 800e664:	08014bb8 	.word	0x08014bb8
 800e668:	08014d40 	.word	0x08014d40
 800e66c:	08014d74 	.word	0x08014d74

0800e670 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b088      	sub	sp, #32
 800e674:	af04      	add	r7, sp, #16
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e68c:	2201      	movs	r2, #1
 800e68e:	9203      	str	r2, [sp, #12]
 800e690:	68ba      	ldr	r2, [r7, #8]
 800e692:	9202      	str	r2, [sp, #8]
 800e694:	4a06      	ldr	r2, [pc, #24]	@ (800e6b0 <etharp_request_dst+0x40>)
 800e696:	9201      	str	r2, [sp, #4]
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	4603      	mov	r3, r0
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f7ff ff5a 	bl	800e558 <etharp_raw>
 800e6a4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3710      	adds	r7, #16
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	08015458 	.word	0x08015458

0800e6b4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e6be:	4a05      	ldr	r2, [pc, #20]	@ (800e6d4 <etharp_request+0x20>)
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7ff ffd4 	bl	800e670 <etharp_request_dst>
 800e6c8:	4603      	mov	r3, r0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	08015450 	.word	0x08015450

0800e6d8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b08e      	sub	sp, #56	@ 0x38
 800e6dc:	af04      	add	r7, sp, #16
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e6e2:	4b79      	ldr	r3, [pc, #484]	@ (800e8c8 <icmp_input+0x1f0>)
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	f003 030f 	and.w	r3, r3, #15
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800e6f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e6fa:	2b13      	cmp	r3, #19
 800e6fc:	f240 80cd 	bls.w	800e89a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	895b      	ldrh	r3, [r3, #10]
 800e704:	2b03      	cmp	r3, #3
 800e706:	f240 80ca 	bls.w	800e89e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e714:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f000 80b7 	beq.w	800e88c <icmp_input+0x1b4>
 800e71e:	2b08      	cmp	r3, #8
 800e720:	f040 80b7 	bne.w	800e892 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e724:	4b69      	ldr	r3, [pc, #420]	@ (800e8cc <icmp_input+0x1f4>)
 800e726:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e728:	4b67      	ldr	r3, [pc, #412]	@ (800e8c8 <icmp_input+0x1f0>)
 800e72a:	695b      	ldr	r3, [r3, #20]
 800e72c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e730:	2be0      	cmp	r3, #224	@ 0xe0
 800e732:	f000 80bb 	beq.w	800e8ac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e736:	4b64      	ldr	r3, [pc, #400]	@ (800e8c8 <icmp_input+0x1f0>)
 800e738:	695b      	ldr	r3, [r3, #20]
 800e73a:	4a63      	ldr	r2, [pc, #396]	@ (800e8c8 <icmp_input+0x1f0>)
 800e73c:	6812      	ldr	r2, [r2, #0]
 800e73e:	4611      	mov	r1, r2
 800e740:	4618      	mov	r0, r3
 800e742:	f000 fbed 	bl	800ef20 <ip4_addr_isbroadcast_u32>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f040 80b1 	bne.w	800e8b0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	891b      	ldrh	r3, [r3, #8]
 800e752:	2b07      	cmp	r3, #7
 800e754:	f240 80a5 	bls.w	800e8a2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e758:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e75a:	330e      	adds	r3, #14
 800e75c:	4619      	mov	r1, r3
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7f8 fa9a 	bl	8006c98 <pbuf_add_header>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d04b      	beq.n	800e802 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	891a      	ldrh	r2, [r3, #8]
 800e76e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e770:	4413      	add	r3, r2
 800e772:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	891b      	ldrh	r3, [r3, #8]
 800e778:	8b7a      	ldrh	r2, [r7, #26]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	f0c0 809a 	bcc.w	800e8b4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e780:	8b7b      	ldrh	r3, [r7, #26]
 800e782:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e786:	4619      	mov	r1, r3
 800e788:	200e      	movs	r0, #14
 800e78a:	f7f8 f837 	bl	80067fc <pbuf_alloc>
 800e78e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	2b00      	cmp	r3, #0
 800e794:	f000 8090 	beq.w	800e8b8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	895b      	ldrh	r3, [r3, #10]
 800e79c:	461a      	mov	r2, r3
 800e79e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e7a0:	3308      	adds	r3, #8
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d203      	bcs.n	800e7ae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e7a6:	6978      	ldr	r0, [r7, #20]
 800e7a8:	f7f8 fb0c 	bl	8006dc4 <pbuf_free>
          goto icmperr;
 800e7ac:	e085      	b.n	800e8ba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e7b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f003 f853 	bl	8011862 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e7bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e7be:	4619      	mov	r1, r3
 800e7c0:	6978      	ldr	r0, [r7, #20]
 800e7c2:	f7f8 fa79 	bl	8006cb8 <pbuf_remove_header>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d009      	beq.n	800e7e0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e7cc:	4b40      	ldr	r3, [pc, #256]	@ (800e8d0 <icmp_input+0x1f8>)
 800e7ce:	22b6      	movs	r2, #182	@ 0xb6
 800e7d0:	4940      	ldr	r1, [pc, #256]	@ (800e8d4 <icmp_input+0x1fc>)
 800e7d2:	4841      	ldr	r0, [pc, #260]	@ (800e8d8 <icmp_input+0x200>)
 800e7d4:	f002 ff1a 	bl	801160c <iprintf>
          pbuf_free(r);
 800e7d8:	6978      	ldr	r0, [r7, #20]
 800e7da:	f7f8 faf3 	bl	8006dc4 <pbuf_free>
          goto icmperr;
 800e7de:	e06c      	b.n	800e8ba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e7e0:	6879      	ldr	r1, [r7, #4]
 800e7e2:	6978      	ldr	r0, [r7, #20]
 800e7e4:	f7f8 fc06 	bl	8006ff4 <pbuf_copy>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d003      	beq.n	800e7f6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e7ee:	6978      	ldr	r0, [r7, #20]
 800e7f0:	f7f8 fae8 	bl	8006dc4 <pbuf_free>
          goto icmperr;
 800e7f4:	e061      	b.n	800e8ba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7f8 fae4 	bl	8006dc4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	607b      	str	r3, [r7, #4]
 800e800:	e00f      	b.n	800e822 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e802:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e804:	330e      	adds	r3, #14
 800e806:	4619      	mov	r1, r3
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7f8 fa55 	bl	8006cb8 <pbuf_remove_header>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d006      	beq.n	800e822 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e814:	4b2e      	ldr	r3, [pc, #184]	@ (800e8d0 <icmp_input+0x1f8>)
 800e816:	22c7      	movs	r2, #199	@ 0xc7
 800e818:	4930      	ldr	r1, [pc, #192]	@ (800e8dc <icmp_input+0x204>)
 800e81a:	482f      	ldr	r0, [pc, #188]	@ (800e8d8 <icmp_input+0x200>)
 800e81c:	f002 fef6 	bl	801160c <iprintf>
          goto icmperr;
 800e820:	e04b      	b.n	800e8ba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e828:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e82a:	4619      	mov	r1, r3
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7f8 fa33 	bl	8006c98 <pbuf_add_header>
 800e832:	4603      	mov	r3, r0
 800e834:	2b00      	cmp	r3, #0
 800e836:	d12b      	bne.n	800e890 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e846:	4b20      	ldr	r3, [pc, #128]	@ (800e8c8 <icmp_input+0x1f0>)
 800e848:	691a      	ldr	r2, [r3, #16]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	2200      	movs	r2, #0
 800e852:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	2200      	movs	r2, #0
 800e858:	709a      	strb	r2, [r3, #2]
 800e85a:	2200      	movs	r2, #0
 800e85c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	22ff      	movs	r2, #255	@ 0xff
 800e862:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2200      	movs	r2, #0
 800e868:	729a      	strb	r2, [r3, #10]
 800e86a:	2200      	movs	r2, #0
 800e86c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	9302      	str	r3, [sp, #8]
 800e872:	2301      	movs	r3, #1
 800e874:	9301      	str	r3, [sp, #4]
 800e876:	2300      	movs	r3, #0
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	23ff      	movs	r3, #255	@ 0xff
 800e87c:	2200      	movs	r2, #0
 800e87e:	69f9      	ldr	r1, [r7, #28]
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 fa75 	bl	800ed70 <ip4_output_if>
 800e886:	4603      	mov	r3, r0
 800e888:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e88a:	e001      	b.n	800e890 <icmp_input+0x1b8>
      break;
 800e88c:	bf00      	nop
 800e88e:	e000      	b.n	800e892 <icmp_input+0x1ba>
      break;
 800e890:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7f8 fa96 	bl	8006dc4 <pbuf_free>
  return;
 800e898:	e013      	b.n	800e8c2 <icmp_input+0x1ea>
    goto lenerr;
 800e89a:	bf00      	nop
 800e89c:	e002      	b.n	800e8a4 <icmp_input+0x1cc>
    goto lenerr;
 800e89e:	bf00      	nop
 800e8a0:	e000      	b.n	800e8a4 <icmp_input+0x1cc>
        goto lenerr;
 800e8a2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f7f8 fa8d 	bl	8006dc4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e8aa:	e00a      	b.n	800e8c2 <icmp_input+0x1ea>
        goto icmperr;
 800e8ac:	bf00      	nop
 800e8ae:	e004      	b.n	800e8ba <icmp_input+0x1e2>
        goto icmperr;
 800e8b0:	bf00      	nop
 800e8b2:	e002      	b.n	800e8ba <icmp_input+0x1e2>
          goto icmperr;
 800e8b4:	bf00      	nop
 800e8b6:	e000      	b.n	800e8ba <icmp_input+0x1e2>
          goto icmperr;
 800e8b8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7f8 fa82 	bl	8006dc4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e8c0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e8c2:	3728      	adds	r7, #40	@ 0x28
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	20004e68 	.word	0x20004e68
 800e8cc:	20004e7c 	.word	0x20004e7c
 800e8d0:	08014db8 	.word	0x08014db8
 800e8d4:	08014df0 	.word	0x08014df0
 800e8d8:	08014e28 	.word	0x08014e28
 800e8dc:	08014e50 	.word	0x08014e50

0800e8e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e8ec:	78fb      	ldrb	r3, [r7, #3]
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	2103      	movs	r1, #3
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 f814 	bl	800e920 <icmp_send_response>
}
 800e8f8:	bf00      	nop
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	460b      	mov	r3, r1
 800e90a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e90c:	78fb      	ldrb	r3, [r7, #3]
 800e90e:	461a      	mov	r2, r3
 800e910:	210b      	movs	r1, #11
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 f804 	bl	800e920 <icmp_send_response>
}
 800e918:	bf00      	nop
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b08c      	sub	sp, #48	@ 0x30
 800e924:	af04      	add	r7, sp, #16
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	460b      	mov	r3, r1
 800e92a:	70fb      	strb	r3, [r7, #3]
 800e92c:	4613      	mov	r3, r2
 800e92e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e930:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e934:	2124      	movs	r1, #36	@ 0x24
 800e936:	2022      	movs	r0, #34	@ 0x22
 800e938:	f7f7 ff60 	bl	80067fc <pbuf_alloc>
 800e93c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d04c      	beq.n	800e9de <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	895b      	ldrh	r3, [r3, #10]
 800e948:	2b23      	cmp	r3, #35	@ 0x23
 800e94a:	d806      	bhi.n	800e95a <icmp_send_response+0x3a>
 800e94c:	4b26      	ldr	r3, [pc, #152]	@ (800e9e8 <icmp_send_response+0xc8>)
 800e94e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800e952:	4926      	ldr	r1, [pc, #152]	@ (800e9ec <icmp_send_response+0xcc>)
 800e954:	4826      	ldr	r0, [pc, #152]	@ (800e9f0 <icmp_send_response+0xd0>)
 800e956:	f002 fe59 	bl	801160c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	78fa      	ldrb	r2, [r7, #3]
 800e96a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	78ba      	ldrb	r2, [r7, #2]
 800e970:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	2200      	movs	r2, #0
 800e976:	711a      	strb	r2, [r3, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	2200      	movs	r2, #0
 800e980:	719a      	strb	r2, [r3, #6]
 800e982:	2200      	movs	r2, #0
 800e984:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	f103 0008 	add.w	r0, r3, #8
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	221c      	movs	r2, #28
 800e994:	4619      	mov	r1, r3
 800e996:	f002 ff64 	bl	8011862 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e9a0:	f107 030c 	add.w	r3, r7, #12
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f000 f825 	bl	800e9f4 <ip4_route>
 800e9aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d011      	beq.n	800e9d6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	709a      	strb	r2, [r3, #2]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e9bc:	f107 020c 	add.w	r2, r7, #12
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	9302      	str	r3, [sp, #8]
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	9301      	str	r3, [sp, #4]
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	23ff      	movs	r3, #255	@ 0xff
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	69f8      	ldr	r0, [r7, #28]
 800e9d2:	f000 f9cd 	bl	800ed70 <ip4_output_if>
  }
  pbuf_free(q);
 800e9d6:	69f8      	ldr	r0, [r7, #28]
 800e9d8:	f7f8 f9f4 	bl	8006dc4 <pbuf_free>
 800e9dc:	e000      	b.n	800e9e0 <icmp_send_response+0xc0>
    return;
 800e9de:	bf00      	nop
}
 800e9e0:	3720      	adds	r7, #32
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	08014db8 	.word	0x08014db8
 800e9ec:	08014e84 	.word	0x08014e84
 800e9f0:	08014e28 	.word	0x08014e28

0800e9f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e9fc:	4b33      	ldr	r3, [pc, #204]	@ (800eacc <ip4_route+0xd8>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	60fb      	str	r3, [r7, #12]
 800ea02:	e036      	b.n	800ea72 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea0a:	f003 0301 	and.w	r3, r3, #1
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d02b      	beq.n	800ea6c <ip4_route+0x78>
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea1a:	089b      	lsrs	r3, r3, #2
 800ea1c:	f003 0301 	and.w	r3, r3, #1
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d022      	beq.n	800ea6c <ip4_route+0x78>
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	3304      	adds	r3, #4
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d01d      	beq.n	800ea6c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	3304      	adds	r3, #4
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	405a      	eors	r2, r3
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	3308      	adds	r3, #8
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	4013      	ands	r3, r2
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d101      	bne.n	800ea4c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	e038      	b.n	800eabe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea52:	f003 0302 	and.w	r3, r3, #2
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d108      	bne.n	800ea6c <ip4_route+0x78>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	330c      	adds	r3, #12
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d101      	bne.n	800ea6c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	e028      	b.n	800eabe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	60fb      	str	r3, [r7, #12]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d1c5      	bne.n	800ea04 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ea78:	4b15      	ldr	r3, [pc, #84]	@ (800ead0 <ip4_route+0xdc>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d01a      	beq.n	800eab6 <ip4_route+0xc2>
 800ea80:	4b13      	ldr	r3, [pc, #76]	@ (800ead0 <ip4_route+0xdc>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea88:	f003 0301 	and.w	r3, r3, #1
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d012      	beq.n	800eab6 <ip4_route+0xc2>
 800ea90:	4b0f      	ldr	r3, [pc, #60]	@ (800ead0 <ip4_route+0xdc>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea98:	f003 0304 	and.w	r3, r3, #4
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00a      	beq.n	800eab6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800eaa0:	4b0b      	ldr	r3, [pc, #44]	@ (800ead0 <ip4_route+0xdc>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	3304      	adds	r3, #4
 800eaa6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d004      	beq.n	800eab6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	2b7f      	cmp	r3, #127	@ 0x7f
 800eab4:	d101      	bne.n	800eaba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800eab6:	2300      	movs	r3, #0
 800eab8:	e001      	b.n	800eabe <ip4_route+0xca>
  }

  return netif_default;
 800eaba:	4b05      	ldr	r3, [pc, #20]	@ (800ead0 <ip4_route+0xdc>)
 800eabc:	681b      	ldr	r3, [r3, #0]
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3714      	adds	r7, #20
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	200083cc 	.word	0x200083cc
 800ead0:	200083d0 	.word	0x200083d0

0800ead4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eae2:	f003 0301 	and.w	r3, r3, #1
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d016      	beq.n	800eb1a <ip4_input_accept+0x46>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	3304      	adds	r3, #4
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d011      	beq.n	800eb1a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eaf6:	4b0b      	ldr	r3, [pc, #44]	@ (800eb24 <ip4_input_accept+0x50>)
 800eaf8:	695a      	ldr	r2, [r3, #20]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	3304      	adds	r3, #4
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d008      	beq.n	800eb16 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800eb04:	4b07      	ldr	r3, [pc, #28]	@ (800eb24 <ip4_input_accept+0x50>)
 800eb06:	695b      	ldr	r3, [r3, #20]
 800eb08:	6879      	ldr	r1, [r7, #4]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f000 fa08 	bl	800ef20 <ip4_addr_isbroadcast_u32>
 800eb10:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800eb16:	2301      	movs	r3, #1
 800eb18:	e000      	b.n	800eb1c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3708      	adds	r7, #8
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	20004e68 	.word	0x20004e68

0800eb28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b086      	sub	sp, #24
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	091b      	lsrs	r3, r3, #4
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b04      	cmp	r3, #4
 800eb42:	d004      	beq.n	800eb4e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7f8 f93d 	bl	8006dc4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	e107      	b.n	800ed5e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	f003 030f 	and.w	r3, r3, #15
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	885b      	ldrh	r3, [r3, #2]
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7f6 fdcf 	bl	8005708 <lwip_htons>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	891b      	ldrh	r3, [r3, #8]
 800eb72:	89ba      	ldrh	r2, [r7, #12]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d204      	bcs.n	800eb82 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800eb78:	89bb      	ldrh	r3, [r7, #12]
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7f7 ff9b 	bl	8006ab8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	895b      	ldrh	r3, [r3, #10]
 800eb86:	89fa      	ldrh	r2, [r7, #14]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d807      	bhi.n	800eb9c <ip4_input+0x74>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	891b      	ldrh	r3, [r3, #8]
 800eb90:	89ba      	ldrh	r2, [r7, #12]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d802      	bhi.n	800eb9c <ip4_input+0x74>
 800eb96:	89fb      	ldrh	r3, [r7, #14]
 800eb98:	2b13      	cmp	r3, #19
 800eb9a:	d804      	bhi.n	800eba6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f7f8 f911 	bl	8006dc4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800eba2:	2300      	movs	r3, #0
 800eba4:	e0db      	b.n	800ed5e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	4a6f      	ldr	r2, [pc, #444]	@ (800ed68 <ip4_input+0x240>)
 800ebac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	4a6d      	ldr	r2, [pc, #436]	@ (800ed68 <ip4_input+0x240>)
 800ebb4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ebb6:	4b6c      	ldr	r3, [pc, #432]	@ (800ed68 <ip4_input+0x240>)
 800ebb8:	695b      	ldr	r3, [r3, #20]
 800ebba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ebbe:	2be0      	cmp	r3, #224	@ 0xe0
 800ebc0:	d112      	bne.n	800ebe8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ebc8:	f003 0301 	and.w	r3, r3, #1
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d007      	beq.n	800ebe2 <ip4_input+0xba>
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	3304      	adds	r3, #4
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d002      	beq.n	800ebe2 <ip4_input+0xba>
      netif = inp;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	613b      	str	r3, [r7, #16]
 800ebe0:	e02a      	b.n	800ec38 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	613b      	str	r3, [r7, #16]
 800ebe6:	e027      	b.n	800ec38 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ebe8:	6838      	ldr	r0, [r7, #0]
 800ebea:	f7ff ff73 	bl	800ead4 <ip4_input_accept>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d002      	beq.n	800ebfa <ip4_input+0xd2>
      netif = inp;
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	613b      	str	r3, [r7, #16]
 800ebf8:	e01e      	b.n	800ec38 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ebfe:	4b5a      	ldr	r3, [pc, #360]	@ (800ed68 <ip4_input+0x240>)
 800ec00:	695b      	ldr	r3, [r3, #20]
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec06:	d017      	beq.n	800ec38 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ec08:	4b58      	ldr	r3, [pc, #352]	@ (800ed6c <ip4_input+0x244>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	613b      	str	r3, [r7, #16]
 800ec0e:	e00e      	b.n	800ec2e <ip4_input+0x106>
          if (netif == inp) {
 800ec10:	693a      	ldr	r2, [r7, #16]
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d006      	beq.n	800ec26 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ec18:	6938      	ldr	r0, [r7, #16]
 800ec1a:	f7ff ff5b 	bl	800ead4 <ip4_input_accept>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d108      	bne.n	800ec36 <ip4_input+0x10e>
 800ec24:	e000      	b.n	800ec28 <ip4_input+0x100>
            continue;
 800ec26:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	613b      	str	r3, [r7, #16]
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1ed      	bne.n	800ec10 <ip4_input+0xe8>
 800ec34:	e000      	b.n	800ec38 <ip4_input+0x110>
            break;
 800ec36:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ec38:	4b4b      	ldr	r3, [pc, #300]	@ (800ed68 <ip4_input+0x240>)
 800ec3a:	691b      	ldr	r3, [r3, #16]
 800ec3c:	6839      	ldr	r1, [r7, #0]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f000 f96e 	bl	800ef20 <ip4_addr_isbroadcast_u32>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d105      	bne.n	800ec56 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ec4a:	4b47      	ldr	r3, [pc, #284]	@ (800ed68 <ip4_input+0x240>)
 800ec4c:	691b      	ldr	r3, [r3, #16]
 800ec4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ec52:	2be0      	cmp	r3, #224	@ 0xe0
 800ec54:	d104      	bne.n	800ec60 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7f8 f8b4 	bl	8006dc4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	e07e      	b.n	800ed5e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d104      	bne.n	800ec70 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f7f8 f8ac 	bl	8006dc4 <pbuf_free>
    return ERR_OK;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	e076      	b.n	800ed5e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	88db      	ldrh	r3, [r3, #6]
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	461a      	mov	r2, r3
 800ec78:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800ec7c:	4013      	ands	r3, r2
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d00b      	beq.n	800ec9a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 fc92 	bl	800f5ac <ip4_reass>
 800ec88:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d101      	bne.n	800ec94 <ip4_input+0x16c>
      return ERR_OK;
 800ec90:	2300      	movs	r3, #0
 800ec92:	e064      	b.n	800ed5e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ec9a:	4a33      	ldr	r2, [pc, #204]	@ (800ed68 <ip4_input+0x240>)
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800eca0:	4a31      	ldr	r2, [pc, #196]	@ (800ed68 <ip4_input+0x240>)
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800eca6:	4a30      	ldr	r2, [pc, #192]	@ (800ed68 <ip4_input+0x240>)
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	f003 030f 	and.w	r3, r3, #15
 800ecb4:	b2db      	uxtb	r3, r3
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	461a      	mov	r2, r3
 800ecbc:	4b2a      	ldr	r3, [pc, #168]	@ (800ed68 <ip4_input+0x240>)
 800ecbe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ecc0:	89fb      	ldrh	r3, [r7, #14]
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7f7 fff7 	bl	8006cb8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	7a5b      	ldrb	r3, [r3, #9]
 800ecce:	2b11      	cmp	r3, #17
 800ecd0:	d006      	beq.n	800ece0 <ip4_input+0x1b8>
 800ecd2:	2b11      	cmp	r3, #17
 800ecd4:	dc13      	bgt.n	800ecfe <ip4_input+0x1d6>
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d00c      	beq.n	800ecf4 <ip4_input+0x1cc>
 800ecda:	2b06      	cmp	r3, #6
 800ecdc:	d005      	beq.n	800ecea <ip4_input+0x1c2>
 800ecde:	e00e      	b.n	800ecfe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ece0:	6839      	ldr	r1, [r7, #0]
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7fe fc68 	bl	800d5b8 <udp_input>
        break;
 800ece8:	e026      	b.n	800ed38 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ecea:	6839      	ldr	r1, [r7, #0]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7fa f88f 	bl	8008e10 <tcp_input>
        break;
 800ecf2:	e021      	b.n	800ed38 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ecf4:	6839      	ldr	r1, [r7, #0]
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f7ff fcee 	bl	800e6d8 <icmp_input>
        break;
 800ecfc:	e01c      	b.n	800ed38 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ecfe:	4b1a      	ldr	r3, [pc, #104]	@ (800ed68 <ip4_input+0x240>)
 800ed00:	695b      	ldr	r3, [r3, #20]
 800ed02:	6939      	ldr	r1, [r7, #16]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f000 f90b 	bl	800ef20 <ip4_addr_isbroadcast_u32>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10f      	bne.n	800ed30 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ed10:	4b15      	ldr	r3, [pc, #84]	@ (800ed68 <ip4_input+0x240>)
 800ed12:	695b      	ldr	r3, [r3, #20]
 800ed14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ed18:	2be0      	cmp	r3, #224	@ 0xe0
 800ed1a:	d009      	beq.n	800ed30 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ed1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ed20:	4619      	mov	r1, r3
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7f8 f83b 	bl	8006d9e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ed28:	2102      	movs	r1, #2
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f7ff fdd8 	bl	800e8e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f7f8 f847 	bl	8006dc4 <pbuf_free>
        break;
 800ed36:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ed38:	4b0b      	ldr	r3, [pc, #44]	@ (800ed68 <ip4_input+0x240>)
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ed3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ed68 <ip4_input+0x240>)
 800ed40:	2200      	movs	r2, #0
 800ed42:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ed44:	4b08      	ldr	r3, [pc, #32]	@ (800ed68 <ip4_input+0x240>)
 800ed46:	2200      	movs	r2, #0
 800ed48:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ed4a:	4b07      	ldr	r3, [pc, #28]	@ (800ed68 <ip4_input+0x240>)
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ed50:	4b05      	ldr	r3, [pc, #20]	@ (800ed68 <ip4_input+0x240>)
 800ed52:	2200      	movs	r2, #0
 800ed54:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ed56:	4b04      	ldr	r3, [pc, #16]	@ (800ed68 <ip4_input+0x240>)
 800ed58:	2200      	movs	r2, #0
 800ed5a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ed5c:	2300      	movs	r3, #0
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3718      	adds	r7, #24
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	20004e68 	.word	0x20004e68
 800ed6c:	200083cc 	.word	0x200083cc

0800ed70 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b08a      	sub	sp, #40	@ 0x28
 800ed74:	af04      	add	r7, sp, #16
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	607a      	str	r2, [r7, #4]
 800ed7c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d009      	beq.n	800ed9c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d003      	beq.n	800ed96 <ip4_output_if+0x26>
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d102      	bne.n	800ed9c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ed96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed98:	3304      	adds	r3, #4
 800ed9a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ed9c:	78fa      	ldrb	r2, [r7, #3]
 800ed9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda0:	9302      	str	r3, [sp, #8]
 800eda2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eda6:	9301      	str	r3, [sp, #4]
 800eda8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800edac:	9300      	str	r3, [sp, #0]
 800edae:	4613      	mov	r3, r2
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	6979      	ldr	r1, [r7, #20]
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f000 f805 	bl	800edc4 <ip4_output_if_src>
 800edba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3718      	adds	r7, #24
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b088      	sub	sp, #32
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	607a      	str	r2, [r7, #4]
 800edd0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	7b9b      	ldrb	r3, [r3, #14]
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d006      	beq.n	800ede8 <ip4_output_if_src+0x24>
 800edda:	4b4b      	ldr	r3, [pc, #300]	@ (800ef08 <ip4_output_if_src+0x144>)
 800eddc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800ede0:	494a      	ldr	r1, [pc, #296]	@ (800ef0c <ip4_output_if_src+0x148>)
 800ede2:	484b      	ldr	r0, [pc, #300]	@ (800ef10 <ip4_output_if_src+0x14c>)
 800ede4:	f002 fc12 	bl	801160c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d060      	beq.n	800eeb0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800edee:	2314      	movs	r3, #20
 800edf0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800edf2:	2114      	movs	r1, #20
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f7f7 ff4f 	bl	8006c98 <pbuf_add_header>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d002      	beq.n	800ee06 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ee00:	f06f 0301 	mvn.w	r3, #1
 800ee04:	e07c      	b.n	800ef00 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	895b      	ldrh	r3, [r3, #10]
 800ee10:	2b13      	cmp	r3, #19
 800ee12:	d806      	bhi.n	800ee22 <ip4_output_if_src+0x5e>
 800ee14:	4b3c      	ldr	r3, [pc, #240]	@ (800ef08 <ip4_output_if_src+0x144>)
 800ee16:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800ee1a:	493e      	ldr	r1, [pc, #248]	@ (800ef14 <ip4_output_if_src+0x150>)
 800ee1c:	483c      	ldr	r0, [pc, #240]	@ (800ef10 <ip4_output_if_src+0x14c>)
 800ee1e:	f002 fbf5 	bl	801160c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	78fa      	ldrb	r2, [r7, #3]
 800ee26:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ee28:	69fb      	ldr	r3, [r7, #28]
 800ee2a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800ee2e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ee38:	8b7b      	ldrh	r3, [r7, #26]
 800ee3a:	089b      	lsrs	r3, r3, #2
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee44:	b2da      	uxtb	r2, r3
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ee4a:	69fb      	ldr	r3, [r7, #28]
 800ee4c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ee50:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	891b      	ldrh	r3, [r3, #8]
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7f6 fc56 	bl	8005708 <lwip_htons>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	461a      	mov	r2, r3
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	2200      	movs	r2, #0
 800ee68:	719a      	strb	r2, [r3, #6]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ee6e:	4b2a      	ldr	r3, [pc, #168]	@ (800ef18 <ip4_output_if_src+0x154>)
 800ee70:	881b      	ldrh	r3, [r3, #0]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7f6 fc48 	bl	8005708 <lwip_htons>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	69fb      	ldr	r3, [r7, #28]
 800ee7e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ee80:	4b25      	ldr	r3, [pc, #148]	@ (800ef18 <ip4_output_if_src+0x154>)
 800ee82:	881b      	ldrh	r3, [r3, #0]
 800ee84:	3301      	adds	r3, #1
 800ee86:	b29a      	uxth	r2, r3
 800ee88:	4b23      	ldr	r3, [pc, #140]	@ (800ef18 <ip4_output_if_src+0x154>)
 800ee8a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d104      	bne.n	800ee9c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ee92:	4b22      	ldr	r3, [pc, #136]	@ (800ef1c <ip4_output_if_src+0x158>)
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	60da      	str	r2, [r3, #12]
 800ee9a:	e003      	b.n	800eea4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	69fb      	ldr	r3, [r7, #28]
 800eea2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	2200      	movs	r2, #0
 800eea8:	729a      	strb	r2, [r3, #10]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	72da      	strb	r2, [r3, #11]
 800eeae:	e00f      	b.n	800eed0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	895b      	ldrh	r3, [r3, #10]
 800eeb4:	2b13      	cmp	r3, #19
 800eeb6:	d802      	bhi.n	800eebe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eeb8:	f06f 0301 	mvn.w	r3, #1
 800eebc:	e020      	b.n	800ef00 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	691b      	ldr	r3, [r3, #16]
 800eec8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800eeca:	f107 0314 	add.w	r3, r7, #20
 800eece:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800eed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d00c      	beq.n	800eef2 <ip4_output_if_src+0x12e>
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	891a      	ldrh	r2, [r3, #8]
 800eedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eede:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d906      	bls.n	800eef2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	f000 fd53 	bl	800f994 <ip4_frag>
 800eeee:	4603      	mov	r3, r0
 800eef0:	e006      	b.n	800ef00 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800eef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef4:	695b      	ldr	r3, [r3, #20]
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	68f9      	ldr	r1, [r7, #12]
 800eefa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eefc:	4798      	blx	r3
 800eefe:	4603      	mov	r3, r0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3720      	adds	r7, #32
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	08014eb0 	.word	0x08014eb0
 800ef0c:	08014ee4 	.word	0x08014ee4
 800ef10:	08014ef0 	.word	0x08014ef0
 800ef14:	08014f18 	.word	0x08014f18
 800ef18:	2000852a 	.word	0x2000852a
 800ef1c:	0801544c 	.word	0x0801544c

0800ef20 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef34:	d002      	beq.n	800ef3c <ip4_addr_isbroadcast_u32+0x1c>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d101      	bne.n	800ef40 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e02a      	b.n	800ef96 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ef46:	f003 0302 	and.w	r3, r3, #2
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d101      	bne.n	800ef52 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	e021      	b.n	800ef96 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	3304      	adds	r3, #4
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d101      	bne.n	800ef62 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	e019      	b.n	800ef96 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	3304      	adds	r3, #4
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	405a      	eors	r2, r3
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	3308      	adds	r3, #8
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4013      	ands	r3, r2
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d10d      	bne.n	800ef94 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	3308      	adds	r3, #8
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	43da      	mvns	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	3308      	adds	r3, #8
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d101      	bne.n	800ef94 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ef90:	2301      	movs	r3, #1
 800ef92:	e000      	b.n	800ef96 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ef94:	2300      	movs	r3, #0
  }
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
	...

0800efa4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800efaa:	2300      	movs	r3, #0
 800efac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800efae:	4b12      	ldr	r3, [pc, #72]	@ (800eff8 <ip_reass_tmr+0x54>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800efb4:	e018      	b.n	800efe8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	7fdb      	ldrb	r3, [r3, #31]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00b      	beq.n	800efd6 <ip_reass_tmr+0x32>
      r->timer--;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	7fdb      	ldrb	r3, [r3, #31]
 800efc2:	3b01      	subs	r3, #1
 800efc4:	b2da      	uxtb	r2, r3
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	60fb      	str	r3, [r7, #12]
 800efd4:	e008      	b.n	800efe8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800efe0:	68b9      	ldr	r1, [r7, #8]
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 f80a 	bl	800effc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1e3      	bne.n	800efb6 <ip_reass_tmr+0x12>
    }
  }
}
 800efee:	bf00      	nop
 800eff0:	bf00      	nop
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	2000852c 	.word	0x2000852c

0800effc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b088      	sub	sp, #32
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f006:	2300      	movs	r3, #0
 800f008:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f00a:	683a      	ldr	r2, [r7, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d105      	bne.n	800f01e <ip_reass_free_complete_datagram+0x22>
 800f012:	4b45      	ldr	r3, [pc, #276]	@ (800f128 <ip_reass_free_complete_datagram+0x12c>)
 800f014:	22ab      	movs	r2, #171	@ 0xab
 800f016:	4945      	ldr	r1, [pc, #276]	@ (800f12c <ip_reass_free_complete_datagram+0x130>)
 800f018:	4845      	ldr	r0, [pc, #276]	@ (800f130 <ip_reass_free_complete_datagram+0x134>)
 800f01a:	f002 faf7 	bl	801160c <iprintf>
  if (prev != NULL) {
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d00a      	beq.n	800f03a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d005      	beq.n	800f03a <ip_reass_free_complete_datagram+0x3e>
 800f02e:	4b3e      	ldr	r3, [pc, #248]	@ (800f128 <ip_reass_free_complete_datagram+0x12c>)
 800f030:	22ad      	movs	r2, #173	@ 0xad
 800f032:	4940      	ldr	r1, [pc, #256]	@ (800f134 <ip_reass_free_complete_datagram+0x138>)
 800f034:	483e      	ldr	r0, [pc, #248]	@ (800f130 <ip_reass_free_complete_datagram+0x134>)
 800f036:	f002 fae9 	bl	801160c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	889b      	ldrh	r3, [r3, #4]
 800f046:	b29b      	uxth	r3, r3
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d12a      	bne.n	800f0a2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	6858      	ldr	r0, [r3, #4]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	3308      	adds	r3, #8
 800f062:	2214      	movs	r2, #20
 800f064:	4619      	mov	r1, r3
 800f066:	f002 fbfc 	bl	8011862 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f06a:	2101      	movs	r1, #1
 800f06c:	69b8      	ldr	r0, [r7, #24]
 800f06e:	f7ff fc47 	bl	800e900 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f072:	69b8      	ldr	r0, [r7, #24]
 800f074:	f7f7 ff2e 	bl	8006ed4 <pbuf_clen>
 800f078:	4603      	mov	r3, r0
 800f07a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f07c:	8bfa      	ldrh	r2, [r7, #30]
 800f07e:	8a7b      	ldrh	r3, [r7, #18]
 800f080:	4413      	add	r3, r2
 800f082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f086:	db05      	blt.n	800f094 <ip_reass_free_complete_datagram+0x98>
 800f088:	4b27      	ldr	r3, [pc, #156]	@ (800f128 <ip_reass_free_complete_datagram+0x12c>)
 800f08a:	22bc      	movs	r2, #188	@ 0xbc
 800f08c:	492a      	ldr	r1, [pc, #168]	@ (800f138 <ip_reass_free_complete_datagram+0x13c>)
 800f08e:	4828      	ldr	r0, [pc, #160]	@ (800f130 <ip_reass_free_complete_datagram+0x134>)
 800f090:	f002 fabc 	bl	801160c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f094:	8bfa      	ldrh	r2, [r7, #30]
 800f096:	8a7b      	ldrh	r3, [r7, #18]
 800f098:	4413      	add	r3, r2
 800f09a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f09c:	69b8      	ldr	r0, [r7, #24]
 800f09e:	f7f7 fe91 	bl	8006dc4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f0a8:	e01f      	b.n	800f0ea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f0aa:	69bb      	ldr	r3, [r7, #24]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f0b0:	69bb      	ldr	r3, [r7, #24]
 800f0b2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f7f7 ff0a 	bl	8006ed4 <pbuf_clen>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f0c4:	8bfa      	ldrh	r2, [r7, #30]
 800f0c6:	8a7b      	ldrh	r3, [r7, #18]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0ce:	db05      	blt.n	800f0dc <ip_reass_free_complete_datagram+0xe0>
 800f0d0:	4b15      	ldr	r3, [pc, #84]	@ (800f128 <ip_reass_free_complete_datagram+0x12c>)
 800f0d2:	22cc      	movs	r2, #204	@ 0xcc
 800f0d4:	4918      	ldr	r1, [pc, #96]	@ (800f138 <ip_reass_free_complete_datagram+0x13c>)
 800f0d6:	4816      	ldr	r0, [pc, #88]	@ (800f130 <ip_reass_free_complete_datagram+0x134>)
 800f0d8:	f002 fa98 	bl	801160c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f0dc:	8bfa      	ldrh	r2, [r7, #30]
 800f0de:	8a7b      	ldrh	r3, [r7, #18]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f0e4:	68f8      	ldr	r0, [r7, #12]
 800f0e6:	f7f7 fe6d 	bl	8006dc4 <pbuf_free>
  while (p != NULL) {
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d1dc      	bne.n	800f0aa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f0f0:	6839      	ldr	r1, [r7, #0]
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 f8c2 	bl	800f27c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f0f8:	4b10      	ldr	r3, [pc, #64]	@ (800f13c <ip_reass_free_complete_datagram+0x140>)
 800f0fa:	881b      	ldrh	r3, [r3, #0]
 800f0fc:	8bfa      	ldrh	r2, [r7, #30]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d905      	bls.n	800f10e <ip_reass_free_complete_datagram+0x112>
 800f102:	4b09      	ldr	r3, [pc, #36]	@ (800f128 <ip_reass_free_complete_datagram+0x12c>)
 800f104:	22d2      	movs	r2, #210	@ 0xd2
 800f106:	490e      	ldr	r1, [pc, #56]	@ (800f140 <ip_reass_free_complete_datagram+0x144>)
 800f108:	4809      	ldr	r0, [pc, #36]	@ (800f130 <ip_reass_free_complete_datagram+0x134>)
 800f10a:	f002 fa7f 	bl	801160c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f10e:	4b0b      	ldr	r3, [pc, #44]	@ (800f13c <ip_reass_free_complete_datagram+0x140>)
 800f110:	881a      	ldrh	r2, [r3, #0]
 800f112:	8bfb      	ldrh	r3, [r7, #30]
 800f114:	1ad3      	subs	r3, r2, r3
 800f116:	b29a      	uxth	r2, r3
 800f118:	4b08      	ldr	r3, [pc, #32]	@ (800f13c <ip_reass_free_complete_datagram+0x140>)
 800f11a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f11c:	8bfb      	ldrh	r3, [r7, #30]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3720      	adds	r7, #32
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	08014f48 	.word	0x08014f48
 800f12c:	08014f84 	.word	0x08014f84
 800f130:	08014f90 	.word	0x08014f90
 800f134:	08014fb8 	.word	0x08014fb8
 800f138:	08014fcc 	.word	0x08014fcc
 800f13c:	20008530 	.word	0x20008530
 800f140:	08014fec 	.word	0x08014fec

0800f144 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b08a      	sub	sp, #40	@ 0x28
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f14e:	2300      	movs	r3, #0
 800f150:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f152:	2300      	movs	r3, #0
 800f154:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f156:	2300      	movs	r3, #0
 800f158:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f15a:	2300      	movs	r3, #0
 800f15c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f162:	4b28      	ldr	r3, [pc, #160]	@ (800f204 <ip_reass_remove_oldest_datagram+0xc0>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f168:	e030      	b.n	800f1cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f16c:	695a      	ldr	r2, [r3, #20]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	429a      	cmp	r2, r3
 800f174:	d10c      	bne.n	800f190 <ip_reass_remove_oldest_datagram+0x4c>
 800f176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f178:	699a      	ldr	r2, [r3, #24]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	691b      	ldr	r3, [r3, #16]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d106      	bne.n	800f190 <ip_reass_remove_oldest_datagram+0x4c>
 800f182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f184:	899a      	ldrh	r2, [r3, #12]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	889b      	ldrh	r3, [r3, #4]
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d014      	beq.n	800f1ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	3301      	adds	r3, #1
 800f194:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f196:	6a3b      	ldr	r3, [r7, #32]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d104      	bne.n	800f1a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	61bb      	str	r3, [r7, #24]
 800f1a4:	e009      	b.n	800f1ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a8:	7fda      	ldrb	r2, [r3, #31]
 800f1aa:	6a3b      	ldr	r3, [r7, #32]
 800f1ac:	7fdb      	ldrb	r3, [r3, #31]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d803      	bhi.n	800f1ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1cb      	bne.n	800f16a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f1d2:	6a3b      	ldr	r3, [r7, #32]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d008      	beq.n	800f1ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f1d8:	69b9      	ldr	r1, [r7, #24]
 800f1da:	6a38      	ldr	r0, [r7, #32]
 800f1dc:	f7ff ff0e 	bl	800effc <ip_reass_free_complete_datagram>
 800f1e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f1e2:	697a      	ldr	r2, [r7, #20]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	4413      	add	r3, r2
 800f1e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f1ea:	697a      	ldr	r2, [r7, #20]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	da02      	bge.n	800f1f8 <ip_reass_remove_oldest_datagram+0xb4>
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	dcac      	bgt.n	800f152 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f1f8:	697b      	ldr	r3, [r7, #20]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3728      	adds	r7, #40	@ 0x28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	2000852c 	.word	0x2000852c

0800f208 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f212:	2004      	movs	r0, #4
 800f214:	f7f6 fef0 	bl	8005ff8 <memp_malloc>
 800f218:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d110      	bne.n	800f242 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f220:	6839      	ldr	r1, [r7, #0]
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f7ff ff8e 	bl	800f144 <ip_reass_remove_oldest_datagram>
 800f228:	4602      	mov	r2, r0
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	4293      	cmp	r3, r2
 800f22e:	dc03      	bgt.n	800f238 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f230:	2004      	movs	r0, #4
 800f232:	f7f6 fee1 	bl	8005ff8 <memp_malloc>
 800f236:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d101      	bne.n	800f242 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f23e:	2300      	movs	r3, #0
 800f240:	e016      	b.n	800f270 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f242:	2220      	movs	r2, #32
 800f244:	2100      	movs	r1, #0
 800f246:	68f8      	ldr	r0, [r7, #12]
 800f248:	f002 fa95 	bl	8011776 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	220f      	movs	r2, #15
 800f250:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f252:	4b09      	ldr	r3, [pc, #36]	@ (800f278 <ip_reass_enqueue_new_datagram+0x70>)
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f25a:	4a07      	ldr	r2, [pc, #28]	@ (800f278 <ip_reass_enqueue_new_datagram+0x70>)
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	3308      	adds	r3, #8
 800f264:	2214      	movs	r2, #20
 800f266:	6879      	ldr	r1, [r7, #4]
 800f268:	4618      	mov	r0, r3
 800f26a:	f002 fafa 	bl	8011862 <memcpy>
  return ipr;
 800f26e:	68fb      	ldr	r3, [r7, #12]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	2000852c 	.word	0x2000852c

0800f27c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f286:	4b10      	ldr	r3, [pc, #64]	@ (800f2c8 <ip_reass_dequeue_datagram+0x4c>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d104      	bne.n	800f29a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a0c      	ldr	r2, [pc, #48]	@ (800f2c8 <ip_reass_dequeue_datagram+0x4c>)
 800f296:	6013      	str	r3, [r2, #0]
 800f298:	e00d      	b.n	800f2b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d106      	bne.n	800f2ae <ip_reass_dequeue_datagram+0x32>
 800f2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800f2cc <ip_reass_dequeue_datagram+0x50>)
 800f2a2:	f240 1245 	movw	r2, #325	@ 0x145
 800f2a6:	490a      	ldr	r1, [pc, #40]	@ (800f2d0 <ip_reass_dequeue_datagram+0x54>)
 800f2a8:	480a      	ldr	r0, [pc, #40]	@ (800f2d4 <ip_reass_dequeue_datagram+0x58>)
 800f2aa:	f002 f9af 	bl	801160c <iprintf>
    prev->next = ipr->next;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f2b6:	6879      	ldr	r1, [r7, #4]
 800f2b8:	2004      	movs	r0, #4
 800f2ba:	f7f6 ff0d 	bl	80060d8 <memp_free>
}
 800f2be:	bf00      	nop
 800f2c0:	3708      	adds	r7, #8
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	2000852c 	.word	0x2000852c
 800f2cc:	08014f48 	.word	0x08014f48
 800f2d0:	08015010 	.word	0x08015010
 800f2d4:	08014f90 	.word	0x08014f90

0800f2d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08c      	sub	sp, #48	@ 0x30
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	885b      	ldrh	r3, [r3, #2]
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7f6 fa05 	bl	8005708 <lwip_htons>
 800f2fe:	4603      	mov	r3, r0
 800f300:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	f003 030f 	and.w	r3, r3, #15
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f310:	7e7b      	ldrb	r3, [r7, #25]
 800f312:	b29b      	uxth	r3, r3
 800f314:	8b7a      	ldrh	r2, [r7, #26]
 800f316:	429a      	cmp	r2, r3
 800f318:	d202      	bcs.n	800f320 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f31a:	f04f 33ff 	mov.w	r3, #4294967295
 800f31e:	e135      	b.n	800f58c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f320:	7e7b      	ldrb	r3, [r7, #25]
 800f322:	b29b      	uxth	r3, r3
 800f324:	8b7a      	ldrh	r2, [r7, #26]
 800f326:	1ad3      	subs	r3, r2, r3
 800f328:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	88db      	ldrh	r3, [r3, #6]
 800f32e:	b29b      	uxth	r3, r3
 800f330:	4618      	mov	r0, r3
 800f332:	f7f6 f9e9 	bl	8005708 <lwip_htons>
 800f336:	4603      	mov	r3, r0
 800f338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	00db      	lsls	r3, r3, #3
 800f340:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800f348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f34a:	2200      	movs	r2, #0
 800f34c:	701a      	strb	r2, [r3, #0]
 800f34e:	2200      	movs	r2, #0
 800f350:	705a      	strb	r2, [r3, #1]
 800f352:	2200      	movs	r2, #0
 800f354:	709a      	strb	r2, [r3, #2]
 800f356:	2200      	movs	r2, #0
 800f358:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f35c:	8afa      	ldrh	r2, [r7, #22]
 800f35e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f360:	8afa      	ldrh	r2, [r7, #22]
 800f362:	8b7b      	ldrh	r3, [r7, #26]
 800f364:	4413      	add	r3, r2
 800f366:	b29a      	uxth	r2, r3
 800f368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f36a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f36e:	88db      	ldrh	r3, [r3, #6]
 800f370:	b29b      	uxth	r3, r3
 800f372:	8afa      	ldrh	r2, [r7, #22]
 800f374:	429a      	cmp	r2, r3
 800f376:	d902      	bls.n	800f37e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f378:	f04f 33ff 	mov.w	r3, #4294967295
 800f37c:	e106      	b.n	800f58c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	627b      	str	r3, [r7, #36]	@ 0x24
 800f384:	e068      	b.n	800f458 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f38e:	889b      	ldrh	r3, [r3, #4]
 800f390:	b29a      	uxth	r2, r3
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	889b      	ldrh	r3, [r3, #4]
 800f396:	b29b      	uxth	r3, r3
 800f398:	429a      	cmp	r2, r3
 800f39a:	d235      	bcs.n	800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f39e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d020      	beq.n	800f3ea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3aa:	889b      	ldrh	r3, [r3, #4]
 800f3ac:	b29a      	uxth	r2, r3
 800f3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b0:	88db      	ldrh	r3, [r3, #6]
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d307      	bcc.n	800f3c8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ba:	88db      	ldrh	r3, [r3, #6]
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	889b      	ldrh	r3, [r3, #4]
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d902      	bls.n	800f3ce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3cc:	e0de      	b.n	800f58c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d0:	68ba      	ldr	r2, [r7, #8]
 800f3d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d6:	88db      	ldrh	r3, [r3, #6]
 800f3d8:	b29a      	uxth	r2, r3
 800f3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3dc:	889b      	ldrh	r3, [r3, #4]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d03d      	beq.n	800f460 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f3e8:	e03a      	b.n	800f460 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ec:	88db      	ldrh	r3, [r3, #6]
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	889b      	ldrh	r3, [r3, #4]
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d902      	bls.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f3fe:	e0c5      	b.n	800f58c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	68ba      	ldr	r2, [r7, #8]
 800f404:	605a      	str	r2, [r3, #4]
      break;
 800f406:	e02b      	b.n	800f460 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f40a:	889b      	ldrh	r3, [r3, #4]
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	889b      	ldrh	r3, [r3, #4]
 800f412:	b29b      	uxth	r3, r3
 800f414:	429a      	cmp	r2, r3
 800f416:	d102      	bne.n	800f41e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f418:	f04f 33ff 	mov.w	r3, #4294967295
 800f41c:	e0b6      	b.n	800f58c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f420:	889b      	ldrh	r3, [r3, #4]
 800f422:	b29a      	uxth	r2, r3
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	88db      	ldrh	r3, [r3, #6]
 800f428:	b29b      	uxth	r3, r3
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d202      	bcs.n	800f434 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f42e:	f04f 33ff 	mov.w	r3, #4294967295
 800f432:	e0ab      	b.n	800f58c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f436:	2b00      	cmp	r3, #0
 800f438:	d009      	beq.n	800f44e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f43c:	88db      	ldrh	r3, [r3, #6]
 800f43e:	b29a      	uxth	r2, r3
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	889b      	ldrh	r3, [r3, #4]
 800f444:	b29b      	uxth	r3, r3
 800f446:	429a      	cmp	r2, r3
 800f448:	d001      	beq.n	800f44e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f44a:	2300      	movs	r3, #0
 800f44c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800f458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d193      	bne.n	800f386 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f45e:	e000      	b.n	800f462 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f460:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f464:	2b00      	cmp	r3, #0
 800f466:	d12d      	bne.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d01c      	beq.n	800f4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f470:	88db      	ldrh	r3, [r3, #6]
 800f472:	b29a      	uxth	r2, r3
 800f474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f476:	889b      	ldrh	r3, [r3, #4]
 800f478:	b29b      	uxth	r3, r3
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d906      	bls.n	800f48c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f47e:	4b45      	ldr	r3, [pc, #276]	@ (800f594 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f480:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800f484:	4944      	ldr	r1, [pc, #272]	@ (800f598 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f486:	4845      	ldr	r0, [pc, #276]	@ (800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f488:	f002 f8c0 	bl	801160c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f48e:	68ba      	ldr	r2, [r7, #8]
 800f490:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f494:	88db      	ldrh	r3, [r3, #6]
 800f496:	b29a      	uxth	r2, r3
 800f498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f49a:	889b      	ldrh	r3, [r3, #4]
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d010      	beq.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	623b      	str	r3, [r7, #32]
 800f4a6:	e00d      	b.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d006      	beq.n	800f4be <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f4b0:	4b38      	ldr	r3, [pc, #224]	@ (800f594 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f4b2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800f4b6:	493a      	ldr	r1, [pc, #232]	@ (800f5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f4b8:	4838      	ldr	r0, [pc, #224]	@ (800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f4ba:	f002 f8a7 	bl	801160c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	68ba      	ldr	r2, [r7, #8]
 800f4c2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d105      	bne.n	800f4d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	7f9b      	ldrb	r3, [r3, #30]
 800f4ce:	f003 0301 	and.w	r3, r3, #1
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d059      	beq.n	800f58a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f4d6:	6a3b      	ldr	r3, [r7, #32]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d04f      	beq.n	800f57c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d006      	beq.n	800f4f2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	685b      	ldr	r3, [r3, #4]
 800f4ea:	889b      	ldrh	r3, [r3, #4]
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d002      	beq.n	800f4f8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	623b      	str	r3, [r7, #32]
 800f4f6:	e041      	b.n	800f57c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4fa:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800f4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f502:	e012      	b.n	800f52a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800f50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f50c:	88db      	ldrh	r3, [r3, #6]
 800f50e:	b29a      	uxth	r2, r3
 800f510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f512:	889b      	ldrh	r3, [r3, #4]
 800f514:	b29b      	uxth	r3, r3
 800f516:	429a      	cmp	r2, r3
 800f518:	d002      	beq.n	800f520 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f51a:	2300      	movs	r3, #0
 800f51c:	623b      	str	r3, [r7, #32]
            break;
 800f51e:	e007      	b.n	800f530 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f522:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800f524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d1e9      	bne.n	800f504 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f530:	6a3b      	ldr	r3, [r7, #32]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d022      	beq.n	800f57c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d106      	bne.n	800f54c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f53e:	4b15      	ldr	r3, [pc, #84]	@ (800f594 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f540:	f240 12df 	movw	r2, #479	@ 0x1df
 800f544:	4917      	ldr	r1, [pc, #92]	@ (800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f546:	4815      	ldr	r0, [pc, #84]	@ (800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f548:	f002 f860 	bl	801160c <iprintf>
          LWIP_ASSERT("sanity check",
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f554:	429a      	cmp	r2, r3
 800f556:	d106      	bne.n	800f566 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f558:	4b0e      	ldr	r3, [pc, #56]	@ (800f594 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f55a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f55e:	4911      	ldr	r1, [pc, #68]	@ (800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f560:	480e      	ldr	r0, [pc, #56]	@ (800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f562:	f002 f853 	bl	801160c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d006      	beq.n	800f57c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f56e:	4b09      	ldr	r3, [pc, #36]	@ (800f594 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f570:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800f574:	490c      	ldr	r1, [pc, #48]	@ (800f5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f576:	4809      	ldr	r0, [pc, #36]	@ (800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f578:	f002 f848 	bl	801160c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	bf14      	ite	ne
 800f582:	2301      	movne	r3, #1
 800f584:	2300      	moveq	r3, #0
 800f586:	b2db      	uxtb	r3, r3
 800f588:	e000      	b.n	800f58c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3730      	adds	r7, #48	@ 0x30
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	08014f48 	.word	0x08014f48
 800f598:	0801502c 	.word	0x0801502c
 800f59c:	08014f90 	.word	0x08014f90
 800f5a0:	0801504c 	.word	0x0801504c
 800f5a4:	08015084 	.word	0x08015084
 800f5a8:	08015094 	.word	0x08015094

0800f5ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b08e      	sub	sp, #56	@ 0x38
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	f003 030f 	and.w	r3, r3, #15
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	2b14      	cmp	r3, #20
 800f5ca:	f040 8171 	bne.w	800f8b0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5d0:	88db      	ldrh	r3, [r3, #6]
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7f6 f897 	bl	8005708 <lwip_htons>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	00db      	lsls	r3, r3, #3
 800f5e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e8:	885b      	ldrh	r3, [r3, #2]
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7f6 f88b 	bl	8005708 <lwip_htons>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	f003 030f 	and.w	r3, r3, #15
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800f606:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f60e:	429a      	cmp	r2, r3
 800f610:	f0c0 8150 	bcc.w	800f8b4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f614:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f618:	b29b      	uxth	r3, r3
 800f61a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f61c:	1ad3      	subs	r3, r2, r3
 800f61e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7f7 fc57 	bl	8006ed4 <pbuf_clen>
 800f626:	4603      	mov	r3, r0
 800f628:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f62a:	4b8c      	ldr	r3, [pc, #560]	@ (800f85c <ip4_reass+0x2b0>)
 800f62c:	881b      	ldrh	r3, [r3, #0]
 800f62e:	461a      	mov	r2, r3
 800f630:	8c3b      	ldrh	r3, [r7, #32]
 800f632:	4413      	add	r3, r2
 800f634:	2b0a      	cmp	r3, #10
 800f636:	dd10      	ble.n	800f65a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f638:	8c3b      	ldrh	r3, [r7, #32]
 800f63a:	4619      	mov	r1, r3
 800f63c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f63e:	f7ff fd81 	bl	800f144 <ip_reass_remove_oldest_datagram>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	f000 8137 	beq.w	800f8b8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f64a:	4b84      	ldr	r3, [pc, #528]	@ (800f85c <ip4_reass+0x2b0>)
 800f64c:	881b      	ldrh	r3, [r3, #0]
 800f64e:	461a      	mov	r2, r3
 800f650:	8c3b      	ldrh	r3, [r7, #32]
 800f652:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f654:	2b0a      	cmp	r3, #10
 800f656:	f300 812f 	bgt.w	800f8b8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f65a:	4b81      	ldr	r3, [pc, #516]	@ (800f860 <ip4_reass+0x2b4>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f660:	e015      	b.n	800f68e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f664:	695a      	ldr	r2, [r3, #20]
 800f666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d10c      	bne.n	800f688 <ip4_reass+0xdc>
 800f66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f670:	699a      	ldr	r2, [r3, #24]
 800f672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f674:	691b      	ldr	r3, [r3, #16]
 800f676:	429a      	cmp	r2, r3
 800f678:	d106      	bne.n	800f688 <ip4_reass+0xdc>
 800f67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f67c:	899a      	ldrh	r2, [r3, #12]
 800f67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f680:	889b      	ldrh	r3, [r3, #4]
 800f682:	b29b      	uxth	r3, r3
 800f684:	429a      	cmp	r2, r3
 800f686:	d006      	beq.n	800f696 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1e6      	bne.n	800f662 <ip4_reass+0xb6>
 800f694:	e000      	b.n	800f698 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f696:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d109      	bne.n	800f6b2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f69e:	8c3b      	ldrh	r3, [r7, #32]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6a4:	f7ff fdb0 	bl	800f208 <ip_reass_enqueue_new_datagram>
 800f6a8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d11c      	bne.n	800f6ea <ip4_reass+0x13e>
      goto nullreturn;
 800f6b0:	e105      	b.n	800f8be <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6b4:	88db      	ldrh	r3, [r3, #6]
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7f6 f825 	bl	8005708 <lwip_htons>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d110      	bne.n	800f6ea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ca:	89db      	ldrh	r3, [r3, #14]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7f6 f81b 	bl	8005708 <lwip_htons>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d006      	beq.n	800f6ea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6de:	3308      	adds	r3, #8
 800f6e0:	2214      	movs	r2, #20
 800f6e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f002 f8bc 	bl	8011862 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ec:	88db      	ldrh	r3, [r3, #6]
 800f6ee:	b29b      	uxth	r3, r3
 800f6f0:	f003 0320 	and.w	r3, r3, #32
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	bf0c      	ite	eq
 800f6f8:	2301      	moveq	r3, #1
 800f6fa:	2300      	movne	r3, #0
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00e      	beq.n	800f724 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f706:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f708:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f70a:	4413      	add	r3, r2
 800f70c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f70e:	8b7a      	ldrh	r2, [r7, #26]
 800f710:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f712:	429a      	cmp	r2, r3
 800f714:	f0c0 80a0 	bcc.w	800f858 <ip4_reass+0x2ac>
 800f718:	8b7b      	ldrh	r3, [r7, #26]
 800f71a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800f71e:	4293      	cmp	r3, r2
 800f720:	f200 809a 	bhi.w	800f858 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f724:	69fa      	ldr	r2, [r7, #28]
 800f726:	6879      	ldr	r1, [r7, #4]
 800f728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f72a:	f7ff fdd5 	bl	800f2d8 <ip_reass_chain_frag_into_datagram_and_validate>
 800f72e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f736:	f000 809b 	beq.w	800f870 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f73a:	4b48      	ldr	r3, [pc, #288]	@ (800f85c <ip4_reass+0x2b0>)
 800f73c:	881a      	ldrh	r2, [r3, #0]
 800f73e:	8c3b      	ldrh	r3, [r7, #32]
 800f740:	4413      	add	r3, r2
 800f742:	b29a      	uxth	r2, r3
 800f744:	4b45      	ldr	r3, [pc, #276]	@ (800f85c <ip4_reass+0x2b0>)
 800f746:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00d      	beq.n	800f76a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f74e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f750:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f752:	4413      	add	r3, r2
 800f754:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f758:	8a7a      	ldrh	r2, [r7, #18]
 800f75a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f75e:	7f9b      	ldrb	r3, [r3, #30]
 800f760:	f043 0301 	orr.w	r3, r3, #1
 800f764:	b2da      	uxtb	r2, r3
 800f766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f768:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d171      	bne.n	800f854 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f772:	8b9b      	ldrh	r3, [r3, #28]
 800f774:	3314      	adds	r3, #20
 800f776:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f78c:	3308      	adds	r3, #8
 800f78e:	2214      	movs	r2, #20
 800f790:	4619      	mov	r1, r3
 800f792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f794:	f002 f865 	bl	8011862 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f798:	8a3b      	ldrh	r3, [r7, #16]
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7f5 ffb4 	bl	8005708 <lwip_htons>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7a6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	719a      	strb	r2, [r3, #6]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	729a      	strb	r2, [r3, #10]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f7c2:	e00d      	b.n	800f7e0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f7c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f7ca:	2114      	movs	r1, #20
 800f7cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f7ce:	f7f7 fa73 	bl	8006cb8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f7d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7f7 fbb7 	bl	8006f48 <pbuf_cat>
      r = iprh->next_pbuf;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800f7e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1ee      	bne.n	800f7c4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f7e6:	4b1e      	ldr	r3, [pc, #120]	@ (800f860 <ip4_reass+0x2b4>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d102      	bne.n	800f7f6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f7f4:	e010      	b.n	800f818 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f7f6:	4b1a      	ldr	r3, [pc, #104]	@ (800f860 <ip4_reass+0x2b4>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f7fc:	e007      	b.n	800f80e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f804:	429a      	cmp	r2, r3
 800f806:	d006      	beq.n	800f816 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f810:	2b00      	cmp	r3, #0
 800f812:	d1f4      	bne.n	800f7fe <ip4_reass+0x252>
 800f814:	e000      	b.n	800f818 <ip4_reass+0x26c>
          break;
 800f816:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f818:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f81a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f81c:	f7ff fd2e 	bl	800f27c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f7f7 fb57 	bl	8006ed4 <pbuf_clen>
 800f826:	4603      	mov	r3, r0
 800f828:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f82a:	4b0c      	ldr	r3, [pc, #48]	@ (800f85c <ip4_reass+0x2b0>)
 800f82c:	881b      	ldrh	r3, [r3, #0]
 800f82e:	8c3a      	ldrh	r2, [r7, #32]
 800f830:	429a      	cmp	r2, r3
 800f832:	d906      	bls.n	800f842 <ip4_reass+0x296>
 800f834:	4b0b      	ldr	r3, [pc, #44]	@ (800f864 <ip4_reass+0x2b8>)
 800f836:	f240 229b 	movw	r2, #667	@ 0x29b
 800f83a:	490b      	ldr	r1, [pc, #44]	@ (800f868 <ip4_reass+0x2bc>)
 800f83c:	480b      	ldr	r0, [pc, #44]	@ (800f86c <ip4_reass+0x2c0>)
 800f83e:	f001 fee5 	bl	801160c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f842:	4b06      	ldr	r3, [pc, #24]	@ (800f85c <ip4_reass+0x2b0>)
 800f844:	881a      	ldrh	r2, [r3, #0]
 800f846:	8c3b      	ldrh	r3, [r7, #32]
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	4b03      	ldr	r3, [pc, #12]	@ (800f85c <ip4_reass+0x2b0>)
 800f84e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	e038      	b.n	800f8c6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f854:	2300      	movs	r3, #0
 800f856:	e036      	b.n	800f8c6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f858:	bf00      	nop
 800f85a:	e00a      	b.n	800f872 <ip4_reass+0x2c6>
 800f85c:	20008530 	.word	0x20008530
 800f860:	2000852c 	.word	0x2000852c
 800f864:	08014f48 	.word	0x08014f48
 800f868:	080150b8 	.word	0x080150b8
 800f86c:	08014f90 	.word	0x08014f90
    goto nullreturn_ipr;
 800f870:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f874:	2b00      	cmp	r3, #0
 800f876:	d106      	bne.n	800f886 <ip4_reass+0x2da>
 800f878:	4b15      	ldr	r3, [pc, #84]	@ (800f8d0 <ip4_reass+0x324>)
 800f87a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800f87e:	4915      	ldr	r1, [pc, #84]	@ (800f8d4 <ip4_reass+0x328>)
 800f880:	4815      	ldr	r0, [pc, #84]	@ (800f8d8 <ip4_reass+0x32c>)
 800f882:	f001 fec3 	bl	801160c <iprintf>
  if (ipr->p == NULL) {
 800f886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d116      	bne.n	800f8bc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f88e:	4b13      	ldr	r3, [pc, #76]	@ (800f8dc <ip4_reass+0x330>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f894:	429a      	cmp	r2, r3
 800f896:	d006      	beq.n	800f8a6 <ip4_reass+0x2fa>
 800f898:	4b0d      	ldr	r3, [pc, #52]	@ (800f8d0 <ip4_reass+0x324>)
 800f89a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f89e:	4910      	ldr	r1, [pc, #64]	@ (800f8e0 <ip4_reass+0x334>)
 800f8a0:	480d      	ldr	r0, [pc, #52]	@ (800f8d8 <ip4_reass+0x32c>)
 800f8a2:	f001 feb3 	bl	801160c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f8a6:	2100      	movs	r1, #0
 800f8a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f8aa:	f7ff fce7 	bl	800f27c <ip_reass_dequeue_datagram>
 800f8ae:	e006      	b.n	800f8be <ip4_reass+0x312>
    goto nullreturn;
 800f8b0:	bf00      	nop
 800f8b2:	e004      	b.n	800f8be <ip4_reass+0x312>
    goto nullreturn;
 800f8b4:	bf00      	nop
 800f8b6:	e002      	b.n	800f8be <ip4_reass+0x312>
      goto nullreturn;
 800f8b8:	bf00      	nop
 800f8ba:	e000      	b.n	800f8be <ip4_reass+0x312>
  }

nullreturn:
 800f8bc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7f7 fa80 	bl	8006dc4 <pbuf_free>
  return NULL;
 800f8c4:	2300      	movs	r3, #0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3738      	adds	r7, #56	@ 0x38
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	08014f48 	.word	0x08014f48
 800f8d4:	080150d4 	.word	0x080150d4
 800f8d8:	08014f90 	.word	0x08014f90
 800f8dc:	2000852c 	.word	0x2000852c
 800f8e0:	080150e0 	.word	0x080150e0

0800f8e4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f8e8:	2005      	movs	r0, #5
 800f8ea:	f7f6 fb85 	bl	8005ff8 <memp_malloc>
 800f8ee:	4603      	mov	r3, r0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d106      	bne.n	800f910 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f902:	4b07      	ldr	r3, [pc, #28]	@ (800f920 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f904:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800f908:	4906      	ldr	r1, [pc, #24]	@ (800f924 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f90a:	4807      	ldr	r0, [pc, #28]	@ (800f928 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f90c:	f001 fe7e 	bl	801160c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f910:	6879      	ldr	r1, [r7, #4]
 800f912:	2005      	movs	r0, #5
 800f914:	f7f6 fbe0 	bl	80060d8 <memp_free>
}
 800f918:	bf00      	nop
 800f91a:	3708      	adds	r7, #8
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	08014f48 	.word	0x08014f48
 800f924:	08015100 	.word	0x08015100
 800f928:	08014f90 	.word	0x08014f90

0800f92c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d106      	bne.n	800f94c <ipfrag_free_pbuf_custom+0x20>
 800f93e:	4b11      	ldr	r3, [pc, #68]	@ (800f984 <ipfrag_free_pbuf_custom+0x58>)
 800f940:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800f944:	4910      	ldr	r1, [pc, #64]	@ (800f988 <ipfrag_free_pbuf_custom+0x5c>)
 800f946:	4811      	ldr	r0, [pc, #68]	@ (800f98c <ipfrag_free_pbuf_custom+0x60>)
 800f948:	f001 fe60 	bl	801160c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f94c:	68fa      	ldr	r2, [r7, #12]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	429a      	cmp	r2, r3
 800f952:	d006      	beq.n	800f962 <ipfrag_free_pbuf_custom+0x36>
 800f954:	4b0b      	ldr	r3, [pc, #44]	@ (800f984 <ipfrag_free_pbuf_custom+0x58>)
 800f956:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800f95a:	490d      	ldr	r1, [pc, #52]	@ (800f990 <ipfrag_free_pbuf_custom+0x64>)
 800f95c:	480b      	ldr	r0, [pc, #44]	@ (800f98c <ipfrag_free_pbuf_custom+0x60>)
 800f95e:	f001 fe55 	bl	801160c <iprintf>
  if (pcr->original != NULL) {
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	695b      	ldr	r3, [r3, #20]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d004      	beq.n	800f974 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	695b      	ldr	r3, [r3, #20]
 800f96e:	4618      	mov	r0, r3
 800f970:	f7f7 fa28 	bl	8006dc4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f7ff ffbd 	bl	800f8f4 <ip_frag_free_pbuf_custom_ref>
}
 800f97a:	bf00      	nop
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	08014f48 	.word	0x08014f48
 800f988:	0801510c 	.word	0x0801510c
 800f98c:	08014f90 	.word	0x08014f90
 800f990:	08015118 	.word	0x08015118

0800f994 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b094      	sub	sp, #80	@ 0x50
 800f998:	af02      	add	r7, sp, #8
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f9aa:	3b14      	subs	r3, #20
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	da00      	bge.n	800f9b2 <ip4_frag+0x1e>
 800f9b0:	3307      	adds	r3, #7
 800f9b2:	10db      	asrs	r3, r3, #3
 800f9b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f9b6:	2314      	movs	r3, #20
 800f9b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800f9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9c2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	f003 030f 	and.w	r3, r3, #15
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	2b14      	cmp	r3, #20
 800f9d4:	d002      	beq.n	800f9dc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f9d6:	f06f 0305 	mvn.w	r3, #5
 800f9da:	e110      	b.n	800fbfe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	895b      	ldrh	r3, [r3, #10]
 800f9e0:	2b13      	cmp	r3, #19
 800f9e2:	d809      	bhi.n	800f9f8 <ip4_frag+0x64>
 800f9e4:	4b88      	ldr	r3, [pc, #544]	@ (800fc08 <ip4_frag+0x274>)
 800f9e6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800f9ea:	4988      	ldr	r1, [pc, #544]	@ (800fc0c <ip4_frag+0x278>)
 800f9ec:	4888      	ldr	r0, [pc, #544]	@ (800fc10 <ip4_frag+0x27c>)
 800f9ee:	f001 fe0d 	bl	801160c <iprintf>
 800f9f2:	f06f 0305 	mvn.w	r3, #5
 800f9f6:	e102      	b.n	800fbfe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9fa:	88db      	ldrh	r3, [r3, #6]
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7f5 fe82 	bl	8005708 <lwip_htons>
 800fa04:	4603      	mov	r3, r0
 800fa06:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800fa08:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fa0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa0e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fa12:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fa14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fa18:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	891b      	ldrh	r3, [r3, #8]
 800fa1e:	3b14      	subs	r3, #20
 800fa20:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800fa24:	e0e1      	b.n	800fbea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fa26:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fa28:	00db      	lsls	r3, r3, #3
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fa30:	4293      	cmp	r3, r2
 800fa32:	bf28      	it	cs
 800fa34:	4613      	movcs	r3, r2
 800fa36:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fa38:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fa3c:	2114      	movs	r1, #20
 800fa3e:	200e      	movs	r0, #14
 800fa40:	f7f6 fedc 	bl	80067fc <pbuf_alloc>
 800fa44:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800fa46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 80d5 	beq.w	800fbf8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa50:	895b      	ldrh	r3, [r3, #10]
 800fa52:	2b13      	cmp	r3, #19
 800fa54:	d806      	bhi.n	800fa64 <ip4_frag+0xd0>
 800fa56:	4b6c      	ldr	r3, [pc, #432]	@ (800fc08 <ip4_frag+0x274>)
 800fa58:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800fa5c:	496d      	ldr	r1, [pc, #436]	@ (800fc14 <ip4_frag+0x280>)
 800fa5e:	486c      	ldr	r0, [pc, #432]	@ (800fc10 <ip4_frag+0x27c>)
 800fa60:	f001 fdd4 	bl	801160c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	2214      	movs	r2, #20
 800fa6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f001 fef8 	bl	8011862 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800fa78:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fa7a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800fa7e:	e064      	b.n	800fb4a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	895a      	ldrh	r2, [r3, #10]
 800fa84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fa86:	1ad3      	subs	r3, r2, r3
 800fa88:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	895b      	ldrh	r3, [r3, #10]
 800fa8e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d906      	bls.n	800faa2 <ip4_frag+0x10e>
 800fa94:	4b5c      	ldr	r3, [pc, #368]	@ (800fc08 <ip4_frag+0x274>)
 800fa96:	f240 322d 	movw	r2, #813	@ 0x32d
 800fa9a:	495f      	ldr	r1, [pc, #380]	@ (800fc18 <ip4_frag+0x284>)
 800fa9c:	485c      	ldr	r0, [pc, #368]	@ (800fc10 <ip4_frag+0x27c>)
 800fa9e:	f001 fdb5 	bl	801160c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800faa2:	8bfa      	ldrh	r2, [r7, #30]
 800faa4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800faa8:	4293      	cmp	r3, r2
 800faaa:	bf28      	it	cs
 800faac:	4613      	movcs	r3, r2
 800faae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fab2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d105      	bne.n	800fac6 <ip4_frag+0x132>
        poff = 0;
 800faba:	2300      	movs	r3, #0
 800fabc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	60fb      	str	r3, [r7, #12]
        continue;
 800fac4:	e041      	b.n	800fb4a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fac6:	f7ff ff0d 	bl	800f8e4 <ip_frag_alloc_pbuf_custom_ref>
 800faca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800facc:	69bb      	ldr	r3, [r7, #24]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d103      	bne.n	800fada <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fad2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fad4:	f7f7 f976 	bl	8006dc4 <pbuf_free>
        goto memerr;
 800fad8:	e08f      	b.n	800fbfa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fada:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fae0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fae2:	4413      	add	r3, r2
 800fae4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800fae8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800faec:	9201      	str	r2, [sp, #4]
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	4603      	mov	r3, r0
 800faf2:	2241      	movs	r2, #65	@ 0x41
 800faf4:	2000      	movs	r0, #0
 800faf6:	f7f6 ffab 	bl	8006a50 <pbuf_alloced_custom>
 800fafa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d106      	bne.n	800fb10 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fb02:	69b8      	ldr	r0, [r7, #24]
 800fb04:	f7ff fef6 	bl	800f8f4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fb08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fb0a:	f7f7 f95b 	bl	8006dc4 <pbuf_free>
        goto memerr;
 800fb0e:	e074      	b.n	800fbfa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f7f7 f9f7 	bl	8006f04 <pbuf_ref>
      pcr->original = p;
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	68fa      	ldr	r2, [r7, #12]
 800fb1a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	4a3f      	ldr	r2, [pc, #252]	@ (800fc1c <ip4_frag+0x288>)
 800fb20:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fb22:	6979      	ldr	r1, [r7, #20]
 800fb24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fb26:	f7f7 fa0f 	bl	8006f48 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fb2a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800fb2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fb32:	1ad3      	subs	r3, r2, r3
 800fb34:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800fb38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d004      	beq.n	800fb4a <ip4_frag+0x1b6>
        poff = 0;
 800fb40:	2300      	movs	r3, #0
 800fb42:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fb4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d196      	bne.n	800fa80 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fb52:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800fb54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fb58:	4413      	add	r3, r2
 800fb5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fb60:	f1a3 0213 	sub.w	r2, r3, #19
 800fb64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	bfcc      	ite	gt
 800fb6c:	2301      	movgt	r3, #1
 800fb6e:	2300      	movle	r3, #0
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fb74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800fb78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb7c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800fb7e:	6a3b      	ldr	r3, [r7, #32]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d002      	beq.n	800fb8a <ip4_frag+0x1f6>
 800fb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d003      	beq.n	800fb92 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fb8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fb8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fb90:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fb92:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7f5 fdb7 	bl	8005708 <lwip_htons>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fba2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fba4:	3314      	adds	r3, #20
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7f5 fdad 	bl	8005708 <lwip_htons>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb8:	2200      	movs	r2, #0
 800fbba:	729a      	strb	r2, [r3, #10]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	695b      	ldr	r3, [r3, #20]
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fbc8:	68b8      	ldr	r0, [r7, #8]
 800fbca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fbcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fbce:	f7f7 f8f9 	bl	8006dc4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fbd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fbd6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800fbde:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800fbe2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fbe4:	4413      	add	r3, r2
 800fbe6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800fbea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	f47f af19 	bne.w	800fa26 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	e002      	b.n	800fbfe <ip4_frag+0x26a>
      goto memerr;
 800fbf8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fbfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3748      	adds	r7, #72	@ 0x48
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	08014f48 	.word	0x08014f48
 800fc0c:	08015124 	.word	0x08015124
 800fc10:	08014f90 	.word	0x08014f90
 800fc14:	08015140 	.word	0x08015140
 800fc18:	08015160 	.word	0x08015160
 800fc1c:	0800f92d 	.word	0x0800f92d

0800fc20 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b086      	sub	sp, #24
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fc2a:	230e      	movs	r3, #14
 800fc2c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	895b      	ldrh	r3, [r3, #10]
 800fc32:	2b0e      	cmp	r3, #14
 800fc34:	d96e      	bls.n	800fd14 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	7bdb      	ldrb	r3, [r3, #15]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d106      	bne.n	800fc4c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fc44:	3301      	adds	r3, #1
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	7b1a      	ldrb	r2, [r3, #12]
 800fc56:	7b5b      	ldrb	r3, [r3, #13]
 800fc58:	021b      	lsls	r3, r3, #8
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	f003 0301 	and.w	r3, r3, #1
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d023      	beq.n	800fcb2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d10f      	bne.n	800fc92 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	785b      	ldrb	r3, [r3, #1]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d11b      	bne.n	800fcb2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fc7e:	2b5e      	cmp	r3, #94	@ 0x5e
 800fc80:	d117      	bne.n	800fcb2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	7b5b      	ldrb	r3, [r3, #13]
 800fc86:	f043 0310 	orr.w	r3, r3, #16
 800fc8a:	b2da      	uxtb	r2, r3
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	735a      	strb	r2, [r3, #13]
 800fc90:	e00f      	b.n	800fcb2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	2206      	movs	r2, #6
 800fc96:	4928      	ldr	r1, [pc, #160]	@ (800fd38 <ethernet_input+0x118>)
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f001 fd42 	bl	8011722 <memcmp>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d106      	bne.n	800fcb2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	7b5b      	ldrb	r3, [r3, #13]
 800fca8:	f043 0308 	orr.w	r3, r3, #8
 800fcac:	b2da      	uxtb	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fcb2:	89fb      	ldrh	r3, [r7, #14]
 800fcb4:	2b08      	cmp	r3, #8
 800fcb6:	d003      	beq.n	800fcc0 <ethernet_input+0xa0>
 800fcb8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800fcbc:	d014      	beq.n	800fce8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fcbe:	e032      	b.n	800fd26 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fcc6:	f003 0308 	and.w	r3, r3, #8
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d024      	beq.n	800fd18 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fcce:	8afb      	ldrh	r3, [r7, #22]
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f7f6 fff0 	bl	8006cb8 <pbuf_remove_header>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d11e      	bne.n	800fd1c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fcde:	6839      	ldr	r1, [r7, #0]
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7fe ff21 	bl	800eb28 <ip4_input>
      break;
 800fce6:	e013      	b.n	800fd10 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fcee:	f003 0308 	and.w	r3, r3, #8
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d014      	beq.n	800fd20 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fcf6:	8afb      	ldrh	r3, [r7, #22]
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f7f6 ffdc 	bl	8006cb8 <pbuf_remove_header>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d10e      	bne.n	800fd24 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fd06:	6839      	ldr	r1, [r7, #0]
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f7fe f8c1 	bl	800de90 <etharp_input>
      break;
 800fd0e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fd10:	2300      	movs	r3, #0
 800fd12:	e00c      	b.n	800fd2e <ethernet_input+0x10e>
    goto free_and_return;
 800fd14:	bf00      	nop
 800fd16:	e006      	b.n	800fd26 <ethernet_input+0x106>
        goto free_and_return;
 800fd18:	bf00      	nop
 800fd1a:	e004      	b.n	800fd26 <ethernet_input+0x106>
        goto free_and_return;
 800fd1c:	bf00      	nop
 800fd1e:	e002      	b.n	800fd26 <ethernet_input+0x106>
        goto free_and_return;
 800fd20:	bf00      	nop
 800fd22:	e000      	b.n	800fd26 <ethernet_input+0x106>
        goto free_and_return;
 800fd24:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f7f7 f84c 	bl	8006dc4 <pbuf_free>
  return ERR_OK;
 800fd2c:	2300      	movs	r3, #0
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3718      	adds	r7, #24
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	08015450 	.word	0x08015450

0800fd3c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b086      	sub	sp, #24
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
 800fd48:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fd4a:	8c3b      	ldrh	r3, [r7, #32]
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7f5 fcdb 	bl	8005708 <lwip_htons>
 800fd52:	4603      	mov	r3, r0
 800fd54:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fd56:	210e      	movs	r1, #14
 800fd58:	68b8      	ldr	r0, [r7, #8]
 800fd5a:	f7f6 ff9d 	bl	8006c98 <pbuf_add_header>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d125      	bne.n	800fdb0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	685b      	ldr	r3, [r3, #4]
 800fd68:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	8afa      	ldrh	r2, [r7, #22]
 800fd6e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	2206      	movs	r2, #6
 800fd74:	6839      	ldr	r1, [r7, #0]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f001 fd73 	bl	8011862 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	3306      	adds	r3, #6
 800fd80:	2206      	movs	r2, #6
 800fd82:	6879      	ldr	r1, [r7, #4]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f001 fd6c 	bl	8011862 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fd90:	2b06      	cmp	r3, #6
 800fd92:	d006      	beq.n	800fda2 <ethernet_output+0x66>
 800fd94:	4b0a      	ldr	r3, [pc, #40]	@ (800fdc0 <ethernet_output+0x84>)
 800fd96:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800fd9a:	490a      	ldr	r1, [pc, #40]	@ (800fdc4 <ethernet_output+0x88>)
 800fd9c:	480a      	ldr	r0, [pc, #40]	@ (800fdc8 <ethernet_output+0x8c>)
 800fd9e:	f001 fc35 	bl	801160c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	699b      	ldr	r3, [r3, #24]
 800fda6:	68b9      	ldr	r1, [r7, #8]
 800fda8:	68f8      	ldr	r0, [r7, #12]
 800fdaa:	4798      	blx	r3
 800fdac:	4603      	mov	r3, r0
 800fdae:	e002      	b.n	800fdb6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fdb0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fdb2:	f06f 0301 	mvn.w	r3, #1
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3718      	adds	r7, #24
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	08015170 	.word	0x08015170
 800fdc4:	080151a8 	.word	0x080151a8
 800fdc8:	080151dc 	.word	0x080151dc

0800fdcc <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b086      	sub	sp, #24
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	881b      	ldrh	r3, [r3, #0]
 800fdde:	2b05      	cmp	r3, #5
 800fde0:	d16a      	bne.n	800feb8 <eMBFuncReadCoils+0xec>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	3301      	adds	r3, #1
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	021b      	lsls	r3, r3, #8
 800fdea:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	3302      	adds	r3, #2
 800fdf0:	781b      	ldrb	r3, [r3, #0]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	8abb      	ldrh	r3, [r7, #20]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800fdfa:	8abb      	ldrh	r3, [r7, #20]
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	3303      	adds	r3, #3
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	021b      	lsls	r3, r3, #8
 800fe08:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	3304      	adds	r3, #4
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	461a      	mov	r2, r3
 800fe12:	8a7b      	ldrh	r3, [r7, #18]
 800fe14:	4313      	orrs	r3, r2
 800fe16:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 800fe18:	8a7b      	ldrh	r3, [r7, #18]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d049      	beq.n	800feb2 <eMBFuncReadCoils+0xe6>
 800fe1e:	8a7b      	ldrh	r3, [r7, #18]
 800fe20:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800fe24:	d245      	bcs.n	800feb2 <eMBFuncReadCoils+0xe6>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	1c5a      	adds	r2, r3, #1
 800fe34:	60fa      	str	r2, [r7, #12]
 800fe36:	2201      	movs	r2, #1
 800fe38:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	881b      	ldrh	r3, [r3, #0]
 800fe3e:	3301      	adds	r3, #1
 800fe40:	b29a      	uxth	r2, r3
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 800fe46:	8a7b      	ldrh	r3, [r7, #18]
 800fe48:	f003 0307 	and.w	r3, r3, #7
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d006      	beq.n	800fe5e <eMBFuncReadCoils+0x92>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 800fe50:	8a7b      	ldrh	r3, [r7, #18]
 800fe52:	08db      	lsrs	r3, r3, #3
 800fe54:	b29b      	uxth	r3, r3
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	3301      	adds	r3, #1
 800fe5a:	75fb      	strb	r3, [r7, #23]
 800fe5c:	e003      	b.n	800fe66 <eMBFuncReadCoils+0x9a>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 800fe5e:	8a7b      	ldrh	r3, [r7, #18]
 800fe60:	08db      	lsrs	r3, r3, #3
 800fe62:	b29b      	uxth	r3, r3
 800fe64:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	1c5a      	adds	r2, r3, #1
 800fe6a:	60fa      	str	r2, [r7, #12]
 800fe6c:	7dfa      	ldrb	r2, [r7, #23]
 800fe6e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	881b      	ldrh	r3, [r3, #0]
 800fe74:	3301      	adds	r3, #1
 800fe76:	b29a      	uxth	r2, r3
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 800fe7c:	8a7a      	ldrh	r2, [r7, #18]
 800fe7e:	8ab9      	ldrh	r1, [r7, #20]
 800fe80:	2300      	movs	r3, #0
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f000 fdbc 	bl	8010a00 <eMBRegCoilsCB>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800fe8c:	7afb      	ldrb	r3, [r7, #11]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d006      	beq.n	800fea0 <eMBFuncReadCoils+0xd4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800fe92:	7afb      	ldrb	r3, [r7, #11]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f000 fb77 	bl	8010588 <prveMBError2Exception>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 800fe9e:	e00d      	b.n	800febc <eMBFuncReadCoils+0xf0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	881a      	ldrh	r2, [r3, #0]
 800fea4:	7dfb      	ldrb	r3, [r7, #23]
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	4413      	add	r3, r2
 800feaa:	b29a      	uxth	r2, r3
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800feb0:	e004      	b.n	800febc <eMBFuncReadCoils+0xf0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800feb2:	2303      	movs	r3, #3
 800feb4:	75bb      	strb	r3, [r7, #22]
 800feb6:	e001      	b.n	800febc <eMBFuncReadCoils+0xf0>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800feb8:	2303      	movs	r3, #3
 800feba:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 800febc:	7dbb      	ldrb	r3, [r7, #22]
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3718      	adds	r7, #24
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b084      	sub	sp, #16
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
 800fece:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 800fed0:	2300      	movs	r3, #0
 800fed2:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	881b      	ldrh	r3, [r3, #0]
 800fed8:	2b05      	cmp	r3, #5
 800feda:	d13f      	bne.n	800ff5c <eMBFuncWriteCoil+0x96>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	3301      	adds	r3, #1
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	021b      	lsls	r3, r3, #8
 800fee4:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	3302      	adds	r3, #2
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	461a      	mov	r2, r3
 800feee:	89bb      	ldrh	r3, [r7, #12]
 800fef0:	4313      	orrs	r3, r2
 800fef2:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800fef4:	89bb      	ldrh	r3, [r7, #12]
 800fef6:	3301      	adds	r3, #1
 800fef8:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	3304      	adds	r3, #4
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d128      	bne.n	800ff56 <eMBFuncWriteCoil+0x90>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	3303      	adds	r3, #3
 800ff08:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800ff0a:	2bff      	cmp	r3, #255	@ 0xff
 800ff0c:	d004      	beq.n	800ff18 <eMBFuncWriteCoil+0x52>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	3303      	adds	r3, #3
 800ff12:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d11e      	bne.n	800ff56 <eMBFuncWriteCoil+0x90>
        {
            ucBuf[1] = 0;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	3303      	adds	r3, #3
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	2bff      	cmp	r3, #255	@ 0xff
 800ff24:	d102      	bne.n	800ff2c <eMBFuncWriteCoil+0x66>
            {
                ucBuf[0] = 1;
 800ff26:	2301      	movs	r3, #1
 800ff28:	723b      	strb	r3, [r7, #8]
 800ff2a:	e001      	b.n	800ff30 <eMBFuncWriteCoil+0x6a>
            }
            else
            {
                ucBuf[0] = 0;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 800ff30:	89b9      	ldrh	r1, [r7, #12]
 800ff32:	f107 0008 	add.w	r0, r7, #8
 800ff36:	2301      	movs	r3, #1
 800ff38:	2201      	movs	r2, #1
 800ff3a:	f000 fd61 	bl	8010a00 <eMBRegCoilsCB>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800ff42:	7afb      	ldrb	r3, [r7, #11]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d00b      	beq.n	800ff60 <eMBFuncWriteCoil+0x9a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800ff48:	7afb      	ldrb	r3, [r7, #11]
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f000 fb1c 	bl	8010588 <prveMBError2Exception>
 800ff50:	4603      	mov	r3, r0
 800ff52:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800ff54:	e004      	b.n	800ff60 <eMBFuncWriteCoil+0x9a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ff56:	2303      	movs	r3, #3
 800ff58:	73fb      	strb	r3, [r7, #15]
 800ff5a:	e001      	b.n	800ff60 <eMBFuncWriteCoil+0x9a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ff5c:	2303      	movs	r3, #3
 800ff5e:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800ff60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3710      	adds	r7, #16
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}

0800ff6a <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800ff6a:	b580      	push	{r7, lr}
 800ff6c:	b084      	sub	sp, #16
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]
 800ff72:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 800ff74:	2300      	movs	r3, #0
 800ff76:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	881b      	ldrh	r3, [r3, #0]
 800ff7c:	2b05      	cmp	r3, #5
 800ff7e:	d952      	bls.n	8010026 <eMBFuncWriteMultipleCoils+0xbc>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	3301      	adds	r3, #1
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	021b      	lsls	r3, r3, #8
 800ff88:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	3302      	adds	r3, #2
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	461a      	mov	r2, r3
 800ff92:	89bb      	ldrh	r3, [r7, #12]
 800ff94:	4313      	orrs	r3, r2
 800ff96:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800ff98:	89bb      	ldrh	r3, [r7, #12]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	3303      	adds	r3, #3
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	021b      	lsls	r3, r3, #8
 800ffa6:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	3304      	adds	r3, #4
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	461a      	mov	r2, r3
 800ffb0:	897b      	ldrh	r3, [r7, #10]
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	795b      	ldrb	r3, [r3, #5]
 800ffba:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 800ffbc:	897b      	ldrh	r3, [r7, #10]
 800ffbe:	f003 0307 	and.w	r3, r3, #7
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d006      	beq.n	800ffd4 <eMBFuncWriteMultipleCoils+0x6a>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 800ffc6:	897b      	ldrh	r3, [r7, #10]
 800ffc8:	08db      	lsrs	r3, r3, #3
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	3301      	adds	r3, #1
 800ffd0:	73fb      	strb	r3, [r7, #15]
 800ffd2:	e003      	b.n	800ffdc <eMBFuncWriteMultipleCoils+0x72>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 800ffd4:	897b      	ldrh	r3, [r7, #10]
 800ffd6:	08db      	lsrs	r3, r3, #3
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 800ffdc:	897b      	ldrh	r3, [r7, #10]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d01e      	beq.n	8010020 <eMBFuncWriteMultipleCoils+0xb6>
 800ffe2:	897b      	ldrh	r3, [r7, #10]
 800ffe4:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 800ffe8:	d81a      	bhi.n	8010020 <eMBFuncWriteMultipleCoils+0xb6>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 800ffea:	7bfa      	ldrb	r2, [r7, #15]
 800ffec:	7a7b      	ldrb	r3, [r7, #9]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d116      	bne.n	8010020 <eMBFuncWriteMultipleCoils+0xb6>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	1d98      	adds	r0, r3, #6
 800fff6:	897a      	ldrh	r2, [r7, #10]
 800fff8:	89b9      	ldrh	r1, [r7, #12]
 800fffa:	2301      	movs	r3, #1
 800fffc:	f000 fd00 	bl	8010a00 <eMBRegCoilsCB>
 8010000:	4603      	mov	r3, r0
 8010002:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8010004:	7a3b      	ldrb	r3, [r7, #8]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d006      	beq.n	8010018 <eMBFuncWriteMultipleCoils+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 801000a:	7a3b      	ldrb	r3, [r7, #8]
 801000c:	4618      	mov	r0, r3
 801000e:	f000 fabb 	bl	8010588 <prveMBError2Exception>
 8010012:	4603      	mov	r3, r0
 8010014:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8010016:	e008      	b.n	801002a <eMBFuncWriteMultipleCoils+0xc0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	2205      	movs	r2, #5
 801001c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 801001e:	e004      	b.n	801002a <eMBFuncWriteMultipleCoils+0xc0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010020:	2303      	movs	r3, #3
 8010022:	73bb      	strb	r3, [r7, #14]
 8010024:	e001      	b.n	801002a <eMBFuncWriteMultipleCoils+0xc0>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010026:	2303      	movs	r3, #3
 8010028:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 801002a:	7bbb      	ldrb	r3, [r7, #14]
}
 801002c:	4618      	mov	r0, r3
 801002e:	3710      	adds	r7, #16
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b086      	sub	sp, #24
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 801003e:	2300      	movs	r3, #0
 8010040:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	881b      	ldrh	r3, [r3, #0]
 8010046:	2b05      	cmp	r3, #5
 8010048:	d16a      	bne.n	8010120 <eMBFuncReadDiscreteInputs+0xec>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	3301      	adds	r3, #1
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	021b      	lsls	r3, r3, #8
 8010052:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	3302      	adds	r3, #2
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	461a      	mov	r2, r3
 801005c:	8abb      	ldrh	r3, [r7, #20]
 801005e:	4313      	orrs	r3, r2
 8010060:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8010062:	8abb      	ldrh	r3, [r7, #20]
 8010064:	3301      	adds	r3, #1
 8010066:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	3303      	adds	r3, #3
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	021b      	lsls	r3, r3, #8
 8010070:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	3304      	adds	r3, #4
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	461a      	mov	r2, r3
 801007a:	8a7b      	ldrh	r3, [r7, #18]
 801007c:	4313      	orrs	r3, r2
 801007e:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8010080:	8a7b      	ldrh	r3, [r7, #18]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d049      	beq.n	801011a <eMBFuncReadDiscreteInputs+0xe6>
 8010086:	8a7b      	ldrh	r3, [r7, #18]
 8010088:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 801008c:	d245      	bcs.n	801011a <eMBFuncReadDiscreteInputs+0xe6>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	2200      	movs	r2, #0
 8010096:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	1c5a      	adds	r2, r3, #1
 801009c:	60fa      	str	r2, [r7, #12]
 801009e:	2202      	movs	r2, #2
 80100a0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	881b      	ldrh	r3, [r3, #0]
 80100a6:	3301      	adds	r3, #1
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80100ae:	8a7b      	ldrh	r3, [r7, #18]
 80100b0:	f003 0307 	and.w	r3, r3, #7
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d006      	beq.n	80100c6 <eMBFuncReadDiscreteInputs+0x92>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80100b8:	8a7b      	ldrh	r3, [r7, #18]
 80100ba:	08db      	lsrs	r3, r3, #3
 80100bc:	b29b      	uxth	r3, r3
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	3301      	adds	r3, #1
 80100c2:	75fb      	strb	r3, [r7, #23]
 80100c4:	e003      	b.n	80100ce <eMBFuncReadDiscreteInputs+0x9a>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80100c6:	8a7b      	ldrh	r3, [r7, #18]
 80100c8:	08db      	lsrs	r3, r3, #3
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	1c5a      	adds	r2, r3, #1
 80100d2:	60fa      	str	r2, [r7, #12]
 80100d4:	7dfa      	ldrb	r2, [r7, #23]
 80100d6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	881b      	ldrh	r3, [r3, #0]
 80100dc:	3301      	adds	r3, #1
 80100de:	b29a      	uxth	r2, r3
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80100e4:	8a7a      	ldrh	r2, [r7, #18]
 80100e6:	8abb      	ldrh	r3, [r7, #20]
 80100e8:	4619      	mov	r1, r3
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f000 fd7c 	bl	8010be8 <eMBRegDiscreteCB>
 80100f0:	4603      	mov	r3, r0
 80100f2:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80100f4:	7afb      	ldrb	r3, [r7, #11]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d006      	beq.n	8010108 <eMBFuncReadDiscreteInputs+0xd4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80100fa:	7afb      	ldrb	r3, [r7, #11]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f000 fa43 	bl	8010588 <prveMBError2Exception>
 8010102:	4603      	mov	r3, r0
 8010104:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8010106:	e00d      	b.n	8010124 <eMBFuncReadDiscreteInputs+0xf0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	881a      	ldrh	r2, [r3, #0]
 801010c:	7dfb      	ldrb	r3, [r7, #23]
 801010e:	b29b      	uxth	r3, r3
 8010110:	4413      	add	r3, r2
 8010112:	b29a      	uxth	r2, r3
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8010118:	e004      	b.n	8010124 <eMBFuncReadDiscreteInputs+0xf0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801011a:	2303      	movs	r3, #3
 801011c:	75bb      	strb	r3, [r7, #22]
 801011e:	e001      	b.n	8010124 <eMBFuncReadDiscreteInputs+0xf0>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010120:	2303      	movs	r3, #3
 8010122:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8010124:	7dbb      	ldrb	r3, [r7, #22]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3718      	adds	r7, #24
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b084      	sub	sp, #16
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8010138:	2300      	movs	r3, #0
 801013a:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	881b      	ldrh	r3, [r3, #0]
 8010140:	2b05      	cmp	r3, #5
 8010142:	d121      	bne.n	8010188 <eMBFuncWriteHoldingRegister+0x5a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	3301      	adds	r3, #1
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	021b      	lsls	r3, r3, #8
 801014c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	3302      	adds	r3, #2
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	461a      	mov	r2, r3
 8010156:	89bb      	ldrh	r3, [r7, #12]
 8010158:	4313      	orrs	r3, r2
 801015a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 801015c:	89bb      	ldrh	r3, [r7, #12]
 801015e:	3301      	adds	r3, #1
 8010160:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	1cd8      	adds	r0, r3, #3
 8010166:	89b9      	ldrh	r1, [r7, #12]
 8010168:	2301      	movs	r3, #1
 801016a:	2201      	movs	r2, #1
 801016c:	f000 fbd4 	bl	8010918 <eMBRegHoldingCB>
 8010170:	4603      	mov	r3, r0
 8010172:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8010174:	7afb      	ldrb	r3, [r7, #11]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d008      	beq.n	801018c <eMBFuncWriteHoldingRegister+0x5e>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 801017a:	7afb      	ldrb	r3, [r7, #11]
 801017c:	4618      	mov	r0, r3
 801017e:	f000 fa03 	bl	8010588 <prveMBError2Exception>
 8010182:	4603      	mov	r3, r0
 8010184:	73fb      	strb	r3, [r7, #15]
 8010186:	e001      	b.n	801018c <eMBFuncWriteHoldingRegister+0x5e>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010188:	2303      	movs	r3, #3
 801018a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 801018c:	7bfb      	ldrb	r3, [r7, #15]
}
 801018e:	4618      	mov	r0, r3
 8010190:	3710      	adds	r7, #16
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}

08010196 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8010196:	b580      	push	{r7, lr}
 8010198:	b084      	sub	sp, #16
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
 801019e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80101a0:	2300      	movs	r3, #0
 80101a2:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	881b      	ldrh	r3, [r3, #0]
 80101a8:	2b05      	cmp	r3, #5
 80101aa:	d944      	bls.n	8010236 <eMBFuncWriteMultipleHoldingRegister+0xa0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	3301      	adds	r3, #1
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	021b      	lsls	r3, r3, #8
 80101b4:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	3302      	adds	r3, #2
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	461a      	mov	r2, r3
 80101be:	89bb      	ldrh	r3, [r7, #12]
 80101c0:	4313      	orrs	r3, r2
 80101c2:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80101c4:	89bb      	ldrh	r3, [r7, #12]
 80101c6:	3301      	adds	r3, #1
 80101c8:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	3303      	adds	r3, #3
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	021b      	lsls	r3, r3, #8
 80101d2:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	3304      	adds	r3, #4
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	461a      	mov	r2, r3
 80101dc:	897b      	ldrh	r3, [r7, #10]
 80101de:	4313      	orrs	r3, r2
 80101e0:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	795b      	ldrb	r3, [r3, #5]
 80101e6:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 80101e8:	897b      	ldrh	r3, [r7, #10]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d020      	beq.n	8010230 <eMBFuncWriteMultipleHoldingRegister+0x9a>
 80101ee:	897b      	ldrh	r3, [r7, #10]
 80101f0:	2b78      	cmp	r3, #120	@ 0x78
 80101f2:	d81d      	bhi.n	8010230 <eMBFuncWriteMultipleHoldingRegister+0x9a>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80101f4:	897b      	ldrh	r3, [r7, #10]
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	005b      	lsls	r3, r3, #1
 80101fa:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80101fc:	7a7a      	ldrb	r2, [r7, #9]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d116      	bne.n	8010230 <eMBFuncWriteMultipleHoldingRegister+0x9a>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	1d98      	adds	r0, r3, #6
 8010206:	897a      	ldrh	r2, [r7, #10]
 8010208:	89b9      	ldrh	r1, [r7, #12]
 801020a:	2301      	movs	r3, #1
 801020c:	f000 fb84 	bl	8010918 <eMBRegHoldingCB>
 8010210:	4603      	mov	r3, r0
 8010212:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8010214:	7a3b      	ldrb	r3, [r7, #8]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d006      	beq.n	8010228 <eMBFuncWriteMultipleHoldingRegister+0x92>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 801021a:	7a3b      	ldrb	r3, [r7, #8]
 801021c:	4618      	mov	r0, r3
 801021e:	f000 f9b3 	bl	8010588 <prveMBError2Exception>
 8010222:	4603      	mov	r3, r0
 8010224:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8010226:	e008      	b.n	801023a <eMBFuncWriteMultipleHoldingRegister+0xa4>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	2205      	movs	r2, #5
 801022c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 801022e:	e004      	b.n	801023a <eMBFuncWriteMultipleHoldingRegister+0xa4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010230:	2303      	movs	r3, #3
 8010232:	73fb      	strb	r3, [r7, #15]
 8010234:	e001      	b.n	801023a <eMBFuncWriteMultipleHoldingRegister+0xa4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010236:	2303      	movs	r3, #3
 8010238:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 801023a:	7bfb      	ldrb	r3, [r7, #15]
}
 801023c:	4618      	mov	r0, r3
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b086      	sub	sp, #24
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 801024e:	2300      	movs	r3, #0
 8010250:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	881b      	ldrh	r3, [r3, #0]
 8010256:	2b05      	cmp	r3, #5
 8010258:	d15d      	bne.n	8010316 <eMBFuncReadHoldingRegister+0xd2>
    {
        usRegAddress  = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	3301      	adds	r3, #1
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	021b      	lsls	r3, r3, #8
 8010262:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	3302      	adds	r3, #2
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	461a      	mov	r2, r3
 801026c:	8abb      	ldrh	r3, [r7, #20]
 801026e:	4313      	orrs	r3, r2
 8010270:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8010272:	8abb      	ldrh	r3, [r7, #20]
 8010274:	3301      	adds	r3, #1
 8010276:	82bb      	strh	r3, [r7, #20]

        usRegCount  = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	3303      	adds	r3, #3
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	021b      	lsls	r3, r3, #8
 8010280:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	3304      	adds	r3, #4
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	461a      	mov	r2, r3
 801028a:	8a7b      	ldrh	r3, [r7, #18]
 801028c:	4313      	orrs	r3, r2
 801028e:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8010290:	8a7b      	ldrh	r3, [r7, #18]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d03c      	beq.n	8010310 <eMBFuncReadHoldingRegister+0xcc>
 8010296:	8a7b      	ldrh	r3, [r7, #18]
 8010298:	2b7d      	cmp	r3, #125	@ 0x7d
 801029a:	d839      	bhi.n	8010310 <eMBFuncReadHoldingRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	2200      	movs	r2, #0
 80102a4:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	1c5a      	adds	r2, r3, #1
 80102aa:	60fa      	str	r2, [r7, #12]
 80102ac:	2203      	movs	r2, #3
 80102ae:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	881b      	ldrh	r3, [r3, #0]
 80102b4:	3301      	adds	r3, #1
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80102bc:	8a7b      	ldrh	r3, [r7, #18]
 80102be:	b2da      	uxtb	r2, r3
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	1c59      	adds	r1, r3, #1
 80102c4:	60f9      	str	r1, [r7, #12]
 80102c6:	0052      	lsls	r2, r2, #1
 80102c8:	b2d2      	uxtb	r2, r2
 80102ca:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	881b      	ldrh	r3, [r3, #0]
 80102d0:	3301      	adds	r3, #1
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80102d8:	8a7a      	ldrh	r2, [r7, #18]
 80102da:	8ab9      	ldrh	r1, [r7, #20]
 80102dc:	2300      	movs	r3, #0
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	f000 fb1a 	bl	8010918 <eMBRegHoldingCB>
 80102e4:	4603      	mov	r3, r0
 80102e6:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80102e8:	7afb      	ldrb	r3, [r7, #11]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d006      	beq.n	80102fc <eMBFuncReadHoldingRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80102ee:	7afb      	ldrb	r3, [r7, #11]
 80102f0:	4618      	mov	r0, r3
 80102f2:	f000 f949 	bl	8010588 <prveMBError2Exception>
 80102f6:	4603      	mov	r3, r0
 80102f8:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80102fa:	e00e      	b.n	801031a <eMBFuncReadHoldingRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	881a      	ldrh	r2, [r3, #0]
 8010300:	8a7b      	ldrh	r3, [r7, #18]
 8010302:	005b      	lsls	r3, r3, #1
 8010304:	b29b      	uxth	r3, r3
 8010306:	4413      	add	r3, r2
 8010308:	b29a      	uxth	r2, r3
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 801030e:	e004      	b.n	801031a <eMBFuncReadHoldingRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010310:	2303      	movs	r3, #3
 8010312:	75fb      	strb	r3, [r7, #23]
 8010314:	e001      	b.n	801031a <eMBFuncReadHoldingRegister+0xd6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010316:	2303      	movs	r3, #3
 8010318:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 801031a:	7dfb      	ldrb	r3, [r7, #23]
}
 801031c:	4618      	mov	r0, r3
 801031e:	3718      	adds	r7, #24
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b086      	sub	sp, #24
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 801032e:	2300      	movs	r3, #0
 8010330:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	881b      	ldrh	r3, [r3, #0]
 8010336:	2b09      	cmp	r3, #9
 8010338:	f240 8095 	bls.w	8010466 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	3301      	adds	r3, #1
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	021b      	lsls	r3, r3, #8
 8010344:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	3302      	adds	r3, #2
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	461a      	mov	r2, r3
 801034e:	8abb      	ldrh	r3, [r7, #20]
 8010350:	4313      	orrs	r3, r2
 8010352:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8010354:	8abb      	ldrh	r3, [r7, #20]
 8010356:	3301      	adds	r3, #1
 8010358:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	3303      	adds	r3, #3
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	021b      	lsls	r3, r3, #8
 8010362:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	3304      	adds	r3, #4
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	461a      	mov	r2, r3
 801036c:	8a7b      	ldrh	r3, [r7, #18]
 801036e:	4313      	orrs	r3, r2
 8010370:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	3305      	adds	r3, #5
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	021b      	lsls	r3, r3, #8
 801037a:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	3306      	adds	r3, #6
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	461a      	mov	r2, r3
 8010384:	8a3b      	ldrh	r3, [r7, #16]
 8010386:	4313      	orrs	r3, r2
 8010388:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 801038a:	8a3b      	ldrh	r3, [r7, #16]
 801038c:	3301      	adds	r3, #1
 801038e:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	3307      	adds	r3, #7
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	021b      	lsls	r3, r3, #8
 8010398:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	3308      	adds	r3, #8
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	461a      	mov	r2, r3
 80103a2:	89fb      	ldrh	r3, [r7, #14]
 80103a4:	4313      	orrs	r3, r2
 80103a6:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	7a5b      	ldrb	r3, [r3, #9]
 80103ac:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80103ae:	8a7b      	ldrh	r3, [r7, #18]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d056      	beq.n	8010462 <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 80103b4:	8a7b      	ldrh	r3, [r7, #18]
 80103b6:	2b7d      	cmp	r3, #125	@ 0x7d
 80103b8:	d853      	bhi.n	8010462 <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 80103ba:	89fb      	ldrh	r3, [r7, #14]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d050      	beq.n	8010462 <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80103c0:	89fb      	ldrh	r3, [r7, #14]
 80103c2:	2b79      	cmp	r3, #121	@ 0x79
 80103c4:	d84d      	bhi.n	8010462 <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 80103c6:	89fb      	ldrh	r3, [r7, #14]
 80103c8:	005a      	lsls	r2, r3, #1
 80103ca:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d148      	bne.n	8010462 <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f103 000a 	add.w	r0, r3, #10
 80103d6:	89fa      	ldrh	r2, [r7, #14]
 80103d8:	8a39      	ldrh	r1, [r7, #16]
 80103da:	2301      	movs	r3, #1
 80103dc:	f000 fa9c 	bl	8010918 <eMBRegHoldingCB>
 80103e0:	4603      	mov	r3, r0
 80103e2:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80103e4:	7dbb      	ldrb	r3, [r7, #22]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d131      	bne.n	801044e <eMBFuncReadWriteMultipleHoldingRegister+0x12a>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	2200      	movs	r2, #0
 80103f2:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	1c5a      	adds	r2, r3, #1
 80103f8:	60ba      	str	r2, [r7, #8]
 80103fa:	2217      	movs	r2, #23
 80103fc:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	881b      	ldrh	r3, [r3, #0]
 8010402:	3301      	adds	r3, #1
 8010404:	b29a      	uxth	r2, r3
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 801040a:	8a7b      	ldrh	r3, [r7, #18]
 801040c:	b2da      	uxtb	r2, r3
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	1c59      	adds	r1, r3, #1
 8010412:	60b9      	str	r1, [r7, #8]
 8010414:	0052      	lsls	r2, r2, #1
 8010416:	b2d2      	uxtb	r2, r2
 8010418:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	881b      	ldrh	r3, [r3, #0]
 801041e:	3301      	adds	r3, #1
 8010420:	b29a      	uxth	r2, r3
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8010426:	8a7a      	ldrh	r2, [r7, #18]
 8010428:	8ab9      	ldrh	r1, [r7, #20]
 801042a:	2300      	movs	r3, #0
 801042c:	68b8      	ldr	r0, [r7, #8]
 801042e:	f000 fa73 	bl	8010918 <eMBRegHoldingCB>
 8010432:	4603      	mov	r3, r0
 8010434:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8010436:	7dbb      	ldrb	r3, [r7, #22]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d108      	bne.n	801044e <eMBFuncReadWriteMultipleHoldingRegister+0x12a>
                {
                    *usLen += 2 * usRegReadCount;
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	881a      	ldrh	r2, [r3, #0]
 8010440:	8a7b      	ldrh	r3, [r7, #18]
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	b29b      	uxth	r3, r3
 8010446:	4413      	add	r3, r2
 8010448:	b29a      	uxth	r2, r3
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 801044e:	7dbb      	ldrb	r3, [r7, #22]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d008      	beq.n	8010466 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8010454:	7dbb      	ldrb	r3, [r7, #22]
 8010456:	4618      	mov	r0, r3
 8010458:	f000 f896 	bl	8010588 <prveMBError2Exception>
 801045c:	4603      	mov	r3, r0
 801045e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8010460:	e001      	b.n	8010466 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010462:	2303      	movs	r3, #3
 8010464:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8010466:	7dfb      	ldrb	r3, [r7, #23]
}
 8010468:	4618      	mov	r0, r3
 801046a:	3718      	adds	r7, #24
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b086      	sub	sp, #24
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 801047a:	2300      	movs	r3, #0
 801047c:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	881b      	ldrh	r3, [r3, #0]
 8010482:	2b05      	cmp	r3, #5
 8010484:	d15d      	bne.n	8010542 <eMBFuncReadInputRegister+0xd2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	3301      	adds	r3, #1
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	021b      	lsls	r3, r3, #8
 801048e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	3302      	adds	r3, #2
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	461a      	mov	r2, r3
 8010498:	8abb      	ldrh	r3, [r7, #20]
 801049a:	4313      	orrs	r3, r2
 801049c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 801049e:	8abb      	ldrh	r3, [r7, #20]
 80104a0:	3301      	adds	r3, #1
 80104a2:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	3303      	adds	r3, #3
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	021b      	lsls	r3, r3, #8
 80104ac:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	3304      	adds	r3, #4
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	461a      	mov	r2, r3
 80104b6:	8a7b      	ldrh	r3, [r7, #18]
 80104b8:	4313      	orrs	r3, r2
 80104ba:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 80104bc:	8a7b      	ldrh	r3, [r7, #18]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d03c      	beq.n	801053c <eMBFuncReadInputRegister+0xcc>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80104c2:	8a7b      	ldrh	r3, [r7, #18]
 80104c4:	2b7c      	cmp	r3, #124	@ 0x7c
 80104c6:	d839      	bhi.n	801053c <eMBFuncReadInputRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2200      	movs	r2, #0
 80104d0:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	1c5a      	adds	r2, r3, #1
 80104d6:	60fa      	str	r2, [r7, #12]
 80104d8:	2204      	movs	r2, #4
 80104da:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	881b      	ldrh	r3, [r3, #0]
 80104e0:	3301      	adds	r3, #1
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80104e8:	8a7b      	ldrh	r3, [r7, #18]
 80104ea:	b2da      	uxtb	r2, r3
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	1c59      	adds	r1, r3, #1
 80104f0:	60f9      	str	r1, [r7, #12]
 80104f2:	0052      	lsls	r2, r2, #1
 80104f4:	b2d2      	uxtb	r2, r2
 80104f6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	881b      	ldrh	r3, [r3, #0]
 80104fc:	3301      	adds	r3, #1
 80104fe:	b29a      	uxth	r2, r3
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8010504:	8a7a      	ldrh	r2, [r7, #18]
 8010506:	8abb      	ldrh	r3, [r7, #20]
 8010508:	4619      	mov	r1, r3
 801050a:	68f8      	ldr	r0, [r7, #12]
 801050c:	f000 fb2e 	bl	8010b6c <eMBRegInputCB>
 8010510:	4603      	mov	r3, r0
 8010512:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8010514:	7afb      	ldrb	r3, [r7, #11]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d006      	beq.n	8010528 <eMBFuncReadInputRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 801051a:	7afb      	ldrb	r3, [r7, #11]
 801051c:	4618      	mov	r0, r3
 801051e:	f000 f833 	bl	8010588 <prveMBError2Exception>
 8010522:	4603      	mov	r3, r0
 8010524:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8010526:	e00e      	b.n	8010546 <eMBFuncReadInputRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	881a      	ldrh	r2, [r3, #0]
 801052c:	8a7b      	ldrh	r3, [r7, #18]
 801052e:	005b      	lsls	r3, r3, #1
 8010530:	b29b      	uxth	r3, r3
 8010532:	4413      	add	r3, r2
 8010534:	b29a      	uxth	r2, r3
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 801053a:	e004      	b.n	8010546 <eMBFuncReadInputRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801053c:	2303      	movs	r3, #3
 801053e:	75fb      	strb	r3, [r7, #23]
 8010540:	e001      	b.n	8010546 <eMBFuncReadInputRegister+0xd6>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010542:	2303      	movs	r3, #3
 8010544:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8010546:	7dfb      	ldrb	r3, [r7, #23]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3718      	adds	r7, #24
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	3301      	adds	r3, #1
 801055e:	4a08      	ldr	r2, [pc, #32]	@ (8010580 <eMBFuncReportSlaveID+0x30>)
 8010560:	8812      	ldrh	r2, [r2, #0]
 8010562:	4908      	ldr	r1, [pc, #32]	@ (8010584 <eMBFuncReportSlaveID+0x34>)
 8010564:	4618      	mov	r0, r3
 8010566:	f001 f97c 	bl	8011862 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 801056a:	4b05      	ldr	r3, [pc, #20]	@ (8010580 <eMBFuncReportSlaveID+0x30>)
 801056c:	881b      	ldrh	r3, [r3, #0]
 801056e:	3301      	adds	r3, #1
 8010570:	b29a      	uxth	r2, r3
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8010576:	2300      	movs	r3, #0
}
 8010578:	4618      	mov	r0, r3
 801057a:	3708      	adds	r7, #8
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}
 8010580:	20008554 	.word	0x20008554
 8010584:	20008534 	.word	0x20008534

08010588 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8010588:	b480      	push	{r7}
 801058a:	b085      	sub	sp, #20
 801058c:	af00      	add	r7, sp, #0
 801058e:	4603      	mov	r3, r0
 8010590:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 8010592:	79fb      	ldrb	r3, [r7, #7]
 8010594:	2b07      	cmp	r3, #7
 8010596:	d00c      	beq.n	80105b2 <prveMBError2Exception+0x2a>
 8010598:	2b07      	cmp	r3, #7
 801059a:	dc0d      	bgt.n	80105b8 <prveMBError2Exception+0x30>
 801059c:	2b00      	cmp	r3, #0
 801059e:	d002      	beq.n	80105a6 <prveMBError2Exception+0x1e>
 80105a0:	2b01      	cmp	r3, #1
 80105a2:	d003      	beq.n	80105ac <prveMBError2Exception+0x24>
 80105a4:	e008      	b.n	80105b8 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80105a6:	2300      	movs	r3, #0
 80105a8:	73fb      	strb	r3, [r7, #15]
            break;
 80105aa:	e008      	b.n	80105be <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80105ac:	2302      	movs	r3, #2
 80105ae:	73fb      	strb	r3, [r7, #15]
            break;
 80105b0:	e005      	b.n	80105be <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80105b2:	2306      	movs	r3, #6
 80105b4:	73fb      	strb	r3, [r7, #15]
            break;
 80105b6:	e002      	b.n	80105be <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80105b8:	2304      	movs	r3, #4
 80105ba:	73fb      	strb	r3, [r7, #15]
            break;
 80105bc:	bf00      	nop
    }

    return eStatus;
 80105be:	7bfb      	ldrb	r3, [r7, #15]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3714      	adds	r7, #20
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	4603      	mov	r3, r0
 80105d4:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 80105d6:	2300      	movs	r3, #0
 80105d8:	73fb      	strb	r3, [r7, #15]

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 80105da:	88fb      	ldrh	r3, [r7, #6]
 80105dc:	4618      	mov	r0, r3
 80105de:	f000 fe5d 	bl	801129c <eMBTCPDoInit>
 80105e2:	4603      	mov	r3, r0
 80105e4:	73fb      	strb	r3, [r7, #15]
 80105e6:	7bfb      	ldrb	r3, [r7, #15]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d003      	beq.n	80105f4 <eMBTCPInit+0x28>
    {
        eMBState = STATE_DISABLED;
 80105ec:	4b14      	ldr	r3, [pc, #80]	@ (8010640 <eMBTCPInit+0x74>)
 80105ee:	2201      	movs	r2, #1
 80105f0:	701a      	strb	r2, [r3, #0]
 80105f2:	e01f      	b.n	8010634 <eMBTCPInit+0x68>
    }
    else if( !xMBPortEventInit(  ) )
 80105f4:	f000 fb68 	bl	8010cc8 <xMBPortEventInit>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d102      	bne.n	8010604 <eMBTCPInit+0x38>
    {
        /* Port dependent event module initalization failed. */
        eStatus = MB_EPORTERR;
 80105fe:	2303      	movs	r3, #3
 8010600:	73fb      	strb	r3, [r7, #15]
 8010602:	e017      	b.n	8010634 <eMBTCPInit+0x68>
    }
    else
    {
        pvMBFrameStartCur = eMBTCPStart;
 8010604:	4b0f      	ldr	r3, [pc, #60]	@ (8010644 <eMBTCPInit+0x78>)
 8010606:	4a10      	ldr	r2, [pc, #64]	@ (8010648 <eMBTCPInit+0x7c>)
 8010608:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 801060a:	4b10      	ldr	r3, [pc, #64]	@ (801064c <eMBTCPInit+0x80>)
 801060c:	4a10      	ldr	r2, [pc, #64]	@ (8010650 <eMBTCPInit+0x84>)
 801060e:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 8010610:	4b10      	ldr	r3, [pc, #64]	@ (8010654 <eMBTCPInit+0x88>)
 8010612:	4a11      	ldr	r2, [pc, #68]	@ (8010658 <eMBTCPInit+0x8c>)
 8010614:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8010616:	4b11      	ldr	r3, [pc, #68]	@ (801065c <eMBTCPInit+0x90>)
 8010618:	4a11      	ldr	r2, [pc, #68]	@ (8010660 <eMBTCPInit+0x94>)
 801061a:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 801061c:	4b11      	ldr	r3, [pc, #68]	@ (8010664 <eMBTCPInit+0x98>)
 801061e:	2200      	movs	r2, #0
 8010620:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8010622:	4b11      	ldr	r3, [pc, #68]	@ (8010668 <eMBTCPInit+0x9c>)
 8010624:	22ff      	movs	r2, #255	@ 0xff
 8010626:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8010628:	4b10      	ldr	r3, [pc, #64]	@ (801066c <eMBTCPInit+0xa0>)
 801062a:	2202      	movs	r2, #2
 801062c:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 801062e:	4b04      	ldr	r3, [pc, #16]	@ (8010640 <eMBTCPInit+0x74>)
 8010630:	2201      	movs	r2, #1
 8010632:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8010634:	7bfb      	ldrb	r3, [r7, #15]
}
 8010636:	4618      	mov	r0, r3
 8010638:	3710      	adds	r7, #16
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
 801063e:	bf00      	nop
 8010640:	2000002a 	.word	0x2000002a
 8010644:	2000855c 	.word	0x2000855c
 8010648:	080112c7 	.word	0x080112c7
 801064c:	20008560 	.word	0x20008560
 8010650:	080112d5 	.word	0x080112d5
 8010654:	20008564 	.word	0x20008564
 8010658:	080112e1 	.word	0x080112e1
 801065c:	20008558 	.word	0x20008558
 8010660:	08011351 	.word	0x08011351
 8010664:	20008568 	.word	0x20008568
 8010668:	20008556 	.word	0x20008556
 801066c:	20008557 	.word	0x20008557

08010670 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8010676:	2300      	movs	r3, #0
 8010678:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 801067a:	4b09      	ldr	r3, [pc, #36]	@ (80106a0 <eMBEnable+0x30>)
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	2b01      	cmp	r3, #1
 8010680:	d106      	bne.n	8010690 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8010682:	4b08      	ldr	r3, [pc, #32]	@ (80106a4 <eMBEnable+0x34>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8010688:	4b05      	ldr	r3, [pc, #20]	@ (80106a0 <eMBEnable+0x30>)
 801068a:	2200      	movs	r2, #0
 801068c:	701a      	strb	r2, [r3, #0]
 801068e:	e001      	b.n	8010694 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8010690:	2306      	movs	r3, #6
 8010692:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8010694:	79fb      	ldrb	r3, [r7, #7]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3708      	adds	r7, #8
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	2000002a 	.word	0x2000002a
 80106a4:	2000855c 	.word	0x2000855c

080106a8 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80106a8:	b590      	push	{r4, r7, lr}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 80106ae:	2300      	movs	r3, #0
 80106b0:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80106b2:	4b50      	ldr	r3, [pc, #320]	@ (80107f4 <eMBPoll+0x14c>)
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d001      	beq.n	80106be <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 80106ba:	2306      	movs	r3, #6
 80106bc:	e095      	b.n	80107ea <eMBPoll+0x142>

    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80106be:	1cbb      	adds	r3, r7, #2
 80106c0:	4618      	mov	r0, r3
 80106c2:	f000 fb49 	bl	8010d58 <xMBPortEventGet>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	f040 808d 	bne.w	80107e8 <eMBPoll+0x140>
    {
        switch ( eEvent )
 80106ce:	78bb      	ldrb	r3, [r7, #2]
 80106d0:	2b03      	cmp	r3, #3
 80106d2:	f200 8089 	bhi.w	80107e8 <eMBPoll+0x140>
 80106d6:	a201      	add	r2, pc, #4	@ (adr r2, 80106dc <eMBPoll+0x34>)
 80106d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106dc:	080107e9 	.word	0x080107e9
 80106e0:	080106ed 	.word	0x080106ed
 80106e4:	0801071f 	.word	0x0801071f
 80106e8:	080107e9 	.word	0x080107e9
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80106ec:	4b42      	ldr	r3, [pc, #264]	@ (80107f8 <eMBPoll+0x150>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4a42      	ldr	r2, [pc, #264]	@ (80107fc <eMBPoll+0x154>)
 80106f2:	4943      	ldr	r1, [pc, #268]	@ (8010800 <eMBPoll+0x158>)
 80106f4:	4843      	ldr	r0, [pc, #268]	@ (8010804 <eMBPoll+0x15c>)
 80106f6:	4798      	blx	r3
 80106f8:	4603      	mov	r3, r0
 80106fa:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 80106fc:	78fb      	ldrb	r3, [r7, #3]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d16f      	bne.n	80107e2 <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8010702:	4b40      	ldr	r3, [pc, #256]	@ (8010804 <eMBPoll+0x15c>)
 8010704:	781a      	ldrb	r2, [r3, #0]
 8010706:	4b40      	ldr	r3, [pc, #256]	@ (8010808 <eMBPoll+0x160>)
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	429a      	cmp	r2, r3
 801070c:	d003      	beq.n	8010716 <eMBPoll+0x6e>
 801070e:	4b3d      	ldr	r3, [pc, #244]	@ (8010804 <eMBPoll+0x15c>)
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d165      	bne.n	80107e2 <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8010716:	2002      	movs	r0, #2
 8010718:	f000 faec 	bl	8010cf4 <xMBPortEventPost>
                }
            }
            break;
 801071c:	e061      	b.n	80107e2 <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 801071e:	4b38      	ldr	r3, [pc, #224]	@ (8010800 <eMBPoll+0x158>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	781a      	ldrb	r2, [r3, #0]
 8010724:	4b39      	ldr	r3, [pc, #228]	@ (801080c <eMBPoll+0x164>)
 8010726:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8010728:	4b39      	ldr	r3, [pc, #228]	@ (8010810 <eMBPoll+0x168>)
 801072a:	2201      	movs	r2, #1
 801072c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 801072e:	2300      	movs	r3, #0
 8010730:	607b      	str	r3, [r7, #4]
 8010732:	e01f      	b.n	8010774 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8010734:	4a37      	ldr	r2, [pc, #220]	@ (8010814 <eMBPoll+0x16c>)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d01d      	beq.n	801077c <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8010740:	4a34      	ldr	r2, [pc, #208]	@ (8010814 <eMBPoll+0x16c>)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8010748:	4b30      	ldr	r3, [pc, #192]	@ (801080c <eMBPoll+0x164>)
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	429a      	cmp	r2, r3
 801074e:	d10e      	bne.n	801076e <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8010750:	4a30      	ldr	r2, [pc, #192]	@ (8010814 <eMBPoll+0x16c>)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	4413      	add	r3, r2
 8010758:	685b      	ldr	r3, [r3, #4]
 801075a:	4a29      	ldr	r2, [pc, #164]	@ (8010800 <eMBPoll+0x158>)
 801075c:	6812      	ldr	r2, [r2, #0]
 801075e:	4927      	ldr	r1, [pc, #156]	@ (80107fc <eMBPoll+0x154>)
 8010760:	4610      	mov	r0, r2
 8010762:	4798      	blx	r3
 8010764:	4603      	mov	r3, r0
 8010766:	461a      	mov	r2, r3
 8010768:	4b29      	ldr	r3, [pc, #164]	@ (8010810 <eMBPoll+0x168>)
 801076a:	701a      	strb	r2, [r3, #0]
                    break;
 801076c:	e007      	b.n	801077e <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	3301      	adds	r3, #1
 8010772:	607b      	str	r3, [r7, #4]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2b0f      	cmp	r3, #15
 8010778:	dddc      	ble.n	8010734 <eMBPoll+0x8c>
 801077a:	e000      	b.n	801077e <eMBPoll+0xd6>
                    break;
 801077c:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 801077e:	4b21      	ldr	r3, [pc, #132]	@ (8010804 <eMBPoll+0x15c>)
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d02f      	beq.n	80107e6 <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 8010786:	4b22      	ldr	r3, [pc, #136]	@ (8010810 <eMBPoll+0x168>)
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d01d      	beq.n	80107ca <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 801078e:	4b1b      	ldr	r3, [pc, #108]	@ (80107fc <eMBPoll+0x154>)
 8010790:	2200      	movs	r2, #0
 8010792:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8010794:	4b1d      	ldr	r3, [pc, #116]	@ (801080c <eMBPoll+0x164>)
 8010796:	781a      	ldrb	r2, [r3, #0]
 8010798:	4b19      	ldr	r3, [pc, #100]	@ (8010800 <eMBPoll+0x158>)
 801079a:	6819      	ldr	r1, [r3, #0]
 801079c:	4b17      	ldr	r3, [pc, #92]	@ (80107fc <eMBPoll+0x154>)
 801079e:	881b      	ldrh	r3, [r3, #0]
 80107a0:	1c58      	adds	r0, r3, #1
 80107a2:	b284      	uxth	r4, r0
 80107a4:	4815      	ldr	r0, [pc, #84]	@ (80107fc <eMBPoll+0x154>)
 80107a6:	8004      	strh	r4, [r0, #0]
 80107a8:	440b      	add	r3, r1
 80107aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80107ae:	b2d2      	uxtb	r2, r2
 80107b0:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 80107b2:	4b13      	ldr	r3, [pc, #76]	@ (8010800 <eMBPoll+0x158>)
 80107b4:	681a      	ldr	r2, [r3, #0]
 80107b6:	4b11      	ldr	r3, [pc, #68]	@ (80107fc <eMBPoll+0x154>)
 80107b8:	881b      	ldrh	r3, [r3, #0]
 80107ba:	1c59      	adds	r1, r3, #1
 80107bc:	b288      	uxth	r0, r1
 80107be:	490f      	ldr	r1, [pc, #60]	@ (80107fc <eMBPoll+0x154>)
 80107c0:	8008      	strh	r0, [r1, #0]
 80107c2:	4413      	add	r3, r2
 80107c4:	4a12      	ldr	r2, [pc, #72]	@ (8010810 <eMBPoll+0x168>)
 80107c6:	7812      	ldrb	r2, [r2, #0]
 80107c8:	701a      	strb	r2, [r3, #0]
                if ( ( eMBCurrentMode == MB_RTU ) && MB_RTU_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_RTU_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }
#endif
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 80107ca:	4b13      	ldr	r3, [pc, #76]	@ (8010818 <eMBPoll+0x170>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	4a0e      	ldr	r2, [pc, #56]	@ (8010808 <eMBPoll+0x160>)
 80107d0:	7810      	ldrb	r0, [r2, #0]
 80107d2:	4a0b      	ldr	r2, [pc, #44]	@ (8010800 <eMBPoll+0x158>)
 80107d4:	6811      	ldr	r1, [r2, #0]
 80107d6:	4a09      	ldr	r2, [pc, #36]	@ (80107fc <eMBPoll+0x154>)
 80107d8:	8812      	ldrh	r2, [r2, #0]
 80107da:	4798      	blx	r3
 80107dc:	4603      	mov	r3, r0
 80107de:	70fb      	strb	r3, [r7, #3]
            }
            break;
 80107e0:	e001      	b.n	80107e6 <eMBPoll+0x13e>
            break;
 80107e2:	bf00      	nop
 80107e4:	e000      	b.n	80107e8 <eMBPoll+0x140>
            break;
 80107e6:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return eStatus;
 80107e8:	78fb      	ldrb	r3, [r7, #3]
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	370c      	adds	r7, #12
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd90      	pop	{r4, r7, pc}
 80107f2:	bf00      	nop
 80107f4:	2000002a 	.word	0x2000002a
 80107f8:	20008564 	.word	0x20008564
 80107fc:	20008574 	.word	0x20008574
 8010800:	20008570 	.word	0x20008570
 8010804:	2000856c 	.word	0x2000856c
 8010808:	20008556 	.word	0x20008556
 801080c:	20008576 	.word	0x20008576
 8010810:	20008577 	.word	0x20008577
 8010814:	2000002c 	.word	0x2000002c
 8010818:	20008558 	.word	0x20008558

0801081c <Modbus_UpdateCounter>:
static USHORT usInputRegs[REG_INPUT_NREGS];
static UCHAR  ucDiscreteInputs[REG_DISC_NDISCRETES];

/* ---- Helpers ---- */

static void Modbus_UpdateCounter(void){
 801081c:	b480      	push	{r7}
 801081e:	af00      	add	r7, sp, #0
	usHoldingRegs[0]++;
 8010820:	4b05      	ldr	r3, [pc, #20]	@ (8010838 <Modbus_UpdateCounter+0x1c>)
 8010822:	881b      	ldrh	r3, [r3, #0]
 8010824:	3301      	adds	r3, #1
 8010826:	b29a      	uxth	r2, r3
 8010828:	4b03      	ldr	r3, [pc, #12]	@ (8010838 <Modbus_UpdateCounter+0x1c>)
 801082a:	801a      	strh	r2, [r3, #0]
}
 801082c:	bf00      	nop
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop
 8010838:	20008578 	.word	0x20008578

0801083c <apply_led_from_coil>:

static void apply_led_from_coil(USHORT coilIndex, UCHAR val)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	4603      	mov	r3, r0
 8010844:	460a      	mov	r2, r1
 8010846:	80fb      	strh	r3, [r7, #6]
 8010848:	4613      	mov	r3, r2
 801084a:	717b      	strb	r3, [r7, #5]
    /* coilIndex is 0-based index into ucCoils (0..3) */
    GPIO_PinState state = (val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 801084c:	797b      	ldrb	r3, [r7, #5]
 801084e:	2b00      	cmp	r3, #0
 8010850:	bf14      	ite	ne
 8010852:	2301      	movne	r3, #1
 8010854:	2300      	moveq	r3, #0
 8010856:	b2db      	uxtb	r3, r3
 8010858:	73fb      	strb	r3, [r7, #15]
    switch (coilIndex) {
 801085a:	88fb      	ldrh	r3, [r7, #6]
 801085c:	2b03      	cmp	r3, #3
 801085e:	d82b      	bhi.n	80108b8 <apply_led_from_coil+0x7c>
 8010860:	a201      	add	r2, pc, #4	@ (adr r2, 8010868 <apply_led_from_coil+0x2c>)
 8010862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010866:	bf00      	nop
 8010868:	08010879 	.word	0x08010879
 801086c:	08010889 	.word	0x08010889
 8010870:	08010899 	.word	0x08010899
 8010874:	080108a9 	.word	0x080108a9
        case 0:
            HAL_GPIO_WritePin(LED_PORT, LED_GREEN_PIN, state);
 8010878:	7bfb      	ldrb	r3, [r7, #15]
 801087a:	461a      	mov	r2, r3
 801087c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010880:	4810      	ldr	r0, [pc, #64]	@ (80108c4 <apply_led_from_coil+0x88>)
 8010882:	f7f2 fe67 	bl	8003554 <HAL_GPIO_WritePin>
            break;
 8010886:	e018      	b.n	80108ba <apply_led_from_coil+0x7e>
        case 1:
            HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, state);
 8010888:	7bfb      	ldrb	r3, [r7, #15]
 801088a:	461a      	mov	r2, r3
 801088c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010890:	480c      	ldr	r0, [pc, #48]	@ (80108c4 <apply_led_from_coil+0x88>)
 8010892:	f7f2 fe5f 	bl	8003554 <HAL_GPIO_WritePin>
            break;
 8010896:	e010      	b.n	80108ba <apply_led_from_coil+0x7e>
        case 2:
            HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, state);
 8010898:	7bfb      	ldrb	r3, [r7, #15]
 801089a:	461a      	mov	r2, r3
 801089c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80108a0:	4808      	ldr	r0, [pc, #32]	@ (80108c4 <apply_led_from_coil+0x88>)
 80108a2:	f7f2 fe57 	bl	8003554 <HAL_GPIO_WritePin>
            break;
 80108a6:	e008      	b.n	80108ba <apply_led_from_coil+0x7e>
        case 3:
            HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, state);
 80108a8:	7bfb      	ldrb	r3, [r7, #15]
 80108aa:	461a      	mov	r2, r3
 80108ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80108b0:	4804      	ldr	r0, [pc, #16]	@ (80108c4 <apply_led_from_coil+0x88>)
 80108b2:	f7f2 fe4f 	bl	8003554 <HAL_GPIO_WritePin>
            break;
 80108b6:	e000      	b.n	80108ba <apply_led_from_coil+0x7e>
        default:
            /* nothing */
            break;
 80108b8:	bf00      	nop
    }
}
 80108ba:	bf00      	nop
 80108bc:	3710      	adds	r7, #16
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	40020c00 	.word	0x40020c00

080108c8 <Modbus_InitCallbacks>:

void Modbus_InitCallbacks(void)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
    /* initialise storage and apply LEDs to the current coil values (0) */
    memset(usHoldingRegs, 0, sizeof(usHoldingRegs));
 80108ce:	2204      	movs	r2, #4
 80108d0:	2100      	movs	r1, #0
 80108d2:	480f      	ldr	r0, [pc, #60]	@ (8010910 <Modbus_InitCallbacks+0x48>)
 80108d4:	f000 ff4f 	bl	8011776 <memset>
    memset(ucCoils, 0, sizeof(ucCoils));
 80108d8:	2204      	movs	r2, #4
 80108da:	2100      	movs	r1, #0
 80108dc:	480d      	ldr	r0, [pc, #52]	@ (8010914 <Modbus_InitCallbacks+0x4c>)
 80108de:	f000 ff4a 	bl	8011776 <memset>
    for (USHORT i = 0; i < REG_COIL_NCOILS; i++) {
 80108e2:	2300      	movs	r3, #0
 80108e4:	80fb      	strh	r3, [r7, #6]
 80108e6:	e00a      	b.n	80108fe <Modbus_InitCallbacks+0x36>
        apply_led_from_coil(i, ucCoils[i]);
 80108e8:	88fb      	ldrh	r3, [r7, #6]
 80108ea:	4a0a      	ldr	r2, [pc, #40]	@ (8010914 <Modbus_InitCallbacks+0x4c>)
 80108ec:	5cd2      	ldrb	r2, [r2, r3]
 80108ee:	88fb      	ldrh	r3, [r7, #6]
 80108f0:	4611      	mov	r1, r2
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7ff ffa2 	bl	801083c <apply_led_from_coil>
    for (USHORT i = 0; i < REG_COIL_NCOILS; i++) {
 80108f8:	88fb      	ldrh	r3, [r7, #6]
 80108fa:	3301      	adds	r3, #1
 80108fc:	80fb      	strh	r3, [r7, #6]
 80108fe:	88fb      	ldrh	r3, [r7, #6]
 8010900:	2b03      	cmp	r3, #3
 8010902:	d9f1      	bls.n	80108e8 <Modbus_InitCallbacks+0x20>
    }
}
 8010904:	bf00      	nop
 8010906:	bf00      	nop
 8010908:	3708      	adds	r7, #8
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	20008578 	.word	0x20008578
 8010914:	2000857c 	.word	0x2000857c

08010918 <eMBRegHoldingCB>:
 * Holding registers callback
 * usAddress is 1-based (FreeModbus calls with address +1 in many flows)
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegHoldingCB(UCHAR *pucBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b088      	sub	sp, #32
 801091c:	af00      	add	r7, sp, #0
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	4608      	mov	r0, r1
 8010922:	4611      	mov	r1, r2
 8010924:	461a      	mov	r2, r3
 8010926:	4603      	mov	r3, r0
 8010928:	817b      	strh	r3, [r7, #10]
 801092a:	460b      	mov	r3, r1
 801092c:	813b      	strh	r3, [r7, #8]
 801092e:	4613      	mov	r3, r2
 8010930:	71fb      	strb	r3, [r7, #7]
    /* range check */
    if ((usAddress < REG_HOLDING_START) ||
 8010932:	897b      	ldrh	r3, [r7, #10]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d004      	beq.n	8010942 <eMBRegHoldingCB+0x2a>
        (usAddress + usNRegs - 1) > (REG_HOLDING_START + REG_HOLDING_NREGS - 1)) {
 8010938:	897a      	ldrh	r2, [r7, #10]
 801093a:	893b      	ldrh	r3, [r7, #8]
 801093c:	4413      	add	r3, r2
    if ((usAddress < REG_HOLDING_START) ||
 801093e:	2b03      	cmp	r3, #3
 8010940:	dd01      	ble.n	8010946 <eMBRegHoldingCB+0x2e>
        return MB_ENOREG;
 8010942:	2301      	movs	r3, #1
 8010944:	e056      	b.n	80109f4 <eMBRegHoldingCB+0xdc>
    }

    USHORT iRegIndex = (USHORT)(usAddress - REG_HOLDING_START);
 8010946:	897b      	ldrh	r3, [r7, #10]
 8010948:	3b01      	subs	r3, #1
 801094a:	837b      	strh	r3, [r7, #26]

    if (eMode == MB_REG_READ) {
 801094c:	79fb      	ldrb	r3, [r7, #7]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d126      	bne.n	80109a0 <eMBRegHoldingCB+0x88>
        /* copy register(s) to buffer (big-endian: high byte first) */
        for (USHORT i = 0; i < usNRegs; i++) {
 8010952:	2300      	movs	r3, #0
 8010954:	83fb      	strh	r3, [r7, #30]
 8010956:	e01e      	b.n	8010996 <eMBRegHoldingCB+0x7e>
            USHORT val = usHoldingRegs[iRegIndex + i];
 8010958:	8b7a      	ldrh	r2, [r7, #26]
 801095a:	8bfb      	ldrh	r3, [r7, #30]
 801095c:	4413      	add	r3, r2
 801095e:	4a27      	ldr	r2, [pc, #156]	@ (80109fc <eMBRegHoldingCB+0xe4>)
 8010960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010964:	82bb      	strh	r3, [r7, #20]

            /* If this is register 0, increment AFTER reading */
            if ((iRegIndex + i) == 0) {
 8010966:	8b7a      	ldrh	r2, [r7, #26]
 8010968:	8bfb      	ldrh	r3, [r7, #30]
 801096a:	4413      	add	r3, r2
 801096c:	2b00      	cmp	r3, #0
 801096e:	d101      	bne.n	8010974 <eMBRegHoldingCB+0x5c>
            	Modbus_UpdateCounter();            }
 8010970:	f7ff ff54 	bl	801081c <Modbus_UpdateCounter>

            *pucBuffer++ = (UCHAR)(val >> 8);
 8010974:	8abb      	ldrh	r3, [r7, #20]
 8010976:	0a1b      	lsrs	r3, r3, #8
 8010978:	b299      	uxth	r1, r3
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	1c5a      	adds	r2, r3, #1
 801097e:	60fa      	str	r2, [r7, #12]
 8010980:	b2ca      	uxtb	r2, r1
 8010982:	701a      	strb	r2, [r3, #0]
            *pucBuffer++ = (UCHAR)(val & 0xFF);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	1c5a      	adds	r2, r3, #1
 8010988:	60fa      	str	r2, [r7, #12]
 801098a:	8aba      	ldrh	r2, [r7, #20]
 801098c:	b2d2      	uxtb	r2, r2
 801098e:	701a      	strb	r2, [r3, #0]
        for (USHORT i = 0; i < usNRegs; i++) {
 8010990:	8bfb      	ldrh	r3, [r7, #30]
 8010992:	3301      	adds	r3, #1
 8010994:	83fb      	strh	r3, [r7, #30]
 8010996:	8bfa      	ldrh	r2, [r7, #30]
 8010998:	893b      	ldrh	r3, [r7, #8]
 801099a:	429a      	cmp	r2, r3
 801099c:	d3dc      	bcc.n	8010958 <eMBRegHoldingCB+0x40>
 801099e:	e028      	b.n	80109f2 <eMBRegHoldingCB+0xda>
        }
    } else if (eMode == MB_REG_WRITE) {
 80109a0:	79fb      	ldrb	r3, [r7, #7]
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	d123      	bne.n	80109ee <eMBRegHoldingCB+0xd6>
        /* write register(s) from buffer */
        for (USHORT i = 0; i < usNRegs; i++) {
 80109a6:	2300      	movs	r3, #0
 80109a8:	83bb      	strh	r3, [r7, #28]
 80109aa:	e01b      	b.n	80109e4 <eMBRegHoldingCB+0xcc>
            USHORT hi = (USHORT)(*pucBuffer++);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	1c5a      	adds	r2, r3, #1
 80109b0:	60fa      	str	r2, [r7, #12]
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	833b      	strh	r3, [r7, #24]
            USHORT lo = (USHORT)(*pucBuffer++);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	1c5a      	adds	r2, r3, #1
 80109ba:	60fa      	str	r2, [r7, #12]
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	82fb      	strh	r3, [r7, #22]
            usHoldingRegs[iRegIndex + i] = (USHORT)((hi << 8) | lo);
 80109c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80109c4:	021b      	lsls	r3, r3, #8
 80109c6:	b21a      	sxth	r2, r3
 80109c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80109cc:	4313      	orrs	r3, r2
 80109ce:	b219      	sxth	r1, r3
 80109d0:	8b7a      	ldrh	r2, [r7, #26]
 80109d2:	8bbb      	ldrh	r3, [r7, #28]
 80109d4:	4413      	add	r3, r2
 80109d6:	b289      	uxth	r1, r1
 80109d8:	4a08      	ldr	r2, [pc, #32]	@ (80109fc <eMBRegHoldingCB+0xe4>)
 80109da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (USHORT i = 0; i < usNRegs; i++) {
 80109de:	8bbb      	ldrh	r3, [r7, #28]
 80109e0:	3301      	adds	r3, #1
 80109e2:	83bb      	strh	r3, [r7, #28]
 80109e4:	8bba      	ldrh	r2, [r7, #28]
 80109e6:	893b      	ldrh	r3, [r7, #8]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d3df      	bcc.n	80109ac <eMBRegHoldingCB+0x94>
 80109ec:	e001      	b.n	80109f2 <eMBRegHoldingCB+0xda>
        }
    } else {
        return MB_ENOREG;
 80109ee:	2301      	movs	r3, #1
 80109f0:	e000      	b.n	80109f4 <eMBRegHoldingCB+0xdc>
    }

    return MB_ENOERR;
 80109f2:	2300      	movs	r3, #0
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3720      	adds	r7, #32
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}
 80109fc:	20008578 	.word	0x20008578

08010a00 <eMBRegCoilsCB>:
 * usAddress is 1-based
 * Note: Modbus coils are bit-packed in pucBuffer LSB-first.
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegCoilsCB( UCHAR *pucBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode )
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b08c      	sub	sp, #48	@ 0x30
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	60f8      	str	r0, [r7, #12]
 8010a08:	4608      	mov	r0, r1
 8010a0a:	4611      	mov	r1, r2
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	4603      	mov	r3, r0
 8010a10:	817b      	strh	r3, [r7, #10]
 8010a12:	460b      	mov	r3, r1
 8010a14:	813b      	strh	r3, [r7, #8]
 8010a16:	4613      	mov	r3, r2
 8010a18:	71fb      	strb	r3, [r7, #7]
    if ((usAddress < REG_COIL_START) ||
 8010a1a:	897b      	ldrh	r3, [r7, #10]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d004      	beq.n	8010a2a <eMBRegCoilsCB+0x2a>
        (usAddress + usNCoils - 1) > (REG_COIL_START + REG_COIL_NCOILS - 1)) {
 8010a20:	897a      	ldrh	r2, [r7, #10]
 8010a22:	893b      	ldrh	r3, [r7, #8]
 8010a24:	4413      	add	r3, r2
    if ((usAddress < REG_COIL_START) ||
 8010a26:	2b05      	cmp	r3, #5
 8010a28:	dd01      	ble.n	8010a2e <eMBRegCoilsCB+0x2e>
        return MB_ENOREG;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	e097      	b.n	8010b5e <eMBRegCoilsCB+0x15e>
    }

    USHORT iCoilIndex = (USHORT)(usAddress - REG_COIL_START);
 8010a2e:	897b      	ldrh	r3, [r7, #10]
 8010a30:	3b01      	subs	r3, #1
 8010a32:	83fb      	strh	r3, [r7, #30]

    if (eMode == MB_REG_READ) {
 8010a34:	79fb      	ldrb	r3, [r7, #7]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d145      	bne.n	8010ac6 <eMBRegCoilsCB+0xc6>
        /* pack coils into pucBuffer, LSB-first per byte */
        UCHAR currentByte = 0;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        UCHAR bitPos = 0;
 8010a40:	2300      	movs	r3, #0
 8010a42:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        UCHAR *pOut = pucBuffer;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	62bb      	str	r3, [r7, #40]	@ 0x28

        for (USHORT i = 0; i < usNCoils; i++) {
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010a4e:	e02b      	b.n	8010aa8 <eMBRegCoilsCB+0xa8>
            UCHAR val = (ucCoils[iCoilIndex + i] & 0x01) ? 1 : 0;
 8010a50:	8bfa      	ldrh	r2, [r7, #30]
 8010a52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010a54:	4413      	add	r3, r2
 8010a56:	4a44      	ldr	r2, [pc, #272]	@ (8010b68 <eMBRegCoilsCB+0x168>)
 8010a58:	5cd3      	ldrb	r3, [r2, r3]
 8010a5a:	f003 0301 	and.w	r3, r3, #1
 8010a5e:	757b      	strb	r3, [r7, #21]
            currentByte |= (val << bitPos);
 8010a60:	7d7a      	ldrb	r2, [r7, #21]
 8010a62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010a66:	fa02 f303 	lsl.w	r3, r2, r3
 8010a6a:	b25a      	sxtb	r2, r3
 8010a6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010a70:	4313      	orrs	r3, r2
 8010a72:	b25b      	sxtb	r3, r3
 8010a74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            bitPos++;
 8010a78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010a7c:	3301      	adds	r3, #1
 8010a7e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            if (bitPos == 8) {
 8010a82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010a86:	2b08      	cmp	r3, #8
 8010a88:	d10b      	bne.n	8010aa2 <eMBRegCoilsCB+0xa2>
                *pOut++ = currentByte;
 8010a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a8c:	1c5a      	adds	r2, r3, #1
 8010a8e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010a90:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010a94:	701a      	strb	r2, [r3, #0]
                currentByte = 0;
 8010a96:	2300      	movs	r3, #0
 8010a98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                bitPos = 0;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        for (USHORT i = 0; i < usNCoils; i++) {
 8010aa2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010aa8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010aaa:	893b      	ldrh	r3, [r7, #8]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d3cf      	bcc.n	8010a50 <eMBRegCoilsCB+0x50>
            }
        }
        /* any remaining partial byte */
        if (bitPos != 0) {
 8010ab0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d051      	beq.n	8010b5c <eMBRegCoilsCB+0x15c>
            *pOut++ = currentByte;
 8010ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aba:	1c5a      	adds	r2, r3, #1
 8010abc:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010abe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010ac2:	701a      	strb	r2, [r3, #0]
 8010ac4:	e04a      	b.n	8010b5c <eMBRegCoilsCB+0x15c>
        }
    } else if (eMode == MB_REG_WRITE) {
 8010ac6:	79fb      	ldrb	r3, [r7, #7]
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d145      	bne.n	8010b58 <eMBRegCoilsCB+0x158>
        /* unpack pucBuffer and write to coil storage and LEDs */
        UCHAR *pIn = pucBuffer;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	61bb      	str	r3, [r7, #24]
        USHORT byteIndex = 0;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	84bb      	strh	r3, [r7, #36]	@ 0x24
        UCHAR bitIndex = 0;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        for (USHORT i = 0; i < usNCoils; i++) {
 8010ada:	2300      	movs	r3, #0
 8010adc:	843b      	strh	r3, [r7, #32]
 8010ade:	e036      	b.n	8010b4e <eMBRegCoilsCB+0x14e>
            /* ensure we read correct byte */
            UCHAR byte = pIn[byteIndex];
 8010ae0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ae2:	69ba      	ldr	r2, [r7, #24]
 8010ae4:	4413      	add	r3, r2
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	75fb      	strb	r3, [r7, #23]
            UCHAR bit = (byte >> bitIndex) & 0x01;
 8010aea:	7dfa      	ldrb	r2, [r7, #23]
 8010aec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010af0:	fa42 f303 	asr.w	r3, r2, r3
 8010af4:	b2db      	uxtb	r3, r3
 8010af6:	f003 0301 	and.w	r3, r3, #1
 8010afa:	75bb      	strb	r3, [r7, #22]
            ucCoils[iCoilIndex + i] = bit ? 1 : 0;
 8010afc:	7dbb      	ldrb	r3, [r7, #22]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	bf14      	ite	ne
 8010b02:	2301      	movne	r3, #1
 8010b04:	2300      	moveq	r3, #0
 8010b06:	b2d9      	uxtb	r1, r3
 8010b08:	8bfa      	ldrh	r2, [r7, #30]
 8010b0a:	8c3b      	ldrh	r3, [r7, #32]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	4a16      	ldr	r2, [pc, #88]	@ (8010b68 <eMBRegCoilsCB+0x168>)
 8010b10:	54d1      	strb	r1, [r2, r3]
            apply_led_from_coil(iCoilIndex + i, ucCoils[iCoilIndex + i]);
 8010b12:	8bfa      	ldrh	r2, [r7, #30]
 8010b14:	8c3b      	ldrh	r3, [r7, #32]
 8010b16:	4413      	add	r3, r2
 8010b18:	b298      	uxth	r0, r3
 8010b1a:	8bfa      	ldrh	r2, [r7, #30]
 8010b1c:	8c3b      	ldrh	r3, [r7, #32]
 8010b1e:	4413      	add	r3, r2
 8010b20:	4a11      	ldr	r2, [pc, #68]	@ (8010b68 <eMBRegCoilsCB+0x168>)
 8010b22:	5cd3      	ldrb	r3, [r2, r3]
 8010b24:	4619      	mov	r1, r3
 8010b26:	f7ff fe89 	bl	801083c <apply_led_from_coil>

            bitIndex++;
 8010b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010b2e:	3301      	adds	r3, #1
 8010b30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if (bitIndex == 8) {
 8010b34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010b38:	2b08      	cmp	r3, #8
 8010b3a:	d105      	bne.n	8010b48 <eMBRegCoilsCB+0x148>
                bitIndex = 0;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                byteIndex++;
 8010b42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b44:	3301      	adds	r3, #1
 8010b46:	84bb      	strh	r3, [r7, #36]	@ 0x24
        for (USHORT i = 0; i < usNCoils; i++) {
 8010b48:	8c3b      	ldrh	r3, [r7, #32]
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	843b      	strh	r3, [r7, #32]
 8010b4e:	8c3a      	ldrh	r2, [r7, #32]
 8010b50:	893b      	ldrh	r3, [r7, #8]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d3c4      	bcc.n	8010ae0 <eMBRegCoilsCB+0xe0>
 8010b56:	e001      	b.n	8010b5c <eMBRegCoilsCB+0x15c>
            }
        }
    } else {
        return MB_ENOREG;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	e000      	b.n	8010b5e <eMBRegCoilsCB+0x15e>
    }

    return MB_ENOERR;
 8010b5c:	2300      	movs	r3, #0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3730      	adds	r7, #48	@ 0x30
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	2000857c 	.word	0x2000857c

08010b6c <eMBRegInputCB>:
 * Input registers callback
 * usAddress is 1-based
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegInputCB( UCHAR *pucBuffer, USHORT usAddress, USHORT usNRegs )
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	b085      	sub	sp, #20
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	460b      	mov	r3, r1
 8010b76:	807b      	strh	r3, [r7, #2]
 8010b78:	4613      	mov	r3, r2
 8010b7a:	803b      	strh	r3, [r7, #0]
    if ((usAddress < REG_INPUT_START) ||
 8010b7c:	887b      	ldrh	r3, [r7, #2]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d004      	beq.n	8010b8c <eMBRegInputCB+0x20>
        (usAddress + usNRegs - 1) > (REG_INPUT_START + REG_INPUT_NREGS - 1)) {
 8010b82:	887a      	ldrh	r2, [r7, #2]
 8010b84:	883b      	ldrh	r3, [r7, #0]
 8010b86:	4413      	add	r3, r2
    if ((usAddress < REG_INPUT_START) ||
 8010b88:	2b03      	cmp	r3, #3
 8010b8a:	dd01      	ble.n	8010b90 <eMBRegInputCB+0x24>
        return MB_ENOREG;
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	e022      	b.n	8010bd6 <eMBRegInputCB+0x6a>
    }

    USHORT iRegIndex = (USHORT)(usAddress - REG_INPUT_START);
 8010b90:	887b      	ldrh	r3, [r7, #2]
 8010b92:	3b01      	subs	r3, #1
 8010b94:	81bb      	strh	r3, [r7, #12]

    /* copy register(s) to buffer (big-endian) */
    for (USHORT i = 0; i < usNRegs; i++) {
 8010b96:	2300      	movs	r3, #0
 8010b98:	81fb      	strh	r3, [r7, #14]
 8010b9a:	e017      	b.n	8010bcc <eMBRegInputCB+0x60>
        USHORT val = usInputRegs[iRegIndex + i];
 8010b9c:	89ba      	ldrh	r2, [r7, #12]
 8010b9e:	89fb      	ldrh	r3, [r7, #14]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	4a10      	ldr	r2, [pc, #64]	@ (8010be4 <eMBRegInputCB+0x78>)
 8010ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ba8:	817b      	strh	r3, [r7, #10]
        *pucBuffer++ = (UCHAR)(val >> 8);
 8010baa:	897b      	ldrh	r3, [r7, #10]
 8010bac:	0a1b      	lsrs	r3, r3, #8
 8010bae:	b299      	uxth	r1, r3
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	1c5a      	adds	r2, r3, #1
 8010bb4:	607a      	str	r2, [r7, #4]
 8010bb6:	b2ca      	uxtb	r2, r1
 8010bb8:	701a      	strb	r2, [r3, #0]
        *pucBuffer++ = (UCHAR)(val & 0xFF);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	1c5a      	adds	r2, r3, #1
 8010bbe:	607a      	str	r2, [r7, #4]
 8010bc0:	897a      	ldrh	r2, [r7, #10]
 8010bc2:	b2d2      	uxtb	r2, r2
 8010bc4:	701a      	strb	r2, [r3, #0]
    for (USHORT i = 0; i < usNRegs; i++) {
 8010bc6:	89fb      	ldrh	r3, [r7, #14]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	81fb      	strh	r3, [r7, #14]
 8010bcc:	89fa      	ldrh	r2, [r7, #14]
 8010bce:	883b      	ldrh	r3, [r7, #0]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d3e3      	bcc.n	8010b9c <eMBRegInputCB+0x30>
    }

    return MB_ENOERR;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3714      	adds	r7, #20
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be0:	4770      	bx	lr
 8010be2:	bf00      	nop
 8010be4:	20008580 	.word	0x20008580

08010be8 <eMBRegDiscreteCB>:
 * usAddress is 1-based
 * Note: packed into pucBuffer LSB-first per byte
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegDiscreteCB( UCHAR *pucBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8010be8:	b480      	push	{r7}
 8010bea:	b087      	sub	sp, #28
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	807b      	strh	r3, [r7, #2]
 8010bf4:	4613      	mov	r3, r2
 8010bf6:	803b      	strh	r3, [r7, #0]
    if ((usAddress < REG_DISC_START) ||
 8010bf8:	887b      	ldrh	r3, [r7, #2]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d004      	beq.n	8010c08 <eMBRegDiscreteCB+0x20>
        (usAddress + usNDiscrete - 1) > (REG_DISC_START + REG_DISC_NDISCRETES - 1)) {
 8010bfe:	887a      	ldrh	r2, [r7, #2]
 8010c00:	883b      	ldrh	r3, [r7, #0]
 8010c02:	4413      	add	r3, r2
    if ((usAddress < REG_DISC_START) ||
 8010c04:	2b05      	cmp	r3, #5
 8010c06:	dd01      	ble.n	8010c0c <eMBRegDiscreteCB+0x24>
        return MB_ENOREG;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	e03c      	b.n	8010c86 <eMBRegDiscreteCB+0x9e>
    }

    USHORT iDiscIndex = (USHORT)(usAddress - REG_DISC_START);
 8010c0c:	887b      	ldrh	r3, [r7, #2]
 8010c0e:	3b01      	subs	r3, #1
 8010c10:	81bb      	strh	r3, [r7, #12]

    UCHAR currentByte = 0;
 8010c12:	2300      	movs	r3, #0
 8010c14:	75fb      	strb	r3, [r7, #23]
    UCHAR bitPos = 0;
 8010c16:	2300      	movs	r3, #0
 8010c18:	75bb      	strb	r3, [r7, #22]
    UCHAR *pOut = pucBuffer;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	613b      	str	r3, [r7, #16]

    for (USHORT i = 0; i < usNDiscrete; i++) {
 8010c1e:	2300      	movs	r3, #0
 8010c20:	81fb      	strh	r3, [r7, #14]
 8010c22:	e023      	b.n	8010c6c <eMBRegDiscreteCB+0x84>
        UCHAR val = (ucDiscreteInputs[iDiscIndex + i] & 0x01) ? 1 : 0;
 8010c24:	89ba      	ldrh	r2, [r7, #12]
 8010c26:	89fb      	ldrh	r3, [r7, #14]
 8010c28:	4413      	add	r3, r2
 8010c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8010c94 <eMBRegDiscreteCB+0xac>)
 8010c2c:	5cd3      	ldrb	r3, [r2, r3]
 8010c2e:	f003 0301 	and.w	r3, r3, #1
 8010c32:	72fb      	strb	r3, [r7, #11]
        currentByte |= (val << bitPos);
 8010c34:	7afa      	ldrb	r2, [r7, #11]
 8010c36:	7dbb      	ldrb	r3, [r7, #22]
 8010c38:	fa02 f303 	lsl.w	r3, r2, r3
 8010c3c:	b25a      	sxtb	r2, r3
 8010c3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c42:	4313      	orrs	r3, r2
 8010c44:	b25b      	sxtb	r3, r3
 8010c46:	75fb      	strb	r3, [r7, #23]
        bitPos++;
 8010c48:	7dbb      	ldrb	r3, [r7, #22]
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	75bb      	strb	r3, [r7, #22]
        if (bitPos == 8) {
 8010c4e:	7dbb      	ldrb	r3, [r7, #22]
 8010c50:	2b08      	cmp	r3, #8
 8010c52:	d108      	bne.n	8010c66 <eMBRegDiscreteCB+0x7e>
            *pOut++ = currentByte;
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	1c5a      	adds	r2, r3, #1
 8010c58:	613a      	str	r2, [r7, #16]
 8010c5a:	7dfa      	ldrb	r2, [r7, #23]
 8010c5c:	701a      	strb	r2, [r3, #0]
            currentByte = 0;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	75fb      	strb	r3, [r7, #23]
            bitPos = 0;
 8010c62:	2300      	movs	r3, #0
 8010c64:	75bb      	strb	r3, [r7, #22]
    for (USHORT i = 0; i < usNDiscrete; i++) {
 8010c66:	89fb      	ldrh	r3, [r7, #14]
 8010c68:	3301      	adds	r3, #1
 8010c6a:	81fb      	strh	r3, [r7, #14]
 8010c6c:	89fa      	ldrh	r2, [r7, #14]
 8010c6e:	883b      	ldrh	r3, [r7, #0]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d3d7      	bcc.n	8010c24 <eMBRegDiscreteCB+0x3c>
        }
    }

    /* flush last partial byte */
    if (bitPos != 0) {
 8010c74:	7dbb      	ldrb	r3, [r7, #22]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d004      	beq.n	8010c84 <eMBRegDiscreteCB+0x9c>
        *pOut++ = currentByte;
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	1c5a      	adds	r2, r3, #1
 8010c7e:	613a      	str	r2, [r7, #16]
 8010c80:	7dfa      	ldrb	r2, [r7, #23]
 8010c82:	701a      	strb	r2, [r3, #0]
    }

    return MB_ENOERR;
 8010c84:	2300      	movs	r3, #0
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	371c      	adds	r7, #28
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop
 8010c94:	20008584 	.word	0x20008584

08010c98 <Modbus_SetHolding>:
    }
    return 0; /* out-of-range safe default */
}

void Modbus_SetHolding(USHORT index, USHORT value)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	460a      	mov	r2, r1
 8010ca2:	80fb      	strh	r3, [r7, #6]
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	80bb      	strh	r3, [r7, #4]
    if (index < REG_HOLDING_NREGS) {
 8010ca8:	88fb      	ldrh	r3, [r7, #6]
 8010caa:	2b01      	cmp	r3, #1
 8010cac:	d804      	bhi.n	8010cb8 <Modbus_SetHolding+0x20>
        usHoldingRegs[index] = value;
 8010cae:	88fb      	ldrh	r3, [r7, #6]
 8010cb0:	4904      	ldr	r1, [pc, #16]	@ (8010cc4 <Modbus_SetHolding+0x2c>)
 8010cb2:	88ba      	ldrh	r2, [r7, #4]
 8010cb4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8010cb8:	bf00      	nop
 8010cba:	370c      	adds	r7, #12
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr
 8010cc4:	20008578 	.word	0x20008578

08010cc8 <xMBPortEventInit>:
static volatile BOOL         s_event_pending = FALSE;
static volatile eMBEventType s_event_queued  = EV_READY;

/* ----------------------- TCP functions ---------------------- */
BOOL xMBPortEventInit(void)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8010ccc:	b672      	cpsid	i
}
 8010cce:	bf00      	nop
    __disable_irq();
    s_event_pending = FALSE;
 8010cd0:	4b06      	ldr	r3, [pc, #24]	@ (8010cec <xMBPortEventInit+0x24>)
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	701a      	strb	r2, [r3, #0]
    s_event_queued  = EV_READY;
 8010cd6:	4b06      	ldr	r3, [pc, #24]	@ (8010cf0 <xMBPortEventInit+0x28>)
 8010cd8:	2200      	movs	r2, #0
 8010cda:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8010cdc:	b662      	cpsie	i
}
 8010cde:	bf00      	nop
    __enable_irq();
    return TRUE;
 8010ce0:	2301      	movs	r3, #1
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr
 8010cec:	20008594 	.word	0x20008594
 8010cf0:	20008595 	.word	0x20008595

08010cf4 <xMBPortEventPost>:

BOOL xMBPortEventPost(eMBEventType eEvent)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b086      	sub	sp, #24
 8010cf8:	af02      	add	r7, sp, #8
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	71fb      	strb	r3, [r7, #7]
    DEBUG_PRINTF("%s -> post event=%d\r\n", __func__, eEvent);
 8010cfe:	79fb      	ldrb	r3, [r7, #7]
 8010d00:	9300      	str	r3, [sp, #0]
 8010d02:	4b0f      	ldr	r3, [pc, #60]	@ (8010d40 <xMBPortEventPost+0x4c>)
 8010d04:	4a0f      	ldr	r2, [pc, #60]	@ (8010d44 <xMBPortEventPost+0x50>)
 8010d06:	2140      	movs	r1, #64	@ 0x40
 8010d08:	480f      	ldr	r0, [pc, #60]	@ (8010d48 <xMBPortEventPost+0x54>)
 8010d0a:	f000 fc91 	bl	8011630 <sniprintf>
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010d18:	490b      	ldr	r1, [pc, #44]	@ (8010d48 <xMBPortEventPost+0x54>)
 8010d1a:	480c      	ldr	r0, [pc, #48]	@ (8010d4c <xMBPortEventPost+0x58>)
 8010d1c:	f7f3 fc3c 	bl	8004598 <HAL_UART_Transmit>
  __ASM volatile ("cpsid i" : : : "memory");
 8010d20:	b672      	cpsid	i
}
 8010d22:	bf00      	nop
    __disable_irq();
    s_event_queued  = eEvent;
 8010d24:	4a0a      	ldr	r2, [pc, #40]	@ (8010d50 <xMBPortEventPost+0x5c>)
 8010d26:	79fb      	ldrb	r3, [r7, #7]
 8010d28:	7013      	strb	r3, [r2, #0]
    s_event_pending = TRUE;
 8010d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8010d54 <xMBPortEventPost+0x60>)
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8010d30:	b662      	cpsie	i
}
 8010d32:	bf00      	nop
    __enable_irq();

    return TRUE;
 8010d34:	2301      	movs	r3, #1
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3710      	adds	r7, #16
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	08015460 	.word	0x08015460
 8010d44:	08015204 	.word	0x08015204
 8010d48:	200001fc 	.word	0x200001fc
 8010d4c:	200001b4 	.word	0x200001b4
 8010d50:	20008595 	.word	0x20008595
 8010d54:	20008594 	.word	0x20008594

08010d58 <xMBPortEventGet>:

BOOL xMBPortEventGet(eMBEventType *eEvent)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b084      	sub	sp, #16
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
    if (!eEvent) return FALSE;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d101      	bne.n	8010d6a <xMBPortEventGet+0x12>
 8010d66:	2300      	movs	r3, #0
 8010d68:	e025      	b.n	8010db6 <xMBPortEventGet+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 8010d6a:	b672      	cpsid	i
}
 8010d6c:	bf00      	nop

    __disable_irq();
    if (s_event_pending) {
 8010d6e:	4b14      	ldr	r3, [pc, #80]	@ (8010dc0 <xMBPortEventGet+0x68>)
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	b2db      	uxtb	r3, r3
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d01b      	beq.n	8010db0 <xMBPortEventGet+0x58>
        *eEvent        = s_event_queued;
 8010d78:	4b12      	ldr	r3, [pc, #72]	@ (8010dc4 <xMBPortEventGet+0x6c>)
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	b2da      	uxtb	r2, r3
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	701a      	strb	r2, [r3, #0]
        s_event_pending = FALSE;
 8010d82:	4b0f      	ldr	r3, [pc, #60]	@ (8010dc0 <xMBPortEventGet+0x68>)
 8010d84:	2200      	movs	r2, #0
 8010d86:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8010d88:	b662      	cpsie	i
}
 8010d8a:	bf00      	nop
        __enable_irq();

        DEBUG_PRINTF(" -> got event=%d\r\n", *eEvent);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	4a0d      	ldr	r2, [pc, #52]	@ (8010dc8 <xMBPortEventGet+0x70>)
 8010d92:	2140      	movs	r1, #64	@ 0x40
 8010d94:	480d      	ldr	r0, [pc, #52]	@ (8010dcc <xMBPortEventGet+0x74>)
 8010d96:	f000 fc4b 	bl	8011630 <sniprintf>
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010da4:	4909      	ldr	r1, [pc, #36]	@ (8010dcc <xMBPortEventGet+0x74>)
 8010da6:	480a      	ldr	r0, [pc, #40]	@ (8010dd0 <xMBPortEventGet+0x78>)
 8010da8:	f7f3 fbf6 	bl	8004598 <HAL_UART_Transmit>
        return TRUE;
 8010dac:	2301      	movs	r3, #1
 8010dae:	e002      	b.n	8010db6 <xMBPortEventGet+0x5e>
  __ASM volatile ("cpsie i" : : : "memory");
 8010db0:	b662      	cpsie	i
}
 8010db2:	bf00      	nop
    }
    __enable_irq();
    return FALSE;
 8010db4:	2300      	movs	r3, #0
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3710      	adds	r7, #16
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	20008594 	.word	0x20008594
 8010dc4:	20008595 	.word	0x20008595
 8010dc8:	0801521c 	.word	0x0801521c
 8010dcc:	200001fc 	.word	0x200001fc
 8010dd0:	200001b4 	.word	0x200001b4

08010dd4 <xMBTCPPortInit>:

/* ----------------------- TCP functions ---------------------- */
BOOL xMBTCPPortInit(USHORT usTCPPort)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b084      	sub	sp, #16
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	4603      	mov	r3, r0
 8010ddc:	80fb      	strh	r3, [r7, #6]
    DEBUG_PRINTF("%s\r\n", __func__);
 8010dde:	4b24      	ldr	r3, [pc, #144]	@ (8010e70 <xMBTCPPortInit+0x9c>)
 8010de0:	4a24      	ldr	r2, [pc, #144]	@ (8010e74 <xMBTCPPortInit+0xa0>)
 8010de2:	2140      	movs	r1, #64	@ 0x40
 8010de4:	4824      	ldr	r0, [pc, #144]	@ (8010e78 <xMBTCPPortInit+0xa4>)
 8010de6:	f000 fc23 	bl	8011630 <sniprintf>
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	b29a      	uxth	r2, r3
 8010df0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010df4:	4920      	ldr	r1, [pc, #128]	@ (8010e78 <xMBTCPPortInit+0xa4>)
 8010df6:	4821      	ldr	r0, [pc, #132]	@ (8010e7c <xMBTCPPortInit+0xa8>)
 8010df8:	f7f3 fbce 	bl	8004598 <HAL_UART_Transmit>
    mb_listener = tcp_new();
 8010dfc:	f7f7 fdfe 	bl	80089fc <tcp_new>
 8010e00:	4603      	mov	r3, r0
 8010e02:	4a1f      	ldr	r2, [pc, #124]	@ (8010e80 <xMBTCPPortInit+0xac>)
 8010e04:	6013      	str	r3, [r2, #0]
    if (!mb_listener) return FALSE;
 8010e06:	4b1e      	ldr	r3, [pc, #120]	@ (8010e80 <xMBTCPPortInit+0xac>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d101      	bne.n	8010e12 <xMBTCPPortInit+0x3e>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	e02a      	b.n	8010e68 <xMBTCPPortInit+0x94>

    if (tcp_bind(mb_listener, IP_ADDR_ANY, usTCPPort) != ERR_OK)
 8010e12:	4b1b      	ldr	r3, [pc, #108]	@ (8010e80 <xMBTCPPortInit+0xac>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	88fa      	ldrh	r2, [r7, #6]
 8010e18:	491a      	ldr	r1, [pc, #104]	@ (8010e84 <xMBTCPPortInit+0xb0>)
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7f6 fd66 	bl	80078ec <tcp_bind>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d001      	beq.n	8010e2a <xMBTCPPortInit+0x56>
        return FALSE;
 8010e26:	2300      	movs	r3, #0
 8010e28:	e01e      	b.n	8010e68 <xMBTCPPortInit+0x94>

    mb_listener = tcp_listen(mb_listener);
 8010e2a:	4b15      	ldr	r3, [pc, #84]	@ (8010e80 <xMBTCPPortInit+0xac>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	21ff      	movs	r1, #255	@ 0xff
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7f6 fe13 	bl	8007a5c <tcp_listen_with_backlog>
 8010e36:	4603      	mov	r3, r0
 8010e38:	4a11      	ldr	r2, [pc, #68]	@ (8010e80 <xMBTCPPortInit+0xac>)
 8010e3a:	6013      	str	r3, [r2, #0]
    tcp_accept(mb_listener, mb_accept);
 8010e3c:	4b10      	ldr	r3, [pc, #64]	@ (8010e80 <xMBTCPPortInit+0xac>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	4911      	ldr	r1, [pc, #68]	@ (8010e88 <xMBTCPPortInit+0xb4>)
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7f7 fe04 	bl	8008a50 <tcp_accept>

    DEBUG_PRINTF(" -> listening on TCP port %u\r\n", (unsigned)usTCPPort);
 8010e48:	88fb      	ldrh	r3, [r7, #6]
 8010e4a:	4a10      	ldr	r2, [pc, #64]	@ (8010e8c <xMBTCPPortInit+0xb8>)
 8010e4c:	2140      	movs	r1, #64	@ 0x40
 8010e4e:	480a      	ldr	r0, [pc, #40]	@ (8010e78 <xMBTCPPortInit+0xa4>)
 8010e50:	f000 fbee 	bl	8011630 <sniprintf>
 8010e54:	60b8      	str	r0, [r7, #8]
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010e5e:	4906      	ldr	r1, [pc, #24]	@ (8010e78 <xMBTCPPortInit+0xa4>)
 8010e60:	4806      	ldr	r0, [pc, #24]	@ (8010e7c <xMBTCPPortInit+0xa8>)
 8010e62:	f7f3 fb99 	bl	8004598 <HAL_UART_Transmit>
    return TRUE;
 8010e66:	2301      	movs	r3, #1
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3710      	adds	r7, #16
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	08015474 	.word	0x08015474
 8010e74:	08015230 	.word	0x08015230
 8010e78:	200001fc 	.word	0x200001fc
 8010e7c:	200001b4 	.word	0x200001b4
 8010e80:	20008588 	.word	0x20008588
 8010e84:	0801544c 	.word	0x0801544c
 8010e88:	08011059 	.word	0x08011059
 8010e8c:	08015238 	.word	0x08015238

08010e90 <vMBTCPPortDisable>:
        mb_listener = NULL;
    }
}

void vMBTCPPortDisable(void)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
    DEBUG_PRINTF("%s\r\n", __func__);
 8010e96:	4b15      	ldr	r3, [pc, #84]	@ (8010eec <vMBTCPPortDisable+0x5c>)
 8010e98:	4a15      	ldr	r2, [pc, #84]	@ (8010ef0 <vMBTCPPortDisable+0x60>)
 8010e9a:	2140      	movs	r1, #64	@ 0x40
 8010e9c:	4815      	ldr	r0, [pc, #84]	@ (8010ef4 <vMBTCPPortDisable+0x64>)
 8010e9e:	f000 fbc7 	bl	8011630 <sniprintf>
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	b29a      	uxth	r2, r3
 8010ea8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010eac:	4911      	ldr	r1, [pc, #68]	@ (8010ef4 <vMBTCPPortDisable+0x64>)
 8010eae:	4812      	ldr	r0, [pc, #72]	@ (8010ef8 <vMBTCPPortDisable+0x68>)
 8010eb0:	f7f3 fb72 	bl	8004598 <HAL_UART_Transmit>
    if (mb_client) {
 8010eb4:	4b11      	ldr	r3, [pc, #68]	@ (8010efc <vMBTCPPortDisable+0x6c>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d007      	beq.n	8010ecc <vMBTCPPortDisable+0x3c>
        tcp_close(mb_client);
 8010ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8010efc <vMBTCPPortDisable+0x6c>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7f6 fc1d 	bl	8007700 <tcp_close>
        mb_client = NULL;
 8010ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8010efc <vMBTCPPortDisable+0x6c>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	601a      	str	r2, [r3, #0]
    }
    if (rx_pbuf) {
 8010ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8010f00 <vMBTCPPortDisable+0x70>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d007      	beq.n	8010ee4 <vMBTCPPortDisable+0x54>
        pbuf_free(rx_pbuf);
 8010ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8010f00 <vMBTCPPortDisable+0x70>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7f5 ff73 	bl	8006dc4 <pbuf_free>
        rx_pbuf = NULL;
 8010ede:	4b08      	ldr	r3, [pc, #32]	@ (8010f00 <vMBTCPPortDisable+0x70>)
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	601a      	str	r2, [r3, #0]
    }
}
 8010ee4:	bf00      	nop
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}
 8010eec:	08015484 	.word	0x08015484
 8010ef0:	08015230 	.word	0x08015230
 8010ef4:	200001fc 	.word	0x200001fc
 8010ef8:	200001b4 	.word	0x200001b4
 8010efc:	2000858c 	.word	0x2000858c
 8010f00:	20008590 	.word	0x20008590

08010f04 <xMBTCPPortGetRequest>:

BOOL xMBTCPPortGetRequest(UCHAR **ppucMBTCPFrame, USHORT *pusLength)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
    DEBUG_PRINTF("%s\r\n", __func__);
 8010f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8010f88 <xMBTCPPortGetRequest+0x84>)
 8010f10:	4a1e      	ldr	r2, [pc, #120]	@ (8010f8c <xMBTCPPortGetRequest+0x88>)
 8010f12:	2140      	movs	r1, #64	@ 0x40
 8010f14:	481e      	ldr	r0, [pc, #120]	@ (8010f90 <xMBTCPPortGetRequest+0x8c>)
 8010f16:	f000 fb8b 	bl	8011630 <sniprintf>
 8010f1a:	60f8      	str	r0, [r7, #12]
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f24:	491a      	ldr	r1, [pc, #104]	@ (8010f90 <xMBTCPPortGetRequest+0x8c>)
 8010f26:	481b      	ldr	r0, [pc, #108]	@ (8010f94 <xMBTCPPortGetRequest+0x90>)
 8010f28:	f7f3 fb36 	bl	8004598 <HAL_UART_Transmit>
    if (!rx_pbuf) return FALSE;
 8010f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8010f98 <xMBTCPPortGetRequest+0x94>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d101      	bne.n	8010f38 <xMBTCPPortGetRequest+0x34>
 8010f34:	2300      	movs	r3, #0
 8010f36:	e022      	b.n	8010f7e <xMBTCPPortGetRequest+0x7a>

    *ppucMBTCPFrame = rx_pbuf->payload;
 8010f38:	4b17      	ldr	r3, [pc, #92]	@ (8010f98 <xMBTCPPortGetRequest+0x94>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	685a      	ldr	r2, [r3, #4]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	601a      	str	r2, [r3, #0]
    *pusLength      = rx_pbuf->len;
 8010f42:	4b15      	ldr	r3, [pc, #84]	@ (8010f98 <xMBTCPPortGetRequest+0x94>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	895a      	ldrh	r2, [r3, #10]
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	801a      	strh	r2, [r3, #0]

    DEBUG_PRINTF(" -> handing out %u bytes\r\n", (unsigned)*pusLength);
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	881b      	ldrh	r3, [r3, #0]
 8010f50:	4a12      	ldr	r2, [pc, #72]	@ (8010f9c <xMBTCPPortGetRequest+0x98>)
 8010f52:	2140      	movs	r1, #64	@ 0x40
 8010f54:	480e      	ldr	r0, [pc, #56]	@ (8010f90 <xMBTCPPortGetRequest+0x8c>)
 8010f56:	f000 fb6b 	bl	8011630 <sniprintf>
 8010f5a:	60b8      	str	r0, [r7, #8]
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	b29a      	uxth	r2, r3
 8010f60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f64:	490a      	ldr	r1, [pc, #40]	@ (8010f90 <xMBTCPPortGetRequest+0x8c>)
 8010f66:	480b      	ldr	r0, [pc, #44]	@ (8010f94 <xMBTCPPortGetRequest+0x90>)
 8010f68:	f7f3 fb16 	bl	8004598 <HAL_UART_Transmit>

    pbuf_free(rx_pbuf);
 8010f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f98 <xMBTCPPortGetRequest+0x94>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7f5 ff27 	bl	8006dc4 <pbuf_free>
    rx_pbuf = NULL;
 8010f76:	4b08      	ldr	r3, [pc, #32]	@ (8010f98 <xMBTCPPortGetRequest+0x94>)
 8010f78:	2200      	movs	r2, #0
 8010f7a:	601a      	str	r2, [r3, #0]
    return TRUE;
 8010f7c:	2301      	movs	r3, #1
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3710      	adds	r7, #16
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	08015498 	.word	0x08015498
 8010f8c:	08015230 	.word	0x08015230
 8010f90:	200001fc 	.word	0x200001fc
 8010f94:	200001b4 	.word	0x200001b4
 8010f98:	20008590 	.word	0x20008590
 8010f9c:	08015258 	.word	0x08015258

08010fa0 <xMBTCPPortSendResponse>:

BOOL xMBTCPPortSendResponse(const UCHAR *pucMBTCPFrame, USHORT usLength)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b086      	sub	sp, #24
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	460b      	mov	r3, r1
 8010faa:	807b      	strh	r3, [r7, #2]
    DEBUG_PRINTF("%s\r\n", __func__);
 8010fac:	4b23      	ldr	r3, [pc, #140]	@ (801103c <xMBTCPPortSendResponse+0x9c>)
 8010fae:	4a24      	ldr	r2, [pc, #144]	@ (8011040 <xMBTCPPortSendResponse+0xa0>)
 8010fb0:	2140      	movs	r1, #64	@ 0x40
 8010fb2:	4824      	ldr	r0, [pc, #144]	@ (8011044 <xMBTCPPortSendResponse+0xa4>)
 8010fb4:	f000 fb3c 	bl	8011630 <sniprintf>
 8010fb8:	6178      	str	r0, [r7, #20]
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010fc2:	4920      	ldr	r1, [pc, #128]	@ (8011044 <xMBTCPPortSendResponse+0xa4>)
 8010fc4:	4820      	ldr	r0, [pc, #128]	@ (8011048 <xMBTCPPortSendResponse+0xa8>)
 8010fc6:	f7f3 fae7 	bl	8004598 <HAL_UART_Transmit>
    if (!mb_client) {
 8010fca:	4b20      	ldr	r3, [pc, #128]	@ (801104c <xMBTCPPortSendResponse+0xac>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d10f      	bne.n	8010ff2 <xMBTCPPortSendResponse+0x52>
        DEBUG_PRINTF(" -> no client\r\n");
 8010fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8011050 <xMBTCPPortSendResponse+0xb0>)
 8010fd4:	2140      	movs	r1, #64	@ 0x40
 8010fd6:	481b      	ldr	r0, [pc, #108]	@ (8011044 <xMBTCPPortSendResponse+0xa4>)
 8010fd8:	f000 fb2a 	bl	8011630 <sniprintf>
 8010fdc:	60f8      	str	r0, [r7, #12]
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	b29a      	uxth	r2, r3
 8010fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010fe6:	4917      	ldr	r1, [pc, #92]	@ (8011044 <xMBTCPPortSendResponse+0xa4>)
 8010fe8:	4817      	ldr	r0, [pc, #92]	@ (8011048 <xMBTCPPortSendResponse+0xa8>)
 8010fea:	f7f3 fad5 	bl	8004598 <HAL_UART_Transmit>
        return FALSE;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	e020      	b.n	8011034 <xMBTCPPortSendResponse+0x94>
    }

    if (tcp_write(mb_client, pucMBTCPFrame, usLength, TCP_WRITE_FLAG_COPY) != ERR_OK)
 8010ff2:	4b16      	ldr	r3, [pc, #88]	@ (801104c <xMBTCPPortSendResponse+0xac>)
 8010ff4:	6818      	ldr	r0, [r3, #0]
 8010ff6:	887a      	ldrh	r2, [r7, #2]
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	6879      	ldr	r1, [r7, #4]
 8010ffc:	f7fa fbbc 	bl	800b778 <tcp_write>
 8011000:	4603      	mov	r3, r0
 8011002:	2b00      	cmp	r3, #0
 8011004:	d001      	beq.n	801100a <xMBTCPPortSendResponse+0x6a>
        return FALSE;
 8011006:	2300      	movs	r3, #0
 8011008:	e014      	b.n	8011034 <xMBTCPPortSendResponse+0x94>

    tcp_output(mb_client);
 801100a:	4b10      	ldr	r3, [pc, #64]	@ (801104c <xMBTCPPortSendResponse+0xac>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	4618      	mov	r0, r3
 8011010:	f7fb f99c 	bl	800c34c <tcp_output>

    DEBUG_PRINTF(" -> sent %u bytes\r\n", (unsigned)usLength);
 8011014:	887b      	ldrh	r3, [r7, #2]
 8011016:	4a0f      	ldr	r2, [pc, #60]	@ (8011054 <xMBTCPPortSendResponse+0xb4>)
 8011018:	2140      	movs	r1, #64	@ 0x40
 801101a:	480a      	ldr	r0, [pc, #40]	@ (8011044 <xMBTCPPortSendResponse+0xa4>)
 801101c:	f000 fb08 	bl	8011630 <sniprintf>
 8011020:	6138      	str	r0, [r7, #16]
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	b29a      	uxth	r2, r3
 8011026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801102a:	4906      	ldr	r1, [pc, #24]	@ (8011044 <xMBTCPPortSendResponse+0xa4>)
 801102c:	4806      	ldr	r0, [pc, #24]	@ (8011048 <xMBTCPPortSendResponse+0xa8>)
 801102e:	f7f3 fab3 	bl	8004598 <HAL_UART_Transmit>
    return TRUE;
 8011032:	2301      	movs	r3, #1
}
 8011034:	4618      	mov	r0, r3
 8011036:	3718      	adds	r7, #24
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	080154b0 	.word	0x080154b0
 8011040:	08015230 	.word	0x08015230
 8011044:	200001fc 	.word	0x200001fc
 8011048:	200001b4 	.word	0x200001b4
 801104c:	2000858c 	.word	0x2000858c
 8011050:	08015274 	.word	0x08015274
 8011054:	08015284 	.word	0x08015284

08011058 <mb_accept>:

/* ----------------------- lwIP callbacks ---------------------- */
static err_t mb_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b086      	sub	sp, #24
 801105c:	af00      	add	r7, sp, #0
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	4613      	mov	r3, r2
 8011064:	71fb      	strb	r3, [r7, #7]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011066:	4b17      	ldr	r3, [pc, #92]	@ (80110c4 <mb_accept+0x6c>)
 8011068:	4a17      	ldr	r2, [pc, #92]	@ (80110c8 <mb_accept+0x70>)
 801106a:	2140      	movs	r1, #64	@ 0x40
 801106c:	4817      	ldr	r0, [pc, #92]	@ (80110cc <mb_accept+0x74>)
 801106e:	f000 fadf 	bl	8011630 <sniprintf>
 8011072:	6178      	str	r0, [r7, #20]
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	b29a      	uxth	r2, r3
 8011078:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801107c:	4913      	ldr	r1, [pc, #76]	@ (80110cc <mb_accept+0x74>)
 801107e:	4814      	ldr	r0, [pc, #80]	@ (80110d0 <mb_accept+0x78>)
 8011080:	f7f3 fa8a 	bl	8004598 <HAL_UART_Transmit>
    (void)arg; (void)err;

    mb_client = newpcb;
 8011084:	4a13      	ldr	r2, [pc, #76]	@ (80110d4 <mb_accept+0x7c>)
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	6013      	str	r3, [r2, #0]
    tcp_recv(mb_client, mb_recv);
 801108a:	4b12      	ldr	r3, [pc, #72]	@ (80110d4 <mb_accept+0x7c>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	4912      	ldr	r1, [pc, #72]	@ (80110d8 <mb_accept+0x80>)
 8011090:	4618      	mov	r0, r3
 8011092:	f7f7 fcbb 	bl	8008a0c <tcp_recv>

    DEBUG_PRINTF(" -> client connected\r\n");
 8011096:	4a11      	ldr	r2, [pc, #68]	@ (80110dc <mb_accept+0x84>)
 8011098:	2140      	movs	r1, #64	@ 0x40
 801109a:	480c      	ldr	r0, [pc, #48]	@ (80110cc <mb_accept+0x74>)
 801109c:	f000 fac8 	bl	8011630 <sniprintf>
 80110a0:	6138      	str	r0, [r7, #16]
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80110aa:	4908      	ldr	r1, [pc, #32]	@ (80110cc <mb_accept+0x74>)
 80110ac:	4808      	ldr	r0, [pc, #32]	@ (80110d0 <mb_accept+0x78>)
 80110ae:	f7f3 fa73 	bl	8004598 <HAL_UART_Transmit>

    xMBPortEventPost(EV_READY);
 80110b2:	2000      	movs	r0, #0
 80110b4:	f7ff fe1e 	bl	8010cf4 <xMBPortEventPost>
    return ERR_OK;
 80110b8:	2300      	movs	r3, #0
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3718      	adds	r7, #24
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	080154c8 	.word	0x080154c8
 80110c8:	08015230 	.word	0x08015230
 80110cc:	200001fc 	.word	0x200001fc
 80110d0:	200001b4 	.word	0x200001b4
 80110d4:	2000858c 	.word	0x2000858c
 80110d8:	080110e1 	.word	0x080110e1
 80110dc:	08015298 	.word	0x08015298

080110e0 <mb_recv>:

static err_t mb_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80110e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110e2:	b095      	sub	sp, #84	@ 0x54
 80110e4:	af08      	add	r7, sp, #32
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	607a      	str	r2, [r7, #4]
 80110ec:	70fb      	strb	r3, [r7, #3]
    DEBUG_PRINTF("%s\r\n", __func__);
 80110ee:	4b60      	ldr	r3, [pc, #384]	@ (8011270 <mb_recv+0x190>)
 80110f0:	4a60      	ldr	r2, [pc, #384]	@ (8011274 <mb_recv+0x194>)
 80110f2:	2140      	movs	r1, #64	@ 0x40
 80110f4:	4860      	ldr	r0, [pc, #384]	@ (8011278 <mb_recv+0x198>)
 80110f6:	f000 fa9b 	bl	8011630 <sniprintf>
 80110fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80110fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110fe:	b29a      	uxth	r2, r3
 8011100:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011104:	495c      	ldr	r1, [pc, #368]	@ (8011278 <mb_recv+0x198>)
 8011106:	485d      	ldr	r0, [pc, #372]	@ (801127c <mb_recv+0x19c>)
 8011108:	f7f3 fa46 	bl	8004598 <HAL_UART_Transmit>
    (void)arg; (void)tpcb;

    if (!p) {
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d12f      	bne.n	8011172 <mb_recv+0x92>
        err_t cerr = tcp_close(tpcb);
 8011112:	68b8      	ldr	r0, [r7, #8]
 8011114:	f7f6 faf4 	bl	8007700 <tcp_close>
 8011118:	4603      	mov	r3, r0
 801111a:	76fb      	strb	r3, [r7, #27]
        if (cerr != ERR_OK) {
 801111c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d013      	beq.n	801114c <mb_recv+0x6c>
            tcp_abort(tpcb);
 8011124:	68b8      	ldr	r0, [r7, #8]
 8011126:	f7f6 fbd5 	bl	80078d4 <tcp_abort>
            DEBUG_PRINTF(" -> remote closed, pcb aborted (err=%d)\r\n", cerr);
 801112a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801112e:	4a54      	ldr	r2, [pc, #336]	@ (8011280 <mb_recv+0x1a0>)
 8011130:	2140      	movs	r1, #64	@ 0x40
 8011132:	4851      	ldr	r0, [pc, #324]	@ (8011278 <mb_recv+0x198>)
 8011134:	f000 fa7c 	bl	8011630 <sniprintf>
 8011138:	6138      	str	r0, [r7, #16]
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	b29a      	uxth	r2, r3
 801113e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011142:	494d      	ldr	r1, [pc, #308]	@ (8011278 <mb_recv+0x198>)
 8011144:	484d      	ldr	r0, [pc, #308]	@ (801127c <mb_recv+0x19c>)
 8011146:	f7f3 fa27 	bl	8004598 <HAL_UART_Transmit>
 801114a:	e00d      	b.n	8011168 <mb_recv+0x88>
        } else {
            DEBUG_PRINTF(" -> remote closed, pcb closed\r\n");
 801114c:	4a4d      	ldr	r2, [pc, #308]	@ (8011284 <mb_recv+0x1a4>)
 801114e:	2140      	movs	r1, #64	@ 0x40
 8011150:	4849      	ldr	r0, [pc, #292]	@ (8011278 <mb_recv+0x198>)
 8011152:	f000 fa6d 	bl	8011630 <sniprintf>
 8011156:	6178      	str	r0, [r7, #20]
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	b29a      	uxth	r2, r3
 801115c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011160:	4945      	ldr	r1, [pc, #276]	@ (8011278 <mb_recv+0x198>)
 8011162:	4846      	ldr	r0, [pc, #280]	@ (801127c <mb_recv+0x19c>)
 8011164:	f7f3 fa18 	bl	8004598 <HAL_UART_Transmit>
        }
        mb_client = NULL;
 8011168:	4b47      	ldr	r3, [pc, #284]	@ (8011288 <mb_recv+0x1a8>)
 801116a:	2200      	movs	r2, #0
 801116c:	601a      	str	r2, [r3, #0]
        return ERR_OK;
 801116e:	2300      	movs	r3, #0
 8011170:	e07a      	b.n	8011268 <mb_recv+0x188>
    }

    if (err != ERR_OK) {
 8011172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d015      	beq.n	80111a6 <mb_recv+0xc6>
        pbuf_free(p);
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f7f5 fe22 	bl	8006dc4 <pbuf_free>
        DEBUG_PRINTF(" -> error %d\r\n", (int)err);
 8011180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011184:	4a41      	ldr	r2, [pc, #260]	@ (801128c <mb_recv+0x1ac>)
 8011186:	2140      	movs	r1, #64	@ 0x40
 8011188:	483b      	ldr	r0, [pc, #236]	@ (8011278 <mb_recv+0x198>)
 801118a:	f000 fa51 	bl	8011630 <sniprintf>
 801118e:	61f8      	str	r0, [r7, #28]
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	b29a      	uxth	r2, r3
 8011194:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011198:	4937      	ldr	r1, [pc, #220]	@ (8011278 <mb_recv+0x198>)
 801119a:	4838      	ldr	r0, [pc, #224]	@ (801127c <mb_recv+0x19c>)
 801119c:	f7f3 f9fc 	bl	8004598 <HAL_UART_Transmit>
        return err;
 80111a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80111a4:	e060      	b.n	8011268 <mb_recv+0x188>
    }

    if (rx_pbuf) pbuf_free(rx_pbuf);
 80111a6:	4b3a      	ldr	r3, [pc, #232]	@ (8011290 <mb_recv+0x1b0>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d004      	beq.n	80111b8 <mb_recv+0xd8>
 80111ae:	4b38      	ldr	r3, [pc, #224]	@ (8011290 <mb_recv+0x1b0>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7f5 fe06 	bl	8006dc4 <pbuf_free>
    rx_pbuf = p;
 80111b8:	4a35      	ldr	r2, [pc, #212]	@ (8011290 <mb_recv+0x1b0>)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6013      	str	r3, [r2, #0]

    tcp_recved(tpcb, p->tot_len);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	891b      	ldrh	r3, [r3, #8]
 80111c2:	4619      	mov	r1, r3
 80111c4:	68b8      	ldr	r0, [r7, #8]
 80111c6:	f7f6 fd5f 	bl	8007c88 <tcp_recved>

    DEBUG_PRINTF(" -> received %u bytes\r\n", (unsigned)p->tot_len);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	891b      	ldrh	r3, [r3, #8]
 80111ce:	4a31      	ldr	r2, [pc, #196]	@ (8011294 <mb_recv+0x1b4>)
 80111d0:	2140      	movs	r1, #64	@ 0x40
 80111d2:	4829      	ldr	r0, [pc, #164]	@ (8011278 <mb_recv+0x198>)
 80111d4:	f000 fa2c 	bl	8011630 <sniprintf>
 80111d8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80111da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111dc:	b29a      	uxth	r2, r3
 80111de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80111e2:	4925      	ldr	r1, [pc, #148]	@ (8011278 <mb_recv+0x198>)
 80111e4:	4825      	ldr	r0, [pc, #148]	@ (801127c <mb_recv+0x19c>)
 80111e6:	f7f3 f9d7 	bl	8004598 <HAL_UART_Transmit>
    if (p->len >= 8) {
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	895b      	ldrh	r3, [r3, #10]
 80111ee:	2b07      	cmp	r3, #7
 80111f0:	d936      	bls.n	8011260 <mb_recv+0x180>
        uint8_t *b = (uint8_t*)p->payload;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	627b      	str	r3, [r7, #36]	@ 0x24
        DEBUG_PRINTF(" MBAP: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 80111f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	469c      	mov	ip, r3
 80111fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011200:	3301      	adds	r3, #1
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	461a      	mov	r2, r3
 8011206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011208:	3302      	adds	r3, #2
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	4619      	mov	r1, r3
 801120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011210:	3303      	adds	r3, #3
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	4618      	mov	r0, r3
 8011216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011218:	3304      	adds	r3, #4
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	461c      	mov	r4, r3
 801121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011220:	3305      	adds	r3, #5
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	461d      	mov	r5, r3
 8011226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011228:	3306      	adds	r3, #6
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	461e      	mov	r6, r3
 801122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011230:	3307      	adds	r3, #7
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	9306      	str	r3, [sp, #24]
 8011236:	9605      	str	r6, [sp, #20]
 8011238:	9504      	str	r5, [sp, #16]
 801123a:	9403      	str	r4, [sp, #12]
 801123c:	9002      	str	r0, [sp, #8]
 801123e:	9101      	str	r1, [sp, #4]
 8011240:	9200      	str	r2, [sp, #0]
 8011242:	4663      	mov	r3, ip
 8011244:	4a14      	ldr	r2, [pc, #80]	@ (8011298 <mb_recv+0x1b8>)
 8011246:	2140      	movs	r1, #64	@ 0x40
 8011248:	480b      	ldr	r0, [pc, #44]	@ (8011278 <mb_recv+0x198>)
 801124a:	f000 f9f1 	bl	8011630 <sniprintf>
 801124e:	6238      	str	r0, [r7, #32]
 8011250:	6a3b      	ldr	r3, [r7, #32]
 8011252:	b29a      	uxth	r2, r3
 8011254:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011258:	4907      	ldr	r1, [pc, #28]	@ (8011278 <mb_recv+0x198>)
 801125a:	4808      	ldr	r0, [pc, #32]	@ (801127c <mb_recv+0x19c>)
 801125c:	f7f3 f99c 	bl	8004598 <HAL_UART_Transmit>
                     b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7]);
    }

    xMBPortEventPost(EV_FRAME_RECEIVED);
 8011260:	2001      	movs	r0, #1
 8011262:	f7ff fd47 	bl	8010cf4 <xMBPortEventPost>
    return ERR_OK;
 8011266:	2300      	movs	r3, #0
}
 8011268:	4618      	mov	r0, r3
 801126a:	3734      	adds	r7, #52	@ 0x34
 801126c:	46bd      	mov	sp, r7
 801126e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011270:	080154d4 	.word	0x080154d4
 8011274:	08015230 	.word	0x08015230
 8011278:	200001fc 	.word	0x200001fc
 801127c:	200001b4 	.word	0x200001b4
 8011280:	080152b0 	.word	0x080152b0
 8011284:	080152dc 	.word	0x080152dc
 8011288:	2000858c 	.word	0x2000858c
 801128c:	080152fc 	.word	0x080152fc
 8011290:	20008590 	.word	0x20008590
 8011294:	0801530c 	.word	0x0801530c
 8011298:	08015324 	.word	0x08015324

0801129c <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	4603      	mov	r3, r0
 80112a4:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 80112a6:	2300      	movs	r3, #0
 80112a8:	73fb      	strb	r3, [r7, #15]

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 80112aa:	88fb      	ldrh	r3, [r7, #6]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7ff fd91 	bl	8010dd4 <xMBTCPPortInit>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d101      	bne.n	80112bc <eMBTCPDoInit+0x20>
    {
        eStatus = MB_EPORTERR;
 80112b8:	2303      	movs	r3, #3
 80112ba:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80112bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3710      	adds	r7, #16
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}

080112c6 <eMBTCPStart>:

void
eMBTCPStart( void )
{
 80112c6:	b480      	push	{r7}
 80112c8:	af00      	add	r7, sp, #0
}
 80112ca:	bf00      	nop
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr

080112d4 <eMBTCPStop>:

void
eMBTCPStop( void )
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	af00      	add	r7, sp, #0
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 80112d8:	f7ff fdda 	bl	8010e90 <vMBTCPPortDisable>
}
 80112dc:	bf00      	nop
 80112de:	bd80      	pop	{r7, pc}

080112e0 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b088      	sub	sp, #32
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	60f8      	str	r0, [r7, #12]
 80112e8:	60b9      	str	r1, [r7, #8]
 80112ea:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_EIO;
 80112ec:	2305      	movs	r3, #5
 80112ee:	77fb      	strb	r3, [r7, #31]
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 80112f0:	f107 0216 	add.w	r2, r7, #22
 80112f4:	f107 0318 	add.w	r3, r7, #24
 80112f8:	4611      	mov	r1, r2
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7ff fe02 	bl	8010f04 <xMBTCPPortGetRequest>
 8011300:	4603      	mov	r3, r0
 8011302:	2b00      	cmp	r3, #0
 8011304:	d01d      	beq.n	8011342 <eMBTCPReceive+0x62>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8011306:	69bb      	ldr	r3, [r7, #24]
 8011308:	3302      	adds	r3, #2
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	021b      	lsls	r3, r3, #8
 801130e:	83bb      	strh	r3, [r7, #28]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8011310:	69bb      	ldr	r3, [r7, #24]
 8011312:	3303      	adds	r3, #3
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	461a      	mov	r2, r3
 8011318:	8bbb      	ldrh	r3, [r7, #28]
 801131a:	4313      	orrs	r3, r2
 801131c:	83bb      	strh	r3, [r7, #28]

        if( usPID == MB_TCP_PROTOCOL_ID )
 801131e:	8bbb      	ldrh	r3, [r7, #28]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d110      	bne.n	8011346 <eMBTCPReceive+0x66>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8011324:	69bb      	ldr	r3, [r7, #24]
 8011326:	1dda      	adds	r2, r3, #7
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	601a      	str	r2, [r3, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 801132c:	8afb      	ldrh	r3, [r7, #22]
 801132e:	3b07      	subs	r3, #7
 8011330:	b29a      	uxth	r2, r3
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	801a      	strh	r2, [r3, #0]
            eStatus = MB_ENOERR;
 8011336:	2300      	movs	r3, #0
 8011338:	77fb      	strb	r3, [r7, #31]

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	22ff      	movs	r2, #255	@ 0xff
 801133e:	701a      	strb	r2, [r3, #0]
 8011340:	e001      	b.n	8011346 <eMBTCPReceive+0x66>
        }
    }
    else
    {
        eStatus = MB_EIO;
 8011342:	2305      	movs	r3, #5
 8011344:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8011346:	7ffb      	ldrb	r3, [r7, #31]
}
 8011348:	4618      	mov	r0, r3
 801134a:	3720      	adds	r7, #32
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b086      	sub	sp, #24
 8011354:	af00      	add	r7, sp, #0
 8011356:	4603      	mov	r3, r0
 8011358:	6039      	str	r1, [r7, #0]
 801135a:	71fb      	strb	r3, [r7, #7]
 801135c:	4613      	mov	r3, r2
 801135e:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8011360:	2300      	movs	r3, #0
 8011362:	75fb      	strb	r3, [r7, #23]
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	3b07      	subs	r3, #7
 8011368:	613b      	str	r3, [r7, #16]
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 801136a:	88bb      	ldrh	r3, [r7, #4]
 801136c:	3307      	adds	r3, #7
 801136e:	81fb      	strh	r3, [r7, #14]
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8011370:	88bb      	ldrh	r3, [r7, #4]
 8011372:	3301      	adds	r3, #1
 8011374:	121a      	asrs	r2, r3, #8
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	3304      	adds	r3, #4
 801137a:	b2d2      	uxtb	r2, r2
 801137c:	701a      	strb	r2, [r3, #0]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 801137e:	88bb      	ldrh	r3, [r7, #4]
 8011380:	b2da      	uxtb	r2, r3
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	3305      	adds	r3, #5
 8011386:	3201      	adds	r2, #1
 8011388:	b2d2      	uxtb	r2, r2
 801138a:	701a      	strb	r2, [r3, #0]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 801138c:	89fb      	ldrh	r3, [r7, #14]
 801138e:	4619      	mov	r1, r3
 8011390:	6938      	ldr	r0, [r7, #16]
 8011392:	f7ff fe05 	bl	8010fa0 <xMBTCPPortSendResponse>
 8011396:	4603      	mov	r3, r0
 8011398:	2b00      	cmp	r3, #0
 801139a:	d101      	bne.n	80113a0 <eMBTCPSend+0x50>
    {
        eStatus = MB_EIO;
 801139c:	2305      	movs	r3, #5
 801139e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80113a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3718      	adds	r7, #24
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
	...

080113ac <__assert_func>:
 80113ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80113ae:	4614      	mov	r4, r2
 80113b0:	461a      	mov	r2, r3
 80113b2:	4b09      	ldr	r3, [pc, #36]	@ (80113d8 <__assert_func+0x2c>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	4605      	mov	r5, r0
 80113b8:	68d8      	ldr	r0, [r3, #12]
 80113ba:	b14c      	cbz	r4, 80113d0 <__assert_func+0x24>
 80113bc:	4b07      	ldr	r3, [pc, #28]	@ (80113dc <__assert_func+0x30>)
 80113be:	9100      	str	r1, [sp, #0]
 80113c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80113c4:	4906      	ldr	r1, [pc, #24]	@ (80113e0 <__assert_func+0x34>)
 80113c6:	462b      	mov	r3, r5
 80113c8:	f000 f8f0 	bl	80115ac <fiprintf>
 80113cc:	f000 fa57 	bl	801187e <abort>
 80113d0:	4b04      	ldr	r3, [pc, #16]	@ (80113e4 <__assert_func+0x38>)
 80113d2:	461c      	mov	r4, r3
 80113d4:	e7f3      	b.n	80113be <__assert_func+0x12>
 80113d6:	bf00      	nop
 80113d8:	200000b8 	.word	0x200000b8
 80113dc:	080154dc 	.word	0x080154dc
 80113e0:	080154e9 	.word	0x080154e9
 80113e4:	08015517 	.word	0x08015517

080113e8 <rand>:
 80113e8:	4b16      	ldr	r3, [pc, #88]	@ (8011444 <rand+0x5c>)
 80113ea:	b510      	push	{r4, lr}
 80113ec:	681c      	ldr	r4, [r3, #0]
 80113ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80113f0:	b9b3      	cbnz	r3, 8011420 <rand+0x38>
 80113f2:	2018      	movs	r0, #24
 80113f4:	f000 fa94 	bl	8011920 <malloc>
 80113f8:	4602      	mov	r2, r0
 80113fa:	6320      	str	r0, [r4, #48]	@ 0x30
 80113fc:	b920      	cbnz	r0, 8011408 <rand+0x20>
 80113fe:	4b12      	ldr	r3, [pc, #72]	@ (8011448 <rand+0x60>)
 8011400:	4812      	ldr	r0, [pc, #72]	@ (801144c <rand+0x64>)
 8011402:	2152      	movs	r1, #82	@ 0x52
 8011404:	f7ff ffd2 	bl	80113ac <__assert_func>
 8011408:	4911      	ldr	r1, [pc, #68]	@ (8011450 <rand+0x68>)
 801140a:	4b12      	ldr	r3, [pc, #72]	@ (8011454 <rand+0x6c>)
 801140c:	e9c0 1300 	strd	r1, r3, [r0]
 8011410:	4b11      	ldr	r3, [pc, #68]	@ (8011458 <rand+0x70>)
 8011412:	6083      	str	r3, [r0, #8]
 8011414:	230b      	movs	r3, #11
 8011416:	8183      	strh	r3, [r0, #12]
 8011418:	2100      	movs	r1, #0
 801141a:	2001      	movs	r0, #1
 801141c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011420:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011422:	480e      	ldr	r0, [pc, #56]	@ (801145c <rand+0x74>)
 8011424:	690b      	ldr	r3, [r1, #16]
 8011426:	694c      	ldr	r4, [r1, #20]
 8011428:	4a0d      	ldr	r2, [pc, #52]	@ (8011460 <rand+0x78>)
 801142a:	4358      	muls	r0, r3
 801142c:	fb02 0004 	mla	r0, r2, r4, r0
 8011430:	fba3 3202 	umull	r3, r2, r3, r2
 8011434:	3301      	adds	r3, #1
 8011436:	eb40 0002 	adc.w	r0, r0, r2
 801143a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801143e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011442:	bd10      	pop	{r4, pc}
 8011444:	200000b8 	.word	0x200000b8
 8011448:	08015518 	.word	0x08015518
 801144c:	0801552f 	.word	0x0801552f
 8011450:	abcd330e 	.word	0xabcd330e
 8011454:	e66d1234 	.word	0xe66d1234
 8011458:	0005deec 	.word	0x0005deec
 801145c:	5851f42d 	.word	0x5851f42d
 8011460:	4c957f2d 	.word	0x4c957f2d

08011464 <std>:
 8011464:	2300      	movs	r3, #0
 8011466:	b510      	push	{r4, lr}
 8011468:	4604      	mov	r4, r0
 801146a:	e9c0 3300 	strd	r3, r3, [r0]
 801146e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011472:	6083      	str	r3, [r0, #8]
 8011474:	8181      	strh	r1, [r0, #12]
 8011476:	6643      	str	r3, [r0, #100]	@ 0x64
 8011478:	81c2      	strh	r2, [r0, #14]
 801147a:	6183      	str	r3, [r0, #24]
 801147c:	4619      	mov	r1, r3
 801147e:	2208      	movs	r2, #8
 8011480:	305c      	adds	r0, #92	@ 0x5c
 8011482:	f000 f978 	bl	8011776 <memset>
 8011486:	4b0d      	ldr	r3, [pc, #52]	@ (80114bc <std+0x58>)
 8011488:	6263      	str	r3, [r4, #36]	@ 0x24
 801148a:	4b0d      	ldr	r3, [pc, #52]	@ (80114c0 <std+0x5c>)
 801148c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801148e:	4b0d      	ldr	r3, [pc, #52]	@ (80114c4 <std+0x60>)
 8011490:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011492:	4b0d      	ldr	r3, [pc, #52]	@ (80114c8 <std+0x64>)
 8011494:	6323      	str	r3, [r4, #48]	@ 0x30
 8011496:	4b0d      	ldr	r3, [pc, #52]	@ (80114cc <std+0x68>)
 8011498:	6224      	str	r4, [r4, #32]
 801149a:	429c      	cmp	r4, r3
 801149c:	d006      	beq.n	80114ac <std+0x48>
 801149e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80114a2:	4294      	cmp	r4, r2
 80114a4:	d002      	beq.n	80114ac <std+0x48>
 80114a6:	33d0      	adds	r3, #208	@ 0xd0
 80114a8:	429c      	cmp	r4, r3
 80114aa:	d105      	bne.n	80114b8 <std+0x54>
 80114ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80114b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114b4:	f000 b9d2 	b.w	801185c <__retarget_lock_init_recursive>
 80114b8:	bd10      	pop	{r4, pc}
 80114ba:	bf00      	nop
 80114bc:	0801169d 	.word	0x0801169d
 80114c0:	080116bf 	.word	0x080116bf
 80114c4:	080116f7 	.word	0x080116f7
 80114c8:	0801171b 	.word	0x0801171b
 80114cc:	20008598 	.word	0x20008598

080114d0 <stdio_exit_handler>:
 80114d0:	4a02      	ldr	r2, [pc, #8]	@ (80114dc <stdio_exit_handler+0xc>)
 80114d2:	4903      	ldr	r1, [pc, #12]	@ (80114e0 <stdio_exit_handler+0x10>)
 80114d4:	4803      	ldr	r0, [pc, #12]	@ (80114e4 <stdio_exit_handler+0x14>)
 80114d6:	f000 b87b 	b.w	80115d0 <_fwalk_sglue>
 80114da:	bf00      	nop
 80114dc:	200000ac 	.word	0x200000ac
 80114e0:	080123e1 	.word	0x080123e1
 80114e4:	200000bc 	.word	0x200000bc

080114e8 <cleanup_stdio>:
 80114e8:	6841      	ldr	r1, [r0, #4]
 80114ea:	4b0c      	ldr	r3, [pc, #48]	@ (801151c <cleanup_stdio+0x34>)
 80114ec:	4299      	cmp	r1, r3
 80114ee:	b510      	push	{r4, lr}
 80114f0:	4604      	mov	r4, r0
 80114f2:	d001      	beq.n	80114f8 <cleanup_stdio+0x10>
 80114f4:	f000 ff74 	bl	80123e0 <_fflush_r>
 80114f8:	68a1      	ldr	r1, [r4, #8]
 80114fa:	4b09      	ldr	r3, [pc, #36]	@ (8011520 <cleanup_stdio+0x38>)
 80114fc:	4299      	cmp	r1, r3
 80114fe:	d002      	beq.n	8011506 <cleanup_stdio+0x1e>
 8011500:	4620      	mov	r0, r4
 8011502:	f000 ff6d 	bl	80123e0 <_fflush_r>
 8011506:	68e1      	ldr	r1, [r4, #12]
 8011508:	4b06      	ldr	r3, [pc, #24]	@ (8011524 <cleanup_stdio+0x3c>)
 801150a:	4299      	cmp	r1, r3
 801150c:	d004      	beq.n	8011518 <cleanup_stdio+0x30>
 801150e:	4620      	mov	r0, r4
 8011510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011514:	f000 bf64 	b.w	80123e0 <_fflush_r>
 8011518:	bd10      	pop	{r4, pc}
 801151a:	bf00      	nop
 801151c:	20008598 	.word	0x20008598
 8011520:	20008600 	.word	0x20008600
 8011524:	20008668 	.word	0x20008668

08011528 <global_stdio_init.part.0>:
 8011528:	b510      	push	{r4, lr}
 801152a:	4b0b      	ldr	r3, [pc, #44]	@ (8011558 <global_stdio_init.part.0+0x30>)
 801152c:	4c0b      	ldr	r4, [pc, #44]	@ (801155c <global_stdio_init.part.0+0x34>)
 801152e:	4a0c      	ldr	r2, [pc, #48]	@ (8011560 <global_stdio_init.part.0+0x38>)
 8011530:	601a      	str	r2, [r3, #0]
 8011532:	4620      	mov	r0, r4
 8011534:	2200      	movs	r2, #0
 8011536:	2104      	movs	r1, #4
 8011538:	f7ff ff94 	bl	8011464 <std>
 801153c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011540:	2201      	movs	r2, #1
 8011542:	2109      	movs	r1, #9
 8011544:	f7ff ff8e 	bl	8011464 <std>
 8011548:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801154c:	2202      	movs	r2, #2
 801154e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011552:	2112      	movs	r1, #18
 8011554:	f7ff bf86 	b.w	8011464 <std>
 8011558:	200086d0 	.word	0x200086d0
 801155c:	20008598 	.word	0x20008598
 8011560:	080114d1 	.word	0x080114d1

08011564 <__sfp_lock_acquire>:
 8011564:	4801      	ldr	r0, [pc, #4]	@ (801156c <__sfp_lock_acquire+0x8>)
 8011566:	f000 b97a 	b.w	801185e <__retarget_lock_acquire_recursive>
 801156a:	bf00      	nop
 801156c:	200086d9 	.word	0x200086d9

08011570 <__sfp_lock_release>:
 8011570:	4801      	ldr	r0, [pc, #4]	@ (8011578 <__sfp_lock_release+0x8>)
 8011572:	f000 b975 	b.w	8011860 <__retarget_lock_release_recursive>
 8011576:	bf00      	nop
 8011578:	200086d9 	.word	0x200086d9

0801157c <__sinit>:
 801157c:	b510      	push	{r4, lr}
 801157e:	4604      	mov	r4, r0
 8011580:	f7ff fff0 	bl	8011564 <__sfp_lock_acquire>
 8011584:	6a23      	ldr	r3, [r4, #32]
 8011586:	b11b      	cbz	r3, 8011590 <__sinit+0x14>
 8011588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801158c:	f7ff bff0 	b.w	8011570 <__sfp_lock_release>
 8011590:	4b04      	ldr	r3, [pc, #16]	@ (80115a4 <__sinit+0x28>)
 8011592:	6223      	str	r3, [r4, #32]
 8011594:	4b04      	ldr	r3, [pc, #16]	@ (80115a8 <__sinit+0x2c>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d1f5      	bne.n	8011588 <__sinit+0xc>
 801159c:	f7ff ffc4 	bl	8011528 <global_stdio_init.part.0>
 80115a0:	e7f2      	b.n	8011588 <__sinit+0xc>
 80115a2:	bf00      	nop
 80115a4:	080114e9 	.word	0x080114e9
 80115a8:	200086d0 	.word	0x200086d0

080115ac <fiprintf>:
 80115ac:	b40e      	push	{r1, r2, r3}
 80115ae:	b503      	push	{r0, r1, lr}
 80115b0:	4601      	mov	r1, r0
 80115b2:	ab03      	add	r3, sp, #12
 80115b4:	4805      	ldr	r0, [pc, #20]	@ (80115cc <fiprintf+0x20>)
 80115b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80115ba:	6800      	ldr	r0, [r0, #0]
 80115bc:	9301      	str	r3, [sp, #4]
 80115be:	f000 fbe7 	bl	8011d90 <_vfiprintf_r>
 80115c2:	b002      	add	sp, #8
 80115c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80115c8:	b003      	add	sp, #12
 80115ca:	4770      	bx	lr
 80115cc:	200000b8 	.word	0x200000b8

080115d0 <_fwalk_sglue>:
 80115d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115d4:	4607      	mov	r7, r0
 80115d6:	4688      	mov	r8, r1
 80115d8:	4614      	mov	r4, r2
 80115da:	2600      	movs	r6, #0
 80115dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115e0:	f1b9 0901 	subs.w	r9, r9, #1
 80115e4:	d505      	bpl.n	80115f2 <_fwalk_sglue+0x22>
 80115e6:	6824      	ldr	r4, [r4, #0]
 80115e8:	2c00      	cmp	r4, #0
 80115ea:	d1f7      	bne.n	80115dc <_fwalk_sglue+0xc>
 80115ec:	4630      	mov	r0, r6
 80115ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115f2:	89ab      	ldrh	r3, [r5, #12]
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d907      	bls.n	8011608 <_fwalk_sglue+0x38>
 80115f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115fc:	3301      	adds	r3, #1
 80115fe:	d003      	beq.n	8011608 <_fwalk_sglue+0x38>
 8011600:	4629      	mov	r1, r5
 8011602:	4638      	mov	r0, r7
 8011604:	47c0      	blx	r8
 8011606:	4306      	orrs	r6, r0
 8011608:	3568      	adds	r5, #104	@ 0x68
 801160a:	e7e9      	b.n	80115e0 <_fwalk_sglue+0x10>

0801160c <iprintf>:
 801160c:	b40f      	push	{r0, r1, r2, r3}
 801160e:	b507      	push	{r0, r1, r2, lr}
 8011610:	4906      	ldr	r1, [pc, #24]	@ (801162c <iprintf+0x20>)
 8011612:	ab04      	add	r3, sp, #16
 8011614:	6808      	ldr	r0, [r1, #0]
 8011616:	f853 2b04 	ldr.w	r2, [r3], #4
 801161a:	6881      	ldr	r1, [r0, #8]
 801161c:	9301      	str	r3, [sp, #4]
 801161e:	f000 fbb7 	bl	8011d90 <_vfiprintf_r>
 8011622:	b003      	add	sp, #12
 8011624:	f85d eb04 	ldr.w	lr, [sp], #4
 8011628:	b004      	add	sp, #16
 801162a:	4770      	bx	lr
 801162c:	200000b8 	.word	0x200000b8

08011630 <sniprintf>:
 8011630:	b40c      	push	{r2, r3}
 8011632:	b530      	push	{r4, r5, lr}
 8011634:	4b18      	ldr	r3, [pc, #96]	@ (8011698 <sniprintf+0x68>)
 8011636:	1e0c      	subs	r4, r1, #0
 8011638:	681d      	ldr	r5, [r3, #0]
 801163a:	b09d      	sub	sp, #116	@ 0x74
 801163c:	da08      	bge.n	8011650 <sniprintf+0x20>
 801163e:	238b      	movs	r3, #139	@ 0x8b
 8011640:	602b      	str	r3, [r5, #0]
 8011642:	f04f 30ff 	mov.w	r0, #4294967295
 8011646:	b01d      	add	sp, #116	@ 0x74
 8011648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801164c:	b002      	add	sp, #8
 801164e:	4770      	bx	lr
 8011650:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011654:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011658:	f04f 0300 	mov.w	r3, #0
 801165c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801165e:	bf14      	ite	ne
 8011660:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011664:	4623      	moveq	r3, r4
 8011666:	9304      	str	r3, [sp, #16]
 8011668:	9307      	str	r3, [sp, #28]
 801166a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801166e:	9002      	str	r0, [sp, #8]
 8011670:	9006      	str	r0, [sp, #24]
 8011672:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011676:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011678:	ab21      	add	r3, sp, #132	@ 0x84
 801167a:	a902      	add	r1, sp, #8
 801167c:	4628      	mov	r0, r5
 801167e:	9301      	str	r3, [sp, #4]
 8011680:	f000 fa60 	bl	8011b44 <_svfiprintf_r>
 8011684:	1c43      	adds	r3, r0, #1
 8011686:	bfbc      	itt	lt
 8011688:	238b      	movlt	r3, #139	@ 0x8b
 801168a:	602b      	strlt	r3, [r5, #0]
 801168c:	2c00      	cmp	r4, #0
 801168e:	d0da      	beq.n	8011646 <sniprintf+0x16>
 8011690:	9b02      	ldr	r3, [sp, #8]
 8011692:	2200      	movs	r2, #0
 8011694:	701a      	strb	r2, [r3, #0]
 8011696:	e7d6      	b.n	8011646 <sniprintf+0x16>
 8011698:	200000b8 	.word	0x200000b8

0801169c <__sread>:
 801169c:	b510      	push	{r4, lr}
 801169e:	460c      	mov	r4, r1
 80116a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116a4:	f000 f892 	bl	80117cc <_read_r>
 80116a8:	2800      	cmp	r0, #0
 80116aa:	bfab      	itete	ge
 80116ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80116ae:	89a3      	ldrhlt	r3, [r4, #12]
 80116b0:	181b      	addge	r3, r3, r0
 80116b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80116b6:	bfac      	ite	ge
 80116b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80116ba:	81a3      	strhlt	r3, [r4, #12]
 80116bc:	bd10      	pop	{r4, pc}

080116be <__swrite>:
 80116be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116c2:	461f      	mov	r7, r3
 80116c4:	898b      	ldrh	r3, [r1, #12]
 80116c6:	05db      	lsls	r3, r3, #23
 80116c8:	4605      	mov	r5, r0
 80116ca:	460c      	mov	r4, r1
 80116cc:	4616      	mov	r6, r2
 80116ce:	d505      	bpl.n	80116dc <__swrite+0x1e>
 80116d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116d4:	2302      	movs	r3, #2
 80116d6:	2200      	movs	r2, #0
 80116d8:	f000 f866 	bl	80117a8 <_lseek_r>
 80116dc:	89a3      	ldrh	r3, [r4, #12]
 80116de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80116e6:	81a3      	strh	r3, [r4, #12]
 80116e8:	4632      	mov	r2, r6
 80116ea:	463b      	mov	r3, r7
 80116ec:	4628      	mov	r0, r5
 80116ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116f2:	f000 b87d 	b.w	80117f0 <_write_r>

080116f6 <__sseek>:
 80116f6:	b510      	push	{r4, lr}
 80116f8:	460c      	mov	r4, r1
 80116fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116fe:	f000 f853 	bl	80117a8 <_lseek_r>
 8011702:	1c43      	adds	r3, r0, #1
 8011704:	89a3      	ldrh	r3, [r4, #12]
 8011706:	bf15      	itete	ne
 8011708:	6560      	strne	r0, [r4, #84]	@ 0x54
 801170a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801170e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011712:	81a3      	strheq	r3, [r4, #12]
 8011714:	bf18      	it	ne
 8011716:	81a3      	strhne	r3, [r4, #12]
 8011718:	bd10      	pop	{r4, pc}

0801171a <__sclose>:
 801171a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801171e:	f000 b833 	b.w	8011788 <_close_r>

08011722 <memcmp>:
 8011722:	b510      	push	{r4, lr}
 8011724:	3901      	subs	r1, #1
 8011726:	4402      	add	r2, r0
 8011728:	4290      	cmp	r0, r2
 801172a:	d101      	bne.n	8011730 <memcmp+0xe>
 801172c:	2000      	movs	r0, #0
 801172e:	e005      	b.n	801173c <memcmp+0x1a>
 8011730:	7803      	ldrb	r3, [r0, #0]
 8011732:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011736:	42a3      	cmp	r3, r4
 8011738:	d001      	beq.n	801173e <memcmp+0x1c>
 801173a:	1b18      	subs	r0, r3, r4
 801173c:	bd10      	pop	{r4, pc}
 801173e:	3001      	adds	r0, #1
 8011740:	e7f2      	b.n	8011728 <memcmp+0x6>

08011742 <memmove>:
 8011742:	4288      	cmp	r0, r1
 8011744:	b510      	push	{r4, lr}
 8011746:	eb01 0402 	add.w	r4, r1, r2
 801174a:	d902      	bls.n	8011752 <memmove+0x10>
 801174c:	4284      	cmp	r4, r0
 801174e:	4623      	mov	r3, r4
 8011750:	d807      	bhi.n	8011762 <memmove+0x20>
 8011752:	1e43      	subs	r3, r0, #1
 8011754:	42a1      	cmp	r1, r4
 8011756:	d008      	beq.n	801176a <memmove+0x28>
 8011758:	f811 2b01 	ldrb.w	r2, [r1], #1
 801175c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011760:	e7f8      	b.n	8011754 <memmove+0x12>
 8011762:	4402      	add	r2, r0
 8011764:	4601      	mov	r1, r0
 8011766:	428a      	cmp	r2, r1
 8011768:	d100      	bne.n	801176c <memmove+0x2a>
 801176a:	bd10      	pop	{r4, pc}
 801176c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011770:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011774:	e7f7      	b.n	8011766 <memmove+0x24>

08011776 <memset>:
 8011776:	4402      	add	r2, r0
 8011778:	4603      	mov	r3, r0
 801177a:	4293      	cmp	r3, r2
 801177c:	d100      	bne.n	8011780 <memset+0xa>
 801177e:	4770      	bx	lr
 8011780:	f803 1b01 	strb.w	r1, [r3], #1
 8011784:	e7f9      	b.n	801177a <memset+0x4>
	...

08011788 <_close_r>:
 8011788:	b538      	push	{r3, r4, r5, lr}
 801178a:	4d06      	ldr	r5, [pc, #24]	@ (80117a4 <_close_r+0x1c>)
 801178c:	2300      	movs	r3, #0
 801178e:	4604      	mov	r4, r0
 8011790:	4608      	mov	r0, r1
 8011792:	602b      	str	r3, [r5, #0]
 8011794:	f7ef fb20 	bl	8000dd8 <_close>
 8011798:	1c43      	adds	r3, r0, #1
 801179a:	d102      	bne.n	80117a2 <_close_r+0x1a>
 801179c:	682b      	ldr	r3, [r5, #0]
 801179e:	b103      	cbz	r3, 80117a2 <_close_r+0x1a>
 80117a0:	6023      	str	r3, [r4, #0]
 80117a2:	bd38      	pop	{r3, r4, r5, pc}
 80117a4:	200086d4 	.word	0x200086d4

080117a8 <_lseek_r>:
 80117a8:	b538      	push	{r3, r4, r5, lr}
 80117aa:	4d07      	ldr	r5, [pc, #28]	@ (80117c8 <_lseek_r+0x20>)
 80117ac:	4604      	mov	r4, r0
 80117ae:	4608      	mov	r0, r1
 80117b0:	4611      	mov	r1, r2
 80117b2:	2200      	movs	r2, #0
 80117b4:	602a      	str	r2, [r5, #0]
 80117b6:	461a      	mov	r2, r3
 80117b8:	f7ef fb35 	bl	8000e26 <_lseek>
 80117bc:	1c43      	adds	r3, r0, #1
 80117be:	d102      	bne.n	80117c6 <_lseek_r+0x1e>
 80117c0:	682b      	ldr	r3, [r5, #0]
 80117c2:	b103      	cbz	r3, 80117c6 <_lseek_r+0x1e>
 80117c4:	6023      	str	r3, [r4, #0]
 80117c6:	bd38      	pop	{r3, r4, r5, pc}
 80117c8:	200086d4 	.word	0x200086d4

080117cc <_read_r>:
 80117cc:	b538      	push	{r3, r4, r5, lr}
 80117ce:	4d07      	ldr	r5, [pc, #28]	@ (80117ec <_read_r+0x20>)
 80117d0:	4604      	mov	r4, r0
 80117d2:	4608      	mov	r0, r1
 80117d4:	4611      	mov	r1, r2
 80117d6:	2200      	movs	r2, #0
 80117d8:	602a      	str	r2, [r5, #0]
 80117da:	461a      	mov	r2, r3
 80117dc:	f7ef fac3 	bl	8000d66 <_read>
 80117e0:	1c43      	adds	r3, r0, #1
 80117e2:	d102      	bne.n	80117ea <_read_r+0x1e>
 80117e4:	682b      	ldr	r3, [r5, #0]
 80117e6:	b103      	cbz	r3, 80117ea <_read_r+0x1e>
 80117e8:	6023      	str	r3, [r4, #0]
 80117ea:	bd38      	pop	{r3, r4, r5, pc}
 80117ec:	200086d4 	.word	0x200086d4

080117f0 <_write_r>:
 80117f0:	b538      	push	{r3, r4, r5, lr}
 80117f2:	4d07      	ldr	r5, [pc, #28]	@ (8011810 <_write_r+0x20>)
 80117f4:	4604      	mov	r4, r0
 80117f6:	4608      	mov	r0, r1
 80117f8:	4611      	mov	r1, r2
 80117fa:	2200      	movs	r2, #0
 80117fc:	602a      	str	r2, [r5, #0]
 80117fe:	461a      	mov	r2, r3
 8011800:	f7ef face 	bl	8000da0 <_write>
 8011804:	1c43      	adds	r3, r0, #1
 8011806:	d102      	bne.n	801180e <_write_r+0x1e>
 8011808:	682b      	ldr	r3, [r5, #0]
 801180a:	b103      	cbz	r3, 801180e <_write_r+0x1e>
 801180c:	6023      	str	r3, [r4, #0]
 801180e:	bd38      	pop	{r3, r4, r5, pc}
 8011810:	200086d4 	.word	0x200086d4

08011814 <__libc_init_array>:
 8011814:	b570      	push	{r4, r5, r6, lr}
 8011816:	4d0d      	ldr	r5, [pc, #52]	@ (801184c <__libc_init_array+0x38>)
 8011818:	4c0d      	ldr	r4, [pc, #52]	@ (8011850 <__libc_init_array+0x3c>)
 801181a:	1b64      	subs	r4, r4, r5
 801181c:	10a4      	asrs	r4, r4, #2
 801181e:	2600      	movs	r6, #0
 8011820:	42a6      	cmp	r6, r4
 8011822:	d109      	bne.n	8011838 <__libc_init_array+0x24>
 8011824:	4d0b      	ldr	r5, [pc, #44]	@ (8011854 <__libc_init_array+0x40>)
 8011826:	4c0c      	ldr	r4, [pc, #48]	@ (8011858 <__libc_init_array+0x44>)
 8011828:	f000 ffa4 	bl	8012774 <_init>
 801182c:	1b64      	subs	r4, r4, r5
 801182e:	10a4      	asrs	r4, r4, #2
 8011830:	2600      	movs	r6, #0
 8011832:	42a6      	cmp	r6, r4
 8011834:	d105      	bne.n	8011842 <__libc_init_array+0x2e>
 8011836:	bd70      	pop	{r4, r5, r6, pc}
 8011838:	f855 3b04 	ldr.w	r3, [r5], #4
 801183c:	4798      	blx	r3
 801183e:	3601      	adds	r6, #1
 8011840:	e7ee      	b.n	8011820 <__libc_init_array+0xc>
 8011842:	f855 3b04 	ldr.w	r3, [r5], #4
 8011846:	4798      	blx	r3
 8011848:	3601      	adds	r6, #1
 801184a:	e7f2      	b.n	8011832 <__libc_init_array+0x1e>
 801184c:	080155c4 	.word	0x080155c4
 8011850:	080155c4 	.word	0x080155c4
 8011854:	080155c4 	.word	0x080155c4
 8011858:	080155c8 	.word	0x080155c8

0801185c <__retarget_lock_init_recursive>:
 801185c:	4770      	bx	lr

0801185e <__retarget_lock_acquire_recursive>:
 801185e:	4770      	bx	lr

08011860 <__retarget_lock_release_recursive>:
 8011860:	4770      	bx	lr

08011862 <memcpy>:
 8011862:	440a      	add	r2, r1
 8011864:	4291      	cmp	r1, r2
 8011866:	f100 33ff 	add.w	r3, r0, #4294967295
 801186a:	d100      	bne.n	801186e <memcpy+0xc>
 801186c:	4770      	bx	lr
 801186e:	b510      	push	{r4, lr}
 8011870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011878:	4291      	cmp	r1, r2
 801187a:	d1f9      	bne.n	8011870 <memcpy+0xe>
 801187c:	bd10      	pop	{r4, pc}

0801187e <abort>:
 801187e:	b508      	push	{r3, lr}
 8011880:	2006      	movs	r0, #6
 8011882:	f000 fe91 	bl	80125a8 <raise>
 8011886:	2001      	movs	r0, #1
 8011888:	f7ef fa62 	bl	8000d50 <_exit>

0801188c <_free_r>:
 801188c:	b538      	push	{r3, r4, r5, lr}
 801188e:	4605      	mov	r5, r0
 8011890:	2900      	cmp	r1, #0
 8011892:	d041      	beq.n	8011918 <_free_r+0x8c>
 8011894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011898:	1f0c      	subs	r4, r1, #4
 801189a:	2b00      	cmp	r3, #0
 801189c:	bfb8      	it	lt
 801189e:	18e4      	addlt	r4, r4, r3
 80118a0:	f000 f8e8 	bl	8011a74 <__malloc_lock>
 80118a4:	4a1d      	ldr	r2, [pc, #116]	@ (801191c <_free_r+0x90>)
 80118a6:	6813      	ldr	r3, [r2, #0]
 80118a8:	b933      	cbnz	r3, 80118b8 <_free_r+0x2c>
 80118aa:	6063      	str	r3, [r4, #4]
 80118ac:	6014      	str	r4, [r2, #0]
 80118ae:	4628      	mov	r0, r5
 80118b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118b4:	f000 b8e4 	b.w	8011a80 <__malloc_unlock>
 80118b8:	42a3      	cmp	r3, r4
 80118ba:	d908      	bls.n	80118ce <_free_r+0x42>
 80118bc:	6820      	ldr	r0, [r4, #0]
 80118be:	1821      	adds	r1, r4, r0
 80118c0:	428b      	cmp	r3, r1
 80118c2:	bf01      	itttt	eq
 80118c4:	6819      	ldreq	r1, [r3, #0]
 80118c6:	685b      	ldreq	r3, [r3, #4]
 80118c8:	1809      	addeq	r1, r1, r0
 80118ca:	6021      	streq	r1, [r4, #0]
 80118cc:	e7ed      	b.n	80118aa <_free_r+0x1e>
 80118ce:	461a      	mov	r2, r3
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	b10b      	cbz	r3, 80118d8 <_free_r+0x4c>
 80118d4:	42a3      	cmp	r3, r4
 80118d6:	d9fa      	bls.n	80118ce <_free_r+0x42>
 80118d8:	6811      	ldr	r1, [r2, #0]
 80118da:	1850      	adds	r0, r2, r1
 80118dc:	42a0      	cmp	r0, r4
 80118de:	d10b      	bne.n	80118f8 <_free_r+0x6c>
 80118e0:	6820      	ldr	r0, [r4, #0]
 80118e2:	4401      	add	r1, r0
 80118e4:	1850      	adds	r0, r2, r1
 80118e6:	4283      	cmp	r3, r0
 80118e8:	6011      	str	r1, [r2, #0]
 80118ea:	d1e0      	bne.n	80118ae <_free_r+0x22>
 80118ec:	6818      	ldr	r0, [r3, #0]
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	6053      	str	r3, [r2, #4]
 80118f2:	4408      	add	r0, r1
 80118f4:	6010      	str	r0, [r2, #0]
 80118f6:	e7da      	b.n	80118ae <_free_r+0x22>
 80118f8:	d902      	bls.n	8011900 <_free_r+0x74>
 80118fa:	230c      	movs	r3, #12
 80118fc:	602b      	str	r3, [r5, #0]
 80118fe:	e7d6      	b.n	80118ae <_free_r+0x22>
 8011900:	6820      	ldr	r0, [r4, #0]
 8011902:	1821      	adds	r1, r4, r0
 8011904:	428b      	cmp	r3, r1
 8011906:	bf04      	itt	eq
 8011908:	6819      	ldreq	r1, [r3, #0]
 801190a:	685b      	ldreq	r3, [r3, #4]
 801190c:	6063      	str	r3, [r4, #4]
 801190e:	bf04      	itt	eq
 8011910:	1809      	addeq	r1, r1, r0
 8011912:	6021      	streq	r1, [r4, #0]
 8011914:	6054      	str	r4, [r2, #4]
 8011916:	e7ca      	b.n	80118ae <_free_r+0x22>
 8011918:	bd38      	pop	{r3, r4, r5, pc}
 801191a:	bf00      	nop
 801191c:	200086e0 	.word	0x200086e0

08011920 <malloc>:
 8011920:	4b02      	ldr	r3, [pc, #8]	@ (801192c <malloc+0xc>)
 8011922:	4601      	mov	r1, r0
 8011924:	6818      	ldr	r0, [r3, #0]
 8011926:	f000 b825 	b.w	8011974 <_malloc_r>
 801192a:	bf00      	nop
 801192c:	200000b8 	.word	0x200000b8

08011930 <sbrk_aligned>:
 8011930:	b570      	push	{r4, r5, r6, lr}
 8011932:	4e0f      	ldr	r6, [pc, #60]	@ (8011970 <sbrk_aligned+0x40>)
 8011934:	460c      	mov	r4, r1
 8011936:	6831      	ldr	r1, [r6, #0]
 8011938:	4605      	mov	r5, r0
 801193a:	b911      	cbnz	r1, 8011942 <sbrk_aligned+0x12>
 801193c:	f000 fe50 	bl	80125e0 <_sbrk_r>
 8011940:	6030      	str	r0, [r6, #0]
 8011942:	4621      	mov	r1, r4
 8011944:	4628      	mov	r0, r5
 8011946:	f000 fe4b 	bl	80125e0 <_sbrk_r>
 801194a:	1c43      	adds	r3, r0, #1
 801194c:	d103      	bne.n	8011956 <sbrk_aligned+0x26>
 801194e:	f04f 34ff 	mov.w	r4, #4294967295
 8011952:	4620      	mov	r0, r4
 8011954:	bd70      	pop	{r4, r5, r6, pc}
 8011956:	1cc4      	adds	r4, r0, #3
 8011958:	f024 0403 	bic.w	r4, r4, #3
 801195c:	42a0      	cmp	r0, r4
 801195e:	d0f8      	beq.n	8011952 <sbrk_aligned+0x22>
 8011960:	1a21      	subs	r1, r4, r0
 8011962:	4628      	mov	r0, r5
 8011964:	f000 fe3c 	bl	80125e0 <_sbrk_r>
 8011968:	3001      	adds	r0, #1
 801196a:	d1f2      	bne.n	8011952 <sbrk_aligned+0x22>
 801196c:	e7ef      	b.n	801194e <sbrk_aligned+0x1e>
 801196e:	bf00      	nop
 8011970:	200086dc 	.word	0x200086dc

08011974 <_malloc_r>:
 8011974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011978:	1ccd      	adds	r5, r1, #3
 801197a:	f025 0503 	bic.w	r5, r5, #3
 801197e:	3508      	adds	r5, #8
 8011980:	2d0c      	cmp	r5, #12
 8011982:	bf38      	it	cc
 8011984:	250c      	movcc	r5, #12
 8011986:	2d00      	cmp	r5, #0
 8011988:	4606      	mov	r6, r0
 801198a:	db01      	blt.n	8011990 <_malloc_r+0x1c>
 801198c:	42a9      	cmp	r1, r5
 801198e:	d904      	bls.n	801199a <_malloc_r+0x26>
 8011990:	230c      	movs	r3, #12
 8011992:	6033      	str	r3, [r6, #0]
 8011994:	2000      	movs	r0, #0
 8011996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801199a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a70 <_malloc_r+0xfc>
 801199e:	f000 f869 	bl	8011a74 <__malloc_lock>
 80119a2:	f8d8 3000 	ldr.w	r3, [r8]
 80119a6:	461c      	mov	r4, r3
 80119a8:	bb44      	cbnz	r4, 80119fc <_malloc_r+0x88>
 80119aa:	4629      	mov	r1, r5
 80119ac:	4630      	mov	r0, r6
 80119ae:	f7ff ffbf 	bl	8011930 <sbrk_aligned>
 80119b2:	1c43      	adds	r3, r0, #1
 80119b4:	4604      	mov	r4, r0
 80119b6:	d158      	bne.n	8011a6a <_malloc_r+0xf6>
 80119b8:	f8d8 4000 	ldr.w	r4, [r8]
 80119bc:	4627      	mov	r7, r4
 80119be:	2f00      	cmp	r7, #0
 80119c0:	d143      	bne.n	8011a4a <_malloc_r+0xd6>
 80119c2:	2c00      	cmp	r4, #0
 80119c4:	d04b      	beq.n	8011a5e <_malloc_r+0xea>
 80119c6:	6823      	ldr	r3, [r4, #0]
 80119c8:	4639      	mov	r1, r7
 80119ca:	4630      	mov	r0, r6
 80119cc:	eb04 0903 	add.w	r9, r4, r3
 80119d0:	f000 fe06 	bl	80125e0 <_sbrk_r>
 80119d4:	4581      	cmp	r9, r0
 80119d6:	d142      	bne.n	8011a5e <_malloc_r+0xea>
 80119d8:	6821      	ldr	r1, [r4, #0]
 80119da:	1a6d      	subs	r5, r5, r1
 80119dc:	4629      	mov	r1, r5
 80119de:	4630      	mov	r0, r6
 80119e0:	f7ff ffa6 	bl	8011930 <sbrk_aligned>
 80119e4:	3001      	adds	r0, #1
 80119e6:	d03a      	beq.n	8011a5e <_malloc_r+0xea>
 80119e8:	6823      	ldr	r3, [r4, #0]
 80119ea:	442b      	add	r3, r5
 80119ec:	6023      	str	r3, [r4, #0]
 80119ee:	f8d8 3000 	ldr.w	r3, [r8]
 80119f2:	685a      	ldr	r2, [r3, #4]
 80119f4:	bb62      	cbnz	r2, 8011a50 <_malloc_r+0xdc>
 80119f6:	f8c8 7000 	str.w	r7, [r8]
 80119fa:	e00f      	b.n	8011a1c <_malloc_r+0xa8>
 80119fc:	6822      	ldr	r2, [r4, #0]
 80119fe:	1b52      	subs	r2, r2, r5
 8011a00:	d420      	bmi.n	8011a44 <_malloc_r+0xd0>
 8011a02:	2a0b      	cmp	r2, #11
 8011a04:	d917      	bls.n	8011a36 <_malloc_r+0xc2>
 8011a06:	1961      	adds	r1, r4, r5
 8011a08:	42a3      	cmp	r3, r4
 8011a0a:	6025      	str	r5, [r4, #0]
 8011a0c:	bf18      	it	ne
 8011a0e:	6059      	strne	r1, [r3, #4]
 8011a10:	6863      	ldr	r3, [r4, #4]
 8011a12:	bf08      	it	eq
 8011a14:	f8c8 1000 	streq.w	r1, [r8]
 8011a18:	5162      	str	r2, [r4, r5]
 8011a1a:	604b      	str	r3, [r1, #4]
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	f000 f82f 	bl	8011a80 <__malloc_unlock>
 8011a22:	f104 000b 	add.w	r0, r4, #11
 8011a26:	1d23      	adds	r3, r4, #4
 8011a28:	f020 0007 	bic.w	r0, r0, #7
 8011a2c:	1ac2      	subs	r2, r0, r3
 8011a2e:	bf1c      	itt	ne
 8011a30:	1a1b      	subne	r3, r3, r0
 8011a32:	50a3      	strne	r3, [r4, r2]
 8011a34:	e7af      	b.n	8011996 <_malloc_r+0x22>
 8011a36:	6862      	ldr	r2, [r4, #4]
 8011a38:	42a3      	cmp	r3, r4
 8011a3a:	bf0c      	ite	eq
 8011a3c:	f8c8 2000 	streq.w	r2, [r8]
 8011a40:	605a      	strne	r2, [r3, #4]
 8011a42:	e7eb      	b.n	8011a1c <_malloc_r+0xa8>
 8011a44:	4623      	mov	r3, r4
 8011a46:	6864      	ldr	r4, [r4, #4]
 8011a48:	e7ae      	b.n	80119a8 <_malloc_r+0x34>
 8011a4a:	463c      	mov	r4, r7
 8011a4c:	687f      	ldr	r7, [r7, #4]
 8011a4e:	e7b6      	b.n	80119be <_malloc_r+0x4a>
 8011a50:	461a      	mov	r2, r3
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	42a3      	cmp	r3, r4
 8011a56:	d1fb      	bne.n	8011a50 <_malloc_r+0xdc>
 8011a58:	2300      	movs	r3, #0
 8011a5a:	6053      	str	r3, [r2, #4]
 8011a5c:	e7de      	b.n	8011a1c <_malloc_r+0xa8>
 8011a5e:	230c      	movs	r3, #12
 8011a60:	6033      	str	r3, [r6, #0]
 8011a62:	4630      	mov	r0, r6
 8011a64:	f000 f80c 	bl	8011a80 <__malloc_unlock>
 8011a68:	e794      	b.n	8011994 <_malloc_r+0x20>
 8011a6a:	6005      	str	r5, [r0, #0]
 8011a6c:	e7d6      	b.n	8011a1c <_malloc_r+0xa8>
 8011a6e:	bf00      	nop
 8011a70:	200086e0 	.word	0x200086e0

08011a74 <__malloc_lock>:
 8011a74:	4801      	ldr	r0, [pc, #4]	@ (8011a7c <__malloc_lock+0x8>)
 8011a76:	f7ff bef2 	b.w	801185e <__retarget_lock_acquire_recursive>
 8011a7a:	bf00      	nop
 8011a7c:	200086d8 	.word	0x200086d8

08011a80 <__malloc_unlock>:
 8011a80:	4801      	ldr	r0, [pc, #4]	@ (8011a88 <__malloc_unlock+0x8>)
 8011a82:	f7ff beed 	b.w	8011860 <__retarget_lock_release_recursive>
 8011a86:	bf00      	nop
 8011a88:	200086d8 	.word	0x200086d8

08011a8c <__ssputs_r>:
 8011a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a90:	688e      	ldr	r6, [r1, #8]
 8011a92:	461f      	mov	r7, r3
 8011a94:	42be      	cmp	r6, r7
 8011a96:	680b      	ldr	r3, [r1, #0]
 8011a98:	4682      	mov	sl, r0
 8011a9a:	460c      	mov	r4, r1
 8011a9c:	4690      	mov	r8, r2
 8011a9e:	d82d      	bhi.n	8011afc <__ssputs_r+0x70>
 8011aa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011aa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011aa8:	d026      	beq.n	8011af8 <__ssputs_r+0x6c>
 8011aaa:	6965      	ldr	r5, [r4, #20]
 8011aac:	6909      	ldr	r1, [r1, #16]
 8011aae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ab2:	eba3 0901 	sub.w	r9, r3, r1
 8011ab6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011aba:	1c7b      	adds	r3, r7, #1
 8011abc:	444b      	add	r3, r9
 8011abe:	106d      	asrs	r5, r5, #1
 8011ac0:	429d      	cmp	r5, r3
 8011ac2:	bf38      	it	cc
 8011ac4:	461d      	movcc	r5, r3
 8011ac6:	0553      	lsls	r3, r2, #21
 8011ac8:	d527      	bpl.n	8011b1a <__ssputs_r+0x8e>
 8011aca:	4629      	mov	r1, r5
 8011acc:	f7ff ff52 	bl	8011974 <_malloc_r>
 8011ad0:	4606      	mov	r6, r0
 8011ad2:	b360      	cbz	r0, 8011b2e <__ssputs_r+0xa2>
 8011ad4:	6921      	ldr	r1, [r4, #16]
 8011ad6:	464a      	mov	r2, r9
 8011ad8:	f7ff fec3 	bl	8011862 <memcpy>
 8011adc:	89a3      	ldrh	r3, [r4, #12]
 8011ade:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ae6:	81a3      	strh	r3, [r4, #12]
 8011ae8:	6126      	str	r6, [r4, #16]
 8011aea:	6165      	str	r5, [r4, #20]
 8011aec:	444e      	add	r6, r9
 8011aee:	eba5 0509 	sub.w	r5, r5, r9
 8011af2:	6026      	str	r6, [r4, #0]
 8011af4:	60a5      	str	r5, [r4, #8]
 8011af6:	463e      	mov	r6, r7
 8011af8:	42be      	cmp	r6, r7
 8011afa:	d900      	bls.n	8011afe <__ssputs_r+0x72>
 8011afc:	463e      	mov	r6, r7
 8011afe:	6820      	ldr	r0, [r4, #0]
 8011b00:	4632      	mov	r2, r6
 8011b02:	4641      	mov	r1, r8
 8011b04:	f7ff fe1d 	bl	8011742 <memmove>
 8011b08:	68a3      	ldr	r3, [r4, #8]
 8011b0a:	1b9b      	subs	r3, r3, r6
 8011b0c:	60a3      	str	r3, [r4, #8]
 8011b0e:	6823      	ldr	r3, [r4, #0]
 8011b10:	4433      	add	r3, r6
 8011b12:	6023      	str	r3, [r4, #0]
 8011b14:	2000      	movs	r0, #0
 8011b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b1a:	462a      	mov	r2, r5
 8011b1c:	f000 fd70 	bl	8012600 <_realloc_r>
 8011b20:	4606      	mov	r6, r0
 8011b22:	2800      	cmp	r0, #0
 8011b24:	d1e0      	bne.n	8011ae8 <__ssputs_r+0x5c>
 8011b26:	6921      	ldr	r1, [r4, #16]
 8011b28:	4650      	mov	r0, sl
 8011b2a:	f7ff feaf 	bl	801188c <_free_r>
 8011b2e:	230c      	movs	r3, #12
 8011b30:	f8ca 3000 	str.w	r3, [sl]
 8011b34:	89a3      	ldrh	r3, [r4, #12]
 8011b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b3a:	81a3      	strh	r3, [r4, #12]
 8011b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b40:	e7e9      	b.n	8011b16 <__ssputs_r+0x8a>
	...

08011b44 <_svfiprintf_r>:
 8011b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b48:	4698      	mov	r8, r3
 8011b4a:	898b      	ldrh	r3, [r1, #12]
 8011b4c:	061b      	lsls	r3, r3, #24
 8011b4e:	b09d      	sub	sp, #116	@ 0x74
 8011b50:	4607      	mov	r7, r0
 8011b52:	460d      	mov	r5, r1
 8011b54:	4614      	mov	r4, r2
 8011b56:	d510      	bpl.n	8011b7a <_svfiprintf_r+0x36>
 8011b58:	690b      	ldr	r3, [r1, #16]
 8011b5a:	b973      	cbnz	r3, 8011b7a <_svfiprintf_r+0x36>
 8011b5c:	2140      	movs	r1, #64	@ 0x40
 8011b5e:	f7ff ff09 	bl	8011974 <_malloc_r>
 8011b62:	6028      	str	r0, [r5, #0]
 8011b64:	6128      	str	r0, [r5, #16]
 8011b66:	b930      	cbnz	r0, 8011b76 <_svfiprintf_r+0x32>
 8011b68:	230c      	movs	r3, #12
 8011b6a:	603b      	str	r3, [r7, #0]
 8011b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b70:	b01d      	add	sp, #116	@ 0x74
 8011b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b76:	2340      	movs	r3, #64	@ 0x40
 8011b78:	616b      	str	r3, [r5, #20]
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b7e:	2320      	movs	r3, #32
 8011b80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b84:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b88:	2330      	movs	r3, #48	@ 0x30
 8011b8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011d28 <_svfiprintf_r+0x1e4>
 8011b8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b92:	f04f 0901 	mov.w	r9, #1
 8011b96:	4623      	mov	r3, r4
 8011b98:	469a      	mov	sl, r3
 8011b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b9e:	b10a      	cbz	r2, 8011ba4 <_svfiprintf_r+0x60>
 8011ba0:	2a25      	cmp	r2, #37	@ 0x25
 8011ba2:	d1f9      	bne.n	8011b98 <_svfiprintf_r+0x54>
 8011ba4:	ebba 0b04 	subs.w	fp, sl, r4
 8011ba8:	d00b      	beq.n	8011bc2 <_svfiprintf_r+0x7e>
 8011baa:	465b      	mov	r3, fp
 8011bac:	4622      	mov	r2, r4
 8011bae:	4629      	mov	r1, r5
 8011bb0:	4638      	mov	r0, r7
 8011bb2:	f7ff ff6b 	bl	8011a8c <__ssputs_r>
 8011bb6:	3001      	adds	r0, #1
 8011bb8:	f000 80a7 	beq.w	8011d0a <_svfiprintf_r+0x1c6>
 8011bbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011bbe:	445a      	add	r2, fp
 8011bc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8011bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	f000 809f 	beq.w	8011d0a <_svfiprintf_r+0x1c6>
 8011bcc:	2300      	movs	r3, #0
 8011bce:	f04f 32ff 	mov.w	r2, #4294967295
 8011bd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bd6:	f10a 0a01 	add.w	sl, sl, #1
 8011bda:	9304      	str	r3, [sp, #16]
 8011bdc:	9307      	str	r3, [sp, #28]
 8011bde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011be2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011be4:	4654      	mov	r4, sl
 8011be6:	2205      	movs	r2, #5
 8011be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bec:	484e      	ldr	r0, [pc, #312]	@ (8011d28 <_svfiprintf_r+0x1e4>)
 8011bee:	f7ee faef 	bl	80001d0 <memchr>
 8011bf2:	9a04      	ldr	r2, [sp, #16]
 8011bf4:	b9d8      	cbnz	r0, 8011c2e <_svfiprintf_r+0xea>
 8011bf6:	06d0      	lsls	r0, r2, #27
 8011bf8:	bf44      	itt	mi
 8011bfa:	2320      	movmi	r3, #32
 8011bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c00:	0711      	lsls	r1, r2, #28
 8011c02:	bf44      	itt	mi
 8011c04:	232b      	movmi	r3, #43	@ 0x2b
 8011c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8011c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c10:	d015      	beq.n	8011c3e <_svfiprintf_r+0xfa>
 8011c12:	9a07      	ldr	r2, [sp, #28]
 8011c14:	4654      	mov	r4, sl
 8011c16:	2000      	movs	r0, #0
 8011c18:	f04f 0c0a 	mov.w	ip, #10
 8011c1c:	4621      	mov	r1, r4
 8011c1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c22:	3b30      	subs	r3, #48	@ 0x30
 8011c24:	2b09      	cmp	r3, #9
 8011c26:	d94b      	bls.n	8011cc0 <_svfiprintf_r+0x17c>
 8011c28:	b1b0      	cbz	r0, 8011c58 <_svfiprintf_r+0x114>
 8011c2a:	9207      	str	r2, [sp, #28]
 8011c2c:	e014      	b.n	8011c58 <_svfiprintf_r+0x114>
 8011c2e:	eba0 0308 	sub.w	r3, r0, r8
 8011c32:	fa09 f303 	lsl.w	r3, r9, r3
 8011c36:	4313      	orrs	r3, r2
 8011c38:	9304      	str	r3, [sp, #16]
 8011c3a:	46a2      	mov	sl, r4
 8011c3c:	e7d2      	b.n	8011be4 <_svfiprintf_r+0xa0>
 8011c3e:	9b03      	ldr	r3, [sp, #12]
 8011c40:	1d19      	adds	r1, r3, #4
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	9103      	str	r1, [sp, #12]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	bfbb      	ittet	lt
 8011c4a:	425b      	neglt	r3, r3
 8011c4c:	f042 0202 	orrlt.w	r2, r2, #2
 8011c50:	9307      	strge	r3, [sp, #28]
 8011c52:	9307      	strlt	r3, [sp, #28]
 8011c54:	bfb8      	it	lt
 8011c56:	9204      	strlt	r2, [sp, #16]
 8011c58:	7823      	ldrb	r3, [r4, #0]
 8011c5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c5c:	d10a      	bne.n	8011c74 <_svfiprintf_r+0x130>
 8011c5e:	7863      	ldrb	r3, [r4, #1]
 8011c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c62:	d132      	bne.n	8011cca <_svfiprintf_r+0x186>
 8011c64:	9b03      	ldr	r3, [sp, #12]
 8011c66:	1d1a      	adds	r2, r3, #4
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	9203      	str	r2, [sp, #12]
 8011c6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c70:	3402      	adds	r4, #2
 8011c72:	9305      	str	r3, [sp, #20]
 8011c74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011d38 <_svfiprintf_r+0x1f4>
 8011c78:	7821      	ldrb	r1, [r4, #0]
 8011c7a:	2203      	movs	r2, #3
 8011c7c:	4650      	mov	r0, sl
 8011c7e:	f7ee faa7 	bl	80001d0 <memchr>
 8011c82:	b138      	cbz	r0, 8011c94 <_svfiprintf_r+0x150>
 8011c84:	9b04      	ldr	r3, [sp, #16]
 8011c86:	eba0 000a 	sub.w	r0, r0, sl
 8011c8a:	2240      	movs	r2, #64	@ 0x40
 8011c8c:	4082      	lsls	r2, r0
 8011c8e:	4313      	orrs	r3, r2
 8011c90:	3401      	adds	r4, #1
 8011c92:	9304      	str	r3, [sp, #16]
 8011c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c98:	4824      	ldr	r0, [pc, #144]	@ (8011d2c <_svfiprintf_r+0x1e8>)
 8011c9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c9e:	2206      	movs	r2, #6
 8011ca0:	f7ee fa96 	bl	80001d0 <memchr>
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d036      	beq.n	8011d16 <_svfiprintf_r+0x1d2>
 8011ca8:	4b21      	ldr	r3, [pc, #132]	@ (8011d30 <_svfiprintf_r+0x1ec>)
 8011caa:	bb1b      	cbnz	r3, 8011cf4 <_svfiprintf_r+0x1b0>
 8011cac:	9b03      	ldr	r3, [sp, #12]
 8011cae:	3307      	adds	r3, #7
 8011cb0:	f023 0307 	bic.w	r3, r3, #7
 8011cb4:	3308      	adds	r3, #8
 8011cb6:	9303      	str	r3, [sp, #12]
 8011cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cba:	4433      	add	r3, r6
 8011cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cbe:	e76a      	b.n	8011b96 <_svfiprintf_r+0x52>
 8011cc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cc4:	460c      	mov	r4, r1
 8011cc6:	2001      	movs	r0, #1
 8011cc8:	e7a8      	b.n	8011c1c <_svfiprintf_r+0xd8>
 8011cca:	2300      	movs	r3, #0
 8011ccc:	3401      	adds	r4, #1
 8011cce:	9305      	str	r3, [sp, #20]
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	f04f 0c0a 	mov.w	ip, #10
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cdc:	3a30      	subs	r2, #48	@ 0x30
 8011cde:	2a09      	cmp	r2, #9
 8011ce0:	d903      	bls.n	8011cea <_svfiprintf_r+0x1a6>
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d0c6      	beq.n	8011c74 <_svfiprintf_r+0x130>
 8011ce6:	9105      	str	r1, [sp, #20]
 8011ce8:	e7c4      	b.n	8011c74 <_svfiprintf_r+0x130>
 8011cea:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cee:	4604      	mov	r4, r0
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	e7f0      	b.n	8011cd6 <_svfiprintf_r+0x192>
 8011cf4:	ab03      	add	r3, sp, #12
 8011cf6:	9300      	str	r3, [sp, #0]
 8011cf8:	462a      	mov	r2, r5
 8011cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8011d34 <_svfiprintf_r+0x1f0>)
 8011cfc:	a904      	add	r1, sp, #16
 8011cfe:	4638      	mov	r0, r7
 8011d00:	f3af 8000 	nop.w
 8011d04:	1c42      	adds	r2, r0, #1
 8011d06:	4606      	mov	r6, r0
 8011d08:	d1d6      	bne.n	8011cb8 <_svfiprintf_r+0x174>
 8011d0a:	89ab      	ldrh	r3, [r5, #12]
 8011d0c:	065b      	lsls	r3, r3, #25
 8011d0e:	f53f af2d 	bmi.w	8011b6c <_svfiprintf_r+0x28>
 8011d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d14:	e72c      	b.n	8011b70 <_svfiprintf_r+0x2c>
 8011d16:	ab03      	add	r3, sp, #12
 8011d18:	9300      	str	r3, [sp, #0]
 8011d1a:	462a      	mov	r2, r5
 8011d1c:	4b05      	ldr	r3, [pc, #20]	@ (8011d34 <_svfiprintf_r+0x1f0>)
 8011d1e:	a904      	add	r1, sp, #16
 8011d20:	4638      	mov	r0, r7
 8011d22:	f000 f9bb 	bl	801209c <_printf_i>
 8011d26:	e7ed      	b.n	8011d04 <_svfiprintf_r+0x1c0>
 8011d28:	08015587 	.word	0x08015587
 8011d2c:	08015591 	.word	0x08015591
 8011d30:	00000000 	.word	0x00000000
 8011d34:	08011a8d 	.word	0x08011a8d
 8011d38:	0801558d 	.word	0x0801558d

08011d3c <__sfputc_r>:
 8011d3c:	6893      	ldr	r3, [r2, #8]
 8011d3e:	3b01      	subs	r3, #1
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	b410      	push	{r4}
 8011d44:	6093      	str	r3, [r2, #8]
 8011d46:	da08      	bge.n	8011d5a <__sfputc_r+0x1e>
 8011d48:	6994      	ldr	r4, [r2, #24]
 8011d4a:	42a3      	cmp	r3, r4
 8011d4c:	db01      	blt.n	8011d52 <__sfputc_r+0x16>
 8011d4e:	290a      	cmp	r1, #10
 8011d50:	d103      	bne.n	8011d5a <__sfputc_r+0x1e>
 8011d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d56:	f000 bb6b 	b.w	8012430 <__swbuf_r>
 8011d5a:	6813      	ldr	r3, [r2, #0]
 8011d5c:	1c58      	adds	r0, r3, #1
 8011d5e:	6010      	str	r0, [r2, #0]
 8011d60:	7019      	strb	r1, [r3, #0]
 8011d62:	4608      	mov	r0, r1
 8011d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d68:	4770      	bx	lr

08011d6a <__sfputs_r>:
 8011d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d6c:	4606      	mov	r6, r0
 8011d6e:	460f      	mov	r7, r1
 8011d70:	4614      	mov	r4, r2
 8011d72:	18d5      	adds	r5, r2, r3
 8011d74:	42ac      	cmp	r4, r5
 8011d76:	d101      	bne.n	8011d7c <__sfputs_r+0x12>
 8011d78:	2000      	movs	r0, #0
 8011d7a:	e007      	b.n	8011d8c <__sfputs_r+0x22>
 8011d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d80:	463a      	mov	r2, r7
 8011d82:	4630      	mov	r0, r6
 8011d84:	f7ff ffda 	bl	8011d3c <__sfputc_r>
 8011d88:	1c43      	adds	r3, r0, #1
 8011d8a:	d1f3      	bne.n	8011d74 <__sfputs_r+0xa>
 8011d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d90 <_vfiprintf_r>:
 8011d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d94:	460d      	mov	r5, r1
 8011d96:	b09d      	sub	sp, #116	@ 0x74
 8011d98:	4614      	mov	r4, r2
 8011d9a:	4698      	mov	r8, r3
 8011d9c:	4606      	mov	r6, r0
 8011d9e:	b118      	cbz	r0, 8011da8 <_vfiprintf_r+0x18>
 8011da0:	6a03      	ldr	r3, [r0, #32]
 8011da2:	b90b      	cbnz	r3, 8011da8 <_vfiprintf_r+0x18>
 8011da4:	f7ff fbea 	bl	801157c <__sinit>
 8011da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011daa:	07d9      	lsls	r1, r3, #31
 8011dac:	d405      	bmi.n	8011dba <_vfiprintf_r+0x2a>
 8011dae:	89ab      	ldrh	r3, [r5, #12]
 8011db0:	059a      	lsls	r2, r3, #22
 8011db2:	d402      	bmi.n	8011dba <_vfiprintf_r+0x2a>
 8011db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011db6:	f7ff fd52 	bl	801185e <__retarget_lock_acquire_recursive>
 8011dba:	89ab      	ldrh	r3, [r5, #12]
 8011dbc:	071b      	lsls	r3, r3, #28
 8011dbe:	d501      	bpl.n	8011dc4 <_vfiprintf_r+0x34>
 8011dc0:	692b      	ldr	r3, [r5, #16]
 8011dc2:	b99b      	cbnz	r3, 8011dec <_vfiprintf_r+0x5c>
 8011dc4:	4629      	mov	r1, r5
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	f000 fb70 	bl	80124ac <__swsetup_r>
 8011dcc:	b170      	cbz	r0, 8011dec <_vfiprintf_r+0x5c>
 8011dce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011dd0:	07dc      	lsls	r4, r3, #31
 8011dd2:	d504      	bpl.n	8011dde <_vfiprintf_r+0x4e>
 8011dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd8:	b01d      	add	sp, #116	@ 0x74
 8011dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dde:	89ab      	ldrh	r3, [r5, #12]
 8011de0:	0598      	lsls	r0, r3, #22
 8011de2:	d4f7      	bmi.n	8011dd4 <_vfiprintf_r+0x44>
 8011de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011de6:	f7ff fd3b 	bl	8011860 <__retarget_lock_release_recursive>
 8011dea:	e7f3      	b.n	8011dd4 <_vfiprintf_r+0x44>
 8011dec:	2300      	movs	r3, #0
 8011dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8011df0:	2320      	movs	r3, #32
 8011df2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011dfa:	2330      	movs	r3, #48	@ 0x30
 8011dfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011fac <_vfiprintf_r+0x21c>
 8011e00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e04:	f04f 0901 	mov.w	r9, #1
 8011e08:	4623      	mov	r3, r4
 8011e0a:	469a      	mov	sl, r3
 8011e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e10:	b10a      	cbz	r2, 8011e16 <_vfiprintf_r+0x86>
 8011e12:	2a25      	cmp	r2, #37	@ 0x25
 8011e14:	d1f9      	bne.n	8011e0a <_vfiprintf_r+0x7a>
 8011e16:	ebba 0b04 	subs.w	fp, sl, r4
 8011e1a:	d00b      	beq.n	8011e34 <_vfiprintf_r+0xa4>
 8011e1c:	465b      	mov	r3, fp
 8011e1e:	4622      	mov	r2, r4
 8011e20:	4629      	mov	r1, r5
 8011e22:	4630      	mov	r0, r6
 8011e24:	f7ff ffa1 	bl	8011d6a <__sfputs_r>
 8011e28:	3001      	adds	r0, #1
 8011e2a:	f000 80a7 	beq.w	8011f7c <_vfiprintf_r+0x1ec>
 8011e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e30:	445a      	add	r2, fp
 8011e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e34:	f89a 3000 	ldrb.w	r3, [sl]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f000 809f 	beq.w	8011f7c <_vfiprintf_r+0x1ec>
 8011e3e:	2300      	movs	r3, #0
 8011e40:	f04f 32ff 	mov.w	r2, #4294967295
 8011e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e48:	f10a 0a01 	add.w	sl, sl, #1
 8011e4c:	9304      	str	r3, [sp, #16]
 8011e4e:	9307      	str	r3, [sp, #28]
 8011e50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e54:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e56:	4654      	mov	r4, sl
 8011e58:	2205      	movs	r2, #5
 8011e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e5e:	4853      	ldr	r0, [pc, #332]	@ (8011fac <_vfiprintf_r+0x21c>)
 8011e60:	f7ee f9b6 	bl	80001d0 <memchr>
 8011e64:	9a04      	ldr	r2, [sp, #16]
 8011e66:	b9d8      	cbnz	r0, 8011ea0 <_vfiprintf_r+0x110>
 8011e68:	06d1      	lsls	r1, r2, #27
 8011e6a:	bf44      	itt	mi
 8011e6c:	2320      	movmi	r3, #32
 8011e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e72:	0713      	lsls	r3, r2, #28
 8011e74:	bf44      	itt	mi
 8011e76:	232b      	movmi	r3, #43	@ 0x2b
 8011e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8011e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e82:	d015      	beq.n	8011eb0 <_vfiprintf_r+0x120>
 8011e84:	9a07      	ldr	r2, [sp, #28]
 8011e86:	4654      	mov	r4, sl
 8011e88:	2000      	movs	r0, #0
 8011e8a:	f04f 0c0a 	mov.w	ip, #10
 8011e8e:	4621      	mov	r1, r4
 8011e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e94:	3b30      	subs	r3, #48	@ 0x30
 8011e96:	2b09      	cmp	r3, #9
 8011e98:	d94b      	bls.n	8011f32 <_vfiprintf_r+0x1a2>
 8011e9a:	b1b0      	cbz	r0, 8011eca <_vfiprintf_r+0x13a>
 8011e9c:	9207      	str	r2, [sp, #28]
 8011e9e:	e014      	b.n	8011eca <_vfiprintf_r+0x13a>
 8011ea0:	eba0 0308 	sub.w	r3, r0, r8
 8011ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8011ea8:	4313      	orrs	r3, r2
 8011eaa:	9304      	str	r3, [sp, #16]
 8011eac:	46a2      	mov	sl, r4
 8011eae:	e7d2      	b.n	8011e56 <_vfiprintf_r+0xc6>
 8011eb0:	9b03      	ldr	r3, [sp, #12]
 8011eb2:	1d19      	adds	r1, r3, #4
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	9103      	str	r1, [sp, #12]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	bfbb      	ittet	lt
 8011ebc:	425b      	neglt	r3, r3
 8011ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8011ec2:	9307      	strge	r3, [sp, #28]
 8011ec4:	9307      	strlt	r3, [sp, #28]
 8011ec6:	bfb8      	it	lt
 8011ec8:	9204      	strlt	r2, [sp, #16]
 8011eca:	7823      	ldrb	r3, [r4, #0]
 8011ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ece:	d10a      	bne.n	8011ee6 <_vfiprintf_r+0x156>
 8011ed0:	7863      	ldrb	r3, [r4, #1]
 8011ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ed4:	d132      	bne.n	8011f3c <_vfiprintf_r+0x1ac>
 8011ed6:	9b03      	ldr	r3, [sp, #12]
 8011ed8:	1d1a      	adds	r2, r3, #4
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	9203      	str	r2, [sp, #12]
 8011ede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ee2:	3402      	adds	r4, #2
 8011ee4:	9305      	str	r3, [sp, #20]
 8011ee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011fbc <_vfiprintf_r+0x22c>
 8011eea:	7821      	ldrb	r1, [r4, #0]
 8011eec:	2203      	movs	r2, #3
 8011eee:	4650      	mov	r0, sl
 8011ef0:	f7ee f96e 	bl	80001d0 <memchr>
 8011ef4:	b138      	cbz	r0, 8011f06 <_vfiprintf_r+0x176>
 8011ef6:	9b04      	ldr	r3, [sp, #16]
 8011ef8:	eba0 000a 	sub.w	r0, r0, sl
 8011efc:	2240      	movs	r2, #64	@ 0x40
 8011efe:	4082      	lsls	r2, r0
 8011f00:	4313      	orrs	r3, r2
 8011f02:	3401      	adds	r4, #1
 8011f04:	9304      	str	r3, [sp, #16]
 8011f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f0a:	4829      	ldr	r0, [pc, #164]	@ (8011fb0 <_vfiprintf_r+0x220>)
 8011f0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f10:	2206      	movs	r2, #6
 8011f12:	f7ee f95d 	bl	80001d0 <memchr>
 8011f16:	2800      	cmp	r0, #0
 8011f18:	d03f      	beq.n	8011f9a <_vfiprintf_r+0x20a>
 8011f1a:	4b26      	ldr	r3, [pc, #152]	@ (8011fb4 <_vfiprintf_r+0x224>)
 8011f1c:	bb1b      	cbnz	r3, 8011f66 <_vfiprintf_r+0x1d6>
 8011f1e:	9b03      	ldr	r3, [sp, #12]
 8011f20:	3307      	adds	r3, #7
 8011f22:	f023 0307 	bic.w	r3, r3, #7
 8011f26:	3308      	adds	r3, #8
 8011f28:	9303      	str	r3, [sp, #12]
 8011f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f2c:	443b      	add	r3, r7
 8011f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f30:	e76a      	b.n	8011e08 <_vfiprintf_r+0x78>
 8011f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f36:	460c      	mov	r4, r1
 8011f38:	2001      	movs	r0, #1
 8011f3a:	e7a8      	b.n	8011e8e <_vfiprintf_r+0xfe>
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	3401      	adds	r4, #1
 8011f40:	9305      	str	r3, [sp, #20]
 8011f42:	4619      	mov	r1, r3
 8011f44:	f04f 0c0a 	mov.w	ip, #10
 8011f48:	4620      	mov	r0, r4
 8011f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f4e:	3a30      	subs	r2, #48	@ 0x30
 8011f50:	2a09      	cmp	r2, #9
 8011f52:	d903      	bls.n	8011f5c <_vfiprintf_r+0x1cc>
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d0c6      	beq.n	8011ee6 <_vfiprintf_r+0x156>
 8011f58:	9105      	str	r1, [sp, #20]
 8011f5a:	e7c4      	b.n	8011ee6 <_vfiprintf_r+0x156>
 8011f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f60:	4604      	mov	r4, r0
 8011f62:	2301      	movs	r3, #1
 8011f64:	e7f0      	b.n	8011f48 <_vfiprintf_r+0x1b8>
 8011f66:	ab03      	add	r3, sp, #12
 8011f68:	9300      	str	r3, [sp, #0]
 8011f6a:	462a      	mov	r2, r5
 8011f6c:	4b12      	ldr	r3, [pc, #72]	@ (8011fb8 <_vfiprintf_r+0x228>)
 8011f6e:	a904      	add	r1, sp, #16
 8011f70:	4630      	mov	r0, r6
 8011f72:	f3af 8000 	nop.w
 8011f76:	4607      	mov	r7, r0
 8011f78:	1c78      	adds	r0, r7, #1
 8011f7a:	d1d6      	bne.n	8011f2a <_vfiprintf_r+0x19a>
 8011f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f7e:	07d9      	lsls	r1, r3, #31
 8011f80:	d405      	bmi.n	8011f8e <_vfiprintf_r+0x1fe>
 8011f82:	89ab      	ldrh	r3, [r5, #12]
 8011f84:	059a      	lsls	r2, r3, #22
 8011f86:	d402      	bmi.n	8011f8e <_vfiprintf_r+0x1fe>
 8011f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f8a:	f7ff fc69 	bl	8011860 <__retarget_lock_release_recursive>
 8011f8e:	89ab      	ldrh	r3, [r5, #12]
 8011f90:	065b      	lsls	r3, r3, #25
 8011f92:	f53f af1f 	bmi.w	8011dd4 <_vfiprintf_r+0x44>
 8011f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f98:	e71e      	b.n	8011dd8 <_vfiprintf_r+0x48>
 8011f9a:	ab03      	add	r3, sp, #12
 8011f9c:	9300      	str	r3, [sp, #0]
 8011f9e:	462a      	mov	r2, r5
 8011fa0:	4b05      	ldr	r3, [pc, #20]	@ (8011fb8 <_vfiprintf_r+0x228>)
 8011fa2:	a904      	add	r1, sp, #16
 8011fa4:	4630      	mov	r0, r6
 8011fa6:	f000 f879 	bl	801209c <_printf_i>
 8011faa:	e7e4      	b.n	8011f76 <_vfiprintf_r+0x1e6>
 8011fac:	08015587 	.word	0x08015587
 8011fb0:	08015591 	.word	0x08015591
 8011fb4:	00000000 	.word	0x00000000
 8011fb8:	08011d6b 	.word	0x08011d6b
 8011fbc:	0801558d 	.word	0x0801558d

08011fc0 <_printf_common>:
 8011fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fc4:	4616      	mov	r6, r2
 8011fc6:	4698      	mov	r8, r3
 8011fc8:	688a      	ldr	r2, [r1, #8]
 8011fca:	690b      	ldr	r3, [r1, #16]
 8011fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011fd0:	4293      	cmp	r3, r2
 8011fd2:	bfb8      	it	lt
 8011fd4:	4613      	movlt	r3, r2
 8011fd6:	6033      	str	r3, [r6, #0]
 8011fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011fdc:	4607      	mov	r7, r0
 8011fde:	460c      	mov	r4, r1
 8011fe0:	b10a      	cbz	r2, 8011fe6 <_printf_common+0x26>
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	6033      	str	r3, [r6, #0]
 8011fe6:	6823      	ldr	r3, [r4, #0]
 8011fe8:	0699      	lsls	r1, r3, #26
 8011fea:	bf42      	ittt	mi
 8011fec:	6833      	ldrmi	r3, [r6, #0]
 8011fee:	3302      	addmi	r3, #2
 8011ff0:	6033      	strmi	r3, [r6, #0]
 8011ff2:	6825      	ldr	r5, [r4, #0]
 8011ff4:	f015 0506 	ands.w	r5, r5, #6
 8011ff8:	d106      	bne.n	8012008 <_printf_common+0x48>
 8011ffa:	f104 0a19 	add.w	sl, r4, #25
 8011ffe:	68e3      	ldr	r3, [r4, #12]
 8012000:	6832      	ldr	r2, [r6, #0]
 8012002:	1a9b      	subs	r3, r3, r2
 8012004:	42ab      	cmp	r3, r5
 8012006:	dc26      	bgt.n	8012056 <_printf_common+0x96>
 8012008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801200c:	6822      	ldr	r2, [r4, #0]
 801200e:	3b00      	subs	r3, #0
 8012010:	bf18      	it	ne
 8012012:	2301      	movne	r3, #1
 8012014:	0692      	lsls	r2, r2, #26
 8012016:	d42b      	bmi.n	8012070 <_printf_common+0xb0>
 8012018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801201c:	4641      	mov	r1, r8
 801201e:	4638      	mov	r0, r7
 8012020:	47c8      	blx	r9
 8012022:	3001      	adds	r0, #1
 8012024:	d01e      	beq.n	8012064 <_printf_common+0xa4>
 8012026:	6823      	ldr	r3, [r4, #0]
 8012028:	6922      	ldr	r2, [r4, #16]
 801202a:	f003 0306 	and.w	r3, r3, #6
 801202e:	2b04      	cmp	r3, #4
 8012030:	bf02      	ittt	eq
 8012032:	68e5      	ldreq	r5, [r4, #12]
 8012034:	6833      	ldreq	r3, [r6, #0]
 8012036:	1aed      	subeq	r5, r5, r3
 8012038:	68a3      	ldr	r3, [r4, #8]
 801203a:	bf0c      	ite	eq
 801203c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012040:	2500      	movne	r5, #0
 8012042:	4293      	cmp	r3, r2
 8012044:	bfc4      	itt	gt
 8012046:	1a9b      	subgt	r3, r3, r2
 8012048:	18ed      	addgt	r5, r5, r3
 801204a:	2600      	movs	r6, #0
 801204c:	341a      	adds	r4, #26
 801204e:	42b5      	cmp	r5, r6
 8012050:	d11a      	bne.n	8012088 <_printf_common+0xc8>
 8012052:	2000      	movs	r0, #0
 8012054:	e008      	b.n	8012068 <_printf_common+0xa8>
 8012056:	2301      	movs	r3, #1
 8012058:	4652      	mov	r2, sl
 801205a:	4641      	mov	r1, r8
 801205c:	4638      	mov	r0, r7
 801205e:	47c8      	blx	r9
 8012060:	3001      	adds	r0, #1
 8012062:	d103      	bne.n	801206c <_printf_common+0xac>
 8012064:	f04f 30ff 	mov.w	r0, #4294967295
 8012068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801206c:	3501      	adds	r5, #1
 801206e:	e7c6      	b.n	8011ffe <_printf_common+0x3e>
 8012070:	18e1      	adds	r1, r4, r3
 8012072:	1c5a      	adds	r2, r3, #1
 8012074:	2030      	movs	r0, #48	@ 0x30
 8012076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801207a:	4422      	add	r2, r4
 801207c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012084:	3302      	adds	r3, #2
 8012086:	e7c7      	b.n	8012018 <_printf_common+0x58>
 8012088:	2301      	movs	r3, #1
 801208a:	4622      	mov	r2, r4
 801208c:	4641      	mov	r1, r8
 801208e:	4638      	mov	r0, r7
 8012090:	47c8      	blx	r9
 8012092:	3001      	adds	r0, #1
 8012094:	d0e6      	beq.n	8012064 <_printf_common+0xa4>
 8012096:	3601      	adds	r6, #1
 8012098:	e7d9      	b.n	801204e <_printf_common+0x8e>
	...

0801209c <_printf_i>:
 801209c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120a0:	7e0f      	ldrb	r7, [r1, #24]
 80120a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80120a4:	2f78      	cmp	r7, #120	@ 0x78
 80120a6:	4691      	mov	r9, r2
 80120a8:	4680      	mov	r8, r0
 80120aa:	460c      	mov	r4, r1
 80120ac:	469a      	mov	sl, r3
 80120ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80120b2:	d807      	bhi.n	80120c4 <_printf_i+0x28>
 80120b4:	2f62      	cmp	r7, #98	@ 0x62
 80120b6:	d80a      	bhi.n	80120ce <_printf_i+0x32>
 80120b8:	2f00      	cmp	r7, #0
 80120ba:	f000 80d1 	beq.w	8012260 <_printf_i+0x1c4>
 80120be:	2f58      	cmp	r7, #88	@ 0x58
 80120c0:	f000 80b8 	beq.w	8012234 <_printf_i+0x198>
 80120c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80120c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80120cc:	e03a      	b.n	8012144 <_printf_i+0xa8>
 80120ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80120d2:	2b15      	cmp	r3, #21
 80120d4:	d8f6      	bhi.n	80120c4 <_printf_i+0x28>
 80120d6:	a101      	add	r1, pc, #4	@ (adr r1, 80120dc <_printf_i+0x40>)
 80120d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120dc:	08012135 	.word	0x08012135
 80120e0:	08012149 	.word	0x08012149
 80120e4:	080120c5 	.word	0x080120c5
 80120e8:	080120c5 	.word	0x080120c5
 80120ec:	080120c5 	.word	0x080120c5
 80120f0:	080120c5 	.word	0x080120c5
 80120f4:	08012149 	.word	0x08012149
 80120f8:	080120c5 	.word	0x080120c5
 80120fc:	080120c5 	.word	0x080120c5
 8012100:	080120c5 	.word	0x080120c5
 8012104:	080120c5 	.word	0x080120c5
 8012108:	08012247 	.word	0x08012247
 801210c:	08012173 	.word	0x08012173
 8012110:	08012201 	.word	0x08012201
 8012114:	080120c5 	.word	0x080120c5
 8012118:	080120c5 	.word	0x080120c5
 801211c:	08012269 	.word	0x08012269
 8012120:	080120c5 	.word	0x080120c5
 8012124:	08012173 	.word	0x08012173
 8012128:	080120c5 	.word	0x080120c5
 801212c:	080120c5 	.word	0x080120c5
 8012130:	08012209 	.word	0x08012209
 8012134:	6833      	ldr	r3, [r6, #0]
 8012136:	1d1a      	adds	r2, r3, #4
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	6032      	str	r2, [r6, #0]
 801213c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012144:	2301      	movs	r3, #1
 8012146:	e09c      	b.n	8012282 <_printf_i+0x1e6>
 8012148:	6833      	ldr	r3, [r6, #0]
 801214a:	6820      	ldr	r0, [r4, #0]
 801214c:	1d19      	adds	r1, r3, #4
 801214e:	6031      	str	r1, [r6, #0]
 8012150:	0606      	lsls	r6, r0, #24
 8012152:	d501      	bpl.n	8012158 <_printf_i+0xbc>
 8012154:	681d      	ldr	r5, [r3, #0]
 8012156:	e003      	b.n	8012160 <_printf_i+0xc4>
 8012158:	0645      	lsls	r5, r0, #25
 801215a:	d5fb      	bpl.n	8012154 <_printf_i+0xb8>
 801215c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012160:	2d00      	cmp	r5, #0
 8012162:	da03      	bge.n	801216c <_printf_i+0xd0>
 8012164:	232d      	movs	r3, #45	@ 0x2d
 8012166:	426d      	negs	r5, r5
 8012168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801216c:	4858      	ldr	r0, [pc, #352]	@ (80122d0 <_printf_i+0x234>)
 801216e:	230a      	movs	r3, #10
 8012170:	e011      	b.n	8012196 <_printf_i+0xfa>
 8012172:	6821      	ldr	r1, [r4, #0]
 8012174:	6833      	ldr	r3, [r6, #0]
 8012176:	0608      	lsls	r0, r1, #24
 8012178:	f853 5b04 	ldr.w	r5, [r3], #4
 801217c:	d402      	bmi.n	8012184 <_printf_i+0xe8>
 801217e:	0649      	lsls	r1, r1, #25
 8012180:	bf48      	it	mi
 8012182:	b2ad      	uxthmi	r5, r5
 8012184:	2f6f      	cmp	r7, #111	@ 0x6f
 8012186:	4852      	ldr	r0, [pc, #328]	@ (80122d0 <_printf_i+0x234>)
 8012188:	6033      	str	r3, [r6, #0]
 801218a:	bf14      	ite	ne
 801218c:	230a      	movne	r3, #10
 801218e:	2308      	moveq	r3, #8
 8012190:	2100      	movs	r1, #0
 8012192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012196:	6866      	ldr	r6, [r4, #4]
 8012198:	60a6      	str	r6, [r4, #8]
 801219a:	2e00      	cmp	r6, #0
 801219c:	db05      	blt.n	80121aa <_printf_i+0x10e>
 801219e:	6821      	ldr	r1, [r4, #0]
 80121a0:	432e      	orrs	r6, r5
 80121a2:	f021 0104 	bic.w	r1, r1, #4
 80121a6:	6021      	str	r1, [r4, #0]
 80121a8:	d04b      	beq.n	8012242 <_printf_i+0x1a6>
 80121aa:	4616      	mov	r6, r2
 80121ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80121b0:	fb03 5711 	mls	r7, r3, r1, r5
 80121b4:	5dc7      	ldrb	r7, [r0, r7]
 80121b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80121ba:	462f      	mov	r7, r5
 80121bc:	42bb      	cmp	r3, r7
 80121be:	460d      	mov	r5, r1
 80121c0:	d9f4      	bls.n	80121ac <_printf_i+0x110>
 80121c2:	2b08      	cmp	r3, #8
 80121c4:	d10b      	bne.n	80121de <_printf_i+0x142>
 80121c6:	6823      	ldr	r3, [r4, #0]
 80121c8:	07df      	lsls	r7, r3, #31
 80121ca:	d508      	bpl.n	80121de <_printf_i+0x142>
 80121cc:	6923      	ldr	r3, [r4, #16]
 80121ce:	6861      	ldr	r1, [r4, #4]
 80121d0:	4299      	cmp	r1, r3
 80121d2:	bfde      	ittt	le
 80121d4:	2330      	movle	r3, #48	@ 0x30
 80121d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80121da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80121de:	1b92      	subs	r2, r2, r6
 80121e0:	6122      	str	r2, [r4, #16]
 80121e2:	f8cd a000 	str.w	sl, [sp]
 80121e6:	464b      	mov	r3, r9
 80121e8:	aa03      	add	r2, sp, #12
 80121ea:	4621      	mov	r1, r4
 80121ec:	4640      	mov	r0, r8
 80121ee:	f7ff fee7 	bl	8011fc0 <_printf_common>
 80121f2:	3001      	adds	r0, #1
 80121f4:	d14a      	bne.n	801228c <_printf_i+0x1f0>
 80121f6:	f04f 30ff 	mov.w	r0, #4294967295
 80121fa:	b004      	add	sp, #16
 80121fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012200:	6823      	ldr	r3, [r4, #0]
 8012202:	f043 0320 	orr.w	r3, r3, #32
 8012206:	6023      	str	r3, [r4, #0]
 8012208:	4832      	ldr	r0, [pc, #200]	@ (80122d4 <_printf_i+0x238>)
 801220a:	2778      	movs	r7, #120	@ 0x78
 801220c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012210:	6823      	ldr	r3, [r4, #0]
 8012212:	6831      	ldr	r1, [r6, #0]
 8012214:	061f      	lsls	r7, r3, #24
 8012216:	f851 5b04 	ldr.w	r5, [r1], #4
 801221a:	d402      	bmi.n	8012222 <_printf_i+0x186>
 801221c:	065f      	lsls	r7, r3, #25
 801221e:	bf48      	it	mi
 8012220:	b2ad      	uxthmi	r5, r5
 8012222:	6031      	str	r1, [r6, #0]
 8012224:	07d9      	lsls	r1, r3, #31
 8012226:	bf44      	itt	mi
 8012228:	f043 0320 	orrmi.w	r3, r3, #32
 801222c:	6023      	strmi	r3, [r4, #0]
 801222e:	b11d      	cbz	r5, 8012238 <_printf_i+0x19c>
 8012230:	2310      	movs	r3, #16
 8012232:	e7ad      	b.n	8012190 <_printf_i+0xf4>
 8012234:	4826      	ldr	r0, [pc, #152]	@ (80122d0 <_printf_i+0x234>)
 8012236:	e7e9      	b.n	801220c <_printf_i+0x170>
 8012238:	6823      	ldr	r3, [r4, #0]
 801223a:	f023 0320 	bic.w	r3, r3, #32
 801223e:	6023      	str	r3, [r4, #0]
 8012240:	e7f6      	b.n	8012230 <_printf_i+0x194>
 8012242:	4616      	mov	r6, r2
 8012244:	e7bd      	b.n	80121c2 <_printf_i+0x126>
 8012246:	6833      	ldr	r3, [r6, #0]
 8012248:	6825      	ldr	r5, [r4, #0]
 801224a:	6961      	ldr	r1, [r4, #20]
 801224c:	1d18      	adds	r0, r3, #4
 801224e:	6030      	str	r0, [r6, #0]
 8012250:	062e      	lsls	r6, r5, #24
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	d501      	bpl.n	801225a <_printf_i+0x1be>
 8012256:	6019      	str	r1, [r3, #0]
 8012258:	e002      	b.n	8012260 <_printf_i+0x1c4>
 801225a:	0668      	lsls	r0, r5, #25
 801225c:	d5fb      	bpl.n	8012256 <_printf_i+0x1ba>
 801225e:	8019      	strh	r1, [r3, #0]
 8012260:	2300      	movs	r3, #0
 8012262:	6123      	str	r3, [r4, #16]
 8012264:	4616      	mov	r6, r2
 8012266:	e7bc      	b.n	80121e2 <_printf_i+0x146>
 8012268:	6833      	ldr	r3, [r6, #0]
 801226a:	1d1a      	adds	r2, r3, #4
 801226c:	6032      	str	r2, [r6, #0]
 801226e:	681e      	ldr	r6, [r3, #0]
 8012270:	6862      	ldr	r2, [r4, #4]
 8012272:	2100      	movs	r1, #0
 8012274:	4630      	mov	r0, r6
 8012276:	f7ed ffab 	bl	80001d0 <memchr>
 801227a:	b108      	cbz	r0, 8012280 <_printf_i+0x1e4>
 801227c:	1b80      	subs	r0, r0, r6
 801227e:	6060      	str	r0, [r4, #4]
 8012280:	6863      	ldr	r3, [r4, #4]
 8012282:	6123      	str	r3, [r4, #16]
 8012284:	2300      	movs	r3, #0
 8012286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801228a:	e7aa      	b.n	80121e2 <_printf_i+0x146>
 801228c:	6923      	ldr	r3, [r4, #16]
 801228e:	4632      	mov	r2, r6
 8012290:	4649      	mov	r1, r9
 8012292:	4640      	mov	r0, r8
 8012294:	47d0      	blx	sl
 8012296:	3001      	adds	r0, #1
 8012298:	d0ad      	beq.n	80121f6 <_printf_i+0x15a>
 801229a:	6823      	ldr	r3, [r4, #0]
 801229c:	079b      	lsls	r3, r3, #30
 801229e:	d413      	bmi.n	80122c8 <_printf_i+0x22c>
 80122a0:	68e0      	ldr	r0, [r4, #12]
 80122a2:	9b03      	ldr	r3, [sp, #12]
 80122a4:	4298      	cmp	r0, r3
 80122a6:	bfb8      	it	lt
 80122a8:	4618      	movlt	r0, r3
 80122aa:	e7a6      	b.n	80121fa <_printf_i+0x15e>
 80122ac:	2301      	movs	r3, #1
 80122ae:	4632      	mov	r2, r6
 80122b0:	4649      	mov	r1, r9
 80122b2:	4640      	mov	r0, r8
 80122b4:	47d0      	blx	sl
 80122b6:	3001      	adds	r0, #1
 80122b8:	d09d      	beq.n	80121f6 <_printf_i+0x15a>
 80122ba:	3501      	adds	r5, #1
 80122bc:	68e3      	ldr	r3, [r4, #12]
 80122be:	9903      	ldr	r1, [sp, #12]
 80122c0:	1a5b      	subs	r3, r3, r1
 80122c2:	42ab      	cmp	r3, r5
 80122c4:	dcf2      	bgt.n	80122ac <_printf_i+0x210>
 80122c6:	e7eb      	b.n	80122a0 <_printf_i+0x204>
 80122c8:	2500      	movs	r5, #0
 80122ca:	f104 0619 	add.w	r6, r4, #25
 80122ce:	e7f5      	b.n	80122bc <_printf_i+0x220>
 80122d0:	08015598 	.word	0x08015598
 80122d4:	080155a9 	.word	0x080155a9

080122d8 <__sflush_r>:
 80122d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80122dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e0:	0716      	lsls	r6, r2, #28
 80122e2:	4605      	mov	r5, r0
 80122e4:	460c      	mov	r4, r1
 80122e6:	d454      	bmi.n	8012392 <__sflush_r+0xba>
 80122e8:	684b      	ldr	r3, [r1, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	dc02      	bgt.n	80122f4 <__sflush_r+0x1c>
 80122ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	dd48      	ble.n	8012386 <__sflush_r+0xae>
 80122f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80122f6:	2e00      	cmp	r6, #0
 80122f8:	d045      	beq.n	8012386 <__sflush_r+0xae>
 80122fa:	2300      	movs	r3, #0
 80122fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012300:	682f      	ldr	r7, [r5, #0]
 8012302:	6a21      	ldr	r1, [r4, #32]
 8012304:	602b      	str	r3, [r5, #0]
 8012306:	d030      	beq.n	801236a <__sflush_r+0x92>
 8012308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801230a:	89a3      	ldrh	r3, [r4, #12]
 801230c:	0759      	lsls	r1, r3, #29
 801230e:	d505      	bpl.n	801231c <__sflush_r+0x44>
 8012310:	6863      	ldr	r3, [r4, #4]
 8012312:	1ad2      	subs	r2, r2, r3
 8012314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012316:	b10b      	cbz	r3, 801231c <__sflush_r+0x44>
 8012318:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801231a:	1ad2      	subs	r2, r2, r3
 801231c:	2300      	movs	r3, #0
 801231e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012320:	6a21      	ldr	r1, [r4, #32]
 8012322:	4628      	mov	r0, r5
 8012324:	47b0      	blx	r6
 8012326:	1c43      	adds	r3, r0, #1
 8012328:	89a3      	ldrh	r3, [r4, #12]
 801232a:	d106      	bne.n	801233a <__sflush_r+0x62>
 801232c:	6829      	ldr	r1, [r5, #0]
 801232e:	291d      	cmp	r1, #29
 8012330:	d82b      	bhi.n	801238a <__sflush_r+0xb2>
 8012332:	4a2a      	ldr	r2, [pc, #168]	@ (80123dc <__sflush_r+0x104>)
 8012334:	40ca      	lsrs	r2, r1
 8012336:	07d6      	lsls	r6, r2, #31
 8012338:	d527      	bpl.n	801238a <__sflush_r+0xb2>
 801233a:	2200      	movs	r2, #0
 801233c:	6062      	str	r2, [r4, #4]
 801233e:	04d9      	lsls	r1, r3, #19
 8012340:	6922      	ldr	r2, [r4, #16]
 8012342:	6022      	str	r2, [r4, #0]
 8012344:	d504      	bpl.n	8012350 <__sflush_r+0x78>
 8012346:	1c42      	adds	r2, r0, #1
 8012348:	d101      	bne.n	801234e <__sflush_r+0x76>
 801234a:	682b      	ldr	r3, [r5, #0]
 801234c:	b903      	cbnz	r3, 8012350 <__sflush_r+0x78>
 801234e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012352:	602f      	str	r7, [r5, #0]
 8012354:	b1b9      	cbz	r1, 8012386 <__sflush_r+0xae>
 8012356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801235a:	4299      	cmp	r1, r3
 801235c:	d002      	beq.n	8012364 <__sflush_r+0x8c>
 801235e:	4628      	mov	r0, r5
 8012360:	f7ff fa94 	bl	801188c <_free_r>
 8012364:	2300      	movs	r3, #0
 8012366:	6363      	str	r3, [r4, #52]	@ 0x34
 8012368:	e00d      	b.n	8012386 <__sflush_r+0xae>
 801236a:	2301      	movs	r3, #1
 801236c:	4628      	mov	r0, r5
 801236e:	47b0      	blx	r6
 8012370:	4602      	mov	r2, r0
 8012372:	1c50      	adds	r0, r2, #1
 8012374:	d1c9      	bne.n	801230a <__sflush_r+0x32>
 8012376:	682b      	ldr	r3, [r5, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d0c6      	beq.n	801230a <__sflush_r+0x32>
 801237c:	2b1d      	cmp	r3, #29
 801237e:	d001      	beq.n	8012384 <__sflush_r+0xac>
 8012380:	2b16      	cmp	r3, #22
 8012382:	d11e      	bne.n	80123c2 <__sflush_r+0xea>
 8012384:	602f      	str	r7, [r5, #0]
 8012386:	2000      	movs	r0, #0
 8012388:	e022      	b.n	80123d0 <__sflush_r+0xf8>
 801238a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801238e:	b21b      	sxth	r3, r3
 8012390:	e01b      	b.n	80123ca <__sflush_r+0xf2>
 8012392:	690f      	ldr	r7, [r1, #16]
 8012394:	2f00      	cmp	r7, #0
 8012396:	d0f6      	beq.n	8012386 <__sflush_r+0xae>
 8012398:	0793      	lsls	r3, r2, #30
 801239a:	680e      	ldr	r6, [r1, #0]
 801239c:	bf08      	it	eq
 801239e:	694b      	ldreq	r3, [r1, #20]
 80123a0:	600f      	str	r7, [r1, #0]
 80123a2:	bf18      	it	ne
 80123a4:	2300      	movne	r3, #0
 80123a6:	eba6 0807 	sub.w	r8, r6, r7
 80123aa:	608b      	str	r3, [r1, #8]
 80123ac:	f1b8 0f00 	cmp.w	r8, #0
 80123b0:	dde9      	ble.n	8012386 <__sflush_r+0xae>
 80123b2:	6a21      	ldr	r1, [r4, #32]
 80123b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80123b6:	4643      	mov	r3, r8
 80123b8:	463a      	mov	r2, r7
 80123ba:	4628      	mov	r0, r5
 80123bc:	47b0      	blx	r6
 80123be:	2800      	cmp	r0, #0
 80123c0:	dc08      	bgt.n	80123d4 <__sflush_r+0xfc>
 80123c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123ca:	81a3      	strh	r3, [r4, #12]
 80123cc:	f04f 30ff 	mov.w	r0, #4294967295
 80123d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123d4:	4407      	add	r7, r0
 80123d6:	eba8 0800 	sub.w	r8, r8, r0
 80123da:	e7e7      	b.n	80123ac <__sflush_r+0xd4>
 80123dc:	20400001 	.word	0x20400001

080123e0 <_fflush_r>:
 80123e0:	b538      	push	{r3, r4, r5, lr}
 80123e2:	690b      	ldr	r3, [r1, #16]
 80123e4:	4605      	mov	r5, r0
 80123e6:	460c      	mov	r4, r1
 80123e8:	b913      	cbnz	r3, 80123f0 <_fflush_r+0x10>
 80123ea:	2500      	movs	r5, #0
 80123ec:	4628      	mov	r0, r5
 80123ee:	bd38      	pop	{r3, r4, r5, pc}
 80123f0:	b118      	cbz	r0, 80123fa <_fflush_r+0x1a>
 80123f2:	6a03      	ldr	r3, [r0, #32]
 80123f4:	b90b      	cbnz	r3, 80123fa <_fflush_r+0x1a>
 80123f6:	f7ff f8c1 	bl	801157c <__sinit>
 80123fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d0f3      	beq.n	80123ea <_fflush_r+0xa>
 8012402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012404:	07d0      	lsls	r0, r2, #31
 8012406:	d404      	bmi.n	8012412 <_fflush_r+0x32>
 8012408:	0599      	lsls	r1, r3, #22
 801240a:	d402      	bmi.n	8012412 <_fflush_r+0x32>
 801240c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801240e:	f7ff fa26 	bl	801185e <__retarget_lock_acquire_recursive>
 8012412:	4628      	mov	r0, r5
 8012414:	4621      	mov	r1, r4
 8012416:	f7ff ff5f 	bl	80122d8 <__sflush_r>
 801241a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801241c:	07da      	lsls	r2, r3, #31
 801241e:	4605      	mov	r5, r0
 8012420:	d4e4      	bmi.n	80123ec <_fflush_r+0xc>
 8012422:	89a3      	ldrh	r3, [r4, #12]
 8012424:	059b      	lsls	r3, r3, #22
 8012426:	d4e1      	bmi.n	80123ec <_fflush_r+0xc>
 8012428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801242a:	f7ff fa19 	bl	8011860 <__retarget_lock_release_recursive>
 801242e:	e7dd      	b.n	80123ec <_fflush_r+0xc>

08012430 <__swbuf_r>:
 8012430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012432:	460e      	mov	r6, r1
 8012434:	4614      	mov	r4, r2
 8012436:	4605      	mov	r5, r0
 8012438:	b118      	cbz	r0, 8012442 <__swbuf_r+0x12>
 801243a:	6a03      	ldr	r3, [r0, #32]
 801243c:	b90b      	cbnz	r3, 8012442 <__swbuf_r+0x12>
 801243e:	f7ff f89d 	bl	801157c <__sinit>
 8012442:	69a3      	ldr	r3, [r4, #24]
 8012444:	60a3      	str	r3, [r4, #8]
 8012446:	89a3      	ldrh	r3, [r4, #12]
 8012448:	071a      	lsls	r2, r3, #28
 801244a:	d501      	bpl.n	8012450 <__swbuf_r+0x20>
 801244c:	6923      	ldr	r3, [r4, #16]
 801244e:	b943      	cbnz	r3, 8012462 <__swbuf_r+0x32>
 8012450:	4621      	mov	r1, r4
 8012452:	4628      	mov	r0, r5
 8012454:	f000 f82a 	bl	80124ac <__swsetup_r>
 8012458:	b118      	cbz	r0, 8012462 <__swbuf_r+0x32>
 801245a:	f04f 37ff 	mov.w	r7, #4294967295
 801245e:	4638      	mov	r0, r7
 8012460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012462:	6823      	ldr	r3, [r4, #0]
 8012464:	6922      	ldr	r2, [r4, #16]
 8012466:	1a98      	subs	r0, r3, r2
 8012468:	6963      	ldr	r3, [r4, #20]
 801246a:	b2f6      	uxtb	r6, r6
 801246c:	4283      	cmp	r3, r0
 801246e:	4637      	mov	r7, r6
 8012470:	dc05      	bgt.n	801247e <__swbuf_r+0x4e>
 8012472:	4621      	mov	r1, r4
 8012474:	4628      	mov	r0, r5
 8012476:	f7ff ffb3 	bl	80123e0 <_fflush_r>
 801247a:	2800      	cmp	r0, #0
 801247c:	d1ed      	bne.n	801245a <__swbuf_r+0x2a>
 801247e:	68a3      	ldr	r3, [r4, #8]
 8012480:	3b01      	subs	r3, #1
 8012482:	60a3      	str	r3, [r4, #8]
 8012484:	6823      	ldr	r3, [r4, #0]
 8012486:	1c5a      	adds	r2, r3, #1
 8012488:	6022      	str	r2, [r4, #0]
 801248a:	701e      	strb	r6, [r3, #0]
 801248c:	6962      	ldr	r2, [r4, #20]
 801248e:	1c43      	adds	r3, r0, #1
 8012490:	429a      	cmp	r2, r3
 8012492:	d004      	beq.n	801249e <__swbuf_r+0x6e>
 8012494:	89a3      	ldrh	r3, [r4, #12]
 8012496:	07db      	lsls	r3, r3, #31
 8012498:	d5e1      	bpl.n	801245e <__swbuf_r+0x2e>
 801249a:	2e0a      	cmp	r6, #10
 801249c:	d1df      	bne.n	801245e <__swbuf_r+0x2e>
 801249e:	4621      	mov	r1, r4
 80124a0:	4628      	mov	r0, r5
 80124a2:	f7ff ff9d 	bl	80123e0 <_fflush_r>
 80124a6:	2800      	cmp	r0, #0
 80124a8:	d0d9      	beq.n	801245e <__swbuf_r+0x2e>
 80124aa:	e7d6      	b.n	801245a <__swbuf_r+0x2a>

080124ac <__swsetup_r>:
 80124ac:	b538      	push	{r3, r4, r5, lr}
 80124ae:	4b29      	ldr	r3, [pc, #164]	@ (8012554 <__swsetup_r+0xa8>)
 80124b0:	4605      	mov	r5, r0
 80124b2:	6818      	ldr	r0, [r3, #0]
 80124b4:	460c      	mov	r4, r1
 80124b6:	b118      	cbz	r0, 80124c0 <__swsetup_r+0x14>
 80124b8:	6a03      	ldr	r3, [r0, #32]
 80124ba:	b90b      	cbnz	r3, 80124c0 <__swsetup_r+0x14>
 80124bc:	f7ff f85e 	bl	801157c <__sinit>
 80124c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124c4:	0719      	lsls	r1, r3, #28
 80124c6:	d422      	bmi.n	801250e <__swsetup_r+0x62>
 80124c8:	06da      	lsls	r2, r3, #27
 80124ca:	d407      	bmi.n	80124dc <__swsetup_r+0x30>
 80124cc:	2209      	movs	r2, #9
 80124ce:	602a      	str	r2, [r5, #0]
 80124d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124d4:	81a3      	strh	r3, [r4, #12]
 80124d6:	f04f 30ff 	mov.w	r0, #4294967295
 80124da:	e033      	b.n	8012544 <__swsetup_r+0x98>
 80124dc:	0758      	lsls	r0, r3, #29
 80124de:	d512      	bpl.n	8012506 <__swsetup_r+0x5a>
 80124e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80124e2:	b141      	cbz	r1, 80124f6 <__swsetup_r+0x4a>
 80124e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80124e8:	4299      	cmp	r1, r3
 80124ea:	d002      	beq.n	80124f2 <__swsetup_r+0x46>
 80124ec:	4628      	mov	r0, r5
 80124ee:	f7ff f9cd 	bl	801188c <_free_r>
 80124f2:	2300      	movs	r3, #0
 80124f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80124f6:	89a3      	ldrh	r3, [r4, #12]
 80124f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80124fc:	81a3      	strh	r3, [r4, #12]
 80124fe:	2300      	movs	r3, #0
 8012500:	6063      	str	r3, [r4, #4]
 8012502:	6923      	ldr	r3, [r4, #16]
 8012504:	6023      	str	r3, [r4, #0]
 8012506:	89a3      	ldrh	r3, [r4, #12]
 8012508:	f043 0308 	orr.w	r3, r3, #8
 801250c:	81a3      	strh	r3, [r4, #12]
 801250e:	6923      	ldr	r3, [r4, #16]
 8012510:	b94b      	cbnz	r3, 8012526 <__swsetup_r+0x7a>
 8012512:	89a3      	ldrh	r3, [r4, #12]
 8012514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801251c:	d003      	beq.n	8012526 <__swsetup_r+0x7a>
 801251e:	4621      	mov	r1, r4
 8012520:	4628      	mov	r0, r5
 8012522:	f000 f8c1 	bl	80126a8 <__smakebuf_r>
 8012526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801252a:	f013 0201 	ands.w	r2, r3, #1
 801252e:	d00a      	beq.n	8012546 <__swsetup_r+0x9a>
 8012530:	2200      	movs	r2, #0
 8012532:	60a2      	str	r2, [r4, #8]
 8012534:	6962      	ldr	r2, [r4, #20]
 8012536:	4252      	negs	r2, r2
 8012538:	61a2      	str	r2, [r4, #24]
 801253a:	6922      	ldr	r2, [r4, #16]
 801253c:	b942      	cbnz	r2, 8012550 <__swsetup_r+0xa4>
 801253e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012542:	d1c5      	bne.n	80124d0 <__swsetup_r+0x24>
 8012544:	bd38      	pop	{r3, r4, r5, pc}
 8012546:	0799      	lsls	r1, r3, #30
 8012548:	bf58      	it	pl
 801254a:	6962      	ldrpl	r2, [r4, #20]
 801254c:	60a2      	str	r2, [r4, #8]
 801254e:	e7f4      	b.n	801253a <__swsetup_r+0x8e>
 8012550:	2000      	movs	r0, #0
 8012552:	e7f7      	b.n	8012544 <__swsetup_r+0x98>
 8012554:	200000b8 	.word	0x200000b8

08012558 <_raise_r>:
 8012558:	291f      	cmp	r1, #31
 801255a:	b538      	push	{r3, r4, r5, lr}
 801255c:	4605      	mov	r5, r0
 801255e:	460c      	mov	r4, r1
 8012560:	d904      	bls.n	801256c <_raise_r+0x14>
 8012562:	2316      	movs	r3, #22
 8012564:	6003      	str	r3, [r0, #0]
 8012566:	f04f 30ff 	mov.w	r0, #4294967295
 801256a:	bd38      	pop	{r3, r4, r5, pc}
 801256c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801256e:	b112      	cbz	r2, 8012576 <_raise_r+0x1e>
 8012570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012574:	b94b      	cbnz	r3, 801258a <_raise_r+0x32>
 8012576:	4628      	mov	r0, r5
 8012578:	f000 f830 	bl	80125dc <_getpid_r>
 801257c:	4622      	mov	r2, r4
 801257e:	4601      	mov	r1, r0
 8012580:	4628      	mov	r0, r5
 8012582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012586:	f000 b817 	b.w	80125b8 <_kill_r>
 801258a:	2b01      	cmp	r3, #1
 801258c:	d00a      	beq.n	80125a4 <_raise_r+0x4c>
 801258e:	1c59      	adds	r1, r3, #1
 8012590:	d103      	bne.n	801259a <_raise_r+0x42>
 8012592:	2316      	movs	r3, #22
 8012594:	6003      	str	r3, [r0, #0]
 8012596:	2001      	movs	r0, #1
 8012598:	e7e7      	b.n	801256a <_raise_r+0x12>
 801259a:	2100      	movs	r1, #0
 801259c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80125a0:	4620      	mov	r0, r4
 80125a2:	4798      	blx	r3
 80125a4:	2000      	movs	r0, #0
 80125a6:	e7e0      	b.n	801256a <_raise_r+0x12>

080125a8 <raise>:
 80125a8:	4b02      	ldr	r3, [pc, #8]	@ (80125b4 <raise+0xc>)
 80125aa:	4601      	mov	r1, r0
 80125ac:	6818      	ldr	r0, [r3, #0]
 80125ae:	f7ff bfd3 	b.w	8012558 <_raise_r>
 80125b2:	bf00      	nop
 80125b4:	200000b8 	.word	0x200000b8

080125b8 <_kill_r>:
 80125b8:	b538      	push	{r3, r4, r5, lr}
 80125ba:	4d07      	ldr	r5, [pc, #28]	@ (80125d8 <_kill_r+0x20>)
 80125bc:	2300      	movs	r3, #0
 80125be:	4604      	mov	r4, r0
 80125c0:	4608      	mov	r0, r1
 80125c2:	4611      	mov	r1, r2
 80125c4:	602b      	str	r3, [r5, #0]
 80125c6:	f7ee fbb1 	bl	8000d2c <_kill>
 80125ca:	1c43      	adds	r3, r0, #1
 80125cc:	d102      	bne.n	80125d4 <_kill_r+0x1c>
 80125ce:	682b      	ldr	r3, [r5, #0]
 80125d0:	b103      	cbz	r3, 80125d4 <_kill_r+0x1c>
 80125d2:	6023      	str	r3, [r4, #0]
 80125d4:	bd38      	pop	{r3, r4, r5, pc}
 80125d6:	bf00      	nop
 80125d8:	200086d4 	.word	0x200086d4

080125dc <_getpid_r>:
 80125dc:	f7ee bb9e 	b.w	8000d1c <_getpid>

080125e0 <_sbrk_r>:
 80125e0:	b538      	push	{r3, r4, r5, lr}
 80125e2:	4d06      	ldr	r5, [pc, #24]	@ (80125fc <_sbrk_r+0x1c>)
 80125e4:	2300      	movs	r3, #0
 80125e6:	4604      	mov	r4, r0
 80125e8:	4608      	mov	r0, r1
 80125ea:	602b      	str	r3, [r5, #0]
 80125ec:	f7ee fc28 	bl	8000e40 <_sbrk>
 80125f0:	1c43      	adds	r3, r0, #1
 80125f2:	d102      	bne.n	80125fa <_sbrk_r+0x1a>
 80125f4:	682b      	ldr	r3, [r5, #0]
 80125f6:	b103      	cbz	r3, 80125fa <_sbrk_r+0x1a>
 80125f8:	6023      	str	r3, [r4, #0]
 80125fa:	bd38      	pop	{r3, r4, r5, pc}
 80125fc:	200086d4 	.word	0x200086d4

08012600 <_realloc_r>:
 8012600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012604:	4607      	mov	r7, r0
 8012606:	4614      	mov	r4, r2
 8012608:	460d      	mov	r5, r1
 801260a:	b921      	cbnz	r1, 8012616 <_realloc_r+0x16>
 801260c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012610:	4611      	mov	r1, r2
 8012612:	f7ff b9af 	b.w	8011974 <_malloc_r>
 8012616:	b92a      	cbnz	r2, 8012624 <_realloc_r+0x24>
 8012618:	f7ff f938 	bl	801188c <_free_r>
 801261c:	4625      	mov	r5, r4
 801261e:	4628      	mov	r0, r5
 8012620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012624:	f000 f89e 	bl	8012764 <_malloc_usable_size_r>
 8012628:	4284      	cmp	r4, r0
 801262a:	4606      	mov	r6, r0
 801262c:	d802      	bhi.n	8012634 <_realloc_r+0x34>
 801262e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012632:	d8f4      	bhi.n	801261e <_realloc_r+0x1e>
 8012634:	4621      	mov	r1, r4
 8012636:	4638      	mov	r0, r7
 8012638:	f7ff f99c 	bl	8011974 <_malloc_r>
 801263c:	4680      	mov	r8, r0
 801263e:	b908      	cbnz	r0, 8012644 <_realloc_r+0x44>
 8012640:	4645      	mov	r5, r8
 8012642:	e7ec      	b.n	801261e <_realloc_r+0x1e>
 8012644:	42b4      	cmp	r4, r6
 8012646:	4622      	mov	r2, r4
 8012648:	4629      	mov	r1, r5
 801264a:	bf28      	it	cs
 801264c:	4632      	movcs	r2, r6
 801264e:	f7ff f908 	bl	8011862 <memcpy>
 8012652:	4629      	mov	r1, r5
 8012654:	4638      	mov	r0, r7
 8012656:	f7ff f919 	bl	801188c <_free_r>
 801265a:	e7f1      	b.n	8012640 <_realloc_r+0x40>

0801265c <__swhatbuf_r>:
 801265c:	b570      	push	{r4, r5, r6, lr}
 801265e:	460c      	mov	r4, r1
 8012660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012664:	2900      	cmp	r1, #0
 8012666:	b096      	sub	sp, #88	@ 0x58
 8012668:	4615      	mov	r5, r2
 801266a:	461e      	mov	r6, r3
 801266c:	da0d      	bge.n	801268a <__swhatbuf_r+0x2e>
 801266e:	89a3      	ldrh	r3, [r4, #12]
 8012670:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012674:	f04f 0100 	mov.w	r1, #0
 8012678:	bf14      	ite	ne
 801267a:	2340      	movne	r3, #64	@ 0x40
 801267c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012680:	2000      	movs	r0, #0
 8012682:	6031      	str	r1, [r6, #0]
 8012684:	602b      	str	r3, [r5, #0]
 8012686:	b016      	add	sp, #88	@ 0x58
 8012688:	bd70      	pop	{r4, r5, r6, pc}
 801268a:	466a      	mov	r2, sp
 801268c:	f000 f848 	bl	8012720 <_fstat_r>
 8012690:	2800      	cmp	r0, #0
 8012692:	dbec      	blt.n	801266e <__swhatbuf_r+0x12>
 8012694:	9901      	ldr	r1, [sp, #4]
 8012696:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801269a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801269e:	4259      	negs	r1, r3
 80126a0:	4159      	adcs	r1, r3
 80126a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80126a6:	e7eb      	b.n	8012680 <__swhatbuf_r+0x24>

080126a8 <__smakebuf_r>:
 80126a8:	898b      	ldrh	r3, [r1, #12]
 80126aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126ac:	079d      	lsls	r5, r3, #30
 80126ae:	4606      	mov	r6, r0
 80126b0:	460c      	mov	r4, r1
 80126b2:	d507      	bpl.n	80126c4 <__smakebuf_r+0x1c>
 80126b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80126b8:	6023      	str	r3, [r4, #0]
 80126ba:	6123      	str	r3, [r4, #16]
 80126bc:	2301      	movs	r3, #1
 80126be:	6163      	str	r3, [r4, #20]
 80126c0:	b003      	add	sp, #12
 80126c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126c4:	ab01      	add	r3, sp, #4
 80126c6:	466a      	mov	r2, sp
 80126c8:	f7ff ffc8 	bl	801265c <__swhatbuf_r>
 80126cc:	9f00      	ldr	r7, [sp, #0]
 80126ce:	4605      	mov	r5, r0
 80126d0:	4639      	mov	r1, r7
 80126d2:	4630      	mov	r0, r6
 80126d4:	f7ff f94e 	bl	8011974 <_malloc_r>
 80126d8:	b948      	cbnz	r0, 80126ee <__smakebuf_r+0x46>
 80126da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126de:	059a      	lsls	r2, r3, #22
 80126e0:	d4ee      	bmi.n	80126c0 <__smakebuf_r+0x18>
 80126e2:	f023 0303 	bic.w	r3, r3, #3
 80126e6:	f043 0302 	orr.w	r3, r3, #2
 80126ea:	81a3      	strh	r3, [r4, #12]
 80126ec:	e7e2      	b.n	80126b4 <__smakebuf_r+0xc>
 80126ee:	89a3      	ldrh	r3, [r4, #12]
 80126f0:	6020      	str	r0, [r4, #0]
 80126f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126f6:	81a3      	strh	r3, [r4, #12]
 80126f8:	9b01      	ldr	r3, [sp, #4]
 80126fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80126fe:	b15b      	cbz	r3, 8012718 <__smakebuf_r+0x70>
 8012700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012704:	4630      	mov	r0, r6
 8012706:	f000 f81d 	bl	8012744 <_isatty_r>
 801270a:	b128      	cbz	r0, 8012718 <__smakebuf_r+0x70>
 801270c:	89a3      	ldrh	r3, [r4, #12]
 801270e:	f023 0303 	bic.w	r3, r3, #3
 8012712:	f043 0301 	orr.w	r3, r3, #1
 8012716:	81a3      	strh	r3, [r4, #12]
 8012718:	89a3      	ldrh	r3, [r4, #12]
 801271a:	431d      	orrs	r5, r3
 801271c:	81a5      	strh	r5, [r4, #12]
 801271e:	e7cf      	b.n	80126c0 <__smakebuf_r+0x18>

08012720 <_fstat_r>:
 8012720:	b538      	push	{r3, r4, r5, lr}
 8012722:	4d07      	ldr	r5, [pc, #28]	@ (8012740 <_fstat_r+0x20>)
 8012724:	2300      	movs	r3, #0
 8012726:	4604      	mov	r4, r0
 8012728:	4608      	mov	r0, r1
 801272a:	4611      	mov	r1, r2
 801272c:	602b      	str	r3, [r5, #0]
 801272e:	f7ee fb5f 	bl	8000df0 <_fstat>
 8012732:	1c43      	adds	r3, r0, #1
 8012734:	d102      	bne.n	801273c <_fstat_r+0x1c>
 8012736:	682b      	ldr	r3, [r5, #0]
 8012738:	b103      	cbz	r3, 801273c <_fstat_r+0x1c>
 801273a:	6023      	str	r3, [r4, #0]
 801273c:	bd38      	pop	{r3, r4, r5, pc}
 801273e:	bf00      	nop
 8012740:	200086d4 	.word	0x200086d4

08012744 <_isatty_r>:
 8012744:	b538      	push	{r3, r4, r5, lr}
 8012746:	4d06      	ldr	r5, [pc, #24]	@ (8012760 <_isatty_r+0x1c>)
 8012748:	2300      	movs	r3, #0
 801274a:	4604      	mov	r4, r0
 801274c:	4608      	mov	r0, r1
 801274e:	602b      	str	r3, [r5, #0]
 8012750:	f7ee fb5e 	bl	8000e10 <_isatty>
 8012754:	1c43      	adds	r3, r0, #1
 8012756:	d102      	bne.n	801275e <_isatty_r+0x1a>
 8012758:	682b      	ldr	r3, [r5, #0]
 801275a:	b103      	cbz	r3, 801275e <_isatty_r+0x1a>
 801275c:	6023      	str	r3, [r4, #0]
 801275e:	bd38      	pop	{r3, r4, r5, pc}
 8012760:	200086d4 	.word	0x200086d4

08012764 <_malloc_usable_size_r>:
 8012764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012768:	1f18      	subs	r0, r3, #4
 801276a:	2b00      	cmp	r3, #0
 801276c:	bfbc      	itt	lt
 801276e:	580b      	ldrlt	r3, [r1, r0]
 8012770:	18c0      	addlt	r0, r0, r3
 8012772:	4770      	bx	lr

08012774 <_init>:
 8012774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012776:	bf00      	nop
 8012778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801277a:	bc08      	pop	{r3}
 801277c:	469e      	mov	lr, r3
 801277e:	4770      	bx	lr

08012780 <_fini>:
 8012780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012782:	bf00      	nop
 8012784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012786:	bc08      	pop	{r3}
 8012788:	469e      	mov	lr, r3
 801278a:	4770      	bx	lr
